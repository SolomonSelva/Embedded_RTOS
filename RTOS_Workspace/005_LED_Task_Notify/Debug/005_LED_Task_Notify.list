
005_LED_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d28  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08007f28  08007f28  00008f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080c8  080080c8  0000a01c  2**0
                  CONTENTS
  4 .ARM          00000008  080080c8  080080c8  000090c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080d0  080080d0  0000a01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080d0  080080d0  000090d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080080d4  080080d4  000090d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080080d8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c4a4  2000001c  080080f4  0000a01c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c4c0  080080f4  0000a4c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a01c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016239  00000000  00000000  0000a04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003160  00000000  00000000  00020283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  000233e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001001  00000000  00000000  000248b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c0b8  00000000  00000000  000258b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197c2  00000000  00000000  00051971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116e2e  00000000  00000000  0006b133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181f61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f4  00000000  00000000  00181fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ee  00000000  00000000  00187698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000001c 	.word	0x2000001c
 800021c:	00000000 	.word	0x00000000
 8000220:	08007f10 	.word	0x08007f10

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000020 	.word	0x20000020
 800023c:	08007f10 	.word	0x08007f10

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	2000baec 	.word	0x2000baec

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b96a 	b.w	80005c0 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	460c      	mov	r4, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14e      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000310:	4694      	mov	ip, r2
 8000312:	458c      	cmp	ip, r1
 8000314:	4686      	mov	lr, r0
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	d962      	bls.n	80003e2 <__udivmoddi4+0xde>
 800031c:	b14a      	cbz	r2, 8000332 <__udivmoddi4+0x2e>
 800031e:	f1c2 0320 	rsb	r3, r2, #32
 8000322:	4091      	lsls	r1, r2
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	fa0c fc02 	lsl.w	ip, ip, r2
 800032c:	4319      	orrs	r1, r3
 800032e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f f68c 	uxth.w	r6, ip
 800033a:	fbb1 f4f7 	udiv	r4, r1, r7
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb07 1114 	mls	r1, r7, r4, r1
 8000346:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034a:	fb04 f106 	mul.w	r1, r4, r6
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f104 30ff 	add.w	r0, r4, #4294967295
 800035a:	f080 8112 	bcs.w	8000582 <__udivmoddi4+0x27e>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 810f 	bls.w	8000582 <__udivmoddi4+0x27e>
 8000364:	3c02      	subs	r4, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	fa1f f38e 	uxth.w	r3, lr
 800036e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000372:	fb07 1110 	mls	r1, r7, r0, r1
 8000376:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037a:	fb00 f606 	mul.w	r6, r0, r6
 800037e:	429e      	cmp	r6, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x94>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f100 31ff 	add.w	r1, r0, #4294967295
 800038a:	f080 80fc 	bcs.w	8000586 <__udivmoddi4+0x282>
 800038e:	429e      	cmp	r6, r3
 8000390:	f240 80f9 	bls.w	8000586 <__udivmoddi4+0x282>
 8000394:	4463      	add	r3, ip
 8000396:	3802      	subs	r0, #2
 8000398:	1b9b      	subs	r3, r3, r6
 800039a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa6>
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xba>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb4>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa6>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x150>
 80003c6:	42a3      	cmp	r3, r4
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xcc>
 80003ca:	4290      	cmp	r0, r2
 80003cc:	f0c0 80f0 	bcc.w	80005b0 <__udivmoddi4+0x2ac>
 80003d0:	1a86      	subs	r6, r0, r2
 80003d2:	eb64 0303 	sbc.w	r3, r4, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	2d00      	cmp	r5, #0
 80003da:	d0e6      	beq.n	80003aa <__udivmoddi4+0xa6>
 80003dc:	e9c5 6300 	strd	r6, r3, [r5]
 80003e0:	e7e3      	b.n	80003aa <__udivmoddi4+0xa6>
 80003e2:	2a00      	cmp	r2, #0
 80003e4:	f040 8090 	bne.w	8000508 <__udivmoddi4+0x204>
 80003e8:	eba1 040c 	sub.w	r4, r1, ip
 80003ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f0:	fa1f f78c 	uxth.w	r7, ip
 80003f4:	2101      	movs	r1, #1
 80003f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000402:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000406:	fb07 f006 	mul.w	r0, r7, r6
 800040a:	4298      	cmp	r0, r3
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x11c>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 34ff 	add.w	r4, r6, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0x11a>
 8000418:	4298      	cmp	r0, r3
 800041a:	f200 80cd 	bhi.w	80005b8 <__udivmoddi4+0x2b4>
 800041e:	4626      	mov	r6, r4
 8000420:	1a1c      	subs	r4, r3, r0
 8000422:	fa1f f38e 	uxth.w	r3, lr
 8000426:	fbb4 f0f8 	udiv	r0, r4, r8
 800042a:	fb08 4410 	mls	r4, r8, r0, r4
 800042e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000432:	fb00 f707 	mul.w	r7, r0, r7
 8000436:	429f      	cmp	r7, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x148>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x146>
 8000444:	429f      	cmp	r7, r3
 8000446:	f200 80b0 	bhi.w	80005aa <__udivmoddi4+0x2a6>
 800044a:	4620      	mov	r0, r4
 800044c:	1bdb      	subs	r3, r3, r7
 800044e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x9c>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa20 fc06 	lsr.w	ip, r0, r6
 8000464:	fa04 f301 	lsl.w	r3, r4, r1
 8000468:	ea43 030c 	orr.w	r3, r3, ip
 800046c:	40f4      	lsrs	r4, r6
 800046e:	fa00 f801 	lsl.w	r8, r0, r1
 8000472:	0c38      	lsrs	r0, r7, #16
 8000474:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000478:	fbb4 fef0 	udiv	lr, r4, r0
 800047c:	fa1f fc87 	uxth.w	ip, r7
 8000480:	fb00 441e 	mls	r4, r0, lr, r4
 8000484:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000488:	fb0e f90c 	mul.w	r9, lr, ip
 800048c:	45a1      	cmp	r9, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d90a      	bls.n	80004aa <__udivmoddi4+0x1a6>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049a:	f080 8084 	bcs.w	80005a6 <__udivmoddi4+0x2a2>
 800049e:	45a1      	cmp	r9, r4
 80004a0:	f240 8081 	bls.w	80005a6 <__udivmoddi4+0x2a2>
 80004a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a8:	443c      	add	r4, r7
 80004aa:	eba4 0409 	sub.w	r4, r4, r9
 80004ae:	fa1f f983 	uxth.w	r9, r3
 80004b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004be:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x1d2>
 80004c6:	193c      	adds	r4, r7, r4
 80004c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004cc:	d267      	bcs.n	800059e <__udivmoddi4+0x29a>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d965      	bls.n	800059e <__udivmoddi4+0x29a>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004da:	fba0 9302 	umull	r9, r3, r0, r2
 80004de:	eba4 040c 	sub.w	r4, r4, ip
 80004e2:	429c      	cmp	r4, r3
 80004e4:	46ce      	mov	lr, r9
 80004e6:	469c      	mov	ip, r3
 80004e8:	d351      	bcc.n	800058e <__udivmoddi4+0x28a>
 80004ea:	d04e      	beq.n	800058a <__udivmoddi4+0x286>
 80004ec:	b155      	cbz	r5, 8000504 <__udivmoddi4+0x200>
 80004ee:	ebb8 030e 	subs.w	r3, r8, lr
 80004f2:	eb64 040c 	sbc.w	r4, r4, ip
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431e      	orrs	r6, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	e9c5 6400 	strd	r6, r4, [r5]
 8000504:	2100      	movs	r1, #0
 8000506:	e750      	b.n	80003aa <__udivmoddi4+0xa6>
 8000508:	f1c2 0320 	rsb	r3, r2, #32
 800050c:	fa20 f103 	lsr.w	r1, r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa24 f303 	lsr.w	r3, r4, r3
 8000518:	4094      	lsls	r4, r2
 800051a:	430c      	orrs	r4, r1
 800051c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000520:	fa00 fe02 	lsl.w	lr, r0, r2
 8000524:	fa1f f78c 	uxth.w	r7, ip
 8000528:	fbb3 f0f8 	udiv	r0, r3, r8
 800052c:	fb08 3110 	mls	r1, r8, r0, r3
 8000530:	0c23      	lsrs	r3, r4, #16
 8000532:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000536:	fb00 f107 	mul.w	r1, r0, r7
 800053a:	4299      	cmp	r1, r3
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x24c>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 36ff 	add.w	r6, r0, #4294967295
 8000546:	d22c      	bcs.n	80005a2 <__udivmoddi4+0x29e>
 8000548:	4299      	cmp	r1, r3
 800054a:	d92a      	bls.n	80005a2 <__udivmoddi4+0x29e>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1a5b      	subs	r3, r3, r1
 8000552:	b2a4      	uxth	r4, r4
 8000554:	fbb3 f1f8 	udiv	r1, r3, r8
 8000558:	fb08 3311 	mls	r3, r8, r1, r3
 800055c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000560:	fb01 f307 	mul.w	r3, r1, r7
 8000564:	42a3      	cmp	r3, r4
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x276>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000570:	d213      	bcs.n	800059a <__udivmoddi4+0x296>
 8000572:	42a3      	cmp	r3, r4
 8000574:	d911      	bls.n	800059a <__udivmoddi4+0x296>
 8000576:	3902      	subs	r1, #2
 8000578:	4464      	add	r4, ip
 800057a:	1ae4      	subs	r4, r4, r3
 800057c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000580:	e739      	b.n	80003f6 <__udivmoddi4+0xf2>
 8000582:	4604      	mov	r4, r0
 8000584:	e6f0      	b.n	8000368 <__udivmoddi4+0x64>
 8000586:	4608      	mov	r0, r1
 8000588:	e706      	b.n	8000398 <__udivmoddi4+0x94>
 800058a:	45c8      	cmp	r8, r9
 800058c:	d2ae      	bcs.n	80004ec <__udivmoddi4+0x1e8>
 800058e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000592:	eb63 0c07 	sbc.w	ip, r3, r7
 8000596:	3801      	subs	r0, #1
 8000598:	e7a8      	b.n	80004ec <__udivmoddi4+0x1e8>
 800059a:	4631      	mov	r1, r6
 800059c:	e7ed      	b.n	800057a <__udivmoddi4+0x276>
 800059e:	4603      	mov	r3, r0
 80005a0:	e799      	b.n	80004d6 <__udivmoddi4+0x1d2>
 80005a2:	4630      	mov	r0, r6
 80005a4:	e7d4      	b.n	8000550 <__udivmoddi4+0x24c>
 80005a6:	46d6      	mov	lr, sl
 80005a8:	e77f      	b.n	80004aa <__udivmoddi4+0x1a6>
 80005aa:	4463      	add	r3, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e74d      	b.n	800044c <__udivmoddi4+0x148>
 80005b0:	4606      	mov	r6, r0
 80005b2:	4623      	mov	r3, r4
 80005b4:	4608      	mov	r0, r1
 80005b6:	e70f      	b.n	80003d8 <__udivmoddi4+0xd4>
 80005b8:	3e02      	subs	r6, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	e730      	b.n	8000420 <__udivmoddi4+0x11c>
 80005be:	bf00      	nop

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fbc4 	bl	8000d56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f867 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f8cf 	bl	8000774 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	/* Enable the CYcle counting */
	DWT_CTRL |= (1 << 0);
 80005d6:	4b23      	ldr	r3, [pc, #140]	@ (8000664 <main+0xa0>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a22      	ldr	r2, [pc, #136]	@ (8000664 <main+0xa0>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6013      	str	r3, [r2, #0]

	SEGGER_UART_init(250000);
 80005e2:	4821      	ldr	r0, [pc, #132]	@ (8000668 <main+0xa4>)
 80005e4:	f005 f9fe 	bl	80059e4 <SEGGER_UART_init>

	SEGGER_SYSVIEW_Conf();
 80005e8:	f004 ff6a 	bl	80054c0 <SEGGER_SYSVIEW_Conf>
	//SEGGER_SYSVIEW_Start();


	status = xTaskCreate(led_green_handler, "LED_Green_Task", 200, NULL, 3, &ledg_handle);
 80005ec:	4b1f      	ldr	r3, [pc, #124]	@ (800066c <main+0xa8>)
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2303      	movs	r3, #3
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	22c8      	movs	r2, #200	@ 0xc8
 80005f8:	491d      	ldr	r1, [pc, #116]	@ (8000670 <main+0xac>)
 80005fa:	481e      	ldr	r0, [pc, #120]	@ (8000674 <main+0xb0>)
 80005fc:	f002 fb8a 	bl	8002d14 <xTaskCreate>
 8000600:	6078      	str	r0, [r7, #4]

	configASSERT(status = pdPASS);
 8000602:	2301      	movs	r3, #1
 8000604:	607b      	str	r3, [r7, #4]

	next_task_handle = ledg_handle;
 8000606:	4b19      	ldr	r3, [pc, #100]	@ (800066c <main+0xa8>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a1b      	ldr	r2, [pc, #108]	@ (8000678 <main+0xb4>)
 800060c:	6013      	str	r3, [r2, #0]

	status = xTaskCreate(led_red_handler, "LED_Red_Task", 200, NULL, 2, &ledr_handle);
 800060e:	4b1b      	ldr	r3, [pc, #108]	@ (800067c <main+0xb8>)
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	2302      	movs	r3, #2
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2300      	movs	r3, #0
 8000618:	22c8      	movs	r2, #200	@ 0xc8
 800061a:	4919      	ldr	r1, [pc, #100]	@ (8000680 <main+0xbc>)
 800061c:	4819      	ldr	r0, [pc, #100]	@ (8000684 <main+0xc0>)
 800061e:	f002 fb79 	bl	8002d14 <xTaskCreate>
 8000622:	6078      	str	r0, [r7, #4]

	configASSERT(status = pdPASS);
 8000624:	2301      	movs	r3, #1
 8000626:	607b      	str	r3, [r7, #4]

	status = xTaskCreate(led_blue_handler, "LED_Blue_Task", 200, NULL, 1, &ledb_handle);
 8000628:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <main+0xc4>)
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2301      	movs	r3, #1
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2300      	movs	r3, #0
 8000632:	22c8      	movs	r2, #200	@ 0xc8
 8000634:	4915      	ldr	r1, [pc, #84]	@ (800068c <main+0xc8>)
 8000636:	4816      	ldr	r0, [pc, #88]	@ (8000690 <main+0xcc>)
 8000638:	f002 fb6c 	bl	8002d14 <xTaskCreate>
 800063c:	6078      	str	r0, [r7, #4]

	configASSERT(status = pdPASS);
 800063e:	2301      	movs	r3, #1
 8000640:	607b      	str	r3, [r7, #4]

	status = xTaskCreate(user_button_handler, "Button_Task", 200, NULL, 4, &btn_handle);
 8000642:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <main+0xd0>)
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	2304      	movs	r3, #4
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2300      	movs	r3, #0
 800064c:	22c8      	movs	r2, #200	@ 0xc8
 800064e:	4912      	ldr	r1, [pc, #72]	@ (8000698 <main+0xd4>)
 8000650:	4812      	ldr	r0, [pc, #72]	@ (800069c <main+0xd8>)
 8000652:	f002 fb5f 	bl	8002d14 <xTaskCreate>
 8000656:	6078      	str	r0, [r7, #4]

	configASSERT(status = pdPASS);
 8000658:	2301      	movs	r3, #1
 800065a:	607b      	str	r3, [r7, #4]

	//STart the FreeRTOS Scheduler
	vTaskStartScheduler();
 800065c:	f002 fe12 	bl	8003284 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <main+0x9c>
 8000664:	e0001000 	.word	0xe0001000
 8000668:	0003d090 	.word	0x0003d090
 800066c:	20000038 	.word	0x20000038
 8000670:	08007f28 	.word	0x08007f28
 8000674:	08000a75 	.word	0x08000a75
 8000678:	20000048 	.word	0x20000048
 800067c:	2000003c 	.word	0x2000003c
 8000680:	08007f38 	.word	0x08007f38
 8000684:	08000a11 	.word	0x08000a11
 8000688:	20000040 	.word	0x20000040
 800068c:	08007f48 	.word	0x08007f48
 8000690:	080009a1 	.word	0x080009a1
 8000694:	20000044 	.word	0x20000044
 8000698:	08007f58 	.word	0x08007f58
 800069c:	08000ad9 	.word	0x08000ad9

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	@ 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	2234      	movs	r2, #52	@ 0x34
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f007 fbf4 	bl	8007e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	4b29      	ldr	r3, [pc, #164]	@ (800076c <SystemClock_Config+0xcc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a28      	ldr	r2, [pc, #160]	@ (800076c <SystemClock_Config+0xcc>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b26      	ldr	r3, [pc, #152]	@ (800076c <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006dc:	4b24      	ldr	r3, [pc, #144]	@ (8000770 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006e4:	4a22      	ldr	r2, [pc, #136]	@ (8000770 <SystemClock_Config+0xd0>)
 80006e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b20      	ldr	r3, [pc, #128]	@ (8000770 <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800070c:	2308      	movs	r3, #8
 800070e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000710:	23a8      	movs	r3, #168	@ 0xa8
 8000712:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000718:	2302      	movs	r3, #2
 800071a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fe1d 	bl	8001364 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000730:	f000 fa0c 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000740:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000744:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2105      	movs	r1, #5
 8000752:	4618      	mov	r0, r3
 8000754:	f001 f8b4 	bl	80018c0 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800075e:	f000 f9f5 	bl	8000b4c <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	@ 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08c      	sub	sp, #48	@ 0x30
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	4b7f      	ldr	r3, [pc, #508]	@ (8000988 <MX_GPIO_Init+0x214>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a7e      	ldr	r2, [pc, #504]	@ (8000988 <MX_GPIO_Init+0x214>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b7c      	ldr	r3, [pc, #496]	@ (8000988 <MX_GPIO_Init+0x214>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	4b79      	ldr	r3, [pc, #484]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a78      	ldr	r2, [pc, #480]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b76      	ldr	r3, [pc, #472]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b73      	ldr	r3, [pc, #460]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a72      	ldr	r2, [pc, #456]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b70      	ldr	r3, [pc, #448]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b6d      	ldr	r3, [pc, #436]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a6c      	ldr	r2, [pc, #432]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b6a      	ldr	r3, [pc, #424]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	4b67      	ldr	r3, [pc, #412]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a66      	ldr	r2, [pc, #408]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b64      	ldr	r3, [pc, #400]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000802:	4b61      	ldr	r3, [pc, #388]	@ (8000988 <MX_GPIO_Init+0x214>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a60      	ldr	r2, [pc, #384]	@ (8000988 <MX_GPIO_Init+0x214>)
 8000808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b5e      	ldr	r3, [pc, #376]	@ (8000988 <MX_GPIO_Init+0x214>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000820:	485a      	ldr	r0, [pc, #360]	@ (800098c <MX_GPIO_Init+0x218>)
 8000822:	f000 fd6b 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2140      	movs	r1, #64	@ 0x40
 800082a:	4859      	ldr	r0, [pc, #356]	@ (8000990 <MX_GPIO_Init+0x21c>)
 800082c:	f000 fd66 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000830:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000836:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	4853      	ldr	r0, [pc, #332]	@ (8000994 <MX_GPIO_Init+0x220>)
 8000848:	f000 fb94 	bl	8000f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800084c:	2332      	movs	r3, #50	@ 0x32
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800085c:	230b      	movs	r3, #11
 800085e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	484b      	ldr	r0, [pc, #300]	@ (8000994 <MX_GPIO_Init+0x220>)
 8000868:	f000 fb84 	bl	8000f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800086c:	2386      	movs	r3, #134	@ 0x86
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800087c:	230b      	movs	r3, #11
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4844      	ldr	r0, [pc, #272]	@ (8000998 <MX_GPIO_Init+0x224>)
 8000888:	f000 fb74 	bl	8000f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800088c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4839      	ldr	r0, [pc, #228]	@ (800098c <MX_GPIO_Init+0x218>)
 80008a6:	f000 fb65 	bl	8000f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008bc:	230b      	movs	r3, #11
 80008be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4831      	ldr	r0, [pc, #196]	@ (800098c <MX_GPIO_Init+0x218>)
 80008c8:	f000 fb54 	bl	8000f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008cc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008de:	2307      	movs	r3, #7
 80008e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	482c      	ldr	r0, [pc, #176]	@ (800099c <MX_GPIO_Init+0x228>)
 80008ea:	f000 fb43 	bl	8000f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ee:	2340      	movs	r3, #64	@ 0x40
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4822      	ldr	r0, [pc, #136]	@ (8000990 <MX_GPIO_Init+0x21c>)
 8000906:	f000 fb35 	bl	8000f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800090a:	2380      	movs	r3, #128	@ 0x80
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	481c      	ldr	r0, [pc, #112]	@ (8000990 <MX_GPIO_Init+0x21c>)
 800091e:	f000 fb29 	bl	8000f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000922:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000934:	230a      	movs	r3, #10
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4816      	ldr	r0, [pc, #88]	@ (8000998 <MX_GPIO_Init+0x224>)
 8000940:	f000 fb18 	bl	8000f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000944:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	480f      	ldr	r0, [pc, #60]	@ (8000998 <MX_GPIO_Init+0x224>)
 800095a:	f000 fb0b 	bl	8000f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800095e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000970:	230b      	movs	r3, #11
 8000972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_GPIO_Init+0x21c>)
 800097c:	f000 fafa 	bl	8000f74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000980:	bf00      	nop
 8000982:	3730      	adds	r7, #48	@ 0x30
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	40020400 	.word	0x40020400
 8000990:	40021800 	.word	0x40021800
 8000994:	40020800 	.word	0x40020800
 8000998:	40020000 	.word	0x40020000
 800099c:	40020c00 	.word	0x40020c00

080009a0 <led_blue_handler>:

/* USER CODE BEGIN 4 */

static void led_blue_handler(void* parameters)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af02      	add	r7, sp, #8
 80009a6:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED\n");
 80009a8:	4815      	ldr	r0, [pc, #84]	@ (8000a00 <led_blue_handler+0x60>)
 80009aa:	f007 f9c9 	bl	8007d40 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80009ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009b2:	4814      	ldr	r0, [pc, #80]	@ (8000a04 <led_blue_handler+0x64>)
 80009b4:	f000 fcbb 	bl	800132e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL, pdMS_TO_TICKS(1000));
 80009b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	2300      	movs	r3, #0
 80009c0:	2200      	movs	r2, #0
 80009c2:	2100      	movs	r1, #0
 80009c4:	2000      	movs	r0, #0
 80009c6:	f003 fb19 	bl	8003ffc <xTaskGenericNotifyWait>
 80009ca:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d1ea      	bne.n	80009a8 <led_blue_handler+0x8>
		{
			vTaskSuspendAll();
 80009d2:	f002 fcb5 	bl	8003340 <vTaskSuspendAll>
			next_task_handle = NULL;
 80009d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <led_blue_handler+0x68>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 80009dc:	f002 fcbe 	bl	800335c <xTaskResumeAll>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009e6:	4807      	ldr	r0, [pc, #28]	@ (8000a04 <led_blue_handler+0x64>)
 80009e8:	f000 fc88 	bl	80012fc <HAL_GPIO_WritePin>
			vTaskDelete(btn_handle);
 80009ec:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <led_blue_handler+0x6c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f002 fb01 	bl	8002ff8 <vTaskDelete>
			vTaskDelete(NULL);
 80009f6:	2000      	movs	r0, #0
 80009f8:	f002 fafe 	bl	8002ff8 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED\n");
 80009fc:	e7d4      	b.n	80009a8 <led_blue_handler+0x8>
 80009fe:	bf00      	nop
 8000a00:	08007f64 	.word	0x08007f64
 8000a04:	40020400 	.word	0x40020400
 8000a08:	20000048 	.word	0x20000048
 8000a0c:	20000044 	.word	0x20000044

08000a10 <led_red_handler>:
		}
	}
}

static void led_red_handler(void* parameters)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af02      	add	r7, sp, #8
 8000a16:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED\n");
 8000a18:	4812      	ldr	r0, [pc, #72]	@ (8000a64 <led_red_handler+0x54>)
 8000a1a:	f007 f991 	bl	8007d40 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a1e:	2180      	movs	r1, #128	@ 0x80
 8000a20:	4811      	ldr	r0, [pc, #68]	@ (8000a68 <led_red_handler+0x58>)
 8000a22:	f000 fc84 	bl	800132e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL, pdMS_TO_TICKS(1000));
 8000a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	2000      	movs	r0, #0
 8000a34:	f003 fae2 	bl	8003ffc <xTaskGenericNotifyWait>
 8000a38:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d1eb      	bne.n	8000a18 <led_red_handler+0x8>
		{
			vTaskSuspendAll();
 8000a40:	f002 fc7e 	bl	8003340 <vTaskSuspendAll>
			next_task_handle = ledb_handle;
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <led_red_handler+0x5c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a09      	ldr	r2, [pc, #36]	@ (8000a70 <led_red_handler+0x60>)
 8000a4a:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a4c:	f002 fc86 	bl	800335c <xTaskResumeAll>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2180      	movs	r1, #128	@ 0x80
 8000a54:	4804      	ldr	r0, [pc, #16]	@ (8000a68 <led_red_handler+0x58>)
 8000a56:	f000 fc51 	bl	80012fc <HAL_GPIO_WritePin>
			vTaskDelete(NULL);
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f002 facc 	bl	8002ff8 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED\n");
 8000a60:	e7da      	b.n	8000a18 <led_red_handler+0x8>
 8000a62:	bf00      	nop
 8000a64:	08007f78 	.word	0x08007f78
 8000a68:	40020400 	.word	0x40020400
 8000a6c:	20000040 	.word	0x20000040
 8000a70:	20000048 	.word	0x20000048

08000a74 <led_green_handler>:
		}
	}
}

static void led_green_handler(void* parameters)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af02      	add	r7, sp, #8
 8000a7a:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED\n");
 8000a7c:	4812      	ldr	r0, [pc, #72]	@ (8000ac8 <led_green_handler+0x54>)
 8000a7e:	f007 f95f 	bl	8007d40 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000a82:	2101      	movs	r1, #1
 8000a84:	4811      	ldr	r0, [pc, #68]	@ (8000acc <led_green_handler+0x58>)
 8000a86:	f000 fc52 	bl	800132e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL, pdMS_TO_TICKS(1000));
 8000a8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2300      	movs	r3, #0
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	2000      	movs	r0, #0
 8000a98:	f003 fab0 	bl	8003ffc <xTaskGenericNotifyWait>
 8000a9c:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d1eb      	bne.n	8000a7c <led_green_handler+0x8>
		{
			vTaskSuspendAll();
 8000aa4:	f002 fc4c 	bl	8003340 <vTaskSuspendAll>
			next_task_handle = ledr_handle;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <led_green_handler+0x5c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a09      	ldr	r2, [pc, #36]	@ (8000ad4 <led_green_handler+0x60>)
 8000aae:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000ab0:	f002 fc54 	bl	800335c <xTaskResumeAll>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4804      	ldr	r0, [pc, #16]	@ (8000acc <led_green_handler+0x58>)
 8000aba:	f000 fc1f 	bl	80012fc <HAL_GPIO_WritePin>
			vTaskDelete(NULL);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f002 fa9a 	bl	8002ff8 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED\n");
 8000ac4:	e7da      	b.n	8000a7c <led_green_handler+0x8>
 8000ac6:	bf00      	nop
 8000ac8:	08007f64 	.word	0x08007f64
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	2000003c 	.word	0x2000003c
 8000ad4:	20000048 	.word	0x20000048

08000ad8 <user_button_handler>:
		}
	}
}

static void user_button_handler(void* parameters)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af02      	add	r7, sp, #8
 8000ade:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		btn_read = HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin);
 8000ae8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aec:	480c      	ldr	r0, [pc, #48]	@ (8000b20 <user_button_handler+0x48>)
 8000aee:	f000 fbed 	bl	80012cc <HAL_GPIO_ReadPin>
 8000af2:	4603      	mov	r3, r0
 8000af4:	73bb      	strb	r3, [r7, #14]

		if (btn_read)
 8000af6:	7bbb      	ldrb	r3, [r7, #14]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d00b      	beq.n	8000b14 <user_button_handler+0x3c>
		{
			if (! prev_read)
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d108      	bne.n	8000b14 <user_button_handler+0x3c>
				xTaskNotify(next_task_handle, 0, eNoAction);
 8000b02:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <user_button_handler+0x4c>)
 8000b04:	6818      	ldr	r0, [r3, #0]
 8000b06:	2300      	movs	r3, #0
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2100      	movs	r1, #0
 8000b10:	f003 fb0e 	bl	8004130 <xTaskGenericNotify>
		}

		prev_read = btn_read;
 8000b14:	7bbb      	ldrb	r3, [r7, #14]
 8000b16:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000b18:	200a      	movs	r0, #10
 8000b1a:	f002 fb2f 	bl	800317c <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin);
 8000b1e:	e7e3      	b.n	8000ae8 <user_button_handler+0x10>
 8000b20:	40020800 	.word	0x40020800
 8000b24:	20000048 	.word	0x20000048

08000b28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a04      	ldr	r2, [pc, #16]	@ (8000b48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d101      	bne.n	8000b3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b3a:	f000 f919 	bl	8000d70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40001000 	.word	0x40001000

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <Error_Handler+0x8>

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b62:	4a0e      	ldr	r2, [pc, #56]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7a:	4a08      	ldr	r2, [pc, #32]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b82:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	@ 0x38
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bb0:	4b33      	ldr	r3, [pc, #204]	@ (8000c80 <HAL_InitTick+0xe0>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb4:	4a32      	ldr	r2, [pc, #200]	@ (8000c80 <HAL_InitTick+0xe0>)
 8000bb6:	f043 0310 	orr.w	r3, r3, #16
 8000bba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bbc:	4b30      	ldr	r3, [pc, #192]	@ (8000c80 <HAL_InitTick+0xe0>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc0:	f003 0310 	and.w	r3, r3, #16
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bc8:	f107 0210 	add.w	r2, r7, #16
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 f884 	bl	8001ce0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bd8:	6a3b      	ldr	r3, [r7, #32]
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d103      	bne.n	8000bea <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000be2:	f001 f869 	bl	8001cb8 <HAL_RCC_GetPCLK1Freq>
 8000be6:	6378      	str	r0, [r7, #52]	@ 0x34
 8000be8:	e004      	b.n	8000bf4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bea:	f001 f865 	bl	8001cb8 <HAL_RCC_GetPCLK1Freq>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bf6:	4a23      	ldr	r2, [pc, #140]	@ (8000c84 <HAL_InitTick+0xe4>)
 8000bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfc:	0c9b      	lsrs	r3, r3, #18
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c02:	4b21      	ldr	r3, [pc, #132]	@ (8000c88 <HAL_InitTick+0xe8>)
 8000c04:	4a21      	ldr	r2, [pc, #132]	@ (8000c8c <HAL_InitTick+0xec>)
 8000c06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c08:	4b1f      	ldr	r3, [pc, #124]	@ (8000c88 <HAL_InitTick+0xe8>)
 8000c0a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c0e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c10:	4a1d      	ldr	r2, [pc, #116]	@ (8000c88 <HAL_InitTick+0xe8>)
 8000c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c14:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c16:	4b1c      	ldr	r3, [pc, #112]	@ (8000c88 <HAL_InitTick+0xe8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <HAL_InitTick+0xe8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c22:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <HAL_InitTick+0xe8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c28:	4817      	ldr	r0, [pc, #92]	@ (8000c88 <HAL_InitTick+0xe8>)
 8000c2a:	f001 f88b 	bl	8001d44 <HAL_TIM_Base_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d11b      	bne.n	8000c74 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c3c:	4812      	ldr	r0, [pc, #72]	@ (8000c88 <HAL_InitTick+0xe8>)
 8000c3e:	f001 f8e3 	bl	8001e08 <HAL_TIM_Base_Start_IT>
 8000c42:	4603      	mov	r3, r0
 8000c44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d111      	bne.n	8000c74 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c50:	2036      	movs	r0, #54	@ 0x36
 8000c52:	f000 f981 	bl	8000f58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d808      	bhi.n	8000c6e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	2036      	movs	r0, #54	@ 0x36
 8000c62:	f000 f95d 	bl	8000f20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c66:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <HAL_InitTick+0xf0>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6013      	str	r3, [r2, #0]
 8000c6c:	e002      	b.n	8000c74 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3738      	adds	r7, #56	@ 0x38
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40023800 	.word	0x40023800
 8000c84:	431bde83 	.word	0x431bde83
 8000c88:	2000004c 	.word	0x2000004c
 8000c8c:	40001000 	.word	0x40001000
 8000c90:	20000004 	.word	0x20000004

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <NMI_Handler+0x4>

08000c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <HardFault_Handler+0x4>

08000ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <MemManage_Handler+0x4>

08000cac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cd0:	4802      	ldr	r0, [pc, #8]	@ (8000cdc <TIM6_DAC_IRQHandler+0x10>)
 8000cd2:	f001 f911 	bl	8001ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000004c 	.word	0x2000004c

08000ce0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <SystemInit+0x20>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <SystemInit+0x20>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d08:	f7ff ffea 	bl	8000ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d0c:	480c      	ldr	r0, [pc, #48]	@ (8000d40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d0e:	490d      	ldr	r1, [pc, #52]	@ (8000d44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d10:	4a0d      	ldr	r2, [pc, #52]	@ (8000d48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d24:	4c0a      	ldr	r4, [pc, #40]	@ (8000d50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d32:	f007 f8bb 	bl	8007eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d36:	f7ff fc45 	bl	80005c4 <main>
  bx  lr    
 8000d3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d3c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d48:	080080d8 	.word	0x080080d8
  ldr r2, =_sbss
 8000d4c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d50:	2000c4c0 	.word	0x2000c4c0

08000d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC_IRQHandler>

08000d56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5a:	2003      	movs	r0, #3
 8000d5c:	f000 f8d5 	bl	8000f0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d60:	200f      	movs	r0, #15
 8000d62:	f7ff ff1d 	bl	8000ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d66:	f7ff fef7 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_IncTick+0x20>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <HAL_IncTick+0x24>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <HAL_IncTick+0x24>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000098 	.word	0x20000098

08000d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	@ (8000dac <HAL_GetTick+0x14>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000098 	.word	0x20000098

08000db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x40>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x40>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00
 8000df4:	05fa0000 	.word	0x05fa0000

08000df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dfc:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <__NVIC_GetPriorityGrouping+0x18>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	0a1b      	lsrs	r3, r3, #8
 8000e02:	f003 0307 	and.w	r3, r3, #7
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	db0b      	blt.n	8000e3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	f003 021f 	and.w	r2, r3, #31
 8000e2c:	4907      	ldr	r1, [pc, #28]	@ (8000e4c <__NVIC_EnableIRQ+0x38>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	095b      	lsrs	r3, r3, #5
 8000e34:	2001      	movs	r0, #1
 8000e36:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100

08000e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db0a      	blt.n	8000e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	490c      	ldr	r1, [pc, #48]	@ (8000e9c <__NVIC_SetPriority+0x4c>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	0112      	lsls	r2, r2, #4
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	440b      	add	r3, r1
 8000e74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e78:	e00a      	b.n	8000e90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4908      	ldr	r1, [pc, #32]	@ (8000ea0 <__NVIC_SetPriority+0x50>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	3b04      	subs	r3, #4
 8000e88:	0112      	lsls	r2, r2, #4
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	761a      	strb	r2, [r3, #24]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	@ 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f1c3 0307 	rsb	r3, r3, #7
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	bf28      	it	cs
 8000ec2:	2304      	movcs	r3, #4
 8000ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d902      	bls.n	8000ed4 <NVIC_EncodePriority+0x30>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3b03      	subs	r3, #3
 8000ed2:	e000      	b.n	8000ed6 <NVIC_EncodePriority+0x32>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43d9      	mvns	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	4313      	orrs	r3, r2
         );
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3724      	adds	r7, #36	@ 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ff4c 	bl	8000db0 <__NVIC_SetPriorityGrouping>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f32:	f7ff ff61 	bl	8000df8 <__NVIC_GetPriorityGrouping>
 8000f36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	68b9      	ldr	r1, [r7, #8]
 8000f3c:	6978      	ldr	r0, [r7, #20]
 8000f3e:	f7ff ffb1 	bl	8000ea4 <NVIC_EncodePriority>
 8000f42:	4602      	mov	r2, r0
 8000f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff80 	bl	8000e50 <__NVIC_SetPriority>
}
 8000f50:	bf00      	nop
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff54 	bl	8000e14 <__NVIC_EnableIRQ>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	@ 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	e175      	b.n	8001280 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f94:	2201      	movs	r2, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	f040 8164 	bne.w	800127a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d005      	beq.n	8000fca <HAL_GPIO_Init+0x56>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d130      	bne.n	800102c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	091b      	lsrs	r3, r3, #4
 8001016:	f003 0201 	and.w	r2, r3, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b03      	cmp	r3, #3
 8001036:	d017      	beq.n	8001068 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d123      	bne.n	80010bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	08da      	lsrs	r2, r3, #3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3208      	adds	r2, #8
 800107c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	220f      	movs	r2, #15
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	691a      	ldr	r2, [r3, #16]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	08da      	lsrs	r2, r3, #3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3208      	adds	r2, #8
 80010b6:	69b9      	ldr	r1, [r7, #24]
 80010b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0203 	and.w	r2, r3, #3
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 80be 	beq.w	800127a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	4b66      	ldr	r3, [pc, #408]	@ (8001298 <HAL_GPIO_Init+0x324>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001102:	4a65      	ldr	r2, [pc, #404]	@ (8001298 <HAL_GPIO_Init+0x324>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001108:	6453      	str	r3, [r2, #68]	@ 0x44
 800110a:	4b63      	ldr	r3, [pc, #396]	@ (8001298 <HAL_GPIO_Init+0x324>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001116:	4a61      	ldr	r2, [pc, #388]	@ (800129c <HAL_GPIO_Init+0x328>)
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3302      	adds	r3, #2
 800111e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	220f      	movs	r2, #15
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a58      	ldr	r2, [pc, #352]	@ (80012a0 <HAL_GPIO_Init+0x32c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d037      	beq.n	80011b2 <HAL_GPIO_Init+0x23e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a57      	ldr	r2, [pc, #348]	@ (80012a4 <HAL_GPIO_Init+0x330>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d031      	beq.n	80011ae <HAL_GPIO_Init+0x23a>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a56      	ldr	r2, [pc, #344]	@ (80012a8 <HAL_GPIO_Init+0x334>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d02b      	beq.n	80011aa <HAL_GPIO_Init+0x236>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a55      	ldr	r2, [pc, #340]	@ (80012ac <HAL_GPIO_Init+0x338>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d025      	beq.n	80011a6 <HAL_GPIO_Init+0x232>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a54      	ldr	r2, [pc, #336]	@ (80012b0 <HAL_GPIO_Init+0x33c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d01f      	beq.n	80011a2 <HAL_GPIO_Init+0x22e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a53      	ldr	r2, [pc, #332]	@ (80012b4 <HAL_GPIO_Init+0x340>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d019      	beq.n	800119e <HAL_GPIO_Init+0x22a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a52      	ldr	r2, [pc, #328]	@ (80012b8 <HAL_GPIO_Init+0x344>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d013      	beq.n	800119a <HAL_GPIO_Init+0x226>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a51      	ldr	r2, [pc, #324]	@ (80012bc <HAL_GPIO_Init+0x348>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d00d      	beq.n	8001196 <HAL_GPIO_Init+0x222>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a50      	ldr	r2, [pc, #320]	@ (80012c0 <HAL_GPIO_Init+0x34c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d007      	beq.n	8001192 <HAL_GPIO_Init+0x21e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4f      	ldr	r2, [pc, #316]	@ (80012c4 <HAL_GPIO_Init+0x350>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d101      	bne.n	800118e <HAL_GPIO_Init+0x21a>
 800118a:	2309      	movs	r3, #9
 800118c:	e012      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 800118e:	230a      	movs	r3, #10
 8001190:	e010      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 8001192:	2308      	movs	r3, #8
 8001194:	e00e      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 8001196:	2307      	movs	r3, #7
 8001198:	e00c      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 800119a:	2306      	movs	r3, #6
 800119c:	e00a      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 800119e:	2305      	movs	r3, #5
 80011a0:	e008      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 80011a2:	2304      	movs	r3, #4
 80011a4:	e006      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 80011a6:	2303      	movs	r3, #3
 80011a8:	e004      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 80011aa:	2302      	movs	r3, #2
 80011ac:	e002      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 80011b2:	2300      	movs	r3, #0
 80011b4:	69fa      	ldr	r2, [r7, #28]
 80011b6:	f002 0203 	and.w	r2, r2, #3
 80011ba:	0092      	lsls	r2, r2, #2
 80011bc:	4093      	lsls	r3, r2
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011c4:	4935      	ldr	r1, [pc, #212]	@ (800129c <HAL_GPIO_Init+0x328>)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d2:	4b3d      	ldr	r3, [pc, #244]	@ (80012c8 <HAL_GPIO_Init+0x354>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011f6:	4a34      	ldr	r2, [pc, #208]	@ (80012c8 <HAL_GPIO_Init+0x354>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011fc:	4b32      	ldr	r3, [pc, #200]	@ (80012c8 <HAL_GPIO_Init+0x354>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001220:	4a29      	ldr	r2, [pc, #164]	@ (80012c8 <HAL_GPIO_Init+0x354>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001226:	4b28      	ldr	r3, [pc, #160]	@ (80012c8 <HAL_GPIO_Init+0x354>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800124a:	4a1f      	ldr	r2, [pc, #124]	@ (80012c8 <HAL_GPIO_Init+0x354>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001250:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <HAL_GPIO_Init+0x354>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001274:	4a14      	ldr	r2, [pc, #80]	@ (80012c8 <HAL_GPIO_Init+0x354>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3301      	adds	r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	2b0f      	cmp	r3, #15
 8001284:	f67f ae86 	bls.w	8000f94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3724      	adds	r7, #36	@ 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	40013800 	.word	0x40013800
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40020800 	.word	0x40020800
 80012ac:	40020c00 	.word	0x40020c00
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40021400 	.word	0x40021400
 80012b8:	40021800 	.word	0x40021800
 80012bc:	40021c00 	.word	0x40021c00
 80012c0:	40022000 	.word	0x40022000
 80012c4:	40022400 	.word	0x40022400
 80012c8:	40013c00 	.word	0x40013c00

080012cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691a      	ldr	r2, [r3, #16]
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	4013      	ands	r3, r2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012e4:	2301      	movs	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e001      	b.n	80012ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
 8001308:	4613      	mov	r3, r2
 800130a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800130c:	787b      	ldrb	r3, [r7, #1]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001318:	e003      	b.n	8001322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800131a:	887b      	ldrh	r3, [r7, #2]
 800131c:	041a      	lsls	r2, r3, #16
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	619a      	str	r2, [r3, #24]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800132e:	b480      	push	{r7}
 8001330:	b085      	sub	sp, #20
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	460b      	mov	r3, r1
 8001338:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001340:	887a      	ldrh	r2, [r7, #2]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4013      	ands	r3, r2
 8001346:	041a      	lsls	r2, r3, #16
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	43d9      	mvns	r1, r3
 800134c:	887b      	ldrh	r3, [r7, #2]
 800134e:	400b      	ands	r3, r1
 8001350:	431a      	orrs	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	619a      	str	r2, [r3, #24]
}
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800136c:	2300      	movs	r3, #0
 800136e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e29b      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 8087 	beq.w	8001496 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001388:	4b96      	ldr	r3, [pc, #600]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	2b04      	cmp	r3, #4
 8001392:	d00c      	beq.n	80013ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001394:	4b93      	ldr	r3, [pc, #588]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 030c 	and.w	r3, r3, #12
 800139c:	2b08      	cmp	r3, #8
 800139e:	d112      	bne.n	80013c6 <HAL_RCC_OscConfig+0x62>
 80013a0:	4b90      	ldr	r3, [pc, #576]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013ac:	d10b      	bne.n	80013c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ae:	4b8d      	ldr	r3, [pc, #564]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d06c      	beq.n	8001494 <HAL_RCC_OscConfig+0x130>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d168      	bne.n	8001494 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e275      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013ce:	d106      	bne.n	80013de <HAL_RCC_OscConfig+0x7a>
 80013d0:	4b84      	ldr	r3, [pc, #528]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a83      	ldr	r2, [pc, #524]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 80013d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	e02e      	b.n	800143c <HAL_RCC_OscConfig+0xd8>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x9c>
 80013e6:	4b7f      	ldr	r3, [pc, #508]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a7e      	ldr	r2, [pc, #504]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 80013ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b7c      	ldr	r3, [pc, #496]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a7b      	ldr	r2, [pc, #492]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 80013f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e01d      	b.n	800143c <HAL_RCC_OscConfig+0xd8>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0xc0>
 800140a:	4b76      	ldr	r3, [pc, #472]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a75      	ldr	r2, [pc, #468]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001410:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	4b73      	ldr	r3, [pc, #460]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a72      	ldr	r2, [pc, #456]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 800141c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e00b      	b.n	800143c <HAL_RCC_OscConfig+0xd8>
 8001424:	4b6f      	ldr	r3, [pc, #444]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a6e      	ldr	r2, [pc, #440]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 800142a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b6c      	ldr	r3, [pc, #432]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a6b      	ldr	r2, [pc, #428]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001436:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800143a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d013      	beq.n	800146c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7ff fca8 	bl	8000d98 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff fca4 	bl	8000d98 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	@ 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e229      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145e:	4b61      	ldr	r3, [pc, #388]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0xe8>
 800146a:	e014      	b.n	8001496 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff fc94 	bl	8000d98 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff fc90 	bl	8000d98 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	@ 0x64
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e215      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001486:	4b57      	ldr	r3, [pc, #348]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x110>
 8001492:	e000      	b.n	8001496 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d069      	beq.n	8001576 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014a2:	4b50      	ldr	r3, [pc, #320]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00b      	beq.n	80014c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ae:	4b4d      	ldr	r3, [pc, #308]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d11c      	bne.n	80014f4 <HAL_RCC_OscConfig+0x190>
 80014ba:	4b4a      	ldr	r3, [pc, #296]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d116      	bne.n	80014f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c6:	4b47      	ldr	r3, [pc, #284]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d005      	beq.n	80014de <HAL_RCC_OscConfig+0x17a>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d001      	beq.n	80014de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e1e9      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014de:	4b41      	ldr	r3, [pc, #260]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	493d      	ldr	r1, [pc, #244]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f2:	e040      	b.n	8001576 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d023      	beq.n	8001544 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014fc:	4b39      	ldr	r3, [pc, #228]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a38      	ldr	r2, [pc, #224]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fc46 	bl	8000d98 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001510:	f7ff fc42 	bl	8000d98 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e1c7      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001522:	4b30      	ldr	r3, [pc, #192]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152e:	4b2d      	ldr	r3, [pc, #180]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4929      	ldr	r1, [pc, #164]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 800153e:	4313      	orrs	r3, r2
 8001540:	600b      	str	r3, [r1, #0]
 8001542:	e018      	b.n	8001576 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001544:	4b27      	ldr	r3, [pc, #156]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a26      	ldr	r2, [pc, #152]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001550:	f7ff fc22 	bl	8000d98 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001558:	f7ff fc1e 	bl	8000d98 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1a3      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156a:	4b1e      	ldr	r3, [pc, #120]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d038      	beq.n	80015f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d019      	beq.n	80015be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158a:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 800158c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800158e:	4a15      	ldr	r2, [pc, #84]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001596:	f7ff fbff 	bl	8000d98 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159e:	f7ff fbfb 	bl	8000d98 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e180      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 80015b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x23a>
 80015bc:	e01a      	b.n	80015f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015be:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 80015c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015c2:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <HAL_RCC_OscConfig+0x280>)
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ca:	f7ff fbe5 	bl	8000d98 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d0:	e00a      	b.n	80015e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d2:	f7ff fbe1 	bl	8000d98 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d903      	bls.n	80015e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e166      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
 80015e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e8:	4b92      	ldr	r3, [pc, #584]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80015ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ee      	bne.n	80015d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80a4 	beq.w	800174a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001602:	4b8c      	ldr	r3, [pc, #560]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10d      	bne.n	800162a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b89      	ldr	r3, [pc, #548]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	4a88      	ldr	r2, [pc, #544]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001618:	6413      	str	r3, [r2, #64]	@ 0x40
 800161a:	4b86      	ldr	r3, [pc, #536]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001626:	2301      	movs	r3, #1
 8001628:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162a:	4b83      	ldr	r3, [pc, #524]	@ (8001838 <HAL_RCC_OscConfig+0x4d4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001632:	2b00      	cmp	r3, #0
 8001634:	d118      	bne.n	8001668 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001636:	4b80      	ldr	r3, [pc, #512]	@ (8001838 <HAL_RCC_OscConfig+0x4d4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a7f      	ldr	r2, [pc, #508]	@ (8001838 <HAL_RCC_OscConfig+0x4d4>)
 800163c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001642:	f7ff fba9 	bl	8000d98 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800164a:	f7ff fba5 	bl	8000d98 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b64      	cmp	r3, #100	@ 0x64
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e12a      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800165c:	4b76      	ldr	r3, [pc, #472]	@ (8001838 <HAL_RCC_OscConfig+0x4d4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d106      	bne.n	800167e <HAL_RCC_OscConfig+0x31a>
 8001670:	4b70      	ldr	r3, [pc, #448]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001674:	4a6f      	ldr	r2, [pc, #444]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6713      	str	r3, [r2, #112]	@ 0x70
 800167c:	e02d      	b.n	80016da <HAL_RCC_OscConfig+0x376>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x33c>
 8001686:	4b6b      	ldr	r3, [pc, #428]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800168a:	4a6a      	ldr	r2, [pc, #424]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	6713      	str	r3, [r2, #112]	@ 0x70
 8001692:	4b68      	ldr	r3, [pc, #416]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001696:	4a67      	ldr	r2, [pc, #412]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001698:	f023 0304 	bic.w	r3, r3, #4
 800169c:	6713      	str	r3, [r2, #112]	@ 0x70
 800169e:	e01c      	b.n	80016da <HAL_RCC_OscConfig+0x376>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b05      	cmp	r3, #5
 80016a6:	d10c      	bne.n	80016c2 <HAL_RCC_OscConfig+0x35e>
 80016a8:	4b62      	ldr	r3, [pc, #392]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80016aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ac:	4a61      	ldr	r2, [pc, #388]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b4:	4b5f      	ldr	r3, [pc, #380]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b8:	4a5e      	ldr	r2, [pc, #376]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c0:	e00b      	b.n	80016da <HAL_RCC_OscConfig+0x376>
 80016c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ce:	4b59      	ldr	r3, [pc, #356]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d2:	4a58      	ldr	r2, [pc, #352]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80016d4:	f023 0304 	bic.w	r3, r3, #4
 80016d8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d015      	beq.n	800170e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e2:	f7ff fb59 	bl	8000d98 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e8:	e00a      	b.n	8001700 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ea:	f7ff fb55 	bl	8000d98 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e0d8      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001700:	4b4c      	ldr	r3, [pc, #304]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0ee      	beq.n	80016ea <HAL_RCC_OscConfig+0x386>
 800170c:	e014      	b.n	8001738 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170e:	f7ff fb43 	bl	8000d98 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001714:	e00a      	b.n	800172c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001716:	f7ff fb3f 	bl	8000d98 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001724:	4293      	cmp	r3, r2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e0c2      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172c:	4b41      	ldr	r3, [pc, #260]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 800172e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1ee      	bne.n	8001716 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d105      	bne.n	800174a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800173e:	4b3d      	ldr	r3, [pc, #244]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	4a3c      	ldr	r2, [pc, #240]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001744:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001748:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 80ae 	beq.w	80018b0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001754:	4b37      	ldr	r3, [pc, #220]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	2b08      	cmp	r3, #8
 800175e:	d06d      	beq.n	800183c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d14b      	bne.n	8001800 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001768:	4b32      	ldr	r3, [pc, #200]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a31      	ldr	r2, [pc, #196]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 800176e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7ff fb10 	bl	8000d98 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff fb0c 	bl	8000d98 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e091      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178e:	4b29      	ldr	r3, [pc, #164]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69da      	ldr	r2, [r3, #28]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a8:	019b      	lsls	r3, r3, #6
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b0:	085b      	lsrs	r3, r3, #1
 80017b2:	3b01      	subs	r3, #1
 80017b4:	041b      	lsls	r3, r3, #16
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017bc:	061b      	lsls	r3, r3, #24
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c4:	071b      	lsls	r3, r3, #28
 80017c6:	491b      	ldr	r1, [pc, #108]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017cc:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a18      	ldr	r2, [pc, #96]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80017d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff fade 	bl	8000d98 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff fada 	bl	8000d98 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e05f      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f2:	4b10      	ldr	r3, [pc, #64]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x47c>
 80017fe:	e057      	b.n	80018b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001800:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0b      	ldr	r2, [pc, #44]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001806:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800180a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f7ff fac4 	bl	8000d98 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff fac0 	bl	8000d98 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e045      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001826:	4b03      	ldr	r3, [pc, #12]	@ (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x4b0>
 8001832:	e03d      	b.n	80018b0 <HAL_RCC_OscConfig+0x54c>
 8001834:	40023800 	.word	0x40023800
 8001838:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800183c:	4b1f      	ldr	r3, [pc, #124]	@ (80018bc <HAL_RCC_OscConfig+0x558>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d030      	beq.n	80018ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001854:	429a      	cmp	r2, r3
 8001856:	d129      	bne.n	80018ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d122      	bne.n	80018ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800186c:	4013      	ands	r3, r2
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001872:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001874:	4293      	cmp	r3, r2
 8001876:	d119      	bne.n	80018ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001882:	085b      	lsrs	r3, r3, #1
 8001884:	3b01      	subs	r3, #1
 8001886:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d10f      	bne.n	80018ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001896:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d107      	bne.n	80018ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800

080018c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0d0      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d910      	bls.n	8001908 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b67      	ldr	r3, [pc, #412]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 020f 	bic.w	r2, r3, #15
 80018ee:	4965      	ldr	r1, [pc, #404]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f6:	4b63      	ldr	r3, [pc, #396]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0b8      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d020      	beq.n	8001956 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001920:	4b59      	ldr	r3, [pc, #356]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	4a58      	ldr	r2, [pc, #352]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001926:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800192a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001938:	4b53      	ldr	r3, [pc, #332]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4a52      	ldr	r2, [pc, #328]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 800193e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001942:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001944:	4b50      	ldr	r3, [pc, #320]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	494d      	ldr	r1, [pc, #308]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001952:	4313      	orrs	r3, r2
 8001954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d040      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	4b47      	ldr	r3, [pc, #284]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d115      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e07f      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001982:	4b41      	ldr	r3, [pc, #260]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d109      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e073      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001992:	4b3d      	ldr	r3, [pc, #244]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e06b      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019a2:	4b39      	ldr	r3, [pc, #228]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f023 0203 	bic.w	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4936      	ldr	r1, [pc, #216]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019b4:	f7ff f9f0 	bl	8000d98 <HAL_GetTick>
 80019b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ba:	e00a      	b.n	80019d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019bc:	f7ff f9ec 	bl	8000d98 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e053      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 020c 	and.w	r2, r3, #12
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d1eb      	bne.n	80019bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019e4:	4b27      	ldr	r3, [pc, #156]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d210      	bcs.n	8001a14 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b24      	ldr	r3, [pc, #144]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 020f 	bic.w	r2, r3, #15
 80019fa:	4922      	ldr	r1, [pc, #136]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a02:	4b20      	ldr	r3, [pc, #128]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e032      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d008      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a20:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4916      	ldr	r1, [pc, #88]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a3e:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	490e      	ldr	r1, [pc, #56]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a52:	f000 f821 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8001a56:	4602      	mov	r2, r0
 8001a58:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	490a      	ldr	r1, [pc, #40]	@ (8001a8c <HAL_RCC_ClockConfig+0x1cc>)
 8001a64:	5ccb      	ldrb	r3, [r1, r3]
 8001a66:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6a:	4a09      	ldr	r2, [pc, #36]	@ (8001a90 <HAL_RCC_ClockConfig+0x1d0>)
 8001a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <HAL_RCC_ClockConfig+0x1d4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff f894 	bl	8000ba0 <HAL_InitTick>

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023c00 	.word	0x40023c00
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	08008074 	.word	0x08008074
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000004 	.word	0x20000004

08001a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a9c:	b094      	sub	sp, #80	@ 0x50
 8001a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ab0:	4b79      	ldr	r3, [pc, #484]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d00d      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	f200 80e1 	bhi.w	8001c84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x34>
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d003      	beq.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001aca:	e0db      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001acc:	4b73      	ldr	r3, [pc, #460]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001ace:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ad0:	e0db      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ad2:	4b72      	ldr	r3, [pc, #456]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ad6:	e0d8      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ad8:	4b6f      	ldr	r3, [pc, #444]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ae0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ae2:	4b6d      	ldr	r3, [pc, #436]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d063      	beq.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aee:	4b6a      	ldr	r3, [pc, #424]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	099b      	lsrs	r3, r3, #6
 8001af4:	2200      	movs	r2, #0
 8001af6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001af8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b00:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b02:	2300      	movs	r3, #0
 8001b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b0a:	4622      	mov	r2, r4
 8001b0c:	462b      	mov	r3, r5
 8001b0e:	f04f 0000 	mov.w	r0, #0
 8001b12:	f04f 0100 	mov.w	r1, #0
 8001b16:	0159      	lsls	r1, r3, #5
 8001b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b1c:	0150      	lsls	r0, r2, #5
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4621      	mov	r1, r4
 8001b24:	1a51      	subs	r1, r2, r1
 8001b26:	6139      	str	r1, [r7, #16]
 8001b28:	4629      	mov	r1, r5
 8001b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b3c:	4659      	mov	r1, fp
 8001b3e:	018b      	lsls	r3, r1, #6
 8001b40:	4651      	mov	r1, sl
 8001b42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b46:	4651      	mov	r1, sl
 8001b48:	018a      	lsls	r2, r1, #6
 8001b4a:	4651      	mov	r1, sl
 8001b4c:	ebb2 0801 	subs.w	r8, r2, r1
 8001b50:	4659      	mov	r1, fp
 8001b52:	eb63 0901 	sbc.w	r9, r3, r1
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b6a:	4690      	mov	r8, r2
 8001b6c:	4699      	mov	r9, r3
 8001b6e:	4623      	mov	r3, r4
 8001b70:	eb18 0303 	adds.w	r3, r8, r3
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	462b      	mov	r3, r5
 8001b78:	eb49 0303 	adc.w	r3, r9, r3
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	028b      	lsls	r3, r1, #10
 8001b8e:	4621      	mov	r1, r4
 8001b90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b94:	4621      	mov	r1, r4
 8001b96:	028a      	lsls	r2, r1, #10
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ba4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ba8:	f7fe fb94 	bl	80002d4 <__aeabi_uldivmod>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bb4:	e058      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb6:	4b38      	ldr	r3, [pc, #224]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	099b      	lsrs	r3, r3, #6
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bc6:	623b      	str	r3, [r7, #32]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bd0:	4642      	mov	r2, r8
 8001bd2:	464b      	mov	r3, r9
 8001bd4:	f04f 0000 	mov.w	r0, #0
 8001bd8:	f04f 0100 	mov.w	r1, #0
 8001bdc:	0159      	lsls	r1, r3, #5
 8001bde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be2:	0150      	lsls	r0, r2, #5
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4641      	mov	r1, r8
 8001bea:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bee:	4649      	mov	r1, r9
 8001bf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c08:	ebb2 040a 	subs.w	r4, r2, sl
 8001c0c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	00eb      	lsls	r3, r5, #3
 8001c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c1e:	00e2      	lsls	r2, r4, #3
 8001c20:	4614      	mov	r4, r2
 8001c22:	461d      	mov	r5, r3
 8001c24:	4643      	mov	r3, r8
 8001c26:	18e3      	adds	r3, r4, r3
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	464b      	mov	r3, r9
 8001c2c:	eb45 0303 	adc.w	r3, r5, r3
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c3e:	4629      	mov	r1, r5
 8001c40:	028b      	lsls	r3, r1, #10
 8001c42:	4621      	mov	r1, r4
 8001c44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c48:	4621      	mov	r1, r4
 8001c4a:	028a      	lsls	r2, r1, #10
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c52:	2200      	movs	r2, #0
 8001c54:	61bb      	str	r3, [r7, #24]
 8001c56:	61fa      	str	r2, [r7, #28]
 8001c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c5c:	f7fe fb3a 	bl	80002d4 <__aeabi_uldivmod>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4613      	mov	r3, r2
 8001c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c68:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	0c1b      	lsrs	r3, r3, #16
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	3301      	adds	r3, #1
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c82:	e002      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3750      	adds	r7, #80	@ 0x50
 8001c90:	46bd      	mov	sp, r7
 8001c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	00f42400 	.word	0x00f42400

08001ca0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca4:	4b03      	ldr	r3, [pc, #12]	@ (8001cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000000 	.word	0x20000000

08001cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cbc:	f7ff fff0 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	0a9b      	lsrs	r3, r3, #10
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	4903      	ldr	r1, [pc, #12]	@ (8001cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cce:	5ccb      	ldrb	r3, [r1, r3]
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	08008084 	.word	0x08008084

08001ce0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	220f      	movs	r2, #15
 8001cee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cf0:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0203 	and.w	r2, r3, #3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d3c <HAL_RCC_GetClockConfig+0x5c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d08:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <HAL_RCC_GetClockConfig+0x5c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d14:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <HAL_RCC_GetClockConfig+0x5c>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	08db      	lsrs	r3, r3, #3
 8001d1a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d22:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <HAL_RCC_GetClockConfig+0x60>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 020f 	and.w	r2, r3, #15
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	601a      	str	r2, [r3, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40023c00 	.word	0x40023c00

08001d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e049      	b.n	8001dea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f841 	bl	8001df2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3304      	adds	r3, #4
 8001d80:	4619      	mov	r1, r3
 8001d82:	4610      	mov	r0, r2
 8001d84:	f000 f9e8 	bl	8002158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d001      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e054      	b.n	8001eca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a26      	ldr	r2, [pc, #152]	@ (8001ed8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d022      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e4a:	d01d      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a22      	ldr	r2, [pc, #136]	@ (8001edc <HAL_TIM_Base_Start_IT+0xd4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d018      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a21      	ldr	r2, [pc, #132]	@ (8001ee0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d013      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00e      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ee8 <HAL_TIM_Base_Start_IT+0xe0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d009      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a1c      	ldr	r2, [pc, #112]	@ (8001eec <HAL_TIM_Base_Start_IT+0xe4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d004      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef0 <HAL_TIM_Base_Start_IT+0xe8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d115      	bne.n	8001eb4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	4b19      	ldr	r3, [pc, #100]	@ (8001ef4 <HAL_TIM_Base_Start_IT+0xec>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d015      	beq.n	8001ec6 <HAL_TIM_Base_Start_IT+0xbe>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea0:	d011      	beq.n	8001ec6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0201 	orr.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb2:	e008      	b.n	8001ec6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	e000      	b.n	8001ec8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40010000 	.word	0x40010000
 8001edc:	40000400 	.word	0x40000400
 8001ee0:	40000800 	.word	0x40000800
 8001ee4:	40000c00 	.word	0x40000c00
 8001ee8:	40010400 	.word	0x40010400
 8001eec:	40014000 	.word	0x40014000
 8001ef0:	40001800 	.word	0x40001800
 8001ef4:	00010007 	.word	0x00010007

08001ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d020      	beq.n	8001f5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01b      	beq.n	8001f5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0202 	mvn.w	r2, #2
 8001f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8e9 	bl	800211a <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8db 	bl	8002106 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f8ec 	bl	800212e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d020      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d01b      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0204 	mvn.w	r2, #4
 8001f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8c3 	bl	800211a <HAL_TIM_IC_CaptureCallback>
 8001f94:	e005      	b.n	8001fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f8b5 	bl	8002106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f8c6 	bl	800212e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d020      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d01b      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0208 	mvn.w	r2, #8
 8001fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2204      	movs	r2, #4
 8001fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f89d 	bl	800211a <HAL_TIM_IC_CaptureCallback>
 8001fe0:	e005      	b.n	8001fee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f88f 	bl	8002106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f8a0 	bl	800212e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d020      	beq.n	8002040 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	d01b      	beq.n	8002040 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0210 	mvn.w	r2, #16
 8002010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2208      	movs	r2, #8
 8002016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f877 	bl	800211a <HAL_TIM_IC_CaptureCallback>
 800202c:	e005      	b.n	800203a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f869 	bl	8002106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f87a 	bl	800212e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00c      	beq.n	8002064 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0201 	mvn.w	r2, #1
 800205c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7fe fd62 	bl	8000b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800206a:	2b00      	cmp	r3, #0
 800206c:	d104      	bne.n	8002078 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00c      	beq.n	8002092 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800208a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f919 	bl	80022c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00c      	beq.n	80020b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d007      	beq.n	80020b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80020ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f911 	bl	80022d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00c      	beq.n	80020da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d007      	beq.n	80020da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f834 	bl	8002142 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00c      	beq.n	80020fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0320 	and.w	r3, r3, #32
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f06f 0220 	mvn.w	r2, #32
 80020f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f8d9 	bl	80022b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a46      	ldr	r2, [pc, #280]	@ (8002284 <TIM_Base_SetConfig+0x12c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d013      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002176:	d00f      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a43      	ldr	r2, [pc, #268]	@ (8002288 <TIM_Base_SetConfig+0x130>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00b      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a42      	ldr	r2, [pc, #264]	@ (800228c <TIM_Base_SetConfig+0x134>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d007      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a41      	ldr	r2, [pc, #260]	@ (8002290 <TIM_Base_SetConfig+0x138>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d003      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a40      	ldr	r2, [pc, #256]	@ (8002294 <TIM_Base_SetConfig+0x13c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d108      	bne.n	80021aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800219e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a35      	ldr	r2, [pc, #212]	@ (8002284 <TIM_Base_SetConfig+0x12c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d02b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021b8:	d027      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a32      	ldr	r2, [pc, #200]	@ (8002288 <TIM_Base_SetConfig+0x130>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d023      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a31      	ldr	r2, [pc, #196]	@ (800228c <TIM_Base_SetConfig+0x134>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d01f      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a30      	ldr	r2, [pc, #192]	@ (8002290 <TIM_Base_SetConfig+0x138>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d01b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002294 <TIM_Base_SetConfig+0x13c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d017      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a2e      	ldr	r2, [pc, #184]	@ (8002298 <TIM_Base_SetConfig+0x140>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a2d      	ldr	r2, [pc, #180]	@ (800229c <TIM_Base_SetConfig+0x144>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00f      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a2c      	ldr	r2, [pc, #176]	@ (80022a0 <TIM_Base_SetConfig+0x148>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a2b      	ldr	r2, [pc, #172]	@ (80022a4 <TIM_Base_SetConfig+0x14c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a2a      	ldr	r2, [pc, #168]	@ (80022a8 <TIM_Base_SetConfig+0x150>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d003      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a29      	ldr	r2, [pc, #164]	@ (80022ac <TIM_Base_SetConfig+0x154>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d108      	bne.n	800221c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a10      	ldr	r2, [pc, #64]	@ (8002284 <TIM_Base_SetConfig+0x12c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d003      	beq.n	8002250 <TIM_Base_SetConfig+0xf8>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a12      	ldr	r2, [pc, #72]	@ (8002294 <TIM_Base_SetConfig+0x13c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d103      	bne.n	8002258 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d105      	bne.n	8002276 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f023 0201 	bic.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	611a      	str	r2, [r3, #16]
  }
}
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40010000 	.word	0x40010000
 8002288:	40000400 	.word	0x40000400
 800228c:	40000800 	.word	0x40000800
 8002290:	40000c00 	.word	0x40000c00
 8002294:	40010400 	.word	0x40010400
 8002298:	40014000 	.word	0x40014000
 800229c:	40014400 	.word	0x40014400
 80022a0:	40014800 	.word	0x40014800
 80022a4:	40001800 	.word	0x40001800
 80022a8:	40001c00 	.word	0x40001c00
 80022ac:	40002000 	.word	0x40002000

080022b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f103 0208 	add.w	r2, r3, #8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f04f 32ff 	mov.w	r2, #4294967295
 8002304:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f103 0208 	add.w	r2, r3, #8
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f103 0208 	add.w	r2, r3, #8
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002320:	f240 1019 	movw	r0, #281	@ 0x119
 8002324:	f005 fa40 	bl	80077a8 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 800233e:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002342:	f005 fa31 	bl	80077a8 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
 800238a:	f240 101b 	movw	r0, #283	@ 0x11b
 800238e:	f005 fa0b 	bl	80077a8 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b0:	d103      	bne.n	80023ba <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	e00c      	b.n	80023d4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3308      	adds	r3, #8
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	e002      	b.n	80023c8 <vListInsert+0x2e>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d2f6      	bcs.n	80023c2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002400:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002404:	f005 f9d0 	bl	80077a8 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6892      	ldr	r2, [r2, #8]
 8002426:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6852      	ldr	r2, [r2, #4]
 8002430:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	429a      	cmp	r2, r3
 800243a:	d103      	bne.n	8002444 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	1e5a      	subs	r2, r3, #1
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4619      	mov	r1, r3
 800245a:	f240 101d 	movw	r0, #285	@ 0x11d
 800245e:	f005 f9df 	bl	8007820 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800247a:	2301      	movs	r3, #1
 800247c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10d      	bne.n	80024a4 <xQueueGenericReset+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8002488:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800248c:	b672      	cpsid	i
 800248e:	f383 8811 	msr	BASEPRI, r3
 8002492:	f3bf 8f6f 	isb	sy
 8002496:	f3bf 8f4f 	dsb	sy
 800249a:	b662      	cpsie	i
 800249c:	60fb      	str	r3, [r7, #12]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800249e:	bf00      	nop
 80024a0:	bf00      	nop
 80024a2:	e7fd      	b.n	80024a0 <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d05d      	beq.n	8002566 <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d059      	beq.n	8002566 <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ba:	2100      	movs	r1, #0
 80024bc:	fba3 2302 	umull	r2, r3, r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d000      	beq.n	80024c6 <xQueueGenericReset+0x56>
 80024c4:	2101      	movs	r1, #1
 80024c6:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d14c      	bne.n	8002566 <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 80024cc:	f002 fc1a 	bl	8004d04 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d8:	6939      	ldr	r1, [r7, #16]
 80024da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	441a      	add	r2, r3
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	2200      	movs	r2, #0
 80024ea:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fc:	3b01      	subs	r3, #1
 80024fe:	6939      	ldr	r1, [r7, #16]
 8002500:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	441a      	add	r2, r3
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	22ff      	movs	r2, #255	@ 0xff
 8002510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	22ff      	movs	r2, #255	@ 0xff
 8002518:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d114      	bne.n	800254c <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d01a      	beq.n	8002560 <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	3310      	adds	r3, #16
 800252e:	4618      	mov	r0, r3
 8002530:	f001 fa66 	bl	8003a00 <xTaskRemoveFromEventList>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d012      	beq.n	8002560 <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800253a:	4b19      	ldr	r3, [pc, #100]	@ (80025a0 <xQueueGenericReset+0x130>)
 800253c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	f3bf 8f6f 	isb	sy
 800254a:	e009      	b.n	8002560 <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	3310      	adds	r3, #16
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fecb 	bl	80022ec <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	3324      	adds	r3, #36	@ 0x24
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fec6 	bl	80022ec <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002560:	f002 fc06 	bl	8004d70 <vPortExitCritical>
 8002564:	e001      	b.n	800256a <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10d      	bne.n	800258c <xQueueGenericReset+0x11c>
    __asm volatile
 8002570:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002574:	b672      	cpsid	i
 8002576:	f383 8811 	msr	BASEPRI, r3
 800257a:	f3bf 8f6f 	isb	sy
 800257e:	f3bf 8f4f 	dsb	sy
 8002582:	b662      	cpsie	i
 8002584:	60bb      	str	r3, [r7, #8]
}
 8002586:	bf00      	nop
 8002588:	bf00      	nop
 800258a:	e7fd      	b.n	8002588 <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	4619      	mov	r1, r3
 8002590:	2096      	movs	r0, #150	@ 0x96
 8002592:	f005 f945 	bl	8007820 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002596:	697b      	ldr	r3, [r7, #20]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	e000ed04 	.word	0xe000ed04

080025a4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	@ 0x28
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	4613      	mov	r3, r2
 80025b0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d02e      	beq.n	800261a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80025bc:	2100      	movs	r1, #0
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	fba3 2302 	umull	r2, r3, r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d000      	beq.n	80025cc <xQueueGenericCreate+0x28>
 80025ca:	2101      	movs	r1, #1
 80025cc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d123      	bne.n	800261a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80025da:	f113 0f55 	cmn.w	r3, #85	@ 0x55
 80025de:	d81c      	bhi.n	800261a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	fb02 f303 	mul.w	r3, r2, r3
 80025e8:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	3354      	adds	r3, #84	@ 0x54
 80025ee:	4618      	mov	r0, r3
 80025f0:	f002 fcc4 	bl	8004f7c <pvPortMalloc>
 80025f4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01f      	beq.n	800263c <xQueueGenericCreate+0x98>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	3354      	adds	r3, #84	@ 0x54
 8002604:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002606:	79fa      	ldrb	r2, [r7, #7]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	4613      	mov	r3, r2
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f820 	bl	8002658 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002618:	e010      	b.n	800263c <xQueueGenericCreate+0x98>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10d      	bne.n	800263c <xQueueGenericCreate+0x98>
    __asm volatile
 8002620:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002624:	b672      	cpsid	i
 8002626:	f383 8811 	msr	BASEPRI, r3
 800262a:	f3bf 8f6f 	isb	sy
 800262e:	f3bf 8f4f 	dsb	sy
 8002632:	b662      	cpsie	i
 8002634:	613b      	str	r3, [r7, #16]
}
 8002636:	bf00      	nop
 8002638:	bf00      	nop
 800263a:	e7fd      	b.n	8002638 <xQueueGenericCreate+0x94>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	4618      	mov	r0, r3
 8002640:	f005 fa88 	bl	8007b54 <SEGGER_SYSVIEW_ShrinkId>
 8002644:	4603      	mov	r3, r0
 8002646:	4619      	mov	r1, r3
 8002648:	2098      	movs	r0, #152	@ 0x98
 800264a:	f005 f8e9 	bl	8007820 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 800264e:	69fb      	ldr	r3, [r7, #28]
    }
 8002650:	4618      	mov	r0, r3
 8002652:	3720      	adds	r7, #32
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d103      	bne.n	8002674 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	e002      	b.n	800267a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002686:	2101      	movs	r1, #1
 8002688:	69b8      	ldr	r0, [r7, #24]
 800268a:	f7ff fef1 	bl	8002470 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
    {
        pxNewQueue->pxQueueSetContainer = NULL;
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	2200      	movs	r2, #0
 800269a:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08c      	sub	sp, #48	@ 0x30
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80026b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10d      	bne.n	80026da <xQueueReceive+0x36>
    __asm volatile
 80026be:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80026c2:	b672      	cpsid	i
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	b662      	cpsie	i
 80026d2:	623b      	str	r3, [r7, #32]
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	e7fd      	b.n	80026d6 <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d103      	bne.n	80026e8 <xQueueReceive+0x44>
 80026e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <xQueueReceive+0x48>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <xQueueReceive+0x4a>
 80026ec:	2300      	movs	r3, #0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10d      	bne.n	800270e <xQueueReceive+0x6a>
    __asm volatile
 80026f2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80026f6:	b672      	cpsid	i
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	b662      	cpsie	i
 8002706:	61fb      	str	r3, [r7, #28]
}
 8002708:	bf00      	nop
 800270a:	bf00      	nop
 800270c:	e7fd      	b.n	800270a <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800270e:	f001 fb9f 	bl	8003e50 <xTaskGetSchedulerState>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d102      	bne.n	800271e <xQueueReceive+0x7a>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <xQueueReceive+0x7e>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <xQueueReceive+0x80>
 8002722:	2300      	movs	r3, #0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10d      	bne.n	8002744 <xQueueReceive+0xa0>
    __asm volatile
 8002728:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800272c:	b672      	cpsid	i
 800272e:	f383 8811 	msr	BASEPRI, r3
 8002732:	f3bf 8f6f 	isb	sy
 8002736:	f3bf 8f4f 	dsb	sy
 800273a:	b662      	cpsie	i
 800273c:	61bb      	str	r3, [r7, #24]
}
 800273e:	bf00      	nop
 8002740:	bf00      	nop
 8002742:	e7fd      	b.n	8002740 <xQueueReceive+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002744:	f002 fade 	bl	8004d04 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800274a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	2b00      	cmp	r3, #0
 8002752:	d023      	beq.n	800279c <xQueueReceive+0xf8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002758:	f000 f902 	bl	8002960 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 800275c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275e:	1e5a      	subs	r2, r3, #1
 8002760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002762:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00f      	beq.n	800278c <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800276c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276e:	3310      	adds	r3, #16
 8002770:	4618      	mov	r0, r3
 8002772:	f001 f945 	bl	8003a00 <xTaskRemoveFromEventList>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d007      	beq.n	800278c <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800277c:	4b42      	ldr	r3, [pc, #264]	@ (8002888 <xQueueReceive+0x1e4>)
 800277e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800278c:	f002 faf0 	bl	8004d70 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8002790:	2101      	movs	r1, #1
 8002792:	20a4      	movs	r0, #164	@ 0xa4
 8002794:	f005 f844 	bl	8007820 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8002798:	2301      	movs	r3, #1
 800279a:	e071      	b.n	8002880 <xQueueReceive+0x1dc>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d107      	bne.n	80027b2 <xQueueReceive+0x10e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80027a2:	f002 fae5 	bl	8004d70 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80027a6:	2100      	movs	r1, #0
 80027a8:	20a4      	movs	r0, #164	@ 0xa4
 80027aa:	f005 f839 	bl	8007820 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e066      	b.n	8002880 <xQueueReceive+0x1dc>
                }
                else if( xEntryTimeSet == pdFALSE )
 80027b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d106      	bne.n	80027c6 <xQueueReceive+0x122>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80027b8:	f107 0310 	add.w	r3, r7, #16
 80027bc:	4618      	mov	r0, r3
 80027be:	f001 fa01 	bl	8003bc4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80027c2:	2301      	movs	r3, #1
 80027c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80027c6:	f002 fad3 	bl	8004d70 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80027ca:	f000 fdb9 	bl	8003340 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027ce:	f002 fa99 	bl	8004d04 <vPortEnterCritical>
 80027d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027d8:	b25b      	sxtb	r3, r3
 80027da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027de:	d103      	bne.n	80027e8 <xQueueReceive+0x144>
 80027e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027ee:	b25b      	sxtb	r3, r3
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d103      	bne.n	80027fe <xQueueReceive+0x15a>
 80027f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027fe:	f002 fab7 	bl	8004d70 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002802:	1d3a      	adds	r2, r7, #4
 8002804:	f107 0310 	add.w	r3, r7, #16
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f001 f9f2 	bl	8003bf4 <xTaskCheckForTimeOut>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d123      	bne.n	800285e <xQueueReceive+0x1ba>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002816:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002818:	f000 f927 	bl	8002a6a <prvIsQueueEmpty>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d017      	beq.n	8002852 <xQueueReceive+0x1ae>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002824:	3324      	adds	r3, #36	@ 0x24
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	4611      	mov	r1, r2
 800282a:	4618      	mov	r0, r3
 800282c:	f001 f872 	bl	8003914 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002830:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002832:	f000 f8bb 	bl	80029ac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002836:	f000 fd91 	bl	800335c <xTaskResumeAll>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d181      	bne.n	8002744 <xQueueReceive+0xa0>
                {
                    taskYIELD_WITHIN_API();
 8002840:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <xQueueReceive+0x1e4>)
 8002842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	e778      	b.n	8002744 <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002854:	f000 f8aa 	bl	80029ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002858:	f000 fd80 	bl	800335c <xTaskResumeAll>
 800285c:	e772      	b.n	8002744 <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800285e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002860:	f000 f8a4 	bl	80029ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002864:	f000 fd7a 	bl	800335c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002868:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800286a:	f000 f8fe 	bl	8002a6a <prvIsQueueEmpty>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	f43f af67 	beq.w	8002744 <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002876:	2100      	movs	r1, #0
 8002878:	20a4      	movs	r0, #164	@ 0xa4
 800287a:	f004 ffd1 	bl	8007820 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 800287e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8002880:	4618      	mov	r0, r3
 8002882:	3730      	adds	r7, #48	@ 0x30
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	e000ed04 	.word	0xe000ed04

0800288c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10d      	bne.n	80028c6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d14d      	bne.n	800294e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f001 faec 	bl	8003e94 <xTaskPriorityDisinherit>
 80028bc:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	e043      	b.n	800294e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d119      	bne.n	8002900 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6858      	ldr	r0, [r3, #4]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d4:	461a      	mov	r2, r3
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	f005 fb0c 	bl	8007ef4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e4:	441a      	add	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d32b      	bcc.n	800294e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	e026      	b.n	800294e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	68d8      	ldr	r0, [r3, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	461a      	mov	r2, r3
 800290a:	68b9      	ldr	r1, [r7, #8]
 800290c:	f005 faf2 	bl	8007ef4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002918:	425b      	negs	r3, r3
 800291a:	441a      	add	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d207      	bcs.n	800293c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002934:	425b      	negs	r3, r3
 8002936:	441a      	add	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d105      	bne.n	800294e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	3b01      	subs	r3, #1
 800294c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002956:	697b      	ldr	r3, [r7, #20]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d018      	beq.n	80029a4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	441a      	add	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	429a      	cmp	r2, r3
 800298a:	d303      	bcc.n	8002994 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68d9      	ldr	r1, [r3, #12]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	461a      	mov	r2, r3
 800299e:	6838      	ldr	r0, [r7, #0]
 80029a0:	f005 faa8 	bl	8007ef4 <memcpy>
    }
}
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80029b4:	f002 f9a6 	bl	8004d04 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029be:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80029c0:	e01e      	b.n	8002a00 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d008      	beq.n	80029dc <prvUnlockQueue+0x30>
                {
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f8ed 	bl	8002baa <prvNotifyQueueSetContainer>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d010      	beq.n	80029f8 <prvUnlockQueue+0x4c>
                    {
                        /* The queue is a member of a queue set, and posting to
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
 80029d6:	f001 f97d 	bl	8003cd4 <vTaskMissedYield>
 80029da:	e00d      	b.n	80029f8 <prvUnlockQueue+0x4c>
                else
                {
                    /* Tasks that are removed from the event list will get
                     * added to the pending ready list as the scheduler is still
                     * suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d012      	beq.n	8002a0a <prvUnlockQueue+0x5e>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3324      	adds	r3, #36	@ 0x24
 80029e8:	4618      	mov	r0, r3
 80029ea:	f001 f809 	bl	8003a00 <xTaskRemoveFromEventList>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <prvUnlockQueue+0x4c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            vTaskMissedYield();
 80029f4:	f001 f96e 	bl	8003cd4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	dcdc      	bgt.n	80029c2 <prvUnlockQueue+0x16>
 8002a08:	e000      	b.n	8002a0c <prvUnlockQueue+0x60>
                        break;
 8002a0a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	22ff      	movs	r2, #255	@ 0xff
 8002a10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002a14:	f002 f9ac 	bl	8004d70 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002a18:	f002 f974 	bl	8004d04 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a22:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a24:	e011      	b.n	8002a4a <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d012      	beq.n	8002a54 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3310      	adds	r3, #16
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 ffe4 	bl	8003a00 <xTaskRemoveFromEventList>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 8002a3e:	f001 f949 	bl	8003cd4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002a42:	7bbb      	ldrb	r3, [r7, #14]
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	dce9      	bgt.n	8002a26 <prvUnlockQueue+0x7a>
 8002a52:	e000      	b.n	8002a56 <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8002a54:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	22ff      	movs	r2, #255	@ 0xff
 8002a5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002a5e:	f002 f987 	bl	8004d70 <vPortExitCritical>
}
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002a72:	f002 f947 	bl	8004d04 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d102      	bne.n	8002a84 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	e001      	b.n	8002a88 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002a88:	f002 f972 	bl	8004d70 <vPortExitCritical>

    return xReturn;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10d      	bne.n	8002ac8 <vQueueAddToRegistry+0x30>
    __asm volatile
 8002aac:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002ab0:	b672      	cpsid	i
 8002ab2:	f383 8811 	msr	BASEPRI, r3
 8002ab6:	f3bf 8f6f 	isb	sy
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	b662      	cpsie	i
 8002ac0:	60fb      	str	r3, [r7, #12]
}
 8002ac2:	bf00      	nop
 8002ac4:	bf00      	nop
 8002ac6:	e7fd      	b.n	8002ac4 <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d024      	beq.n	8002b18 <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	e01e      	b.n	8002b12 <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002ad4:	4a18      	ldr	r2, [pc, #96]	@ (8002b38 <vQueueAddToRegistry+0xa0>)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d105      	bne.n	8002af0 <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4a13      	ldr	r2, [pc, #76]	@ (8002b38 <vQueueAddToRegistry+0xa0>)
 8002aea:	4413      	add	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
                    break;
 8002aee:	e013      	b.n	8002b18 <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <vQueueAddToRegistry+0x74>
 8002af6:	4a10      	ldr	r2, [pc, #64]	@ (8002b38 <vQueueAddToRegistry+0xa0>)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d104      	bne.n	8002b0c <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4a0c      	ldr	r2, [pc, #48]	@ (8002b38 <vQueueAddToRegistry+0xa0>)
 8002b08:	4413      	add	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b07      	cmp	r3, #7
 8002b16:	d9dd      	bls.n	8002ad4 <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d005      	beq.n	8002b2a <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8002b2a:	20b6      	movs	r0, #182	@ 0xb6
 8002b2c:	f004 fe3c 	bl	80077a8 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002b30:	bf00      	nop
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	2000009c 	.word	0x2000009c

08002b3c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002b4c:	f002 f8da 	bl	8004d04 <vPortEnterCritical>
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5c:	d103      	bne.n	8002b66 <vQueueWaitForMessageRestricted+0x2a>
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b6c:	b25b      	sxtb	r3, r3
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b72:	d103      	bne.n	8002b7c <vQueueWaitForMessageRestricted+0x40>
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b7c:	f002 f8f8 	bl	8004d70 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	3324      	adds	r3, #36	@ 0x24
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fee9 	bl	8003968 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002b96:	6978      	ldr	r0, [r7, #20]
 8002b98:	f7ff ff08 	bl	80029ac <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8002b9c:	20b9      	movs	r0, #185	@ 0xb9
 8002b9e:	f004 fe03 	bl	80077a8 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002ba2:	bf00      	nop
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b08a      	sub	sp, #40	@ 0x28
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bb6:	623b      	str	r3, [r7, #32]
        BaseType_t xReturn = pdFALSE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	627b      	str	r3, [r7, #36]	@ 0x24
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10d      	bne.n	8002bde <prvNotifyQueueSetContainer+0x34>
    __asm volatile
 8002bc2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002bc6:	b672      	cpsid	i
 8002bc8:	f383 8811 	msr	BASEPRI, r3
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	b662      	cpsie	i
 8002bd6:	617b      	str	r3, [r7, #20]
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	e7fd      	b.n	8002bda <prvNotifyQueueSetContainer+0x30>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d30d      	bcc.n	8002c06 <prvNotifyQueueSetContainer+0x5c>
    __asm volatile
 8002bea:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002bee:	b672      	cpsid	i
 8002bf0:	f383 8811 	msr	BASEPRI, r3
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	b662      	cpsie	i
 8002bfe:	613b      	str	r3, [r7, #16]
}
 8002c00:	bf00      	nop
 8002c02:	bf00      	nop
 8002c04:	e7fd      	b.n	8002c02 <prvNotifyQueueSetContainer+0x58>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d23f      	bcs.n	8002c92 <prvNotifyQueueSetContainer+0xe8>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c18:	77fb      	strb	r3, [r7, #31]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8002c1a:	1d3b      	adds	r3, r7, #4
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6a38      	ldr	r0, [r7, #32]
 8002c22:	f7ff fe33 	bl	800288c <prvCopyDataToQueue>
 8002c26:	6278      	str	r0, [r7, #36]	@ 0x24

            if( cTxLock == queueUNLOCKED )
 8002c28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d10e      	bne.n	8002c50 <prvNotifyQueueSetContainer+0xa6>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d02b      	beq.n	8002c92 <prvNotifyQueueSetContainer+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	3324      	adds	r3, #36	@ 0x24
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fede 	bl	8003a00 <xTaskRemoveFromEventList>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d023      	beq.n	8002c92 <prvNotifyQueueSetContainer+0xe8>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c4e:	e020      	b.n	8002c92 <prvNotifyQueueSetContainer+0xe8>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
 8002c50:	f000 fcc0 	bl	80035d4 <uxTaskGetNumberOfTasks>
 8002c54:	61b8      	str	r0, [r7, #24]
 8002c56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d918      	bls.n	8002c92 <prvNotifyQueueSetContainer+0xe8>
 8002c60:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002c64:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c66:	d10d      	bne.n	8002c84 <prvNotifyQueueSetContainer+0xda>
    __asm volatile
 8002c68:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002c6c:	b672      	cpsid	i
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	b662      	cpsie	i
 8002c7c:	60fb      	str	r3, [r7, #12]
}
 8002c7e:	bf00      	nop
 8002c80:	bf00      	nop
 8002c82:	e7fd      	b.n	8002c80 <prvNotifyQueueSetContainer+0xd6>
 8002c84:	7ffb      	ldrb	r3, [r7, #31]
 8002c86:	3301      	adds	r3, #1
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	b25a      	sxtb	r2, r3
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002c94:	4618      	mov	r0, r3
 8002c96:	3728      	adds	r7, #40	@ 0x28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	@ 0x28
 8002ca0:	af04      	add	r7, sp, #16
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f002 f964 	bl	8004f7c <pvPortMalloc>
 8002cb4:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d013      	beq.n	8002ce4 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002cbc:	2058      	movs	r0, #88	@ 0x58
 8002cbe:	f002 f95d 	bl	8004f7c <pvPortMalloc>
 8002cc2:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d008      	beq.n	8002cdc <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002cca:	2258      	movs	r2, #88	@ 0x58
 8002ccc:	2100      	movs	r1, #0
 8002cce:	6978      	ldr	r0, [r7, #20]
 8002cd0:	f005 f8e4 	bl	8007e9c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cda:	e005      	b.n	8002ce8 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002cdc:	6938      	ldr	r0, [r7, #16]
 8002cde:	f002 fa8b 	bl	80051f8 <vPortFree>
 8002ce2:	e001      	b.n	8002ce8 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00d      	beq.n	8002d0a <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cee:	2300      	movs	r3, #0
 8002cf0:	9303      	str	r3, [sp, #12]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	9302      	str	r3, [sp, #8]
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf8:	9301      	str	r3, [sp, #4]
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 f82d 	bl	8002d64 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002d0a:	697b      	ldr	r3, [r7, #20]
    }
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	68b9      	ldr	r1, [r7, #8]
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f7ff ffb3 	bl	8002c9c <prvCreateTask>
 8002d36:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002d3e:	6938      	ldr	r0, [r7, #16]
 8002d40:	f000 f8a4 	bl	8002e8c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d44:	2301      	movs	r3, #1
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	e002      	b.n	8002d50 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4e:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	4619      	mov	r1, r3
 8002d54:	20c2      	movs	r0, #194	@ 0xc2
 8002d56:	f004 fd63 	bl	8007820 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002d5a:	697b      	ldr	r3, [r7, #20]
    }
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d74:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	21a5      	movs	r1, #165	@ 0xa5
 8002d7e:	f005 f88d 	bl	8007e9c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002d8c:	440b      	add	r3, r1
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	f023 0307 	bic.w	r3, r3, #7
 8002d9a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00d      	beq.n	8002dc2 <prvInitialiseNewTask+0x5e>
    __asm volatile
 8002da6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002daa:	b672      	cpsid	i
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	b662      	cpsie	i
 8002dba:	617b      	str	r3, [r7, #20]
}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	e7fd      	b.n	8002dbe <prvInitialiseNewTask+0x5a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d01e      	beq.n	8002e06 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61fb      	str	r3, [r7, #28]
 8002dcc:	e012      	b.n	8002df4 <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	7819      	ldrb	r1, [r3, #0]
 8002dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	4413      	add	r3, r2
 8002ddc:	3334      	adds	r3, #52	@ 0x34
 8002dde:	460a      	mov	r2, r1
 8002de0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	4413      	add	r3, r2
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d006      	beq.n	8002dfc <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3301      	adds	r3, #1
 8002df2:	61fb      	str	r3, [r7, #28]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	2b09      	cmp	r3, #9
 8002df8:	d9e9      	bls.n	8002dce <prvInitialiseNewTask+0x6a>
 8002dfa:	e000      	b.n	8002dfe <prvInitialiseNewTask+0x9a>
            {
                break;
 8002dfc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d90d      	bls.n	8002e28 <prvInitialiseNewTask+0xc4>
    __asm volatile
 8002e0c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002e10:	b672      	cpsid	i
 8002e12:	f383 8811 	msr	BASEPRI, r3
 8002e16:	f3bf 8f6f 	isb	sy
 8002e1a:	f3bf 8f4f 	dsb	sy
 8002e1e:	b662      	cpsie	i
 8002e20:	613b      	str	r3, [r7, #16]
}
 8002e22:	bf00      	nop
 8002e24:	bf00      	nop
 8002e26:	e7fd      	b.n	8002e24 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d901      	bls.n	8002e32 <prvInitialiseNewTask+0xce>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e2e:	2304      	movs	r3, #4
 8002e30:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e36:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e3c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e40:	3304      	adds	r3, #4
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fa74 	bl	8002330 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4a:	3318      	adds	r3, #24
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fa6f 	bl	8002330 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e56:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5a:	f1c3 0205 	rsb	r2, r3, #5
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e60:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e66:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	68f9      	ldr	r1, [r7, #12]
 8002e6c:	69b8      	ldr	r0, [r7, #24]
 8002e6e:	f001 fde3 	bl	8004a38 <pxPortInitialiseStack>
 8002e72:	4602      	mov	r2, r0
 8002e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e76:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <prvInitialiseNewTask+0x120>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e82:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e84:	bf00      	nop
 8002e86:	3720      	adds	r7, #32
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002e8c:	b5b0      	push	{r4, r5, r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002e94:	f001 ff36 	bl	8004d04 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002e98:	4b50      	ldr	r3, [pc, #320]	@ (8002fdc <prvAddNewTaskToReadyList+0x150>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	4a4f      	ldr	r2, [pc, #316]	@ (8002fdc <prvAddNewTaskToReadyList+0x150>)
 8002ea0:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002ea2:	4b4f      	ldr	r3, [pc, #316]	@ (8002fe0 <prvAddNewTaskToReadyList+0x154>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002eaa:	4a4d      	ldr	r2, [pc, #308]	@ (8002fe0 <prvAddNewTaskToReadyList+0x154>)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002eb0:	4b4a      	ldr	r3, [pc, #296]	@ (8002fdc <prvAddNewTaskToReadyList+0x150>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d110      	bne.n	8002eda <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002eb8:	f000 ff30 	bl	8003d1c <prvInitialiseTaskLists>
 8002ebc:	e00d      	b.n	8002eda <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002ebe:	4b49      	ldr	r3, [pc, #292]	@ (8002fe4 <prvAddNewTaskToReadyList+0x158>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ec6:	4b46      	ldr	r3, [pc, #280]	@ (8002fe0 <prvAddNewTaskToReadyList+0x154>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d802      	bhi.n	8002eda <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002ed4:	4a42      	ldr	r2, [pc, #264]	@ (8002fe0 <prvAddNewTaskToReadyList+0x154>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002eda:	4b43      	ldr	r3, [pc, #268]	@ (8002fe8 <prvAddNewTaskToReadyList+0x15c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	4a41      	ldr	r2, [pc, #260]	@ (8002fe8 <prvAddNewTaskToReadyList+0x15c>)
 8002ee2:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ee4:	4b40      	ldr	r3, [pc, #256]	@ (8002fe8 <prvAddNewTaskToReadyList+0x15c>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d016      	beq.n	8002f20 <prvAddNewTaskToReadyList+0x94>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f004 fd07 	bl	8007908 <SEGGER_SYSVIEW_OnTaskCreate>
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	461d      	mov	r5, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	461c      	mov	r4, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	1ae3      	subs	r3, r4, r3
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	462b      	mov	r3, r5
 8002f1c:	f002 fb72 	bl	8005604 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f004 fd74 	bl	8007a10 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	4b2e      	ldr	r3, [pc, #184]	@ (8002fec <prvAddNewTaskToReadyList+0x160>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	4a2d      	ldr	r2, [pc, #180]	@ (8002fec <prvAddNewTaskToReadyList+0x160>)
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f3e:	492c      	ldr	r1, [pc, #176]	@ (8002ff0 <prvAddNewTaskToReadyList+0x164>)
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	609a      	str	r2, [r3, #8]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	3204      	adds	r2, #4
 8002f66:	605a      	str	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	1d1a      	adds	r2, r3, #4
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff0 <prvAddNewTaskToReadyList+0x164>)
 8002f7e:	441a      	add	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	615a      	str	r2, [r3, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f88:	4919      	ldr	r1, [pc, #100]	@ (8002ff0 <prvAddNewTaskToReadyList+0x164>)
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f9a:	1c59      	adds	r1, r3, #1
 8002f9c:	4814      	ldr	r0, [pc, #80]	@ (8002ff0 <prvAddNewTaskToReadyList+0x164>)
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4403      	add	r3, r0
 8002fa8:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002faa:	f001 fee1 	bl	8004d70 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002fae:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe4 <prvAddNewTaskToReadyList+0x158>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00e      	beq.n	8002fd4 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8002fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe0 <prvAddNewTaskToReadyList+0x154>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d207      	bcs.n	8002fd4 <prvAddNewTaskToReadyList+0x148>
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff4 <prvAddNewTaskToReadyList+0x168>)
 8002fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002fd4:	bf00      	nop
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bdb0      	pop	{r4, r5, r7, pc}
 8002fdc:	200001b4 	.word	0x200001b4
 8002fe0:	200000dc 	.word	0x200000dc
 8002fe4:	200001c0 	.word	0x200001c0
 8002fe8:	200001d0 	.word	0x200001d0
 8002fec:	200001bc 	.word	0x200001bc
 8002ff0:	200000e0 	.word	0x200000e0
 8002ff4:	e000ed04 	.word	0xe000ed04

08002ff8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8003004:	f001 fe7e 	bl	8004d04 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d102      	bne.n	8003014 <vTaskDelete+0x1c>
 800300e:	4b51      	ldr	r3, [pc, #324]	@ (8003154 <vTaskDelete+0x15c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	e000      	b.n	8003016 <vTaskDelete+0x1e>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	3304      	adds	r3, #4
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff f9f7 	bl	8002410 <uxListRemove>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d115      	bne.n	8003054 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800302c:	494a      	ldr	r1, [pc, #296]	@ (8003158 <vTaskDelete+0x160>)
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <vTaskDelete+0x5c>
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003042:	2201      	movs	r2, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43da      	mvns	r2, r3
 800304a:	4b44      	ldr	r3, [pc, #272]	@ (800315c <vTaskDelete+0x164>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4013      	ands	r3, r2
 8003050:	4a42      	ldr	r2, [pc, #264]	@ (800315c <vTaskDelete+0x164>)
 8003052:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003058:	2b00      	cmp	r3, #0
 800305a:	d004      	beq.n	8003066 <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	3318      	adds	r3, #24
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff f9d5 	bl	8002410 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8003066:	4b3e      	ldr	r3, [pc, #248]	@ (8003160 <vTaskDelete+0x168>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3301      	adds	r3, #1
 800306c:	4a3c      	ldr	r2, [pc, #240]	@ (8003160 <vTaskDelete+0x168>)
 800306e:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8003070:	4b38      	ldr	r3, [pc, #224]	@ (8003154 <vTaskDelete+0x15c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	429a      	cmp	r2, r3
 8003078:	d101      	bne.n	800307e <vTaskDelete+0x86>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <vTaskDelete+0x88>
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8003082:	4b38      	ldr	r3, [pc, #224]	@ (8003164 <vTaskDelete+0x16c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d01d      	beq.n	80030c6 <vTaskDelete+0xce>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01a      	beq.n	80030c6 <vTaskDelete+0xce>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	3304      	adds	r3, #4
 8003094:	4619      	mov	r1, r3
 8003096:	4834      	ldr	r0, [pc, #208]	@ (8003168 <vTaskDelete+0x170>)
 8003098:	f7ff f959 	bl	800234e <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800309c:	4b33      	ldr	r3, [pc, #204]	@ (800316c <vTaskDelete+0x174>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	4a32      	ldr	r2, [pc, #200]	@ (800316c <vTaskDelete+0x174>)
 80030a4:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f004 fd53 	bl	8007b54 <SEGGER_SYSVIEW_ShrinkId>
 80030ae:	4603      	mov	r3, r0
 80030b0:	4619      	mov	r1, r3
 80030b2:	20c3      	movs	r0, #195	@ 0xc3
 80030b4:	f003 ffa0 	bl	8006ff8 <SEGGER_SYSVIEW_RecordU32>
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f002 fb0a 	bl	80056d4 <SYSVIEW_DeleteTask>

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 80030c0:	2301      	movs	r3, #1
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	e013      	b.n	80030ee <vTaskDelete+0xf6>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80030c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003170 <vTaskDelete+0x178>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	4a28      	ldr	r2, [pc, #160]	@ (8003170 <vTaskDelete+0x178>)
 80030ce:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f004 fd3e 	bl	8007b54 <SEGGER_SYSVIEW_ShrinkId>
 80030d8:	4603      	mov	r3, r0
 80030da:	4619      	mov	r1, r3
 80030dc:	20c3      	movs	r0, #195	@ 0xc3
 80030de:	f003 ff8b 	bl	8006ff8 <SEGGER_SYSVIEW_RecordU32>
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f002 faf5 	bl	80056d4 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80030ea:	f000 fe95 	bl	8003e18 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80030ee:	f001 fe3f 	bl	8004d70 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d002      	beq.n	80030fe <vTaskDelete+0x106>
        {
            prvDeleteTCB( pxTCB );
 80030f8:	6938      	ldr	r0, [r7, #16]
 80030fa:	f000 fe7d 	bl	8003df8 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 80030fe:	4b19      	ldr	r3, [pc, #100]	@ (8003164 <vTaskDelete+0x16c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d01e      	beq.n	8003144 <vTaskDelete+0x14c>
            {
                if( pxTCB == pxCurrentTCB )
 8003106:	4b13      	ldr	r3, [pc, #76]	@ (8003154 <vTaskDelete+0x15c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	429a      	cmp	r2, r3
 800310e:	d119      	bne.n	8003144 <vTaskDelete+0x14c>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8003110:	4b18      	ldr	r3, [pc, #96]	@ (8003174 <vTaskDelete+0x17c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00d      	beq.n	8003134 <vTaskDelete+0x13c>
    __asm volatile
 8003118:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800311c:	b672      	cpsid	i
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	b662      	cpsie	i
 800312c:	60bb      	str	r3, [r7, #8]
}
 800312e:	bf00      	nop
 8003130:	bf00      	nop
 8003132:	e7fd      	b.n	8003130 <vTaskDelete+0x138>
                    taskYIELD_WITHIN_API();
 8003134:	4b10      	ldr	r3, [pc, #64]	@ (8003178 <vTaskDelete+0x180>)
 8003136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	f3bf 8f6f 	isb	sy
                }
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
 8003144:	20c3      	movs	r0, #195	@ 0xc3
 8003146:	f004 fb2f 	bl	80077a8 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800314a:	bf00      	nop
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	200000dc 	.word	0x200000dc
 8003158:	200000e0 	.word	0x200000e0
 800315c:	200001bc 	.word	0x200001bc
 8003160:	200001d0 	.word	0x200001d0
 8003164:	200001c0 	.word	0x200001c0
 8003168:	20000188 	.word	0x20000188
 800316c:	2000019c 	.word	0x2000019c
 8003170:	200001b4 	.word	0x200001b4
 8003174:	200001dc 	.word	0x200001dc
 8003178:	e000ed04 	.word	0xe000ed04

0800317c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d01a      	beq.n	80031c4 <vTaskDelay+0x48>
        {
            vTaskSuspendAll();
 800318e:	f000 f8d7 	bl	8003340 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8003192:	4b15      	ldr	r3, [pc, #84]	@ (80031e8 <vTaskDelay+0x6c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d00d      	beq.n	80031b6 <vTaskDelay+0x3a>
    __asm volatile
 800319a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800319e:	b672      	cpsid	i
 80031a0:	f383 8811 	msr	BASEPRI, r3
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	b662      	cpsie	i
 80031ae:	60bb      	str	r3, [r7, #8]
}
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	e7fd      	b.n	80031b2 <vTaskDelay+0x36>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80031b6:	2100      	movs	r1, #0
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f001 f8f5 	bl	80043a8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80031be:	f000 f8cd 	bl	800335c <xTaskResumeAll>
 80031c2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d107      	bne.n	80031da <vTaskDelay+0x5e>
        {
            taskYIELD_WITHIN_API();
 80031ca:	4b08      	ldr	r3, [pc, #32]	@ (80031ec <vTaskDelay+0x70>)
 80031cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 80031da:	20c5      	movs	r0, #197	@ 0xc5
 80031dc:	f004 fae4 	bl	80077a8 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80031e0:	bf00      	nop
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	200001dc 	.word	0x200001dc
 80031ec:	e000ed04 	.word	0xe000ed04

080031f0 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	@ 0x28
 80031f4:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80031f6:	2301      	movs	r3, #1
 80031f8:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	e011      	b.n	8003228 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003204:	4a1c      	ldr	r2, [pc, #112]	@ (8003278 <prvCreateIdleTasks+0x88>)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	4413      	add	r3, r2
 800320a:	7819      	ldrb	r1, [r3, #0]
 800320c:	1d3a      	adds	r2, r7, #4
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	4413      	add	r3, r2
 8003212:	460a      	mov	r2, r1
 8003214:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003216:	1d3a      	adds	r2, r7, #4
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	4413      	add	r3, r2
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d006      	beq.n	8003230 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	3301      	adds	r3, #1
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2b09      	cmp	r3, #9
 800322c:	ddea      	ble.n	8003204 <prvCreateIdleTasks+0x14>
 800322e:	e000      	b.n	8003232 <prvCreateIdleTasks+0x42>
        {
            break;
 8003230:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003232:	2300      	movs	r3, #0
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	e015      	b.n	8003264 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8003238:	4b10      	ldr	r3, [pc, #64]	@ (800327c <prvCreateIdleTasks+0x8c>)
 800323a:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4a0f      	ldr	r2, [pc, #60]	@ (8003280 <prvCreateIdleTasks+0x90>)
 8003242:	4413      	add	r3, r2
 8003244:	1d39      	adds	r1, r7, #4
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	2300      	movs	r3, #0
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2300      	movs	r3, #0
 800324e:	2282      	movs	r2, #130	@ 0x82
 8003250:	6938      	ldr	r0, [r7, #16]
 8003252:	f7ff fd5f 	bl	8002d14 <xTaskCreate>
 8003256:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d006      	beq.n	800326c <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	3301      	adds	r3, #1
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	dde6      	ble.n	8003238 <prvCreateIdleTasks+0x48>
 800326a:	e000      	b.n	800326e <prvCreateIdleTasks+0x7e>
        {
            break;
 800326c:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800326e:	69fb      	ldr	r3, [r7, #28]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3720      	adds	r7, #32
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	08007f8c 	.word	0x08007f8c
 800327c:	08003ced 	.word	0x08003ced
 8003280:	200001d8 	.word	0x200001d8

08003284 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800328a:	f7ff ffb1 	bl	80031f0 <prvCreateIdleTasks>
 800328e:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d102      	bne.n	800329c <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8003296:	f001 f915 	bl	80044c4 <xTimerCreateTimerTask>
 800329a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d126      	bne.n	80032f0 <vTaskStartScheduler+0x6c>
    __asm volatile
 80032a2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80032a6:	b672      	cpsid	i
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	b662      	cpsie	i
 80032b6:	60bb      	str	r3, [r7, #8]
}
 80032b8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80032ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003328 <vTaskStartScheduler+0xa4>)
 80032bc:	f04f 32ff 	mov.w	r2, #4294967295
 80032c0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80032c2:	4b1a      	ldr	r3, [pc, #104]	@ (800332c <vTaskStartScheduler+0xa8>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032c8:	4b19      	ldr	r3, [pc, #100]	@ (8003330 <vTaskStartScheduler+0xac>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80032ce:	4b19      	ldr	r3, [pc, #100]	@ (8003334 <vTaskStartScheduler+0xb0>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	4b19      	ldr	r3, [pc, #100]	@ (8003338 <vTaskStartScheduler+0xb4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d102      	bne.n	80032e0 <vTaskStartScheduler+0x5c>
 80032da:	f004 faf9 	bl	80078d0 <SEGGER_SYSVIEW_OnIdle>
 80032de:	e004      	b.n	80032ea <vTaskStartScheduler+0x66>
 80032e0:	4b15      	ldr	r3, [pc, #84]	@ (8003338 <vTaskStartScheduler+0xb4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f004 fb51 	bl	800798c <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80032ea:	f001 fc3b 	bl	8004b64 <xPortStartScheduler>
 80032ee:	e011      	b.n	8003314 <vTaskStartScheduler+0x90>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f6:	d10d      	bne.n	8003314 <vTaskStartScheduler+0x90>
    __asm volatile
 80032f8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80032fc:	b672      	cpsid	i
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	b662      	cpsie	i
 800330c:	607b      	str	r3, [r7, #4]
}
 800330e:	bf00      	nop
 8003310:	bf00      	nop
 8003312:	e7fd      	b.n	8003310 <vTaskStartScheduler+0x8c>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003314:	4b09      	ldr	r3, [pc, #36]	@ (800333c <vTaskStartScheduler+0xb8>)
 8003316:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8003318:	20cd      	movs	r0, #205	@ 0xcd
 800331a:	f004 fa45 	bl	80077a8 <SEGGER_SYSVIEW_RecordEndCall>
}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	200001d4 	.word	0x200001d4
 800332c:	200001c0 	.word	0x200001c0
 8003330:	200001b8 	.word	0x200001b8
 8003334:	200001d8 	.word	0x200001d8
 8003338:	200000dc 	.word	0x200000dc
 800333c:	2000000c 	.word	0x2000000c

08003340 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003344:	4b04      	ldr	r3, [pc, #16]	@ (8003358 <vTaskSuspendAll+0x18>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3301      	adds	r3, #1
 800334a:	4a03      	ldr	r2, [pc, #12]	@ (8003358 <vTaskSuspendAll+0x18>)
 800334c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 800334e:	20cf      	movs	r0, #207	@ 0xcf
 8003350:	f004 fa2a 	bl	80077a8 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003354:	bf00      	nop
 8003356:	bd80      	pop	{r7, pc}
 8003358:	200001dc 	.word	0x200001dc

0800335c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800336a:	f001 fccb 	bl	8004d04 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800336e:	2300      	movs	r3, #0
 8003370:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8003372:	4b7b      	ldr	r3, [pc, #492]	@ (8003560 <xTaskResumeAll+0x204>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10d      	bne.n	8003396 <xTaskResumeAll+0x3a>
    __asm volatile
 800337a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800337e:	b672      	cpsid	i
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	b662      	cpsie	i
 800338e:	603b      	str	r3, [r7, #0]
}
 8003390:	bf00      	nop
 8003392:	bf00      	nop
 8003394:	e7fd      	b.n	8003392 <xTaskResumeAll+0x36>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003396:	4b72      	ldr	r3, [pc, #456]	@ (8003560 <xTaskResumeAll+0x204>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3b01      	subs	r3, #1
 800339c:	4a70      	ldr	r2, [pc, #448]	@ (8003560 <xTaskResumeAll+0x204>)
 800339e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80033a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003560 <xTaskResumeAll+0x204>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f040 80ce 	bne.w	8003546 <xTaskResumeAll+0x1ea>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033aa:	4b6e      	ldr	r3, [pc, #440]	@ (8003564 <xTaskResumeAll+0x208>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 80c9 	beq.w	8003546 <xTaskResumeAll+0x1ea>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033b4:	e092      	b.n	80034dc <xTaskResumeAll+0x180>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80033b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003568 <xTaskResumeAll+0x20c>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	69fa      	ldr	r2, [r7, #28]
 80033ca:	6a12      	ldr	r2, [r2, #32]
 80033cc:	609a      	str	r2, [r3, #8]
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	69d2      	ldr	r2, [r2, #28]
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	3318      	adds	r3, #24
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d103      	bne.n	80033ec <xTaskResumeAll+0x90>
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	6a1a      	ldr	r2, [r3, #32]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	605a      	str	r2, [r3, #4]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2200      	movs	r2, #0
 80033f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	1e5a      	subs	r2, r3, #1
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	68d2      	ldr	r2, [r2, #12]
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	69fa      	ldr	r2, [r7, #28]
 8003412:	6892      	ldr	r2, [r2, #8]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3304      	adds	r3, #4
 800341e:	429a      	cmp	r2, r3
 8003420:	d103      	bne.n	800342a <xTaskResumeAll+0xce>
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	2200      	movs	r2, #0
 800342e:	615a      	str	r2, [r3, #20]
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	1e5a      	subs	r2, r3, #1
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	4618      	mov	r0, r3
 800343e:	f004 fae7 	bl	8007a10 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003446:	2201      	movs	r2, #1
 8003448:	409a      	lsls	r2, r3
 800344a:	4b48      	ldr	r3, [pc, #288]	@ (800356c <xTaskResumeAll+0x210>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4313      	orrs	r3, r2
 8003450:	4a46      	ldr	r2, [pc, #280]	@ (800356c <xTaskResumeAll+0x210>)
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003458:	4945      	ldr	r1, [pc, #276]	@ (8003570 <xTaskResumeAll+0x214>)
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	3304      	adds	r3, #4
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	60da      	str	r2, [r3, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	3204      	adds	r2, #4
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	1d1a      	adds	r2, r3, #4
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	609a      	str	r2, [r3, #8]
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4a36      	ldr	r2, [pc, #216]	@ (8003570 <xTaskResumeAll+0x214>)
 8003498:	441a      	add	r2, r3
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	615a      	str	r2, [r3, #20]
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034a2:	4933      	ldr	r1, [pc, #204]	@ (8003570 <xTaskResumeAll+0x214>)
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69fa      	ldr	r2, [r7, #28]
 80034b2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80034b4:	1c59      	adds	r1, r3, #1
 80034b6:	482e      	ldr	r0, [pc, #184]	@ (8003570 <xTaskResumeAll+0x214>)
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4403      	add	r3, r0
 80034c2:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034c8:	4b2a      	ldr	r3, [pc, #168]	@ (8003574 <xTaskResumeAll+0x218>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d904      	bls.n	80034dc <xTaskResumeAll+0x180>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80034d2:	4a29      	ldr	r2, [pc, #164]	@ (8003578 <xTaskResumeAll+0x21c>)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	2101      	movs	r1, #1
 80034d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034dc:	4b22      	ldr	r3, [pc, #136]	@ (8003568 <xTaskResumeAll+0x20c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f47f af68 	bne.w	80033b6 <xTaskResumeAll+0x5a>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <xTaskResumeAll+0x194>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80034ec:	f000 fc94 	bl	8003e18 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80034f0:	4b22      	ldr	r3, [pc, #136]	@ (800357c <xTaskResumeAll+0x220>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d012      	beq.n	8003522 <xTaskResumeAll+0x1c6>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80034fc:	f000 f878 	bl	80035f0 <xTaskIncrementTick>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d004      	beq.n	8003510 <xTaskResumeAll+0x1b4>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003506:	4a1c      	ldr	r2, [pc, #112]	@ (8003578 <xTaskResumeAll+0x21c>)
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	2101      	movs	r1, #1
 800350c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	3b01      	subs	r3, #1
 8003514:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1ef      	bne.n	80034fc <xTaskResumeAll+0x1a0>

                            xPendedTicks = 0;
 800351c:	4b17      	ldr	r3, [pc, #92]	@ (800357c <xTaskResumeAll+0x220>)
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003522:	4a15      	ldr	r2, [pc, #84]	@ (8003578 <xTaskResumeAll+0x21c>)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00b      	beq.n	8003546 <xTaskResumeAll+0x1ea>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800352e:	2301      	movs	r3, #1
 8003530:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003532:	4b10      	ldr	r3, [pc, #64]	@ (8003574 <xTaskResumeAll+0x218>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4b12      	ldr	r3, [pc, #72]	@ (8003580 <xTaskResumeAll+0x224>)
 8003538:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003546:	f001 fc13 	bl	8004d70 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	4619      	mov	r1, r3
 800354e:	20d0      	movs	r0, #208	@ 0xd0
 8003550:	f004 f966 	bl	8007820 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8003554:	69bb      	ldr	r3, [r7, #24]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3720      	adds	r7, #32
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	200001dc 	.word	0x200001dc
 8003564:	200001b4 	.word	0x200001b4
 8003568:	20000174 	.word	0x20000174
 800356c:	200001bc 	.word	0x200001bc
 8003570:	200000e0 	.word	0x200000e0
 8003574:	200000dc 	.word	0x200000dc
 8003578:	200001c8 	.word	0x200001c8
 800357c:	200001c4 	.word	0x200001c4
 8003580:	e000ed04 	.word	0xe000ed04

08003584 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800358a:	4b06      	ldr	r3, [pc, #24]	@ (80035a4 <xTaskGetTickCount+0x20>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	20d1      	movs	r0, #209	@ 0xd1
 8003594:	f004 f944 	bl	8007820 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003598:	687b      	ldr	r3, [r7, #4]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200001b8 	.word	0x200001b8

080035a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035ae:	f001 fc9f 	bl	8004ef0 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80035b2:	2300      	movs	r3, #0
 80035b4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80035b6:	4b06      	ldr	r3, [pc, #24]	@ (80035d0 <xTaskGetTickCountFromISR+0x28>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 80035bc:	6839      	ldr	r1, [r7, #0]
 80035be:	20d2      	movs	r0, #210	@ 0xd2
 80035c0:	f004 f92e 	bl	8007820 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80035c4:	683b      	ldr	r3, [r7, #0]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	200001b8 	.word	0x200001b8

080035d4 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
    traceENTER_uxTaskGetNumberOfTasks();

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );
 80035d8:	4b04      	ldr	r3, [pc, #16]	@ (80035ec <uxTaskGetNumberOfTasks+0x18>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4619      	mov	r1, r3
 80035de:	20d3      	movs	r0, #211	@ 0xd3
 80035e0:	f004 f91e 	bl	8007820 <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxCurrentNumberOfTasks;
 80035e4:	4b01      	ldr	r3, [pc, #4]	@ (80035ec <uxTaskGetNumberOfTasks+0x18>)
 80035e6:	681b      	ldr	r3, [r3, #0]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	200001b4 	.word	0x200001b4

080035f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08a      	sub	sp, #40	@ 0x28
 80035f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80035f6:	2300      	movs	r3, #0
 80035f8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80035fa:	4b84      	ldr	r3, [pc, #528]	@ (800380c <xTaskIncrementTick+0x21c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f040 80f5 	bne.w	80037ee <xTaskIncrementTick+0x1fe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003604:	4b82      	ldr	r3, [pc, #520]	@ (8003810 <xTaskIncrementTick+0x220>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3301      	adds	r3, #1
 800360a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800360c:	4a80      	ldr	r2, [pc, #512]	@ (8003810 <xTaskIncrementTick+0x220>)
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d123      	bne.n	8003660 <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 8003618:	4b7e      	ldr	r3, [pc, #504]	@ (8003814 <xTaskIncrementTick+0x224>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00d      	beq.n	800363e <xTaskIncrementTick+0x4e>
    __asm volatile
 8003622:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003626:	b672      	cpsid	i
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	b662      	cpsie	i
 8003636:	607b      	str	r3, [r7, #4]
}
 8003638:	bf00      	nop
 800363a:	bf00      	nop
 800363c:	e7fd      	b.n	800363a <xTaskIncrementTick+0x4a>
 800363e:	4b75      	ldr	r3, [pc, #468]	@ (8003814 <xTaskIncrementTick+0x224>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	61fb      	str	r3, [r7, #28]
 8003644:	4b74      	ldr	r3, [pc, #464]	@ (8003818 <xTaskIncrementTick+0x228>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a72      	ldr	r2, [pc, #456]	@ (8003814 <xTaskIncrementTick+0x224>)
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	4a72      	ldr	r2, [pc, #456]	@ (8003818 <xTaskIncrementTick+0x228>)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	4b72      	ldr	r3, [pc, #456]	@ (800381c <xTaskIncrementTick+0x22c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3301      	adds	r3, #1
 8003658:	4a70      	ldr	r2, [pc, #448]	@ (800381c <xTaskIncrementTick+0x22c>)
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	f000 fbdc 	bl	8003e18 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003660:	4b6f      	ldr	r3, [pc, #444]	@ (8003820 <xTaskIncrementTick+0x230>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6a3a      	ldr	r2, [r7, #32]
 8003666:	429a      	cmp	r2, r3
 8003668:	f0c0 80ac 	bcc.w	80037c4 <xTaskIncrementTick+0x1d4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800366c:	4b69      	ldr	r3, [pc, #420]	@ (8003814 <xTaskIncrementTick+0x224>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d104      	bne.n	8003680 <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003676:	4b6a      	ldr	r3, [pc, #424]	@ (8003820 <xTaskIncrementTick+0x230>)
 8003678:	f04f 32ff 	mov.w	r2, #4294967295
 800367c:	601a      	str	r2, [r3, #0]
                    break;
 800367e:	e0a1      	b.n	80037c4 <xTaskIncrementTick+0x1d4>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003680:	4b64      	ldr	r3, [pc, #400]	@ (8003814 <xTaskIncrementTick+0x224>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003690:	6a3a      	ldr	r2, [r7, #32]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	429a      	cmp	r2, r3
 8003696:	d203      	bcs.n	80036a0 <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003698:	4a61      	ldr	r2, [pc, #388]	@ (8003820 <xTaskIncrementTick+0x230>)
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	6013      	str	r3, [r2, #0]
                        break;
 800369e:	e091      	b.n	80037c4 <xTaskIncrementTick+0x1d4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	68d2      	ldr	r2, [r2, #12]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	6892      	ldr	r2, [r2, #8]
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	3304      	adds	r3, #4
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d103      	bne.n	80036ce <xTaskIncrementTick+0xde>
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	2200      	movs	r2, #0
 80036d2:	615a      	str	r2, [r3, #20]
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	1e5a      	subs	r2, r3, #1
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d01e      	beq.n	8003724 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	6a12      	ldr	r2, [r2, #32]
 80036f4:	609a      	str	r2, [r3, #8]
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	69d2      	ldr	r2, [r2, #28]
 80036fe:	605a      	str	r2, [r3, #4]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	3318      	adds	r3, #24
 8003708:	429a      	cmp	r2, r3
 800370a:	d103      	bne.n	8003714 <xTaskIncrementTick+0x124>
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	6a1a      	ldr	r2, [r3, #32]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2200      	movs	r2, #0
 8003718:	629a      	str	r2, [r3, #40]	@ 0x28
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	1e5a      	subs	r2, r3, #1
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	4618      	mov	r0, r3
 8003728:	f004 f972 	bl	8007a10 <SEGGER_SYSVIEW_OnTaskStartReady>
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003730:	2201      	movs	r2, #1
 8003732:	409a      	lsls	r2, r3
 8003734:	4b3b      	ldr	r3, [pc, #236]	@ (8003824 <xTaskIncrementTick+0x234>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4313      	orrs	r3, r2
 800373a:	4a3a      	ldr	r2, [pc, #232]	@ (8003824 <xTaskIncrementTick+0x234>)
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003742:	4939      	ldr	r1, [pc, #228]	@ (8003828 <xTaskIncrementTick+0x238>)
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	3304      	adds	r3, #4
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	609a      	str	r2, [r3, #8]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	60da      	str	r2, [r3, #12]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	3204      	adds	r2, #4
 800376a:	605a      	str	r2, [r3, #4]
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	1d1a      	adds	r2, r3, #4
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4a29      	ldr	r2, [pc, #164]	@ (8003828 <xTaskIncrementTick+0x238>)
 8003782:	441a      	add	r2, r3
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	615a      	str	r2, [r3, #20]
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800378c:	4926      	ldr	r1, [pc, #152]	@ (8003828 <xTaskIncrementTick+0x238>)
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800379e:	1c59      	adds	r1, r3, #1
 80037a0:	4821      	ldr	r0, [pc, #132]	@ (8003828 <xTaskIncrementTick+0x238>)
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4403      	add	r3, r0
 80037ac:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037b2:	4b1e      	ldr	r3, [pc, #120]	@ (800382c <xTaskIncrementTick+0x23c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b8:	429a      	cmp	r2, r3
 80037ba:	f67f af57 	bls.w	800366c <xTaskIncrementTick+0x7c>
                            {
                                xSwitchRequired = pdTRUE;
 80037be:	2301      	movs	r3, #1
 80037c0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037c2:	e753      	b.n	800366c <xTaskIncrementTick+0x7c>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80037c4:	4b19      	ldr	r3, [pc, #100]	@ (800382c <xTaskIncrementTick+0x23c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ca:	4917      	ldr	r1, [pc, #92]	@ (8003828 <xTaskIncrementTick+0x238>)
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d901      	bls.n	80037e0 <xTaskIncrementTick+0x1f0>
                {
                    xSwitchRequired = pdTRUE;
 80037dc:	2301      	movs	r3, #1
 80037de:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80037e0:	4b13      	ldr	r3, [pc, #76]	@ (8003830 <xTaskIncrementTick+0x240>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d007      	beq.n	80037f8 <xTaskIncrementTick+0x208>
                {
                    xSwitchRequired = pdTRUE;
 80037e8:	2301      	movs	r3, #1
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ec:	e004      	b.n	80037f8 <xTaskIncrementTick+0x208>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80037ee:	4b11      	ldr	r3, [pc, #68]	@ (8003834 <xTaskIncrementTick+0x244>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3301      	adds	r3, #1
 80037f4:	4a0f      	ldr	r2, [pc, #60]	@ (8003834 <xTaskIncrementTick+0x244>)
 80037f6:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80037f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fa:	4619      	mov	r1, r3
 80037fc:	20db      	movs	r0, #219	@ 0xdb
 80037fe:	f004 f80f 	bl	8007820 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003804:	4618      	mov	r0, r3
 8003806:	3728      	adds	r7, #40	@ 0x28
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	200001dc 	.word	0x200001dc
 8003810:	200001b8 	.word	0x200001b8
 8003814:	2000016c 	.word	0x2000016c
 8003818:	20000170 	.word	0x20000170
 800381c:	200001cc 	.word	0x200001cc
 8003820:	200001d4 	.word	0x200001d4
 8003824:	200001bc 	.word	0x200001bc
 8003828:	200000e0 	.word	0x200000e0
 800382c:	200000dc 	.word	0x200000dc
 8003830:	200001c8 	.word	0x200001c8
 8003834:	200001c4 	.word	0x200001c4

08003838 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800383e:	4b2f      	ldr	r3, [pc, #188]	@ (80038fc <vTaskSwitchContext+0xc4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003846:	4b2e      	ldr	r3, [pc, #184]	@ (8003900 <vTaskSwitchContext+0xc8>)
 8003848:	2201      	movs	r2, #1
 800384a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 800384c:	e051      	b.n	80038f2 <vTaskSwitchContext+0xba>
            xYieldPendings[ 0 ] = pdFALSE;
 800384e:	4b2c      	ldr	r3, [pc, #176]	@ (8003900 <vTaskSwitchContext+0xc8>)
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003854:	4b2b      	ldr	r3, [pc, #172]	@ (8003904 <vTaskSwitchContext+0xcc>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	fab3 f383 	clz	r3, r3
 8003860:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8003862:	7afb      	ldrb	r3, [r7, #11]
 8003864:	f1c3 031f 	rsb	r3, r3, #31
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	4927      	ldr	r1, [pc, #156]	@ (8003908 <vTaskSwitchContext+0xd0>)
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10d      	bne.n	800389a <vTaskSwitchContext+0x62>
    __asm volatile
 800387e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003882:	b672      	cpsid	i
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	b662      	cpsie	i
 8003892:	607b      	str	r3, [r7, #4]
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop
 8003898:	e7fd      	b.n	8003896 <vTaskSwitchContext+0x5e>
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4a18      	ldr	r2, [pc, #96]	@ (8003908 <vTaskSwitchContext+0xd0>)
 80038a6:	4413      	add	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	605a      	str	r2, [r3, #4]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	3308      	adds	r3, #8
 80038bc:	429a      	cmp	r2, r3
 80038be:	d103      	bne.n	80038c8 <vTaskSwitchContext+0x90>
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	605a      	str	r2, [r3, #4]
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	4a0f      	ldr	r2, [pc, #60]	@ (800390c <vTaskSwitchContext+0xd4>)
 80038d0:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 80038d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003910 <vTaskSwitchContext+0xd8>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	4b0d      	ldr	r3, [pc, #52]	@ (800390c <vTaskSwitchContext+0xd4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d102      	bne.n	80038e4 <vTaskSwitchContext+0xac>
 80038de:	f003 fff7 	bl	80078d0 <SEGGER_SYSVIEW_OnIdle>
 80038e2:	e004      	b.n	80038ee <vTaskSwitchContext+0xb6>
 80038e4:	4b09      	ldr	r3, [pc, #36]	@ (800390c <vTaskSwitchContext+0xd4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f004 f84f 	bl	800798c <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80038ee:	4b07      	ldr	r3, [pc, #28]	@ (800390c <vTaskSwitchContext+0xd4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
    }
 80038f2:	bf00      	nop
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	200001dc 	.word	0x200001dc
 8003900:	200001c8 	.word	0x200001c8
 8003904:	200001bc 	.word	0x200001bc
 8003908:	200000e0 	.word	0x200000e0
 800390c:	200000dc 	.word	0x200000dc
 8003910:	200001d8 	.word	0x200001d8

08003914 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10d      	bne.n	8003940 <vTaskPlaceOnEventList+0x2c>
    __asm volatile
 8003924:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003928:	b672      	cpsid	i
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	b662      	cpsie	i
 8003938:	60fb      	str	r3, [r7, #12]
}
 800393a:	bf00      	nop
 800393c:	bf00      	nop
 800393e:	e7fd      	b.n	800393c <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003940:	4b08      	ldr	r3, [pc, #32]	@ (8003964 <vTaskPlaceOnEventList+0x50>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3318      	adds	r3, #24
 8003946:	4619      	mov	r1, r3
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7fe fd26 	bl	800239a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800394e:	2101      	movs	r1, #1
 8003950:	6838      	ldr	r0, [r7, #0]
 8003952:	f000 fd29 	bl	80043a8 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8003956:	20e1      	movs	r0, #225	@ 0xe1
 8003958:	f003 ff26 	bl	80077a8 <SEGGER_SYSVIEW_RecordEndCall>
}
 800395c:	bf00      	nop
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	200000dc 	.word	0x200000dc

08003968 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10d      	bne.n	8003996 <vTaskPlaceOnEventListRestricted+0x2e>
    __asm volatile
 800397a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800397e:	b672      	cpsid	i
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	b662      	cpsie	i
 800398e:	613b      	str	r3, [r7, #16]
}
 8003990:	bf00      	nop
 8003992:	bf00      	nop
 8003994:	e7fd      	b.n	8003992 <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	4b17      	ldr	r3, [pc, #92]	@ (80039fc <vTaskPlaceOnEventListRestricted+0x94>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	61da      	str	r2, [r3, #28]
 80039a4:	4b15      	ldr	r3, [pc, #84]	@ (80039fc <vTaskPlaceOnEventListRestricted+0x94>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	6892      	ldr	r2, [r2, #8]
 80039ac:	621a      	str	r2, [r3, #32]
 80039ae:	4b13      	ldr	r3, [pc, #76]	@ (80039fc <vTaskPlaceOnEventListRestricted+0x94>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	3218      	adds	r2, #24
 80039b8:	605a      	str	r2, [r3, #4]
 80039ba:	4b10      	ldr	r3, [pc, #64]	@ (80039fc <vTaskPlaceOnEventListRestricted+0x94>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f103 0218 	add.w	r2, r3, #24
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	609a      	str	r2, [r3, #8]
 80039c6:	4b0d      	ldr	r3, [pc, #52]	@ (80039fc <vTaskPlaceOnEventListRestricted+0x94>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 80039de:	f04f 33ff 	mov.w	r3, #4294967295
 80039e2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	68b8      	ldr	r0, [r7, #8]
 80039e8:	f000 fcde 	bl	80043a8 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 80039ec:	20e3      	movs	r0, #227	@ 0xe3
 80039ee:	f003 fedb 	bl	80077a8 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80039f2:	bf00      	nop
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	200000dc 	.word	0x200000dc

08003a00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08a      	sub	sp, #40	@ 0x28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10d      	bne.n	8003a32 <xTaskRemoveFromEventList+0x32>
    __asm volatile
 8003a16:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003a1a:	b672      	cpsid	i
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	b662      	cpsie	i
 8003a2a:	60fb      	str	r3, [r7, #12]
}
 8003a2c:	bf00      	nop
 8003a2e:	bf00      	nop
 8003a30:	e7fd      	b.n	8003a2e <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a36:	61fb      	str	r3, [r7, #28]
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	6a3a      	ldr	r2, [r7, #32]
 8003a3e:	6a12      	ldr	r2, [r2, #32]
 8003a40:	609a      	str	r2, [r3, #8]
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	6a3a      	ldr	r2, [r7, #32]
 8003a48:	69d2      	ldr	r2, [r2, #28]
 8003a4a:	605a      	str	r2, [r3, #4]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	3318      	adds	r3, #24
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d103      	bne.n	8003a60 <xTaskRemoveFromEventList+0x60>
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	6a1a      	ldr	r2, [r3, #32]
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	605a      	str	r2, [r3, #4]
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	2200      	movs	r2, #0
 8003a64:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	1e5a      	subs	r2, r3, #1
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003a70:	4b4e      	ldr	r3, [pc, #312]	@ (8003bac <xTaskRemoveFromEventList+0x1ac>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d164      	bne.n	8003b42 <xTaskRemoveFromEventList+0x142>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	6a3a      	ldr	r2, [r7, #32]
 8003a84:	68d2      	ldr	r2, [r2, #12]
 8003a86:	609a      	str	r2, [r3, #8]
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	6a3a      	ldr	r2, [r7, #32]
 8003a8e:	6892      	ldr	r2, [r2, #8]
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d103      	bne.n	8003aa6 <xTaskRemoveFromEventList+0xa6>
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	615a      	str	r2, [r3, #20]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	1e5a      	subs	r2, r3, #1
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f003 ffa9 	bl	8007a10 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	4b3a      	ldr	r3, [pc, #232]	@ (8003bb0 <xTaskRemoveFromEventList+0x1b0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	4a38      	ldr	r2, [pc, #224]	@ (8003bb0 <xTaskRemoveFromEventList+0x1b0>)
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ad4:	4937      	ldr	r1, [pc, #220]	@ (8003bb4 <xTaskRemoveFromEventList+0x1b4>)
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	60da      	str	r2, [r3, #12]
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	6a3a      	ldr	r2, [r7, #32]
 8003afa:	3204      	adds	r2, #4
 8003afc:	605a      	str	r2, [r3, #4]
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	1d1a      	adds	r2, r3, #4
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	609a      	str	r2, [r3, #8]
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4a28      	ldr	r2, [pc, #160]	@ (8003bb4 <xTaskRemoveFromEventList+0x1b4>)
 8003b14:	441a      	add	r2, r3
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	615a      	str	r2, [r3, #20]
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b1e:	4925      	ldr	r1, [pc, #148]	@ (8003bb4 <xTaskRemoveFromEventList+0x1b4>)
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6a3a      	ldr	r2, [r7, #32]
 8003b2e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b30:	1c59      	adds	r1, r3, #1
 8003b32:	4820      	ldr	r0, [pc, #128]	@ (8003bb4 <xTaskRemoveFromEventList+0x1b4>)
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4403      	add	r3, r0
 8003b3e:	6019      	str	r1, [r3, #0]
 8003b40:	e01b      	b.n	8003b7a <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b42:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb8 <xTaskRemoveFromEventList+0x1b8>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	61bb      	str	r3, [r7, #24]
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	61da      	str	r2, [r3, #28]
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	621a      	str	r2, [r3, #32]
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	6a3a      	ldr	r2, [r7, #32]
 8003b5c:	3218      	adds	r2, #24
 8003b5e:	605a      	str	r2, [r3, #4]
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	f103 0218 	add.w	r2, r3, #24
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	609a      	str	r2, [r3, #8]
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	4a12      	ldr	r2, [pc, #72]	@ (8003bb8 <xTaskRemoveFromEventList+0x1b8>)
 8003b6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b70:	4b11      	ldr	r3, [pc, #68]	@ (8003bb8 <xTaskRemoveFromEventList+0x1b8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	4a10      	ldr	r2, [pc, #64]	@ (8003bb8 <xTaskRemoveFromEventList+0x1b8>)
 8003b78:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bbc <xTaskRemoveFromEventList+0x1bc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d905      	bls.n	8003b94 <xTaskRemoveFromEventList+0x194>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc0 <xTaskRemoveFromEventList+0x1c0>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e001      	b.n	8003b98 <xTaskRemoveFromEventList+0x198>
        }
        else
        {
            xReturn = pdFALSE;
 8003b94:	2300      	movs	r3, #0
 8003b96:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8003b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	20e4      	movs	r0, #228	@ 0xe4
 8003b9e:	f003 fe3f 	bl	8007820 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3728      	adds	r7, #40	@ 0x28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	200001dc 	.word	0x200001dc
 8003bb0:	200001bc 	.word	0x200001bc
 8003bb4:	200000e0 	.word	0x200000e0
 8003bb8:	20000174 	.word	0x20000174
 8003bbc:	200000dc 	.word	0x200000dc
 8003bc0:	200001c8 	.word	0x200001c8

08003bc4 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003bcc:	4b07      	ldr	r3, [pc, #28]	@ (8003bec <vTaskInternalSetTimeOutState+0x28>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003bd4:	4b06      	ldr	r3, [pc, #24]	@ (8003bf0 <vTaskInternalSetTimeOutState+0x2c>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8003bdc:	20e7      	movs	r0, #231	@ 0xe7
 8003bde:	f003 fde3 	bl	80077a8 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	200001cc 	.word	0x200001cc
 8003bf0:	200001b8 	.word	0x200001b8

08003bf4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10d      	bne.n	8003c20 <xTaskCheckForTimeOut+0x2c>
    __asm volatile
 8003c04:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003c08:	b672      	cpsid	i
 8003c0a:	f383 8811 	msr	BASEPRI, r3
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	b662      	cpsie	i
 8003c18:	613b      	str	r3, [r7, #16]
}
 8003c1a:	bf00      	nop
 8003c1c:	bf00      	nop
 8003c1e:	e7fd      	b.n	8003c1c <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10d      	bne.n	8003c42 <xTaskCheckForTimeOut+0x4e>
    __asm volatile
 8003c26:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003c2a:	b672      	cpsid	i
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	b662      	cpsie	i
 8003c3a:	60fb      	str	r3, [r7, #12]
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	e7fd      	b.n	8003c3e <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 8003c42:	f001 f85f 	bl	8004d04 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003c46:	4b21      	ldr	r3, [pc, #132]	@ (8003ccc <xTaskCheckForTimeOut+0xd8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5e:	d102      	bne.n	8003c66 <xTaskCheckForTimeOut+0x72>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61fb      	str	r3, [r7, #28]
 8003c64:	e026      	b.n	8003cb4 <xTaskCheckForTimeOut+0xc0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4b19      	ldr	r3, [pc, #100]	@ (8003cd0 <xTaskCheckForTimeOut+0xdc>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d00a      	beq.n	8003c88 <xTaskCheckForTimeOut+0x94>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d305      	bcc.n	8003c88 <xTaskCheckForTimeOut+0x94>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	e015      	b.n	8003cb4 <xTaskCheckForTimeOut+0xc0>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d20b      	bcs.n	8003caa <xTaskCheckForTimeOut+0xb6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	1ad2      	subs	r2, r2, r3
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff ff90 	bl	8003bc4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61fb      	str	r3, [r7, #28]
 8003ca8:	e004      	b.n	8003cb4 <xTaskCheckForTimeOut+0xc0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003cb4:	f001 f85c 	bl	8004d70 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	4619      	mov	r1, r3
 8003cbc:	20e8      	movs	r0, #232	@ 0xe8
 8003cbe:	f003 fdaf 	bl	8007820 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003cc2:	69fb      	ldr	r3, [r7, #28]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3720      	adds	r7, #32
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	200001b8 	.word	0x200001b8
 8003cd0:	200001cc 	.word	0x200001cc

08003cd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003cd8:	4b03      	ldr	r3, [pc, #12]	@ (8003ce8 <vTaskMissedYield+0x14>)
 8003cda:	2201      	movs	r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8003cde:	20e9      	movs	r0, #233	@ 0xe9
 8003ce0:	f003 fd62 	bl	80077a8 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003ce4:	bf00      	nop
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	200001c8 	.word	0x200001c8

08003cec <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003cf4:	f000 f852 	bl	8003d9c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003cf8:	4b06      	ldr	r3, [pc, #24]	@ (8003d14 <prvIdleTask+0x28>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d9f9      	bls.n	8003cf4 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003d00:	4b05      	ldr	r3, [pc, #20]	@ (8003d18 <prvIdleTask+0x2c>)
 8003d02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003d10:	e7f0      	b.n	8003cf4 <prvIdleTask+0x8>
 8003d12:	bf00      	nop
 8003d14:	200000e0 	.word	0x200000e0
 8003d18:	e000ed04 	.word	0xe000ed04

08003d1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d22:	2300      	movs	r3, #0
 8003d24:	607b      	str	r3, [r7, #4]
 8003d26:	e00c      	b.n	8003d42 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4a12      	ldr	r2, [pc, #72]	@ (8003d7c <prvInitialiseTaskLists+0x60>)
 8003d34:	4413      	add	r3, r2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fe fad8 	bl	80022ec <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	607b      	str	r3, [r7, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d9ef      	bls.n	8003d28 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003d48:	480d      	ldr	r0, [pc, #52]	@ (8003d80 <prvInitialiseTaskLists+0x64>)
 8003d4a:	f7fe facf 	bl	80022ec <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003d4e:	480d      	ldr	r0, [pc, #52]	@ (8003d84 <prvInitialiseTaskLists+0x68>)
 8003d50:	f7fe facc 	bl	80022ec <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003d54:	480c      	ldr	r0, [pc, #48]	@ (8003d88 <prvInitialiseTaskLists+0x6c>)
 8003d56:	f7fe fac9 	bl	80022ec <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003d5a:	480c      	ldr	r0, [pc, #48]	@ (8003d8c <prvInitialiseTaskLists+0x70>)
 8003d5c:	f7fe fac6 	bl	80022ec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003d60:	480b      	ldr	r0, [pc, #44]	@ (8003d90 <prvInitialiseTaskLists+0x74>)
 8003d62:	f7fe fac3 	bl	80022ec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003d66:	4b0b      	ldr	r3, [pc, #44]	@ (8003d94 <prvInitialiseTaskLists+0x78>)
 8003d68:	4a05      	ldr	r2, [pc, #20]	@ (8003d80 <prvInitialiseTaskLists+0x64>)
 8003d6a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d98 <prvInitialiseTaskLists+0x7c>)
 8003d6e:	4a05      	ldr	r2, [pc, #20]	@ (8003d84 <prvInitialiseTaskLists+0x68>)
 8003d70:	601a      	str	r2, [r3, #0]
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	200000e0 	.word	0x200000e0
 8003d80:	20000144 	.word	0x20000144
 8003d84:	20000158 	.word	0x20000158
 8003d88:	20000174 	.word	0x20000174
 8003d8c:	20000188 	.word	0x20000188
 8003d90:	200001a0 	.word	0x200001a0
 8003d94:	2000016c 	.word	0x2000016c
 8003d98:	20000170 	.word	0x20000170

08003d9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003da2:	e019      	b.n	8003dd8 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003da4:	f000 ffae 	bl	8004d04 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003da8:	4b10      	ldr	r3, [pc, #64]	@ (8003dec <prvCheckTasksWaitingTermination+0x50>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3304      	adds	r3, #4
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe fb2b 	bl	8002410 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003dba:	4b0d      	ldr	r3, [pc, #52]	@ (8003df0 <prvCheckTasksWaitingTermination+0x54>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8003df0 <prvCheckTasksWaitingTermination+0x54>)
 8003dc2:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003df4 <prvCheckTasksWaitingTermination+0x58>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	4a0a      	ldr	r2, [pc, #40]	@ (8003df4 <prvCheckTasksWaitingTermination+0x58>)
 8003dcc:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003dce:	f000 ffcf 	bl	8004d70 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f810 	bl	8003df8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dd8:	4b06      	ldr	r3, [pc, #24]	@ (8003df4 <prvCheckTasksWaitingTermination+0x58>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e1      	bne.n	8003da4 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003de0:	bf00      	nop
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000188 	.word	0x20000188
 8003df0:	200001b4 	.word	0x200001b4
 8003df4:	2000019c 	.word	0x2000019c

08003df8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e04:	4618      	mov	r0, r3
 8003e06:	f001 f9f7 	bl	80051f8 <vPortFree>
            vPortFree( pxTCB );
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f001 f9f4 	bl	80051f8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003e10:	bf00      	nop
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e48 <prvResetNextTaskUnblockTime+0x30>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d104      	bne.n	8003e30 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003e26:	4b09      	ldr	r3, [pc, #36]	@ (8003e4c <prvResetNextTaskUnblockTime+0x34>)
 8003e28:	f04f 32ff 	mov.w	r2, #4294967295
 8003e2c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003e2e:	e005      	b.n	8003e3c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e30:	4b05      	ldr	r3, [pc, #20]	@ (8003e48 <prvResetNextTaskUnblockTime+0x30>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a04      	ldr	r2, [pc, #16]	@ (8003e4c <prvResetNextTaskUnblockTime+0x34>)
 8003e3a:	6013      	str	r3, [r2, #0]
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	2000016c 	.word	0x2000016c
 8003e4c:	200001d4 	.word	0x200001d4

08003e50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8003e56:	4b0d      	ldr	r3, [pc, #52]	@ (8003e8c <xTaskGetSchedulerState+0x3c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d102      	bne.n	8003e64 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	607b      	str	r3, [r7, #4]
 8003e62:	e008      	b.n	8003e76 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003e64:	4b0a      	ldr	r3, [pc, #40]	@ (8003e90 <xTaskGetSchedulerState+0x40>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d102      	bne.n	8003e72 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	e001      	b.n	8003e76 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003e72:	2300      	movs	r3, #0
 8003e74:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	20f5      	movs	r0, #245	@ 0xf5
 8003e7c:	f003 fcd0 	bl	8007820 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003e80:	687b      	ldr	r3, [r7, #4]
    }
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200001c0 	.word	0x200001c0
 8003e90:	200001dc 	.word	0x200001dc

08003e94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 8098 	beq.w	8003fdc <xTaskPriorityDisinherit+0x148>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003eac:	4b50      	ldr	r3, [pc, #320]	@ (8003ff0 <xTaskPriorityDisinherit+0x15c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d00d      	beq.n	8003ed2 <xTaskPriorityDisinherit+0x3e>
    __asm volatile
 8003eb6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003eba:	b672      	cpsid	i
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	b662      	cpsie	i
 8003eca:	613b      	str	r3, [r7, #16]
}
 8003ecc:	bf00      	nop
 8003ece:	bf00      	nop
 8003ed0:	e7fd      	b.n	8003ece <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10d      	bne.n	8003ef6 <xTaskPriorityDisinherit+0x62>
    __asm volatile
 8003eda:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003ede:	b672      	cpsid	i
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	b662      	cpsie	i
 8003eee:	60fb      	str	r3, [r7, #12]
}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	e7fd      	b.n	8003ef2 <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003efa:	1e5a      	subs	r2, r3, #1
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d067      	beq.n	8003fdc <xTaskPriorityDisinherit+0x148>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d163      	bne.n	8003fdc <xTaskPriorityDisinherit+0x148>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	3304      	adds	r3, #4
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fe fa79 	bl	8002410 <uxListRemove>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10a      	bne.n	8003f3a <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f28:	2201      	movs	r2, #1
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43da      	mvns	r2, r3
 8003f30:	4b30      	ldr	r3, [pc, #192]	@ (8003ff4 <xTaskPriorityDisinherit+0x160>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4013      	ands	r3, r2
 8003f36:	4a2f      	ldr	r2, [pc, #188]	@ (8003ff4 <xTaskPriorityDisinherit+0x160>)
 8003f38:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f46:	f1c3 0205 	rsb	r2, r3, #5
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f003 fd5d 	bl	8007a10 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	4b25      	ldr	r3, [pc, #148]	@ (8003ff4 <xTaskPriorityDisinherit+0x160>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	4a23      	ldr	r2, [pc, #140]	@ (8003ff4 <xTaskPriorityDisinherit+0x160>)
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f6c:	4922      	ldr	r1, [pc, #136]	@ (8003ff8 <xTaskPriorityDisinherit+0x164>)
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	3304      	adds	r3, #4
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	609a      	str	r2, [r3, #8]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	60da      	str	r2, [r3, #12]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	3204      	adds	r2, #4
 8003f94:	605a      	str	r2, [r3, #4]
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	1d1a      	adds	r2, r3, #4
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	609a      	str	r2, [r3, #8]
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4a13      	ldr	r2, [pc, #76]	@ (8003ff8 <xTaskPriorityDisinherit+0x164>)
 8003fac:	441a      	add	r2, r3
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	615a      	str	r2, [r3, #20]
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fb6:	4910      	ldr	r1, [pc, #64]	@ (8003ff8 <xTaskPriorityDisinherit+0x164>)
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003fc8:	1c59      	adds	r1, r3, #1
 8003fca:	480b      	ldr	r0, [pc, #44]	@ (8003ff8 <xTaskPriorityDisinherit+0x164>)
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4403      	add	r3, r0
 8003fd6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	4619      	mov	r1, r3
 8003fe0:	20f7      	movs	r0, #247	@ 0xf7
 8003fe2:	f003 fc1d 	bl	8007820 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
    }
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3720      	adds	r7, #32
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	200000dc 	.word	0x200000dc
 8003ff4:	200001bc 	.word	0x200001bc
 8003ff8:	200000e0 	.word	0x200000e0

08003ffc <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 800400a:	2300      	movs	r3, #0
 800400c:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00d      	beq.n	8004030 <xTaskGenericNotifyWait+0x34>
    __asm volatile
 8004014:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004018:	b672      	cpsid	i
 800401a:	f383 8811 	msr	BASEPRI, r3
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f3bf 8f4f 	dsb	sy
 8004026:	b662      	cpsie	i
 8004028:	613b      	str	r3, [r7, #16]
}
 800402a:	bf00      	nop
 800402c:	bf00      	nop
 800402e:	e7fd      	b.n	800402c <xTaskGenericNotifyWait+0x30>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8004030:	f7ff f986 	bl	8003340 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8004034:	f000 fe66 	bl	8004d04 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8004038:	4b3b      	ldr	r3, [pc, #236]	@ (8004128 <xTaskGenericNotifyWait+0x12c>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	3354      	adds	r3, #84	@ 0x54
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d018      	beq.n	800407c <xTaskGenericNotifyWait+0x80>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 800404a:	4b37      	ldr	r3, [pc, #220]	@ (8004128 <xTaskGenericNotifyWait+0x12c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	3214      	adds	r2, #20
 8004052:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	43d2      	mvns	r2, r2
 800405a:	4011      	ands	r1, r2
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	3214      	adds	r2, #20
 8004060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8004064:	4b30      	ldr	r3, [pc, #192]	@ (8004128 <xTaskGenericNotifyWait+0x12c>)
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4413      	add	r3, r2
 800406c:	3354      	adds	r3, #84	@ 0x54
 800406e:	2201      	movs	r2, #1
 8004070:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8004072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <xTaskGenericNotifyWait+0x80>
                    {
                        xShouldBlock = pdTRUE;
 8004078:	2301      	movs	r3, #1
 800407a:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 800407c:	f000 fe78 	bl	8004d70 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d103      	bne.n	800408e <xTaskGenericNotifyWait+0x92>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004086:	2101      	movs	r1, #1
 8004088:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800408a:	f000 f98d 	bl	80043a8 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800408e:	f7ff f965 	bl	800335c <xTaskResumeAll>
 8004092:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d10a      	bne.n	80040b0 <xTaskGenericNotifyWait+0xb4>
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d107      	bne.n	80040b0 <xTaskGenericNotifyWait+0xb4>
        {
            taskYIELD_WITHIN_API();
 80040a0:	4b22      	ldr	r3, [pc, #136]	@ (800412c <xTaskGenericNotifyWait+0x130>)
 80040a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80040b0:	f000 fe28 	bl	8004d04 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <xTaskGenericNotifyWait+0xce>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 80040ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004128 <xTaskGenericNotifyWait+0x12c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	3214      	adds	r2, #20
 80040c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 80040ca:	4b17      	ldr	r3, [pc, #92]	@ (8004128 <xTaskGenericNotifyWait+0x12c>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4413      	add	r3, r2
 80040d2:	3354      	adds	r3, #84	@ 0x54
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d002      	beq.n	80040e2 <xTaskGenericNotifyWait+0xe6>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80040dc:	2300      	movs	r3, #0
 80040de:	61fb      	str	r3, [r7, #28]
 80040e0:	e00e      	b.n	8004100 <xTaskGenericNotifyWait+0x104>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 80040e2:	4b11      	ldr	r3, [pc, #68]	@ (8004128 <xTaskGenericNotifyWait+0x12c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	3214      	adds	r2, #20
 80040ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	43d2      	mvns	r2, r2
 80040f2:	4011      	ands	r1, r2
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	3214      	adds	r2, #20
 80040f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80040fc:	2301      	movs	r3, #1
 80040fe:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8004100:	4b09      	ldr	r3, [pc, #36]	@ (8004128 <xTaskGenericNotifyWait+0x12c>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	3354      	adds	r3, #84	@ 0x54
 800410a:	2200      	movs	r2, #0
 800410c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800410e:	f000 fe2f 	bl	8004d70 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	4619      	mov	r1, r3
 8004116:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800411a:	f003 fb81 	bl	8007820 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800411e:	69fb      	ldr	r3, [r7, #28]
    }
 8004120:	4618      	mov	r0, r3
 8004122:	3720      	adds	r7, #32
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	200000dc 	.word	0x200000dc
 800412c:	e000ed04 	.word	0xe000ed04

08004130 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8004130:	b580      	push	{r7, lr}
 8004132:	b08e      	sub	sp, #56	@ 0x38
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800413e:	2301      	movs	r3, #1
 8004140:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00d      	beq.n	8004164 <xTaskGenericNotify+0x34>
    __asm volatile
 8004148:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800414c:	b672      	cpsid	i
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	b662      	cpsie	i
 800415c:	623b      	str	r3, [r7, #32]
}
 800415e:	bf00      	nop
 8004160:	bf00      	nop
 8004162:	e7fd      	b.n	8004160 <xTaskGenericNotify+0x30>
        configASSERT( xTaskToNotify );
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10d      	bne.n	8004186 <xTaskGenericNotify+0x56>
    __asm volatile
 800416a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800416e:	b672      	cpsid	i
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	b662      	cpsie	i
 800417e:	61fb      	str	r3, [r7, #28]
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	e7fd      	b.n	8004182 <xTaskGenericNotify+0x52>
        pxTCB = xTaskToNotify;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 800418a:	f000 fdbb 	bl	8004d04 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800418e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004190:	2b00      	cmp	r3, #0
 8004192:	d006      	beq.n	80041a2 <xTaskGenericNotify+0x72>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	3214      	adds	r2, #20
 800419a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800419e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041a0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80041a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4413      	add	r3, r2
 80041a8:	3354      	adds	r3, #84	@ 0x54
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80041b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	4413      	add	r3, r2
 80041b6:	3354      	adds	r3, #84	@ 0x54
 80041b8:	2202      	movs	r2, #2
 80041ba:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d83b      	bhi.n	800423a <xTaskGenericNotify+0x10a>
 80041c2:	a201      	add	r2, pc, #4	@ (adr r2, 80041c8 <xTaskGenericNotify+0x98>)
 80041c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c8:	0800425f 	.word	0x0800425f
 80041cc:	080041dd 	.word	0x080041dd
 80041d0:	080041f9 	.word	0x080041f9
 80041d4:	08004211 	.word	0x08004211
 80041d8:	0800421f 	.word	0x0800421f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80041dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	3214      	adds	r2, #20
 80041e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	ea42 0103 	orr.w	r1, r2, r3
 80041ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	3214      	adds	r2, #20
 80041f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80041f6:	e035      	b.n	8004264 <xTaskGenericNotify+0x134>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80041f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	3214      	adds	r2, #20
 80041fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004202:	1c59      	adds	r1, r3, #1
 8004204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	3214      	adds	r2, #20
 800420a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800420e:	e029      	b.n	8004264 <xTaskGenericNotify+0x134>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	3214      	adds	r2, #20
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800421c:	e022      	b.n	8004264 <xTaskGenericNotify+0x134>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800421e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004222:	2b02      	cmp	r3, #2
 8004224:	d006      	beq.n	8004234 <xTaskGenericNotify+0x104>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	3214      	adds	r2, #20
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004232:	e017      	b.n	8004264 <xTaskGenericNotify+0x134>
                        xReturn = pdFAIL;
 8004234:	2300      	movs	r3, #0
 8004236:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8004238:	e014      	b.n	8004264 <xTaskGenericNotify+0x134>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800423a:	4b56      	ldr	r3, [pc, #344]	@ (8004394 <xTaskGenericNotify+0x264>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00f      	beq.n	8004262 <xTaskGenericNotify+0x132>
    __asm volatile
 8004242:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004246:	b672      	cpsid	i
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	b662      	cpsie	i
 8004256:	61bb      	str	r3, [r7, #24]
}
 8004258:	bf00      	nop
 800425a:	bf00      	nop
 800425c:	e7fd      	b.n	800425a <xTaskGenericNotify+0x12a>
                    break;
 800425e:	bf00      	nop
 8004260:	e000      	b.n	8004264 <xTaskGenericNotify+0x134>

                    break;
 8004262:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004264:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004268:	2b01      	cmp	r3, #1
 800426a:	f040 8085 	bne.w	8004378 <xTaskGenericNotify+0x248>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800426e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800427a:	68d2      	ldr	r2, [r2, #12]
 800427c:	609a      	str	r2, [r3, #8]
 800427e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004284:	6892      	ldr	r2, [r2, #8]
 8004286:	605a      	str	r2, [r3, #4]
 8004288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428e:	3304      	adds	r3, #4
 8004290:	429a      	cmp	r2, r3
 8004292:	d103      	bne.n	800429c <xTaskGenericNotify+0x16c>
 8004294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429a:	605a      	str	r2, [r3, #4]
 800429c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429e:	2200      	movs	r2, #0
 80042a0:	615a      	str	r2, [r3, #20]
 80042a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	1e5a      	subs	r2, r3, #1
 80042a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042aa:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80042ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ae:	4618      	mov	r0, r3
 80042b0:	f003 fbae 	bl	8007a10 <SEGGER_SYSVIEW_OnTaskStartReady>
 80042b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b8:	2201      	movs	r2, #1
 80042ba:	409a      	lsls	r2, r3
 80042bc:	4b36      	ldr	r3, [pc, #216]	@ (8004398 <xTaskGenericNotify+0x268>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	4a35      	ldr	r2, [pc, #212]	@ (8004398 <xTaskGenericNotify+0x268>)
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ca:	4934      	ldr	r1, [pc, #208]	@ (800439c <xTaskGenericNotify+0x26c>)
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	3304      	adds	r3, #4
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
 80042dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e0:	609a      	str	r2, [r3, #8]
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e8:	60da      	str	r2, [r3, #12]
 80042ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042f0:	3204      	adds	r2, #4
 80042f2:	605a      	str	r2, [r3, #4]
 80042f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f6:	1d1a      	adds	r2, r3, #4
 80042f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fa:	609a      	str	r2, [r3, #8]
 80042fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4a24      	ldr	r2, [pc, #144]	@ (800439c <xTaskGenericNotify+0x26c>)
 800430a:	441a      	add	r2, r3
 800430c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430e:	615a      	str	r2, [r3, #20]
 8004310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004314:	4921      	ldr	r1, [pc, #132]	@ (800439c <xTaskGenericNotify+0x26c>)
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004324:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004326:	1c59      	adds	r1, r3, #1
 8004328:	481c      	ldr	r0, [pc, #112]	@ (800439c <xTaskGenericNotify+0x26c>)
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4403      	add	r3, r0
 8004334:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00d      	beq.n	800435a <xTaskGenericNotify+0x22a>
    __asm volatile
 800433e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004342:	b672      	cpsid	i
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	b662      	cpsie	i
 8004352:	617b      	str	r3, [r7, #20]
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	e7fd      	b.n	8004356 <xTaskGenericNotify+0x226>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 800435a:	4b11      	ldr	r3, [pc, #68]	@ (80043a0 <xTaskGenericNotify+0x270>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004364:	429a      	cmp	r2, r3
 8004366:	d207      	bcs.n	8004378 <xTaskGenericNotify+0x248>
 8004368:	4b0e      	ldr	r3, [pc, #56]	@ (80043a4 <xTaskGenericNotify+0x274>)
 800436a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004378:	f000 fcfa 	bl	8004d70 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );
 800437c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800437e:	4619      	mov	r1, r3
 8004380:	f240 1001 	movw	r0, #257	@ 0x101
 8004384:	f003 fa4c 	bl	8007820 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800438a:	4618      	mov	r0, r3
 800438c:	3738      	adds	r7, #56	@ 0x38
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	200001b8 	.word	0x200001b8
 8004398:	200001bc 	.word	0x200001bc
 800439c:	200000e0 	.word	0x200000e0
 80043a0:	200000dc 	.word	0x200000dc
 80043a4:	e000ed04 	.word	0xe000ed04

080043a8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80043b2:	4b3d      	ldr	r3, [pc, #244]	@ (80044a8 <prvAddCurrentTaskToDelayedList+0x100>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80043b8:	4b3c      	ldr	r3, [pc, #240]	@ (80044ac <prvAddCurrentTaskToDelayedList+0x104>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80043be:	4b3c      	ldr	r3, [pc, #240]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x108>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043c4:	4b3b      	ldr	r3, [pc, #236]	@ (80044b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3304      	adds	r3, #4
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fe f820 	bl	8002410 <uxListRemove>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10b      	bne.n	80043ee <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80043d6:	4b37      	ldr	r3, [pc, #220]	@ (80044b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	2201      	movs	r2, #1
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	43da      	mvns	r2, r3
 80043e4:	4b34      	ldr	r3, [pc, #208]	@ (80044b8 <prvAddCurrentTaskToDelayedList+0x110>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4013      	ands	r3, r2
 80043ea:	4a33      	ldr	r2, [pc, #204]	@ (80044b8 <prvAddCurrentTaskToDelayedList+0x110>)
 80043ec:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d124      	bne.n	8004440 <prvAddCurrentTaskToDelayedList+0x98>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d021      	beq.n	8004440 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043fc:	4b2f      	ldr	r3, [pc, #188]	@ (80044bc <prvAddCurrentTaskToDelayedList+0x114>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	4b2c      	ldr	r3, [pc, #176]	@ (80044b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	609a      	str	r2, [r3, #8]
 800440a:	4b2a      	ldr	r3, [pc, #168]	@ (80044b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	6892      	ldr	r2, [r2, #8]
 8004412:	60da      	str	r2, [r3, #12]
 8004414:	4b27      	ldr	r3, [pc, #156]	@ (80044b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	3204      	adds	r2, #4
 800441e:	605a      	str	r2, [r3, #4]
 8004420:	4b24      	ldr	r3, [pc, #144]	@ (80044b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	1d1a      	adds	r2, r3, #4
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	609a      	str	r2, [r3, #8]
 800442a:	4b22      	ldr	r3, [pc, #136]	@ (80044b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a23      	ldr	r2, [pc, #140]	@ (80044bc <prvAddCurrentTaskToDelayedList+0x114>)
 8004430:	615a      	str	r2, [r3, #20]
 8004432:	4b22      	ldr	r3, [pc, #136]	@ (80044bc <prvAddCurrentTaskToDelayedList+0x114>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3301      	adds	r3, #1
 8004438:	4a20      	ldr	r2, [pc, #128]	@ (80044bc <prvAddCurrentTaskToDelayedList+0x114>)
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800443e:	e02e      	b.n	800449e <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004440:	69fa      	ldr	r2, [r7, #28]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4413      	add	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004448:	4b1a      	ldr	r3, [pc, #104]	@ (80044b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	429a      	cmp	r2, r3
 8004456:	d20d      	bcs.n	8004474 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004458:	4b16      	ldr	r3, [pc, #88]	@ (80044b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2104      	movs	r1, #4
 800445e:	4618      	mov	r0, r3
 8004460:	f003 fb18 	bl	8007a94 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004464:	4b13      	ldr	r3, [pc, #76]	@ (80044b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	3304      	adds	r3, #4
 800446a:	4619      	mov	r1, r3
 800446c:	6978      	ldr	r0, [r7, #20]
 800446e:	f7fd ff94 	bl	800239a <vListInsert>
}
 8004472:	e014      	b.n	800449e <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8004474:	4b0f      	ldr	r3, [pc, #60]	@ (80044b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2104      	movs	r1, #4
 800447a:	4618      	mov	r0, r3
 800447c:	f003 fb0a 	bl	8007a94 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004480:	4b0c      	ldr	r3, [pc, #48]	@ (80044b4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3304      	adds	r3, #4
 8004486:	4619      	mov	r1, r3
 8004488:	69b8      	ldr	r0, [r7, #24]
 800448a:	f7fd ff86 	bl	800239a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800448e:	4b0c      	ldr	r3, [pc, #48]	@ (80044c0 <prvAddCurrentTaskToDelayedList+0x118>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	429a      	cmp	r2, r3
 8004496:	d202      	bcs.n	800449e <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8004498:	4a09      	ldr	r2, [pc, #36]	@ (80044c0 <prvAddCurrentTaskToDelayedList+0x118>)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6013      	str	r3, [r2, #0]
}
 800449e:	bf00      	nop
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	200001b8 	.word	0x200001b8
 80044ac:	2000016c 	.word	0x2000016c
 80044b0:	20000170 	.word	0x20000170
 80044b4:	200000dc 	.word	0x200000dc
 80044b8:	200001bc 	.word	0x200001bc
 80044bc:	200001a0 	.word	0x200001a0
 80044c0:	200001d4 	.word	0x200001d4

080044c4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80044ce:	f000 fa7d 	bl	80049cc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80044d2:	4b16      	ldr	r3, [pc, #88]	@ (800452c <xTimerCreateTimerTask+0x68>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00b      	beq.n	80044f2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80044da:	4b15      	ldr	r3, [pc, #84]	@ (8004530 <xTimerCreateTimerTask+0x6c>)
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	2304      	movs	r3, #4
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	2300      	movs	r3, #0
 80044e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80044e8:	4912      	ldr	r1, [pc, #72]	@ (8004534 <xTimerCreateTimerTask+0x70>)
 80044ea:	4813      	ldr	r0, [pc, #76]	@ (8004538 <xTimerCreateTimerTask+0x74>)
 80044ec:	f7fe fc12 	bl	8002d14 <xTaskCreate>
 80044f0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10d      	bne.n	8004514 <xTimerCreateTimerTask+0x50>
    __asm volatile
 80044f8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80044fc:	b672      	cpsid	i
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	b662      	cpsie	i
 800450c:	603b      	str	r3, [r7, #0]
}
 800450e:	bf00      	nop
 8004510:	bf00      	nop
 8004512:	e7fd      	b.n	8004510 <xTimerCreateTimerTask+0x4c>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4619      	mov	r1, r3
 8004518:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800451c:	f003 f980 	bl	8007820 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004520:	687b      	ldr	r3, [r7, #4]
    }
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	20000210 	.word	0x20000210
 8004530:	20000214 	.word	0x20000214
 8004534:	08007fa4 	.word	0x08007fa4
 8004538:	080045e1 	.word	0x080045e1

0800453c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004548:	e008      	b.n	800455c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	4413      	add	r3, r2
 8004552:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	699a      	ldr	r2, [r3, #24]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	18d1      	adds	r1, r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f8df 	bl	800472c <prvInsertTimerInActiveList>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1ea      	bne.n	800454a <prvReloadTimer+0xe>
        }
    }
 8004574:	bf00      	nop
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800458a:	4b14      	ldr	r3, [pc, #80]	@ (80045dc <prvProcessExpiredTimer+0x5c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3304      	adds	r3, #4
 8004598:	4618      	mov	r0, r3
 800459a:	f7fd ff39 	bl	8002410 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f7ff ffc3 	bl	800453c <prvReloadTimer>
 80045b6:	e008      	b.n	80045ca <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	4798      	blx	r3
    }
 80045d2:	bf00      	nop
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000208 	.word	0x20000208

080045e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045e8:	f107 0308 	add.w	r3, r7, #8
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 f859 	bl	80046a4 <prvGetNextExpireTime>
 80045f2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4619      	mov	r1, r3
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f805 	bl	8004608 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80045fe:	f000 f8d7 	bl	80047b0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004602:	bf00      	nop
 8004604:	e7f0      	b.n	80045e8 <prvTimerTask+0x8>
	...

08004608 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004612:	f7fe fe95 	bl	8003340 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004616:	f107 0308 	add.w	r3, r7, #8
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f866 	bl	80046ec <prvSampleTimeNow>
 8004620:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d130      	bne.n	800468a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10a      	bne.n	8004644 <prvProcessTimerOrBlockTask+0x3c>
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	429a      	cmp	r2, r3
 8004634:	d806      	bhi.n	8004644 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004636:	f7fe fe91 	bl	800335c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800463a:	68f9      	ldr	r1, [r7, #12]
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff ff9f 	bl	8004580 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004642:	e024      	b.n	800468e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800464a:	4b13      	ldr	r3, [pc, #76]	@ (8004698 <prvProcessTimerOrBlockTask+0x90>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <prvProcessTimerOrBlockTask+0x50>
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <prvProcessTimerOrBlockTask+0x52>
 8004658:	2300      	movs	r3, #0
 800465a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800465c:	4b0f      	ldr	r3, [pc, #60]	@ (800469c <prvProcessTimerOrBlockTask+0x94>)
 800465e:	6818      	ldr	r0, [r3, #0]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	4619      	mov	r1, r3
 800466a:	f7fe fa67 	bl	8002b3c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800466e:	f7fe fe75 	bl	800335c <xTaskResumeAll>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8004678:	4b09      	ldr	r3, [pc, #36]	@ (80046a0 <prvProcessTimerOrBlockTask+0x98>)
 800467a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	f3bf 8f6f 	isb	sy
    }
 8004688:	e001      	b.n	800468e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800468a:	f7fe fe67 	bl	800335c <xTaskResumeAll>
    }
 800468e:	bf00      	nop
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	2000020c 	.word	0x2000020c
 800469c:	20000210 	.word	0x20000210
 80046a0:	e000ed04 	.word	0xe000ed04

080046a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046ac:	4b0e      	ldr	r3, [pc, #56]	@ (80046e8 <prvGetNextExpireTime+0x44>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <prvGetNextExpireTime+0x16>
 80046b6:	2201      	movs	r2, #1
 80046b8:	e000      	b.n	80046bc <prvGetNextExpireTime+0x18>
 80046ba:	2200      	movs	r2, #0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d105      	bne.n	80046d4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046c8:	4b07      	ldr	r3, [pc, #28]	@ (80046e8 <prvGetNextExpireTime+0x44>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	e001      	b.n	80046d8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80046d8:	68fb      	ldr	r3, [r7, #12]
    }
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000208 	.word	0x20000208

080046ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80046f4:	f7fe ff46 	bl	8003584 <xTaskGetTickCount>
 80046f8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80046fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004728 <prvSampleTimeNow+0x3c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	429a      	cmp	r2, r3
 8004702:	d205      	bcs.n	8004710 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004704:	f000 f93c 	bl	8004980 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	e002      	b.n	8004716 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004716:	4a04      	ldr	r2, [pc, #16]	@ (8004728 <prvSampleTimeNow+0x3c>)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800471c:	68fb      	ldr	r3, [r7, #12]
    }
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20000218 	.word	0x20000218

0800472c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	429a      	cmp	r2, r3
 8004750:	d812      	bhi.n	8004778 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	1ad2      	subs	r2, r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	429a      	cmp	r2, r3
 800475e:	d302      	bcc.n	8004766 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004760:	2301      	movs	r3, #1
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	e01b      	b.n	800479e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004766:	4b10      	ldr	r3, [pc, #64]	@ (80047a8 <prvInsertTimerInActiveList+0x7c>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3304      	adds	r3, #4
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f7fd fe12 	bl	800239a <vListInsert>
 8004776:	e012      	b.n	800479e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d206      	bcs.n	800478e <prvInsertTimerInActiveList+0x62>
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d302      	bcc.n	800478e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004788:	2301      	movs	r3, #1
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	e007      	b.n	800479e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800478e:	4b07      	ldr	r3, [pc, #28]	@ (80047ac <prvInsertTimerInActiveList+0x80>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3304      	adds	r3, #4
 8004796:	4619      	mov	r1, r3
 8004798:	4610      	mov	r0, r2
 800479a:	f7fd fdfe 	bl	800239a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800479e:	697b      	ldr	r3, [r7, #20]
    }
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	2000020c 	.word	0x2000020c
 80047ac:	20000208 	.word	0x20000208

080047b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08a      	sub	sp, #40	@ 0x28
 80047b4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 80047b6:	1d3b      	adds	r3, r7, #4
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	605a      	str	r2, [r3, #4]
 80047be:	609a      	str	r2, [r3, #8]
 80047c0:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80047c2:	e0cb      	b.n	800495c <prvProcessReceivedCommands+0x1ac>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	da1b      	bge.n	8004802 <prvProcessReceivedCommands+0x52>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80047ca:	1d3b      	adds	r3, r7, #4
 80047cc:	3304      	adds	r3, #4
 80047ce:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 80047d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10d      	bne.n	80047f2 <prvProcessReceivedCommands+0x42>
    __asm volatile
 80047d6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80047da:	b672      	cpsid	i
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	b662      	cpsie	i
 80047ea:	61bb      	str	r3, [r7, #24]
}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	e7fd      	b.n	80047ee <prvProcessReceivedCommands+0x3e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047f8:	6850      	ldr	r0, [r2, #4]
 80047fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047fc:	6892      	ldr	r2, [r2, #8]
 80047fe:	4611      	mov	r1, r2
 8004800:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	f2c0 80a9 	blt.w	800495c <prvProcessReceivedCommands+0x1ac>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d004      	beq.n	8004820 <prvProcessReceivedCommands+0x70>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	3304      	adds	r3, #4
 800481a:	4618      	mov	r0, r3
 800481c:	f7fd fdf8 	bl	8002410 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004820:	463b      	mov	r3, r7
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff ff62 	bl	80046ec <prvSampleTimeNow>
 8004828:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3b01      	subs	r3, #1
 800482e:	2b08      	cmp	r3, #8
 8004830:	f200 8091 	bhi.w	8004956 <prvProcessReceivedCommands+0x1a6>
 8004834:	a201      	add	r2, pc, #4	@ (adr r2, 800483c <prvProcessReceivedCommands+0x8c>)
 8004836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483a:	bf00      	nop
 800483c:	08004861 	.word	0x08004861
 8004840:	08004861 	.word	0x08004861
 8004844:	080048c9 	.word	0x080048c9
 8004848:	080048dd 	.word	0x080048dd
 800484c:	0800492d 	.word	0x0800492d
 8004850:	08004861 	.word	0x08004861
 8004854:	08004861 	.word	0x08004861
 8004858:	080048c9 	.word	0x080048c9
 800485c:	080048dd 	.word	0x080048dd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	b2da      	uxtb	r2, r3
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	18d1      	adds	r1, r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	69fa      	ldr	r2, [r7, #28]
 800487e:	6a38      	ldr	r0, [r7, #32]
 8004880:	f7ff ff54 	bl	800472c <prvInsertTimerInActiveList>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d067      	beq.n	800495a <prvProcessReceivedCommands+0x1aa>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d009      	beq.n	80048ac <prvProcessReceivedCommands+0xfc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	4413      	add	r3, r2
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	4619      	mov	r1, r3
 80048a4:	6a38      	ldr	r0, [r7, #32]
 80048a6:	f7ff fe49 	bl	800453c <prvReloadTimer>
 80048aa:	e008      	b.n	80048be <prvProcessReceivedCommands+0x10e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048b2:	f023 0301 	bic.w	r3, r3, #1
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	6a38      	ldr	r0, [r7, #32]
 80048c4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80048c6:	e048      	b.n	800495a <prvProcessReceivedCommands+0x1aa>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048ce:	f023 0301 	bic.w	r3, r3, #1
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80048da:	e03f      	b.n	800495c <prvProcessReceivedCommands+0x1ac>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10d      	bne.n	8004918 <prvProcessReceivedCommands+0x168>
    __asm volatile
 80048fc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004900:	b672      	cpsid	i
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	b662      	cpsie	i
 8004910:	617b      	str	r3, [r7, #20]
}
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	e7fd      	b.n	8004914 <prvProcessReceivedCommands+0x164>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	699a      	ldr	r2, [r3, #24]
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	18d1      	adds	r1, r2, r3
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	6a38      	ldr	r0, [r7, #32]
 8004926:	f7ff ff01 	bl	800472c <prvInsertTimerInActiveList>
                        break;
 800492a:	e017      	b.n	800495c <prvProcessReceivedCommands+0x1ac>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d103      	bne.n	8004942 <prvProcessReceivedCommands+0x192>
                            {
                                vPortFree( pxTimer );
 800493a:	6a38      	ldr	r0, [r7, #32]
 800493c:	f000 fc5c 	bl	80051f8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004940:	e00c      	b.n	800495c <prvProcessReceivedCommands+0x1ac>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004948:	f023 0301 	bic.w	r3, r3, #1
 800494c:	b2da      	uxtb	r2, r3
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004954:	e002      	b.n	800495c <prvProcessReceivedCommands+0x1ac>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004956:	bf00      	nop
 8004958:	e000      	b.n	800495c <prvProcessReceivedCommands+0x1ac>
                        break;
 800495a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800495c:	4b07      	ldr	r3, [pc, #28]	@ (800497c <prvProcessReceivedCommands+0x1cc>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	1d39      	adds	r1, r7, #4
 8004962:	2200      	movs	r2, #0
 8004964:	4618      	mov	r0, r3
 8004966:	f7fd fe9d 	bl	80026a4 <xQueueReceive>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	f47f af29 	bne.w	80047c4 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	3728      	adds	r7, #40	@ 0x28
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	20000210 	.word	0x20000210

08004980 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004986:	e009      	b.n	800499c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004988:	4b0e      	ldr	r3, [pc, #56]	@ (80049c4 <prvSwitchTimerLists+0x44>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004992:	f04f 31ff 	mov.w	r1, #4294967295
 8004996:	6838      	ldr	r0, [r7, #0]
 8004998:	f7ff fdf2 	bl	8004580 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800499c:	4b09      	ldr	r3, [pc, #36]	@ (80049c4 <prvSwitchTimerLists+0x44>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80049a6:	4b07      	ldr	r3, [pc, #28]	@ (80049c4 <prvSwitchTimerLists+0x44>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80049ac:	4b06      	ldr	r3, [pc, #24]	@ (80049c8 <prvSwitchTimerLists+0x48>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a04      	ldr	r2, [pc, #16]	@ (80049c4 <prvSwitchTimerLists+0x44>)
 80049b2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80049b4:	4a04      	ldr	r2, [pc, #16]	@ (80049c8 <prvSwitchTimerLists+0x48>)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6013      	str	r3, [r2, #0]
    }
 80049ba:	bf00      	nop
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000208 	.word	0x20000208
 80049c8:	2000020c 	.word	0x2000020c

080049cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80049d0:	f000 f998 	bl	8004d04 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80049d4:	4b12      	ldr	r3, [pc, #72]	@ (8004a20 <prvCheckForValidListAndQueue+0x54>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d11d      	bne.n	8004a18 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80049dc:	4811      	ldr	r0, [pc, #68]	@ (8004a24 <prvCheckForValidListAndQueue+0x58>)
 80049de:	f7fd fc85 	bl	80022ec <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80049e2:	4811      	ldr	r0, [pc, #68]	@ (8004a28 <prvCheckForValidListAndQueue+0x5c>)
 80049e4:	f7fd fc82 	bl	80022ec <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80049e8:	4b10      	ldr	r3, [pc, #64]	@ (8004a2c <prvCheckForValidListAndQueue+0x60>)
 80049ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004a24 <prvCheckForValidListAndQueue+0x58>)
 80049ec:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80049ee:	4b10      	ldr	r3, [pc, #64]	@ (8004a30 <prvCheckForValidListAndQueue+0x64>)
 80049f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004a28 <prvCheckForValidListAndQueue+0x5c>)
 80049f2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80049f4:	2200      	movs	r2, #0
 80049f6:	2110      	movs	r1, #16
 80049f8:	2005      	movs	r0, #5
 80049fa:	f7fd fdd3 	bl	80025a4 <xQueueGenericCreate>
 80049fe:	4603      	mov	r3, r0
 8004a00:	4a07      	ldr	r2, [pc, #28]	@ (8004a20 <prvCheckForValidListAndQueue+0x54>)
 8004a02:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004a04:	4b06      	ldr	r3, [pc, #24]	@ (8004a20 <prvCheckForValidListAndQueue+0x54>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a0c:	4b04      	ldr	r3, [pc, #16]	@ (8004a20 <prvCheckForValidListAndQueue+0x54>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4908      	ldr	r1, [pc, #32]	@ (8004a34 <prvCheckForValidListAndQueue+0x68>)
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe f840 	bl	8002a98 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004a18:	f000 f9aa 	bl	8004d70 <vPortExitCritical>
    }
 8004a1c:	bf00      	nop
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20000210 	.word	0x20000210
 8004a24:	200001e0 	.word	0x200001e0
 8004a28:	200001f4 	.word	0x200001f4
 8004a2c:	20000208 	.word	0x20000208
 8004a30:	2000020c 	.word	0x2000020c
 8004a34:	08007fac 	.word	0x08007fac

08004a38 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	3b04      	subs	r3, #4
 8004a48:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a50:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	3b04      	subs	r3, #4
 8004a56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f023 0201 	bic.w	r2, r3, #1
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	3b04      	subs	r3, #4
 8004a66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004a68:	4a0c      	ldr	r2, [pc, #48]	@ (8004a9c <pxPortInitialiseStack+0x64>)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3b14      	subs	r3, #20
 8004a72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3b04      	subs	r3, #4
 8004a7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f06f 0202 	mvn.w	r2, #2
 8004a86:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3b20      	subs	r3, #32
 8004a8c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	08004aa1 	.word	0x08004aa1

08004aa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004aaa:	4b15      	ldr	r3, [pc, #84]	@ (8004b00 <prvTaskExitError+0x60>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab2:	d00d      	beq.n	8004ad0 <prvTaskExitError+0x30>
    __asm volatile
 8004ab4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004ab8:	b672      	cpsid	i
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	b662      	cpsie	i
 8004ac8:	60fb      	str	r3, [r7, #12]
}
 8004aca:	bf00      	nop
 8004acc:	bf00      	nop
 8004ace:	e7fd      	b.n	8004acc <prvTaskExitError+0x2c>
    __asm volatile
 8004ad0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004ad4:	b672      	cpsid	i
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	b662      	cpsie	i
 8004ae4:	60bb      	str	r3, [r7, #8]
}
 8004ae6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004ae8:	bf00      	nop
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0fc      	beq.n	8004aea <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004af0:	bf00      	nop
 8004af2:	bf00      	nop
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	20000010 	.word	0x20000010
	...

08004b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004b10:	4b07      	ldr	r3, [pc, #28]	@ (8004b30 <pxCurrentTCBConst2>)
 8004b12:	6819      	ldr	r1, [r3, #0]
 8004b14:	6808      	ldr	r0, [r1, #0]
 8004b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1a:	f380 8809 	msr	PSP, r0
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f04f 0000 	mov.w	r0, #0
 8004b26:	f380 8811 	msr	BASEPRI, r0
 8004b2a:	4770      	bx	lr
 8004b2c:	f3af 8000 	nop.w

08004b30 <pxCurrentTCBConst2>:
 8004b30:	200000dc 	.word	0x200000dc
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop

08004b38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004b38:	4808      	ldr	r0, [pc, #32]	@ (8004b5c <prvPortStartFirstTask+0x24>)
 8004b3a:	6800      	ldr	r0, [r0, #0]
 8004b3c:	6800      	ldr	r0, [r0, #0]
 8004b3e:	f380 8808 	msr	MSP, r0
 8004b42:	f04f 0000 	mov.w	r0, #0
 8004b46:	f380 8814 	msr	CONTROL, r0
 8004b4a:	b662      	cpsie	i
 8004b4c:	b661      	cpsie	f
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	df00      	svc	0
 8004b58:	bf00      	nop
 8004b5a:	0000      	.short	0x0000
 8004b5c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004b60:	bf00      	nop
 8004b62:	bf00      	nop

08004b64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	@ 0x28
 8004b68:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8004b6a:	4b5c      	ldr	r3, [pc, #368]	@ (8004cdc <xPortStartScheduler+0x178>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8004b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b72:	332c      	adds	r3, #44	@ 0x2c
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a5a      	ldr	r2, [pc, #360]	@ (8004ce0 <xPortStartScheduler+0x17c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00d      	beq.n	8004b98 <xPortStartScheduler+0x34>
    __asm volatile
 8004b7c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004b80:	b672      	cpsid	i
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	b662      	cpsie	i
 8004b90:	61fb      	str	r3, [r7, #28]
}
 8004b92:	bf00      	nop
 8004b94:	bf00      	nop
 8004b96:	e7fd      	b.n	8004b94 <xPortStartScheduler+0x30>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8004b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9a:	3338      	adds	r3, #56	@ 0x38
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a51      	ldr	r2, [pc, #324]	@ (8004ce4 <xPortStartScheduler+0x180>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00d      	beq.n	8004bc0 <xPortStartScheduler+0x5c>
    __asm volatile
 8004ba4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004ba8:	b672      	cpsid	i
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	b662      	cpsie	i
 8004bb8:	61bb      	str	r3, [r7, #24]
}
 8004bba:	bf00      	nop
 8004bbc:	bf00      	nop
 8004bbe:	e7fd      	b.n	8004bbc <xPortStartScheduler+0x58>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bc4:	4b48      	ldr	r3, [pc, #288]	@ (8004ce8 <xPortStartScheduler+0x184>)
 8004bc6:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	22ff      	movs	r2, #255	@ 0xff
 8004bd4:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	4b40      	ldr	r3, [pc, #256]	@ (8004cec <xPortStartScheduler+0x188>)
 8004bea:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8004bec:	4b3f      	ldr	r3, [pc, #252]	@ (8004cec <xPortStartScheduler+0x188>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10d      	bne.n	8004c10 <xPortStartScheduler+0xac>
    __asm volatile
 8004bf4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004bf8:	b672      	cpsid	i
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	b662      	cpsie	i
 8004c08:	617b      	str	r3, [r7, #20]
}
 8004c0a:	bf00      	nop
 8004c0c:	bf00      	nop
 8004c0e:	e7fd      	b.n	8004c0c <xPortStartScheduler+0xa8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	43db      	mvns	r3, r3
 8004c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d015      	beq.n	8004c4a <xPortStartScheduler+0xe6>
    __asm volatile
 8004c1e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004c22:	b672      	cpsid	i
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	b662      	cpsie	i
 8004c32:	613b      	str	r3, [r7, #16]
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop
 8004c38:	e7fd      	b.n	8004c36 <xPortStartScheduler+0xd2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c40:	79fb      	ldrb	r3, [r7, #7]
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c52:	2b80      	cmp	r3, #128	@ 0x80
 8004c54:	d0f1      	beq.n	8004c3a <xPortStartScheduler+0xd6>
        }

        if( ulImplementedPrioBits == 8 )
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d103      	bne.n	8004c64 <xPortStartScheduler+0x100>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8004c5c:	4b24      	ldr	r3, [pc, #144]	@ (8004cf0 <xPortStartScheduler+0x18c>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	e004      	b.n	8004c6e <xPortStartScheduler+0x10a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f1c3 0307 	rsb	r3, r3, #7
 8004c6a:	4a21      	ldr	r2, [pc, #132]	@ (8004cf0 <xPortStartScheduler+0x18c>)
 8004c6c:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c6e:	4b20      	ldr	r3, [pc, #128]	@ (8004cf0 <xPortStartScheduler+0x18c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf0 <xPortStartScheduler+0x18c>)
 8004c76:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c78:	4b1d      	ldr	r3, [pc, #116]	@ (8004cf0 <xPortStartScheduler+0x18c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c80:	4a1b      	ldr	r2, [pc, #108]	@ (8004cf0 <xPortStartScheduler+0x18c>)
 8004c82:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004c8c:	4b19      	ldr	r3, [pc, #100]	@ (8004cf4 <xPortStartScheduler+0x190>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a18      	ldr	r2, [pc, #96]	@ (8004cf4 <xPortStartScheduler+0x190>)
 8004c92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c96:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004c98:	4b16      	ldr	r3, [pc, #88]	@ (8004cf4 <xPortStartScheduler+0x190>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a15      	ldr	r2, [pc, #84]	@ (8004cf4 <xPortStartScheduler+0x190>)
 8004c9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ca2:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8004ca4:	4b14      	ldr	r3, [pc, #80]	@ (8004cf8 <xPortStartScheduler+0x194>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004caa:	f000 f8f1 	bl	8004e90 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004cae:	4b13      	ldr	r3, [pc, #76]	@ (8004cfc <xPortStartScheduler+0x198>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004cb4:	f000 f910 	bl	8004ed8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cb8:	4b11      	ldr	r3, [pc, #68]	@ (8004d00 <xPortStartScheduler+0x19c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a10      	ldr	r2, [pc, #64]	@ (8004d00 <xPortStartScheduler+0x19c>)
 8004cbe:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004cc2:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004cc4:	f7ff ff38 	bl	8004b38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004cc8:	f7fe fdb6 	bl	8003838 <vTaskSwitchContext>
    prvTaskExitError();
 8004ccc:	f7ff fee8 	bl	8004aa0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3728      	adds	r7, #40	@ 0x28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	e000ed08 	.word	0xe000ed08
 8004ce0:	08004b11 	.word	0x08004b11
 8004ce4:	08004dd1 	.word	0x08004dd1
 8004ce8:	e000e400 	.word	0xe000e400
 8004cec:	2000021c 	.word	0x2000021c
 8004cf0:	20000220 	.word	0x20000220
 8004cf4:	e000ed20 	.word	0xe000ed20
 8004cf8:	e000ed1c 	.word	0xe000ed1c
 8004cfc:	20000010 	.word	0x20000010
 8004d00:	e000ef34 	.word	0xe000ef34

08004d04 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
    __asm volatile
 8004d0a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004d0e:	b672      	cpsid	i
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	b662      	cpsie	i
 8004d1e:	607b      	str	r3, [r7, #4]
}
 8004d20:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004d22:	4b11      	ldr	r3, [pc, #68]	@ (8004d68 <vPortEnterCritical+0x64>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3301      	adds	r3, #1
 8004d28:	4a0f      	ldr	r2, [pc, #60]	@ (8004d68 <vPortEnterCritical+0x64>)
 8004d2a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d68 <vPortEnterCritical+0x64>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d112      	bne.n	8004d5a <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d34:	4b0d      	ldr	r3, [pc, #52]	@ (8004d6c <vPortEnterCritical+0x68>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00d      	beq.n	8004d5a <vPortEnterCritical+0x56>
    __asm volatile
 8004d3e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004d42:	b672      	cpsid	i
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	b662      	cpsie	i
 8004d52:	603b      	str	r3, [r7, #0]
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop
 8004d58:	e7fd      	b.n	8004d56 <vPortEnterCritical+0x52>
    }
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	20000010 	.word	0x20000010
 8004d6c:	e000ed04 	.word	0xe000ed04

08004d70 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004d76:	4b13      	ldr	r3, [pc, #76]	@ (8004dc4 <vPortExitCritical+0x54>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10d      	bne.n	8004d9a <vPortExitCritical+0x2a>
    __asm volatile
 8004d7e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004d82:	b672      	cpsid	i
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	b662      	cpsie	i
 8004d92:	607b      	str	r3, [r7, #4]
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop
 8004d98:	e7fd      	b.n	8004d96 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8004d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc4 <vPortExitCritical+0x54>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	4a08      	ldr	r2, [pc, #32]	@ (8004dc4 <vPortExitCritical+0x54>)
 8004da2:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004da4:	4b07      	ldr	r3, [pc, #28]	@ (8004dc4 <vPortExitCritical+0x54>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d105      	bne.n	8004db8 <vPortExitCritical+0x48>
 8004dac:	2300      	movs	r3, #0
 8004dae:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8004db6:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	20000010 	.word	0x20000010
	...

08004dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004dd0:	f3ef 8009 	mrs	r0, PSP
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	4b15      	ldr	r3, [pc, #84]	@ (8004e30 <pxCurrentTCBConst>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	f01e 0f10 	tst.w	lr, #16
 8004de0:	bf08      	it	eq
 8004de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dea:	6010      	str	r0, [r2, #0]
 8004dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004df0:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8004df4:	b672      	cpsid	i
 8004df6:	f380 8811 	msr	BASEPRI, r0
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	b662      	cpsie	i
 8004e04:	f7fe fd18 	bl	8003838 <vTaskSwitchContext>
 8004e08:	f04f 0000 	mov.w	r0, #0
 8004e0c:	f380 8811 	msr	BASEPRI, r0
 8004e10:	bc09      	pop	{r0, r3}
 8004e12:	6819      	ldr	r1, [r3, #0]
 8004e14:	6808      	ldr	r0, [r1, #0]
 8004e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e1a:	f01e 0f10 	tst.w	lr, #16
 8004e1e:	bf08      	it	eq
 8004e20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e24:	f380 8809 	msr	PSP, r0
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop

08004e30 <pxCurrentTCBConst>:
 8004e30:	200000dc 	.word	0x200000dc
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop

08004e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
    __asm volatile
 8004e3e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004e42:	b672      	cpsid	i
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	b662      	cpsie	i
 8004e52:	607b      	str	r3, [r7, #4]
}
 8004e54:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004e56:	f002 fc2d 	bl	80076b4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004e5a:	f7fe fbc9 	bl	80035f0 <xTaskIncrementTick>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d006      	beq.n	8004e72 <SysTick_Handler+0x3a>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8004e64:	f002 fc84 	bl	8007770 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e68:	4b08      	ldr	r3, [pc, #32]	@ (8004e8c <SysTick_Handler+0x54>)
 8004e6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	e001      	b.n	8004e76 <SysTick_Handler+0x3e>
        }
        else
        {
            traceISR_EXIT();
 8004e72:	f002 fc61 	bl	8007738 <SEGGER_SYSVIEW_RecordExitISR>
 8004e76:	2300      	movs	r3, #0
 8004e78:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	f383 8811 	msr	BASEPRI, r3
}
 8004e80:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004e82:	bf00      	nop
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	e000ed04 	.word	0xe000ed04

08004e90 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e94:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec4 <vPortSetupTimerInterrupt+0x34>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec8 <vPortSetupTimerInterrupt+0x38>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ecc <vPortSetupTimerInterrupt+0x3c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8004ed0 <vPortSetupTimerInterrupt+0x40>)
 8004ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eaa:	099b      	lsrs	r3, r3, #6
 8004eac:	4a09      	ldr	r2, [pc, #36]	@ (8004ed4 <vPortSetupTimerInterrupt+0x44>)
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004eb2:	4b04      	ldr	r3, [pc, #16]	@ (8004ec4 <vPortSetupTimerInterrupt+0x34>)
 8004eb4:	2207      	movs	r2, #7
 8004eb6:	601a      	str	r2, [r3, #0]
}
 8004eb8:	bf00      	nop
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	e000e010 	.word	0xe000e010
 8004ec8:	e000e018 	.word	0xe000e018
 8004ecc:	20000000 	.word	0x20000000
 8004ed0:	10624dd3 	.word	0x10624dd3
 8004ed4:	e000e014 	.word	0xe000e014

08004ed8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004ed8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004ee8 <vPortEnableVFP+0x10>
 8004edc:	6801      	ldr	r1, [r0, #0]
 8004ede:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004ee2:	6001      	str	r1, [r0, #0]
 8004ee4:	4770      	bx	lr
 8004ee6:	0000      	.short	0x0000
 8004ee8:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8004eec:	bf00      	nop
 8004eee:	bf00      	nop

08004ef0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004ef6:	f3ef 8305 	mrs	r3, IPSR
 8004efa:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b0f      	cmp	r3, #15
 8004f00:	d917      	bls.n	8004f32 <vPortValidateInterruptPriority+0x42>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f02:	4a1a      	ldr	r2, [pc, #104]	@ (8004f6c <vPortValidateInterruptPriority+0x7c>)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4413      	add	r3, r2
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f0c:	4b18      	ldr	r3, [pc, #96]	@ (8004f70 <vPortValidateInterruptPriority+0x80>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	7afa      	ldrb	r2, [r7, #11]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d20d      	bcs.n	8004f32 <vPortValidateInterruptPriority+0x42>
    __asm volatile
 8004f16:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004f1a:	b672      	cpsid	i
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	b662      	cpsie	i
 8004f2a:	607b      	str	r3, [r7, #4]
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	e7fd      	b.n	8004f2e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f32:	4b10      	ldr	r3, [pc, #64]	@ (8004f74 <vPortValidateInterruptPriority+0x84>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8004f78 <vPortValidateInterruptPriority+0x88>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d90d      	bls.n	8004f5e <vPortValidateInterruptPriority+0x6e>
    __asm volatile
 8004f42:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004f46:	b672      	cpsid	i
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	b662      	cpsie	i
 8004f56:	603b      	str	r3, [r7, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	e7fd      	b.n	8004f5a <vPortValidateInterruptPriority+0x6a>
    }
 8004f5e:	bf00      	nop
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	e000e3f0 	.word	0xe000e3f0
 8004f70:	2000021c 	.word	0x2000021c
 8004f74:	e000ed0c 	.word	0xe000ed0c
 8004f78:	20000220 	.word	0x20000220

08004f7c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08e      	sub	sp, #56	@ 0x38
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d022      	beq.n	8004fd4 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8004f8e:	2308      	movs	r3, #8
 8004f90:	43db      	mvns	r3, r3
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d81b      	bhi.n	8004fd0 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8004f98:	2208      	movs	r2, #8
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d014      	beq.n	8004fd4 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	f1c3 0308 	rsb	r3, r3, #8
 8004fb4:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d804      	bhi.n	8004fca <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc4:	4413      	add	r3, r2
 8004fc6:	607b      	str	r3, [r7, #4]
 8004fc8:	e004      	b.n	8004fd4 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	607b      	str	r3, [r7, #4]
 8004fce:	e001      	b.n	8004fd4 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8004fd4:	f7fe f9b4 	bl	8003340 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004fd8:	4b80      	ldr	r3, [pc, #512]	@ (80051dc <pvPortMalloc+0x260>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8004fe0:	f000 f98a 	bl	80052f8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f2c0 80de 	blt.w	80051a8 <pvPortMalloc+0x22c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 80da 	beq.w	80051a8 <pvPortMalloc+0x22c>
 8004ff4:	4b7a      	ldr	r3, [pc, #488]	@ (80051e0 <pvPortMalloc+0x264>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	f200 80d4 	bhi.w	80051a8 <pvPortMalloc+0x22c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005000:	4b78      	ldr	r3, [pc, #480]	@ (80051e4 <pvPortMalloc+0x268>)
 8005002:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8005004:	4b77      	ldr	r3, [pc, #476]	@ (80051e4 <pvPortMalloc+0x268>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800500a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800500c:	4a76      	ldr	r2, [pc, #472]	@ (80051e8 <pvPortMalloc+0x26c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d305      	bcc.n	800501e <pvPortMalloc+0xa2>
 8005012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005014:	4a75      	ldr	r2, [pc, #468]	@ (80051ec <pvPortMalloc+0x270>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d801      	bhi.n	800501e <pvPortMalloc+0xa2>
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <pvPortMalloc+0xa4>
 800501e:	2300      	movs	r3, #0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d12d      	bne.n	8005080 <pvPortMalloc+0x104>
    __asm volatile
 8005024:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005028:	b672      	cpsid	i
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	b662      	cpsie	i
 8005038:	623b      	str	r3, [r7, #32]
}
 800503a:	bf00      	nop
 800503c:	bf00      	nop
 800503e:	e7fd      	b.n	800503c <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8005040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005042:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8005044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800504a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800504c:	4a66      	ldr	r2, [pc, #408]	@ (80051e8 <pvPortMalloc+0x26c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d305      	bcc.n	800505e <pvPortMalloc+0xe2>
 8005052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005054:	4a65      	ldr	r2, [pc, #404]	@ (80051ec <pvPortMalloc+0x270>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d801      	bhi.n	800505e <pvPortMalloc+0xe2>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <pvPortMalloc+0xe4>
 800505e:	2300      	movs	r3, #0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10d      	bne.n	8005080 <pvPortMalloc+0x104>
    __asm volatile
 8005064:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005068:	b672      	cpsid	i
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	b662      	cpsie	i
 8005078:	61fb      	str	r3, [r7, #28]
}
 800507a:	bf00      	nop
 800507c:	bf00      	nop
 800507e:	e7fd      	b.n	800507c <pvPortMalloc+0x100>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8005080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	d903      	bls.n	8005092 <pvPortMalloc+0x116>
 800508a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1d6      	bne.n	8005040 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005092:	4b52      	ldr	r3, [pc, #328]	@ (80051dc <pvPortMalloc+0x260>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005098:	429a      	cmp	r2, r3
 800509a:	f000 8085 	beq.w	80051a8 <pvPortMalloc+0x22c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 800509e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2208      	movs	r2, #8
 80050a4:	4413      	add	r3, r2
 80050a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80050a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050aa:	4a4f      	ldr	r2, [pc, #316]	@ (80051e8 <pvPortMalloc+0x26c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d305      	bcc.n	80050bc <pvPortMalloc+0x140>
 80050b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b2:	4a4e      	ldr	r2, [pc, #312]	@ (80051ec <pvPortMalloc+0x270>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d801      	bhi.n	80050bc <pvPortMalloc+0x140>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <pvPortMalloc+0x142>
 80050bc:	2300      	movs	r3, #0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10d      	bne.n	80050de <pvPortMalloc+0x162>
    __asm volatile
 80050c2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80050c6:	b672      	cpsid	i
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	b662      	cpsie	i
 80050d6:	61bb      	str	r3, [r7, #24]
}
 80050d8:	bf00      	nop
 80050da:	bf00      	nop
 80050dc:	e7fd      	b.n	80050da <pvPortMalloc+0x15e>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e4:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80050e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d90d      	bls.n	800510c <pvPortMalloc+0x190>
    __asm volatile
 80050f0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80050f4:	b672      	cpsid	i
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	b662      	cpsie	i
 8005104:	617b      	str	r3, [r7, #20]
}
 8005106:	bf00      	nop
 8005108:	bf00      	nop
 800510a:	e7fd      	b.n	8005108 <pvPortMalloc+0x18c>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800510c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	1ad2      	subs	r2, r2, r3
 8005114:	2308      	movs	r3, #8
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	429a      	cmp	r2, r3
 800511a:	d926      	bls.n	800516a <pvPortMalloc+0x1ee>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800511c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4413      	add	r3, r2
 8005122:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00d      	beq.n	800514a <pvPortMalloc+0x1ce>
    __asm volatile
 800512e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005132:	b672      	cpsid	i
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	b662      	cpsie	i
 8005142:	613b      	str	r3, [r7, #16]
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	e7fd      	b.n	8005146 <pvPortMalloc+0x1ca>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800514a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	1ad2      	subs	r2, r2, r3
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800515c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8005164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005168:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800516a:	4b1d      	ldr	r3, [pc, #116]	@ (80051e0 <pvPortMalloc+0x264>)
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	4a1a      	ldr	r2, [pc, #104]	@ (80051e0 <pvPortMalloc+0x264>)
 8005176:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005178:	4b19      	ldr	r3, [pc, #100]	@ (80051e0 <pvPortMalloc+0x264>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	4b1c      	ldr	r3, [pc, #112]	@ (80051f0 <pvPortMalloc+0x274>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d203      	bcs.n	800518c <pvPortMalloc+0x210>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005184:	4b16      	ldr	r3, [pc, #88]	@ (80051e0 <pvPortMalloc+0x264>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a19      	ldr	r2, [pc, #100]	@ (80051f0 <pvPortMalloc+0x274>)
 800518a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800518c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005196:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800519e:	4b15      	ldr	r3, [pc, #84]	@ (80051f4 <pvPortMalloc+0x278>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3301      	adds	r3, #1
 80051a4:	4a13      	ldr	r2, [pc, #76]	@ (80051f4 <pvPortMalloc+0x278>)
 80051a6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80051a8:	f7fe f8d8 	bl	800335c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00d      	beq.n	80051d2 <pvPortMalloc+0x256>
    __asm volatile
 80051b6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80051ba:	b672      	cpsid	i
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	b662      	cpsie	i
 80051ca:	60fb      	str	r3, [r7, #12]
}
 80051cc:	bf00      	nop
 80051ce:	bf00      	nop
 80051d0:	e7fd      	b.n	80051ce <pvPortMalloc+0x252>
    return pvReturn;
 80051d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3738      	adds	r7, #56	@ 0x38
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	2000ba2c 	.word	0x2000ba2c
 80051e0:	2000ba30 	.word	0x2000ba30
 80051e4:	2000ba24 	.word	0x2000ba24
 80051e8:	20000224 	.word	0x20000224
 80051ec:	2000ba23 	.word	0x2000ba23
 80051f0:	2000ba34 	.word	0x2000ba34
 80051f4:	2000ba38 	.word	0x2000ba38

080051f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d06a      	beq.n	80052e0 <vPortFree+0xe8>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800520a:	2308      	movs	r3, #8
 800520c:	425b      	negs	r3, r3
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	4413      	add	r3, r2
 8005212:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	4a33      	ldr	r2, [pc, #204]	@ (80052e8 <vPortFree+0xf0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d305      	bcc.n	800522c <vPortFree+0x34>
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	4a32      	ldr	r2, [pc, #200]	@ (80052ec <vPortFree+0xf4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d801      	bhi.n	800522c <vPortFree+0x34>
 8005228:	2301      	movs	r3, #1
 800522a:	e000      	b.n	800522e <vPortFree+0x36>
 800522c:	2300      	movs	r3, #0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10d      	bne.n	800524e <vPortFree+0x56>
    __asm volatile
 8005232:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005236:	b672      	cpsid	i
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	b662      	cpsie	i
 8005246:	617b      	str	r3, [r7, #20]
}
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	e7fd      	b.n	800524a <vPortFree+0x52>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	db0d      	blt.n	8005272 <vPortFree+0x7a>
    __asm volatile
 8005256:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800525a:	b672      	cpsid	i
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	b662      	cpsie	i
 800526a:	613b      	str	r3, [r7, #16]
}
 800526c:	bf00      	nop
 800526e:	bf00      	nop
 8005270:	e7fd      	b.n	800526e <vPortFree+0x76>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00d      	beq.n	8005296 <vPortFree+0x9e>
    __asm volatile
 800527a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800527e:	b672      	cpsid	i
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	b662      	cpsie	i
 800528e:	60fb      	str	r3, [r7, #12]
}
 8005290:	bf00      	nop
 8005292:	bf00      	nop
 8005294:	e7fd      	b.n	8005292 <vPortFree+0x9a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	0fdb      	lsrs	r3, r3, #31
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d01c      	beq.n	80052e0 <vPortFree+0xe8>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d118      	bne.n	80052e0 <vPortFree+0xe8>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80052ba:	f7fe f841 	bl	8003340 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	4b0b      	ldr	r3, [pc, #44]	@ (80052f0 <vPortFree+0xf8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4413      	add	r3, r2
 80052c8:	4a09      	ldr	r2, [pc, #36]	@ (80052f0 <vPortFree+0xf8>)
 80052ca:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052cc:	69b8      	ldr	r0, [r7, #24]
 80052ce:	f000 f86d 	bl	80053ac <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80052d2:	4b08      	ldr	r3, [pc, #32]	@ (80052f4 <vPortFree+0xfc>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3301      	adds	r3, #1
 80052d8:	4a06      	ldr	r2, [pc, #24]	@ (80052f4 <vPortFree+0xfc>)
 80052da:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80052dc:	f7fe f83e 	bl	800335c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80052e0:	bf00      	nop
 80052e2:	3720      	adds	r7, #32
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000224 	.word	0x20000224
 80052ec:	2000ba23 	.word	0x2000ba23
 80052f0:	2000ba30 	.word	0x2000ba30
 80052f4:	2000ba3c 	.word	0x2000ba3c

080052f8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052fe:	f44f 4338 	mov.w	r3, #47104	@ 0xb800
 8005302:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005304:	4b24      	ldr	r3, [pc, #144]	@ (8005398 <prvHeapInit+0xa0>)
 8005306:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00c      	beq.n	800532c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3307      	adds	r3, #7
 8005316:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0307 	bic.w	r3, r3, #7
 800531e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	4a1c      	ldr	r2, [pc, #112]	@ (8005398 <prvHeapInit+0xa0>)
 8005328:	4413      	add	r3, r2
 800532a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4a1b      	ldr	r2, [pc, #108]	@ (800539c <prvHeapInit+0xa4>)
 8005330:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005332:	4b1a      	ldr	r3, [pc, #104]	@ (800539c <prvHeapInit+0xa4>)
 8005334:	2200      	movs	r2, #0
 8005336:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4413      	add	r3, r2
 800533e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8005340:	2208      	movs	r2, #8
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	1a9b      	subs	r3, r3, r2
 8005346:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f023 0307 	bic.w	r3, r3, #7
 800534e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a13      	ldr	r2, [pc, #76]	@ (80053a0 <prvHeapInit+0xa8>)
 8005354:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005356:	4b12      	ldr	r3, [pc, #72]	@ (80053a0 <prvHeapInit+0xa8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2200      	movs	r2, #0
 800535c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800535e:	4b10      	ldr	r3, [pc, #64]	@ (80053a0 <prvHeapInit+0xa8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	1ad2      	subs	r2, r2, r3
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005374:	4b0a      	ldr	r3, [pc, #40]	@ (80053a0 <prvHeapInit+0xa8>)
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	4a08      	ldr	r2, [pc, #32]	@ (80053a4 <prvHeapInit+0xac>)
 8005382:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	4a07      	ldr	r2, [pc, #28]	@ (80053a8 <prvHeapInit+0xb0>)
 800538a:	6013      	str	r3, [r2, #0]
}
 800538c:	bf00      	nop
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	20000224 	.word	0x20000224
 800539c:	2000ba24 	.word	0x2000ba24
 80053a0:	2000ba2c 	.word	0x2000ba2c
 80053a4:	2000ba34 	.word	0x2000ba34
 80053a8:	2000ba30 	.word	0x2000ba30

080053ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80053b4:	4b37      	ldr	r3, [pc, #220]	@ (8005494 <prvInsertBlockIntoFreeList+0xe8>)
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	e002      	b.n	80053c0 <prvInsertBlockIntoFreeList+0x14>
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d8f7      	bhi.n	80053ba <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	4a31      	ldr	r2, [pc, #196]	@ (8005494 <prvInsertBlockIntoFreeList+0xe8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d01a      	beq.n	8005408 <prvInsertBlockIntoFreeList+0x5c>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	4a30      	ldr	r2, [pc, #192]	@ (8005498 <prvInsertBlockIntoFreeList+0xec>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d305      	bcc.n	80053e6 <prvInsertBlockIntoFreeList+0x3a>
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	4a2f      	ldr	r2, [pc, #188]	@ (800549c <prvInsertBlockIntoFreeList+0xf0>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d801      	bhi.n	80053e6 <prvInsertBlockIntoFreeList+0x3a>
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <prvInsertBlockIntoFreeList+0x3c>
 80053e6:	2300      	movs	r3, #0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10d      	bne.n	8005408 <prvInsertBlockIntoFreeList+0x5c>
    __asm volatile
 80053ec:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80053f0:	b672      	cpsid	i
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	b662      	cpsie	i
 8005400:	60fb      	str	r3, [r7, #12]
}
 8005402:	bf00      	nop
 8005404:	bf00      	nop
 8005406:	e7fd      	b.n	8005404 <prvInsertBlockIntoFreeList+0x58>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4413      	add	r3, r2
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	429a      	cmp	r2, r3
 8005418:	d108      	bne.n	800542c <prvInsertBlockIntoFreeList+0x80>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	441a      	add	r2, r3
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	441a      	add	r2, r3
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d118      	bne.n	8005472 <prvInsertBlockIntoFreeList+0xc6>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	4b16      	ldr	r3, [pc, #88]	@ (80054a0 <prvInsertBlockIntoFreeList+0xf4>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d00d      	beq.n	8005468 <prvInsertBlockIntoFreeList+0xbc>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	441a      	add	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	e008      	b.n	800547a <prvInsertBlockIntoFreeList+0xce>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005468:	4b0d      	ldr	r3, [pc, #52]	@ (80054a0 <prvInsertBlockIntoFreeList+0xf4>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	e003      	b.n	800547a <prvInsertBlockIntoFreeList+0xce>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	429a      	cmp	r2, r3
 8005480:	d002      	beq.n	8005488 <prvInsertBlockIntoFreeList+0xdc>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005488:	bf00      	nop
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	2000ba24 	.word	0x2000ba24
 8005498:	20000224 	.word	0x20000224
 800549c:	2000ba23 	.word	0x2000ba23
 80054a0:	2000ba2c 	.word	0x2000ba2c

080054a4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80054a8:	4803      	ldr	r0, [pc, #12]	@ (80054b8 <_cbSendSystemDesc+0x14>)
 80054aa:	f002 f8ad 	bl	8007608 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80054ae:	4803      	ldr	r0, [pc, #12]	@ (80054bc <_cbSendSystemDesc+0x18>)
 80054b0:	f002 f8aa 	bl	8007608 <SEGGER_SYSVIEW_SendSysDesc>
}
 80054b4:	bf00      	nop
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	08007fb4 	.word	0x08007fb4
 80054bc:	08007ff0 	.word	0x08007ff0

080054c0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80054c4:	4b06      	ldr	r3, [pc, #24]	@ (80054e0 <SEGGER_SYSVIEW_Conf+0x20>)
 80054c6:	6818      	ldr	r0, [r3, #0]
 80054c8:	4b05      	ldr	r3, [pc, #20]	@ (80054e0 <SEGGER_SYSVIEW_Conf+0x20>)
 80054ca:	6819      	ldr	r1, [r3, #0]
 80054cc:	4b05      	ldr	r3, [pc, #20]	@ (80054e4 <SEGGER_SYSVIEW_Conf+0x24>)
 80054ce:	4a06      	ldr	r2, [pc, #24]	@ (80054e8 <SEGGER_SYSVIEW_Conf+0x28>)
 80054d0:	f001 fd20 	bl	8006f14 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80054d4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80054d8:	f001 fd60 	bl	8006f9c <SEGGER_SYSVIEW_SetRAMBase>
}
 80054dc:	bf00      	nop
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	20000000 	.word	0x20000000
 80054e4:	080054a5 	.word	0x080054a5
 80054e8:	0800808c 	.word	0x0800808c

080054ec <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80054ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80054f2:	2300      	movs	r3, #0
 80054f4:	607b      	str	r3, [r7, #4]
 80054f6:	e033      	b.n	8005560 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80054f8:	491e      	ldr	r1, [pc, #120]	@ (8005574 <_cbSendTaskList+0x88>)
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	6818      	ldr	r0, [r3, #0]
 8005508:	491a      	ldr	r1, [pc, #104]	@ (8005574 <_cbSendTaskList+0x88>)
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	4613      	mov	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	440b      	add	r3, r1
 8005516:	3304      	adds	r3, #4
 8005518:	6819      	ldr	r1, [r3, #0]
 800551a:	4c16      	ldr	r4, [pc, #88]	@ (8005574 <_cbSendTaskList+0x88>)
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	4613      	mov	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4423      	add	r3, r4
 8005528:	3308      	adds	r3, #8
 800552a:	681c      	ldr	r4, [r3, #0]
 800552c:	4d11      	ldr	r5, [pc, #68]	@ (8005574 <_cbSendTaskList+0x88>)
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	4613      	mov	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	442b      	add	r3, r5
 800553a:	330c      	adds	r3, #12
 800553c:	681d      	ldr	r5, [r3, #0]
 800553e:	4e0d      	ldr	r6, [pc, #52]	@ (8005574 <_cbSendTaskList+0x88>)
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	4613      	mov	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4433      	add	r3, r6
 800554c:	3310      	adds	r3, #16
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	462b      	mov	r3, r5
 8005554:	4622      	mov	r2, r4
 8005556:	f000 f979 	bl	800584c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3301      	adds	r3, #1
 800555e:	607b      	str	r3, [r7, #4]
 8005560:	4b05      	ldr	r3, [pc, #20]	@ (8005578 <_cbSendTaskList+0x8c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	429a      	cmp	r2, r3
 8005568:	d3c6      	bcc.n	80054f8 <_cbSendTaskList+0xc>
  }
}
 800556a:	bf00      	nop
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005574:	2000ba40 	.word	0x2000ba40
 8005578:	2000bae0 	.word	0x2000bae0

0800557c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800557c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005584:	f7fe f810 	bl	80035a8 <xTaskGetTickCountFromISR>
 8005588:	4603      	mov	r3, r0
 800558a:	2200      	movs	r2, #0
 800558c:	469a      	mov	sl, r3
 800558e:	4693      	mov	fp, r2
 8005590:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005594:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	f04f 0a00 	mov.w	sl, #0
 80055a0:	f04f 0b00 	mov.w	fp, #0
 80055a4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80055a8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80055ac:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80055b0:	4652      	mov	r2, sl
 80055b2:	465b      	mov	r3, fp
 80055b4:	1a14      	subs	r4, r2, r0
 80055b6:	eb63 0501 	sbc.w	r5, r3, r1
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	f04f 0300 	mov.w	r3, #0
 80055c2:	00ab      	lsls	r3, r5, #2
 80055c4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80055c8:	00a2      	lsls	r2, r4, #2
 80055ca:	4614      	mov	r4, r2
 80055cc:	461d      	mov	r5, r3
 80055ce:	eb14 0800 	adds.w	r8, r4, r0
 80055d2:	eb45 0901 	adc.w	r9, r5, r1
 80055d6:	f04f 0200 	mov.w	r2, #0
 80055da:	f04f 0300 	mov.w	r3, #0
 80055de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055ea:	4690      	mov	r8, r2
 80055ec:	4699      	mov	r9, r3
 80055ee:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80055f2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80055f6:	4610      	mov	r0, r2
 80055f8:	4619      	mov	r1, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005604 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af02      	add	r7, sp, #8
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005612:	2205      	movs	r2, #5
 8005614:	492b      	ldr	r1, [pc, #172]	@ (80056c4 <SYSVIEW_AddTask+0xc0>)
 8005616:	68b8      	ldr	r0, [r7, #8]
 8005618:	f002 fc30 	bl	8007e7c <memcmp>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d04b      	beq.n	80056ba <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005622:	4b29      	ldr	r3, [pc, #164]	@ (80056c8 <SYSVIEW_AddTask+0xc4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b07      	cmp	r3, #7
 8005628:	d903      	bls.n	8005632 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800562a:	4828      	ldr	r0, [pc, #160]	@ (80056cc <SYSVIEW_AddTask+0xc8>)
 800562c:	f002 fb9c 	bl	8007d68 <SEGGER_SYSVIEW_Warn>
    return;
 8005630:	e044      	b.n	80056bc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005632:	4b25      	ldr	r3, [pc, #148]	@ (80056c8 <SYSVIEW_AddTask+0xc4>)
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	4926      	ldr	r1, [pc, #152]	@ (80056d0 <SYSVIEW_AddTask+0xcc>)
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005646:	4b20      	ldr	r3, [pc, #128]	@ (80056c8 <SYSVIEW_AddTask+0xc4>)
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	4921      	ldr	r1, [pc, #132]	@ (80056d0 <SYSVIEW_AddTask+0xcc>)
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	3304      	adds	r3, #4
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800565c:	4b1a      	ldr	r3, [pc, #104]	@ (80056c8 <SYSVIEW_AddTask+0xc4>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	491b      	ldr	r1, [pc, #108]	@ (80056d0 <SYSVIEW_AddTask+0xcc>)
 8005662:	4613      	mov	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	440b      	add	r3, r1
 800566c:	3308      	adds	r3, #8
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005672:	4b15      	ldr	r3, [pc, #84]	@ (80056c8 <SYSVIEW_AddTask+0xc4>)
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	4916      	ldr	r1, [pc, #88]	@ (80056d0 <SYSVIEW_AddTask+0xcc>)
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	440b      	add	r3, r1
 8005682:	330c      	adds	r3, #12
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005688:	4b0f      	ldr	r3, [pc, #60]	@ (80056c8 <SYSVIEW_AddTask+0xc4>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	4910      	ldr	r1, [pc, #64]	@ (80056d0 <SYSVIEW_AddTask+0xcc>)
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	440b      	add	r3, r1
 8005698:	3310      	adds	r3, #16
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800569e:	4b0a      	ldr	r3, [pc, #40]	@ (80056c8 <SYSVIEW_AddTask+0xc4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3301      	adds	r3, #1
 80056a4:	4a08      	ldr	r2, [pc, #32]	@ (80056c8 <SYSVIEW_AddTask+0xc4>)
 80056a6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 f8ca 	bl	800584c <SYSVIEW_SendTaskInfo>
 80056b8:	e000      	b.n	80056bc <SYSVIEW_AddTask+0xb8>
    return;
 80056ba:	bf00      	nop

}
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	08008000 	.word	0x08008000
 80056c8:	2000bae0 	.word	0x2000bae0
 80056cc:	08008008 	.word	0x08008008
 80056d0:	2000ba40 	.word	0x2000ba40

080056d4 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80056dc:	4b59      	ldr	r3, [pc, #356]	@ (8005844 <SYSVIEW_DeleteTask+0x170>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 80ab 	beq.w	800583c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	e00d      	b.n	8005708 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 80056ec:	4956      	ldr	r1, [pc, #344]	@ (8005848 <SYSVIEW_DeleteTask+0x174>)
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4613      	mov	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d008      	beq.n	8005714 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3301      	adds	r3, #1
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	4b4e      	ldr	r3, [pc, #312]	@ (8005844 <SYSVIEW_DeleteTask+0x170>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	429a      	cmp	r2, r3
 8005710:	d3ec      	bcc.n	80056ec <SYSVIEW_DeleteTask+0x18>
 8005712:	e000      	b.n	8005716 <SYSVIEW_DeleteTask+0x42>
      break;
 8005714:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8005716:	4b4b      	ldr	r3, [pc, #300]	@ (8005844 <SYSVIEW_DeleteTask+0x170>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3b01      	subs	r3, #1
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	429a      	cmp	r2, r3
 8005720:	d111      	bne.n	8005746 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4a46      	ldr	r2, [pc, #280]	@ (8005848 <SYSVIEW_DeleteTask+0x174>)
 800572e:	4413      	add	r3, r2
 8005730:	2214      	movs	r2, #20
 8005732:	2100      	movs	r1, #0
 8005734:	4618      	mov	r0, r3
 8005736:	f002 fbb1 	bl	8007e9c <memset>
    _NumTasks--;
 800573a:	4b42      	ldr	r3, [pc, #264]	@ (8005844 <SYSVIEW_DeleteTask+0x170>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3b01      	subs	r3, #1
 8005740:	4a40      	ldr	r2, [pc, #256]	@ (8005844 <SYSVIEW_DeleteTask+0x170>)
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	e07b      	b.n	800583e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8005746:	4b3f      	ldr	r3, [pc, #252]	@ (8005844 <SYSVIEW_DeleteTask+0x170>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	429a      	cmp	r2, r3
 800574e:	d276      	bcs.n	800583e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8005750:	4b3c      	ldr	r3, [pc, #240]	@ (8005844 <SYSVIEW_DeleteTask+0x170>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	1e5a      	subs	r2, r3, #1
 8005756:	493c      	ldr	r1, [pc, #240]	@ (8005848 <SYSVIEW_DeleteTask+0x174>)
 8005758:	4613      	mov	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	440b      	add	r3, r1
 8005762:	6819      	ldr	r1, [r3, #0]
 8005764:	4838      	ldr	r0, [pc, #224]	@ (8005848 <SYSVIEW_DeleteTask+0x174>)
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4613      	mov	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4403      	add	r3, r0
 8005772:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005774:	4b33      	ldr	r3, [pc, #204]	@ (8005844 <SYSVIEW_DeleteTask+0x170>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	1e5a      	subs	r2, r3, #1
 800577a:	4933      	ldr	r1, [pc, #204]	@ (8005848 <SYSVIEW_DeleteTask+0x174>)
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	3304      	adds	r3, #4
 8005788:	6819      	ldr	r1, [r3, #0]
 800578a:	482f      	ldr	r0, [pc, #188]	@ (8005848 <SYSVIEW_DeleteTask+0x174>)
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4403      	add	r3, r0
 8005798:	3304      	adds	r3, #4
 800579a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800579c:	4b29      	ldr	r3, [pc, #164]	@ (8005844 <SYSVIEW_DeleteTask+0x170>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	1e5a      	subs	r2, r3, #1
 80057a2:	4929      	ldr	r1, [pc, #164]	@ (8005848 <SYSVIEW_DeleteTask+0x174>)
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	440b      	add	r3, r1
 80057ae:	3308      	adds	r3, #8
 80057b0:	6819      	ldr	r1, [r3, #0]
 80057b2:	4825      	ldr	r0, [pc, #148]	@ (8005848 <SYSVIEW_DeleteTask+0x174>)
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4613      	mov	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4403      	add	r3, r0
 80057c0:	3308      	adds	r3, #8
 80057c2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80057c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005844 <SYSVIEW_DeleteTask+0x170>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	1e5a      	subs	r2, r3, #1
 80057ca:	491f      	ldr	r1, [pc, #124]	@ (8005848 <SYSVIEW_DeleteTask+0x174>)
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	440b      	add	r3, r1
 80057d6:	330c      	adds	r3, #12
 80057d8:	6819      	ldr	r1, [r3, #0]
 80057da:	481b      	ldr	r0, [pc, #108]	@ (8005848 <SYSVIEW_DeleteTask+0x174>)
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4613      	mov	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4403      	add	r3, r0
 80057e8:	330c      	adds	r3, #12
 80057ea:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80057ec:	4b15      	ldr	r3, [pc, #84]	@ (8005844 <SYSVIEW_DeleteTask+0x170>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	1e5a      	subs	r2, r3, #1
 80057f2:	4915      	ldr	r1, [pc, #84]	@ (8005848 <SYSVIEW_DeleteTask+0x174>)
 80057f4:	4613      	mov	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	440b      	add	r3, r1
 80057fe:	3310      	adds	r3, #16
 8005800:	6819      	ldr	r1, [r3, #0]
 8005802:	4811      	ldr	r0, [pc, #68]	@ (8005848 <SYSVIEW_DeleteTask+0x174>)
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	4613      	mov	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4403      	add	r3, r0
 8005810:	3310      	adds	r3, #16
 8005812:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8005814:	4b0b      	ldr	r3, [pc, #44]	@ (8005844 <SYSVIEW_DeleteTask+0x170>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	1e5a      	subs	r2, r3, #1
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4a09      	ldr	r2, [pc, #36]	@ (8005848 <SYSVIEW_DeleteTask+0x174>)
 8005824:	4413      	add	r3, r2
 8005826:	2214      	movs	r2, #20
 8005828:	2100      	movs	r1, #0
 800582a:	4618      	mov	r0, r3
 800582c:	f002 fb36 	bl	8007e9c <memset>
    _NumTasks--;
 8005830:	4b04      	ldr	r3, [pc, #16]	@ (8005844 <SYSVIEW_DeleteTask+0x170>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3b01      	subs	r3, #1
 8005836:	4a03      	ldr	r2, [pc, #12]	@ (8005844 <SYSVIEW_DeleteTask+0x170>)
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	e000      	b.n	800583e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800583c:	bf00      	nop
  }
}
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	2000bae0 	.word	0x2000bae0
 8005848:	2000ba40 	.word	0x2000ba40

0800584c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800584c:	b580      	push	{r7, lr}
 800584e:	b08a      	sub	sp, #40	@ 0x28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800585a:	f107 0310 	add.w	r3, r7, #16
 800585e:	2218      	movs	r2, #24
 8005860:	2100      	movs	r1, #0
 8005862:	4618      	mov	r0, r3
 8005864:	f002 fb1a 	bl	8007e9c <memset>
  TaskInfo.TaskID     = TaskID;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8005878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587a:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800587c:	f107 0310 	add.w	r3, r7, #16
 8005880:	4618      	mov	r0, r3
 8005882:	f001 fdc9 	bl	8007418 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005886:	bf00      	nop
 8005888:	3728      	adds	r7, #40	@ 0x28
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <__NVIC_EnableIRQ>:
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	4603      	mov	r3, r0
 8005898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800589a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	db0b      	blt.n	80058ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058a2:	79fb      	ldrb	r3, [r7, #7]
 80058a4:	f003 021f 	and.w	r2, r3, #31
 80058a8:	4907      	ldr	r1, [pc, #28]	@ (80058c8 <__NVIC_EnableIRQ+0x38>)
 80058aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	2001      	movs	r0, #1
 80058b2:	fa00 f202 	lsl.w	r2, r0, r2
 80058b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	e000e100 	.word	0xe000e100

080058cc <__NVIC_SetPriority>:
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	4603      	mov	r3, r0
 80058d4:	6039      	str	r1, [r7, #0]
 80058d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	db0a      	blt.n	80058f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	490c      	ldr	r1, [pc, #48]	@ (8005918 <__NVIC_SetPriority+0x4c>)
 80058e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ea:	0112      	lsls	r2, r2, #4
 80058ec:	b2d2      	uxtb	r2, r2
 80058ee:	440b      	add	r3, r1
 80058f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80058f4:	e00a      	b.n	800590c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	4908      	ldr	r1, [pc, #32]	@ (800591c <__NVIC_SetPriority+0x50>)
 80058fc:	79fb      	ldrb	r3, [r7, #7]
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	3b04      	subs	r3, #4
 8005904:	0112      	lsls	r2, r2, #4
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	440b      	add	r3, r1
 800590a:	761a      	strb	r2, [r3, #24]
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	e000e100 	.word	0xe000e100
 800591c:	e000ed00 	.word	0xe000ed00

08005920 <_StartSysView>:

} _SVInfo = {0,0,1};



static void _StartSysView(void) {
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0

  int r;



  r = SEGGER_SYSVIEW_IsStarted();
 8005926:	f002 fa7b 	bl	8007e20 <SEGGER_SYSVIEW_IsStarted>
 800592a:	6078      	str	r0, [r7, #4]

  if (r == 0) {
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <_StartSysView+0x16>

    SEGGER_SYSVIEW_Start();
 8005932:	f001 fbf7 	bl	8007124 <SEGGER_SYSVIEW_Start>

  }

}
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <_cbOnUARTRx>:



static void _cbOnUARTRx(U8 Data) {
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	4603      	mov	r3, r0
 8005948:	71fb      	strb	r3, [r7, #7]

  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800594a:	4b0c      	ldr	r3, [pc, #48]	@ (800597c <_cbOnUARTRx+0x3c>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	2b03      	cmp	r3, #3
 8005950:	d806      	bhi.n	8005960 <_cbOnUARTRx+0x20>

    _SVInfo.NumBytesHelloRcvd++;
 8005952:	4b0a      	ldr	r3, [pc, #40]	@ (800597c <_cbOnUARTRx+0x3c>)
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	3301      	adds	r3, #1
 8005958:	b2da      	uxtb	r2, r3
 800595a:	4b08      	ldr	r3, [pc, #32]	@ (800597c <_cbOnUARTRx+0x3c>)
 800595c:	701a      	strb	r2, [r3, #0]

    goto Done;
 800595e:	e009      	b.n	8005974 <_cbOnUARTRx+0x34>

  }

  _StartSysView();
 8005960:	f7ff ffde 	bl	8005920 <_StartSysView>

  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005964:	4b05      	ldr	r3, [pc, #20]	@ (800597c <_cbOnUARTRx+0x3c>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	4618      	mov	r0, r3
 800596a:	1dfb      	adds	r3, r7, #7
 800596c:	2201      	movs	r2, #1
 800596e:	4619      	mov	r1, r3
 8005970:	f000 fb8e 	bl	8006090 <SEGGER_RTT_WriteDownBuffer>

Done:

  return;
 8005974:	bf00      	nop

}
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20000014 	.word	0x20000014

08005980 <_cbOnUARTTx>:



static int _cbOnUARTTx(U8* pChar) {
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]

  int r;



  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005988:	4b14      	ldr	r3, [pc, #80]	@ (80059dc <_cbOnUARTTx+0x5c>)
 800598a:	785b      	ldrb	r3, [r3, #1]
 800598c:	2b03      	cmp	r3, #3
 800598e:	d80f      	bhi.n	80059b0 <_cbOnUARTTx+0x30>

    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005990:	4b12      	ldr	r3, [pc, #72]	@ (80059dc <_cbOnUARTTx+0x5c>)
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	461a      	mov	r2, r3
 8005996:	4b12      	ldr	r3, [pc, #72]	@ (80059e0 <_cbOnUARTTx+0x60>)
 8005998:	5c9a      	ldrb	r2, [r3, r2]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	701a      	strb	r2, [r3, #0]

    _SVInfo.NumBytesHelloSent++;
 800599e:	4b0f      	ldr	r3, [pc, #60]	@ (80059dc <_cbOnUARTTx+0x5c>)
 80059a0:	785b      	ldrb	r3, [r3, #1]
 80059a2:	3301      	adds	r3, #1
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	4b0d      	ldr	r3, [pc, #52]	@ (80059dc <_cbOnUARTTx+0x5c>)
 80059a8:	705a      	strb	r2, [r3, #1]

    r = 1;
 80059aa:	2301      	movs	r3, #1
 80059ac:	60fb      	str	r3, [r7, #12]

    goto Done;
 80059ae:	e00f      	b.n	80059d0 <_cbOnUARTTx+0x50>

  }

  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80059b0:	4b0a      	ldr	r3, [pc, #40]	@ (80059dc <_cbOnUARTTx+0x5c>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 fa0d 	bl	8005dd8 <SEGGER_RTT_ReadUpBufferNoLock>
 80059be:	4603      	mov	r3, r0
 80059c0:	60fb      	str	r3, [r7, #12]

  if (r < 0) {  // Failed to read from up buffer?
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	da02      	bge.n	80059ce <_cbOnUARTTx+0x4e>

    r = 0;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	e000      	b.n	80059d0 <_cbOnUARTTx+0x50>

  }

Done:
 80059ce:	bf00      	nop

  return r;
 80059d0:	68fb      	ldr	r3, [r7, #12]

}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20000014 	.word	0x20000014
 80059e0:	08008094 	.word	0x08008094

080059e4 <SEGGER_UART_init>:



void SEGGER_UART_init(U32 baud)

{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]

HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80059ec:	4a04      	ldr	r2, [pc, #16]	@ (8005a00 <SEGGER_UART_init+0x1c>)
 80059ee:	4905      	ldr	r1, [pc, #20]	@ (8005a04 <SEGGER_UART_init+0x20>)
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f855 	bl	8005aa0 <HIF_UART_Init>

}
 80059f6:	bf00      	nop
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	08005941 	.word	0x08005941
 8005a04:	08005981 	.word	0x08005981

08005a08 <USART3_IRQHandler>:

*/

void USART3_IRQHandler(void);

void USART3_IRQHandler(void) {
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0

  int r;



  UsartStatus = USART_SR;                              // Examine status register
 8005a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005a88 <USART3_IRQHandler+0x80>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60fb      	str	r3, [r7, #12]

  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d011      	beq.n	8005a42 <USART3_IRQHandler+0x3a>

    v = USART_RDR;                                      // Read data
 8005a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8005a8c <USART3_IRQHandler+0x84>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	71fb      	strb	r3, [r7, #7]

    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f003 030b 	and.w	r3, r3, #11
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d108      	bne.n	8005a42 <USART3_IRQHandler+0x3a>

      (void)v;                                         // Avoid warning in BTL

      if (_cbOnRx) {
 8005a30:	4b17      	ldr	r3, [pc, #92]	@ (8005a90 <USART3_IRQHandler+0x88>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d004      	beq.n	8005a42 <USART3_IRQHandler+0x3a>

        _cbOnRx(v);
 8005a38:	4b15      	ldr	r3, [pc, #84]	@ (8005a90 <USART3_IRQHandler+0x88>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	79fa      	ldrb	r2, [r7, #7]
 8005a3e:	4610      	mov	r0, r2
 8005a40:	4798      	blx	r3

    }

  }

  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01a      	beq.n	8005a82 <USART3_IRQHandler+0x7a>

    // Therefore, we need to check if the function pointer is valid.

    //

    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005a4c:	4b11      	ldr	r3, [pc, #68]	@ (8005a94 <USART3_IRQHandler+0x8c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d015      	beq.n	8005a80 <USART3_IRQHandler+0x78>

      return;

    }

    r = _cbOnTx(&v);
 8005a54:	4b0f      	ldr	r3, [pc, #60]	@ (8005a94 <USART3_IRQHandler+0x8c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	1dfa      	adds	r2, r7, #7
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	4798      	blx	r3
 8005a5e:	60b8      	str	r0, [r7, #8]

    if (r == 0) {                          // No more characters to send ?
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d106      	bne.n	8005a74 <USART3_IRQHandler+0x6c>

      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005a66:	4b0c      	ldr	r3, [pc, #48]	@ (8005a98 <USART3_IRQHandler+0x90>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a0b      	ldr	r2, [pc, #44]	@ (8005a98 <USART3_IRQHandler+0x90>)
 8005a6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	e006      	b.n	8005a82 <USART3_IRQHandler+0x7a>

    } else {

      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005a74:	4b04      	ldr	r3, [pc, #16]	@ (8005a88 <USART3_IRQHandler+0x80>)
 8005a76:	681b      	ldr	r3, [r3, #0]

      USART_TDR = v;  // Start transmission by writing to data register
 8005a78:	79fa      	ldrb	r2, [r7, #7]
 8005a7a:	4b08      	ldr	r3, [pc, #32]	@ (8005a9c <USART3_IRQHandler+0x94>)
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	e000      	b.n	8005a82 <USART3_IRQHandler+0x7a>
      return;
 8005a80:	bf00      	nop

    }

  }

}
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	4000481c 	.word	0x4000481c
 8005a8c:	40004824 	.word	0x40004824
 8005a90:	2000bae4 	.word	0x2000bae4
 8005a94:	2000bae8 	.word	0x2000bae8
 8005a98:	40004800 	.word	0x40004800
 8005a9c:	40004828 	.word	0x40004828

08005aa0 <HIF_UART_Init>:

*       HIF_UART_Init()

*/

void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]

  //

  // Habilitar reloj de USART3 y puerto D

  RCC_APB1ENR |= (1 << 18);       // Habilitar reloj USART3 (APB1)
 8005aac:	4b2e      	ldr	r3, [pc, #184]	@ (8005b68 <HIF_UART_Init+0xc8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a2d      	ldr	r2, [pc, #180]	@ (8005b68 <HIF_UART_Init+0xc8>)
 8005ab2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ab6:	6013      	str	r3, [r2, #0]

  RCC_AHB1ENR |= (1 << 3);        // Habilitar reloj GPIO D
 8005ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8005b6c <HIF_UART_Init+0xcc>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a2b      	ldr	r2, [pc, #172]	@ (8005b6c <HIF_UART_Init+0xcc>)
 8005abe:	f043 0308 	orr.w	r3, r3, #8
 8005ac2:	6013      	str	r3, [r2, #0]



  // Configurar los pines PD8 y PD9 para función alternativa AF7 (USART3)

  v  = GPIO_AFRH;
 8005ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8005b70 <HIF_UART_Init+0xd0>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	613b      	str	r3, [r7, #16]

  v &= ~((15UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (15UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005ad0:	613b      	str	r3, [r7, #16]

  v |=  ((7UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (7UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ad8:	613b      	str	r3, [r7, #16]

  GPIO_AFRH = v;
 8005ada:	4a25      	ldr	r2, [pc, #148]	@ (8005b70 <HIF_UART_Init+0xd0>)
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	6013      	str	r3, [r2, #0]

  // Configure USART RX/TX pins for alternate function usage

  //

  v  = GPIO_MODER;
 8005ae0:	4b24      	ldr	r3, [pc, #144]	@ (8005b74 <HIF_UART_Init+0xd4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	613b      	str	r3, [r7, #16]

  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8005aec:	613b      	str	r3, [r7, #16]

  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8005af4:	613b      	str	r3, [r7, #16]

  GPIO_MODER = v;
 8005af6:	4a1f      	ldr	r2, [pc, #124]	@ (8005b74 <HIF_UART_Init+0xd4>)
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	6013      	str	r3, [r2, #0]

  // Set baudrate

  //

  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	617b      	str	r3, [r7, #20]

  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8005b02:	4a1d      	ldr	r2, [pc, #116]	@ (8005b78 <HIF_UART_Init+0xd8>)
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	617b      	str	r3, [r7, #20]

  Div = Div / 2;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	085b      	lsrs	r3, r3, #1
 8005b12:	617b      	str	r3, [r7, #20]

  if (Div > 0xFFF) {
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b1a:	d302      	bcc.n	8005b22 <HIF_UART_Init+0x82>

    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005b1c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005b20:	617b      	str	r3, [r7, #20]

  }

  if (Div >= 1) {
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <HIF_UART_Init+0x92>

    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	4a13      	ldr	r2, [pc, #76]	@ (8005b7c <HIF_UART_Init+0xdc>)
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	6013      	str	r3, [r2, #0]

  // Initialize USART

  //

  USART_CR1 = 0
 8005b32:	4b13      	ldr	r3, [pc, #76]	@ (8005b80 <HIF_UART_Init+0xe0>)
 8005b34:	f248 022d 	movw	r2, #32813	@ 0x802d
 8005b38:	601a      	str	r2, [r3, #0]

            | (1 <<  2)                         // RE     = 1; Receiver enabled

            ;

  USART_CR2 = 0
 8005b3a:	4b12      	ldr	r3, [pc, #72]	@ (8005b84 <HIF_UART_Init+0xe4>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]

            | (0 << 12)                         // STOP = 00b; 1 stop bit

            ;

  USART_CR3 = 0
 8005b40:	4b11      	ldr	r3, [pc, #68]	@ (8005b88 <HIF_UART_Init+0xe8>)
 8005b42:	2280      	movs	r2, #128	@ 0x80
 8005b44:	601a      	str	r2, [r3, #0]

  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC

  //

  _cbOnRx = cbOnRx;
 8005b46:	4a11      	ldr	r2, [pc, #68]	@ (8005b8c <HIF_UART_Init+0xec>)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6013      	str	r3, [r2, #0]

  _cbOnTx = cbOnTx;
 8005b4c:	4a10      	ldr	r2, [pc, #64]	@ (8005b90 <HIF_UART_Init+0xf0>)
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	6013      	str	r3, [r2, #0]

  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005b52:	2106      	movs	r1, #6
 8005b54:	2027      	movs	r0, #39	@ 0x27
 8005b56:	f7ff feb9 	bl	80058cc <__NVIC_SetPriority>

  NVIC_EnableIRQ(USART_IRQn);
 8005b5a:	2027      	movs	r0, #39	@ 0x27
 8005b5c:	f7ff fe98 	bl	8005890 <__NVIC_EnableIRQ>

}
 8005b60:	bf00      	nop
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	40023840 	.word	0x40023840
 8005b6c:	40023830 	.word	0x40023830
 8005b70:	40020c24 	.word	0x40020c24
 8005b74:	40020c00 	.word	0x40020c00
 8005b78:	0501bd00 	.word	0x0501bd00
 8005b7c:	4000480c 	.word	0x4000480c
 8005b80:	40004800 	.word	0x40004800
 8005b84:	40004804 	.word	0x40004804
 8005b88:	40004808 	.word	0x40004808
 8005b8c:	2000bae4 	.word	0x2000bae4
 8005b90:	2000bae8 	.word	0x2000bae8

08005b94 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005b9a:	4b26      	ldr	r3, [pc, #152]	@ (8005c34 <_DoInit+0xa0>)
 8005b9c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005b9e:	22a8      	movs	r2, #168	@ 0xa8
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	6838      	ldr	r0, [r7, #0]
 8005ba4:	f002 f97a 	bl	8007e9c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2203      	movs	r2, #3
 8005bac:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2203      	movs	r2, #3
 8005bb2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	4a20      	ldr	r2, [pc, #128]	@ (8005c38 <_DoInit+0xa4>)
 8005bb8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	4a1f      	ldr	r2, [pc, #124]	@ (8005c3c <_DoInit+0xa8>)
 8005bbe:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005bc6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	4a16      	ldr	r2, [pc, #88]	@ (8005c38 <_DoInit+0xa4>)
 8005bde:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	4a17      	ldr	r2, [pc, #92]	@ (8005c40 <_DoInit+0xac>)
 8005be4:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2210      	movs	r2, #16
 8005bea:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005bfe:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005c02:	2300      	movs	r3, #0
 8005c04:	607b      	str	r3, [r7, #4]
 8005c06:	e00c      	b.n	8005c22 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f1c3 030f 	rsb	r3, r3, #15
 8005c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8005c44 <_DoInit+0xb0>)
 8005c10:	5cd1      	ldrb	r1, [r2, r3]
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4413      	add	r3, r2
 8005c18:	460a      	mov	r2, r1
 8005c1a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b0f      	cmp	r3, #15
 8005c26:	d9ef      	bls.n	8005c08 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005c28:	f3bf 8f5f 	dmb	sy
}
 8005c2c:	bf00      	nop
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	2000baec 	.word	0x2000baec
 8005c38:	08008058 	.word	0x08008058
 8005c3c:	2000bb94 	.word	0x2000bb94
 8005c40:	2000bf94 	.word	0x2000bf94
 8005c44:	08008098 	.word	0x08008098

08005c48 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08a      	sub	sp, #40	@ 0x28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005c54:	2300      	movs	r3, #0
 8005c56:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d905      	bls.n	8005c78 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	3b01      	subs	r3, #1
 8005c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c76:	e007      	b.n	8005c88 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	69b9      	ldr	r1, [r7, #24]
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	1acb      	subs	r3, r1, r3
 8005c82:	4413      	add	r3, r2
 8005c84:	3b01      	subs	r3, #1
 8005c86:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c92:	4293      	cmp	r3, r2
 8005c94:	bf28      	it	cs
 8005c96:	4613      	movcs	r3, r2
 8005c98:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	bf28      	it	cs
 8005ca2:	4613      	movcs	r3, r2
 8005ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4413      	add	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005cb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb2:	68b9      	ldr	r1, [r7, #8]
 8005cb4:	6978      	ldr	r0, [r7, #20]
 8005cb6:	f002 f91d 	bl	8007ef4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005cba:	6a3a      	ldr	r2, [r7, #32]
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbe:	4413      	add	r3, r2
 8005cc0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc6:	4413      	add	r3, r2
 8005cc8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005cd2:	69fa      	ldr	r2, [r7, #28]
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd6:	4413      	add	r3, r2
 8005cd8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	69fa      	ldr	r2, [r7, #28]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d101      	bne.n	8005ce8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005ce8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	69fa      	ldr	r2, [r7, #28]
 8005cf0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1b2      	bne.n	8005c5e <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3728      	adds	r7, #40	@ 0x28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b088      	sub	sp, #32
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d911      	bls.n	8005d4a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	6938      	ldr	r0, [r7, #16]
 8005d36:	f002 f8dd 	bl	8007ef4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005d3a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	441a      	add	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005d48:	e01f      	b.n	8005d8a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	4413      	add	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	68b9      	ldr	r1, [r7, #8]
 8005d5c:	6938      	ldr	r0, [r7, #16]
 8005d5e:	f002 f8c9 	bl	8007ef4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	4413      	add	r3, r2
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6938      	ldr	r0, [r7, #16]
 8005d7c:	f002 f8ba 	bl	8007ef4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005d80:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	60da      	str	r2, [r3, #12]
}
 8005d8a:	bf00      	nop
 8005d8c:	3720      	adds	r7, #32
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005d92:	b480      	push	{r7}
 8005d94:	b087      	sub	sp, #28
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d808      	bhi.n	8005dc0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	1ad2      	subs	r2, r2, r3
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	4413      	add	r3, r2
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	617b      	str	r3, [r7, #20]
 8005dbe:	e004      	b.n	8005dca <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005dca:	697b      	ldr	r3, [r7, #20]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	371c      	adds	r7, #28
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08c      	sub	sp, #48	@ 0x30
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005de4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ee0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005de6:	623b      	str	r3, [r7, #32]
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b53      	cmp	r3, #83	@ 0x53
 8005df0:	d001      	beq.n	8005df6 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005df2:	f7ff fecf 	bl	8005b94 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	4413      	add	r3, r2
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	4a37      	ldr	r2, [pc, #220]	@ (8005ee0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005e04:	4413      	add	r3, r2
 8005e06:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005e1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d92b      	bls.n	8005e7c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4293      	cmp	r3, r2
 8005e34:	bf28      	it	cs
 8005e36:	4613      	movcs	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e40:	4413      	add	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	6939      	ldr	r1, [r7, #16]
 8005e48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e4a:	f002 f853 	bl	8007ef4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005e4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	4413      	add	r3, r2
 8005e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005e66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d101      	bne.n	8005e7c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	bf28      	it	cs
 8005e8c:	4613      	movcs	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d019      	beq.n	8005eca <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9c:	4413      	add	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	6939      	ldr	r1, [r7, #16]
 8005ea4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ea6:	f002 f825 	bl	8007ef4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005eaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	4413      	add	r3, r2
 8005eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005ec2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ed4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3730      	adds	r7, #48	@ 0x30
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	2000baec 	.word	0x2000baec

08005ee4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08c      	sub	sp, #48	@ 0x30
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005ef0:	4b3e      	ldr	r3, [pc, #248]	@ (8005fec <SEGGER_RTT_ReadNoLock+0x108>)
 8005ef2:	623b      	str	r3, [r7, #32]
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b53      	cmp	r3, #83	@ 0x53
 8005efc:	d001      	beq.n	8005f02 <SEGGER_RTT_ReadNoLock+0x1e>
 8005efe:	f7ff fe49 	bl	8005b94 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4613      	mov	r3, r2
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	4413      	add	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	3360      	adds	r3, #96	@ 0x60
 8005f0e:	4a37      	ldr	r2, [pc, #220]	@ (8005fec <SEGGER_RTT_ReadNoLock+0x108>)
 8005f10:	4413      	add	r3, r2
 8005f12:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005f24:	2300      	movs	r3, #0
 8005f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005f28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d92b      	bls.n	8005f88 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	bf28      	it	cs
 8005f42:	4613      	movcs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4c:	4413      	add	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	6939      	ldr	r1, [r7, #16]
 8005f54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f56:	f001 ffcd 	bl	8007ef4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005f5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	4413      	add	r3, r2
 8005f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	4413      	add	r3, r2
 8005f68:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005f72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	4413      	add	r3, r2
 8005f78:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d101      	bne.n	8005f88 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005f84:	2300      	movs	r3, #0
 8005f86:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4293      	cmp	r3, r2
 8005f96:	bf28      	it	cs
 8005f98:	4613      	movcs	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d019      	beq.n	8005fd6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa8:	4413      	add	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	6939      	ldr	r1, [r7, #16]
 8005fb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005fb2:	f001 ff9f 	bl	8007ef4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005fb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	4413      	add	r3, r2
 8005fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005fce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d002      	beq.n	8005fe2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fe0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3730      	adds	r7, #48	@ 0x30
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	2000baec 	.word	0x2000baec

08005ff0 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b088      	sub	sp, #32
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4613      	mov	r3, r2
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	4413      	add	r3, r2
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	3360      	adds	r3, #96	@ 0x60
 800600c:	4a1f      	ldr	r2, [pc, #124]	@ (800608c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800600e:	4413      	add	r3, r2
 8006010:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d029      	beq.n	800606e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800601a:	2b02      	cmp	r3, #2
 800601c:	d82e      	bhi.n	800607c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8006022:	2b01      	cmp	r3, #1
 8006024:	d013      	beq.n	800604e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8006026:	e029      	b.n	800607c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006028:	6978      	ldr	r0, [r7, #20]
 800602a:	f7ff feb2 	bl	8005d92 <_GetAvailWriteSpace>
 800602e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	429a      	cmp	r2, r3
 8006036:	d202      	bcs.n	800603e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8006038:	2300      	movs	r3, #0
 800603a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800603c:	e021      	b.n	8006082 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	69b9      	ldr	r1, [r7, #24]
 8006046:	6978      	ldr	r0, [r7, #20]
 8006048:	f7ff fe5b 	bl	8005d02 <_WriteNoCheck>
    break;
 800604c:	e019      	b.n	8006082 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800604e:	6978      	ldr	r0, [r7, #20]
 8006050:	f7ff fe9f 	bl	8005d92 <_GetAvailWriteSpace>
 8006054:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	4293      	cmp	r3, r2
 800605c:	bf28      	it	cs
 800605e:	4613      	movcs	r3, r2
 8006060:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	69b9      	ldr	r1, [r7, #24]
 8006066:	6978      	ldr	r0, [r7, #20]
 8006068:	f7ff fe4b 	bl	8005d02 <_WriteNoCheck>
    break;
 800606c:	e009      	b.n	8006082 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	69b9      	ldr	r1, [r7, #24]
 8006072:	6978      	ldr	r0, [r7, #20]
 8006074:	f7ff fde8 	bl	8005c48 <_WriteBlocking>
 8006078:	61f8      	str	r0, [r7, #28]
    break;
 800607a:	e002      	b.n	8006082 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 800607c:	2300      	movs	r3, #0
 800607e:	61fb      	str	r3, [r7, #28]
    break;
 8006080:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8006082:	69fb      	ldr	r3, [r7, #28]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3720      	adds	r7, #32
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	2000baec 	.word	0x2000baec

08006090 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006090:	b580      	push	{r7, lr}
 8006092:	b088      	sub	sp, #32
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800609c:	4b0e      	ldr	r3, [pc, #56]	@ (80060d8 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800609e:	61fb      	str	r3, [r7, #28]
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b53      	cmp	r3, #83	@ 0x53
 80060a8:	d001      	beq.n	80060ae <SEGGER_RTT_WriteDownBuffer+0x1e>
 80060aa:	f7ff fd73 	bl	8005b94 <_DoInit>
  SEGGER_RTT_LOCK();
 80060ae:	f3ef 8311 	mrs	r3, BASEPRI
 80060b2:	f04f 0120 	mov.w	r1, #32
 80060b6:	f381 8811 	msr	BASEPRI, r1
 80060ba:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f7ff ff95 	bl	8005ff0 <SEGGER_RTT_WriteDownBufferNoLock>
 80060c6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80060ce:	697b      	ldr	r3, [r7, #20]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3720      	adds	r7, #32
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	2000baec 	.word	0x2000baec

080060dc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80060dc:	b580      	push	{r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80060ea:	4b3d      	ldr	r3, [pc, #244]	@ (80061e0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80060ec:	61bb      	str	r3, [r7, #24]
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b53      	cmp	r3, #83	@ 0x53
 80060f6:	d001      	beq.n	80060fc <SEGGER_RTT_AllocUpBuffer+0x20>
 80060f8:	f7ff fd4c 	bl	8005b94 <_DoInit>
  SEGGER_RTT_LOCK();
 80060fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006100:	f04f 0120 	mov.w	r1, #32
 8006104:	f381 8811 	msr	BASEPRI, r1
 8006108:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800610a:	4b35      	ldr	r3, [pc, #212]	@ (80061e0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800610c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800610e:	2300      	movs	r3, #0
 8006110:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8006112:	6939      	ldr	r1, [r7, #16]
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	4613      	mov	r3, r2
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	4413      	add	r3, r2
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	440b      	add	r3, r1
 8006122:	3304      	adds	r3, #4
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d008      	beq.n	800613c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	3301      	adds	r3, #1
 800612e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	69fa      	ldr	r2, [r7, #28]
 8006136:	429a      	cmp	r2, r3
 8006138:	dbeb      	blt.n	8006112 <SEGGER_RTT_AllocUpBuffer+0x36>
 800613a:	e000      	b.n	800613e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800613c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	429a      	cmp	r2, r3
 8006146:	da3f      	bge.n	80061c8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8006148:	6939      	ldr	r1, [r7, #16]
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	4613      	mov	r3, r2
 8006150:	005b      	lsls	r3, r3, #1
 8006152:	4413      	add	r3, r2
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	440b      	add	r3, r1
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800615c:	6939      	ldr	r1, [r7, #16]
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	4613      	mov	r3, r2
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	4413      	add	r3, r2
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	440b      	add	r3, r1
 800616c:	3304      	adds	r3, #4
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8006172:	6939      	ldr	r1, [r7, #16]
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	4613      	mov	r3, r2
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	4413      	add	r3, r2
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	440b      	add	r3, r1
 8006180:	3320      	adds	r3, #32
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8006186:	6939      	ldr	r1, [r7, #16]
 8006188:	69fa      	ldr	r2, [r7, #28]
 800618a:	4613      	mov	r3, r2
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	4413      	add	r3, r2
 8006190:	00db      	lsls	r3, r3, #3
 8006192:	440b      	add	r3, r1
 8006194:	3328      	adds	r3, #40	@ 0x28
 8006196:	2200      	movs	r2, #0
 8006198:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800619a:	6939      	ldr	r1, [r7, #16]
 800619c:	69fa      	ldr	r2, [r7, #28]
 800619e:	4613      	mov	r3, r2
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	4413      	add	r3, r2
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	440b      	add	r3, r1
 80061a8:	3324      	adds	r3, #36	@ 0x24
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80061ae:	6939      	ldr	r1, [r7, #16]
 80061b0:	69fa      	ldr	r2, [r7, #28]
 80061b2:	4613      	mov	r3, r2
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	4413      	add	r3, r2
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	440b      	add	r3, r1
 80061bc:	332c      	adds	r3, #44	@ 0x2c
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80061c2:	f3bf 8f5f 	dmb	sy
 80061c6:	e002      	b.n	80061ce <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80061c8:	f04f 33ff 	mov.w	r3, #4294967295
 80061cc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80061d4:	69fb      	ldr	r3, [r7, #28]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3720      	adds	r7, #32
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	2000baec 	.word	0x2000baec

080061e4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08a      	sub	sp, #40	@ 0x28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80061f2:	4b21      	ldr	r3, [pc, #132]	@ (8006278 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80061f4:	623b      	str	r3, [r7, #32]
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b53      	cmp	r3, #83	@ 0x53
 80061fe:	d001      	beq.n	8006204 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006200:	f7ff fcc8 	bl	8005b94 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006204:	4b1c      	ldr	r3, [pc, #112]	@ (8006278 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8006206:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d82c      	bhi.n	8006268 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800620e:	f3ef 8311 	mrs	r3, BASEPRI
 8006212:	f04f 0120 	mov.w	r1, #32
 8006216:	f381 8811 	msr	BASEPRI, r1
 800621a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4613      	mov	r3, r2
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	4413      	add	r3, r2
 8006224:	00db      	lsls	r3, r3, #3
 8006226:	3360      	adds	r3, #96	@ 0x60
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	4413      	add	r3, r2
 800622c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00e      	beq.n	8006252 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2200      	movs	r2, #0
 800624a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	2200      	movs	r2, #0
 8006250:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006256:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006258:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006262:	2300      	movs	r3, #0
 8006264:	627b      	str	r3, [r7, #36]	@ 0x24
 8006266:	e002      	b.n	800626e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8006268:	f04f 33ff 	mov.w	r3, #4294967295
 800626c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006270:	4618      	mov	r0, r3
 8006272:	3728      	adds	r7, #40	@ 0x28
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	2000baec 	.word	0x2000baec

0800627c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	60fa      	str	r2, [r7, #12]
 8006292:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b80      	cmp	r3, #128	@ 0x80
 8006298:	d90a      	bls.n	80062b0 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800629a:	2380      	movs	r3, #128	@ 0x80
 800629c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800629e:	e007      	b.n	80062b0 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	1c53      	adds	r3, r2, #1
 80062a4:	60bb      	str	r3, [r7, #8]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	1c59      	adds	r1, r3, #1
 80062aa:	60f9      	str	r1, [r7, #12]
 80062ac:	7812      	ldrb	r2, [r2, #0]
 80062ae:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	1e5a      	subs	r2, r3, #1
 80062b4:	607a      	str	r2, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <_EncodeStr+0x46>
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1ee      	bne.n	80062a0 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80062ce:	68fb      	ldr	r3, [r7, #12]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3307      	adds	r3, #7
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80062fa:	4b34      	ldr	r3, [pc, #208]	@ (80063cc <_HandleIncomingPacket+0xd8>)
 80062fc:	7e1b      	ldrb	r3, [r3, #24]
 80062fe:	4618      	mov	r0, r3
 8006300:	1cfb      	adds	r3, r7, #3
 8006302:	2201      	movs	r2, #1
 8006304:	4619      	mov	r1, r3
 8006306:	f7ff fded 	bl	8005ee4 <SEGGER_RTT_ReadNoLock>
 800630a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d057      	beq.n	80063c2 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8006312:	78fb      	ldrb	r3, [r7, #3]
 8006314:	2b80      	cmp	r3, #128	@ 0x80
 8006316:	d031      	beq.n	800637c <_HandleIncomingPacket+0x88>
 8006318:	2b80      	cmp	r3, #128	@ 0x80
 800631a:	dc40      	bgt.n	800639e <_HandleIncomingPacket+0xaa>
 800631c:	2b07      	cmp	r3, #7
 800631e:	dc15      	bgt.n	800634c <_HandleIncomingPacket+0x58>
 8006320:	2b00      	cmp	r3, #0
 8006322:	dd3c      	ble.n	800639e <_HandleIncomingPacket+0xaa>
 8006324:	3b01      	subs	r3, #1
 8006326:	2b06      	cmp	r3, #6
 8006328:	d839      	bhi.n	800639e <_HandleIncomingPacket+0xaa>
 800632a:	a201      	add	r2, pc, #4	@ (adr r2, 8006330 <_HandleIncomingPacket+0x3c>)
 800632c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006330:	08006353 	.word	0x08006353
 8006334:	08006359 	.word	0x08006359
 8006338:	0800635f 	.word	0x0800635f
 800633c:	08006365 	.word	0x08006365
 8006340:	0800636b 	.word	0x0800636b
 8006344:	08006371 	.word	0x08006371
 8006348:	08006377 	.word	0x08006377
 800634c:	2b7f      	cmp	r3, #127	@ 0x7f
 800634e:	d033      	beq.n	80063b8 <_HandleIncomingPacket+0xc4>
 8006350:	e025      	b.n	800639e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006352:	f000 fee7 	bl	8007124 <SEGGER_SYSVIEW_Start>
      break;
 8006356:	e034      	b.n	80063c2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006358:	f000 ff9e 	bl	8007298 <SEGGER_SYSVIEW_Stop>
      break;
 800635c:	e031      	b.n	80063c2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800635e:	f001 f977 	bl	8007650 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006362:	e02e      	b.n	80063c2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006364:	f001 f93c 	bl	80075e0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006368:	e02b      	b.n	80063c2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800636a:	f000 ffbb 	bl	80072e4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800636e:	e028      	b.n	80063c2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006370:	f001 fca8 	bl	8007cc4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006374:	e025      	b.n	80063c2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006376:	f001 fc87 	bl	8007c88 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800637a:	e022      	b.n	80063c2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800637c:	4b13      	ldr	r3, [pc, #76]	@ (80063cc <_HandleIncomingPacket+0xd8>)
 800637e:	7e1b      	ldrb	r3, [r3, #24]
 8006380:	4618      	mov	r0, r3
 8006382:	1cfb      	adds	r3, r7, #3
 8006384:	2201      	movs	r2, #1
 8006386:	4619      	mov	r1, r3
 8006388:	f7ff fdac 	bl	8005ee4 <SEGGER_RTT_ReadNoLock>
 800638c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d013      	beq.n	80063bc <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	4618      	mov	r0, r3
 8006398:	f001 fbec 	bl	8007b74 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800639c:	e00e      	b.n	80063bc <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	b25b      	sxtb	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	da0c      	bge.n	80063c0 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80063a6:	4b09      	ldr	r3, [pc, #36]	@ (80063cc <_HandleIncomingPacket+0xd8>)
 80063a8:	7e1b      	ldrb	r3, [r3, #24]
 80063aa:	4618      	mov	r0, r3
 80063ac:	1cfb      	adds	r3, r7, #3
 80063ae:	2201      	movs	r2, #1
 80063b0:	4619      	mov	r1, r3
 80063b2:	f7ff fd97 	bl	8005ee4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80063b6:	e003      	b.n	80063c0 <_HandleIncomingPacket+0xcc>
      break;
 80063b8:	bf00      	nop
 80063ba:	e002      	b.n	80063c2 <_HandleIncomingPacket+0xce>
      break;
 80063bc:	bf00      	nop
 80063be:	e000      	b.n	80063c2 <_HandleIncomingPacket+0xce>
      break;
 80063c0:	bf00      	nop
    }
  }
}
 80063c2:	bf00      	nop
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	2000c3ac 	.word	0x2000c3ac

080063d0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08c      	sub	sp, #48	@ 0x30
 80063d4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80063d6:	2301      	movs	r3, #1
 80063d8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80063da:	1d3b      	adds	r3, r7, #4
 80063dc:	3301      	adds	r3, #1
 80063de:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063e4:	4b31      	ldr	r3, [pc, #196]	@ (80064ac <_TrySendOverflowPacket+0xdc>)
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063ea:	e00b      	b.n	8006404 <_TrySendOverflowPacket+0x34>
 80063ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f2:	1c59      	adds	r1, r3, #1
 80063f4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80063f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	701a      	strb	r2, [r3, #0]
 80063fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006400:	09db      	lsrs	r3, r3, #7
 8006402:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006406:	2b7f      	cmp	r3, #127	@ 0x7f
 8006408:	d8f0      	bhi.n	80063ec <_TrySendOverflowPacket+0x1c>
 800640a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006410:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006418:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800641a:	4b25      	ldr	r3, [pc, #148]	@ (80064b0 <_TrySendOverflowPacket+0xe0>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006420:	4b22      	ldr	r3, [pc, #136]	@ (80064ac <_TrySendOverflowPacket+0xdc>)
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	627b      	str	r3, [r7, #36]	@ 0x24
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	623b      	str	r3, [r7, #32]
 8006432:	e00b      	b.n	800644c <_TrySendOverflowPacket+0x7c>
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	b2da      	uxtb	r2, r3
 8006438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643a:	1c59      	adds	r1, r3, #1
 800643c:	6279      	str	r1, [r7, #36]	@ 0x24
 800643e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006442:	b2d2      	uxtb	r2, r2
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	09db      	lsrs	r3, r3, #7
 800644a:	623b      	str	r3, [r7, #32]
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006450:	d8f0      	bhi.n	8006434 <_TrySendOverflowPacket+0x64>
 8006452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	627a      	str	r2, [r7, #36]	@ 0x24
 8006458:	6a3a      	ldr	r2, [r7, #32]
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006460:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8006462:	4b12      	ldr	r3, [pc, #72]	@ (80064ac <_TrySendOverflowPacket+0xdc>)
 8006464:	785b      	ldrb	r3, [r3, #1]
 8006466:	4618      	mov	r0, r3
 8006468:	1d3b      	adds	r3, r7, #4
 800646a:	69fa      	ldr	r2, [r7, #28]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	461a      	mov	r2, r3
 8006470:	1d3b      	adds	r3, r7, #4
 8006472:	4619      	mov	r1, r3
 8006474:	f7f9 fee4 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006478:	4603      	mov	r3, r0
 800647a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d009      	beq.n	8006496 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006482:	4a0a      	ldr	r2, [pc, #40]	@ (80064ac <_TrySendOverflowPacket+0xdc>)
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006488:	4b08      	ldr	r3, [pc, #32]	@ (80064ac <_TrySendOverflowPacket+0xdc>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	3b01      	subs	r3, #1
 800648e:	b2da      	uxtb	r2, r3
 8006490:	4b06      	ldr	r3, [pc, #24]	@ (80064ac <_TrySendOverflowPacket+0xdc>)
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	e004      	b.n	80064a0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006496:	4b05      	ldr	r3, [pc, #20]	@ (80064ac <_TrySendOverflowPacket+0xdc>)
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	3301      	adds	r3, #1
 800649c:	4a03      	ldr	r2, [pc, #12]	@ (80064ac <_TrySendOverflowPacket+0xdc>)
 800649e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80064a0:	693b      	ldr	r3, [r7, #16]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3730      	adds	r7, #48	@ 0x30
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	2000c3ac 	.word	0x2000c3ac
 80064b0:	e0001004 	.word	0xe0001004

080064b4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b08a      	sub	sp, #40	@ 0x28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80064c0:	4b98      	ldr	r3, [pc, #608]	@ (8006724 <_SendPacket+0x270>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d010      	beq.n	80064ea <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80064c8:	4b96      	ldr	r3, [pc, #600]	@ (8006724 <_SendPacket+0x270>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 812d 	beq.w	800672c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80064d2:	4b94      	ldr	r3, [pc, #592]	@ (8006724 <_SendPacket+0x270>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d109      	bne.n	80064ee <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80064da:	f7ff ff79 	bl	80063d0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80064de:	4b91      	ldr	r3, [pc, #580]	@ (8006724 <_SendPacket+0x270>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	f040 8124 	bne.w	8006730 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80064e8:	e001      	b.n	80064ee <_SendPacket+0x3a>
    goto Send;
 80064ea:	bf00      	nop
 80064ec:	e000      	b.n	80064f0 <_SendPacket+0x3c>
Send:
 80064ee:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b1f      	cmp	r3, #31
 80064f4:	d809      	bhi.n	800650a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80064f6:	4b8b      	ldr	r3, [pc, #556]	@ (8006724 <_SendPacket+0x270>)
 80064f8:	69da      	ldr	r2, [r3, #28]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b00      	cmp	r3, #0
 8006506:	f040 8115 	bne.w	8006734 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b17      	cmp	r3, #23
 800650e:	d807      	bhi.n	8006520 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	3b01      	subs	r3, #1
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	b2da      	uxtb	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	e0c4      	b.n	80066aa <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	2b7f      	cmp	r3, #127	@ 0x7f
 800652c:	d912      	bls.n	8006554 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	09da      	lsrs	r2, r3, #7
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3b01      	subs	r3, #1
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	b2db      	uxtb	r3, r3
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	3a01      	subs	r2, #1
 8006546:	60fa      	str	r2, [r7, #12]
 8006548:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800654c:	b2da      	uxtb	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	e006      	b.n	8006562 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3b01      	subs	r3, #1
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	b2da      	uxtb	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b7e      	cmp	r3, #126	@ 0x7e
 8006566:	d807      	bhi.n	8006578 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	3b01      	subs	r3, #1
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	b2da      	uxtb	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	701a      	strb	r2, [r3, #0]
 8006576:	e098      	b.n	80066aa <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800657e:	d212      	bcs.n	80065a6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	09da      	lsrs	r2, r3, #7
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	3b01      	subs	r3, #1
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	3a01      	subs	r2, #1
 8006598:	60fa      	str	r2, [r7, #12]
 800659a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	e081      	b.n	80066aa <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065ac:	d21d      	bcs.n	80065ea <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	0b9a      	lsrs	r2, r3, #14
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3b01      	subs	r3, #1
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	b2d2      	uxtb	r2, r2
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	09db      	lsrs	r3, r3, #7
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	3a01      	subs	r2, #1
 80065c8:	60fa      	str	r2, [r7, #12]
 80065ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	3a01      	subs	r2, #1
 80065dc:	60fa      	str	r2, [r7, #12]
 80065de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	701a      	strb	r2, [r3, #0]
 80065e8:	e05f      	b.n	80066aa <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065f0:	d228      	bcs.n	8006644 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	0d5a      	lsrs	r2, r3, #21
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3b01      	subs	r3, #1
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	b2d2      	uxtb	r2, r2
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	0b9b      	lsrs	r3, r3, #14
 8006606:	b2db      	uxtb	r3, r3
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	3a01      	subs	r2, #1
 800660c:	60fa      	str	r2, [r7, #12]
 800660e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006612:	b2da      	uxtb	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	09db      	lsrs	r3, r3, #7
 800661c:	b2db      	uxtb	r3, r3
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	3a01      	subs	r2, #1
 8006622:	60fa      	str	r2, [r7, #12]
 8006624:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006628:	b2da      	uxtb	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	b2db      	uxtb	r3, r3
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	3a01      	subs	r2, #1
 8006636:	60fa      	str	r2, [r7, #12]
 8006638:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800663c:	b2da      	uxtb	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	701a      	strb	r2, [r3, #0]
 8006642:	e032      	b.n	80066aa <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	0f1a      	lsrs	r2, r3, #28
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	3b01      	subs	r3, #1
 800664c:	60fb      	str	r3, [r7, #12]
 800664e:	b2d2      	uxtb	r2, r2
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	0d5b      	lsrs	r3, r3, #21
 8006658:	b2db      	uxtb	r3, r3
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	3a01      	subs	r2, #1
 800665e:	60fa      	str	r2, [r7, #12]
 8006660:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006664:	b2da      	uxtb	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	0b9b      	lsrs	r3, r3, #14
 800666e:	b2db      	uxtb	r3, r3
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	3a01      	subs	r2, #1
 8006674:	60fa      	str	r2, [r7, #12]
 8006676:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800667a:	b2da      	uxtb	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	09db      	lsrs	r3, r3, #7
 8006684:	b2db      	uxtb	r3, r3
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	3a01      	subs	r2, #1
 800668a:	60fa      	str	r2, [r7, #12]
 800668c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006690:	b2da      	uxtb	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	b2db      	uxtb	r3, r3
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	3a01      	subs	r2, #1
 800669e:	60fa      	str	r2, [r7, #12]
 80066a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80066aa:	4b1f      	ldr	r3, [pc, #124]	@ (8006728 <_SendPacket+0x274>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80066b0:	4b1c      	ldr	r3, [pc, #112]	@ (8006724 <_SendPacket+0x270>)
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	623b      	str	r3, [r7, #32]
 80066c2:	e00b      	b.n	80066dc <_SendPacket+0x228>
 80066c4:	6a3b      	ldr	r3, [r7, #32]
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ca:	1c59      	adds	r1, r3, #1
 80066cc:	6279      	str	r1, [r7, #36]	@ 0x24
 80066ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066d2:	b2d2      	uxtb	r2, r2
 80066d4:	701a      	strb	r2, [r3, #0]
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	09db      	lsrs	r3, r3, #7
 80066da:	623b      	str	r3, [r7, #32]
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	2b7f      	cmp	r3, #127	@ 0x7f
 80066e0:	d8f0      	bhi.n	80066c4 <_SendPacket+0x210>
 80066e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	627a      	str	r2, [r7, #36]	@ 0x24
 80066e8:	6a3a      	ldr	r2, [r7, #32]
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80066f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006724 <_SendPacket+0x270>)
 80066f4:	785b      	ldrb	r3, [r3, #1]
 80066f6:	4618      	mov	r0, r3
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	461a      	mov	r2, r3
 8006700:	68f9      	ldr	r1, [r7, #12]
 8006702:	f7f9 fd9d 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006706:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800670e:	4a05      	ldr	r2, [pc, #20]	@ (8006724 <_SendPacket+0x270>)
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	60d3      	str	r3, [r2, #12]
 8006714:	e00f      	b.n	8006736 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006716:	4b03      	ldr	r3, [pc, #12]	@ (8006724 <_SendPacket+0x270>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	3301      	adds	r3, #1
 800671c:	b2da      	uxtb	r2, r3
 800671e:	4b01      	ldr	r3, [pc, #4]	@ (8006724 <_SendPacket+0x270>)
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	e008      	b.n	8006736 <_SendPacket+0x282>
 8006724:	2000c3ac 	.word	0x2000c3ac
 8006728:	e0001004 	.word	0xe0001004
    goto SendDone;
 800672c:	bf00      	nop
 800672e:	e002      	b.n	8006736 <_SendPacket+0x282>
      goto SendDone;
 8006730:	bf00      	nop
 8006732:	e000      	b.n	8006736 <_SendPacket+0x282>
      goto SendDone;
 8006734:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006736:	4b14      	ldr	r3, [pc, #80]	@ (8006788 <_SendPacket+0x2d4>)
 8006738:	7e1b      	ldrb	r3, [r3, #24]
 800673a:	4619      	mov	r1, r3
 800673c:	4a13      	ldr	r2, [pc, #76]	@ (800678c <_SendPacket+0x2d8>)
 800673e:	460b      	mov	r3, r1
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	440b      	add	r3, r1
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	4413      	add	r3, r2
 8006748:	336c      	adds	r3, #108	@ 0x6c
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	4b0e      	ldr	r3, [pc, #56]	@ (8006788 <_SendPacket+0x2d4>)
 800674e:	7e1b      	ldrb	r3, [r3, #24]
 8006750:	4618      	mov	r0, r3
 8006752:	490e      	ldr	r1, [pc, #56]	@ (800678c <_SendPacket+0x2d8>)
 8006754:	4603      	mov	r3, r0
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	4403      	add	r3, r0
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	440b      	add	r3, r1
 800675e:	3370      	adds	r3, #112	@ 0x70
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	429a      	cmp	r2, r3
 8006764:	d00b      	beq.n	800677e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006766:	4b08      	ldr	r3, [pc, #32]	@ (8006788 <_SendPacket+0x2d4>)
 8006768:	789b      	ldrb	r3, [r3, #2]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d107      	bne.n	800677e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800676e:	4b06      	ldr	r3, [pc, #24]	@ (8006788 <_SendPacket+0x2d4>)
 8006770:	2201      	movs	r2, #1
 8006772:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006774:	f7ff fdbe 	bl	80062f4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006778:	4b03      	ldr	r3, [pc, #12]	@ (8006788 <_SendPacket+0x2d4>)
 800677a:	2200      	movs	r2, #0
 800677c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800677e:	bf00      	nop
 8006780:	3728      	adds	r7, #40	@ 0x28
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	2000c3ac 	.word	0x2000c3ac
 800678c:	2000baec 	.word	0x2000baec

08006790 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006790:	b580      	push	{r7, lr}
 8006792:	b08a      	sub	sp, #40	@ 0x28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	3301      	adds	r3, #1
 80067a6:	2b80      	cmp	r3, #128	@ 0x80
 80067a8:	d80a      	bhi.n	80067c0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	1c59      	adds	r1, r3, #1
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6051      	str	r1, [r2, #4]
 80067b4:	78fa      	ldrb	r2, [r7, #3]
 80067b6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	2b80      	cmp	r3, #128	@ 0x80
 80067c6:	d15a      	bne.n	800687e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	b2d2      	uxtb	r2, r2
 80067d2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	623b      	str	r3, [r7, #32]
 80067e8:	e00b      	b.n	8006802 <_StoreChar+0x72>
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f0:	1c59      	adds	r1, r3, #1
 80067f2:	6279      	str	r1, [r7, #36]	@ 0x24
 80067f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	09db      	lsrs	r3, r3, #7
 8006800:	623b      	str	r3, [r7, #32]
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	2b7f      	cmp	r3, #127	@ 0x7f
 8006806:	d8f0      	bhi.n	80067ea <_StoreChar+0x5a>
 8006808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	627a      	str	r2, [r7, #36]	@ 0x24
 800680e:	6a3a      	ldr	r2, [r7, #32]
 8006810:	b2d2      	uxtb	r2, r2
 8006812:	701a      	strb	r2, [r3, #0]
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	61fb      	str	r3, [r7, #28]
 800681c:	2300      	movs	r3, #0
 800681e:	61bb      	str	r3, [r7, #24]
 8006820:	e00b      	b.n	800683a <_StoreChar+0xaa>
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	b2da      	uxtb	r2, r3
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	1c59      	adds	r1, r3, #1
 800682a:	61f9      	str	r1, [r7, #28]
 800682c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	09db      	lsrs	r3, r3, #7
 8006838:	61bb      	str	r3, [r7, #24]
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	2b7f      	cmp	r3, #127	@ 0x7f
 800683e:	d8f0      	bhi.n	8006822 <_StoreChar+0x92>
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	61fa      	str	r2, [r7, #28]
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	b2d2      	uxtb	r2, r2
 800684a:	701a      	strb	r2, [r3, #0]
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	221a      	movs	r2, #26
 8006856:	6939      	ldr	r1, [r7, #16]
 8006858:	4618      	mov	r0, r3
 800685a:	f7ff fe2b 	bl	80064b4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4618      	mov	r0, r3
 8006864:	f7ff fd3a 	bl	80062dc <_PreparePacket>
 8006868:	4602      	mov	r2, r0
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	611a      	str	r2, [r3, #16]
  }
}
 800687e:	bf00      	nop
 8006880:	3728      	adds	r7, #40	@ 0x28
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006888:	b580      	push	{r7, lr}
 800688a:	b08a      	sub	sp, #40	@ 0x28
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
 8006894:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800689a:	2301      	movs	r3, #1
 800689c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800689e:	2301      	movs	r3, #1
 80068a0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80068a2:	e007      	b.n	80068b4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80068a4:	6a3a      	ldr	r2, [r7, #32]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ac:	623b      	str	r3, [r7, #32]
    Width++;
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	3301      	adds	r3, #1
 80068b2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80068b4:	6a3a      	ldr	r2, [r7, #32]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d2f3      	bcs.n	80068a4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d901      	bls.n	80068c8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80068c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d000      	beq.n	80068d4 <_PrintUnsigned+0x4c>
 80068d2:	e01f      	b.n	8006914 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80068d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d01c      	beq.n	8006914 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80068da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d005      	beq.n	80068f0 <_PrintUnsigned+0x68>
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d102      	bne.n	80068f0 <_PrintUnsigned+0x68>
        c = '0';
 80068ea:	2330      	movs	r3, #48	@ 0x30
 80068ec:	76fb      	strb	r3, [r7, #27]
 80068ee:	e001      	b.n	80068f4 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 80068f0:	2320      	movs	r3, #32
 80068f2:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80068f4:	e007      	b.n	8006906 <_PrintUnsigned+0x7e>
        FieldWidth--;
 80068f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f8:	3b01      	subs	r3, #1
 80068fa:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 80068fc:	7efb      	ldrb	r3, [r7, #27]
 80068fe:	4619      	mov	r1, r3
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f7ff ff45 	bl	8006790 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <_PrintUnsigned+0x8c>
 800690c:	69fa      	ldr	r2, [r7, #28]
 800690e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006910:	429a      	cmp	r2, r3
 8006912:	d3f0      	bcc.n	80068f6 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d903      	bls.n	8006922 <_PrintUnsigned+0x9a>
      NumDigits--;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	3b01      	subs	r3, #1
 800691e:	603b      	str	r3, [r7, #0]
 8006920:	e009      	b.n	8006936 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006926:	fbb2 f3f3 	udiv	r3, r2, r3
 800692a:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	429a      	cmp	r2, r3
 8006932:	d200      	bcs.n	8006936 <_PrintUnsigned+0xae>
        break;
 8006934:	e005      	b.n	8006942 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8006936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	fb02 f303 	mul.w	r3, r2, r3
 800693e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006940:	e7e8      	b.n	8006914 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006946:	fbb2 f3f3 	udiv	r3, r2, r3
 800694a:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006950:	fb02 f303 	mul.w	r3, r2, r3
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800695a:	4a15      	ldr	r2, [pc, #84]	@ (80069b0 <_PrintUnsigned+0x128>)
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	4413      	add	r3, r2
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	4619      	mov	r1, r3
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f7ff ff13 	bl	8006790 <_StoreChar>
    Digit /= Base;
 800696a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006972:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8006974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e3      	bne.n	8006942 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800697a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b00      	cmp	r3, #0
 8006982:	d011      	beq.n	80069a8 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8006984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00e      	beq.n	80069a8 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800698a:	e006      	b.n	800699a <_PrintUnsigned+0x112>
        FieldWidth--;
 800698c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698e:	3b01      	subs	r3, #1
 8006990:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8006992:	2120      	movs	r1, #32
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f7ff fefb 	bl	8006790 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800699a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <_PrintUnsigned+0x120>
 80069a0:	69fa      	ldr	r2, [r7, #28]
 80069a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d3f1      	bcc.n	800698c <_PrintUnsigned+0x104>
      }
    }
  }
}
 80069a8:	bf00      	nop
 80069aa:	3728      	adds	r7, #40	@ 0x28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	080080b8 	.word	0x080080b8

080069b4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af02      	add	r7, sp, #8
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
 80069c0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	bfb8      	it	lt
 80069c8:	425b      	neglt	r3, r3
 80069ca:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80069cc:	2301      	movs	r3, #1
 80069ce:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80069d0:	e007      	b.n	80069e2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80069da:	613b      	str	r3, [r7, #16]
    Width++;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	3301      	adds	r3, #1
 80069e0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	daf3      	bge.n	80069d2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d901      	bls.n	80069f6 <_PrintInt+0x42>
    Width = NumDigits;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00a      	beq.n	8006a12 <_PrintInt+0x5e>
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	db04      	blt.n	8006a0c <_PrintInt+0x58>
 8006a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <_PrintInt+0x5e>
    FieldWidth--;
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a14:	f003 0302 	and.w	r3, r3, #2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <_PrintInt+0x6e>
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d016      	beq.n	8006a50 <_PrintInt+0x9c>
 8006a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d111      	bne.n	8006a50 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00e      	beq.n	8006a50 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006a32:	e006      	b.n	8006a42 <_PrintInt+0x8e>
        FieldWidth--;
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006a3a:	2120      	movs	r1, #32
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f7ff fea7 	bl	8006790 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <_PrintInt+0x9c>
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d3f1      	bcc.n	8006a34 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	da07      	bge.n	8006a66 <_PrintInt+0xb2>
    v = -v;
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	425b      	negs	r3, r3
 8006a5a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006a5c:	212d      	movs	r1, #45	@ 0x2d
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f7ff fe96 	bl	8006790 <_StoreChar>
 8006a64:	e008      	b.n	8006a78 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	f003 0304 	and.w	r3, r3, #4
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006a70:	212b      	movs	r1, #43	@ 0x2b
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f7ff fe8c 	bl	8006790 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d019      	beq.n	8006ab6 <_PrintInt+0x102>
 8006a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d114      	bne.n	8006ab6 <_PrintInt+0x102>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d111      	bne.n	8006ab6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00e      	beq.n	8006ab6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006a98:	e006      	b.n	8006aa8 <_PrintInt+0xf4>
        FieldWidth--;
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006aa0:	2130      	movs	r1, #48	@ 0x30
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f7ff fe74 	bl	8006790 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <_PrintInt+0x102>
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d3f1      	bcc.n	8006a9a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006ab6:	68b9      	ldr	r1, [r7, #8]
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aba:	9301      	str	r3, [sp, #4]
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f7ff fedf 	bl	8006888 <_PrintUnsigned>
}
 8006aca:	bf00      	nop
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b098      	sub	sp, #96	@ 0x60
 8006ad8:	af02      	add	r7, sp, #8
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ae0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ae4:	f04f 0120 	mov.w	r1, #32
 8006ae8:	f381 8811 	msr	BASEPRI, r1
 8006aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006aee:	48b7      	ldr	r0, [pc, #732]	@ (8006dcc <_VPrintTarget+0x2f8>)
 8006af0:	f7ff fbf4 	bl	80062dc <_PreparePacket>
 8006af4:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006af6:	4bb5      	ldr	r3, [pc, #724]	@ (8006dcc <_VPrintTarget+0x2f8>)
 8006af8:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8006afa:	2300      	movs	r3, #0
 8006afc:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b00:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	3301      	adds	r3, #1
 8006b06:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	3301      	adds	r3, #1
 8006b18:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006b1a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 81a8 	beq.w	8006e74 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8006b24:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b28:	2b25      	cmp	r3, #37	@ 0x25
 8006b2a:	f040 8195 	bne.w	8006e58 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8006b32:	2301      	movs	r3, #1
 8006b34:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8006b3e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b42:	3b23      	subs	r3, #35	@ 0x23
 8006b44:	2b0d      	cmp	r3, #13
 8006b46:	d83f      	bhi.n	8006bc8 <_VPrintTarget+0xf4>
 8006b48:	a201      	add	r2, pc, #4	@ (adr r2, 8006b50 <_VPrintTarget+0x7c>)
 8006b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4e:	bf00      	nop
 8006b50:	08006bb9 	.word	0x08006bb9
 8006b54:	08006bc9 	.word	0x08006bc9
 8006b58:	08006bc9 	.word	0x08006bc9
 8006b5c:	08006bc9 	.word	0x08006bc9
 8006b60:	08006bc9 	.word	0x08006bc9
 8006b64:	08006bc9 	.word	0x08006bc9
 8006b68:	08006bc9 	.word	0x08006bc9
 8006b6c:	08006bc9 	.word	0x08006bc9
 8006b70:	08006ba9 	.word	0x08006ba9
 8006b74:	08006bc9 	.word	0x08006bc9
 8006b78:	08006b89 	.word	0x08006b89
 8006b7c:	08006bc9 	.word	0x08006bc9
 8006b80:	08006bc9 	.word	0x08006bc9
 8006b84:	08006b99 	.word	0x08006b99
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006b88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b8a:	f043 0301 	orr.w	r3, r3, #1
 8006b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3301      	adds	r3, #1
 8006b94:	60fb      	str	r3, [r7, #12]
 8006b96:	e01a      	b.n	8006bce <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006b98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b9a:	f043 0302 	orr.w	r3, r3, #2
 8006b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	e012      	b.n	8006bce <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006ba8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006baa:	f043 0304 	orr.w	r3, r3, #4
 8006bae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	60fb      	str	r3, [r7, #12]
 8006bb6:	e00a      	b.n	8006bce <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006bb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bba:	f043 0308 	orr.w	r3, r3, #8
 8006bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	60fb      	str	r3, [r7, #12]
 8006bc6:	e002      	b.n	8006bce <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bcc:	bf00      	nop
        }
      } while (v);
 8006bce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1b0      	bne.n	8006b36 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8006be0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006be4:	2b2f      	cmp	r3, #47	@ 0x2f
 8006be6:	d912      	bls.n	8006c0e <_VPrintTarget+0x13a>
 8006be8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006bec:	2b39      	cmp	r3, #57	@ 0x39
 8006bee:	d80e      	bhi.n	8006c0e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006bf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	461a      	mov	r2, r3
 8006c02:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c06:	4413      	add	r3, r2
 8006c08:	3b30      	subs	r3, #48	@ 0x30
 8006c0a:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8006c0c:	e7e4      	b.n	8006bd8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8006c1a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c20:	d11d      	bne.n	8006c5e <_VPrintTarget+0x18a>
        sFormat++;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	3301      	adds	r3, #1
 8006c26:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8006c30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c34:	2b2f      	cmp	r3, #47	@ 0x2f
 8006c36:	d912      	bls.n	8006c5e <_VPrintTarget+0x18a>
 8006c38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c3c:	2b39      	cmp	r3, #57	@ 0x39
 8006c3e:	d80e      	bhi.n	8006c5e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	3301      	adds	r3, #1
 8006c44:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006c46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c48:	4613      	mov	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	461a      	mov	r2, r3
 8006c52:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c56:	4413      	add	r3, r2
 8006c58:	3b30      	subs	r3, #48	@ 0x30
 8006c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8006c5c:	e7e4      	b.n	8006c28 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006c66:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c6a:	2b6c      	cmp	r3, #108	@ 0x6c
 8006c6c:	d003      	beq.n	8006c76 <_VPrintTarget+0x1a2>
 8006c6e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c72:	2b68      	cmp	r3, #104	@ 0x68
 8006c74:	d107      	bne.n	8006c86 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3301      	adds	r3, #1
 8006c82:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006c84:	e7ef      	b.n	8006c66 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006c86:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c8a:	2b25      	cmp	r3, #37	@ 0x25
 8006c8c:	f000 80d8 	beq.w	8006e40 <_VPrintTarget+0x36c>
 8006c90:	2b25      	cmp	r3, #37	@ 0x25
 8006c92:	f2c0 80dc 	blt.w	8006e4e <_VPrintTarget+0x37a>
 8006c96:	2b78      	cmp	r3, #120	@ 0x78
 8006c98:	f300 80d9 	bgt.w	8006e4e <_VPrintTarget+0x37a>
 8006c9c:	2b58      	cmp	r3, #88	@ 0x58
 8006c9e:	f2c0 80d6 	blt.w	8006e4e <_VPrintTarget+0x37a>
 8006ca2:	3b58      	subs	r3, #88	@ 0x58
 8006ca4:	2b20      	cmp	r3, #32
 8006ca6:	f200 80d2 	bhi.w	8006e4e <_VPrintTarget+0x37a>
 8006caa:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb0 <_VPrintTarget+0x1dc>)
 8006cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb0:	08006da7 	.word	0x08006da7
 8006cb4:	08006e4f 	.word	0x08006e4f
 8006cb8:	08006e4f 	.word	0x08006e4f
 8006cbc:	08006e4f 	.word	0x08006e4f
 8006cc0:	08006e4f 	.word	0x08006e4f
 8006cc4:	08006e4f 	.word	0x08006e4f
 8006cc8:	08006e4f 	.word	0x08006e4f
 8006ccc:	08006e4f 	.word	0x08006e4f
 8006cd0:	08006e4f 	.word	0x08006e4f
 8006cd4:	08006e4f 	.word	0x08006e4f
 8006cd8:	08006e4f 	.word	0x08006e4f
 8006cdc:	08006d35 	.word	0x08006d35
 8006ce0:	08006d5b 	.word	0x08006d5b
 8006ce4:	08006e4f 	.word	0x08006e4f
 8006ce8:	08006e4f 	.word	0x08006e4f
 8006cec:	08006e4f 	.word	0x08006e4f
 8006cf0:	08006e4f 	.word	0x08006e4f
 8006cf4:	08006e4f 	.word	0x08006e4f
 8006cf8:	08006e4f 	.word	0x08006e4f
 8006cfc:	08006e4f 	.word	0x08006e4f
 8006d00:	08006e4f 	.word	0x08006e4f
 8006d04:	08006e4f 	.word	0x08006e4f
 8006d08:	08006e4f 	.word	0x08006e4f
 8006d0c:	08006e4f 	.word	0x08006e4f
 8006d10:	08006e1b 	.word	0x08006e1b
 8006d14:	08006e4f 	.word	0x08006e4f
 8006d18:	08006e4f 	.word	0x08006e4f
 8006d1c:	08006dd1 	.word	0x08006dd1
 8006d20:	08006e4f 	.word	0x08006e4f
 8006d24:	08006d81 	.word	0x08006d81
 8006d28:	08006e4f 	.word	0x08006e4f
 8006d2c:	08006e4f 	.word	0x08006e4f
 8006d30:	08006da7 	.word	0x08006da7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	1d19      	adds	r1, r3, #4
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	6011      	str	r1, [r2, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8006d42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8006d48:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006d4c:	f107 0310 	add.w	r3, r7, #16
 8006d50:	4611      	mov	r1, r2
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff fd1c 	bl	8006790 <_StoreChar>
        break;
 8006d58:	e07a      	b.n	8006e50 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	1d19      	adds	r1, r3, #4
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6011      	str	r1, [r2, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006d68:	f107 0010 	add.w	r0, r7, #16
 8006d6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d6e:	9301      	str	r3, [sp, #4]
 8006d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d76:	220a      	movs	r2, #10
 8006d78:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d7a:	f7ff fe1b 	bl	80069b4 <_PrintInt>
        break;
 8006d7e:	e067      	b.n	8006e50 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	1d19      	adds	r1, r3, #4
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	6011      	str	r1, [r2, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006d8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d90:	f107 0010 	add.w	r0, r7, #16
 8006d94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d96:	9301      	str	r3, [sp, #4]
 8006d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d9e:	220a      	movs	r2, #10
 8006da0:	f7ff fd72 	bl	8006888 <_PrintUnsigned>
        break;
 8006da4:	e054      	b.n	8006e50 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	1d19      	adds	r1, r3, #4
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6011      	str	r1, [r2, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006db4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006db6:	f107 0010 	add.w	r0, r7, #16
 8006dba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dbc:	9301      	str	r3, [sp, #4]
 8006dbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dc4:	2210      	movs	r2, #16
 8006dc6:	f7ff fd5f 	bl	8006888 <_PrintUnsigned>
        break;
 8006dca:	e041      	b.n	8006e50 <_VPrintTarget+0x37c>
 8006dcc:	2000c3dc 	.word	0x2000c3dc
      case 's':
        s = va_arg(*pParamList, const char*);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	1d19      	adds	r1, r3, #4
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	6011      	str	r1, [r2, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8006dde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <_VPrintTarget+0x314>
          s = "(null)";
 8006de4:	4b4a      	ldr	r3, [pc, #296]	@ (8006f10 <_VPrintTarget+0x43c>)
 8006de6:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8006de8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8006df0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006df2:	3301      	adds	r3, #1
 8006df4:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8006df6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00b      	beq.n	8006e16 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8006dfe:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006e02:	f107 0310 	add.w	r3, r7, #16
 8006e06:	4611      	mov	r1, r2
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7ff fcc1 	bl	8006790 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e12:	d9e9      	bls.n	8006de8 <_VPrintTarget+0x314>
        break;
 8006e14:	e01c      	b.n	8006e50 <_VPrintTarget+0x37c>
            break;
 8006e16:	bf00      	nop
        break;
 8006e18:	e01a      	b.n	8006e50 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	1d19      	adds	r1, r3, #4
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	6011      	str	r1, [r2, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006e28:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006e2a:	f107 0010 	add.w	r0, r7, #16
 8006e2e:	2300      	movs	r3, #0
 8006e30:	9301      	str	r3, [sp, #4]
 8006e32:	2308      	movs	r3, #8
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	2308      	movs	r3, #8
 8006e38:	2210      	movs	r2, #16
 8006e3a:	f7ff fd25 	bl	8006888 <_PrintUnsigned>
        break;
 8006e3e:	e007      	b.n	8006e50 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006e40:	f107 0310 	add.w	r3, r7, #16
 8006e44:	2125      	movs	r1, #37	@ 0x25
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7ff fca2 	bl	8006790 <_StoreChar>
        break;
 8006e4c:	e000      	b.n	8006e50 <_VPrintTarget+0x37c>
      default:
        break;
 8006e4e:	bf00      	nop
      }
      sFormat++;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3301      	adds	r3, #1
 8006e54:	60fb      	str	r3, [r7, #12]
 8006e56:	e007      	b.n	8006e68 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006e58:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006e5c:	f107 0310 	add.w	r3, r7, #16
 8006e60:	4611      	mov	r1, r2
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7ff fc94 	bl	8006790 <_StoreChar>
    }
  } while (*sFormat);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f47f ae4d 	bne.w	8006b0c <_VPrintTarget+0x38>
 8006e72:	e000      	b.n	8006e76 <_VPrintTarget+0x3a2>
      break;
 8006e74:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d041      	beq.n	8006f00 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006e7c:	6a3a      	ldr	r2, [r7, #32]
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e8c:	e00b      	b.n	8006ea6 <_VPrintTarget+0x3d2>
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e94:	1c59      	adds	r1, r3, #1
 8006e96:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006e98:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e9c:	b2d2      	uxtb	r2, r2
 8006e9e:	701a      	strb	r2, [r3, #0]
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea2:	09db      	lsrs	r3, r3, #7
 8006ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006eaa:	d8f0      	bhi.n	8006e8e <_VPrintTarget+0x3ba>
 8006eac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eae:	1c5a      	adds	r2, r3, #1
 8006eb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006eb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006eb4:	b2d2      	uxtb	r2, r2
 8006eb6:	701a      	strb	r2, [r3, #0]
 8006eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eba:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ec4:	e00b      	b.n	8006ede <_VPrintTarget+0x40a>
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ecc:	1c59      	adds	r1, r3, #1
 8006ece:	6379      	str	r1, [r7, #52]	@ 0x34
 8006ed0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ed4:	b2d2      	uxtb	r2, r2
 8006ed6:	701a      	strb	r2, [r3, #0]
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eda:	09db      	lsrs	r3, r3, #7
 8006edc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ee2:	d8f0      	bhi.n	8006ec6 <_VPrintTarget+0x3f2>
 8006ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	637a      	str	r2, [r7, #52]	@ 0x34
 8006eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eec:	b2d2      	uxtb	r2, r2
 8006eee:	701a      	strb	r2, [r3, #0]
 8006ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef2:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	6979      	ldr	r1, [r7, #20]
 8006ef8:	221a      	movs	r2, #26
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff fada 	bl	80064b4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f02:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006f06:	bf00      	nop
 8006f08:	3758      	adds	r7, #88	@ 0x58
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	08008064 	.word	0x08008064

08006f14 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af02      	add	r7, sp, #8
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
 8006f20:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006f22:	2300      	movs	r3, #0
 8006f24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006f28:	4917      	ldr	r1, [pc, #92]	@ (8006f88 <SEGGER_SYSVIEW_Init+0x74>)
 8006f2a:	4818      	ldr	r0, [pc, #96]	@ (8006f8c <SEGGER_SYSVIEW_Init+0x78>)
 8006f2c:	f7ff f8d6 	bl	80060dc <SEGGER_RTT_AllocUpBuffer>
 8006f30:	4603      	mov	r3, r0
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	4b16      	ldr	r3, [pc, #88]	@ (8006f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f36:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006f38:	4b15      	ldr	r3, [pc, #84]	@ (8006f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f3a:	785a      	ldrb	r2, [r3, #1]
 8006f3c:	4b14      	ldr	r3, [pc, #80]	@ (8006f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f3e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006f40:	4b13      	ldr	r3, [pc, #76]	@ (8006f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f42:	7e1b      	ldrb	r3, [r3, #24]
 8006f44:	4618      	mov	r0, r3
 8006f46:	2300      	movs	r3, #0
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	2308      	movs	r3, #8
 8006f4c:	4a11      	ldr	r2, [pc, #68]	@ (8006f94 <SEGGER_SYSVIEW_Init+0x80>)
 8006f4e:	490f      	ldr	r1, [pc, #60]	@ (8006f8c <SEGGER_SYSVIEW_Init+0x78>)
 8006f50:	f7ff f948 	bl	80061e4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006f54:	4b0e      	ldr	r3, [pc, #56]	@ (8006f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f98 <SEGGER_SYSVIEW_Init+0x84>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8006f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f60:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006f62:	4a0b      	ldr	r2, [pc, #44]	@ (8006f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006f68:	4a09      	ldr	r2, [pc, #36]	@ (8006f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006f6e:	4a08      	ldr	r2, [pc, #32]	@ (8006f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006f74:	4a06      	ldr	r2, [pc, #24]	@ (8006f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006f7a:	4b05      	ldr	r3, [pc, #20]	@ (8006f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006f80:	bf00      	nop
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	2000bfa4 	.word	0x2000bfa4
 8006f8c:	0800806c 	.word	0x0800806c
 8006f90:	2000c3ac 	.word	0x2000c3ac
 8006f94:	2000c3a4 	.word	0x2000c3a4
 8006f98:	e0001004 	.word	0xe0001004

08006f9c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006fa4:	4a04      	ldr	r2, [pc, #16]	@ (8006fb8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6113      	str	r3, [r2, #16]
}
 8006faa:	bf00      	nop
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	2000c3ac 	.word	0x2000c3ac

08006fbc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006fc4:	f3ef 8311 	mrs	r3, BASEPRI
 8006fc8:	f04f 0120 	mov.w	r1, #32
 8006fcc:	f381 8811 	msr	BASEPRI, r1
 8006fd0:	60fb      	str	r3, [r7, #12]
 8006fd2:	4808      	ldr	r0, [pc, #32]	@ (8006ff4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006fd4:	f7ff f982 	bl	80062dc <_PreparePacket>
 8006fd8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	68b9      	ldr	r1, [r7, #8]
 8006fde:	68b8      	ldr	r0, [r7, #8]
 8006fe0:	f7ff fa68 	bl	80064b4 <_SendPacket>
  RECORD_END();
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f383 8811 	msr	BASEPRI, r3
}
 8006fea:	bf00      	nop
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	2000c3dc 	.word	0x2000c3dc

08006ff8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b088      	sub	sp, #32
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007002:	f3ef 8311 	mrs	r3, BASEPRI
 8007006:	f04f 0120 	mov.w	r1, #32
 800700a:	f381 8811 	msr	BASEPRI, r1
 800700e:	617b      	str	r3, [r7, #20]
 8007010:	4816      	ldr	r0, [pc, #88]	@ (800706c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8007012:	f7ff f963 	bl	80062dc <_PreparePacket>
 8007016:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	61fb      	str	r3, [r7, #28]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	61bb      	str	r3, [r7, #24]
 8007024:	e00b      	b.n	800703e <SEGGER_SYSVIEW_RecordU32+0x46>
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	b2da      	uxtb	r2, r3
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	1c59      	adds	r1, r3, #1
 800702e:	61f9      	str	r1, [r7, #28]
 8007030:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007034:	b2d2      	uxtb	r2, r2
 8007036:	701a      	strb	r2, [r3, #0]
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	09db      	lsrs	r3, r3, #7
 800703c:	61bb      	str	r3, [r7, #24]
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	2b7f      	cmp	r3, #127	@ 0x7f
 8007042:	d8f0      	bhi.n	8007026 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	61fa      	str	r2, [r7, #28]
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	b2d2      	uxtb	r2, r2
 800704e:	701a      	strb	r2, [r3, #0]
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	68f9      	ldr	r1, [r7, #12]
 8007058:	6938      	ldr	r0, [r7, #16]
 800705a:	f7ff fa2b 	bl	80064b4 <_SendPacket>
  RECORD_END();
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f383 8811 	msr	BASEPRI, r3
}
 8007064:	bf00      	nop
 8007066:	3720      	adds	r7, #32
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	2000c3dc 	.word	0x2000c3dc

08007070 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007070:	b580      	push	{r7, lr}
 8007072:	b08c      	sub	sp, #48	@ 0x30
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800707c:	f3ef 8311 	mrs	r3, BASEPRI
 8007080:	f04f 0120 	mov.w	r1, #32
 8007084:	f381 8811 	msr	BASEPRI, r1
 8007088:	61fb      	str	r3, [r7, #28]
 800708a:	4825      	ldr	r0, [pc, #148]	@ (8007120 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800708c:	f7ff f926 	bl	80062dc <_PreparePacket>
 8007090:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800709e:	e00b      	b.n	80070b8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80070a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a6:	1c59      	adds	r1, r3, #1
 80070a8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80070aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070ae:	b2d2      	uxtb	r2, r2
 80070b0:	701a      	strb	r2, [r3, #0]
 80070b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b4:	09db      	lsrs	r3, r3, #7
 80070b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80070bc:	d8f0      	bhi.n	80070a0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80070be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070c6:	b2d2      	uxtb	r2, r2
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	623b      	str	r3, [r7, #32]
 80070d6:	e00b      	b.n	80070f0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070de:	1c59      	adds	r1, r3, #1
 80070e0:	6279      	str	r1, [r7, #36]	@ 0x24
 80070e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070e6:	b2d2      	uxtb	r2, r2
 80070e8:	701a      	strb	r2, [r3, #0]
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	09db      	lsrs	r3, r3, #7
 80070ee:	623b      	str	r3, [r7, #32]
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80070f4:	d8f0      	bhi.n	80070d8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80070fc:	6a3a      	ldr	r2, [r7, #32]
 80070fe:	b2d2      	uxtb	r2, r2
 8007100:	701a      	strb	r2, [r3, #0]
 8007102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007104:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	6979      	ldr	r1, [r7, #20]
 800710a:	69b8      	ldr	r0, [r7, #24]
 800710c:	f7ff f9d2 	bl	80064b4 <_SendPacket>
  RECORD_END();
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	f383 8811 	msr	BASEPRI, r3
}
 8007116:	bf00      	nop
 8007118:	3730      	adds	r7, #48	@ 0x30
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	2000c3dc 	.word	0x2000c3dc

08007124 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007124:	b580      	push	{r7, lr}
 8007126:	b08c      	sub	sp, #48	@ 0x30
 8007128:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800712a:	4b58      	ldr	r3, [pc, #352]	@ (800728c <SEGGER_SYSVIEW_Start+0x168>)
 800712c:	2201      	movs	r2, #1
 800712e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007130:	f3ef 8311 	mrs	r3, BASEPRI
 8007134:	f04f 0120 	mov.w	r1, #32
 8007138:	f381 8811 	msr	BASEPRI, r1
 800713c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800713e:	4b53      	ldr	r3, [pc, #332]	@ (800728c <SEGGER_SYSVIEW_Start+0x168>)
 8007140:	785b      	ldrb	r3, [r3, #1]
 8007142:	220a      	movs	r2, #10
 8007144:	4952      	ldr	r1, [pc, #328]	@ (8007290 <SEGGER_SYSVIEW_Start+0x16c>)
 8007146:	4618      	mov	r0, r3
 8007148:	f7f9 f87a 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007152:	200a      	movs	r0, #10
 8007154:	f7ff ff32 	bl	8006fbc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007158:	f3ef 8311 	mrs	r3, BASEPRI
 800715c:	f04f 0120 	mov.w	r1, #32
 8007160:	f381 8811 	msr	BASEPRI, r1
 8007164:	60bb      	str	r3, [r7, #8]
 8007166:	484b      	ldr	r0, [pc, #300]	@ (8007294 <SEGGER_SYSVIEW_Start+0x170>)
 8007168:	f7ff f8b8 	bl	80062dc <_PreparePacket>
 800716c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007176:	4b45      	ldr	r3, [pc, #276]	@ (800728c <SEGGER_SYSVIEW_Start+0x168>)
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800717c:	e00b      	b.n	8007196 <SEGGER_SYSVIEW_Start+0x72>
 800717e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007180:	b2da      	uxtb	r2, r3
 8007182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007184:	1c59      	adds	r1, r3, #1
 8007186:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007188:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800718c:	b2d2      	uxtb	r2, r2
 800718e:	701a      	strb	r2, [r3, #0]
 8007190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007192:	09db      	lsrs	r3, r3, #7
 8007194:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007198:	2b7f      	cmp	r3, #127	@ 0x7f
 800719a:	d8f0      	bhi.n	800717e <SEGGER_SYSVIEW_Start+0x5a>
 800719c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071a4:	b2d2      	uxtb	r2, r2
 80071a6:	701a      	strb	r2, [r3, #0]
 80071a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071aa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80071b0:	4b36      	ldr	r3, [pc, #216]	@ (800728c <SEGGER_SYSVIEW_Start+0x168>)
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	623b      	str	r3, [r7, #32]
 80071b6:	e00b      	b.n	80071d0 <SEGGER_SYSVIEW_Start+0xac>
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071be:	1c59      	adds	r1, r3, #1
 80071c0:	6279      	str	r1, [r7, #36]	@ 0x24
 80071c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071c6:	b2d2      	uxtb	r2, r2
 80071c8:	701a      	strb	r2, [r3, #0]
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	09db      	lsrs	r3, r3, #7
 80071ce:	623b      	str	r3, [r7, #32]
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80071d4:	d8f0      	bhi.n	80071b8 <SEGGER_SYSVIEW_Start+0x94>
 80071d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	627a      	str	r2, [r7, #36]	@ 0x24
 80071dc:	6a3a      	ldr	r2, [r7, #32]
 80071de:	b2d2      	uxtb	r2, r2
 80071e0:	701a      	strb	r2, [r3, #0]
 80071e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	61fb      	str	r3, [r7, #28]
 80071ea:	4b28      	ldr	r3, [pc, #160]	@ (800728c <SEGGER_SYSVIEW_Start+0x168>)
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	61bb      	str	r3, [r7, #24]
 80071f0:	e00b      	b.n	800720a <SEGGER_SYSVIEW_Start+0xe6>
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	1c59      	adds	r1, r3, #1
 80071fa:	61f9      	str	r1, [r7, #28]
 80071fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007200:	b2d2      	uxtb	r2, r2
 8007202:	701a      	strb	r2, [r3, #0]
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	09db      	lsrs	r3, r3, #7
 8007208:	61bb      	str	r3, [r7, #24]
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	2b7f      	cmp	r3, #127	@ 0x7f
 800720e:	d8f0      	bhi.n	80071f2 <SEGGER_SYSVIEW_Start+0xce>
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	61fa      	str	r2, [r7, #28]
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	b2d2      	uxtb	r2, r2
 800721a:	701a      	strb	r2, [r3, #0]
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	617b      	str	r3, [r7, #20]
 8007224:	2300      	movs	r3, #0
 8007226:	613b      	str	r3, [r7, #16]
 8007228:	e00b      	b.n	8007242 <SEGGER_SYSVIEW_Start+0x11e>
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	b2da      	uxtb	r2, r3
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	1c59      	adds	r1, r3, #1
 8007232:	6179      	str	r1, [r7, #20]
 8007234:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007238:	b2d2      	uxtb	r2, r2
 800723a:	701a      	strb	r2, [r3, #0]
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	09db      	lsrs	r3, r3, #7
 8007240:	613b      	str	r3, [r7, #16]
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	2b7f      	cmp	r3, #127	@ 0x7f
 8007246:	d8f0      	bhi.n	800722a <SEGGER_SYSVIEW_Start+0x106>
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	617a      	str	r2, [r7, #20]
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	b2d2      	uxtb	r2, r2
 8007252:	701a      	strb	r2, [r3, #0]
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007258:	2218      	movs	r2, #24
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7ff f929 	bl	80064b4 <_SendPacket>
      RECORD_END();
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007268:	4b08      	ldr	r3, [pc, #32]	@ (800728c <SEGGER_SYSVIEW_Start+0x168>)
 800726a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726c:	2b00      	cmp	r3, #0
 800726e:	d002      	beq.n	8007276 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007270:	4b06      	ldr	r3, [pc, #24]	@ (800728c <SEGGER_SYSVIEW_Start+0x168>)
 8007272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007274:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007276:	f000 f9eb 	bl	8007650 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800727a:	f000 f9b1 	bl	80075e0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800727e:	f000 fd21 	bl	8007cc4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8007282:	bf00      	nop
 8007284:	3730      	adds	r7, #48	@ 0x30
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	2000c3ac 	.word	0x2000c3ac
 8007290:	080080ac 	.word	0x080080ac
 8007294:	2000c3dc 	.word	0x2000c3dc

08007298 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800729e:	f3ef 8311 	mrs	r3, BASEPRI
 80072a2:	f04f 0120 	mov.w	r1, #32
 80072a6:	f381 8811 	msr	BASEPRI, r1
 80072aa:	607b      	str	r3, [r7, #4]
 80072ac:	480b      	ldr	r0, [pc, #44]	@ (80072dc <SEGGER_SYSVIEW_Stop+0x44>)
 80072ae:	f7ff f815 	bl	80062dc <_PreparePacket>
 80072b2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80072b4:	4b0a      	ldr	r3, [pc, #40]	@ (80072e0 <SEGGER_SYSVIEW_Stop+0x48>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d007      	beq.n	80072cc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80072bc:	220b      	movs	r2, #11
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6838      	ldr	r0, [r7, #0]
 80072c2:	f7ff f8f7 	bl	80064b4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80072c6:	4b06      	ldr	r3, [pc, #24]	@ (80072e0 <SEGGER_SYSVIEW_Stop+0x48>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f383 8811 	msr	BASEPRI, r3
}
 80072d2:	bf00      	nop
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	2000c3dc 	.word	0x2000c3dc
 80072e0:	2000c3ac 	.word	0x2000c3ac

080072e4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08c      	sub	sp, #48	@ 0x30
 80072e8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80072ea:	f3ef 8311 	mrs	r3, BASEPRI
 80072ee:	f04f 0120 	mov.w	r1, #32
 80072f2:	f381 8811 	msr	BASEPRI, r1
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	4845      	ldr	r0, [pc, #276]	@ (8007410 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80072fa:	f7fe ffef 	bl	80062dc <_PreparePacket>
 80072fe:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007308:	4b42      	ldr	r3, [pc, #264]	@ (8007414 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800730e:	e00b      	b.n	8007328 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007312:	b2da      	uxtb	r2, r3
 8007314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007316:	1c59      	adds	r1, r3, #1
 8007318:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800731a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800731e:	b2d2      	uxtb	r2, r2
 8007320:	701a      	strb	r2, [r3, #0]
 8007322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007324:	09db      	lsrs	r3, r3, #7
 8007326:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732a:	2b7f      	cmp	r3, #127	@ 0x7f
 800732c:	d8f0      	bhi.n	8007310 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800732e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007334:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007336:	b2d2      	uxtb	r2, r2
 8007338:	701a      	strb	r2, [r3, #0]
 800733a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	627b      	str	r3, [r7, #36]	@ 0x24
 8007342:	4b34      	ldr	r3, [pc, #208]	@ (8007414 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	623b      	str	r3, [r7, #32]
 8007348:	e00b      	b.n	8007362 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	b2da      	uxtb	r2, r3
 800734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007350:	1c59      	adds	r1, r3, #1
 8007352:	6279      	str	r1, [r7, #36]	@ 0x24
 8007354:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007358:	b2d2      	uxtb	r2, r2
 800735a:	701a      	strb	r2, [r3, #0]
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	09db      	lsrs	r3, r3, #7
 8007360:	623b      	str	r3, [r7, #32]
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	2b7f      	cmp	r3, #127	@ 0x7f
 8007366:	d8f0      	bhi.n	800734a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	627a      	str	r2, [r7, #36]	@ 0x24
 800736e:	6a3a      	ldr	r2, [r7, #32]
 8007370:	b2d2      	uxtb	r2, r2
 8007372:	701a      	strb	r2, [r3, #0]
 8007374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007376:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	61fb      	str	r3, [r7, #28]
 800737c:	4b25      	ldr	r3, [pc, #148]	@ (8007414 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	61bb      	str	r3, [r7, #24]
 8007382:	e00b      	b.n	800739c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	b2da      	uxtb	r2, r3
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	1c59      	adds	r1, r3, #1
 800738c:	61f9      	str	r1, [r7, #28]
 800738e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	701a      	strb	r2, [r3, #0]
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	09db      	lsrs	r3, r3, #7
 800739a:	61bb      	str	r3, [r7, #24]
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	2b7f      	cmp	r3, #127	@ 0x7f
 80073a0:	d8f0      	bhi.n	8007384 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	61fa      	str	r2, [r7, #28]
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	b2d2      	uxtb	r2, r2
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	617b      	str	r3, [r7, #20]
 80073b6:	2300      	movs	r3, #0
 80073b8:	613b      	str	r3, [r7, #16]
 80073ba:	e00b      	b.n	80073d4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	1c59      	adds	r1, r3, #1
 80073c4:	6179      	str	r1, [r7, #20]
 80073c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073ca:	b2d2      	uxtb	r2, r2
 80073cc:	701a      	strb	r2, [r3, #0]
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	09db      	lsrs	r3, r3, #7
 80073d2:	613b      	str	r3, [r7, #16]
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80073d8:	d8f0      	bhi.n	80073bc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	1c5a      	adds	r2, r3, #1
 80073de:	617a      	str	r2, [r7, #20]
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	b2d2      	uxtb	r2, r2
 80073e4:	701a      	strb	r2, [r3, #0]
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80073ea:	2218      	movs	r2, #24
 80073ec:	6879      	ldr	r1, [r7, #4]
 80073ee:	68b8      	ldr	r0, [r7, #8]
 80073f0:	f7ff f860 	bl	80064b4 <_SendPacket>
  RECORD_END();
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80073fa:	4b06      	ldr	r3, [pc, #24]	@ (8007414 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80073fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d002      	beq.n	8007408 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007402:	4b04      	ldr	r3, [pc, #16]	@ (8007414 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007406:	4798      	blx	r3
  }
}
 8007408:	bf00      	nop
 800740a:	3730      	adds	r7, #48	@ 0x30
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	2000c3dc 	.word	0x2000c3dc
 8007414:	2000c3ac 	.word	0x2000c3ac

08007418 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007418:	b580      	push	{r7, lr}
 800741a:	b092      	sub	sp, #72	@ 0x48
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007420:	f3ef 8311 	mrs	r3, BASEPRI
 8007424:	f04f 0120 	mov.w	r1, #32
 8007428:	f381 8811 	msr	BASEPRI, r1
 800742c:	617b      	str	r3, [r7, #20]
 800742e:	486a      	ldr	r0, [pc, #424]	@ (80075d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007430:	f7fe ff54 	bl	80062dc <_PreparePacket>
 8007434:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	647b      	str	r3, [r7, #68]	@ 0x44
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	4b66      	ldr	r3, [pc, #408]	@ (80075dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	643b      	str	r3, [r7, #64]	@ 0x40
 800744a:	e00b      	b.n	8007464 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800744c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800744e:	b2da      	uxtb	r2, r3
 8007450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007452:	1c59      	adds	r1, r3, #1
 8007454:	6479      	str	r1, [r7, #68]	@ 0x44
 8007456:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800745a:	b2d2      	uxtb	r2, r2
 800745c:	701a      	strb	r2, [r3, #0]
 800745e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007460:	09db      	lsrs	r3, r3, #7
 8007462:	643b      	str	r3, [r7, #64]	@ 0x40
 8007464:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007466:	2b7f      	cmp	r3, #127	@ 0x7f
 8007468:	d8f0      	bhi.n	800744c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800746a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007470:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	701a      	strb	r2, [r3, #0]
 8007476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007478:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007484:	e00b      	b.n	800749e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007488:	b2da      	uxtb	r2, r3
 800748a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800748c:	1c59      	adds	r1, r3, #1
 800748e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8007490:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007494:	b2d2      	uxtb	r2, r2
 8007496:	701a      	strb	r2, [r3, #0]
 8007498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800749a:	09db      	lsrs	r3, r3, #7
 800749c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800749e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80074a2:	d8f0      	bhi.n	8007486 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80074a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80074aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80074ac:	b2d2      	uxtb	r2, r2
 80074ae:	701a      	strb	r2, [r3, #0]
 80074b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074b2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	2220      	movs	r2, #32
 80074ba:	4619      	mov	r1, r3
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f7fe fedd 	bl	800627c <_EncodeStr>
 80074c2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80074c4:	2209      	movs	r2, #9
 80074c6:	68f9      	ldr	r1, [r7, #12]
 80074c8:	6938      	ldr	r0, [r7, #16]
 80074ca:	f7fe fff3 	bl	80064b4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	4b40      	ldr	r3, [pc, #256]	@ (80075dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80074e2:	e00b      	b.n	80074fc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80074e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ea:	1c59      	adds	r1, r3, #1
 80074ec:	6379      	str	r1, [r7, #52]	@ 0x34
 80074ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80074f2:	b2d2      	uxtb	r2, r2
 80074f4:	701a      	strb	r2, [r3, #0]
 80074f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f8:	09db      	lsrs	r3, r3, #7
 80074fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80074fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8007500:	d8f0      	bhi.n	80074e4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	637a      	str	r2, [r7, #52]	@ 0x34
 8007508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800750a:	b2d2      	uxtb	r2, r2
 800750c:	701a      	strb	r2, [r3, #0]
 800750e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007510:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800751c:	e00b      	b.n	8007536 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800751e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007520:	b2da      	uxtb	r2, r3
 8007522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007524:	1c59      	adds	r1, r3, #1
 8007526:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007528:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800752c:	b2d2      	uxtb	r2, r2
 800752e:	701a      	strb	r2, [r3, #0]
 8007530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007532:	09db      	lsrs	r3, r3, #7
 8007534:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007538:	2b7f      	cmp	r3, #127	@ 0x7f
 800753a:	d8f0      	bhi.n	800751e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800753c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753e:	1c5a      	adds	r2, r3, #1
 8007540:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007542:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007544:	b2d2      	uxtb	r2, r2
 8007546:	701a      	strb	r2, [r3, #0]
 8007548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800754a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	623b      	str	r3, [r7, #32]
 8007556:	e00b      	b.n	8007570 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	b2da      	uxtb	r2, r3
 800755c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755e:	1c59      	adds	r1, r3, #1
 8007560:	6279      	str	r1, [r7, #36]	@ 0x24
 8007562:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007566:	b2d2      	uxtb	r2, r2
 8007568:	701a      	strb	r2, [r3, #0]
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	09db      	lsrs	r3, r3, #7
 800756e:	623b      	str	r3, [r7, #32]
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	2b7f      	cmp	r3, #127	@ 0x7f
 8007574:	d8f0      	bhi.n	8007558 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	627a      	str	r2, [r7, #36]	@ 0x24
 800757c:	6a3a      	ldr	r2, [r7, #32]
 800757e:	b2d2      	uxtb	r2, r2
 8007580:	701a      	strb	r2, [r3, #0]
 8007582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007584:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	61fb      	str	r3, [r7, #28]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	61bb      	str	r3, [r7, #24]
 8007590:	e00b      	b.n	80075aa <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	b2da      	uxtb	r2, r3
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	1c59      	adds	r1, r3, #1
 800759a:	61f9      	str	r1, [r7, #28]
 800759c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80075a0:	b2d2      	uxtb	r2, r2
 80075a2:	701a      	strb	r2, [r3, #0]
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	09db      	lsrs	r3, r3, #7
 80075a8:	61bb      	str	r3, [r7, #24]
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80075ae:	d8f0      	bhi.n	8007592 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	61fa      	str	r2, [r7, #28]
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	b2d2      	uxtb	r2, r2
 80075ba:	701a      	strb	r2, [r3, #0]
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80075c0:	2215      	movs	r2, #21
 80075c2:	68f9      	ldr	r1, [r7, #12]
 80075c4:	6938      	ldr	r0, [r7, #16]
 80075c6:	f7fe ff75 	bl	80064b4 <_SendPacket>
  RECORD_END();
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f383 8811 	msr	BASEPRI, r3
}
 80075d0:	bf00      	nop
 80075d2:	3748      	adds	r7, #72	@ 0x48
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	2000c3dc 	.word	0x2000c3dc
 80075dc:	2000c3ac 	.word	0x2000c3ac

080075e0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80075e0:	b580      	push	{r7, lr}
 80075e2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80075e4:	4b07      	ldr	r3, [pc, #28]	@ (8007604 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80075e6:	6a1b      	ldr	r3, [r3, #32]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d008      	beq.n	80075fe <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80075ec:	4b05      	ldr	r3, [pc, #20]	@ (8007604 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80075f6:	4b03      	ldr	r3, [pc, #12]	@ (8007604 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	4798      	blx	r3
  }
}
 80075fe:	bf00      	nop
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	2000c3ac 	.word	0x2000c3ac

08007608 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007610:	f3ef 8311 	mrs	r3, BASEPRI
 8007614:	f04f 0120 	mov.w	r1, #32
 8007618:	f381 8811 	msr	BASEPRI, r1
 800761c:	617b      	str	r3, [r7, #20]
 800761e:	480b      	ldr	r0, [pc, #44]	@ (800764c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007620:	f7fe fe5c 	bl	80062dc <_PreparePacket>
 8007624:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007626:	2280      	movs	r2, #128	@ 0x80
 8007628:	6879      	ldr	r1, [r7, #4]
 800762a:	6938      	ldr	r0, [r7, #16]
 800762c:	f7fe fe26 	bl	800627c <_EncodeStr>
 8007630:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007632:	220e      	movs	r2, #14
 8007634:	68f9      	ldr	r1, [r7, #12]
 8007636:	6938      	ldr	r0, [r7, #16]
 8007638:	f7fe ff3c 	bl	80064b4 <_SendPacket>
  RECORD_END();
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	f383 8811 	msr	BASEPRI, r3
}
 8007642:	bf00      	nop
 8007644:	3718      	adds	r7, #24
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	2000c3dc 	.word	0x2000c3dc

08007650 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007650:	b590      	push	{r4, r7, lr}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007656:	4b15      	ldr	r3, [pc, #84]	@ (80076ac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d01a      	beq.n	8007694 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800765e:	4b13      	ldr	r3, [pc, #76]	@ (80076ac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d015      	beq.n	8007694 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007668:	4b10      	ldr	r3, [pc, #64]	@ (80076ac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4798      	blx	r3
 8007670:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007674:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007676:	e9d7 0100 	ldrd	r0, r1, [r7]
 800767a:	f04f 0200 	mov.w	r2, #0
 800767e:	f04f 0300 	mov.w	r3, #0
 8007682:	000a      	movs	r2, r1
 8007684:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007686:	4613      	mov	r3, r2
 8007688:	461a      	mov	r2, r3
 800768a:	4621      	mov	r1, r4
 800768c:	200d      	movs	r0, #13
 800768e:	f7ff fcef 	bl	8007070 <SEGGER_SYSVIEW_RecordU32x2>
 8007692:	e006      	b.n	80076a2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007694:	4b06      	ldr	r3, [pc, #24]	@ (80076b0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4619      	mov	r1, r3
 800769a:	200c      	movs	r0, #12
 800769c:	f7ff fcac 	bl	8006ff8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80076a0:	bf00      	nop
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd90      	pop	{r4, r7, pc}
 80076aa:	bf00      	nop
 80076ac:	2000c3ac 	.word	0x2000c3ac
 80076b0:	e0001004 	.word	0xe0001004

080076b4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80076ba:	f3ef 8311 	mrs	r3, BASEPRI
 80076be:	f04f 0120 	mov.w	r1, #32
 80076c2:	f381 8811 	msr	BASEPRI, r1
 80076c6:	60fb      	str	r3, [r7, #12]
 80076c8:	4819      	ldr	r0, [pc, #100]	@ (8007730 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80076ca:	f7fe fe07 	bl	80062dc <_PreparePacket>
 80076ce:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80076d4:	4b17      	ldr	r3, [pc, #92]	@ (8007734 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076dc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	617b      	str	r3, [r7, #20]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	613b      	str	r3, [r7, #16]
 80076e6:	e00b      	b.n	8007700 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	1c59      	adds	r1, r3, #1
 80076f0:	6179      	str	r1, [r7, #20]
 80076f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	701a      	strb	r2, [r3, #0]
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	09db      	lsrs	r3, r3, #7
 80076fe:	613b      	str	r3, [r7, #16]
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	2b7f      	cmp	r3, #127	@ 0x7f
 8007704:	d8f0      	bhi.n	80076e8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	617a      	str	r2, [r7, #20]
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007716:	2202      	movs	r2, #2
 8007718:	6879      	ldr	r1, [r7, #4]
 800771a:	68b8      	ldr	r0, [r7, #8]
 800771c:	f7fe feca 	bl	80064b4 <_SendPacket>
  RECORD_END();
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f383 8811 	msr	BASEPRI, r3
}
 8007726:	bf00      	nop
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	2000c3dc 	.word	0x2000c3dc
 8007734:	e000ed04 	.word	0xe000ed04

08007738 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800773e:	f3ef 8311 	mrs	r3, BASEPRI
 8007742:	f04f 0120 	mov.w	r1, #32
 8007746:	f381 8811 	msr	BASEPRI, r1
 800774a:	607b      	str	r3, [r7, #4]
 800774c:	4807      	ldr	r0, [pc, #28]	@ (800776c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800774e:	f7fe fdc5 	bl	80062dc <_PreparePacket>
 8007752:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007754:	2203      	movs	r2, #3
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6838      	ldr	r0, [r7, #0]
 800775a:	f7fe feab 	bl	80064b4 <_SendPacket>
  RECORD_END();
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f383 8811 	msr	BASEPRI, r3
}
 8007764:	bf00      	nop
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	2000c3dc 	.word	0x2000c3dc

08007770 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007776:	f3ef 8311 	mrs	r3, BASEPRI
 800777a:	f04f 0120 	mov.w	r1, #32
 800777e:	f381 8811 	msr	BASEPRI, r1
 8007782:	607b      	str	r3, [r7, #4]
 8007784:	4807      	ldr	r0, [pc, #28]	@ (80077a4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007786:	f7fe fda9 	bl	80062dc <_PreparePacket>
 800778a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800778c:	2212      	movs	r2, #18
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6838      	ldr	r0, [r7, #0]
 8007792:	f7fe fe8f 	bl	80064b4 <_SendPacket>
  RECORD_END();
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f383 8811 	msr	BASEPRI, r3
}
 800779c:	bf00      	nop
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	2000c3dc 	.word	0x2000c3dc

080077a8 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80077b0:	f3ef 8311 	mrs	r3, BASEPRI
 80077b4:	f04f 0120 	mov.w	r1, #32
 80077b8:	f381 8811 	msr	BASEPRI, r1
 80077bc:	617b      	str	r3, [r7, #20]
 80077be:	4817      	ldr	r0, [pc, #92]	@ (800781c <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 80077c0:	f7fe fd8c 	bl	80062dc <_PreparePacket>
 80077c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	61fb      	str	r3, [r7, #28]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	61bb      	str	r3, [r7, #24]
 80077d2:	e00b      	b.n	80077ec <SEGGER_SYSVIEW_RecordEndCall+0x44>
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	1c59      	adds	r1, r3, #1
 80077dc:	61f9      	str	r1, [r7, #28]
 80077de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80077e2:	b2d2      	uxtb	r2, r2
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	09db      	lsrs	r3, r3, #7
 80077ea:	61bb      	str	r3, [r7, #24]
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80077f0:	d8f0      	bhi.n	80077d4 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	1c5a      	adds	r2, r3, #1
 80077f6:	61fa      	str	r2, [r7, #28]
 80077f8:	69ba      	ldr	r2, [r7, #24]
 80077fa:	b2d2      	uxtb	r2, r2
 80077fc:	701a      	strb	r2, [r3, #0]
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8007802:	221c      	movs	r2, #28
 8007804:	68f9      	ldr	r1, [r7, #12]
 8007806:	6938      	ldr	r0, [r7, #16]
 8007808:	f7fe fe54 	bl	80064b4 <_SendPacket>
  RECORD_END();
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	f383 8811 	msr	BASEPRI, r3
}
 8007812:	bf00      	nop
 8007814:	3720      	adds	r7, #32
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	2000c3dc 	.word	0x2000c3dc

08007820 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8007820:	b580      	push	{r7, lr}
 8007822:	b08a      	sub	sp, #40	@ 0x28
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800782a:	f3ef 8311 	mrs	r3, BASEPRI
 800782e:	f04f 0120 	mov.w	r1, #32
 8007832:	f381 8811 	msr	BASEPRI, r1
 8007836:	617b      	str	r3, [r7, #20]
 8007838:	4824      	ldr	r0, [pc, #144]	@ (80078cc <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 800783a:	f7fe fd4f 	bl	80062dc <_PreparePacket>
 800783e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	623b      	str	r3, [r7, #32]
 800784c:	e00b      	b.n	8007866 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	b2da      	uxtb	r2, r3
 8007852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007854:	1c59      	adds	r1, r3, #1
 8007856:	6279      	str	r1, [r7, #36]	@ 0x24
 8007858:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800785c:	b2d2      	uxtb	r2, r2
 800785e:	701a      	strb	r2, [r3, #0]
 8007860:	6a3b      	ldr	r3, [r7, #32]
 8007862:	09db      	lsrs	r3, r3, #7
 8007864:	623b      	str	r3, [r7, #32]
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	2b7f      	cmp	r3, #127	@ 0x7f
 800786a:	d8f0      	bhi.n	800784e <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 800786c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	627a      	str	r2, [r7, #36]	@ 0x24
 8007872:	6a3a      	ldr	r2, [r7, #32]
 8007874:	b2d2      	uxtb	r2, r2
 8007876:	701a      	strb	r2, [r3, #0]
 8007878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	61fb      	str	r3, [r7, #28]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	61bb      	str	r3, [r7, #24]
 8007884:	e00b      	b.n	800789e <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	b2da      	uxtb	r2, r3
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	1c59      	adds	r1, r3, #1
 800788e:	61f9      	str	r1, [r7, #28]
 8007890:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007894:	b2d2      	uxtb	r2, r2
 8007896:	701a      	strb	r2, [r3, #0]
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	09db      	lsrs	r3, r3, #7
 800789c:	61bb      	str	r3, [r7, #24]
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80078a2:	d8f0      	bhi.n	8007886 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	61fa      	str	r2, [r7, #28]
 80078aa:	69ba      	ldr	r2, [r7, #24]
 80078ac:	b2d2      	uxtb	r2, r2
 80078ae:	701a      	strb	r2, [r3, #0]
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80078b4:	221c      	movs	r2, #28
 80078b6:	68f9      	ldr	r1, [r7, #12]
 80078b8:	6938      	ldr	r0, [r7, #16]
 80078ba:	f7fe fdfb 	bl	80064b4 <_SendPacket>
  RECORD_END();
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f383 8811 	msr	BASEPRI, r3
}
 80078c4:	bf00      	nop
 80078c6:	3728      	adds	r7, #40	@ 0x28
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	2000c3dc 	.word	0x2000c3dc

080078d0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80078d6:	f3ef 8311 	mrs	r3, BASEPRI
 80078da:	f04f 0120 	mov.w	r1, #32
 80078de:	f381 8811 	msr	BASEPRI, r1
 80078e2:	607b      	str	r3, [r7, #4]
 80078e4:	4807      	ldr	r0, [pc, #28]	@ (8007904 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80078e6:	f7fe fcf9 	bl	80062dc <_PreparePacket>
 80078ea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80078ec:	2211      	movs	r2, #17
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6838      	ldr	r0, [r7, #0]
 80078f2:	f7fe fddf 	bl	80064b4 <_SendPacket>
  RECORD_END();
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f383 8811 	msr	BASEPRI, r3
}
 80078fc:	bf00      	nop
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	2000c3dc 	.word	0x2000c3dc

08007908 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007908:	b580      	push	{r7, lr}
 800790a:	b088      	sub	sp, #32
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007910:	f3ef 8311 	mrs	r3, BASEPRI
 8007914:	f04f 0120 	mov.w	r1, #32
 8007918:	f381 8811 	msr	BASEPRI, r1
 800791c:	617b      	str	r3, [r7, #20]
 800791e:	4819      	ldr	r0, [pc, #100]	@ (8007984 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007920:	f7fe fcdc 	bl	80062dc <_PreparePacket>
 8007924:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800792a:	4b17      	ldr	r3, [pc, #92]	@ (8007988 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	61fb      	str	r3, [r7, #28]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	61bb      	str	r3, [r7, #24]
 800793c:	e00b      	b.n	8007956 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	b2da      	uxtb	r2, r3
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	1c59      	adds	r1, r3, #1
 8007946:	61f9      	str	r1, [r7, #28]
 8007948:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800794c:	b2d2      	uxtb	r2, r2
 800794e:	701a      	strb	r2, [r3, #0]
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	09db      	lsrs	r3, r3, #7
 8007954:	61bb      	str	r3, [r7, #24]
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	2b7f      	cmp	r3, #127	@ 0x7f
 800795a:	d8f0      	bhi.n	800793e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	1c5a      	adds	r2, r3, #1
 8007960:	61fa      	str	r2, [r7, #28]
 8007962:	69ba      	ldr	r2, [r7, #24]
 8007964:	b2d2      	uxtb	r2, r2
 8007966:	701a      	strb	r2, [r3, #0]
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800796c:	2208      	movs	r2, #8
 800796e:	68f9      	ldr	r1, [r7, #12]
 8007970:	6938      	ldr	r0, [r7, #16]
 8007972:	f7fe fd9f 	bl	80064b4 <_SendPacket>
  RECORD_END();
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f383 8811 	msr	BASEPRI, r3
}
 800797c:	bf00      	nop
 800797e:	3720      	adds	r7, #32
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	2000c3dc 	.word	0x2000c3dc
 8007988:	2000c3ac 	.word	0x2000c3ac

0800798c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800798c:	b580      	push	{r7, lr}
 800798e:	b088      	sub	sp, #32
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007994:	f3ef 8311 	mrs	r3, BASEPRI
 8007998:	f04f 0120 	mov.w	r1, #32
 800799c:	f381 8811 	msr	BASEPRI, r1
 80079a0:	617b      	str	r3, [r7, #20]
 80079a2:	4819      	ldr	r0, [pc, #100]	@ (8007a08 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80079a4:	f7fe fc9a 	bl	80062dc <_PreparePacket>
 80079a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80079ae:	4b17      	ldr	r3, [pc, #92]	@ (8007a0c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	61fb      	str	r3, [r7, #28]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	61bb      	str	r3, [r7, #24]
 80079c0:	e00b      	b.n	80079da <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	1c59      	adds	r1, r3, #1
 80079ca:	61f9      	str	r1, [r7, #28]
 80079cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80079d0:	b2d2      	uxtb	r2, r2
 80079d2:	701a      	strb	r2, [r3, #0]
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	09db      	lsrs	r3, r3, #7
 80079d8:	61bb      	str	r3, [r7, #24]
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80079de:	d8f0      	bhi.n	80079c2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	1c5a      	adds	r2, r3, #1
 80079e4:	61fa      	str	r2, [r7, #28]
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	b2d2      	uxtb	r2, r2
 80079ea:	701a      	strb	r2, [r3, #0]
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80079f0:	2204      	movs	r2, #4
 80079f2:	68f9      	ldr	r1, [r7, #12]
 80079f4:	6938      	ldr	r0, [r7, #16]
 80079f6:	f7fe fd5d 	bl	80064b4 <_SendPacket>
  RECORD_END();
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f383 8811 	msr	BASEPRI, r3
}
 8007a00:	bf00      	nop
 8007a02:	3720      	adds	r7, #32
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	2000c3dc 	.word	0x2000c3dc
 8007a0c:	2000c3ac 	.word	0x2000c3ac

08007a10 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007a18:	f3ef 8311 	mrs	r3, BASEPRI
 8007a1c:	f04f 0120 	mov.w	r1, #32
 8007a20:	f381 8811 	msr	BASEPRI, r1
 8007a24:	617b      	str	r3, [r7, #20]
 8007a26:	4819      	ldr	r0, [pc, #100]	@ (8007a8c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007a28:	f7fe fc58 	bl	80062dc <_PreparePacket>
 8007a2c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007a32:	4b17      	ldr	r3, [pc, #92]	@ (8007a90 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	61fb      	str	r3, [r7, #28]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	61bb      	str	r3, [r7, #24]
 8007a44:	e00b      	b.n	8007a5e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	1c59      	adds	r1, r3, #1
 8007a4e:	61f9      	str	r1, [r7, #28]
 8007a50:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007a54:	b2d2      	uxtb	r2, r2
 8007a56:	701a      	strb	r2, [r3, #0]
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	09db      	lsrs	r3, r3, #7
 8007a5c:	61bb      	str	r3, [r7, #24]
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a62:	d8f0      	bhi.n	8007a46 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	61fa      	str	r2, [r7, #28]
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	b2d2      	uxtb	r2, r2
 8007a6e:	701a      	strb	r2, [r3, #0]
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007a74:	2206      	movs	r2, #6
 8007a76:	68f9      	ldr	r1, [r7, #12]
 8007a78:	6938      	ldr	r0, [r7, #16]
 8007a7a:	f7fe fd1b 	bl	80064b4 <_SendPacket>
  RECORD_END();
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f383 8811 	msr	BASEPRI, r3
}
 8007a84:	bf00      	nop
 8007a86:	3720      	adds	r7, #32
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	2000c3dc 	.word	0x2000c3dc
 8007a90:	2000c3ac 	.word	0x2000c3ac

08007a94 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b08a      	sub	sp, #40	@ 0x28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007a9e:	f3ef 8311 	mrs	r3, BASEPRI
 8007aa2:	f04f 0120 	mov.w	r1, #32
 8007aa6:	f381 8811 	msr	BASEPRI, r1
 8007aaa:	617b      	str	r3, [r7, #20]
 8007aac:	4827      	ldr	r0, [pc, #156]	@ (8007b4c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007aae:	f7fe fc15 	bl	80062dc <_PreparePacket>
 8007ab2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007ab8:	4b25      	ldr	r3, [pc, #148]	@ (8007b50 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	623b      	str	r3, [r7, #32]
 8007aca:	e00b      	b.n	8007ae4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad2:	1c59      	adds	r1, r3, #1
 8007ad4:	6279      	str	r1, [r7, #36]	@ 0x24
 8007ad6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007ada:	b2d2      	uxtb	r2, r2
 8007adc:	701a      	strb	r2, [r3, #0]
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	09db      	lsrs	r3, r3, #7
 8007ae2:	623b      	str	r3, [r7, #32]
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ae8:	d8f0      	bhi.n	8007acc <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aec:	1c5a      	adds	r2, r3, #1
 8007aee:	627a      	str	r2, [r7, #36]	@ 0x24
 8007af0:	6a3a      	ldr	r2, [r7, #32]
 8007af2:	b2d2      	uxtb	r2, r2
 8007af4:	701a      	strb	r2, [r3, #0]
 8007af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	61fb      	str	r3, [r7, #28]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	61bb      	str	r3, [r7, #24]
 8007b02:	e00b      	b.n	8007b1c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	1c59      	adds	r1, r3, #1
 8007b0c:	61f9      	str	r1, [r7, #28]
 8007b0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007b12:	b2d2      	uxtb	r2, r2
 8007b14:	701a      	strb	r2, [r3, #0]
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	09db      	lsrs	r3, r3, #7
 8007b1a:	61bb      	str	r3, [r7, #24]
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b20:	d8f0      	bhi.n	8007b04 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	1c5a      	adds	r2, r3, #1
 8007b26:	61fa      	str	r2, [r7, #28]
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	b2d2      	uxtb	r2, r2
 8007b2c:	701a      	strb	r2, [r3, #0]
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007b32:	2207      	movs	r2, #7
 8007b34:	68f9      	ldr	r1, [r7, #12]
 8007b36:	6938      	ldr	r0, [r7, #16]
 8007b38:	f7fe fcbc 	bl	80064b4 <_SendPacket>
  RECORD_END();
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	f383 8811 	msr	BASEPRI, r3
}
 8007b42:	bf00      	nop
 8007b44:	3728      	adds	r7, #40	@ 0x28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	2000c3dc 	.word	0x2000c3dc
 8007b50:	2000c3ac 	.word	0x2000c3ac

08007b54 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007b5c:	4b04      	ldr	r3, [pc, #16]	@ (8007b70 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	1ad3      	subs	r3, r2, r3
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	2000c3ac 	.word	0x2000c3ac

08007b74 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b08c      	sub	sp, #48	@ 0x30
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007b7e:	4b40      	ldr	r3, [pc, #256]	@ (8007c80 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d077      	beq.n	8007c76 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8007b86:	4b3e      	ldr	r3, [pc, #248]	@ (8007c80 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b90:	e008      	b.n	8007ba4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d007      	beq.n	8007bae <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ba4:	79fb      	ldrb	r3, [r7, #7]
 8007ba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d3f2      	bcc.n	8007b92 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007bac:	e000      	b.n	8007bb0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007bae:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d055      	beq.n	8007c62 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007bb6:	f3ef 8311 	mrs	r3, BASEPRI
 8007bba:	f04f 0120 	mov.w	r1, #32
 8007bbe:	f381 8811 	msr	BASEPRI, r1
 8007bc2:	617b      	str	r3, [r7, #20]
 8007bc4:	482f      	ldr	r0, [pc, #188]	@ (8007c84 <SEGGER_SYSVIEW_SendModule+0x110>)
 8007bc6:	f7fe fb89 	bl	80062dc <_PreparePacket>
 8007bca:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bd4:	79fb      	ldrb	r3, [r7, #7]
 8007bd6:	623b      	str	r3, [r7, #32]
 8007bd8:	e00b      	b.n	8007bf2 <SEGGER_SYSVIEW_SendModule+0x7e>
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	b2da      	uxtb	r2, r3
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be0:	1c59      	adds	r1, r3, #1
 8007be2:	6279      	str	r1, [r7, #36]	@ 0x24
 8007be4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007be8:	b2d2      	uxtb	r2, r2
 8007bea:	701a      	strb	r2, [r3, #0]
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	09db      	lsrs	r3, r3, #7
 8007bf0:	623b      	str	r3, [r7, #32]
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	2b7f      	cmp	r3, #127	@ 0x7f
 8007bf6:	d8f0      	bhi.n	8007bda <SEGGER_SYSVIEW_SendModule+0x66>
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfa:	1c5a      	adds	r2, r3, #1
 8007bfc:	627a      	str	r2, [r7, #36]	@ 0x24
 8007bfe:	6a3a      	ldr	r2, [r7, #32]
 8007c00:	b2d2      	uxtb	r2, r2
 8007c02:	701a      	strb	r2, [r3, #0]
 8007c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c06:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	61fb      	str	r3, [r7, #28]
 8007c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	61bb      	str	r3, [r7, #24]
 8007c12:	e00b      	b.n	8007c2c <SEGGER_SYSVIEW_SendModule+0xb8>
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	1c59      	adds	r1, r3, #1
 8007c1c:	61f9      	str	r1, [r7, #28]
 8007c1e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007c22:	b2d2      	uxtb	r2, r2
 8007c24:	701a      	strb	r2, [r3, #0]
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	09db      	lsrs	r3, r3, #7
 8007c2a:	61bb      	str	r3, [r7, #24]
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c30:	d8f0      	bhi.n	8007c14 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	1c5a      	adds	r2, r3, #1
 8007c36:	61fa      	str	r2, [r7, #28]
 8007c38:	69ba      	ldr	r2, [r7, #24]
 8007c3a:	b2d2      	uxtb	r2, r2
 8007c3c:	701a      	strb	r2, [r3, #0]
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2280      	movs	r2, #128	@ 0x80
 8007c48:	4619      	mov	r1, r3
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f7fe fb16 	bl	800627c <_EncodeStr>
 8007c50:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007c52:	2216      	movs	r2, #22
 8007c54:	68f9      	ldr	r1, [r7, #12]
 8007c56:	6938      	ldr	r0, [r7, #16]
 8007c58:	f7fe fc2c 	bl	80064b4 <_SendPacket>
      RECORD_END();
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8007c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d006      	beq.n	8007c76 <SEGGER_SYSVIEW_SendModule+0x102>
 8007c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	4798      	blx	r3
    }
  }
}
 8007c76:	bf00      	nop
 8007c78:	3730      	adds	r7, #48	@ 0x30
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	2000c3d4 	.word	0x2000c3d4
 8007c84:	2000c3dc 	.word	0x2000c3dc

08007c88 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8007cc0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00f      	beq.n	8007cb6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007c96:	4b0a      	ldr	r3, [pc, #40]	@ (8007cc0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1f2      	bne.n	8007c9c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007cb6:	bf00      	nop
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	2000c3d4 	.word	0x2000c3d4

08007cc4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007cca:	f3ef 8311 	mrs	r3, BASEPRI
 8007cce:	f04f 0120 	mov.w	r1, #32
 8007cd2:	f381 8811 	msr	BASEPRI, r1
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	4817      	ldr	r0, [pc, #92]	@ (8007d38 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007cda:	f7fe faff 	bl	80062dc <_PreparePacket>
 8007cde:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	617b      	str	r3, [r7, #20]
 8007ce8:	4b14      	ldr	r3, [pc, #80]	@ (8007d3c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	613b      	str	r3, [r7, #16]
 8007cee:	e00b      	b.n	8007d08 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	1c59      	adds	r1, r3, #1
 8007cf8:	6179      	str	r1, [r7, #20]
 8007cfa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007cfe:	b2d2      	uxtb	r2, r2
 8007d00:	701a      	strb	r2, [r3, #0]
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	09db      	lsrs	r3, r3, #7
 8007d06:	613b      	str	r3, [r7, #16]
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007d0c:	d8f0      	bhi.n	8007cf0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	1c5a      	adds	r2, r3, #1
 8007d12:	617a      	str	r2, [r7, #20]
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	b2d2      	uxtb	r2, r2
 8007d18:	701a      	strb	r2, [r3, #0]
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007d1e:	221b      	movs	r2, #27
 8007d20:	6879      	ldr	r1, [r7, #4]
 8007d22:	68b8      	ldr	r0, [r7, #8]
 8007d24:	f7fe fbc6 	bl	80064b4 <_SendPacket>
  RECORD_END();
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f383 8811 	msr	BASEPRI, r3
}
 8007d2e:	bf00      	nop
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	2000c3dc 	.word	0x2000c3dc
 8007d3c:	2000c3d8 	.word	0x2000c3d8

08007d40 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007d40:	b40f      	push	{r0, r1, r2, r3}
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b082      	sub	sp, #8
 8007d46:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007d48:	f107 0314 	add.w	r3, r7, #20
 8007d4c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007d4e:	1d3b      	adds	r3, r7, #4
 8007d50:	461a      	mov	r2, r3
 8007d52:	2100      	movs	r1, #0
 8007d54:	6938      	ldr	r0, [r7, #16]
 8007d56:	f7fe febd 	bl	8006ad4 <_VPrintTarget>
  va_end(ParamList);
}
 8007d5a:	bf00      	nop
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d64:	b004      	add	sp, #16
 8007d66:	4770      	bx	lr

08007d68 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b08a      	sub	sp, #40	@ 0x28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007d70:	f3ef 8311 	mrs	r3, BASEPRI
 8007d74:	f04f 0120 	mov.w	r1, #32
 8007d78:	f381 8811 	msr	BASEPRI, r1
 8007d7c:	617b      	str	r3, [r7, #20]
 8007d7e:	4827      	ldr	r0, [pc, #156]	@ (8007e1c <SEGGER_SYSVIEW_Warn+0xb4>)
 8007d80:	f7fe faac 	bl	80062dc <_PreparePacket>
 8007d84:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007d86:	2280      	movs	r2, #128	@ 0x80
 8007d88:	6879      	ldr	r1, [r7, #4]
 8007d8a:	6938      	ldr	r0, [r7, #16]
 8007d8c:	f7fe fa76 	bl	800627c <_EncodeStr>
 8007d90:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d96:	2301      	movs	r3, #1
 8007d98:	623b      	str	r3, [r7, #32]
 8007d9a:	e00b      	b.n	8007db4 <SEGGER_SYSVIEW_Warn+0x4c>
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da2:	1c59      	adds	r1, r3, #1
 8007da4:	6279      	str	r1, [r7, #36]	@ 0x24
 8007da6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007daa:	b2d2      	uxtb	r2, r2
 8007dac:	701a      	strb	r2, [r3, #0]
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	09db      	lsrs	r3, r3, #7
 8007db2:	623b      	str	r3, [r7, #32]
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	2b7f      	cmp	r3, #127	@ 0x7f
 8007db8:	d8f0      	bhi.n	8007d9c <SEGGER_SYSVIEW_Warn+0x34>
 8007dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbc:	1c5a      	adds	r2, r3, #1
 8007dbe:	627a      	str	r2, [r7, #36]	@ 0x24
 8007dc0:	6a3a      	ldr	r2, [r7, #32]
 8007dc2:	b2d2      	uxtb	r2, r2
 8007dc4:	701a      	strb	r2, [r3, #0]
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	61fb      	str	r3, [r7, #28]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	61bb      	str	r3, [r7, #24]
 8007dd2:	e00b      	b.n	8007dec <SEGGER_SYSVIEW_Warn+0x84>
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	1c59      	adds	r1, r3, #1
 8007ddc:	61f9      	str	r1, [r7, #28]
 8007dde:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007de2:	b2d2      	uxtb	r2, r2
 8007de4:	701a      	strb	r2, [r3, #0]
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	09db      	lsrs	r3, r3, #7
 8007dea:	61bb      	str	r3, [r7, #24]
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	2b7f      	cmp	r3, #127	@ 0x7f
 8007df0:	d8f0      	bhi.n	8007dd4 <SEGGER_SYSVIEW_Warn+0x6c>
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	1c5a      	adds	r2, r3, #1
 8007df6:	61fa      	str	r2, [r7, #28]
 8007df8:	69ba      	ldr	r2, [r7, #24]
 8007dfa:	b2d2      	uxtb	r2, r2
 8007dfc:	701a      	strb	r2, [r3, #0]
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007e02:	221a      	movs	r2, #26
 8007e04:	68f9      	ldr	r1, [r7, #12]
 8007e06:	6938      	ldr	r0, [r7, #16]
 8007e08:	f7fe fb54 	bl	80064b4 <_SendPacket>
  RECORD_END();
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	f383 8811 	msr	BASEPRI, r3
}
 8007e12:	bf00      	nop
 8007e14:	3728      	adds	r7, #40	@ 0x28
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	2000c3dc 	.word	0x2000c3dc

08007e20 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007e24:	4b13      	ldr	r3, [pc, #76]	@ (8007e74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e26:	7e1b      	ldrb	r3, [r3, #24]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	4a13      	ldr	r2, [pc, #76]	@ (8007e78 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	440b      	add	r3, r1
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	4413      	add	r3, r2
 8007e36:	336c      	adds	r3, #108	@ 0x6c
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8007e74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e3c:	7e1b      	ldrb	r3, [r3, #24]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	490d      	ldr	r1, [pc, #52]	@ (8007e78 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007e42:	4603      	mov	r3, r0
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	4403      	add	r3, r0
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	440b      	add	r3, r1
 8007e4c:	3370      	adds	r3, #112	@ 0x70
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d00b      	beq.n	8007e6c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007e54:	4b07      	ldr	r3, [pc, #28]	@ (8007e74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e56:	789b      	ldrb	r3, [r3, #2]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d107      	bne.n	8007e6c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007e5c:	4b05      	ldr	r3, [pc, #20]	@ (8007e74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e5e:	2201      	movs	r2, #1
 8007e60:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007e62:	f7fe fa47 	bl	80062f4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007e66:	4b03      	ldr	r3, [pc, #12]	@ (8007e74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007e6c:	4b01      	ldr	r3, [pc, #4]	@ (8007e74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	2000c3ac 	.word	0x2000c3ac
 8007e78:	2000baec 	.word	0x2000baec

08007e7c <memcmp>:
 8007e7c:	b510      	push	{r4, lr}
 8007e7e:	3901      	subs	r1, #1
 8007e80:	4402      	add	r2, r0
 8007e82:	4290      	cmp	r0, r2
 8007e84:	d101      	bne.n	8007e8a <memcmp+0xe>
 8007e86:	2000      	movs	r0, #0
 8007e88:	e005      	b.n	8007e96 <memcmp+0x1a>
 8007e8a:	7803      	ldrb	r3, [r0, #0]
 8007e8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007e90:	42a3      	cmp	r3, r4
 8007e92:	d001      	beq.n	8007e98 <memcmp+0x1c>
 8007e94:	1b18      	subs	r0, r3, r4
 8007e96:	bd10      	pop	{r4, pc}
 8007e98:	3001      	adds	r0, #1
 8007e9a:	e7f2      	b.n	8007e82 <memcmp+0x6>

08007e9c <memset>:
 8007e9c:	4402      	add	r2, r0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d100      	bne.n	8007ea6 <memset+0xa>
 8007ea4:	4770      	bx	lr
 8007ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8007eaa:	e7f9      	b.n	8007ea0 <memset+0x4>

08007eac <__libc_init_array>:
 8007eac:	b570      	push	{r4, r5, r6, lr}
 8007eae:	4d0d      	ldr	r5, [pc, #52]	@ (8007ee4 <__libc_init_array+0x38>)
 8007eb0:	4c0d      	ldr	r4, [pc, #52]	@ (8007ee8 <__libc_init_array+0x3c>)
 8007eb2:	1b64      	subs	r4, r4, r5
 8007eb4:	10a4      	asrs	r4, r4, #2
 8007eb6:	2600      	movs	r6, #0
 8007eb8:	42a6      	cmp	r6, r4
 8007eba:	d109      	bne.n	8007ed0 <__libc_init_array+0x24>
 8007ebc:	4d0b      	ldr	r5, [pc, #44]	@ (8007eec <__libc_init_array+0x40>)
 8007ebe:	4c0c      	ldr	r4, [pc, #48]	@ (8007ef0 <__libc_init_array+0x44>)
 8007ec0:	f000 f826 	bl	8007f10 <_init>
 8007ec4:	1b64      	subs	r4, r4, r5
 8007ec6:	10a4      	asrs	r4, r4, #2
 8007ec8:	2600      	movs	r6, #0
 8007eca:	42a6      	cmp	r6, r4
 8007ecc:	d105      	bne.n	8007eda <__libc_init_array+0x2e>
 8007ece:	bd70      	pop	{r4, r5, r6, pc}
 8007ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ed4:	4798      	blx	r3
 8007ed6:	3601      	adds	r6, #1
 8007ed8:	e7ee      	b.n	8007eb8 <__libc_init_array+0xc>
 8007eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ede:	4798      	blx	r3
 8007ee0:	3601      	adds	r6, #1
 8007ee2:	e7f2      	b.n	8007eca <__libc_init_array+0x1e>
 8007ee4:	080080d0 	.word	0x080080d0
 8007ee8:	080080d0 	.word	0x080080d0
 8007eec:	080080d0 	.word	0x080080d0
 8007ef0:	080080d4 	.word	0x080080d4

08007ef4 <memcpy>:
 8007ef4:	440a      	add	r2, r1
 8007ef6:	4291      	cmp	r1, r2
 8007ef8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007efc:	d100      	bne.n	8007f00 <memcpy+0xc>
 8007efe:	4770      	bx	lr
 8007f00:	b510      	push	{r4, lr}
 8007f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f0a:	4291      	cmp	r1, r2
 8007f0c:	d1f9      	bne.n	8007f02 <memcpy+0xe>
 8007f0e:	bd10      	pop	{r4, pc}

08007f10 <_init>:
 8007f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f12:	bf00      	nop
 8007f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f16:	bc08      	pop	{r3}
 8007f18:	469e      	mov	lr, r3
 8007f1a:	4770      	bx	lr

08007f1c <_fini>:
 8007f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1e:	bf00      	nop
 8007f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f22:	bc08      	pop	{r3}
 8007f24:	469e      	mov	lr, r3
 8007f26:	4770      	bx	lr
