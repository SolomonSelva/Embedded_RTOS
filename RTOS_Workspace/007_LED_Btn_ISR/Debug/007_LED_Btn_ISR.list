
007_LED_Btn_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d18  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08007f18  08007f18  00008f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080ac  080080ac  0000a01c  2**0
                  CONTENTS
  4 .ARM          00000008  080080ac  080080ac  000090ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080b4  080080b4  0000a01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080b4  080080b4  000090b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080080b8  080080b8  000090b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080080bc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c4a0  2000001c  080080d8  0000a01c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c4bc  080080d8  0000a4bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a01c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016554  00000000  00000000  0000a04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000319c  00000000  00000000  0002059e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  00023740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001007  00000000  00000000  00024c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c0be  00000000  00000000  00025c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197cb  00000000  00000000  00051cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116e39  00000000  00000000  0006b4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001822e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005714  00000000  00000000  00182324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ea  00000000  00000000  00187a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000001c 	.word	0x2000001c
 800021c:	00000000 	.word	0x00000000
 8000220:	08007f00 	.word	0x08007f00

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000020 	.word	0x20000020
 800023c:	08007f00 	.word	0x08007f00

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	2000bae8 	.word	0x2000bae8

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b96a 	b.w	80005c0 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	460c      	mov	r4, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14e      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000310:	4694      	mov	ip, r2
 8000312:	458c      	cmp	ip, r1
 8000314:	4686      	mov	lr, r0
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	d962      	bls.n	80003e2 <__udivmoddi4+0xde>
 800031c:	b14a      	cbz	r2, 8000332 <__udivmoddi4+0x2e>
 800031e:	f1c2 0320 	rsb	r3, r2, #32
 8000322:	4091      	lsls	r1, r2
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	fa0c fc02 	lsl.w	ip, ip, r2
 800032c:	4319      	orrs	r1, r3
 800032e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f f68c 	uxth.w	r6, ip
 800033a:	fbb1 f4f7 	udiv	r4, r1, r7
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb07 1114 	mls	r1, r7, r4, r1
 8000346:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034a:	fb04 f106 	mul.w	r1, r4, r6
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f104 30ff 	add.w	r0, r4, #4294967295
 800035a:	f080 8112 	bcs.w	8000582 <__udivmoddi4+0x27e>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 810f 	bls.w	8000582 <__udivmoddi4+0x27e>
 8000364:	3c02      	subs	r4, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	fa1f f38e 	uxth.w	r3, lr
 800036e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000372:	fb07 1110 	mls	r1, r7, r0, r1
 8000376:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037a:	fb00 f606 	mul.w	r6, r0, r6
 800037e:	429e      	cmp	r6, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x94>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f100 31ff 	add.w	r1, r0, #4294967295
 800038a:	f080 80fc 	bcs.w	8000586 <__udivmoddi4+0x282>
 800038e:	429e      	cmp	r6, r3
 8000390:	f240 80f9 	bls.w	8000586 <__udivmoddi4+0x282>
 8000394:	4463      	add	r3, ip
 8000396:	3802      	subs	r0, #2
 8000398:	1b9b      	subs	r3, r3, r6
 800039a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa6>
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xba>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb4>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa6>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x150>
 80003c6:	42a3      	cmp	r3, r4
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xcc>
 80003ca:	4290      	cmp	r0, r2
 80003cc:	f0c0 80f0 	bcc.w	80005b0 <__udivmoddi4+0x2ac>
 80003d0:	1a86      	subs	r6, r0, r2
 80003d2:	eb64 0303 	sbc.w	r3, r4, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	2d00      	cmp	r5, #0
 80003da:	d0e6      	beq.n	80003aa <__udivmoddi4+0xa6>
 80003dc:	e9c5 6300 	strd	r6, r3, [r5]
 80003e0:	e7e3      	b.n	80003aa <__udivmoddi4+0xa6>
 80003e2:	2a00      	cmp	r2, #0
 80003e4:	f040 8090 	bne.w	8000508 <__udivmoddi4+0x204>
 80003e8:	eba1 040c 	sub.w	r4, r1, ip
 80003ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f0:	fa1f f78c 	uxth.w	r7, ip
 80003f4:	2101      	movs	r1, #1
 80003f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000402:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000406:	fb07 f006 	mul.w	r0, r7, r6
 800040a:	4298      	cmp	r0, r3
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x11c>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 34ff 	add.w	r4, r6, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0x11a>
 8000418:	4298      	cmp	r0, r3
 800041a:	f200 80cd 	bhi.w	80005b8 <__udivmoddi4+0x2b4>
 800041e:	4626      	mov	r6, r4
 8000420:	1a1c      	subs	r4, r3, r0
 8000422:	fa1f f38e 	uxth.w	r3, lr
 8000426:	fbb4 f0f8 	udiv	r0, r4, r8
 800042a:	fb08 4410 	mls	r4, r8, r0, r4
 800042e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000432:	fb00 f707 	mul.w	r7, r0, r7
 8000436:	429f      	cmp	r7, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x148>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x146>
 8000444:	429f      	cmp	r7, r3
 8000446:	f200 80b0 	bhi.w	80005aa <__udivmoddi4+0x2a6>
 800044a:	4620      	mov	r0, r4
 800044c:	1bdb      	subs	r3, r3, r7
 800044e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x9c>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa20 fc06 	lsr.w	ip, r0, r6
 8000464:	fa04 f301 	lsl.w	r3, r4, r1
 8000468:	ea43 030c 	orr.w	r3, r3, ip
 800046c:	40f4      	lsrs	r4, r6
 800046e:	fa00 f801 	lsl.w	r8, r0, r1
 8000472:	0c38      	lsrs	r0, r7, #16
 8000474:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000478:	fbb4 fef0 	udiv	lr, r4, r0
 800047c:	fa1f fc87 	uxth.w	ip, r7
 8000480:	fb00 441e 	mls	r4, r0, lr, r4
 8000484:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000488:	fb0e f90c 	mul.w	r9, lr, ip
 800048c:	45a1      	cmp	r9, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d90a      	bls.n	80004aa <__udivmoddi4+0x1a6>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049a:	f080 8084 	bcs.w	80005a6 <__udivmoddi4+0x2a2>
 800049e:	45a1      	cmp	r9, r4
 80004a0:	f240 8081 	bls.w	80005a6 <__udivmoddi4+0x2a2>
 80004a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a8:	443c      	add	r4, r7
 80004aa:	eba4 0409 	sub.w	r4, r4, r9
 80004ae:	fa1f f983 	uxth.w	r9, r3
 80004b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004be:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x1d2>
 80004c6:	193c      	adds	r4, r7, r4
 80004c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004cc:	d267      	bcs.n	800059e <__udivmoddi4+0x29a>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d965      	bls.n	800059e <__udivmoddi4+0x29a>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004da:	fba0 9302 	umull	r9, r3, r0, r2
 80004de:	eba4 040c 	sub.w	r4, r4, ip
 80004e2:	429c      	cmp	r4, r3
 80004e4:	46ce      	mov	lr, r9
 80004e6:	469c      	mov	ip, r3
 80004e8:	d351      	bcc.n	800058e <__udivmoddi4+0x28a>
 80004ea:	d04e      	beq.n	800058a <__udivmoddi4+0x286>
 80004ec:	b155      	cbz	r5, 8000504 <__udivmoddi4+0x200>
 80004ee:	ebb8 030e 	subs.w	r3, r8, lr
 80004f2:	eb64 040c 	sbc.w	r4, r4, ip
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431e      	orrs	r6, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	e9c5 6400 	strd	r6, r4, [r5]
 8000504:	2100      	movs	r1, #0
 8000506:	e750      	b.n	80003aa <__udivmoddi4+0xa6>
 8000508:	f1c2 0320 	rsb	r3, r2, #32
 800050c:	fa20 f103 	lsr.w	r1, r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa24 f303 	lsr.w	r3, r4, r3
 8000518:	4094      	lsls	r4, r2
 800051a:	430c      	orrs	r4, r1
 800051c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000520:	fa00 fe02 	lsl.w	lr, r0, r2
 8000524:	fa1f f78c 	uxth.w	r7, ip
 8000528:	fbb3 f0f8 	udiv	r0, r3, r8
 800052c:	fb08 3110 	mls	r1, r8, r0, r3
 8000530:	0c23      	lsrs	r3, r4, #16
 8000532:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000536:	fb00 f107 	mul.w	r1, r0, r7
 800053a:	4299      	cmp	r1, r3
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x24c>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 36ff 	add.w	r6, r0, #4294967295
 8000546:	d22c      	bcs.n	80005a2 <__udivmoddi4+0x29e>
 8000548:	4299      	cmp	r1, r3
 800054a:	d92a      	bls.n	80005a2 <__udivmoddi4+0x29e>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1a5b      	subs	r3, r3, r1
 8000552:	b2a4      	uxth	r4, r4
 8000554:	fbb3 f1f8 	udiv	r1, r3, r8
 8000558:	fb08 3311 	mls	r3, r8, r1, r3
 800055c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000560:	fb01 f307 	mul.w	r3, r1, r7
 8000564:	42a3      	cmp	r3, r4
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x276>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000570:	d213      	bcs.n	800059a <__udivmoddi4+0x296>
 8000572:	42a3      	cmp	r3, r4
 8000574:	d911      	bls.n	800059a <__udivmoddi4+0x296>
 8000576:	3902      	subs	r1, #2
 8000578:	4464      	add	r4, ip
 800057a:	1ae4      	subs	r4, r4, r3
 800057c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000580:	e739      	b.n	80003f6 <__udivmoddi4+0xf2>
 8000582:	4604      	mov	r4, r0
 8000584:	e6f0      	b.n	8000368 <__udivmoddi4+0x64>
 8000586:	4608      	mov	r0, r1
 8000588:	e706      	b.n	8000398 <__udivmoddi4+0x94>
 800058a:	45c8      	cmp	r8, r9
 800058c:	d2ae      	bcs.n	80004ec <__udivmoddi4+0x1e8>
 800058e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000592:	eb63 0c07 	sbc.w	ip, r3, r7
 8000596:	3801      	subs	r0, #1
 8000598:	e7a8      	b.n	80004ec <__udivmoddi4+0x1e8>
 800059a:	4631      	mov	r1, r6
 800059c:	e7ed      	b.n	800057a <__udivmoddi4+0x276>
 800059e:	4603      	mov	r3, r0
 80005a0:	e799      	b.n	80004d6 <__udivmoddi4+0x1d2>
 80005a2:	4630      	mov	r0, r6
 80005a4:	e7d4      	b.n	8000550 <__udivmoddi4+0x24c>
 80005a6:	46d6      	mov	lr, sl
 80005a8:	e77f      	b.n	80004aa <__udivmoddi4+0x1a6>
 80005aa:	4463      	add	r3, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e74d      	b.n	800044c <__udivmoddi4+0x148>
 80005b0:	4606      	mov	r6, r0
 80005b2:	4623      	mov	r3, r4
 80005b4:	4608      	mov	r0, r1
 80005b6:	e70f      	b.n	80003d8 <__udivmoddi4+0xd4>
 80005b8:	3e02      	subs	r6, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	e730      	b.n	8000420 <__udivmoddi4+0x11c>
 80005be:	bf00      	nop

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fbb2 	bl	8000d32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f855 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f8af 	bl	8000734 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	/* Enable the CYcle counting */
	DWT_CTRL |= (1 << 0);
 80005d6:	4b1d      	ldr	r3, [pc, #116]	@ (800064c <main+0x88>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a1c      	ldr	r2, [pc, #112]	@ (800064c <main+0x88>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6013      	str	r3, [r2, #0]

	SEGGER_UART_init(250000);
 80005e2:	481b      	ldr	r0, [pc, #108]	@ (8000650 <main+0x8c>)
 80005e4:	f005 f9f6 	bl	80059d4 <SEGGER_UART_init>

	SEGGER_SYSVIEW_Conf();
 80005e8:	f004 ff62 	bl	80054b0 <SEGGER_SYSVIEW_Conf>
	//SEGGER_SYSVIEW_Start();


	status = xTaskCreate(led_green_handler, "LED_Green_Task", 200, NULL, 3, &ledg_handle);
 80005ec:	4b19      	ldr	r3, [pc, #100]	@ (8000654 <main+0x90>)
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2303      	movs	r3, #3
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	22c8      	movs	r2, #200	@ 0xc8
 80005f8:	4917      	ldr	r1, [pc, #92]	@ (8000658 <main+0x94>)
 80005fa:	4818      	ldr	r0, [pc, #96]	@ (800065c <main+0x98>)
 80005fc:	f002 fb84 	bl	8002d08 <xTaskCreate>
 8000600:	6078      	str	r0, [r7, #4]

	configASSERT(status = pdPASS);
 8000602:	2301      	movs	r3, #1
 8000604:	607b      	str	r3, [r7, #4]

	next_task_handle = ledg_handle;
 8000606:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <main+0x90>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a15      	ldr	r2, [pc, #84]	@ (8000660 <main+0x9c>)
 800060c:	6013      	str	r3, [r2, #0]

	status = xTaskCreate(led_red_handler, "LED_Red_Task", 200, NULL, 2, &ledr_handle);
 800060e:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <main+0xa0>)
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	2302      	movs	r3, #2
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2300      	movs	r3, #0
 8000618:	22c8      	movs	r2, #200	@ 0xc8
 800061a:	4913      	ldr	r1, [pc, #76]	@ (8000668 <main+0xa4>)
 800061c:	4813      	ldr	r0, [pc, #76]	@ (800066c <main+0xa8>)
 800061e:	f002 fb73 	bl	8002d08 <xTaskCreate>
 8000622:	6078      	str	r0, [r7, #4]

	configASSERT(status = pdPASS);
 8000624:	2301      	movs	r3, #1
 8000626:	607b      	str	r3, [r7, #4]

	status = xTaskCreate(led_blue_handler, "LED_Blue_Task", 200, NULL, 1, &ledb_handle);
 8000628:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <main+0xac>)
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2301      	movs	r3, #1
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2300      	movs	r3, #0
 8000632:	22c8      	movs	r2, #200	@ 0xc8
 8000634:	490f      	ldr	r1, [pc, #60]	@ (8000674 <main+0xb0>)
 8000636:	4810      	ldr	r0, [pc, #64]	@ (8000678 <main+0xb4>)
 8000638:	f002 fb66 	bl	8002d08 <xTaskCreate>
 800063c:	6078      	str	r0, [r7, #4]

	configASSERT(status = pdPASS);
 800063e:	2301      	movs	r3, #1
 8000640:	607b      	str	r3, [r7, #4]

	//STart the FreeRTOS Scheduler
	vTaskStartScheduler();
 8000642:	f002 fddf 	bl	8003204 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000646:	bf00      	nop
 8000648:	e7fd      	b.n	8000646 <main+0x82>
 800064a:	bf00      	nop
 800064c:	e0001000 	.word	0xe0001000
 8000650:	0003d090 	.word	0x0003d090
 8000654:	20000038 	.word	0x20000038
 8000658:	08007f18 	.word	0x08007f18
 800065c:	08000a8d 	.word	0x08000a8d
 8000660:	20000044 	.word	0x20000044
 8000664:	2000003c 	.word	0x2000003c
 8000668:	08007f28 	.word	0x08007f28
 800066c:	08000a29 	.word	0x08000a29
 8000670:	20000040 	.word	0x20000040
 8000674:	08007f38 	.word	0x08007f38
 8000678:	080009c9 	.word	0x080009c9

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	@ 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	2234      	movs	r2, #52	@ 0x34
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f007 fbfe 	bl	8007e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	4b22      	ldr	r3, [pc, #136]	@ (800072c <SystemClock_Config+0xb0>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	4a21      	ldr	r2, [pc, #132]	@ (800072c <SystemClock_Config+0xb0>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ac:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <SystemClock_Config+0xb0>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000730 <SystemClock_Config+0xb4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000730 <SystemClock_Config+0xb4>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b19      	ldr	r3, [pc, #100]	@ (8000730 <SystemClock_Config+0xb4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	2302      	movs	r3, #2
 80006d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006dc:	2310      	movs	r3, #16
 80006de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fe35 	bl	8001358 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006f4:	f000 fa0e 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000704:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f001 f8cd 	bl	80018b4 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000720:	f000 f9f8 	bl	8000b14 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3750      	adds	r7, #80	@ 0x50
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	@ 0x30
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b83      	ldr	r3, [pc, #524]	@ (8000958 <MX_GPIO_Init+0x224>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a82      	ldr	r2, [pc, #520]	@ (8000958 <MX_GPIO_Init+0x224>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b80      	ldr	r3, [pc, #512]	@ (8000958 <MX_GPIO_Init+0x224>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	4b7d      	ldr	r3, [pc, #500]	@ (8000958 <MX_GPIO_Init+0x224>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a7c      	ldr	r2, [pc, #496]	@ (8000958 <MX_GPIO_Init+0x224>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b7a      	ldr	r3, [pc, #488]	@ (8000958 <MX_GPIO_Init+0x224>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b77      	ldr	r3, [pc, #476]	@ (8000958 <MX_GPIO_Init+0x224>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a76      	ldr	r2, [pc, #472]	@ (8000958 <MX_GPIO_Init+0x224>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b74      	ldr	r3, [pc, #464]	@ (8000958 <MX_GPIO_Init+0x224>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b71      	ldr	r3, [pc, #452]	@ (8000958 <MX_GPIO_Init+0x224>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a70      	ldr	r2, [pc, #448]	@ (8000958 <MX_GPIO_Init+0x224>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b6e      	ldr	r3, [pc, #440]	@ (8000958 <MX_GPIO_Init+0x224>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	4b6b      	ldr	r3, [pc, #428]	@ (8000958 <MX_GPIO_Init+0x224>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a6a      	ldr	r2, [pc, #424]	@ (8000958 <MX_GPIO_Init+0x224>)
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b68      	ldr	r3, [pc, #416]	@ (8000958 <MX_GPIO_Init+0x224>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0308 	and.w	r3, r3, #8
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007c2:	4b65      	ldr	r3, [pc, #404]	@ (8000958 <MX_GPIO_Init+0x224>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a64      	ldr	r2, [pc, #400]	@ (8000958 <MX_GPIO_Init+0x224>)
 80007c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b62      	ldr	r3, [pc, #392]	@ (8000958 <MX_GPIO_Init+0x224>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f244 0181 	movw	r1, #16513	@ 0x4081
 80007e0:	485e      	ldr	r0, [pc, #376]	@ (800095c <MX_GPIO_Init+0x228>)
 80007e2:	f000 fd61 	bl	80012a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2140      	movs	r1, #64	@ 0x40
 80007ea:	485d      	ldr	r0, [pc, #372]	@ (8000960 <MX_GPIO_Init+0x22c>)
 80007ec:	f000 fd5c 	bl	80012a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	4857      	ldr	r0, [pc, #348]	@ (8000964 <MX_GPIO_Init+0x230>)
 8000808:	f000 fba2 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800080c:	2332      	movs	r3, #50	@ 0x32
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800081c:	230b      	movs	r3, #11
 800081e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	484f      	ldr	r0, [pc, #316]	@ (8000964 <MX_GPIO_Init+0x230>)
 8000828:	f000 fb92 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800082c:	2386      	movs	r3, #134	@ 0x86
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000838:	2303      	movs	r3, #3
 800083a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800083c:	230b      	movs	r3, #11
 800083e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	4848      	ldr	r0, [pc, #288]	@ (8000968 <MX_GPIO_Init+0x234>)
 8000848:	f000 fb82 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800084c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	483d      	ldr	r0, [pc, #244]	@ (800095c <MX_GPIO_Init+0x228>)
 8000866:	f000 fb73 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800086a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800087c:	230b      	movs	r3, #11
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4835      	ldr	r0, [pc, #212]	@ (800095c <MX_GPIO_Init+0x228>)
 8000888:	f000 fb62 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800088c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800089e:	2307      	movs	r3, #7
 80008a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4830      	ldr	r0, [pc, #192]	@ (800096c <MX_GPIO_Init+0x238>)
 80008aa:	f000 fb51 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ae:	2340      	movs	r3, #64	@ 0x40
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4826      	ldr	r0, [pc, #152]	@ (8000960 <MX_GPIO_Init+0x22c>)
 80008c6:	f000 fb43 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ca:	2380      	movs	r3, #128	@ 0x80
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4820      	ldr	r0, [pc, #128]	@ (8000960 <MX_GPIO_Init+0x22c>)
 80008de:	f000 fb37 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008e2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f0:	2303      	movs	r3, #3
 80008f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008f4:	230a      	movs	r3, #10
 80008f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	481a      	ldr	r0, [pc, #104]	@ (8000968 <MX_GPIO_Init+0x234>)
 8000900:	f000 fb26 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000904:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4813      	ldr	r0, [pc, #76]	@ (8000968 <MX_GPIO_Init+0x234>)
 800091a:	f000 fb19 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800091e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000930:	230b      	movs	r3, #11
 8000932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4809      	ldr	r0, [pc, #36]	@ (8000960 <MX_GPIO_Init+0x22c>)
 800093c:	f000 fb08 	bl	8000f50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2107      	movs	r1, #7
 8000944:	2028      	movs	r0, #40	@ 0x28
 8000946:	f000 fad9 	bl	8000efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800094a:	2028      	movs	r0, #40	@ 0x28
 800094c:	f000 faf2 	bl	8000f34 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000950:	bf00      	nop
 8000952:	3730      	adds	r7, #48	@ 0x30
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800
 800095c:	40020400 	.word	0x40020400
 8000960:	40021800 	.word	0x40021800
 8000964:	40020800 	.word	0x40020800
 8000968:	40020000 	.word	0x40020000
 800096c:	40020c00 	.word	0x40020c00

08000970 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */

void button_interrupt_handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af02      	add	r7, sp, #8

	BaseType_t pxHigherPriorityTaskWoken;
	pxHigherPriorityTaskWoken = pdFALSE;
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]

	traceISR_ENTER();
 800097a:	f006 fe93 	bl	80076a4 <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(next_task_handle,0,eNoAction,&pxHigherPriorityTaskWoken);
 800097e:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <button_interrupt_handler+0x50>)
 8000980:	6818      	ldr	r0, [r3, #0]
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	9301      	str	r3, [sp, #4]
 8000986:	2300      	movs	r3, #0
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2300      	movs	r3, #0
 800098c:	2200      	movs	r2, #0
 800098e:	2100      	movs	r1, #0
 8000990:	f003 fb8e 	bl	80040b0 <xTaskGenericNotifyFromISR>

	/* When the ISR exits, the below macro makes the Higher prioirty Task which got unblocked due to Task Notify
	 * to Execute on the CPU.
	 */
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d00a      	beq.n	80009b0 <button_interrupt_handler+0x40>
 800099a:	f006 fee1 	bl	8007760 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <button_interrupt_handler+0x54>)
 80009a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	f3bf 8f4f 	dsb	sy
 80009aa:	f3bf 8f6f 	isb	sy
 80009ae:	e001      	b.n	80009b4 <button_interrupt_handler+0x44>
 80009b0:	f006 feba 	bl	8007728 <SEGGER_SYSVIEW_RecordExitISR>
	traceISR_EXIT();
 80009b4:	f006 feb8 	bl	8007728 <SEGGER_SYSVIEW_RecordExitISR>
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000044 	.word	0x20000044
 80009c4:	e000ed04 	.word	0xe000ed04

080009c8 <led_blue_handler>:


static void led_blue_handler(void* parameters)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED\n");
 80009d0:	4812      	ldr	r0, [pc, #72]	@ (8000a1c <led_blue_handler+0x54>)
 80009d2:	f007 f9ad 	bl	8007d30 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80009d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009da:	4811      	ldr	r0, [pc, #68]	@ (8000a20 <led_blue_handler+0x58>)
 80009dc:	f000 fc7d 	bl	80012da <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL, pdMS_TO_TICKS(1000));
 80009e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	2300      	movs	r3, #0
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2000      	movs	r0, #0
 80009ee:	f003 fac5 	bl	8003f7c <xTaskGenericNotifyWait>
 80009f2:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d1ea      	bne.n	80009d0 <led_blue_handler+0x8>
		{
			portENTER_CRITICAL();
 80009fa:	f004 f97b 	bl	8004cf4 <vPortEnterCritical>
			next_task_handle = NULL;
 80009fe:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <led_blue_handler+0x5c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <led_blue_handler+0x58>)
 8000a0c:	f000 fc4c 	bl	80012a8 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000a10:	f004 f9a6 	bl	8004d60 <vPortExitCritical>
			vTaskDelete(NULL);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f002 fae9 	bl	8002fec <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED\n");
 8000a1a:	e7d9      	b.n	80009d0 <led_blue_handler+0x8>
 8000a1c:	08007f48 	.word	0x08007f48
 8000a20:	40020400 	.word	0x40020400
 8000a24:	20000044 	.word	0x20000044

08000a28 <led_red_handler>:
		}
	}
}

static void led_red_handler(void* parameters)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED\n");
 8000a30:	4812      	ldr	r0, [pc, #72]	@ (8000a7c <led_red_handler+0x54>)
 8000a32:	f007 f97d 	bl	8007d30 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a36:	2180      	movs	r1, #128	@ 0x80
 8000a38:	4811      	ldr	r0, [pc, #68]	@ (8000a80 <led_red_handler+0x58>)
 8000a3a:	f000 fc4e 	bl	80012da <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL, pdMS_TO_TICKS(1000));
 8000a3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2300      	movs	r3, #0
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f003 fa96 	bl	8003f7c <xTaskGenericNotifyWait>
 8000a50:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d1eb      	bne.n	8000a30 <led_red_handler+0x8>
		{
			portENTER_CRITICAL();
 8000a58:	f004 f94c 	bl	8004cf4 <vPortEnterCritical>
			next_task_handle = ledb_handle;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <led_red_handler+0x5c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a09      	ldr	r2, [pc, #36]	@ (8000a88 <led_red_handler+0x60>)
 8000a62:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2180      	movs	r1, #128	@ 0x80
 8000a68:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <led_red_handler+0x58>)
 8000a6a:	f000 fc1d 	bl	80012a8 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000a6e:	f004 f977 	bl	8004d60 <vPortExitCritical>
			vTaskDelete(NULL);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f002 faba 	bl	8002fec <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED\n");
 8000a78:	e7da      	b.n	8000a30 <led_red_handler+0x8>
 8000a7a:	bf00      	nop
 8000a7c:	08007f5c 	.word	0x08007f5c
 8000a80:	40020400 	.word	0x40020400
 8000a84:	20000040 	.word	0x20000040
 8000a88:	20000044 	.word	0x20000044

08000a8c <led_green_handler>:
		}
	}
}

static void led_green_handler(void* parameters)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af02      	add	r7, sp, #8
 8000a92:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED\n");
 8000a94:	4812      	ldr	r0, [pc, #72]	@ (8000ae0 <led_green_handler+0x54>)
 8000a96:	f007 f94b 	bl	8007d30 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4811      	ldr	r0, [pc, #68]	@ (8000ae4 <led_green_handler+0x58>)
 8000a9e:	f000 fc1c 	bl	80012da <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL, pdMS_TO_TICKS(1000));
 8000aa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f003 fa64 	bl	8003f7c <xTaskGenericNotifyWait>
 8000ab4:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d1eb      	bne.n	8000a94 <led_green_handler+0x8>
		{
			portENTER_CRITICAL();
 8000abc:	f004 f91a 	bl	8004cf4 <vPortEnterCritical>
			next_task_handle = ledr_handle;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <led_green_handler+0x5c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a09      	ldr	r2, [pc, #36]	@ (8000aec <led_green_handler+0x60>)
 8000ac6:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2101      	movs	r1, #1
 8000acc:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <led_green_handler+0x58>)
 8000ace:	f000 fbeb 	bl	80012a8 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000ad2:	f004 f945 	bl	8004d60 <vPortExitCritical>
			vTaskDelete(NULL);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f002 fa88 	bl	8002fec <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED\n");
 8000adc:	e7da      	b.n	8000a94 <led_green_handler+0x8>
 8000ade:	bf00      	nop
 8000ae0:	08007f48 	.word	0x08007f48
 8000ae4:	40020400 	.word	0x40020400
 8000ae8:	2000003c 	.word	0x2000003c
 8000aec:	20000044 	.word	0x20000044

08000af0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a04      	ldr	r2, [pc, #16]	@ (8000b10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d101      	bne.n	8000b06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b02:	f000 f923 	bl	8000d4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40001000 	.word	0x40001000

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <Error_Handler+0x8>

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <HAL_MspInit+0x44>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b64 <HAL_MspInit+0x44>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b32:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <HAL_MspInit+0x44>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <HAL_MspInit+0x44>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	4a08      	ldr	r2, [pc, #32]	@ (8000b64 <HAL_MspInit+0x44>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <HAL_MspInit+0x44>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800

08000b68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08e      	sub	sp, #56	@ 0x38
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b78:	4b33      	ldr	r3, [pc, #204]	@ (8000c48 <HAL_InitTick+0xe0>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7c:	4a32      	ldr	r2, [pc, #200]	@ (8000c48 <HAL_InitTick+0xe0>)
 8000b7e:	f043 0310 	orr.w	r3, r3, #16
 8000b82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b84:	4b30      	ldr	r3, [pc, #192]	@ (8000c48 <HAL_InitTick+0xe0>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b88:	f003 0310 	and.w	r3, r3, #16
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b90:	f107 0210 	add.w	r2, r7, #16
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f001 f89a 	bl	8001cd4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d103      	bne.n	8000bb2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000baa:	f001 f87f 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 8000bae:	6378      	str	r0, [r7, #52]	@ 0x34
 8000bb0:	e004      	b.n	8000bbc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bb2:	f001 f87b 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bbe:	4a23      	ldr	r2, [pc, #140]	@ (8000c4c <HAL_InitTick+0xe4>)
 8000bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc4:	0c9b      	lsrs	r3, r3, #18
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bca:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <HAL_InitTick+0xe8>)
 8000bcc:	4a21      	ldr	r2, [pc, #132]	@ (8000c54 <HAL_InitTick+0xec>)
 8000bce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <HAL_InitTick+0xe8>)
 8000bd2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bd6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c50 <HAL_InitTick+0xe8>)
 8000bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bdc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <HAL_InitTick+0xe8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <HAL_InitTick+0xe8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <HAL_InitTick+0xe8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bf0:	4817      	ldr	r0, [pc, #92]	@ (8000c50 <HAL_InitTick+0xe8>)
 8000bf2:	f001 f8a1 	bl	8001d38 <HAL_TIM_Base_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bfc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d11b      	bne.n	8000c3c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c04:	4812      	ldr	r0, [pc, #72]	@ (8000c50 <HAL_InitTick+0xe8>)
 8000c06:	f001 f8f9 	bl	8001dfc <HAL_TIM_Base_Start_IT>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d111      	bne.n	8000c3c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c18:	2036      	movs	r0, #54	@ 0x36
 8000c1a:	f000 f98b 	bl	8000f34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b0f      	cmp	r3, #15
 8000c22:	d808      	bhi.n	8000c36 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c24:	2200      	movs	r2, #0
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	2036      	movs	r0, #54	@ 0x36
 8000c2a:	f000 f967 	bl	8000efc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <HAL_InitTick+0xf0>)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	e002      	b.n	8000c3c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3738      	adds	r7, #56	@ 0x38
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	431bde83 	.word	0x431bde83
 8000c50:	20000048 	.word	0x20000048
 8000c54:	40001000 	.word	0x40001000
 8000c58:	20000004 	.word	0x20000004

08000c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <NMI_Handler+0x4>

08000c64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <MemManage_Handler+0x4>

08000c74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	button_interrupt_handler();
 8000c96:	f7ff fe6b 	bl	8000970 <button_interrupt_handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000c9a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c9e:	f000 fb37 	bl	8001310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cac:	4802      	ldr	r0, [pc, #8]	@ (8000cb8 <TIM6_DAC_IRQHandler+0x10>)
 8000cae:	f001 f91d 	bl	8001eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000048 	.word	0x20000048

08000cbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <SystemInit+0x20>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cc6:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <SystemInit+0x20>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ce0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ce4:	f7ff ffea 	bl	8000cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce8:	480c      	ldr	r0, [pc, #48]	@ (8000d1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cea:	490d      	ldr	r1, [pc, #52]	@ (8000d20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cec:	4a0d      	ldr	r2, [pc, #52]	@ (8000d24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d00:	4c0a      	ldr	r4, [pc, #40]	@ (8000d2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d0e:	f007 f8c5 	bl	8007e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d12:	f7ff fc57 	bl	80005c4 <main>
  bx  lr    
 8000d16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d18:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d20:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d24:	080080bc 	.word	0x080080bc
  ldr r2, =_sbss
 8000d28:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d2c:	2000c4bc 	.word	0x2000c4bc

08000d30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC_IRQHandler>

08000d32 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d36:	2003      	movs	r0, #3
 8000d38:	f000 f8d5 	bl	8000ee6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3c:	200f      	movs	r0, #15
 8000d3e:	f7ff ff13 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d42:	f7ff feed 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_IncTick+0x20>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <HAL_IncTick+0x24>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <HAL_IncTick+0x24>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000094 	.word	0x20000094

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b03      	ldr	r3, [pc, #12]	@ (8000d88 <HAL_GetTick+0x14>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000094 	.word	0x20000094

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <__NVIC_SetPriorityGrouping+0x40>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000db6:	4313      	orrs	r3, r2
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	@ (8000dcc <__NVIC_SetPriorityGrouping+0x40>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00
 8000dd0:	05fa0000 	.word	0x05fa0000

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	@ (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	db0b      	blt.n	8000e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	f003 021f 	and.w	r2, r3, #31
 8000e08:	4907      	ldr	r1, [pc, #28]	@ (8000e28 <__NVIC_EnableIRQ+0x38>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	095b      	lsrs	r3, r3, #5
 8000e10:	2001      	movs	r0, #1
 8000e12:	fa00 f202 	lsl.w	r2, r0, r2
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000e100 	.word	0xe000e100

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db0a      	blt.n	8000e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	490c      	ldr	r1, [pc, #48]	@ (8000e78 <__NVIC_SetPriority+0x4c>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	440b      	add	r3, r1
 8000e50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e54:	e00a      	b.n	8000e6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4908      	ldr	r1, [pc, #32]	@ (8000e7c <__NVIC_SetPriority+0x50>)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	3b04      	subs	r3, #4
 8000e64:	0112      	lsls	r2, r2, #4
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	440b      	add	r3, r1
 8000e6a:	761a      	strb	r2, [r3, #24]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	@ 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f1c3 0307 	rsb	r3, r3, #7
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	bf28      	it	cs
 8000e9e:	2304      	movcs	r3, #4
 8000ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	d902      	bls.n	8000eb0 <NVIC_EncodePriority+0x30>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3b03      	subs	r3, #3
 8000eae:	e000      	b.n	8000eb2 <NVIC_EncodePriority+0x32>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43d9      	mvns	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	4313      	orrs	r3, r2
         );
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3724      	adds	r7, #36	@ 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ff4c 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0e:	f7ff ff61 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	68b9      	ldr	r1, [r7, #8]
 8000f18:	6978      	ldr	r0, [r7, #20]
 8000f1a:	f7ff ffb1 	bl	8000e80 <NVIC_EncodePriority>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f24:	4611      	mov	r1, r2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff80 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f2c:	bf00      	nop
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff54 	bl	8000df0 <__NVIC_EnableIRQ>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	@ 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
 8000f6e:	e175      	b.n	800125c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	f040 8164 	bne.w	8001256 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d005      	beq.n	8000fa6 <HAL_GPIO_Init+0x56>
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d130      	bne.n	8001008 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	091b      	lsrs	r3, r3, #4
 8000ff2:	f003 0201 	and.w	r2, r3, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b03      	cmp	r3, #3
 8001012:	d017      	beq.n	8001044 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d123      	bne.n	8001098 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	69b9      	ldr	r1, [r7, #24]
 8001094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0203 	and.w	r2, r3, #3
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80be 	beq.w	8001256 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	4b66      	ldr	r3, [pc, #408]	@ (8001274 <HAL_GPIO_Init+0x324>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010de:	4a65      	ldr	r2, [pc, #404]	@ (8001274 <HAL_GPIO_Init+0x324>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010e6:	4b63      	ldr	r3, [pc, #396]	@ (8001274 <HAL_GPIO_Init+0x324>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010f2:	4a61      	ldr	r2, [pc, #388]	@ (8001278 <HAL_GPIO_Init+0x328>)
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	220f      	movs	r2, #15
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a58      	ldr	r2, [pc, #352]	@ (800127c <HAL_GPIO_Init+0x32c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d037      	beq.n	800118e <HAL_GPIO_Init+0x23e>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a57      	ldr	r2, [pc, #348]	@ (8001280 <HAL_GPIO_Init+0x330>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d031      	beq.n	800118a <HAL_GPIO_Init+0x23a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a56      	ldr	r2, [pc, #344]	@ (8001284 <HAL_GPIO_Init+0x334>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d02b      	beq.n	8001186 <HAL_GPIO_Init+0x236>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a55      	ldr	r2, [pc, #340]	@ (8001288 <HAL_GPIO_Init+0x338>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d025      	beq.n	8001182 <HAL_GPIO_Init+0x232>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a54      	ldr	r2, [pc, #336]	@ (800128c <HAL_GPIO_Init+0x33c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d01f      	beq.n	800117e <HAL_GPIO_Init+0x22e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a53      	ldr	r2, [pc, #332]	@ (8001290 <HAL_GPIO_Init+0x340>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d019      	beq.n	800117a <HAL_GPIO_Init+0x22a>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a52      	ldr	r2, [pc, #328]	@ (8001294 <HAL_GPIO_Init+0x344>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d013      	beq.n	8001176 <HAL_GPIO_Init+0x226>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a51      	ldr	r2, [pc, #324]	@ (8001298 <HAL_GPIO_Init+0x348>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d00d      	beq.n	8001172 <HAL_GPIO_Init+0x222>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a50      	ldr	r2, [pc, #320]	@ (800129c <HAL_GPIO_Init+0x34c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d007      	beq.n	800116e <HAL_GPIO_Init+0x21e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4f      	ldr	r2, [pc, #316]	@ (80012a0 <HAL_GPIO_Init+0x350>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d101      	bne.n	800116a <HAL_GPIO_Init+0x21a>
 8001166:	2309      	movs	r3, #9
 8001168:	e012      	b.n	8001190 <HAL_GPIO_Init+0x240>
 800116a:	230a      	movs	r3, #10
 800116c:	e010      	b.n	8001190 <HAL_GPIO_Init+0x240>
 800116e:	2308      	movs	r3, #8
 8001170:	e00e      	b.n	8001190 <HAL_GPIO_Init+0x240>
 8001172:	2307      	movs	r3, #7
 8001174:	e00c      	b.n	8001190 <HAL_GPIO_Init+0x240>
 8001176:	2306      	movs	r3, #6
 8001178:	e00a      	b.n	8001190 <HAL_GPIO_Init+0x240>
 800117a:	2305      	movs	r3, #5
 800117c:	e008      	b.n	8001190 <HAL_GPIO_Init+0x240>
 800117e:	2304      	movs	r3, #4
 8001180:	e006      	b.n	8001190 <HAL_GPIO_Init+0x240>
 8001182:	2303      	movs	r3, #3
 8001184:	e004      	b.n	8001190 <HAL_GPIO_Init+0x240>
 8001186:	2302      	movs	r3, #2
 8001188:	e002      	b.n	8001190 <HAL_GPIO_Init+0x240>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <HAL_GPIO_Init+0x240>
 800118e:	2300      	movs	r3, #0
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	f002 0203 	and.w	r2, r2, #3
 8001196:	0092      	lsls	r2, r2, #2
 8001198:	4093      	lsls	r3, r2
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011a0:	4935      	ldr	r1, [pc, #212]	@ (8001278 <HAL_GPIO_Init+0x328>)
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ae:	4b3d      	ldr	r3, [pc, #244]	@ (80012a4 <HAL_GPIO_Init+0x354>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011d2:	4a34      	ldr	r2, [pc, #208]	@ (80012a4 <HAL_GPIO_Init+0x354>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d8:	4b32      	ldr	r3, [pc, #200]	@ (80012a4 <HAL_GPIO_Init+0x354>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011fc:	4a29      	ldr	r2, [pc, #164]	@ (80012a4 <HAL_GPIO_Init+0x354>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001202:	4b28      	ldr	r3, [pc, #160]	@ (80012a4 <HAL_GPIO_Init+0x354>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001226:	4a1f      	ldr	r2, [pc, #124]	@ (80012a4 <HAL_GPIO_Init+0x354>)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800122c:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <HAL_GPIO_Init+0x354>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001250:	4a14      	ldr	r2, [pc, #80]	@ (80012a4 <HAL_GPIO_Init+0x354>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3301      	adds	r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	2b0f      	cmp	r3, #15
 8001260:	f67f ae86 	bls.w	8000f70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3724      	adds	r7, #36	@ 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40013800 	.word	0x40013800
 800127c:	40020000 	.word	0x40020000
 8001280:	40020400 	.word	0x40020400
 8001284:	40020800 	.word	0x40020800
 8001288:	40020c00 	.word	0x40020c00
 800128c:	40021000 	.word	0x40021000
 8001290:	40021400 	.word	0x40021400
 8001294:	40021800 	.word	0x40021800
 8001298:	40021c00 	.word	0x40021c00
 800129c:	40022000 	.word	0x40022000
 80012a0:	40022400 	.word	0x40022400
 80012a4:	40013c00 	.word	0x40013c00

080012a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
 80012b4:	4613      	mov	r3, r2
 80012b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b8:	787b      	ldrb	r3, [r7, #1]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012be:	887a      	ldrh	r2, [r7, #2]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80012c4:	e003      	b.n	80012ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80012c6:	887b      	ldrh	r3, [r7, #2]
 80012c8:	041a      	lsls	r2, r3, #16
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	619a      	str	r2, [r3, #24]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012da:	b480      	push	{r7}
 80012dc:	b085      	sub	sp, #20
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	460b      	mov	r3, r1
 80012e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ec:	887a      	ldrh	r2, [r7, #2]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4013      	ands	r3, r2
 80012f2:	041a      	lsls	r2, r3, #16
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	887b      	ldrh	r3, [r7, #2]
 80012fa:	400b      	ands	r3, r1
 80012fc:	431a      	orrs	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	619a      	str	r2, [r3, #24]
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800131a:	4b08      	ldr	r3, [pc, #32]	@ (800133c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800131c:	695a      	ldr	r2, [r3, #20]
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	4013      	ands	r3, r2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d006      	beq.n	8001334 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001326:	4a05      	ldr	r2, [pc, #20]	@ (800133c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f806 	bl	8001340 <HAL_GPIO_EXTI_Callback>
  }
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40013c00 	.word	0x40013c00

08001340 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e29b      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 8087 	beq.w	800148a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800137c:	4b96      	ldr	r3, [pc, #600]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b04      	cmp	r3, #4
 8001386:	d00c      	beq.n	80013a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001388:	4b93      	ldr	r3, [pc, #588]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	2b08      	cmp	r3, #8
 8001392:	d112      	bne.n	80013ba <HAL_RCC_OscConfig+0x62>
 8001394:	4b90      	ldr	r3, [pc, #576]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800139c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013a0:	d10b      	bne.n	80013ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a2:	4b8d      	ldr	r3, [pc, #564]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d06c      	beq.n	8001488 <HAL_RCC_OscConfig+0x130>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d168      	bne.n	8001488 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e275      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013c2:	d106      	bne.n	80013d2 <HAL_RCC_OscConfig+0x7a>
 80013c4:	4b84      	ldr	r3, [pc, #528]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a83      	ldr	r2, [pc, #524]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	e02e      	b.n	8001430 <HAL_RCC_OscConfig+0xd8>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x9c>
 80013da:	4b7f      	ldr	r3, [pc, #508]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a7e      	ldr	r2, [pc, #504]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b7c      	ldr	r3, [pc, #496]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a7b      	ldr	r2, [pc, #492]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e01d      	b.n	8001430 <HAL_RCC_OscConfig+0xd8>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0xc0>
 80013fe:	4b76      	ldr	r3, [pc, #472]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a75      	ldr	r2, [pc, #468]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b73      	ldr	r3, [pc, #460]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a72      	ldr	r2, [pc, #456]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e00b      	b.n	8001430 <HAL_RCC_OscConfig+0xd8>
 8001418:	4b6f      	ldr	r3, [pc, #444]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a6e      	ldr	r2, [pc, #440]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 800141e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b6c      	ldr	r3, [pc, #432]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a6b      	ldr	r2, [pc, #428]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 800142a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800142e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d013      	beq.n	8001460 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff fc9c 	bl	8000d74 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fc98 	bl	8000d74 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	@ 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e229      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	4b61      	ldr	r3, [pc, #388]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0xe8>
 800145e:	e014      	b.n	800148a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fc88 	bl	8000d74 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fc84 	bl	8000d74 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	@ 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e215      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147a:	4b57      	ldr	r3, [pc, #348]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x110>
 8001486:	e000      	b.n	800148a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d069      	beq.n	800156a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001496:	4b50      	ldr	r3, [pc, #320]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00b      	beq.n	80014ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a2:	4b4d      	ldr	r3, [pc, #308]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d11c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x190>
 80014ae:	4b4a      	ldr	r3, [pc, #296]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d116      	bne.n	80014e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ba:	4b47      	ldr	r3, [pc, #284]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x17a>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e1e9      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d2:	4b41      	ldr	r3, [pc, #260]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	493d      	ldr	r1, [pc, #244]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	e040      	b.n	800156a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d023      	beq.n	8001538 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f0:	4b39      	ldr	r3, [pc, #228]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a38      	ldr	r2, [pc, #224]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff fc3a 	bl	8000d74 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001504:	f7ff fc36 	bl	8000d74 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e1c7      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001516:	4b30      	ldr	r3, [pc, #192]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	4b2d      	ldr	r3, [pc, #180]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4929      	ldr	r1, [pc, #164]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
 8001536:	e018      	b.n	800156a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001538:	4b27      	ldr	r3, [pc, #156]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a26      	ldr	r2, [pc, #152]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 800153e:	f023 0301 	bic.w	r3, r3, #1
 8001542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fc16 	bl	8000d74 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800154c:	f7ff fc12 	bl	8000d74 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e1a3      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155e:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d038      	beq.n	80015e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d019      	beq.n	80015b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157e:	4b16      	ldr	r3, [pc, #88]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001582:	4a15      	ldr	r2, [pc, #84]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158a:	f7ff fbf3 	bl	8000d74 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001592:	f7ff fbef 	bl	8000d74 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e180      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 80015a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x23a>
 80015b0:	e01a      	b.n	80015e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b2:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 80015b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015b6:	4a08      	ldr	r2, [pc, #32]	@ (80015d8 <HAL_RCC_OscConfig+0x280>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015be:	f7ff fbd9 	bl	8000d74 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c4:	e00a      	b.n	80015dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff fbd5 	bl	8000d74 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d903      	bls.n	80015dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e166      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
 80015d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015dc:	4b92      	ldr	r3, [pc, #584]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80015de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1ee      	bne.n	80015c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80a4 	beq.w	800173e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f6:	4b8c      	ldr	r3, [pc, #560]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10d      	bne.n	800161e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b89      	ldr	r3, [pc, #548]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	4a88      	ldr	r2, [pc, #544]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800160c:	6413      	str	r3, [r2, #64]	@ 0x40
 800160e:	4b86      	ldr	r3, [pc, #536]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161a:	2301      	movs	r3, #1
 800161c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800161e:	4b83      	ldr	r3, [pc, #524]	@ (800182c <HAL_RCC_OscConfig+0x4d4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001626:	2b00      	cmp	r3, #0
 8001628:	d118      	bne.n	800165c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800162a:	4b80      	ldr	r3, [pc, #512]	@ (800182c <HAL_RCC_OscConfig+0x4d4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a7f      	ldr	r2, [pc, #508]	@ (800182c <HAL_RCC_OscConfig+0x4d4>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001636:	f7ff fb9d 	bl	8000d74 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163e:	f7ff fb99 	bl	8000d74 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b64      	cmp	r3, #100	@ 0x64
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e12a      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001650:	4b76      	ldr	r3, [pc, #472]	@ (800182c <HAL_RCC_OscConfig+0x4d4>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d106      	bne.n	8001672 <HAL_RCC_OscConfig+0x31a>
 8001664:	4b70      	ldr	r3, [pc, #448]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001668:	4a6f      	ldr	r2, [pc, #444]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001670:	e02d      	b.n	80016ce <HAL_RCC_OscConfig+0x376>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0x33c>
 800167a:	4b6b      	ldr	r3, [pc, #428]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800167e:	4a6a      	ldr	r2, [pc, #424]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	6713      	str	r3, [r2, #112]	@ 0x70
 8001686:	4b68      	ldr	r3, [pc, #416]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800168a:	4a67      	ldr	r2, [pc, #412]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 800168c:	f023 0304 	bic.w	r3, r3, #4
 8001690:	6713      	str	r3, [r2, #112]	@ 0x70
 8001692:	e01c      	b.n	80016ce <HAL_RCC_OscConfig+0x376>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b05      	cmp	r3, #5
 800169a:	d10c      	bne.n	80016b6 <HAL_RCC_OscConfig+0x35e>
 800169c:	4b62      	ldr	r3, [pc, #392]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 800169e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a0:	4a61      	ldr	r2, [pc, #388]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016a8:	4b5f      	ldr	r3, [pc, #380]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80016aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ac:	4a5e      	ldr	r2, [pc, #376]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b4:	e00b      	b.n	80016ce <HAL_RCC_OscConfig+0x376>
 80016b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c2:	4b59      	ldr	r3, [pc, #356]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c6:	4a58      	ldr	r2, [pc, #352]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80016c8:	f023 0304 	bic.w	r3, r3, #4
 80016cc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d015      	beq.n	8001702 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7ff fb4d 	bl	8000d74 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff fb49 	bl	8000d74 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e0d8      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0ee      	beq.n	80016de <HAL_RCC_OscConfig+0x386>
 8001700:	e014      	b.n	800172c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001702:	f7ff fb37 	bl	8000d74 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001708:	e00a      	b.n	8001720 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff fb33 	bl	8000d74 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e0c2      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001720:	4b41      	ldr	r3, [pc, #260]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1ee      	bne.n	800170a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d105      	bne.n	800173e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001732:	4b3d      	ldr	r3, [pc, #244]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	4a3c      	ldr	r2, [pc, #240]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001738:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800173c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 80ae 	beq.w	80018a4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001748:	4b37      	ldr	r3, [pc, #220]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	2b08      	cmp	r3, #8
 8001752:	d06d      	beq.n	8001830 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d14b      	bne.n	80017f4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175c:	4b32      	ldr	r3, [pc, #200]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a31      	ldr	r2, [pc, #196]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001762:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff fb04 	bl	8000d74 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001770:	f7ff fb00 	bl	8000d74 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e091      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001782:	4b29      	ldr	r3, [pc, #164]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69da      	ldr	r2, [r3, #28]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179c:	019b      	lsls	r3, r3, #6
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a4:	085b      	lsrs	r3, r3, #1
 80017a6:	3b01      	subs	r3, #1
 80017a8:	041b      	lsls	r3, r3, #16
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b0:	061b      	lsls	r3, r3, #24
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b8:	071b      	lsls	r3, r3, #28
 80017ba:	491b      	ldr	r1, [pc, #108]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c0:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a18      	ldr	r2, [pc, #96]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80017c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fad2 	bl	8000d74 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d4:	f7ff face 	bl	8000d74 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e05f      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x47c>
 80017f2:	e057      	b.n	80018a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80017fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff fab8 	bl	8000d74 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff fab4 	bl	8000d74 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e045      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181a:	4b03      	ldr	r3, [pc, #12]	@ (8001828 <HAL_RCC_OscConfig+0x4d0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x4b0>
 8001826:	e03d      	b.n	80018a4 <HAL_RCC_OscConfig+0x54c>
 8001828:	40023800 	.word	0x40023800
 800182c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001830:	4b1f      	ldr	r3, [pc, #124]	@ (80018b0 <HAL_RCC_OscConfig+0x558>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d030      	beq.n	80018a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001848:	429a      	cmp	r2, r3
 800184a:	d129      	bne.n	80018a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001856:	429a      	cmp	r2, r3
 8001858:	d122      	bne.n	80018a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001860:	4013      	ands	r3, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001866:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001868:	4293      	cmp	r3, r2
 800186a:	d119      	bne.n	80018a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001876:	085b      	lsrs	r3, r3, #1
 8001878:	3b01      	subs	r3, #1
 800187a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d10f      	bne.n	80018a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d107      	bne.n	80018a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0d0      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 030f 	and.w	r3, r3, #15
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d910      	bls.n	80018fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	4b67      	ldr	r3, [pc, #412]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 020f 	bic.w	r2, r3, #15
 80018e2:	4965      	ldr	r1, [pc, #404]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b63      	ldr	r3, [pc, #396]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0b8      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d020      	beq.n	800194a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001914:	4b59      	ldr	r3, [pc, #356]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4a58      	ldr	r2, [pc, #352]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 800191a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800191e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800192c:	4b53      	ldr	r3, [pc, #332]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	4a52      	ldr	r2, [pc, #328]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001932:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001936:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001938:	4b50      	ldr	r3, [pc, #320]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	494d      	ldr	r1, [pc, #308]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d040      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	4b47      	ldr	r3, [pc, #284]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d115      	bne.n	8001996 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e07f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d107      	bne.n	8001986 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001976:	4b41      	ldr	r3, [pc, #260]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d109      	bne.n	8001996 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e073      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001986:	4b3d      	ldr	r3, [pc, #244]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e06b      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001996:	4b39      	ldr	r3, [pc, #228]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f023 0203 	bic.w	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	4936      	ldr	r1, [pc, #216]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019a8:	f7ff f9e4 	bl	8000d74 <HAL_GetTick>
 80019ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ae:	e00a      	b.n	80019c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b0:	f7ff f9e0 	bl	8000d74 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019be:	4293      	cmp	r3, r2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e053      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 020c 	and.w	r2, r3, #12
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d1eb      	bne.n	80019b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019d8:	4b27      	ldr	r3, [pc, #156]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d210      	bcs.n	8001a08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e6:	4b24      	ldr	r3, [pc, #144]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 020f 	bic.w	r2, r3, #15
 80019ee:	4922      	ldr	r1, [pc, #136]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e032      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d008      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a14:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4916      	ldr	r1, [pc, #88]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d009      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a32:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	490e      	ldr	r1, [pc, #56]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a46:	f000 f821 	bl	8001a8c <HAL_RCC_GetSysClockFreq>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	490a      	ldr	r1, [pc, #40]	@ (8001a80 <HAL_RCC_ClockConfig+0x1cc>)
 8001a58:	5ccb      	ldrb	r3, [r1, r3]
 8001a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5e:	4a09      	ldr	r2, [pc, #36]	@ (8001a84 <HAL_RCC_ClockConfig+0x1d0>)
 8001a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a62:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_RCC_ClockConfig+0x1d4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f87e 	bl	8000b68 <HAL_InitTick>

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	08008058 	.word	0x08008058
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000004 	.word	0x20000004

08001a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a90:	b094      	sub	sp, #80	@ 0x50
 8001a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a98:	2300      	movs	r3, #0
 8001a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aa4:	4b79      	ldr	r3, [pc, #484]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d00d      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x40>
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	f200 80e1 	bhi.w	8001c78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d003      	beq.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001abe:	e0db      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ac0:	4b73      	ldr	r3, [pc, #460]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ac4:	e0db      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ac6:	4b72      	ldr	r3, [pc, #456]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001aca:	e0d8      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001acc:	4b6f      	ldr	r3, [pc, #444]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ad4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d063      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	099b      	lsrs	r3, r3, #6
 8001ae8:	2200      	movs	r2, #0
 8001aea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001aec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001af6:	2300      	movs	r3, #0
 8001af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001afa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001afe:	4622      	mov	r2, r4
 8001b00:	462b      	mov	r3, r5
 8001b02:	f04f 0000 	mov.w	r0, #0
 8001b06:	f04f 0100 	mov.w	r1, #0
 8001b0a:	0159      	lsls	r1, r3, #5
 8001b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b10:	0150      	lsls	r0, r2, #5
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4621      	mov	r1, r4
 8001b18:	1a51      	subs	r1, r2, r1
 8001b1a:	6139      	str	r1, [r7, #16]
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b30:	4659      	mov	r1, fp
 8001b32:	018b      	lsls	r3, r1, #6
 8001b34:	4651      	mov	r1, sl
 8001b36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b3a:	4651      	mov	r1, sl
 8001b3c:	018a      	lsls	r2, r1, #6
 8001b3e:	4651      	mov	r1, sl
 8001b40:	ebb2 0801 	subs.w	r8, r2, r1
 8001b44:	4659      	mov	r1, fp
 8001b46:	eb63 0901 	sbc.w	r9, r3, r1
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b5e:	4690      	mov	r8, r2
 8001b60:	4699      	mov	r9, r3
 8001b62:	4623      	mov	r3, r4
 8001b64:	eb18 0303 	adds.w	r3, r8, r3
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	462b      	mov	r3, r5
 8001b6c:	eb49 0303 	adc.w	r3, r9, r3
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b7e:	4629      	mov	r1, r5
 8001b80:	028b      	lsls	r3, r1, #10
 8001b82:	4621      	mov	r1, r4
 8001b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b88:	4621      	mov	r1, r4
 8001b8a:	028a      	lsls	r2, r1, #10
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b92:	2200      	movs	r2, #0
 8001b94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b9c:	f7fe fb9a 	bl	80002d4 <__aeabi_uldivmod>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ba8:	e058      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001baa:	4b38      	ldr	r3, [pc, #224]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	099b      	lsrs	r3, r3, #6
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bba:	623b      	str	r3, [r7, #32]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bc4:	4642      	mov	r2, r8
 8001bc6:	464b      	mov	r3, r9
 8001bc8:	f04f 0000 	mov.w	r0, #0
 8001bcc:	f04f 0100 	mov.w	r1, #0
 8001bd0:	0159      	lsls	r1, r3, #5
 8001bd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bd6:	0150      	lsls	r0, r2, #5
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4641      	mov	r1, r8
 8001bde:	ebb2 0a01 	subs.w	sl, r2, r1
 8001be2:	4649      	mov	r1, r9
 8001be4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bfc:	ebb2 040a 	subs.w	r4, r2, sl
 8001c00:	eb63 050b 	sbc.w	r5, r3, fp
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	00eb      	lsls	r3, r5, #3
 8001c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c12:	00e2      	lsls	r2, r4, #3
 8001c14:	4614      	mov	r4, r2
 8001c16:	461d      	mov	r5, r3
 8001c18:	4643      	mov	r3, r8
 8001c1a:	18e3      	adds	r3, r4, r3
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	464b      	mov	r3, r9
 8001c20:	eb45 0303 	adc.w	r3, r5, r3
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c32:	4629      	mov	r1, r5
 8001c34:	028b      	lsls	r3, r1, #10
 8001c36:	4621      	mov	r1, r4
 8001c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	028a      	lsls	r2, r1, #10
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c46:	2200      	movs	r2, #0
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	61fa      	str	r2, [r7, #28]
 8001c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c50:	f7fe fb40 	bl	80002d4 <__aeabi_uldivmod>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4613      	mov	r3, r2
 8001c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	3301      	adds	r3, #1
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c76:	e002      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3750      	adds	r7, #80	@ 0x50
 8001c84:	46bd      	mov	sp, r7
 8001c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	00f42400 	.word	0x00f42400

08001c94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c98:	4b03      	ldr	r3, [pc, #12]	@ (8001ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000000 	.word	0x20000000

08001cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cb0:	f7ff fff0 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	0a9b      	lsrs	r3, r3, #10
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4903      	ldr	r1, [pc, #12]	@ (8001cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	08008068 	.word	0x08008068

08001cd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ce4:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0203 	and.w	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d08:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	08db      	lsrs	r3, r3, #3
 8001d0e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d16:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <HAL_RCC_GetClockConfig+0x60>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 020f 	and.w	r2, r3, #15
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	601a      	str	r2, [r3, #0]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40023c00 	.word	0x40023c00

08001d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e049      	b.n	8001dde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d106      	bne.n	8001d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f841 	bl	8001de6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3304      	adds	r3, #4
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f000 f9e8 	bl	800214c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d001      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e054      	b.n	8001ebe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a26      	ldr	r2, [pc, #152]	@ (8001ecc <HAL_TIM_Base_Start_IT+0xd0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d022      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e3e:	d01d      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a22      	ldr	r2, [pc, #136]	@ (8001ed0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d018      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a21      	ldr	r2, [pc, #132]	@ (8001ed4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d013      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1f      	ldr	r2, [pc, #124]	@ (8001ed8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00e      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1e      	ldr	r2, [pc, #120]	@ (8001edc <HAL_TIM_Base_Start_IT+0xe0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d009      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee0 <HAL_TIM_Base_Start_IT+0xe4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d004      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee4 <HAL_TIM_Base_Start_IT+0xe8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d115      	bne.n	8001ea8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	4b19      	ldr	r3, [pc, #100]	@ (8001ee8 <HAL_TIM_Base_Start_IT+0xec>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b06      	cmp	r3, #6
 8001e8c:	d015      	beq.n	8001eba <HAL_TIM_Base_Start_IT+0xbe>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e94:	d011      	beq.n	8001eba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0201 	orr.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea6:	e008      	b.n	8001eba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0201 	orr.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e000      	b.n	8001ebc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40010000 	.word	0x40010000
 8001ed0:	40000400 	.word	0x40000400
 8001ed4:	40000800 	.word	0x40000800
 8001ed8:	40000c00 	.word	0x40000c00
 8001edc:	40010400 	.word	0x40010400
 8001ee0:	40014000 	.word	0x40014000
 8001ee4:	40001800 	.word	0x40001800
 8001ee8:	00010007 	.word	0x00010007

08001eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d020      	beq.n	8001f50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01b      	beq.n	8001f50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0202 	mvn.w	r2, #2
 8001f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f8e9 	bl	800210e <HAL_TIM_IC_CaptureCallback>
 8001f3c:	e005      	b.n	8001f4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f8db 	bl	80020fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f8ec 	bl	8002122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d020      	beq.n	8001f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d01b      	beq.n	8001f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0204 	mvn.w	r2, #4
 8001f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2202      	movs	r2, #2
 8001f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f8c3 	bl	800210e <HAL_TIM_IC_CaptureCallback>
 8001f88:	e005      	b.n	8001f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f8b5 	bl	80020fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f8c6 	bl	8002122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d020      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01b      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0208 	mvn.w	r2, #8
 8001fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f89d 	bl	800210e <HAL_TIM_IC_CaptureCallback>
 8001fd4:	e005      	b.n	8001fe2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f88f 	bl	80020fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f8a0 	bl	8002122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d020      	beq.n	8002034 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01b      	beq.n	8002034 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0210 	mvn.w	r2, #16
 8002004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2208      	movs	r2, #8
 800200a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f877 	bl	800210e <HAL_TIM_IC_CaptureCallback>
 8002020:	e005      	b.n	800202e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f869 	bl	80020fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f87a 	bl	8002122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00c      	beq.n	8002058 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0201 	mvn.w	r2, #1
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7fe fd4c 	bl	8000af0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800205e:	2b00      	cmp	r3, #0
 8002060:	d104      	bne.n	800206c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00c      	beq.n	8002086 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800207e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f919 	bl	80022b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00c      	beq.n	80020aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002096:	2b00      	cmp	r3, #0
 8002098:	d007      	beq.n	80020aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80020a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f911 	bl	80022cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00c      	beq.n	80020ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f834 	bl	8002136 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00c      	beq.n	80020f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d007      	beq.n	80020f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f06f 0220 	mvn.w	r2, #32
 80020ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f8d9 	bl	80022a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a46      	ldr	r2, [pc, #280]	@ (8002278 <TIM_Base_SetConfig+0x12c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d013      	beq.n	800218c <TIM_Base_SetConfig+0x40>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800216a:	d00f      	beq.n	800218c <TIM_Base_SetConfig+0x40>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a43      	ldr	r2, [pc, #268]	@ (800227c <TIM_Base_SetConfig+0x130>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d00b      	beq.n	800218c <TIM_Base_SetConfig+0x40>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a42      	ldr	r2, [pc, #264]	@ (8002280 <TIM_Base_SetConfig+0x134>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d007      	beq.n	800218c <TIM_Base_SetConfig+0x40>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a41      	ldr	r2, [pc, #260]	@ (8002284 <TIM_Base_SetConfig+0x138>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d003      	beq.n	800218c <TIM_Base_SetConfig+0x40>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a40      	ldr	r2, [pc, #256]	@ (8002288 <TIM_Base_SetConfig+0x13c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d108      	bne.n	800219e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a35      	ldr	r2, [pc, #212]	@ (8002278 <TIM_Base_SetConfig+0x12c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d02b      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021ac:	d027      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a32      	ldr	r2, [pc, #200]	@ (800227c <TIM_Base_SetConfig+0x130>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d023      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a31      	ldr	r2, [pc, #196]	@ (8002280 <TIM_Base_SetConfig+0x134>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d01f      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a30      	ldr	r2, [pc, #192]	@ (8002284 <TIM_Base_SetConfig+0x138>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01b      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002288 <TIM_Base_SetConfig+0x13c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d017      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a2e      	ldr	r2, [pc, #184]	@ (800228c <TIM_Base_SetConfig+0x140>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d013      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002290 <TIM_Base_SetConfig+0x144>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00f      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a2c      	ldr	r2, [pc, #176]	@ (8002294 <TIM_Base_SetConfig+0x148>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00b      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002298 <TIM_Base_SetConfig+0x14c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d007      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a2a      	ldr	r2, [pc, #168]	@ (800229c <TIM_Base_SetConfig+0x150>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d003      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a29      	ldr	r2, [pc, #164]	@ (80022a0 <TIM_Base_SetConfig+0x154>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d108      	bne.n	8002210 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4313      	orrs	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a10      	ldr	r2, [pc, #64]	@ (8002278 <TIM_Base_SetConfig+0x12c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d003      	beq.n	8002244 <TIM_Base_SetConfig+0xf8>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a12      	ldr	r2, [pc, #72]	@ (8002288 <TIM_Base_SetConfig+0x13c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d103      	bne.n	800224c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b01      	cmp	r3, #1
 800225c:	d105      	bne.n	800226a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f023 0201 	bic.w	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	611a      	str	r2, [r3, #16]
  }
}
 800226a:	bf00      	nop
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40010000 	.word	0x40010000
 800227c:	40000400 	.word	0x40000400
 8002280:	40000800 	.word	0x40000800
 8002284:	40000c00 	.word	0x40000c00
 8002288:	40010400 	.word	0x40010400
 800228c:	40014000 	.word	0x40014000
 8002290:	40014400 	.word	0x40014400
 8002294:	40014800 	.word	0x40014800
 8002298:	40001800 	.word	0x40001800
 800229c:	40001c00 	.word	0x40001c00
 80022a0:	40002000 	.word	0x40002000

080022a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f103 0208 	add.w	r2, r3, #8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295
 80022f8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f103 0208 	add.w	r2, r3, #8
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f103 0208 	add.w	r2, r3, #8
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002314:	f240 1019 	movw	r0, #281	@ 0x119
 8002318:	f005 fa3e 	bl	8007798 <SEGGER_SYSVIEW_RecordEndCall>
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8002332:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002336:	f005 fa2f 	bl	8007798 <SEGGER_SYSVIEW_RecordEndCall>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
 800237e:	f240 101b 	movw	r0, #283	@ 0x11b
 8002382:	f005 fa09 	bl	8007798 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a4:	d103      	bne.n	80023ae <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	e00c      	b.n	80023c8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3308      	adds	r3, #8
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	e002      	b.n	80023bc <vListInsert+0x2e>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d2f6      	bcs.n	80023b6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 80023f4:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 80023f8:	f005 f9ce 	bl	8007798 <SEGGER_SYSVIEW_RecordEndCall>
}
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6892      	ldr	r2, [r2, #8]
 800241a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6852      	ldr	r2, [r2, #4]
 8002424:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	429a      	cmp	r2, r3
 800242e:	d103      	bne.n	8002438 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	1e5a      	subs	r2, r3, #1
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4619      	mov	r1, r3
 800244e:	f240 101d 	movw	r0, #285	@ 0x11d
 8002452:	f005 f9dd 	bl	8007810 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800246e:	2301      	movs	r3, #1
 8002470:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10d      	bne.n	8002498 <xQueueGenericReset+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 800247c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002480:	b672      	cpsid	i
 8002482:	f383 8811 	msr	BASEPRI, r3
 8002486:	f3bf 8f6f 	isb	sy
 800248a:	f3bf 8f4f 	dsb	sy
 800248e:	b662      	cpsie	i
 8002490:	60fb      	str	r3, [r7, #12]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8002492:	bf00      	nop
 8002494:	bf00      	nop
 8002496:	e7fd      	b.n	8002494 <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d05d      	beq.n	800255a <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d059      	beq.n	800255a <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ae:	2100      	movs	r1, #0
 80024b0:	fba3 2302 	umull	r2, r3, r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d000      	beq.n	80024ba <xQueueGenericReset+0x56>
 80024b8:	2101      	movs	r1, #1
 80024ba:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d14c      	bne.n	800255a <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 80024c0:	f002 fc18 	bl	8004cf4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024cc:	6939      	ldr	r1, [r7, #16]
 80024ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	441a      	add	r2, r3
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	2200      	movs	r2, #0
 80024de:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f0:	3b01      	subs	r3, #1
 80024f2:	6939      	ldr	r1, [r7, #16]
 80024f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	441a      	add	r2, r3
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	22ff      	movs	r2, #255	@ 0xff
 8002504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	22ff      	movs	r2, #255	@ 0xff
 800250c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d114      	bne.n	8002540 <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d01a      	beq.n	8002554 <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	3310      	adds	r3, #16
 8002522:	4618      	mov	r0, r3
 8002524:	f001 fa2c 	bl	8003980 <xTaskRemoveFromEventList>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d012      	beq.n	8002554 <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800252e:	4b19      	ldr	r3, [pc, #100]	@ (8002594 <xQueueGenericReset+0x130>)
 8002530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	f3bf 8f6f 	isb	sy
 800253e:	e009      	b.n	8002554 <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	3310      	adds	r3, #16
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fecb 	bl	80022e0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	3324      	adds	r3, #36	@ 0x24
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fec6 	bl	80022e0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002554:	f002 fc04 	bl	8004d60 <vPortExitCritical>
 8002558:	e001      	b.n	800255e <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10d      	bne.n	8002580 <xQueueGenericReset+0x11c>
    __asm volatile
 8002564:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002568:	b672      	cpsid	i
 800256a:	f383 8811 	msr	BASEPRI, r3
 800256e:	f3bf 8f6f 	isb	sy
 8002572:	f3bf 8f4f 	dsb	sy
 8002576:	b662      	cpsie	i
 8002578:	60bb      	str	r3, [r7, #8]
}
 800257a:	bf00      	nop
 800257c:	bf00      	nop
 800257e:	e7fd      	b.n	800257c <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	4619      	mov	r1, r3
 8002584:	2096      	movs	r0, #150	@ 0x96
 8002586:	f005 f943 	bl	8007810 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800258a:	697b      	ldr	r3, [r7, #20]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	e000ed04 	.word	0xe000ed04

08002598 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002598:	b580      	push	{r7, lr}
 800259a:	b08a      	sub	sp, #40	@ 0x28
 800259c:	af02      	add	r7, sp, #8
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	4613      	mov	r3, r2
 80025a4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d02e      	beq.n	800260e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80025b0:	2100      	movs	r1, #0
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	fba3 2302 	umull	r2, r3, r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d000      	beq.n	80025c0 <xQueueGenericCreate+0x28>
 80025be:	2101      	movs	r1, #1
 80025c0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d123      	bne.n	800260e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80025ce:	f113 0f55 	cmn.w	r3, #85	@ 0x55
 80025d2:	d81c      	bhi.n	800260e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	fb02 f303 	mul.w	r3, r2, r3
 80025dc:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	3354      	adds	r3, #84	@ 0x54
 80025e2:	4618      	mov	r0, r3
 80025e4:	f002 fcc2 	bl	8004f6c <pvPortMalloc>
 80025e8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01f      	beq.n	8002630 <xQueueGenericCreate+0x98>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	3354      	adds	r3, #84	@ 0x54
 80025f8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025fa:	79fa      	ldrb	r2, [r7, #7]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	4613      	mov	r3, r2
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f820 	bl	800264c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800260c:	e010      	b.n	8002630 <xQueueGenericCreate+0x98>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10d      	bne.n	8002630 <xQueueGenericCreate+0x98>
    __asm volatile
 8002614:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002618:	b672      	cpsid	i
 800261a:	f383 8811 	msr	BASEPRI, r3
 800261e:	f3bf 8f6f 	isb	sy
 8002622:	f3bf 8f4f 	dsb	sy
 8002626:	b662      	cpsie	i
 8002628:	613b      	str	r3, [r7, #16]
}
 800262a:	bf00      	nop
 800262c:	bf00      	nop
 800262e:	e7fd      	b.n	800262c <xQueueGenericCreate+0x94>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	4618      	mov	r0, r3
 8002634:	f005 fa86 	bl	8007b44 <SEGGER_SYSVIEW_ShrinkId>
 8002638:	4603      	mov	r3, r0
 800263a:	4619      	mov	r1, r3
 800263c:	2098      	movs	r0, #152	@ 0x98
 800263e:	f005 f8e7 	bl	8007810 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8002642:	69fb      	ldr	r3, [r7, #28]
    }
 8002644:	4618      	mov	r0, r3
 8002646:	3720      	adds	r7, #32
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d103      	bne.n	8002668 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	e002      	b.n	800266e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800267a:	2101      	movs	r1, #1
 800267c:	69b8      	ldr	r0, [r7, #24]
 800267e:	f7ff fef1 	bl	8002464 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
    {
        pxNewQueue->pxQueueSetContainer = NULL;
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2200      	movs	r2, #0
 800268e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08c      	sub	sp, #48	@ 0x30
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80026ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10d      	bne.n	80026ce <xQueueReceive+0x36>
    __asm volatile
 80026b2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80026b6:	b672      	cpsid	i
 80026b8:	f383 8811 	msr	BASEPRI, r3
 80026bc:	f3bf 8f6f 	isb	sy
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	b662      	cpsie	i
 80026c6:	623b      	str	r3, [r7, #32]
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	e7fd      	b.n	80026ca <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d103      	bne.n	80026dc <xQueueReceive+0x44>
 80026d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <xQueueReceive+0x48>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <xQueueReceive+0x4a>
 80026e0:	2300      	movs	r3, #0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10d      	bne.n	8002702 <xQueueReceive+0x6a>
    __asm volatile
 80026e6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80026ea:	b672      	cpsid	i
 80026ec:	f383 8811 	msr	BASEPRI, r3
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	b662      	cpsie	i
 80026fa:	61fb      	str	r3, [r7, #28]
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	e7fd      	b.n	80026fe <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002702:	f001 fb65 	bl	8003dd0 <xTaskGetSchedulerState>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d102      	bne.n	8002712 <xQueueReceive+0x7a>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <xQueueReceive+0x7e>
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <xQueueReceive+0x80>
 8002716:	2300      	movs	r3, #0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10d      	bne.n	8002738 <xQueueReceive+0xa0>
    __asm volatile
 800271c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002720:	b672      	cpsid	i
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	b662      	cpsie	i
 8002730:	61bb      	str	r3, [r7, #24]
}
 8002732:	bf00      	nop
 8002734:	bf00      	nop
 8002736:	e7fd      	b.n	8002734 <xQueueReceive+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002738:	f002 fadc 	bl	8004cf4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800273c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002740:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	2b00      	cmp	r3, #0
 8002746:	d023      	beq.n	8002790 <xQueueReceive+0xf8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800274c:	f000 f902 	bl	8002954 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	1e5a      	subs	r2, r3, #1
 8002754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002756:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00f      	beq.n	8002780 <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002762:	3310      	adds	r3, #16
 8002764:	4618      	mov	r0, r3
 8002766:	f001 f90b 	bl	8003980 <xTaskRemoveFromEventList>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d007      	beq.n	8002780 <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002770:	4b42      	ldr	r3, [pc, #264]	@ (800287c <xQueueReceive+0x1e4>)
 8002772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	f3bf 8f4f 	dsb	sy
 800277c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002780:	f002 faee 	bl	8004d60 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8002784:	2101      	movs	r1, #1
 8002786:	20a4      	movs	r0, #164	@ 0xa4
 8002788:	f005 f842 	bl	8007810 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 800278c:	2301      	movs	r3, #1
 800278e:	e071      	b.n	8002874 <xQueueReceive+0x1dc>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d107      	bne.n	80027a6 <xQueueReceive+0x10e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002796:	f002 fae3 	bl	8004d60 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 800279a:	2100      	movs	r1, #0
 800279c:	20a4      	movs	r0, #164	@ 0xa4
 800279e:	f005 f837 	bl	8007810 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e066      	b.n	8002874 <xQueueReceive+0x1dc>
                }
                else if( xEntryTimeSet == pdFALSE )
 80027a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d106      	bne.n	80027ba <xQueueReceive+0x122>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80027ac:	f107 0310 	add.w	r3, r7, #16
 80027b0:	4618      	mov	r0, r3
 80027b2:	f001 f9c7 	bl	8003b44 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80027b6:	2301      	movs	r3, #1
 80027b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80027ba:	f002 fad1 	bl	8004d60 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80027be:	f000 fd7f 	bl	80032c0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027c2:	f002 fa97 	bl	8004cf4 <vPortEnterCritical>
 80027c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027cc:	b25b      	sxtb	r3, r3
 80027ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d2:	d103      	bne.n	80027dc <xQueueReceive+0x144>
 80027d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027e2:	b25b      	sxtb	r3, r3
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e8:	d103      	bne.n	80027f2 <xQueueReceive+0x15a>
 80027ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027f2:	f002 fab5 	bl	8004d60 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027f6:	1d3a      	adds	r2, r7, #4
 80027f8:	f107 0310 	add.w	r3, r7, #16
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f001 f9b8 	bl	8003b74 <xTaskCheckForTimeOut>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d123      	bne.n	8002852 <xQueueReceive+0x1ba>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800280a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800280c:	f000 f927 	bl	8002a5e <prvIsQueueEmpty>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d017      	beq.n	8002846 <xQueueReceive+0x1ae>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002818:	3324      	adds	r3, #36	@ 0x24
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f001 f838 	bl	8003894 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002824:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002826:	f000 f8bb 	bl	80029a0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800282a:	f000 fd57 	bl	80032dc <xTaskResumeAll>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d181      	bne.n	8002738 <xQueueReceive+0xa0>
                {
                    taskYIELD_WITHIN_API();
 8002834:	4b11      	ldr	r3, [pc, #68]	@ (800287c <xQueueReceive+0x1e4>)
 8002836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	f3bf 8f4f 	dsb	sy
 8002840:	f3bf 8f6f 	isb	sy
 8002844:	e778      	b.n	8002738 <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002848:	f000 f8aa 	bl	80029a0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800284c:	f000 fd46 	bl	80032dc <xTaskResumeAll>
 8002850:	e772      	b.n	8002738 <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002854:	f000 f8a4 	bl	80029a0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002858:	f000 fd40 	bl	80032dc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800285c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800285e:	f000 f8fe 	bl	8002a5e <prvIsQueueEmpty>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	f43f af67 	beq.w	8002738 <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 800286a:	2100      	movs	r1, #0
 800286c:	20a4      	movs	r0, #164	@ 0xa4
 800286e:	f004 ffcf 	bl	8007810 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8002872:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8002874:	4618      	mov	r0, r3
 8002876:	3730      	adds	r7, #48	@ 0x30
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	e000ed04 	.word	0xe000ed04

08002880 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002894:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10d      	bne.n	80028ba <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d14d      	bne.n	8002942 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f001 fab2 	bl	8003e14 <xTaskPriorityDisinherit>
 80028b0:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	e043      	b.n	8002942 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d119      	bne.n	80028f4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6858      	ldr	r0, [r3, #4]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c8:	461a      	mov	r2, r3
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	f005 fb0a 	bl	8007ee4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	441a      	add	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d32b      	bcc.n	8002942 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	e026      	b.n	8002942 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	68d8      	ldr	r0, [r3, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fc:	461a      	mov	r2, r3
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	f005 faf0 	bl	8007ee4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290c:	425b      	negs	r3, r3
 800290e:	441a      	add	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d207      	bcs.n	8002930 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002928:	425b      	negs	r3, r3
 800292a:	441a      	add	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d105      	bne.n	8002942 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	3b01      	subs	r3, #1
 8002940:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800294a:	697b      	ldr	r3, [r7, #20]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d018      	beq.n	8002998 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	441a      	add	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	429a      	cmp	r2, r3
 800297e:	d303      	bcc.n	8002988 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68d9      	ldr	r1, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	461a      	mov	r2, r3
 8002992:	6838      	ldr	r0, [r7, #0]
 8002994:	f005 faa6 	bl	8007ee4 <memcpy>
    }
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80029a8:	f002 f9a4 	bl	8004cf4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029b2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80029b4:	e01e      	b.n	80029f4 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d008      	beq.n	80029d0 <prvUnlockQueue+0x30>
                {
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f8ed 	bl	8002b9e <prvNotifyQueueSetContainer>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d010      	beq.n	80029ec <prvUnlockQueue+0x4c>
                    {
                        /* The queue is a member of a queue set, and posting to
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
 80029ca:	f001 f943 	bl	8003c54 <vTaskMissedYield>
 80029ce:	e00d      	b.n	80029ec <prvUnlockQueue+0x4c>
                else
                {
                    /* Tasks that are removed from the event list will get
                     * added to the pending ready list as the scheduler is still
                     * suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d012      	beq.n	80029fe <prvUnlockQueue+0x5e>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3324      	adds	r3, #36	@ 0x24
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 ffcf 	bl	8003980 <xTaskRemoveFromEventList>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <prvUnlockQueue+0x4c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            vTaskMissedYield();
 80029e8:	f001 f934 	bl	8003c54 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80029f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	dcdc      	bgt.n	80029b6 <prvUnlockQueue+0x16>
 80029fc:	e000      	b.n	8002a00 <prvUnlockQueue+0x60>
                        break;
 80029fe:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	22ff      	movs	r2, #255	@ 0xff
 8002a04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002a08:	f002 f9aa 	bl	8004d60 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002a0c:	f002 f972 	bl	8004cf4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a16:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a18:	e011      	b.n	8002a3e <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d012      	beq.n	8002a48 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3310      	adds	r3, #16
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 ffaa 	bl	8003980 <xTaskRemoveFromEventList>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 8002a32:	f001 f90f 	bl	8003c54 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002a36:	7bbb      	ldrb	r3, [r7, #14]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	dce9      	bgt.n	8002a1a <prvUnlockQueue+0x7a>
 8002a46:	e000      	b.n	8002a4a <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8002a48:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	22ff      	movs	r2, #255	@ 0xff
 8002a4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002a52:	f002 f985 	bl	8004d60 <vPortExitCritical>
}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002a66:	f002 f945 	bl	8004cf4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d102      	bne.n	8002a78 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002a72:	2301      	movs	r3, #1
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	e001      	b.n	8002a7c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002a7c:	f002 f970 	bl	8004d60 <vPortExitCritical>

    return xReturn;
 8002a80:	68fb      	ldr	r3, [r7, #12]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10d      	bne.n	8002abc <vQueueAddToRegistry+0x30>
    __asm volatile
 8002aa0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002aa4:	b672      	cpsid	i
 8002aa6:	f383 8811 	msr	BASEPRI, r3
 8002aaa:	f3bf 8f6f 	isb	sy
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	b662      	cpsie	i
 8002ab4:	60fb      	str	r3, [r7, #12]
}
 8002ab6:	bf00      	nop
 8002ab8:	bf00      	nop
 8002aba:	e7fd      	b.n	8002ab8 <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d024      	beq.n	8002b0c <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	e01e      	b.n	8002b06 <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002ac8:	4a18      	ldr	r2, [pc, #96]	@ (8002b2c <vQueueAddToRegistry+0xa0>)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d105      	bne.n	8002ae4 <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4a13      	ldr	r2, [pc, #76]	@ (8002b2c <vQueueAddToRegistry+0xa0>)
 8002ade:	4413      	add	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
                    break;
 8002ae2:	e013      	b.n	8002b0c <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10a      	bne.n	8002b00 <vQueueAddToRegistry+0x74>
 8002aea:	4a10      	ldr	r2, [pc, #64]	@ (8002b2c <vQueueAddToRegistry+0xa0>)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d104      	bne.n	8002b00 <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4a0c      	ldr	r2, [pc, #48]	@ (8002b2c <vQueueAddToRegistry+0xa0>)
 8002afc:	4413      	add	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	3301      	adds	r3, #1
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2b07      	cmp	r3, #7
 8002b0a:	d9dd      	bls.n	8002ac8 <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8002b1e:	20b6      	movs	r0, #182	@ 0xb6
 8002b20:	f004 fe3a 	bl	8007798 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002b24:	bf00      	nop
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000098 	.word	0x20000098

08002b30 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002b40:	f002 f8d8 	bl	8004cf4 <vPortEnterCritical>
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b4a:	b25b      	sxtb	r3, r3
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b50:	d103      	bne.n	8002b5a <vQueueWaitForMessageRestricted+0x2a>
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b60:	b25b      	sxtb	r3, r3
 8002b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b66:	d103      	bne.n	8002b70 <vQueueWaitForMessageRestricted+0x40>
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b70:	f002 f8f6 	bl	8004d60 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d106      	bne.n	8002b8a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	3324      	adds	r3, #36	@ 0x24
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 feaf 	bl	80038e8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002b8a:	6978      	ldr	r0, [r7, #20]
 8002b8c:	f7ff ff08 	bl	80029a0 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8002b90:	20b9      	movs	r0, #185	@ 0xb9
 8002b92:	f004 fe01 	bl	8007798 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002b96:	bf00      	nop
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b08a      	sub	sp, #40	@ 0x28
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002baa:	623b      	str	r3, [r7, #32]
        BaseType_t xReturn = pdFALSE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10d      	bne.n	8002bd2 <prvNotifyQueueSetContainer+0x34>
    __asm volatile
 8002bb6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002bba:	b672      	cpsid	i
 8002bbc:	f383 8811 	msr	BASEPRI, r3
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	b662      	cpsie	i
 8002bca:	617b      	str	r3, [r7, #20]
}
 8002bcc:	bf00      	nop
 8002bce:	bf00      	nop
 8002bd0:	e7fd      	b.n	8002bce <prvNotifyQueueSetContainer+0x30>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d30d      	bcc.n	8002bfa <prvNotifyQueueSetContainer+0x5c>
    __asm volatile
 8002bde:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002be2:	b672      	cpsid	i
 8002be4:	f383 8811 	msr	BASEPRI, r3
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	b662      	cpsie	i
 8002bf2:	613b      	str	r3, [r7, #16]
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop
 8002bf8:	e7fd      	b.n	8002bf6 <prvNotifyQueueSetContainer+0x58>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d23f      	bcs.n	8002c86 <prvNotifyQueueSetContainer+0xe8>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c0c:	77fb      	strb	r3, [r7, #31]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8002c0e:	1d3b      	adds	r3, r7, #4
 8002c10:	2200      	movs	r2, #0
 8002c12:	4619      	mov	r1, r3
 8002c14:	6a38      	ldr	r0, [r7, #32]
 8002c16:	f7ff fe33 	bl	8002880 <prvCopyDataToQueue>
 8002c1a:	6278      	str	r0, [r7, #36]	@ 0x24

            if( cTxLock == queueUNLOCKED )
 8002c1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c24:	d10e      	bne.n	8002c44 <prvNotifyQueueSetContainer+0xa6>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d02b      	beq.n	8002c86 <prvNotifyQueueSetContainer+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	3324      	adds	r3, #36	@ 0x24
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fea4 	bl	8003980 <xTaskRemoveFromEventList>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d023      	beq.n	8002c86 <prvNotifyQueueSetContainer+0xe8>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c42:	e020      	b.n	8002c86 <prvNotifyQueueSetContainer+0xe8>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
 8002c44:	f000 fc86 	bl	8003554 <uxTaskGetNumberOfTasks>
 8002c48:	61b8      	str	r0, [r7, #24]
 8002c4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d918      	bls.n	8002c86 <prvNotifyQueueSetContainer+0xe8>
 8002c54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002c58:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c5a:	d10d      	bne.n	8002c78 <prvNotifyQueueSetContainer+0xda>
    __asm volatile
 8002c5c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002c60:	b672      	cpsid	i
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	b662      	cpsie	i
 8002c70:	60fb      	str	r3, [r7, #12]
}
 8002c72:	bf00      	nop
 8002c74:	bf00      	nop
 8002c76:	e7fd      	b.n	8002c74 <prvNotifyQueueSetContainer+0xd6>
 8002c78:	7ffb      	ldrb	r3, [r7, #31]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	b25a      	sxtb	r2, r3
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3728      	adds	r7, #40	@ 0x28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	@ 0x28
 8002c94:	af04      	add	r7, sp, #16
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f002 f962 	bl	8004f6c <pvPortMalloc>
 8002ca8:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d013      	beq.n	8002cd8 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002cb0:	2058      	movs	r0, #88	@ 0x58
 8002cb2:	f002 f95b 	bl	8004f6c <pvPortMalloc>
 8002cb6:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d008      	beq.n	8002cd0 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002cbe:	2258      	movs	r2, #88	@ 0x58
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	6978      	ldr	r0, [r7, #20]
 8002cc4:	f005 f8e2 	bl	8007e8c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cce:	e005      	b.n	8002cdc <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002cd0:	6938      	ldr	r0, [r7, #16]
 8002cd2:	f002 fa89 	bl	80051e8 <vPortFree>
 8002cd6:	e001      	b.n	8002cdc <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00d      	beq.n	8002cfe <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	9303      	str	r3, [sp, #12]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	9302      	str	r3, [sp, #8]
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	9301      	str	r3, [sp, #4]
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f82d 	bl	8002d58 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002cfe:	697b      	ldr	r3, [r7, #20]
    }
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f7ff ffb3 	bl	8002c90 <prvCreateTask>
 8002d2a:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002d32:	6938      	ldr	r0, [r7, #16]
 8002d34:	f000 f8a4 	bl	8002e80 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	e002      	b.n	8002d44 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d42:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	4619      	mov	r1, r3
 8002d48:	20c2      	movs	r0, #194	@ 0xc2
 8002d4a:	f004 fd61 	bl	8007810 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002d4e:	697b      	ldr	r3, [r7, #20]
    }
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d68:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	461a      	mov	r2, r3
 8002d70:	21a5      	movs	r1, #165	@ 0xa5
 8002d72:	f005 f88b 	bl	8007e8c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002d80:	440b      	add	r3, r1
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	f023 0307 	bic.w	r3, r3, #7
 8002d8e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00d      	beq.n	8002db6 <prvInitialiseNewTask+0x5e>
    __asm volatile
 8002d9a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002d9e:	b672      	cpsid	i
 8002da0:	f383 8811 	msr	BASEPRI, r3
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	b662      	cpsie	i
 8002dae:	617b      	str	r3, [r7, #20]
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	e7fd      	b.n	8002db2 <prvInitialiseNewTask+0x5a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01e      	beq.n	8002dfa <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	e012      	b.n	8002de8 <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	7819      	ldrb	r1, [r3, #0]
 8002dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	4413      	add	r3, r2
 8002dd0:	3334      	adds	r3, #52	@ 0x34
 8002dd2:	460a      	mov	r2, r1
 8002dd4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	4413      	add	r3, r2
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d006      	beq.n	8002df0 <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3301      	adds	r3, #1
 8002de6:	61fb      	str	r3, [r7, #28]
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	2b09      	cmp	r3, #9
 8002dec:	d9e9      	bls.n	8002dc2 <prvInitialiseNewTask+0x6a>
 8002dee:	e000      	b.n	8002df2 <prvInitialiseNewTask+0x9a>
            {
                break;
 8002df0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d90d      	bls.n	8002e1c <prvInitialiseNewTask+0xc4>
    __asm volatile
 8002e00:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002e04:	b672      	cpsid	i
 8002e06:	f383 8811 	msr	BASEPRI, r3
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	b662      	cpsie	i
 8002e14:	613b      	str	r3, [r7, #16]
}
 8002e16:	bf00      	nop
 8002e18:	bf00      	nop
 8002e1a:	e7fd      	b.n	8002e18 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d901      	bls.n	8002e26 <prvInitialiseNewTask+0xce>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e22:	2304      	movs	r3, #4
 8002e24:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e30:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e34:	3304      	adds	r3, #4
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fa74 	bl	8002324 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3e:	3318      	adds	r3, #24
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fa6f 	bl	8002324 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e4a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e4e:	f1c3 0205 	rsb	r2, r3, #5
 8002e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e54:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e5a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	68f9      	ldr	r1, [r7, #12]
 8002e60:	69b8      	ldr	r0, [r7, #24]
 8002e62:	f001 fde3 	bl	8004a2c <pxPortInitialiseStack>
 8002e66:	4602      	mov	r2, r0
 8002e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6a:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <prvInitialiseNewTask+0x120>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e76:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e78:	bf00      	nop
 8002e7a:	3720      	adds	r7, #32
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002e80:	b5b0      	push	{r4, r5, r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002e88:	f001 ff34 	bl	8004cf4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002e8c:	4b50      	ldr	r3, [pc, #320]	@ (8002fd0 <prvAddNewTaskToReadyList+0x150>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3301      	adds	r3, #1
 8002e92:	4a4f      	ldr	r2, [pc, #316]	@ (8002fd0 <prvAddNewTaskToReadyList+0x150>)
 8002e94:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002e96:	4b4f      	ldr	r3, [pc, #316]	@ (8002fd4 <prvAddNewTaskToReadyList+0x154>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002e9e:	4a4d      	ldr	r2, [pc, #308]	@ (8002fd4 <prvAddNewTaskToReadyList+0x154>)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ea4:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd0 <prvAddNewTaskToReadyList+0x150>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d110      	bne.n	8002ece <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002eac:	f000 fef6 	bl	8003c9c <prvInitialiseTaskLists>
 8002eb0:	e00d      	b.n	8002ece <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002eb2:	4b49      	ldr	r3, [pc, #292]	@ (8002fd8 <prvAddNewTaskToReadyList+0x158>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002eba:	4b46      	ldr	r3, [pc, #280]	@ (8002fd4 <prvAddNewTaskToReadyList+0x154>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d802      	bhi.n	8002ece <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002ec8:	4a42      	ldr	r2, [pc, #264]	@ (8002fd4 <prvAddNewTaskToReadyList+0x154>)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002ece:	4b43      	ldr	r3, [pc, #268]	@ (8002fdc <prvAddNewTaskToReadyList+0x15c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	4a41      	ldr	r2, [pc, #260]	@ (8002fdc <prvAddNewTaskToReadyList+0x15c>)
 8002ed6:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ed8:	4b40      	ldr	r3, [pc, #256]	@ (8002fdc <prvAddNewTaskToReadyList+0x15c>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d016      	beq.n	8002f14 <prvAddNewTaskToReadyList+0x94>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f004 fd05 	bl	80078f8 <SEGGER_SYSVIEW_OnTaskCreate>
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efe:	461d      	mov	r5, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	461c      	mov	r4, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	1ae3      	subs	r3, r4, r3
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	462b      	mov	r3, r5
 8002f10:	f002 fb70 	bl	80055f4 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f004 fd72 	bl	8007a00 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f20:	2201      	movs	r2, #1
 8002f22:	409a      	lsls	r2, r3
 8002f24:	4b2e      	ldr	r3, [pc, #184]	@ (8002fe0 <prvAddNewTaskToReadyList+0x160>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	4a2d      	ldr	r2, [pc, #180]	@ (8002fe0 <prvAddNewTaskToReadyList+0x160>)
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f32:	492c      	ldr	r1, [pc, #176]	@ (8002fe4 <prvAddNewTaskToReadyList+0x164>)
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	3304      	adds	r3, #4
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	609a      	str	r2, [r3, #8]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	3204      	adds	r2, #4
 8002f5a:	605a      	str	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	1d1a      	adds	r2, r3, #4
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe4 <prvAddNewTaskToReadyList+0x164>)
 8002f72:	441a      	add	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	615a      	str	r2, [r3, #20]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f7c:	4919      	ldr	r1, [pc, #100]	@ (8002fe4 <prvAddNewTaskToReadyList+0x164>)
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f8e:	1c59      	adds	r1, r3, #1
 8002f90:	4814      	ldr	r0, [pc, #80]	@ (8002fe4 <prvAddNewTaskToReadyList+0x164>)
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4403      	add	r3, r0
 8002f9c:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002f9e:	f001 fedf 	bl	8004d60 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd8 <prvAddNewTaskToReadyList+0x158>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00e      	beq.n	8002fc8 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8002faa:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd4 <prvAddNewTaskToReadyList+0x154>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d207      	bcs.n	8002fc8 <prvAddNewTaskToReadyList+0x148>
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe8 <prvAddNewTaskToReadyList+0x168>)
 8002fba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bdb0      	pop	{r4, r5, r7, pc}
 8002fd0:	200001b0 	.word	0x200001b0
 8002fd4:	200000d8 	.word	0x200000d8
 8002fd8:	200001bc 	.word	0x200001bc
 8002fdc:	200001cc 	.word	0x200001cc
 8002fe0:	200001b8 	.word	0x200001b8
 8002fe4:	200000dc 	.word	0x200000dc
 8002fe8:	e000ed04 	.word	0xe000ed04

08002fec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8002ff8:	f001 fe7c 	bl	8004cf4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d102      	bne.n	8003008 <vTaskDelete+0x1c>
 8003002:	4b51      	ldr	r3, [pc, #324]	@ (8003148 <vTaskDelete+0x15c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	e000      	b.n	800300a <vTaskDelete+0x1e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	3304      	adds	r3, #4
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff f9f7 	bl	8002404 <uxListRemove>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d115      	bne.n	8003048 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003020:	494a      	ldr	r1, [pc, #296]	@ (800314c <vTaskDelete+0x160>)
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <vTaskDelete+0x5c>
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003036:	2201      	movs	r2, #1
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43da      	mvns	r2, r3
 800303e:	4b44      	ldr	r3, [pc, #272]	@ (8003150 <vTaskDelete+0x164>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4013      	ands	r3, r2
 8003044:	4a42      	ldr	r2, [pc, #264]	@ (8003150 <vTaskDelete+0x164>)
 8003046:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	d004      	beq.n	800305a <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	3318      	adds	r3, #24
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff f9d5 	bl	8002404 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800305a:	4b3e      	ldr	r3, [pc, #248]	@ (8003154 <vTaskDelete+0x168>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	4a3c      	ldr	r2, [pc, #240]	@ (8003154 <vTaskDelete+0x168>)
 8003062:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8003064:	4b38      	ldr	r3, [pc, #224]	@ (8003148 <vTaskDelete+0x15c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	429a      	cmp	r2, r3
 800306c:	d101      	bne.n	8003072 <vTaskDelete+0x86>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <vTaskDelete+0x88>
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8003076:	4b38      	ldr	r3, [pc, #224]	@ (8003158 <vTaskDelete+0x16c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d01d      	beq.n	80030ba <vTaskDelete+0xce>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01a      	beq.n	80030ba <vTaskDelete+0xce>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	3304      	adds	r3, #4
 8003088:	4619      	mov	r1, r3
 800308a:	4834      	ldr	r0, [pc, #208]	@ (800315c <vTaskDelete+0x170>)
 800308c:	f7ff f959 	bl	8002342 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8003090:	4b33      	ldr	r3, [pc, #204]	@ (8003160 <vTaskDelete+0x174>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3301      	adds	r3, #1
 8003096:	4a32      	ldr	r2, [pc, #200]	@ (8003160 <vTaskDelete+0x174>)
 8003098:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4618      	mov	r0, r3
 800309e:	f004 fd51 	bl	8007b44 <SEGGER_SYSVIEW_ShrinkId>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4619      	mov	r1, r3
 80030a6:	20c3      	movs	r0, #195	@ 0xc3
 80030a8:	f003 ff9e 	bl	8006fe8 <SEGGER_SYSVIEW_RecordU32>
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f002 fb08 	bl	80056c4 <SYSVIEW_DeleteTask>

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 80030b4:	2301      	movs	r3, #1
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	e013      	b.n	80030e2 <vTaskDelete+0xf6>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80030ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003164 <vTaskDelete+0x178>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3b01      	subs	r3, #1
 80030c0:	4a28      	ldr	r2, [pc, #160]	@ (8003164 <vTaskDelete+0x178>)
 80030c2:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f004 fd3c 	bl	8007b44 <SEGGER_SYSVIEW_ShrinkId>
 80030cc:	4603      	mov	r3, r0
 80030ce:	4619      	mov	r1, r3
 80030d0:	20c3      	movs	r0, #195	@ 0xc3
 80030d2:	f003 ff89 	bl	8006fe8 <SEGGER_SYSVIEW_RecordU32>
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4618      	mov	r0, r3
 80030da:	f002 faf3 	bl	80056c4 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80030de:	f000 fe5b 	bl	8003d98 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80030e2:	f001 fe3d 	bl	8004d60 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d002      	beq.n	80030f2 <vTaskDelete+0x106>
        {
            prvDeleteTCB( pxTCB );
 80030ec:	6938      	ldr	r0, [r7, #16]
 80030ee:	f000 fe43 	bl	8003d78 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 80030f2:	4b19      	ldr	r3, [pc, #100]	@ (8003158 <vTaskDelete+0x16c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d01e      	beq.n	8003138 <vTaskDelete+0x14c>
            {
                if( pxTCB == pxCurrentTCB )
 80030fa:	4b13      	ldr	r3, [pc, #76]	@ (8003148 <vTaskDelete+0x15c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	429a      	cmp	r2, r3
 8003102:	d119      	bne.n	8003138 <vTaskDelete+0x14c>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8003104:	4b18      	ldr	r3, [pc, #96]	@ (8003168 <vTaskDelete+0x17c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00d      	beq.n	8003128 <vTaskDelete+0x13c>
    __asm volatile
 800310c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003110:	b672      	cpsid	i
 8003112:	f383 8811 	msr	BASEPRI, r3
 8003116:	f3bf 8f6f 	isb	sy
 800311a:	f3bf 8f4f 	dsb	sy
 800311e:	b662      	cpsie	i
 8003120:	60bb      	str	r3, [r7, #8]
}
 8003122:	bf00      	nop
 8003124:	bf00      	nop
 8003126:	e7fd      	b.n	8003124 <vTaskDelete+0x138>
                    taskYIELD_WITHIN_API();
 8003128:	4b10      	ldr	r3, [pc, #64]	@ (800316c <vTaskDelete+0x180>)
 800312a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	f3bf 8f6f 	isb	sy
                }
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
 8003138:	20c3      	movs	r0, #195	@ 0xc3
 800313a:	f004 fb2d 	bl	8007798 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800313e:	bf00      	nop
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	200000d8 	.word	0x200000d8
 800314c:	200000dc 	.word	0x200000dc
 8003150:	200001b8 	.word	0x200001b8
 8003154:	200001cc 	.word	0x200001cc
 8003158:	200001bc 	.word	0x200001bc
 800315c:	20000184 	.word	0x20000184
 8003160:	20000198 	.word	0x20000198
 8003164:	200001b0 	.word	0x200001b0
 8003168:	200001d8 	.word	0x200001d8
 800316c:	e000ed04 	.word	0xe000ed04

08003170 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08a      	sub	sp, #40	@ 0x28
 8003174:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8003176:	2301      	movs	r3, #1
 8003178:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800317a:	2300      	movs	r3, #0
 800317c:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	e011      	b.n	80031a8 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003184:	4a1c      	ldr	r2, [pc, #112]	@ (80031f8 <prvCreateIdleTasks+0x88>)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	4413      	add	r3, r2
 800318a:	7819      	ldrb	r1, [r3, #0]
 800318c:	1d3a      	adds	r2, r7, #4
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	4413      	add	r3, r2
 8003192:	460a      	mov	r2, r1
 8003194:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003196:	1d3a      	adds	r2, r7, #4
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	4413      	add	r3, r2
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d006      	beq.n	80031b0 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	3301      	adds	r3, #1
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2b09      	cmp	r3, #9
 80031ac:	ddea      	ble.n	8003184 <prvCreateIdleTasks+0x14>
 80031ae:	e000      	b.n	80031b2 <prvCreateIdleTasks+0x42>
        {
            break;
 80031b0:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
 80031b6:	e015      	b.n	80031e4 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80031b8:	4b10      	ldr	r3, [pc, #64]	@ (80031fc <prvCreateIdleTasks+0x8c>)
 80031ba:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003200 <prvCreateIdleTasks+0x90>)
 80031c2:	4413      	add	r3, r2
 80031c4:	1d39      	adds	r1, r7, #4
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	2300      	movs	r3, #0
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	2300      	movs	r3, #0
 80031ce:	2282      	movs	r2, #130	@ 0x82
 80031d0:	6938      	ldr	r0, [r7, #16]
 80031d2:	f7ff fd99 	bl	8002d08 <xTaskCreate>
 80031d6:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d006      	beq.n	80031ec <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	3301      	adds	r3, #1
 80031e2:	61bb      	str	r3, [r7, #24]
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	dde6      	ble.n	80031b8 <prvCreateIdleTasks+0x48>
 80031ea:	e000      	b.n	80031ee <prvCreateIdleTasks+0x7e>
        {
            break;
 80031ec:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80031ee:	69fb      	ldr	r3, [r7, #28]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3720      	adds	r7, #32
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	08007f70 	.word	0x08007f70
 80031fc:	08003c6d 	.word	0x08003c6d
 8003200:	200001d4 	.word	0x200001d4

08003204 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800320a:	f7ff ffb1 	bl	8003170 <prvCreateIdleTasks>
 800320e:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d102      	bne.n	800321c <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8003216:	f001 f94f 	bl	80044b8 <xTimerCreateTimerTask>
 800321a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d126      	bne.n	8003270 <vTaskStartScheduler+0x6c>
    __asm volatile
 8003222:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003226:	b672      	cpsid	i
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	b662      	cpsie	i
 8003236:	60bb      	str	r3, [r7, #8]
}
 8003238:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800323a:	4b1b      	ldr	r3, [pc, #108]	@ (80032a8 <vTaskStartScheduler+0xa4>)
 800323c:	f04f 32ff 	mov.w	r2, #4294967295
 8003240:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003242:	4b1a      	ldr	r3, [pc, #104]	@ (80032ac <vTaskStartScheduler+0xa8>)
 8003244:	2201      	movs	r2, #1
 8003246:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003248:	4b19      	ldr	r3, [pc, #100]	@ (80032b0 <vTaskStartScheduler+0xac>)
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800324e:	4b19      	ldr	r3, [pc, #100]	@ (80032b4 <vTaskStartScheduler+0xb0>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4b19      	ldr	r3, [pc, #100]	@ (80032b8 <vTaskStartScheduler+0xb4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d102      	bne.n	8003260 <vTaskStartScheduler+0x5c>
 800325a:	f004 fb31 	bl	80078c0 <SEGGER_SYSVIEW_OnIdle>
 800325e:	e004      	b.n	800326a <vTaskStartScheduler+0x66>
 8003260:	4b15      	ldr	r3, [pc, #84]	@ (80032b8 <vTaskStartScheduler+0xb4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f004 fb89 	bl	800797c <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800326a:	f001 fc73 	bl	8004b54 <xPortStartScheduler>
 800326e:	e011      	b.n	8003294 <vTaskStartScheduler+0x90>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003276:	d10d      	bne.n	8003294 <vTaskStartScheduler+0x90>
    __asm volatile
 8003278:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800327c:	b672      	cpsid	i
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	b662      	cpsie	i
 800328c:	607b      	str	r3, [r7, #4]
}
 800328e:	bf00      	nop
 8003290:	bf00      	nop
 8003292:	e7fd      	b.n	8003290 <vTaskStartScheduler+0x8c>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003294:	4b09      	ldr	r3, [pc, #36]	@ (80032bc <vTaskStartScheduler+0xb8>)
 8003296:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8003298:	20cd      	movs	r0, #205	@ 0xcd
 800329a:	f004 fa7d 	bl	8007798 <SEGGER_SYSVIEW_RecordEndCall>
}
 800329e:	bf00      	nop
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	200001d0 	.word	0x200001d0
 80032ac:	200001bc 	.word	0x200001bc
 80032b0:	200001b4 	.word	0x200001b4
 80032b4:	200001d4 	.word	0x200001d4
 80032b8:	200000d8 	.word	0x200000d8
 80032bc:	2000000c 	.word	0x2000000c

080032c0 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80032c4:	4b04      	ldr	r3, [pc, #16]	@ (80032d8 <vTaskSuspendAll+0x18>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3301      	adds	r3, #1
 80032ca:	4a03      	ldr	r2, [pc, #12]	@ (80032d8 <vTaskSuspendAll+0x18>)
 80032cc:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 80032ce:	20cf      	movs	r0, #207	@ 0xcf
 80032d0:	f004 fa62 	bl	8007798 <SEGGER_SYSVIEW_RecordEndCall>
}
 80032d4:	bf00      	nop
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	200001d8 	.word	0x200001d8

080032dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80032ea:	f001 fd03 	bl	8004cf4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80032f2:	4b7b      	ldr	r3, [pc, #492]	@ (80034e0 <xTaskResumeAll+0x204>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10d      	bne.n	8003316 <xTaskResumeAll+0x3a>
    __asm volatile
 80032fa:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80032fe:	b672      	cpsid	i
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	b662      	cpsie	i
 800330e:	603b      	str	r3, [r7, #0]
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	e7fd      	b.n	8003312 <xTaskResumeAll+0x36>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003316:	4b72      	ldr	r3, [pc, #456]	@ (80034e0 <xTaskResumeAll+0x204>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3b01      	subs	r3, #1
 800331c:	4a70      	ldr	r2, [pc, #448]	@ (80034e0 <xTaskResumeAll+0x204>)
 800331e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003320:	4b6f      	ldr	r3, [pc, #444]	@ (80034e0 <xTaskResumeAll+0x204>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	f040 80ce 	bne.w	80034c6 <xTaskResumeAll+0x1ea>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800332a:	4b6e      	ldr	r3, [pc, #440]	@ (80034e4 <xTaskResumeAll+0x208>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 80c9 	beq.w	80034c6 <xTaskResumeAll+0x1ea>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003334:	e092      	b.n	800345c <xTaskResumeAll+0x180>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003336:	4b6c      	ldr	r3, [pc, #432]	@ (80034e8 <xTaskResumeAll+0x20c>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	6a12      	ldr	r2, [r2, #32]
 800334c:	609a      	str	r2, [r3, #8]
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	69d2      	ldr	r2, [r2, #28]
 8003356:	605a      	str	r2, [r3, #4]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	3318      	adds	r3, #24
 8003360:	429a      	cmp	r2, r3
 8003362:	d103      	bne.n	800336c <xTaskResumeAll+0x90>
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	6a1a      	ldr	r2, [r3, #32]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	2200      	movs	r2, #0
 8003370:	629a      	str	r2, [r3, #40]	@ 0x28
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	1e5a      	subs	r2, r3, #1
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	69fa      	ldr	r2, [r7, #28]
 8003388:	68d2      	ldr	r2, [r2, #12]
 800338a:	609a      	str	r2, [r3, #8]
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	6892      	ldr	r2, [r2, #8]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3304      	adds	r3, #4
 800339e:	429a      	cmp	r2, r3
 80033a0:	d103      	bne.n	80033aa <xTaskResumeAll+0xce>
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	2200      	movs	r2, #0
 80033ae:	615a      	str	r2, [r3, #20]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	1e5a      	subs	r2, r3, #1
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	4618      	mov	r0, r3
 80033be:	f004 fb1f 	bl	8007a00 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c6:	2201      	movs	r2, #1
 80033c8:	409a      	lsls	r2, r3
 80033ca:	4b48      	ldr	r3, [pc, #288]	@ (80034ec <xTaskResumeAll+0x210>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	4a46      	ldr	r2, [pc, #280]	@ (80034ec <xTaskResumeAll+0x210>)
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033d8:	4945      	ldr	r1, [pc, #276]	@ (80034f0 <xTaskResumeAll+0x214>)
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	3304      	adds	r3, #4
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	607b      	str	r3, [r7, #4]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	60da      	str	r2, [r3, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	3204      	adds	r2, #4
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	1d1a      	adds	r2, r3, #4
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	609a      	str	r2, [r3, #8]
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4a36      	ldr	r2, [pc, #216]	@ (80034f0 <xTaskResumeAll+0x214>)
 8003418:	441a      	add	r2, r3
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	615a      	str	r2, [r3, #20]
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003422:	4933      	ldr	r1, [pc, #204]	@ (80034f0 <xTaskResumeAll+0x214>)
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003434:	1c59      	adds	r1, r3, #1
 8003436:	482e      	ldr	r0, [pc, #184]	@ (80034f0 <xTaskResumeAll+0x214>)
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4403      	add	r3, r0
 8003442:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003448:	4b2a      	ldr	r3, [pc, #168]	@ (80034f4 <xTaskResumeAll+0x218>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344e:	429a      	cmp	r2, r3
 8003450:	d904      	bls.n	800345c <xTaskResumeAll+0x180>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003452:	4a29      	ldr	r2, [pc, #164]	@ (80034f8 <xTaskResumeAll+0x21c>)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	2101      	movs	r1, #1
 8003458:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800345c:	4b22      	ldr	r3, [pc, #136]	@ (80034e8 <xTaskResumeAll+0x20c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	f47f af68 	bne.w	8003336 <xTaskResumeAll+0x5a>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <xTaskResumeAll+0x194>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800346c:	f000 fc94 	bl	8003d98 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003470:	4b22      	ldr	r3, [pc, #136]	@ (80034fc <xTaskResumeAll+0x220>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d012      	beq.n	80034a2 <xTaskResumeAll+0x1c6>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800347c:	f000 f878 	bl	8003570 <xTaskIncrementTick>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d004      	beq.n	8003490 <xTaskResumeAll+0x1b4>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003486:	4a1c      	ldr	r2, [pc, #112]	@ (80034f8 <xTaskResumeAll+0x21c>)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2101      	movs	r1, #1
 800348c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	3b01      	subs	r3, #1
 8003494:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1ef      	bne.n	800347c <xTaskResumeAll+0x1a0>

                            xPendedTicks = 0;
 800349c:	4b17      	ldr	r3, [pc, #92]	@ (80034fc <xTaskResumeAll+0x220>)
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80034a2:	4a15      	ldr	r2, [pc, #84]	@ (80034f8 <xTaskResumeAll+0x21c>)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <xTaskResumeAll+0x1ea>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80034ae:	2301      	movs	r3, #1
 80034b0:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80034b2:	4b10      	ldr	r3, [pc, #64]	@ (80034f4 <xTaskResumeAll+0x218>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4b12      	ldr	r3, [pc, #72]	@ (8003500 <xTaskResumeAll+0x224>)
 80034b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80034c6:	f001 fc4b 	bl	8004d60 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	4619      	mov	r1, r3
 80034ce:	20d0      	movs	r0, #208	@ 0xd0
 80034d0:	f004 f99e 	bl	8007810 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 80034d4:	69bb      	ldr	r3, [r7, #24]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3720      	adds	r7, #32
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	200001d8 	.word	0x200001d8
 80034e4:	200001b0 	.word	0x200001b0
 80034e8:	20000170 	.word	0x20000170
 80034ec:	200001b8 	.word	0x200001b8
 80034f0:	200000dc 	.word	0x200000dc
 80034f4:	200000d8 	.word	0x200000d8
 80034f8:	200001c4 	.word	0x200001c4
 80034fc:	200001c0 	.word	0x200001c0
 8003500:	e000ed04 	.word	0xe000ed04

08003504 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800350a:	4b06      	ldr	r3, [pc, #24]	@ (8003524 <xTaskGetTickCount+0x20>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	20d1      	movs	r0, #209	@ 0xd1
 8003514:	f004 f97c 	bl	8007810 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003518:	687b      	ldr	r3, [r7, #4]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	200001b4 	.word	0x200001b4

08003528 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800352e:	f001 fcd7 	bl	8004ee0 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003532:	2300      	movs	r3, #0
 8003534:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003536:	4b06      	ldr	r3, [pc, #24]	@ (8003550 <xTaskGetTickCountFromISR+0x28>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 800353c:	6839      	ldr	r1, [r7, #0]
 800353e:	20d2      	movs	r0, #210	@ 0xd2
 8003540:	f004 f966 	bl	8007810 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003544:	683b      	ldr	r3, [r7, #0]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200001b4 	.word	0x200001b4

08003554 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
    traceENTER_uxTaskGetNumberOfTasks();

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );
 8003558:	4b04      	ldr	r3, [pc, #16]	@ (800356c <uxTaskGetNumberOfTasks+0x18>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4619      	mov	r1, r3
 800355e:	20d3      	movs	r0, #211	@ 0xd3
 8003560:	f004 f956 	bl	8007810 <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxCurrentNumberOfTasks;
 8003564:	4b01      	ldr	r3, [pc, #4]	@ (800356c <uxTaskGetNumberOfTasks+0x18>)
 8003566:	681b      	ldr	r3, [r3, #0]
}
 8003568:	4618      	mov	r0, r3
 800356a:	bd80      	pop	{r7, pc}
 800356c:	200001b0 	.word	0x200001b0

08003570 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	@ 0x28
 8003574:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003576:	2300      	movs	r3, #0
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800357a:	4b84      	ldr	r3, [pc, #528]	@ (800378c <xTaskIncrementTick+0x21c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	f040 80f5 	bne.w	800376e <xTaskIncrementTick+0x1fe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003584:	4b82      	ldr	r3, [pc, #520]	@ (8003790 <xTaskIncrementTick+0x220>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3301      	adds	r3, #1
 800358a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800358c:	4a80      	ldr	r2, [pc, #512]	@ (8003790 <xTaskIncrementTick+0x220>)
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d123      	bne.n	80035e0 <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 8003598:	4b7e      	ldr	r3, [pc, #504]	@ (8003794 <xTaskIncrementTick+0x224>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00d      	beq.n	80035be <xTaskIncrementTick+0x4e>
    __asm volatile
 80035a2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80035a6:	b672      	cpsid	i
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	b662      	cpsie	i
 80035b6:	607b      	str	r3, [r7, #4]
}
 80035b8:	bf00      	nop
 80035ba:	bf00      	nop
 80035bc:	e7fd      	b.n	80035ba <xTaskIncrementTick+0x4a>
 80035be:	4b75      	ldr	r3, [pc, #468]	@ (8003794 <xTaskIncrementTick+0x224>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	61fb      	str	r3, [r7, #28]
 80035c4:	4b74      	ldr	r3, [pc, #464]	@ (8003798 <xTaskIncrementTick+0x228>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a72      	ldr	r2, [pc, #456]	@ (8003794 <xTaskIncrementTick+0x224>)
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	4a72      	ldr	r2, [pc, #456]	@ (8003798 <xTaskIncrementTick+0x228>)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	4b72      	ldr	r3, [pc, #456]	@ (800379c <xTaskIncrementTick+0x22c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	3301      	adds	r3, #1
 80035d8:	4a70      	ldr	r2, [pc, #448]	@ (800379c <xTaskIncrementTick+0x22c>)
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	f000 fbdc 	bl	8003d98 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80035e0:	4b6f      	ldr	r3, [pc, #444]	@ (80037a0 <xTaskIncrementTick+0x230>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6a3a      	ldr	r2, [r7, #32]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	f0c0 80ac 	bcc.w	8003744 <xTaskIncrementTick+0x1d4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035ec:	4b69      	ldr	r3, [pc, #420]	@ (8003794 <xTaskIncrementTick+0x224>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d104      	bne.n	8003600 <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80035f6:	4b6a      	ldr	r3, [pc, #424]	@ (80037a0 <xTaskIncrementTick+0x230>)
 80035f8:	f04f 32ff 	mov.w	r2, #4294967295
 80035fc:	601a      	str	r2, [r3, #0]
                    break;
 80035fe:	e0a1      	b.n	8003744 <xTaskIncrementTick+0x1d4>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003600:	4b64      	ldr	r3, [pc, #400]	@ (8003794 <xTaskIncrementTick+0x224>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003610:	6a3a      	ldr	r2, [r7, #32]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	429a      	cmp	r2, r3
 8003616:	d203      	bcs.n	8003620 <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003618:	4a61      	ldr	r2, [pc, #388]	@ (80037a0 <xTaskIncrementTick+0x230>)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	6013      	str	r3, [r2, #0]
                        break;
 800361e:	e091      	b.n	8003744 <xTaskIncrementTick+0x1d4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	68d2      	ldr	r2, [r2, #12]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	6892      	ldr	r2, [r2, #8]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	3304      	adds	r3, #4
 8003642:	429a      	cmp	r2, r3
 8003644:	d103      	bne.n	800364e <xTaskIncrementTick+0xde>
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	605a      	str	r2, [r3, #4]
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	2200      	movs	r2, #0
 8003652:	615a      	str	r2, [r3, #20]
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	1e5a      	subs	r2, r3, #1
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003662:	2b00      	cmp	r3, #0
 8003664:	d01e      	beq.n	80036a4 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	6a12      	ldr	r2, [r2, #32]
 8003674:	609a      	str	r2, [r3, #8]
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	69d2      	ldr	r2, [r2, #28]
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	3318      	adds	r3, #24
 8003688:	429a      	cmp	r2, r3
 800368a:	d103      	bne.n	8003694 <xTaskIncrementTick+0x124>
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	6a1a      	ldr	r2, [r3, #32]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	605a      	str	r2, [r3, #4]
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2200      	movs	r2, #0
 8003698:	629a      	str	r2, [r3, #40]	@ 0x28
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	1e5a      	subs	r2, r3, #1
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f004 f9aa 	bl	8007a00 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b0:	2201      	movs	r2, #1
 80036b2:	409a      	lsls	r2, r3
 80036b4:	4b3b      	ldr	r3, [pc, #236]	@ (80037a4 <xTaskIncrementTick+0x234>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	4a3a      	ldr	r2, [pc, #232]	@ (80037a4 <xTaskIncrementTick+0x234>)
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c2:	4939      	ldr	r1, [pc, #228]	@ (80037a8 <xTaskIncrementTick+0x238>)
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	3304      	adds	r3, #4
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	609a      	str	r2, [r3, #8]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	3204      	adds	r2, #4
 80036ea:	605a      	str	r2, [r3, #4]
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	1d1a      	adds	r2, r3, #4
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4a29      	ldr	r2, [pc, #164]	@ (80037a8 <xTaskIncrementTick+0x238>)
 8003702:	441a      	add	r2, r3
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	615a      	str	r2, [r3, #20]
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800370c:	4926      	ldr	r1, [pc, #152]	@ (80037a8 <xTaskIncrementTick+0x238>)
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800371e:	1c59      	adds	r1, r3, #1
 8003720:	4821      	ldr	r0, [pc, #132]	@ (80037a8 <xTaskIncrementTick+0x238>)
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4403      	add	r3, r0
 800372c:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003732:	4b1e      	ldr	r3, [pc, #120]	@ (80037ac <xTaskIncrementTick+0x23c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003738:	429a      	cmp	r2, r3
 800373a:	f67f af57 	bls.w	80035ec <xTaskIncrementTick+0x7c>
                            {
                                xSwitchRequired = pdTRUE;
 800373e:	2301      	movs	r3, #1
 8003740:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003742:	e753      	b.n	80035ec <xTaskIncrementTick+0x7c>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8003744:	4b19      	ldr	r3, [pc, #100]	@ (80037ac <xTaskIncrementTick+0x23c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800374a:	4917      	ldr	r1, [pc, #92]	@ (80037a8 <xTaskIncrementTick+0x238>)
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d901      	bls.n	8003760 <xTaskIncrementTick+0x1f0>
                {
                    xSwitchRequired = pdTRUE;
 800375c:	2301      	movs	r3, #1
 800375e:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8003760:	4b13      	ldr	r3, [pc, #76]	@ (80037b0 <xTaskIncrementTick+0x240>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <xTaskIncrementTick+0x208>
                {
                    xSwitchRequired = pdTRUE;
 8003768:	2301      	movs	r3, #1
 800376a:	627b      	str	r3, [r7, #36]	@ 0x24
 800376c:	e004      	b.n	8003778 <xTaskIncrementTick+0x208>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800376e:	4b11      	ldr	r3, [pc, #68]	@ (80037b4 <xTaskIncrementTick+0x244>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3301      	adds	r3, #1
 8003774:	4a0f      	ldr	r2, [pc, #60]	@ (80037b4 <xTaskIncrementTick+0x244>)
 8003776:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8003778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377a:	4619      	mov	r1, r3
 800377c:	20db      	movs	r0, #219	@ 0xdb
 800377e:	f004 f847 	bl	8007810 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003784:	4618      	mov	r0, r3
 8003786:	3728      	adds	r7, #40	@ 0x28
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	200001d8 	.word	0x200001d8
 8003790:	200001b4 	.word	0x200001b4
 8003794:	20000168 	.word	0x20000168
 8003798:	2000016c 	.word	0x2000016c
 800379c:	200001c8 	.word	0x200001c8
 80037a0:	200001d0 	.word	0x200001d0
 80037a4:	200001b8 	.word	0x200001b8
 80037a8:	200000dc 	.word	0x200000dc
 80037ac:	200000d8 	.word	0x200000d8
 80037b0:	200001c4 	.word	0x200001c4
 80037b4:	200001c0 	.word	0x200001c0

080037b8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80037be:	4b2f      	ldr	r3, [pc, #188]	@ (800387c <vTaskSwitchContext+0xc4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80037c6:	4b2e      	ldr	r3, [pc, #184]	@ (8003880 <vTaskSwitchContext+0xc8>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80037cc:	e051      	b.n	8003872 <vTaskSwitchContext+0xba>
            xYieldPendings[ 0 ] = pdFALSE;
 80037ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003880 <vTaskSwitchContext+0xc8>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80037d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003884 <vTaskSwitchContext+0xcc>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	fab3 f383 	clz	r3, r3
 80037e0:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 80037e2:	7afb      	ldrb	r3, [r7, #11]
 80037e4:	f1c3 031f 	rsb	r3, r3, #31
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	4927      	ldr	r1, [pc, #156]	@ (8003888 <vTaskSwitchContext+0xd0>)
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10d      	bne.n	800381a <vTaskSwitchContext+0x62>
    __asm volatile
 80037fe:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003802:	b672      	cpsid	i
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	b662      	cpsie	i
 8003812:	607b      	str	r3, [r7, #4]
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	e7fd      	b.n	8003816 <vTaskSwitchContext+0x5e>
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4a18      	ldr	r2, [pc, #96]	@ (8003888 <vTaskSwitchContext+0xd0>)
 8003826:	4413      	add	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	605a      	str	r2, [r3, #4]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	3308      	adds	r3, #8
 800383c:	429a      	cmp	r2, r3
 800383e:	d103      	bne.n	8003848 <vTaskSwitchContext+0x90>
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	4a0f      	ldr	r2, [pc, #60]	@ (800388c <vTaskSwitchContext+0xd4>)
 8003850:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8003852:	4b0f      	ldr	r3, [pc, #60]	@ (8003890 <vTaskSwitchContext+0xd8>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	4b0d      	ldr	r3, [pc, #52]	@ (800388c <vTaskSwitchContext+0xd4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d102      	bne.n	8003864 <vTaskSwitchContext+0xac>
 800385e:	f004 f82f 	bl	80078c0 <SEGGER_SYSVIEW_OnIdle>
 8003862:	e004      	b.n	800386e <vTaskSwitchContext+0xb6>
 8003864:	4b09      	ldr	r3, [pc, #36]	@ (800388c <vTaskSwitchContext+0xd4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f004 f887 	bl	800797c <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800386e:	4b07      	ldr	r3, [pc, #28]	@ (800388c <vTaskSwitchContext+0xd4>)
 8003870:	681b      	ldr	r3, [r3, #0]
    }
 8003872:	bf00      	nop
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	200001d8 	.word	0x200001d8
 8003880:	200001c4 	.word	0x200001c4
 8003884:	200001b8 	.word	0x200001b8
 8003888:	200000dc 	.word	0x200000dc
 800388c:	200000d8 	.word	0x200000d8
 8003890:	200001d4 	.word	0x200001d4

08003894 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10d      	bne.n	80038c0 <vTaskPlaceOnEventList+0x2c>
    __asm volatile
 80038a4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80038a8:	b672      	cpsid	i
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	b662      	cpsie	i
 80038b8:	60fb      	str	r3, [r7, #12]
}
 80038ba:	bf00      	nop
 80038bc:	bf00      	nop
 80038be:	e7fd      	b.n	80038bc <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038c0:	4b08      	ldr	r3, [pc, #32]	@ (80038e4 <vTaskPlaceOnEventList+0x50>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3318      	adds	r3, #24
 80038c6:	4619      	mov	r1, r3
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7fe fd60 	bl	800238e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038ce:	2101      	movs	r1, #1
 80038d0:	6838      	ldr	r0, [r7, #0]
 80038d2:	f000 fd63 	bl	800439c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 80038d6:	20e1      	movs	r0, #225	@ 0xe1
 80038d8:	f003 ff5e 	bl	8007798 <SEGGER_SYSVIEW_RecordEndCall>
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	200000d8 	.word	0x200000d8

080038e8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10d      	bne.n	8003916 <vTaskPlaceOnEventListRestricted+0x2e>
    __asm volatile
 80038fa:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80038fe:	b672      	cpsid	i
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	b662      	cpsie	i
 800390e:	613b      	str	r3, [r7, #16]
}
 8003910:	bf00      	nop
 8003912:	bf00      	nop
 8003914:	e7fd      	b.n	8003912 <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	4b17      	ldr	r3, [pc, #92]	@ (800397c <vTaskPlaceOnEventListRestricted+0x94>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	61da      	str	r2, [r3, #28]
 8003924:	4b15      	ldr	r3, [pc, #84]	@ (800397c <vTaskPlaceOnEventListRestricted+0x94>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	6892      	ldr	r2, [r2, #8]
 800392c:	621a      	str	r2, [r3, #32]
 800392e:	4b13      	ldr	r3, [pc, #76]	@ (800397c <vTaskPlaceOnEventListRestricted+0x94>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	3218      	adds	r2, #24
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	4b10      	ldr	r3, [pc, #64]	@ (800397c <vTaskPlaceOnEventListRestricted+0x94>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f103 0218 	add.w	r2, r3, #24
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	609a      	str	r2, [r3, #8]
 8003946:	4b0d      	ldr	r3, [pc, #52]	@ (800397c <vTaskPlaceOnEventListRestricted+0x94>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	629a      	str	r2, [r3, #40]	@ 0x28
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 800395e:	f04f 33ff 	mov.w	r3, #4294967295
 8003962:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	68b8      	ldr	r0, [r7, #8]
 8003968:	f000 fd18 	bl	800439c <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 800396c:	20e3      	movs	r0, #227	@ 0xe3
 800396e:	f003 ff13 	bl	8007798 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003972:	bf00      	nop
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	200000d8 	.word	0x200000d8

08003980 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08a      	sub	sp, #40	@ 0x28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10d      	bne.n	80039b2 <xTaskRemoveFromEventList+0x32>
    __asm volatile
 8003996:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800399a:	b672      	cpsid	i
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	b662      	cpsie	i
 80039aa:	60fb      	str	r3, [r7, #12]
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	e7fd      	b.n	80039ae <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b6:	61fb      	str	r3, [r7, #28]
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	6a3a      	ldr	r2, [r7, #32]
 80039be:	6a12      	ldr	r2, [r2, #32]
 80039c0:	609a      	str	r2, [r3, #8]
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	6a3a      	ldr	r2, [r7, #32]
 80039c8:	69d2      	ldr	r2, [r2, #28]
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	3318      	adds	r3, #24
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d103      	bne.n	80039e0 <xTaskRemoveFromEventList+0x60>
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	6a1a      	ldr	r2, [r3, #32]
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	605a      	str	r2, [r3, #4]
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	2200      	movs	r2, #0
 80039e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	1e5a      	subs	r2, r3, #1
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80039f0:	4b4e      	ldr	r3, [pc, #312]	@ (8003b2c <xTaskRemoveFromEventList+0x1ac>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d164      	bne.n	8003ac2 <xTaskRemoveFromEventList+0x142>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	6a3a      	ldr	r2, [r7, #32]
 8003a04:	68d2      	ldr	r2, [r2, #12]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	6a3a      	ldr	r2, [r7, #32]
 8003a0e:	6892      	ldr	r2, [r2, #8]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d103      	bne.n	8003a26 <xTaskRemoveFromEventList+0xa6>
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	615a      	str	r2, [r3, #20]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	1e5a      	subs	r2, r3, #1
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f003 ffe1 	bl	8007a00 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a42:	2201      	movs	r2, #1
 8003a44:	409a      	lsls	r2, r3
 8003a46:	4b3a      	ldr	r3, [pc, #232]	@ (8003b30 <xTaskRemoveFromEventList+0x1b0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	4a38      	ldr	r2, [pc, #224]	@ (8003b30 <xTaskRemoveFromEventList+0x1b0>)
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a54:	4937      	ldr	r1, [pc, #220]	@ (8003b34 <xTaskRemoveFromEventList+0x1b4>)
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	3304      	adds	r3, #4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	609a      	str	r2, [r3, #8]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	60da      	str	r2, [r3, #12]
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	6a3a      	ldr	r2, [r7, #32]
 8003a7a:	3204      	adds	r2, #4
 8003a7c:	605a      	str	r2, [r3, #4]
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	1d1a      	adds	r2, r3, #4
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	609a      	str	r2, [r3, #8]
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4a28      	ldr	r2, [pc, #160]	@ (8003b34 <xTaskRemoveFromEventList+0x1b4>)
 8003a94:	441a      	add	r2, r3
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	615a      	str	r2, [r3, #20]
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a9e:	4925      	ldr	r1, [pc, #148]	@ (8003b34 <xTaskRemoveFromEventList+0x1b4>)
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6a3a      	ldr	r2, [r7, #32]
 8003aae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003ab0:	1c59      	adds	r1, r3, #1
 8003ab2:	4820      	ldr	r0, [pc, #128]	@ (8003b34 <xTaskRemoveFromEventList+0x1b4>)
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4403      	add	r3, r0
 8003abe:	6019      	str	r1, [r3, #0]
 8003ac0:	e01b      	b.n	8003afa <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b38 <xTaskRemoveFromEventList+0x1b8>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	61bb      	str	r3, [r7, #24]
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	61da      	str	r2, [r3, #28]
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	621a      	str	r2, [r3, #32]
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	6a3a      	ldr	r2, [r7, #32]
 8003adc:	3218      	adds	r2, #24
 8003ade:	605a      	str	r2, [r3, #4]
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	f103 0218 	add.w	r2, r3, #24
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	609a      	str	r2, [r3, #8]
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	4a12      	ldr	r2, [pc, #72]	@ (8003b38 <xTaskRemoveFromEventList+0x1b8>)
 8003aee:	629a      	str	r2, [r3, #40]	@ 0x28
 8003af0:	4b11      	ldr	r3, [pc, #68]	@ (8003b38 <xTaskRemoveFromEventList+0x1b8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3301      	adds	r3, #1
 8003af6:	4a10      	ldr	r2, [pc, #64]	@ (8003b38 <xTaskRemoveFromEventList+0x1b8>)
 8003af8:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003afe:	4b0f      	ldr	r3, [pc, #60]	@ (8003b3c <xTaskRemoveFromEventList+0x1bc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d905      	bls.n	8003b14 <xTaskRemoveFromEventList+0x194>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b40 <xTaskRemoveFromEventList+0x1c0>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	e001      	b.n	8003b18 <xTaskRemoveFromEventList+0x198>
        }
        else
        {
            xReturn = pdFALSE;
 8003b14:	2300      	movs	r3, #0
 8003b16:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8003b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	20e4      	movs	r0, #228	@ 0xe4
 8003b1e:	f003 fe77 	bl	8007810 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3728      	adds	r7, #40	@ 0x28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	200001d8 	.word	0x200001d8
 8003b30:	200001b8 	.word	0x200001b8
 8003b34:	200000dc 	.word	0x200000dc
 8003b38:	20000170 	.word	0x20000170
 8003b3c:	200000d8 	.word	0x200000d8
 8003b40:	200001c4 	.word	0x200001c4

08003b44 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b4c:	4b07      	ldr	r3, [pc, #28]	@ (8003b6c <vTaskInternalSetTimeOutState+0x28>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003b54:	4b06      	ldr	r3, [pc, #24]	@ (8003b70 <vTaskInternalSetTimeOutState+0x2c>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8003b5c:	20e7      	movs	r0, #231	@ 0xe7
 8003b5e:	f003 fe1b 	bl	8007798 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	200001c8 	.word	0x200001c8
 8003b70:	200001b4 	.word	0x200001b4

08003b74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10d      	bne.n	8003ba0 <xTaskCheckForTimeOut+0x2c>
    __asm volatile
 8003b84:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003b88:	b672      	cpsid	i
 8003b8a:	f383 8811 	msr	BASEPRI, r3
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	b662      	cpsie	i
 8003b98:	613b      	str	r3, [r7, #16]
}
 8003b9a:	bf00      	nop
 8003b9c:	bf00      	nop
 8003b9e:	e7fd      	b.n	8003b9c <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10d      	bne.n	8003bc2 <xTaskCheckForTimeOut+0x4e>
    __asm volatile
 8003ba6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003baa:	b672      	cpsid	i
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	b662      	cpsie	i
 8003bba:	60fb      	str	r3, [r7, #12]
}
 8003bbc:	bf00      	nop
 8003bbe:	bf00      	nop
 8003bc0:	e7fd      	b.n	8003bbe <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 8003bc2:	f001 f897 	bl	8004cf4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003bc6:	4b21      	ldr	r3, [pc, #132]	@ (8003c4c <xTaskCheckForTimeOut+0xd8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bde:	d102      	bne.n	8003be6 <xTaskCheckForTimeOut+0x72>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61fb      	str	r3, [r7, #28]
 8003be4:	e026      	b.n	8003c34 <xTaskCheckForTimeOut+0xc0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4b19      	ldr	r3, [pc, #100]	@ (8003c50 <xTaskCheckForTimeOut+0xdc>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d00a      	beq.n	8003c08 <xTaskCheckForTimeOut+0x94>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d305      	bcc.n	8003c08 <xTaskCheckForTimeOut+0x94>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	e015      	b.n	8003c34 <xTaskCheckForTimeOut+0xc0>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d20b      	bcs.n	8003c2a <xTaskCheckForTimeOut+0xb6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	1ad2      	subs	r2, r2, r3
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff ff90 	bl	8003b44 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003c24:	2300      	movs	r3, #0
 8003c26:	61fb      	str	r3, [r7, #28]
 8003c28:	e004      	b.n	8003c34 <xTaskCheckForTimeOut+0xc0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003c30:	2301      	movs	r3, #1
 8003c32:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003c34:	f001 f894 	bl	8004d60 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	20e8      	movs	r0, #232	@ 0xe8
 8003c3e:	f003 fde7 	bl	8007810 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003c42:	69fb      	ldr	r3, [r7, #28]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3720      	adds	r7, #32
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	200001b4 	.word	0x200001b4
 8003c50:	200001c8 	.word	0x200001c8

08003c54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003c58:	4b03      	ldr	r3, [pc, #12]	@ (8003c68 <vTaskMissedYield+0x14>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8003c5e:	20e9      	movs	r0, #233	@ 0xe9
 8003c60:	f003 fd9a 	bl	8007798 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003c64:	bf00      	nop
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	200001c4 	.word	0x200001c4

08003c6c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003c74:	f000 f852 	bl	8003d1c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003c78:	4b06      	ldr	r3, [pc, #24]	@ (8003c94 <prvIdleTask+0x28>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d9f9      	bls.n	8003c74 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003c80:	4b05      	ldr	r3, [pc, #20]	@ (8003c98 <prvIdleTask+0x2c>)
 8003c82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003c90:	e7f0      	b.n	8003c74 <prvIdleTask+0x8>
 8003c92:	bf00      	nop
 8003c94:	200000dc 	.word	0x200000dc
 8003c98:	e000ed04 	.word	0xe000ed04

08003c9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	607b      	str	r3, [r7, #4]
 8003ca6:	e00c      	b.n	8003cc2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4a12      	ldr	r2, [pc, #72]	@ (8003cfc <prvInitialiseTaskLists+0x60>)
 8003cb4:	4413      	add	r3, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fe fb12 	bl	80022e0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	607b      	str	r3, [r7, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d9ef      	bls.n	8003ca8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003cc8:	480d      	ldr	r0, [pc, #52]	@ (8003d00 <prvInitialiseTaskLists+0x64>)
 8003cca:	f7fe fb09 	bl	80022e0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003cce:	480d      	ldr	r0, [pc, #52]	@ (8003d04 <prvInitialiseTaskLists+0x68>)
 8003cd0:	f7fe fb06 	bl	80022e0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003cd4:	480c      	ldr	r0, [pc, #48]	@ (8003d08 <prvInitialiseTaskLists+0x6c>)
 8003cd6:	f7fe fb03 	bl	80022e0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003cda:	480c      	ldr	r0, [pc, #48]	@ (8003d0c <prvInitialiseTaskLists+0x70>)
 8003cdc:	f7fe fb00 	bl	80022e0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003ce0:	480b      	ldr	r0, [pc, #44]	@ (8003d10 <prvInitialiseTaskLists+0x74>)
 8003ce2:	f7fe fafd 	bl	80022e0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <prvInitialiseTaskLists+0x78>)
 8003ce8:	4a05      	ldr	r2, [pc, #20]	@ (8003d00 <prvInitialiseTaskLists+0x64>)
 8003cea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003cec:	4b0a      	ldr	r3, [pc, #40]	@ (8003d18 <prvInitialiseTaskLists+0x7c>)
 8003cee:	4a05      	ldr	r2, [pc, #20]	@ (8003d04 <prvInitialiseTaskLists+0x68>)
 8003cf0:	601a      	str	r2, [r3, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	200000dc 	.word	0x200000dc
 8003d00:	20000140 	.word	0x20000140
 8003d04:	20000154 	.word	0x20000154
 8003d08:	20000170 	.word	0x20000170
 8003d0c:	20000184 	.word	0x20000184
 8003d10:	2000019c 	.word	0x2000019c
 8003d14:	20000168 	.word	0x20000168
 8003d18:	2000016c 	.word	0x2000016c

08003d1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d22:	e019      	b.n	8003d58 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003d24:	f000 ffe6 	bl	8004cf4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003d28:	4b10      	ldr	r3, [pc, #64]	@ (8003d6c <prvCheckTasksWaitingTermination+0x50>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fe fb65 	bl	8002404 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d70 <prvCheckTasksWaitingTermination+0x54>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	4a0b      	ldr	r2, [pc, #44]	@ (8003d70 <prvCheckTasksWaitingTermination+0x54>)
 8003d42:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003d44:	4b0b      	ldr	r3, [pc, #44]	@ (8003d74 <prvCheckTasksWaitingTermination+0x58>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d74 <prvCheckTasksWaitingTermination+0x58>)
 8003d4c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003d4e:	f001 f807 	bl	8004d60 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f810 	bl	8003d78 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d58:	4b06      	ldr	r3, [pc, #24]	@ (8003d74 <prvCheckTasksWaitingTermination+0x58>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e1      	bne.n	8003d24 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003d60:	bf00      	nop
 8003d62:	bf00      	nop
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000184 	.word	0x20000184
 8003d70:	200001b0 	.word	0x200001b0
 8003d74:	20000198 	.word	0x20000198

08003d78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d84:	4618      	mov	r0, r3
 8003d86:	f001 fa2f 	bl	80051e8 <vPortFree>
            vPortFree( pxTCB );
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f001 fa2c 	bl	80051e8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003d90:	bf00      	nop
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc8 <prvResetNextTaskUnblockTime+0x30>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d104      	bne.n	8003db0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003da6:	4b09      	ldr	r3, [pc, #36]	@ (8003dcc <prvResetNextTaskUnblockTime+0x34>)
 8003da8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003dae:	e005      	b.n	8003dbc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003db0:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <prvResetNextTaskUnblockTime+0x30>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a04      	ldr	r2, [pc, #16]	@ (8003dcc <prvResetNextTaskUnblockTime+0x34>)
 8003dba:	6013      	str	r3, [r2, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20000168 	.word	0x20000168
 8003dcc:	200001d0 	.word	0x200001d0

08003dd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8003dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003e0c <xTaskGetSchedulerState+0x3c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d102      	bne.n	8003de4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003dde:	2301      	movs	r3, #1
 8003de0:	607b      	str	r3, [r7, #4]
 8003de2:	e008      	b.n	8003df6 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003de4:	4b0a      	ldr	r3, [pc, #40]	@ (8003e10 <xTaskGetSchedulerState+0x40>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d102      	bne.n	8003df2 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003dec:	2302      	movs	r3, #2
 8003dee:	607b      	str	r3, [r7, #4]
 8003df0:	e001      	b.n	8003df6 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003df2:	2300      	movs	r3, #0
 8003df4:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4619      	mov	r1, r3
 8003dfa:	20f5      	movs	r0, #245	@ 0xf5
 8003dfc:	f003 fd08 	bl	8007810 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003e00:	687b      	ldr	r3, [r7, #4]
    }
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	200001bc 	.word	0x200001bc
 8003e10:	200001d8 	.word	0x200001d8

08003e14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 8098 	beq.w	8003f5c <xTaskPriorityDisinherit+0x148>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003e2c:	4b50      	ldr	r3, [pc, #320]	@ (8003f70 <xTaskPriorityDisinherit+0x15c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d00d      	beq.n	8003e52 <xTaskPriorityDisinherit+0x3e>
    __asm volatile
 8003e36:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003e3a:	b672      	cpsid	i
 8003e3c:	f383 8811 	msr	BASEPRI, r3
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	b662      	cpsie	i
 8003e4a:	613b      	str	r3, [r7, #16]
}
 8003e4c:	bf00      	nop
 8003e4e:	bf00      	nop
 8003e50:	e7fd      	b.n	8003e4e <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10d      	bne.n	8003e76 <xTaskPriorityDisinherit+0x62>
    __asm volatile
 8003e5a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003e5e:	b672      	cpsid	i
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	b662      	cpsie	i
 8003e6e:	60fb      	str	r3, [r7, #12]
}
 8003e70:	bf00      	nop
 8003e72:	bf00      	nop
 8003e74:	e7fd      	b.n	8003e72 <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e7a:	1e5a      	subs	r2, r3, #1
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d067      	beq.n	8003f5c <xTaskPriorityDisinherit+0x148>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d163      	bne.n	8003f5c <xTaskPriorityDisinherit+0x148>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	3304      	adds	r3, #4
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fe fab3 	bl	8002404 <uxListRemove>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10a      	bne.n	8003eba <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	4b30      	ldr	r3, [pc, #192]	@ (8003f74 <xTaskPriorityDisinherit+0x160>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	4a2f      	ldr	r2, [pc, #188]	@ (8003f74 <xTaskPriorityDisinherit+0x160>)
 8003eb8:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec6:	f1c3 0205 	rsb	r2, r3, #5
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f003 fd95 	bl	8007a00 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eda:	2201      	movs	r2, #1
 8003edc:	409a      	lsls	r2, r3
 8003ede:	4b25      	ldr	r3, [pc, #148]	@ (8003f74 <xTaskPriorityDisinherit+0x160>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	4a23      	ldr	r2, [pc, #140]	@ (8003f74 <xTaskPriorityDisinherit+0x160>)
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eec:	4922      	ldr	r1, [pc, #136]	@ (8003f78 <xTaskPriorityDisinherit+0x164>)
 8003eee:	4613      	mov	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	3304      	adds	r3, #4
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	609a      	str	r2, [r3, #8]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	60da      	str	r2, [r3, #12]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	3204      	adds	r2, #4
 8003f14:	605a      	str	r2, [r3, #4]
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	1d1a      	adds	r2, r3, #4
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	609a      	str	r2, [r3, #8]
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f22:	4613      	mov	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4a13      	ldr	r2, [pc, #76]	@ (8003f78 <xTaskPriorityDisinherit+0x164>)
 8003f2c:	441a      	add	r2, r3
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	615a      	str	r2, [r3, #20]
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f36:	4910      	ldr	r1, [pc, #64]	@ (8003f78 <xTaskPriorityDisinherit+0x164>)
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f48:	1c59      	adds	r1, r3, #1
 8003f4a:	480b      	ldr	r0, [pc, #44]	@ (8003f78 <xTaskPriorityDisinherit+0x164>)
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4403      	add	r3, r0
 8003f56:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	4619      	mov	r1, r3
 8003f60:	20f7      	movs	r0, #247	@ 0xf7
 8003f62:	f003 fc55 	bl	8007810 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003f66:	69fb      	ldr	r3, [r7, #28]
    }
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3720      	adds	r7, #32
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	200000d8 	.word	0x200000d8
 8003f74:	200001b8 	.word	0x200001b8
 8003f78:	200000dc 	.word	0x200000dc

08003f7c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00d      	beq.n	8003fb0 <xTaskGenericNotifyWait+0x34>
    __asm volatile
 8003f94:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003f98:	b672      	cpsid	i
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	b662      	cpsie	i
 8003fa8:	613b      	str	r3, [r7, #16]
}
 8003faa:	bf00      	nop
 8003fac:	bf00      	nop
 8003fae:	e7fd      	b.n	8003fac <xTaskGenericNotifyWait+0x30>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8003fb0:	f7ff f986 	bl	80032c0 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8003fb4:	f000 fe9e 	bl	8004cf4 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8003fb8:	4b3b      	ldr	r3, [pc, #236]	@ (80040a8 <xTaskGenericNotifyWait+0x12c>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3354      	adds	r3, #84	@ 0x54
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d018      	beq.n	8003ffc <xTaskGenericNotifyWait+0x80>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8003fca:	4b37      	ldr	r3, [pc, #220]	@ (80040a8 <xTaskGenericNotifyWait+0x12c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	3214      	adds	r2, #20
 8003fd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	43d2      	mvns	r2, r2
 8003fda:	4011      	ands	r1, r2
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	3214      	adds	r2, #20
 8003fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8003fe4:	4b30      	ldr	r3, [pc, #192]	@ (80040a8 <xTaskGenericNotifyWait+0x12c>)
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4413      	add	r3, r2
 8003fec:	3354      	adds	r3, #84	@ 0x54
 8003fee:	2201      	movs	r2, #1
 8003ff0:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8003ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <xTaskGenericNotifyWait+0x80>
                    {
                        xShouldBlock = pdTRUE;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8003ffc:	f000 feb0 	bl	8004d60 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d103      	bne.n	800400e <xTaskGenericNotifyWait+0x92>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004006:	2101      	movs	r1, #1
 8004008:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800400a:	f000 f9c7 	bl	800439c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800400e:	f7ff f965 	bl	80032dc <xTaskResumeAll>
 8004012:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d10a      	bne.n	8004030 <xTaskGenericNotifyWait+0xb4>
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d107      	bne.n	8004030 <xTaskGenericNotifyWait+0xb4>
        {
            taskYIELD_WITHIN_API();
 8004020:	4b22      	ldr	r3, [pc, #136]	@ (80040ac <xTaskGenericNotifyWait+0x130>)
 8004022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8004030:	f000 fe60 	bl	8004cf4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d007      	beq.n	800404a <xTaskGenericNotifyWait+0xce>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 800403a:	4b1b      	ldr	r3, [pc, #108]	@ (80040a8 <xTaskGenericNotifyWait+0x12c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	3214      	adds	r2, #20
 8004042:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 800404a:	4b17      	ldr	r3, [pc, #92]	@ (80040a8 <xTaskGenericNotifyWait+0x12c>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4413      	add	r3, r2
 8004052:	3354      	adds	r3, #84	@ 0x54
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d002      	beq.n	8004062 <xTaskGenericNotifyWait+0xe6>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
 8004060:	e00e      	b.n	8004080 <xTaskGenericNotifyWait+0x104>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8004062:	4b11      	ldr	r3, [pc, #68]	@ (80040a8 <xTaskGenericNotifyWait+0x12c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	3214      	adds	r2, #20
 800406a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	43d2      	mvns	r2, r2
 8004072:	4011      	ands	r1, r2
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	3214      	adds	r2, #20
 8004078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800407c:	2301      	movs	r3, #1
 800407e:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8004080:	4b09      	ldr	r3, [pc, #36]	@ (80040a8 <xTaskGenericNotifyWait+0x12c>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	3354      	adds	r3, #84	@ 0x54
 800408a:	2200      	movs	r2, #0
 800408c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800408e:	f000 fe67 	bl	8004d60 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	4619      	mov	r1, r3
 8004096:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800409a:	f003 fbb9 	bl	8007810 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800409e:	69fb      	ldr	r3, [r7, #28]
    }
 80040a0:	4618      	mov	r0, r3
 80040a2:	3720      	adds	r7, #32
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	200000d8 	.word	0x200000d8
 80040ac:	e000ed04 	.word	0xe000ed04

080040b0 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b092      	sub	sp, #72	@ 0x48
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80040be:	2301      	movs	r3, #1
 80040c0:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10d      	bne.n	80040e4 <xTaskGenericNotifyFromISR+0x34>
    __asm volatile
 80040c8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80040cc:	b672      	cpsid	i
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	b662      	cpsie	i
 80040dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80040de:	bf00      	nop
 80040e0:	bf00      	nop
 80040e2:	e7fd      	b.n	80040e0 <xTaskGenericNotifyFromISR+0x30>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00d      	beq.n	8004106 <xTaskGenericNotifyFromISR+0x56>
    __asm volatile
 80040ea:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80040ee:	b672      	cpsid	i
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	b662      	cpsie	i
 80040fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	e7fd      	b.n	8004102 <xTaskGenericNotifyFromISR+0x52>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004106:	f000 feeb 	bl	8004ee0 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	643b      	str	r3, [r7, #64]	@ 0x40

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 800410e:	f3ef 8211 	mrs	r2, BASEPRI
 8004112:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004116:	b672      	cpsid	i
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	b662      	cpsie	i
 8004126:	623a      	str	r2, [r7, #32]
 8004128:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 800412a:	6a3b      	ldr	r3, [r7, #32]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 800412c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 800412e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004130:	2b00      	cmp	r3, #0
 8004132:	d006      	beq.n	8004142 <xTaskGenericNotifyFromISR+0x92>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004134:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	3214      	adds	r2, #20
 800413a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800413e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004140:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004142:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4413      	add	r3, r2
 8004148:	3354      	adds	r3, #84	@ 0x54
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004150:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	4413      	add	r3, r2
 8004156:	3354      	adds	r3, #84	@ 0x54
 8004158:	2202      	movs	r2, #2
 800415a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	2b04      	cmp	r3, #4
 8004160:	d83b      	bhi.n	80041da <xTaskGenericNotifyFromISR+0x12a>
 8004162:	a201      	add	r2, pc, #4	@ (adr r2, 8004168 <xTaskGenericNotifyFromISR+0xb8>)
 8004164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004168:	080041ff 	.word	0x080041ff
 800416c:	0800417d 	.word	0x0800417d
 8004170:	08004199 	.word	0x08004199
 8004174:	080041b1 	.word	0x080041b1
 8004178:	080041bf 	.word	0x080041bf
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800417c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	3214      	adds	r2, #20
 8004182:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	ea42 0103 	orr.w	r1, r2, r3
 800418c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	3214      	adds	r2, #20
 8004192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004196:	e035      	b.n	8004204 <xTaskGenericNotifyFromISR+0x154>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004198:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	3214      	adds	r2, #20
 800419e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a2:	1c59      	adds	r1, r3, #1
 80041a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	3214      	adds	r2, #20
 80041aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80041ae:	e029      	b.n	8004204 <xTaskGenericNotifyFromISR+0x154>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80041b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	3214      	adds	r2, #20
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80041bc:	e022      	b.n	8004204 <xTaskGenericNotifyFromISR+0x154>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80041be:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d006      	beq.n	80041d4 <xTaskGenericNotifyFromISR+0x124>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80041c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	3214      	adds	r2, #20
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80041d2:	e017      	b.n	8004204 <xTaskGenericNotifyFromISR+0x154>
                        xReturn = pdFAIL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 80041d8:	e014      	b.n	8004204 <xTaskGenericNotifyFromISR+0x154>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80041da:	4b69      	ldr	r3, [pc, #420]	@ (8004380 <xTaskGenericNotifyFromISR+0x2d0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00f      	beq.n	8004202 <xTaskGenericNotifyFromISR+0x152>
    __asm volatile
 80041e2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80041e6:	b672      	cpsid	i
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	b662      	cpsie	i
 80041f6:	61bb      	str	r3, [r7, #24]
}
 80041f8:	bf00      	nop
 80041fa:	bf00      	nop
 80041fc:	e7fd      	b.n	80041fa <xTaskGenericNotifyFromISR+0x14a>
                    break;
 80041fe:	bf00      	nop
 8004200:	e000      	b.n	8004204 <xTaskGenericNotifyFromISR+0x154>
                    break;
 8004202:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004204:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004208:	2b01      	cmp	r3, #1
 800420a:	f040 80a7 	bne.w	800435c <xTaskGenericNotifyFromISR+0x2ac>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800420e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00d      	beq.n	8004232 <xTaskGenericNotifyFromISR+0x182>
    __asm volatile
 8004216:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800421a:	b672      	cpsid	i
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	b662      	cpsie	i
 800422a:	617b      	str	r3, [r7, #20]
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	e7fd      	b.n	800422e <xTaskGenericNotifyFromISR+0x17e>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004232:	4b54      	ldr	r3, [pc, #336]	@ (8004384 <xTaskGenericNotifyFromISR+0x2d4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d164      	bne.n	8004304 <xTaskGenericNotifyFromISR+0x254>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800423a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004246:	68d2      	ldr	r2, [r2, #12]
 8004248:	609a      	str	r2, [r3, #8]
 800424a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004250:	6892      	ldr	r2, [r2, #8]
 8004252:	605a      	str	r2, [r3, #4]
 8004254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800425a:	3304      	adds	r3, #4
 800425c:	429a      	cmp	r2, r3
 800425e:	d103      	bne.n	8004268 <xTaskGenericNotifyFromISR+0x1b8>
 8004260:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004266:	605a      	str	r2, [r3, #4]
 8004268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800426a:	2200      	movs	r2, #0
 800426c:	615a      	str	r2, [r3, #20]
 800426e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	1e5a      	subs	r2, r3, #1
 8004274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004276:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800427a:	4618      	mov	r0, r3
 800427c:	f003 fbc0 	bl	8007a00 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004280:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004284:	2201      	movs	r2, #1
 8004286:	409a      	lsls	r2, r3
 8004288:	4b3f      	ldr	r3, [pc, #252]	@ (8004388 <xTaskGenericNotifyFromISR+0x2d8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4313      	orrs	r3, r2
 800428e:	4a3e      	ldr	r2, [pc, #248]	@ (8004388 <xTaskGenericNotifyFromISR+0x2d8>)
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004296:	493d      	ldr	r1, [pc, #244]	@ (800438c <xTaskGenericNotifyFromISR+0x2dc>)
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	3304      	adds	r3, #4
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042ac:	609a      	str	r2, [r3, #8]
 80042ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b0:	689a      	ldr	r2, [r3, #8]
 80042b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042b4:	60da      	str	r2, [r3, #12]
 80042b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042bc:	3204      	adds	r2, #4
 80042be:	605a      	str	r2, [r3, #4]
 80042c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042c2:	1d1a      	adds	r2, r3, #4
 80042c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c6:	609a      	str	r2, [r3, #8]
 80042c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4a2d      	ldr	r2, [pc, #180]	@ (800438c <xTaskGenericNotifyFromISR+0x2dc>)
 80042d6:	441a      	add	r2, r3
 80042d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042da:	615a      	str	r2, [r3, #20]
 80042dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e0:	492a      	ldr	r1, [pc, #168]	@ (800438c <xTaskGenericNotifyFromISR+0x2dc>)
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042f0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80042f2:	1c59      	adds	r1, r3, #1
 80042f4:	4825      	ldr	r0, [pc, #148]	@ (800438c <xTaskGenericNotifyFromISR+0x2dc>)
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4403      	add	r3, r0
 8004300:	6019      	str	r1, [r3, #0]
 8004302:	e01b      	b.n	800433c <xTaskGenericNotifyFromISR+0x28c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004304:	4b22      	ldr	r3, [pc, #136]	@ (8004390 <xTaskGenericNotifyFromISR+0x2e0>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	637b      	str	r3, [r7, #52]	@ 0x34
 800430a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800430c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800430e:	61da      	str	r2, [r3, #28]
 8004310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004316:	621a      	str	r2, [r3, #32]
 8004318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800431e:	3218      	adds	r2, #24
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004324:	f103 0218 	add.w	r2, r3, #24
 8004328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800432a:	609a      	str	r2, [r3, #8]
 800432c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800432e:	4a18      	ldr	r2, [pc, #96]	@ (8004390 <xTaskGenericNotifyFromISR+0x2e0>)
 8004330:	629a      	str	r2, [r3, #40]	@ 0x28
 8004332:	4b17      	ldr	r3, [pc, #92]	@ (8004390 <xTaskGenericNotifyFromISR+0x2e0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3301      	adds	r3, #1
 8004338:	4a15      	ldr	r2, [pc, #84]	@ (8004390 <xTaskGenericNotifyFromISR+0x2e0>)
 800433a:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800433c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800433e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004340:	4b14      	ldr	r3, [pc, #80]	@ (8004394 <xTaskGenericNotifyFromISR+0x2e4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004346:	429a      	cmp	r2, r3
 8004348:	d908      	bls.n	800435c <xTaskGenericNotifyFromISR+0x2ac>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800434a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <xTaskGenericNotifyFromISR+0x2a6>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004352:	2201      	movs	r2, #1
 8004354:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8004356:	4b10      	ldr	r3, [pc, #64]	@ (8004398 <xTaskGenericNotifyFromISR+0x2e8>)
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800435e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8004366:	bf00      	nop
                #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );
 8004368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800436a:	4619      	mov	r1, r3
 800436c:	f44f 7081 	mov.w	r0, #258	@ 0x102
 8004370:	f003 fa4e 	bl	8007810 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 8004376:	4618      	mov	r0, r3
 8004378:	3748      	adds	r7, #72	@ 0x48
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	200001b4 	.word	0x200001b4
 8004384:	200001d8 	.word	0x200001d8
 8004388:	200001b8 	.word	0x200001b8
 800438c:	200000dc 	.word	0x200000dc
 8004390:	20000170 	.word	0x20000170
 8004394:	200000d8 	.word	0x200000d8
 8004398:	200001c4 	.word	0x200001c4

0800439c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80043a6:	4b3d      	ldr	r3, [pc, #244]	@ (800449c <prvAddCurrentTaskToDelayedList+0x100>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80043ac:	4b3c      	ldr	r3, [pc, #240]	@ (80044a0 <prvAddCurrentTaskToDelayedList+0x104>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80043b2:	4b3c      	ldr	r3, [pc, #240]	@ (80044a4 <prvAddCurrentTaskToDelayedList+0x108>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043b8:	4b3b      	ldr	r3, [pc, #236]	@ (80044a8 <prvAddCurrentTaskToDelayedList+0x10c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3304      	adds	r3, #4
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fe f820 	bl	8002404 <uxListRemove>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10b      	bne.n	80043e2 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80043ca:	4b37      	ldr	r3, [pc, #220]	@ (80044a8 <prvAddCurrentTaskToDelayedList+0x10c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	2201      	movs	r2, #1
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43da      	mvns	r2, r3
 80043d8:	4b34      	ldr	r3, [pc, #208]	@ (80044ac <prvAddCurrentTaskToDelayedList+0x110>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4013      	ands	r3, r2
 80043de:	4a33      	ldr	r2, [pc, #204]	@ (80044ac <prvAddCurrentTaskToDelayedList+0x110>)
 80043e0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e8:	d124      	bne.n	8004434 <prvAddCurrentTaskToDelayedList+0x98>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d021      	beq.n	8004434 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043f0:	4b2f      	ldr	r3, [pc, #188]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x114>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	4b2c      	ldr	r3, [pc, #176]	@ (80044a8 <prvAddCurrentTaskToDelayedList+0x10c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	609a      	str	r2, [r3, #8]
 80043fe:	4b2a      	ldr	r3, [pc, #168]	@ (80044a8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	6892      	ldr	r2, [r2, #8]
 8004406:	60da      	str	r2, [r3, #12]
 8004408:	4b27      	ldr	r3, [pc, #156]	@ (80044a8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	3204      	adds	r2, #4
 8004412:	605a      	str	r2, [r3, #4]
 8004414:	4b24      	ldr	r3, [pc, #144]	@ (80044a8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	1d1a      	adds	r2, r3, #4
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	609a      	str	r2, [r3, #8]
 800441e:	4b22      	ldr	r3, [pc, #136]	@ (80044a8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a23      	ldr	r2, [pc, #140]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x114>)
 8004424:	615a      	str	r2, [r3, #20]
 8004426:	4b22      	ldr	r3, [pc, #136]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x114>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3301      	adds	r3, #1
 800442c:	4a20      	ldr	r2, [pc, #128]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x114>)
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004432:	e02e      	b.n	8004492 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004434:	69fa      	ldr	r2, [r7, #28]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4413      	add	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800443c:	4b1a      	ldr	r3, [pc, #104]	@ (80044a8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	429a      	cmp	r2, r3
 800444a:	d20d      	bcs.n	8004468 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800444c:	4b16      	ldr	r3, [pc, #88]	@ (80044a8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2104      	movs	r1, #4
 8004452:	4618      	mov	r0, r3
 8004454:	f003 fb16 	bl	8007a84 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004458:	4b13      	ldr	r3, [pc, #76]	@ (80044a8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3304      	adds	r3, #4
 800445e:	4619      	mov	r1, r3
 8004460:	6978      	ldr	r0, [r7, #20]
 8004462:	f7fd ff94 	bl	800238e <vListInsert>
}
 8004466:	e014      	b.n	8004492 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8004468:	4b0f      	ldr	r3, [pc, #60]	@ (80044a8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2104      	movs	r1, #4
 800446e:	4618      	mov	r0, r3
 8004470:	f003 fb08 	bl	8007a84 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004474:	4b0c      	ldr	r3, [pc, #48]	@ (80044a8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3304      	adds	r3, #4
 800447a:	4619      	mov	r1, r3
 800447c:	69b8      	ldr	r0, [r7, #24]
 800447e:	f7fd ff86 	bl	800238e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004482:	4b0c      	ldr	r3, [pc, #48]	@ (80044b4 <prvAddCurrentTaskToDelayedList+0x118>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	429a      	cmp	r2, r3
 800448a:	d202      	bcs.n	8004492 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 800448c:	4a09      	ldr	r2, [pc, #36]	@ (80044b4 <prvAddCurrentTaskToDelayedList+0x118>)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6013      	str	r3, [r2, #0]
}
 8004492:	bf00      	nop
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	200001b4 	.word	0x200001b4
 80044a0:	20000168 	.word	0x20000168
 80044a4:	2000016c 	.word	0x2000016c
 80044a8:	200000d8 	.word	0x200000d8
 80044ac:	200001b8 	.word	0x200001b8
 80044b0:	2000019c 	.word	0x2000019c
 80044b4:	200001d0 	.word	0x200001d0

080044b8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80044be:	2300      	movs	r3, #0
 80044c0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80044c2:	f000 fa7d 	bl	80049c0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80044c6:	4b16      	ldr	r3, [pc, #88]	@ (8004520 <xTimerCreateTimerTask+0x68>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00b      	beq.n	80044e6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80044ce:	4b15      	ldr	r3, [pc, #84]	@ (8004524 <xTimerCreateTimerTask+0x6c>)
 80044d0:	9301      	str	r3, [sp, #4]
 80044d2:	2304      	movs	r3, #4
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	2300      	movs	r3, #0
 80044d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80044dc:	4912      	ldr	r1, [pc, #72]	@ (8004528 <xTimerCreateTimerTask+0x70>)
 80044de:	4813      	ldr	r0, [pc, #76]	@ (800452c <xTimerCreateTimerTask+0x74>)
 80044e0:	f7fe fc12 	bl	8002d08 <xTaskCreate>
 80044e4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10d      	bne.n	8004508 <xTimerCreateTimerTask+0x50>
    __asm volatile
 80044ec:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80044f0:	b672      	cpsid	i
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	b662      	cpsie	i
 8004500:	603b      	str	r3, [r7, #0]
}
 8004502:	bf00      	nop
 8004504:	bf00      	nop
 8004506:	e7fd      	b.n	8004504 <xTimerCreateTimerTask+0x4c>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4619      	mov	r1, r3
 800450c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8004510:	f003 f97e 	bl	8007810 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004514:	687b      	ldr	r3, [r7, #4]
    }
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	2000020c 	.word	0x2000020c
 8004524:	20000210 	.word	0x20000210
 8004528:	08007f88 	.word	0x08007f88
 800452c:	080045d5 	.word	0x080045d5

08004530 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800453c:	e008      	b.n	8004550 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	4413      	add	r3, r2
 8004546:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	699a      	ldr	r2, [r3, #24]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	18d1      	adds	r1, r2, r3
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f8df 	bl	8004720 <prvInsertTimerInActiveList>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1ea      	bne.n	800453e <prvReloadTimer+0xe>
        }
    }
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800457e:	4b14      	ldr	r3, [pc, #80]	@ (80045d0 <prvProcessExpiredTimer+0x5c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3304      	adds	r3, #4
 800458c:	4618      	mov	r0, r3
 800458e:	f7fd ff39 	bl	8002404 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f7ff ffc3 	bl	8004530 <prvReloadTimer>
 80045aa:	e008      	b.n	80045be <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045b2:	f023 0301 	bic.w	r3, r3, #1
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	4798      	blx	r3
    }
 80045c6:	bf00      	nop
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20000204 	.word	0x20000204

080045d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045dc:	f107 0308 	add.w	r3, r7, #8
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 f859 	bl	8004698 <prvGetNextExpireTime>
 80045e6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4619      	mov	r1, r3
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f805 	bl	80045fc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80045f2:	f000 f8d7 	bl	80047a4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045f6:	bf00      	nop
 80045f8:	e7f0      	b.n	80045dc <prvTimerTask+0x8>
	...

080045fc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004606:	f7fe fe5b 	bl	80032c0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800460a:	f107 0308 	add.w	r3, r7, #8
 800460e:	4618      	mov	r0, r3
 8004610:	f000 f866 	bl	80046e0 <prvSampleTimeNow>
 8004614:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d130      	bne.n	800467e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10a      	bne.n	8004638 <prvProcessTimerOrBlockTask+0x3c>
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	429a      	cmp	r2, r3
 8004628:	d806      	bhi.n	8004638 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800462a:	f7fe fe57 	bl	80032dc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800462e:	68f9      	ldr	r1, [r7, #12]
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff ff9f 	bl	8004574 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004636:	e024      	b.n	8004682 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d008      	beq.n	8004650 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800463e:	4b13      	ldr	r3, [pc, #76]	@ (800468c <prvProcessTimerOrBlockTask+0x90>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <prvProcessTimerOrBlockTask+0x50>
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <prvProcessTimerOrBlockTask+0x52>
 800464c:	2300      	movs	r3, #0
 800464e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004650:	4b0f      	ldr	r3, [pc, #60]	@ (8004690 <prvProcessTimerOrBlockTask+0x94>)
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	4619      	mov	r1, r3
 800465e:	f7fe fa67 	bl	8002b30 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004662:	f7fe fe3b 	bl	80032dc <xTaskResumeAll>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10a      	bne.n	8004682 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 800466c:	4b09      	ldr	r3, [pc, #36]	@ (8004694 <prvProcessTimerOrBlockTask+0x98>)
 800466e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	f3bf 8f6f 	isb	sy
    }
 800467c:	e001      	b.n	8004682 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800467e:	f7fe fe2d 	bl	80032dc <xTaskResumeAll>
    }
 8004682:	bf00      	nop
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000208 	.word	0x20000208
 8004690:	2000020c 	.word	0x2000020c
 8004694:	e000ed04 	.word	0xe000ed04

08004698 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046a0:	4b0e      	ldr	r3, [pc, #56]	@ (80046dc <prvGetNextExpireTime+0x44>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <prvGetNextExpireTime+0x16>
 80046aa:	2201      	movs	r2, #1
 80046ac:	e000      	b.n	80046b0 <prvGetNextExpireTime+0x18>
 80046ae:	2200      	movs	r2, #0
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d105      	bne.n	80046c8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046bc:	4b07      	ldr	r3, [pc, #28]	@ (80046dc <prvGetNextExpireTime+0x44>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	e001      	b.n	80046cc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80046cc:	68fb      	ldr	r3, [r7, #12]
    }
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000204 	.word	0x20000204

080046e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80046e8:	f7fe ff0c 	bl	8003504 <xTaskGetTickCount>
 80046ec:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80046ee:	4b0b      	ldr	r3, [pc, #44]	@ (800471c <prvSampleTimeNow+0x3c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d205      	bcs.n	8004704 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80046f8:	f000 f93c 	bl	8004974 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	e002      	b.n	800470a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800470a:	4a04      	ldr	r2, [pc, #16]	@ (800471c <prvSampleTimeNow+0x3c>)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004710:	68fb      	ldr	r3, [r7, #12]
    }
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000214 	.word	0x20000214

08004720 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	429a      	cmp	r2, r3
 8004744:	d812      	bhi.n	800476c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	1ad2      	subs	r2, r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	429a      	cmp	r2, r3
 8004752:	d302      	bcc.n	800475a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004754:	2301      	movs	r3, #1
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	e01b      	b.n	8004792 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800475a:	4b10      	ldr	r3, [pc, #64]	@ (800479c <prvInsertTimerInActiveList+0x7c>)
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3304      	adds	r3, #4
 8004762:	4619      	mov	r1, r3
 8004764:	4610      	mov	r0, r2
 8004766:	f7fd fe12 	bl	800238e <vListInsert>
 800476a:	e012      	b.n	8004792 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d206      	bcs.n	8004782 <prvInsertTimerInActiveList+0x62>
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d302      	bcc.n	8004782 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800477c:	2301      	movs	r3, #1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e007      	b.n	8004792 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004782:	4b07      	ldr	r3, [pc, #28]	@ (80047a0 <prvInsertTimerInActiveList+0x80>)
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3304      	adds	r3, #4
 800478a:	4619      	mov	r1, r3
 800478c:	4610      	mov	r0, r2
 800478e:	f7fd fdfe 	bl	800238e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004792:	697b      	ldr	r3, [r7, #20]
    }
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000208 	.word	0x20000208
 80047a0:	20000204 	.word	0x20000204

080047a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b08a      	sub	sp, #40	@ 0x28
 80047a8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 80047aa:	1d3b      	adds	r3, r7, #4
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	605a      	str	r2, [r3, #4]
 80047b2:	609a      	str	r2, [r3, #8]
 80047b4:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80047b6:	e0cb      	b.n	8004950 <prvProcessReceivedCommands+0x1ac>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	da1b      	bge.n	80047f6 <prvProcessReceivedCommands+0x52>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80047be:	1d3b      	adds	r3, r7, #4
 80047c0:	3304      	adds	r3, #4
 80047c2:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 80047c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10d      	bne.n	80047e6 <prvProcessReceivedCommands+0x42>
    __asm volatile
 80047ca:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80047ce:	b672      	cpsid	i
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	b662      	cpsie	i
 80047de:	61bb      	str	r3, [r7, #24]
}
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop
 80047e4:	e7fd      	b.n	80047e2 <prvProcessReceivedCommands+0x3e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ec:	6850      	ldr	r0, [r2, #4]
 80047ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047f0:	6892      	ldr	r2, [r2, #8]
 80047f2:	4611      	mov	r1, r2
 80047f4:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f2c0 80a9 	blt.w	8004950 <prvProcessReceivedCommands+0x1ac>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d004      	beq.n	8004814 <prvProcessReceivedCommands+0x70>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	3304      	adds	r3, #4
 800480e:	4618      	mov	r0, r3
 8004810:	f7fd fdf8 	bl	8002404 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004814:	463b      	mov	r3, r7
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff ff62 	bl	80046e0 <prvSampleTimeNow>
 800481c:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3b01      	subs	r3, #1
 8004822:	2b08      	cmp	r3, #8
 8004824:	f200 8091 	bhi.w	800494a <prvProcessReceivedCommands+0x1a6>
 8004828:	a201      	add	r2, pc, #4	@ (adr r2, 8004830 <prvProcessReceivedCommands+0x8c>)
 800482a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482e:	bf00      	nop
 8004830:	08004855 	.word	0x08004855
 8004834:	08004855 	.word	0x08004855
 8004838:	080048bd 	.word	0x080048bd
 800483c:	080048d1 	.word	0x080048d1
 8004840:	08004921 	.word	0x08004921
 8004844:	08004855 	.word	0x08004855
 8004848:	08004855 	.word	0x08004855
 800484c:	080048bd 	.word	0x080048bd
 8004850:	080048d1 	.word	0x080048d1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	b2da      	uxtb	r2, r3
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	18d1      	adds	r1, r2, r3
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	69fa      	ldr	r2, [r7, #28]
 8004872:	6a38      	ldr	r0, [r7, #32]
 8004874:	f7ff ff54 	bl	8004720 <prvInsertTimerInActiveList>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d067      	beq.n	800494e <prvProcessReceivedCommands+0x1aa>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d009      	beq.n	80048a0 <prvProcessReceivedCommands+0xfc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	4413      	add	r3, r2
 8004894:	69fa      	ldr	r2, [r7, #28]
 8004896:	4619      	mov	r1, r3
 8004898:	6a38      	ldr	r0, [r7, #32]
 800489a:	f7ff fe49 	bl	8004530 <prvReloadTimer>
 800489e:	e008      	b.n	80048b2 <prvProcessReceivedCommands+0x10e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048a6:	f023 0301 	bic.w	r3, r3, #1
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	6a38      	ldr	r0, [r7, #32]
 80048b8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80048ba:	e048      	b.n	800494e <prvProcessReceivedCommands+0x1aa>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80048ce:	e03f      	b.n	8004950 <prvProcessReceivedCommands+0x1ac>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048d6:	f043 0301 	orr.w	r3, r3, #1
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10d      	bne.n	800490c <prvProcessReceivedCommands+0x168>
    __asm volatile
 80048f0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80048f4:	b672      	cpsid	i
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	b662      	cpsie	i
 8004904:	617b      	str	r3, [r7, #20]
}
 8004906:	bf00      	nop
 8004908:	bf00      	nop
 800490a:	e7fd      	b.n	8004908 <prvProcessReceivedCommands+0x164>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	699a      	ldr	r2, [r3, #24]
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	18d1      	adds	r1, r2, r3
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	69fa      	ldr	r2, [r7, #28]
 8004918:	6a38      	ldr	r0, [r7, #32]
 800491a:	f7ff ff01 	bl	8004720 <prvInsertTimerInActiveList>
                        break;
 800491e:	e017      	b.n	8004950 <prvProcessReceivedCommands+0x1ac>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d103      	bne.n	8004936 <prvProcessReceivedCommands+0x192>
                            {
                                vPortFree( pxTimer );
 800492e:	6a38      	ldr	r0, [r7, #32]
 8004930:	f000 fc5a 	bl	80051e8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004934:	e00c      	b.n	8004950 <prvProcessReceivedCommands+0x1ac>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800493c:	f023 0301 	bic.w	r3, r3, #1
 8004940:	b2da      	uxtb	r2, r3
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004948:	e002      	b.n	8004950 <prvProcessReceivedCommands+0x1ac>

                    default:
                        /* Don't expect to get here. */
                        break;
 800494a:	bf00      	nop
 800494c:	e000      	b.n	8004950 <prvProcessReceivedCommands+0x1ac>
                        break;
 800494e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004950:	4b07      	ldr	r3, [pc, #28]	@ (8004970 <prvProcessReceivedCommands+0x1cc>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	1d39      	adds	r1, r7, #4
 8004956:	2200      	movs	r2, #0
 8004958:	4618      	mov	r0, r3
 800495a:	f7fd fe9d 	bl	8002698 <xQueueReceive>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	f47f af29 	bne.w	80047b8 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8004966:	bf00      	nop
 8004968:	bf00      	nop
 800496a:	3728      	adds	r7, #40	@ 0x28
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	2000020c 	.word	0x2000020c

08004974 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800497a:	e009      	b.n	8004990 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800497c:	4b0e      	ldr	r3, [pc, #56]	@ (80049b8 <prvSwitchTimerLists+0x44>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004986:	f04f 31ff 	mov.w	r1, #4294967295
 800498a:	6838      	ldr	r0, [r7, #0]
 800498c:	f7ff fdf2 	bl	8004574 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004990:	4b09      	ldr	r3, [pc, #36]	@ (80049b8 <prvSwitchTimerLists+0x44>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800499a:	4b07      	ldr	r3, [pc, #28]	@ (80049b8 <prvSwitchTimerLists+0x44>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80049a0:	4b06      	ldr	r3, [pc, #24]	@ (80049bc <prvSwitchTimerLists+0x48>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a04      	ldr	r2, [pc, #16]	@ (80049b8 <prvSwitchTimerLists+0x44>)
 80049a6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80049a8:	4a04      	ldr	r2, [pc, #16]	@ (80049bc <prvSwitchTimerLists+0x48>)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6013      	str	r3, [r2, #0]
    }
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20000204 	.word	0x20000204
 80049bc:	20000208 	.word	0x20000208

080049c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80049c4:	f000 f996 	bl	8004cf4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80049c8:	4b12      	ldr	r3, [pc, #72]	@ (8004a14 <prvCheckForValidListAndQueue+0x54>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d11d      	bne.n	8004a0c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80049d0:	4811      	ldr	r0, [pc, #68]	@ (8004a18 <prvCheckForValidListAndQueue+0x58>)
 80049d2:	f7fd fc85 	bl	80022e0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80049d6:	4811      	ldr	r0, [pc, #68]	@ (8004a1c <prvCheckForValidListAndQueue+0x5c>)
 80049d8:	f7fd fc82 	bl	80022e0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80049dc:	4b10      	ldr	r3, [pc, #64]	@ (8004a20 <prvCheckForValidListAndQueue+0x60>)
 80049de:	4a0e      	ldr	r2, [pc, #56]	@ (8004a18 <prvCheckForValidListAndQueue+0x58>)
 80049e0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80049e2:	4b10      	ldr	r3, [pc, #64]	@ (8004a24 <prvCheckForValidListAndQueue+0x64>)
 80049e4:	4a0d      	ldr	r2, [pc, #52]	@ (8004a1c <prvCheckForValidListAndQueue+0x5c>)
 80049e6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80049e8:	2200      	movs	r2, #0
 80049ea:	2110      	movs	r1, #16
 80049ec:	2005      	movs	r0, #5
 80049ee:	f7fd fdd3 	bl	8002598 <xQueueGenericCreate>
 80049f2:	4603      	mov	r3, r0
 80049f4:	4a07      	ldr	r2, [pc, #28]	@ (8004a14 <prvCheckForValidListAndQueue+0x54>)
 80049f6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80049f8:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <prvCheckForValidListAndQueue+0x54>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a00:	4b04      	ldr	r3, [pc, #16]	@ (8004a14 <prvCheckForValidListAndQueue+0x54>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4908      	ldr	r1, [pc, #32]	@ (8004a28 <prvCheckForValidListAndQueue+0x68>)
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fe f840 	bl	8002a8c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004a0c:	f000 f9a8 	bl	8004d60 <vPortExitCritical>
    }
 8004a10:	bf00      	nop
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	2000020c 	.word	0x2000020c
 8004a18:	200001dc 	.word	0x200001dc
 8004a1c:	200001f0 	.word	0x200001f0
 8004a20:	20000204 	.word	0x20000204
 8004a24:	20000208 	.word	0x20000208
 8004a28:	08007f90 	.word	0x08007f90

08004a2c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3b04      	subs	r3, #4
 8004a3c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	3b04      	subs	r3, #4
 8004a4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f023 0201 	bic.w	r2, r3, #1
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3b04      	subs	r3, #4
 8004a5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004a5c:	4a0c      	ldr	r2, [pc, #48]	@ (8004a90 <pxPortInitialiseStack+0x64>)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	3b14      	subs	r3, #20
 8004a66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3b04      	subs	r3, #4
 8004a72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f06f 0202 	mvn.w	r2, #2
 8004a7a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3b20      	subs	r3, #32
 8004a80:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004a82:	68fb      	ldr	r3, [r7, #12]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	08004a95 	.word	0x08004a95

08004a94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004a9e:	4b15      	ldr	r3, [pc, #84]	@ (8004af4 <prvTaskExitError+0x60>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa6:	d00d      	beq.n	8004ac4 <prvTaskExitError+0x30>
    __asm volatile
 8004aa8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004aac:	b672      	cpsid	i
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	b662      	cpsie	i
 8004abc:	60fb      	str	r3, [r7, #12]
}
 8004abe:	bf00      	nop
 8004ac0:	bf00      	nop
 8004ac2:	e7fd      	b.n	8004ac0 <prvTaskExitError+0x2c>
    __asm volatile
 8004ac4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004ac8:	b672      	cpsid	i
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	b662      	cpsie	i
 8004ad8:	60bb      	str	r3, [r7, #8]
}
 8004ada:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004adc:	bf00      	nop
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0fc      	beq.n	8004ade <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	20000010 	.word	0x20000010
	...

08004b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004b00:	4b07      	ldr	r3, [pc, #28]	@ (8004b20 <pxCurrentTCBConst2>)
 8004b02:	6819      	ldr	r1, [r3, #0]
 8004b04:	6808      	ldr	r0, [r1, #0]
 8004b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0a:	f380 8809 	msr	PSP, r0
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f04f 0000 	mov.w	r0, #0
 8004b16:	f380 8811 	msr	BASEPRI, r0
 8004b1a:	4770      	bx	lr
 8004b1c:	f3af 8000 	nop.w

08004b20 <pxCurrentTCBConst2>:
 8004b20:	200000d8 	.word	0x200000d8
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004b24:	bf00      	nop
 8004b26:	bf00      	nop

08004b28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004b28:	4808      	ldr	r0, [pc, #32]	@ (8004b4c <prvPortStartFirstTask+0x24>)
 8004b2a:	6800      	ldr	r0, [r0, #0]
 8004b2c:	6800      	ldr	r0, [r0, #0]
 8004b2e:	f380 8808 	msr	MSP, r0
 8004b32:	f04f 0000 	mov.w	r0, #0
 8004b36:	f380 8814 	msr	CONTROL, r0
 8004b3a:	b662      	cpsie	i
 8004b3c:	b661      	cpsie	f
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	df00      	svc	0
 8004b48:	bf00      	nop
 8004b4a:	0000      	.short	0x0000
 8004b4c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop

08004b54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08a      	sub	sp, #40	@ 0x28
 8004b58:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8004b5a:	4b5c      	ldr	r3, [pc, #368]	@ (8004ccc <xPortStartScheduler+0x178>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8004b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b62:	332c      	adds	r3, #44	@ 0x2c
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a5a      	ldr	r2, [pc, #360]	@ (8004cd0 <xPortStartScheduler+0x17c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00d      	beq.n	8004b88 <xPortStartScheduler+0x34>
    __asm volatile
 8004b6c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004b70:	b672      	cpsid	i
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	b662      	cpsie	i
 8004b80:	61fb      	str	r3, [r7, #28]
}
 8004b82:	bf00      	nop
 8004b84:	bf00      	nop
 8004b86:	e7fd      	b.n	8004b84 <xPortStartScheduler+0x30>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8004b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8a:	3338      	adds	r3, #56	@ 0x38
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a51      	ldr	r2, [pc, #324]	@ (8004cd4 <xPortStartScheduler+0x180>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00d      	beq.n	8004bb0 <xPortStartScheduler+0x5c>
    __asm volatile
 8004b94:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004b98:	b672      	cpsid	i
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	b662      	cpsie	i
 8004ba8:	61bb      	str	r3, [r7, #24]
}
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
 8004bae:	e7fd      	b.n	8004bac <xPortStartScheduler+0x58>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bb4:	4b48      	ldr	r3, [pc, #288]	@ (8004cd8 <xPortStartScheduler+0x184>)
 8004bb6:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	22ff      	movs	r2, #255	@ 0xff
 8004bc4:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	4b40      	ldr	r3, [pc, #256]	@ (8004cdc <xPortStartScheduler+0x188>)
 8004bda:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8004bdc:	4b3f      	ldr	r3, [pc, #252]	@ (8004cdc <xPortStartScheduler+0x188>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10d      	bne.n	8004c00 <xPortStartScheduler+0xac>
    __asm volatile
 8004be4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004be8:	b672      	cpsid	i
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	b662      	cpsie	i
 8004bf8:	617b      	str	r3, [r7, #20]
}
 8004bfa:	bf00      	nop
 8004bfc:	bf00      	nop
 8004bfe:	e7fd      	b.n	8004bfc <xPortStartScheduler+0xa8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	43db      	mvns	r3, r3
 8004c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d015      	beq.n	8004c3a <xPortStartScheduler+0xe6>
    __asm volatile
 8004c0e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004c12:	b672      	cpsid	i
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	b662      	cpsie	i
 8004c22:	613b      	str	r3, [r7, #16]
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	e7fd      	b.n	8004c26 <xPortStartScheduler+0xd2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c30:	79fb      	ldrb	r3, [r7, #7]
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c3a:	79fb      	ldrb	r3, [r7, #7]
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c42:	2b80      	cmp	r3, #128	@ 0x80
 8004c44:	d0f1      	beq.n	8004c2a <xPortStartScheduler+0xd6>
        }

        if( ulImplementedPrioBits == 8 )
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d103      	bne.n	8004c54 <xPortStartScheduler+0x100>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8004c4c:	4b24      	ldr	r3, [pc, #144]	@ (8004ce0 <xPortStartScheduler+0x18c>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	e004      	b.n	8004c5e <xPortStartScheduler+0x10a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f1c3 0307 	rsb	r3, r3, #7
 8004c5a:	4a21      	ldr	r2, [pc, #132]	@ (8004ce0 <xPortStartScheduler+0x18c>)
 8004c5c:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c5e:	4b20      	ldr	r3, [pc, #128]	@ (8004ce0 <xPortStartScheduler+0x18c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	4a1e      	ldr	r2, [pc, #120]	@ (8004ce0 <xPortStartScheduler+0x18c>)
 8004c66:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c68:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce0 <xPortStartScheduler+0x18c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c70:	4a1b      	ldr	r2, [pc, #108]	@ (8004ce0 <xPortStartScheduler+0x18c>)
 8004c72:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004c7c:	4b19      	ldr	r3, [pc, #100]	@ (8004ce4 <xPortStartScheduler+0x190>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a18      	ldr	r2, [pc, #96]	@ (8004ce4 <xPortStartScheduler+0x190>)
 8004c82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c86:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004c88:	4b16      	ldr	r3, [pc, #88]	@ (8004ce4 <xPortStartScheduler+0x190>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a15      	ldr	r2, [pc, #84]	@ (8004ce4 <xPortStartScheduler+0x190>)
 8004c8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c92:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8004c94:	4b14      	ldr	r3, [pc, #80]	@ (8004ce8 <xPortStartScheduler+0x194>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004c9a:	f000 f8f1 	bl	8004e80 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004c9e:	4b13      	ldr	r3, [pc, #76]	@ (8004cec <xPortStartScheduler+0x198>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004ca4:	f000 f910 	bl	8004ec8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ca8:	4b11      	ldr	r3, [pc, #68]	@ (8004cf0 <xPortStartScheduler+0x19c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a10      	ldr	r2, [pc, #64]	@ (8004cf0 <xPortStartScheduler+0x19c>)
 8004cae:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004cb2:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004cb4:	f7ff ff38 	bl	8004b28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004cb8:	f7fe fd7e 	bl	80037b8 <vTaskSwitchContext>
    prvTaskExitError();
 8004cbc:	f7ff feea 	bl	8004a94 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3728      	adds	r7, #40	@ 0x28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	e000ed08 	.word	0xe000ed08
 8004cd0:	08004b01 	.word	0x08004b01
 8004cd4:	08004dc1 	.word	0x08004dc1
 8004cd8:	e000e400 	.word	0xe000e400
 8004cdc:	20000218 	.word	0x20000218
 8004ce0:	2000021c 	.word	0x2000021c
 8004ce4:	e000ed20 	.word	0xe000ed20
 8004ce8:	e000ed1c 	.word	0xe000ed1c
 8004cec:	20000010 	.word	0x20000010
 8004cf0:	e000ef34 	.word	0xe000ef34

08004cf4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
    __asm volatile
 8004cfa:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004cfe:	b672      	cpsid	i
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	b662      	cpsie	i
 8004d0e:	607b      	str	r3, [r7, #4]
}
 8004d10:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004d12:	4b11      	ldr	r3, [pc, #68]	@ (8004d58 <vPortEnterCritical+0x64>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3301      	adds	r3, #1
 8004d18:	4a0f      	ldr	r2, [pc, #60]	@ (8004d58 <vPortEnterCritical+0x64>)
 8004d1a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d58 <vPortEnterCritical+0x64>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d112      	bne.n	8004d4a <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d24:	4b0d      	ldr	r3, [pc, #52]	@ (8004d5c <vPortEnterCritical+0x68>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00d      	beq.n	8004d4a <vPortEnterCritical+0x56>
    __asm volatile
 8004d2e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004d32:	b672      	cpsid	i
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	b662      	cpsie	i
 8004d42:	603b      	str	r3, [r7, #0]
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop
 8004d48:	e7fd      	b.n	8004d46 <vPortEnterCritical+0x52>
    }
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	20000010 	.word	0x20000010
 8004d5c:	e000ed04 	.word	0xe000ed04

08004d60 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004d66:	4b13      	ldr	r3, [pc, #76]	@ (8004db4 <vPortExitCritical+0x54>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10d      	bne.n	8004d8a <vPortExitCritical+0x2a>
    __asm volatile
 8004d6e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004d72:	b672      	cpsid	i
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	b662      	cpsie	i
 8004d82:	607b      	str	r3, [r7, #4]
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
 8004d88:	e7fd      	b.n	8004d86 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004db4 <vPortExitCritical+0x54>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	4a08      	ldr	r2, [pc, #32]	@ (8004db4 <vPortExitCritical+0x54>)
 8004d92:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004d94:	4b07      	ldr	r3, [pc, #28]	@ (8004db4 <vPortExitCritical+0x54>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d105      	bne.n	8004da8 <vPortExitCritical+0x48>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	f383 8811 	msr	BASEPRI, r3
}
 8004da6:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	20000010 	.word	0x20000010
	...

08004dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004dc0:	f3ef 8009 	mrs	r0, PSP
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	4b15      	ldr	r3, [pc, #84]	@ (8004e20 <pxCurrentTCBConst>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	f01e 0f10 	tst.w	lr, #16
 8004dd0:	bf08      	it	eq
 8004dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dda:	6010      	str	r0, [r2, #0]
 8004ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004de0:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8004de4:	b672      	cpsid	i
 8004de6:	f380 8811 	msr	BASEPRI, r0
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	b662      	cpsie	i
 8004df4:	f7fe fce0 	bl	80037b8 <vTaskSwitchContext>
 8004df8:	f04f 0000 	mov.w	r0, #0
 8004dfc:	f380 8811 	msr	BASEPRI, r0
 8004e00:	bc09      	pop	{r0, r3}
 8004e02:	6819      	ldr	r1, [r3, #0]
 8004e04:	6808      	ldr	r0, [r1, #0]
 8004e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0a:	f01e 0f10 	tst.w	lr, #16
 8004e0e:	bf08      	it	eq
 8004e10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e14:	f380 8809 	msr	PSP, r0
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop

08004e20 <pxCurrentTCBConst>:
 8004e20:	200000d8 	.word	0x200000d8
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop

08004e28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
    __asm volatile
 8004e2e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004e32:	b672      	cpsid	i
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	b662      	cpsie	i
 8004e42:	607b      	str	r3, [r7, #4]
}
 8004e44:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004e46:	f002 fc2d 	bl	80076a4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004e4a:	f7fe fb91 	bl	8003570 <xTaskIncrementTick>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d006      	beq.n	8004e62 <SysTick_Handler+0x3a>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8004e54:	f002 fc84 	bl	8007760 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e58:	4b08      	ldr	r3, [pc, #32]	@ (8004e7c <SysTick_Handler+0x54>)
 8004e5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	e001      	b.n	8004e66 <SysTick_Handler+0x3e>
        }
        else
        {
            traceISR_EXIT();
 8004e62:	f002 fc61 	bl	8007728 <SEGGER_SYSVIEW_RecordExitISR>
 8004e66:	2300      	movs	r3, #0
 8004e68:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	f383 8811 	msr	BASEPRI, r3
}
 8004e70:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004e72:	bf00      	nop
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	e000ed04 	.word	0xe000ed04

08004e80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e84:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb4 <vPortSetupTimerInterrupt+0x34>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <vPortSetupTimerInterrupt+0x38>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e90:	4b0a      	ldr	r3, [pc, #40]	@ (8004ebc <vPortSetupTimerInterrupt+0x3c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec0 <vPortSetupTimerInterrupt+0x40>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	099b      	lsrs	r3, r3, #6
 8004e9c:	4a09      	ldr	r2, [pc, #36]	@ (8004ec4 <vPortSetupTimerInterrupt+0x44>)
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ea2:	4b04      	ldr	r3, [pc, #16]	@ (8004eb4 <vPortSetupTimerInterrupt+0x34>)
 8004ea4:	2207      	movs	r2, #7
 8004ea6:	601a      	str	r2, [r3, #0]
}
 8004ea8:	bf00      	nop
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	e000e010 	.word	0xe000e010
 8004eb8:	e000e018 	.word	0xe000e018
 8004ebc:	20000000 	.word	0x20000000
 8004ec0:	10624dd3 	.word	0x10624dd3
 8004ec4:	e000e014 	.word	0xe000e014

08004ec8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004ec8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004ed8 <vPortEnableVFP+0x10>
 8004ecc:	6801      	ldr	r1, [r0, #0]
 8004ece:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004ed2:	6001      	str	r1, [r0, #0]
 8004ed4:	4770      	bx	lr
 8004ed6:	0000      	.short	0x0000
 8004ed8:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8004edc:	bf00      	nop
 8004ede:	bf00      	nop

08004ee0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004ee6:	f3ef 8305 	mrs	r3, IPSR
 8004eea:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b0f      	cmp	r3, #15
 8004ef0:	d917      	bls.n	8004f22 <vPortValidateInterruptPriority+0x42>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8004f5c <vPortValidateInterruptPriority+0x7c>)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004efc:	4b18      	ldr	r3, [pc, #96]	@ (8004f60 <vPortValidateInterruptPriority+0x80>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	7afa      	ldrb	r2, [r7, #11]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d20d      	bcs.n	8004f22 <vPortValidateInterruptPriority+0x42>
    __asm volatile
 8004f06:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004f0a:	b672      	cpsid	i
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	b662      	cpsie	i
 8004f1a:	607b      	str	r3, [r7, #4]
}
 8004f1c:	bf00      	nop
 8004f1e:	bf00      	nop
 8004f20:	e7fd      	b.n	8004f1e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f22:	4b10      	ldr	r3, [pc, #64]	@ (8004f64 <vPortValidateInterruptPriority+0x84>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8004f68 <vPortValidateInterruptPriority+0x88>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d90d      	bls.n	8004f4e <vPortValidateInterruptPriority+0x6e>
    __asm volatile
 8004f32:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004f36:	b672      	cpsid	i
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	b662      	cpsie	i
 8004f46:	603b      	str	r3, [r7, #0]
}
 8004f48:	bf00      	nop
 8004f4a:	bf00      	nop
 8004f4c:	e7fd      	b.n	8004f4a <vPortValidateInterruptPriority+0x6a>
    }
 8004f4e:	bf00      	nop
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	e000e3f0 	.word	0xe000e3f0
 8004f60:	20000218 	.word	0x20000218
 8004f64:	e000ed0c 	.word	0xe000ed0c
 8004f68:	2000021c 	.word	0x2000021c

08004f6c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08e      	sub	sp, #56	@ 0x38
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004f74:	2300      	movs	r3, #0
 8004f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d022      	beq.n	8004fc4 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8004f7e:	2308      	movs	r3, #8
 8004f80:	43db      	mvns	r3, r3
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d81b      	bhi.n	8004fc0 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8004f88:	2208      	movs	r2, #8
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d014      	beq.n	8004fc4 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	f1c3 0308 	rsb	r3, r3, #8
 8004fa4:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d804      	bhi.n	8004fba <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb4:	4413      	add	r3, r2
 8004fb6:	607b      	str	r3, [r7, #4]
 8004fb8:	e004      	b.n	8004fc4 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	607b      	str	r3, [r7, #4]
 8004fbe:	e001      	b.n	8004fc4 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8004fc4:	f7fe f97c 	bl	80032c0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004fc8:	4b80      	ldr	r3, [pc, #512]	@ (80051cc <pvPortMalloc+0x260>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8004fd0:	f000 f98a 	bl	80052e8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f2c0 80de 	blt.w	8005198 <pvPortMalloc+0x22c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 80da 	beq.w	8005198 <pvPortMalloc+0x22c>
 8004fe4:	4b7a      	ldr	r3, [pc, #488]	@ (80051d0 <pvPortMalloc+0x264>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	f200 80d4 	bhi.w	8005198 <pvPortMalloc+0x22c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004ff0:	4b78      	ldr	r3, [pc, #480]	@ (80051d4 <pvPortMalloc+0x268>)
 8004ff2:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8004ff4:	4b77      	ldr	r3, [pc, #476]	@ (80051d4 <pvPortMalloc+0x268>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ffc:	4a76      	ldr	r2, [pc, #472]	@ (80051d8 <pvPortMalloc+0x26c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d305      	bcc.n	800500e <pvPortMalloc+0xa2>
 8005002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005004:	4a75      	ldr	r2, [pc, #468]	@ (80051dc <pvPortMalloc+0x270>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d801      	bhi.n	800500e <pvPortMalloc+0xa2>
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <pvPortMalloc+0xa4>
 800500e:	2300      	movs	r3, #0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d12d      	bne.n	8005070 <pvPortMalloc+0x104>
    __asm volatile
 8005014:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005018:	b672      	cpsid	i
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	b662      	cpsie	i
 8005028:	623b      	str	r3, [r7, #32]
}
 800502a:	bf00      	nop
 800502c:	bf00      	nop
 800502e:	e7fd      	b.n	800502c <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8005030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005032:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8005034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800503a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800503c:	4a66      	ldr	r2, [pc, #408]	@ (80051d8 <pvPortMalloc+0x26c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d305      	bcc.n	800504e <pvPortMalloc+0xe2>
 8005042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005044:	4a65      	ldr	r2, [pc, #404]	@ (80051dc <pvPortMalloc+0x270>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d801      	bhi.n	800504e <pvPortMalloc+0xe2>
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <pvPortMalloc+0xe4>
 800504e:	2300      	movs	r3, #0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10d      	bne.n	8005070 <pvPortMalloc+0x104>
    __asm volatile
 8005054:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005058:	b672      	cpsid	i
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	b662      	cpsie	i
 8005068:	61fb      	str	r3, [r7, #28]
}
 800506a:	bf00      	nop
 800506c:	bf00      	nop
 800506e:	e7fd      	b.n	800506c <pvPortMalloc+0x100>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8005070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	429a      	cmp	r2, r3
 8005078:	d903      	bls.n	8005082 <pvPortMalloc+0x116>
 800507a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1d6      	bne.n	8005030 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005082:	4b52      	ldr	r3, [pc, #328]	@ (80051cc <pvPortMalloc+0x260>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005088:	429a      	cmp	r2, r3
 800508a:	f000 8085 	beq.w	8005198 <pvPortMalloc+0x22c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 800508e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2208      	movs	r2, #8
 8005094:	4413      	add	r3, r2
 8005096:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8005098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509a:	4a4f      	ldr	r2, [pc, #316]	@ (80051d8 <pvPortMalloc+0x26c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d305      	bcc.n	80050ac <pvPortMalloc+0x140>
 80050a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a2:	4a4e      	ldr	r2, [pc, #312]	@ (80051dc <pvPortMalloc+0x270>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d801      	bhi.n	80050ac <pvPortMalloc+0x140>
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <pvPortMalloc+0x142>
 80050ac:	2300      	movs	r3, #0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10d      	bne.n	80050ce <pvPortMalloc+0x162>
    __asm volatile
 80050b2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80050b6:	b672      	cpsid	i
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	b662      	cpsie	i
 80050c6:	61bb      	str	r3, [r7, #24]
}
 80050c8:	bf00      	nop
 80050ca:	bf00      	nop
 80050cc:	e7fd      	b.n	80050ca <pvPortMalloc+0x15e>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d4:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80050d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d90d      	bls.n	80050fc <pvPortMalloc+0x190>
    __asm volatile
 80050e0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80050e4:	b672      	cpsid	i
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	b662      	cpsie	i
 80050f4:	617b      	str	r3, [r7, #20]
}
 80050f6:	bf00      	nop
 80050f8:	bf00      	nop
 80050fa:	e7fd      	b.n	80050f8 <pvPortMalloc+0x18c>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	1ad2      	subs	r2, r2, r3
 8005104:	2308      	movs	r3, #8
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	429a      	cmp	r2, r3
 800510a:	d926      	bls.n	800515a <pvPortMalloc+0x1ee>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800510c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4413      	add	r3, r2
 8005112:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00d      	beq.n	800513a <pvPortMalloc+0x1ce>
    __asm volatile
 800511e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005122:	b672      	cpsid	i
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	b662      	cpsie	i
 8005132:	613b      	str	r3, [r7, #16]
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop
 8005138:	e7fd      	b.n	8005136 <pvPortMalloc+0x1ca>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800513a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	1ad2      	subs	r2, r2, r3
 8005142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005144:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800514c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8005154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005158:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800515a:	4b1d      	ldr	r3, [pc, #116]	@ (80051d0 <pvPortMalloc+0x264>)
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	4a1a      	ldr	r2, [pc, #104]	@ (80051d0 <pvPortMalloc+0x264>)
 8005166:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005168:	4b19      	ldr	r3, [pc, #100]	@ (80051d0 <pvPortMalloc+0x264>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	4b1c      	ldr	r3, [pc, #112]	@ (80051e0 <pvPortMalloc+0x274>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	429a      	cmp	r2, r3
 8005172:	d203      	bcs.n	800517c <pvPortMalloc+0x210>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005174:	4b16      	ldr	r3, [pc, #88]	@ (80051d0 <pvPortMalloc+0x264>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a19      	ldr	r2, [pc, #100]	@ (80051e0 <pvPortMalloc+0x274>)
 800517a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800517c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005186:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800518e:	4b15      	ldr	r3, [pc, #84]	@ (80051e4 <pvPortMalloc+0x278>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3301      	adds	r3, #1
 8005194:	4a13      	ldr	r2, [pc, #76]	@ (80051e4 <pvPortMalloc+0x278>)
 8005196:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005198:	f7fe f8a0 	bl	80032dc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800519c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00d      	beq.n	80051c2 <pvPortMalloc+0x256>
    __asm volatile
 80051a6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80051aa:	b672      	cpsid	i
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	b662      	cpsie	i
 80051ba:	60fb      	str	r3, [r7, #12]
}
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
 80051c0:	e7fd      	b.n	80051be <pvPortMalloc+0x252>
    return pvReturn;
 80051c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3738      	adds	r7, #56	@ 0x38
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	2000ba28 	.word	0x2000ba28
 80051d0:	2000ba2c 	.word	0x2000ba2c
 80051d4:	2000ba20 	.word	0x2000ba20
 80051d8:	20000220 	.word	0x20000220
 80051dc:	2000ba1f 	.word	0x2000ba1f
 80051e0:	2000ba30 	.word	0x2000ba30
 80051e4:	2000ba34 	.word	0x2000ba34

080051e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d06a      	beq.n	80052d0 <vPortFree+0xe8>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80051fa:	2308      	movs	r3, #8
 80051fc:	425b      	negs	r3, r3
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	4413      	add	r3, r2
 8005202:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	4a33      	ldr	r2, [pc, #204]	@ (80052d8 <vPortFree+0xf0>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d305      	bcc.n	800521c <vPortFree+0x34>
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	4a32      	ldr	r2, [pc, #200]	@ (80052dc <vPortFree+0xf4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d801      	bhi.n	800521c <vPortFree+0x34>
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <vPortFree+0x36>
 800521c:	2300      	movs	r3, #0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10d      	bne.n	800523e <vPortFree+0x56>
    __asm volatile
 8005222:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005226:	b672      	cpsid	i
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	b662      	cpsie	i
 8005236:	617b      	str	r3, [r7, #20]
}
 8005238:	bf00      	nop
 800523a:	bf00      	nop
 800523c:	e7fd      	b.n	800523a <vPortFree+0x52>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	db0d      	blt.n	8005262 <vPortFree+0x7a>
    __asm volatile
 8005246:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800524a:	b672      	cpsid	i
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	b662      	cpsie	i
 800525a:	613b      	str	r3, [r7, #16]
}
 800525c:	bf00      	nop
 800525e:	bf00      	nop
 8005260:	e7fd      	b.n	800525e <vPortFree+0x76>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00d      	beq.n	8005286 <vPortFree+0x9e>
    __asm volatile
 800526a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800526e:	b672      	cpsid	i
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	b662      	cpsie	i
 800527e:	60fb      	str	r3, [r7, #12]
}
 8005280:	bf00      	nop
 8005282:	bf00      	nop
 8005284:	e7fd      	b.n	8005282 <vPortFree+0x9a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	0fdb      	lsrs	r3, r3, #31
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01c      	beq.n	80052d0 <vPortFree+0xe8>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d118      	bne.n	80052d0 <vPortFree+0xe8>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80052aa:	f7fe f809 	bl	80032c0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	4b0b      	ldr	r3, [pc, #44]	@ (80052e0 <vPortFree+0xf8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4413      	add	r3, r2
 80052b8:	4a09      	ldr	r2, [pc, #36]	@ (80052e0 <vPortFree+0xf8>)
 80052ba:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052bc:	69b8      	ldr	r0, [r7, #24]
 80052be:	f000 f86d 	bl	800539c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80052c2:	4b08      	ldr	r3, [pc, #32]	@ (80052e4 <vPortFree+0xfc>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3301      	adds	r3, #1
 80052c8:	4a06      	ldr	r2, [pc, #24]	@ (80052e4 <vPortFree+0xfc>)
 80052ca:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80052cc:	f7fe f806 	bl	80032dc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80052d0:	bf00      	nop
 80052d2:	3720      	adds	r7, #32
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000220 	.word	0x20000220
 80052dc:	2000ba1f 	.word	0x2000ba1f
 80052e0:	2000ba2c 	.word	0x2000ba2c
 80052e4:	2000ba38 	.word	0x2000ba38

080052e8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052ee:	f44f 4338 	mov.w	r3, #47104	@ 0xb800
 80052f2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80052f4:	4b24      	ldr	r3, [pc, #144]	@ (8005388 <prvHeapInit+0xa0>)
 80052f6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00c      	beq.n	800531c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3307      	adds	r3, #7
 8005306:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0307 	bic.w	r3, r3, #7
 800530e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	4a1c      	ldr	r2, [pc, #112]	@ (8005388 <prvHeapInit+0xa0>)
 8005318:	4413      	add	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4a1b      	ldr	r2, [pc, #108]	@ (800538c <prvHeapInit+0xa4>)
 8005320:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005322:	4b1a      	ldr	r3, [pc, #104]	@ (800538c <prvHeapInit+0xa4>)
 8005324:	2200      	movs	r2, #0
 8005326:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	4413      	add	r3, r2
 800532e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8005330:	2208      	movs	r2, #8
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	1a9b      	subs	r3, r3, r2
 8005336:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f023 0307 	bic.w	r3, r3, #7
 800533e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a13      	ldr	r2, [pc, #76]	@ (8005390 <prvHeapInit+0xa8>)
 8005344:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005346:	4b12      	ldr	r3, [pc, #72]	@ (8005390 <prvHeapInit+0xa8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2200      	movs	r2, #0
 800534c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800534e:	4b10      	ldr	r3, [pc, #64]	@ (8005390 <prvHeapInit+0xa8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	1ad2      	subs	r2, r2, r3
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005364:	4b0a      	ldr	r3, [pc, #40]	@ (8005390 <prvHeapInit+0xa8>)
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	4a08      	ldr	r2, [pc, #32]	@ (8005394 <prvHeapInit+0xac>)
 8005372:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	4a07      	ldr	r2, [pc, #28]	@ (8005398 <prvHeapInit+0xb0>)
 800537a:	6013      	str	r3, [r2, #0]
}
 800537c:	bf00      	nop
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	20000220 	.word	0x20000220
 800538c:	2000ba20 	.word	0x2000ba20
 8005390:	2000ba28 	.word	0x2000ba28
 8005394:	2000ba30 	.word	0x2000ba30
 8005398:	2000ba2c 	.word	0x2000ba2c

0800539c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80053a4:	4b37      	ldr	r3, [pc, #220]	@ (8005484 <prvInsertBlockIntoFreeList+0xe8>)
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	e002      	b.n	80053b0 <prvInsertBlockIntoFreeList+0x14>
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d8f7      	bhi.n	80053aa <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	4a31      	ldr	r2, [pc, #196]	@ (8005484 <prvInsertBlockIntoFreeList+0xe8>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d01a      	beq.n	80053f8 <prvInsertBlockIntoFreeList+0x5c>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	4a30      	ldr	r2, [pc, #192]	@ (8005488 <prvInsertBlockIntoFreeList+0xec>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d305      	bcc.n	80053d6 <prvInsertBlockIntoFreeList+0x3a>
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	4a2f      	ldr	r2, [pc, #188]	@ (800548c <prvInsertBlockIntoFreeList+0xf0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d801      	bhi.n	80053d6 <prvInsertBlockIntoFreeList+0x3a>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <prvInsertBlockIntoFreeList+0x3c>
 80053d6:	2300      	movs	r3, #0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10d      	bne.n	80053f8 <prvInsertBlockIntoFreeList+0x5c>
    __asm volatile
 80053dc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80053e0:	b672      	cpsid	i
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	b662      	cpsie	i
 80053f0:	60fb      	str	r3, [r7, #12]
}
 80053f2:	bf00      	nop
 80053f4:	bf00      	nop
 80053f6:	e7fd      	b.n	80053f4 <prvInsertBlockIntoFreeList+0x58>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4413      	add	r3, r2
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	429a      	cmp	r2, r3
 8005408:	d108      	bne.n	800541c <prvInsertBlockIntoFreeList+0x80>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	441a      	add	r2, r3
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	441a      	add	r2, r3
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d118      	bne.n	8005462 <prvInsertBlockIntoFreeList+0xc6>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	4b16      	ldr	r3, [pc, #88]	@ (8005490 <prvInsertBlockIntoFreeList+0xf4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d00d      	beq.n	8005458 <prvInsertBlockIntoFreeList+0xbc>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	441a      	add	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	e008      	b.n	800546a <prvInsertBlockIntoFreeList+0xce>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005458:	4b0d      	ldr	r3, [pc, #52]	@ (8005490 <prvInsertBlockIntoFreeList+0xf4>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	e003      	b.n	800546a <prvInsertBlockIntoFreeList+0xce>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	429a      	cmp	r2, r3
 8005470:	d002      	beq.n	8005478 <prvInsertBlockIntoFreeList+0xdc>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005478:	bf00      	nop
 800547a:	371c      	adds	r7, #28
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	2000ba20 	.word	0x2000ba20
 8005488:	20000220 	.word	0x20000220
 800548c:	2000ba1f 	.word	0x2000ba1f
 8005490:	2000ba28 	.word	0x2000ba28

08005494 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005498:	4803      	ldr	r0, [pc, #12]	@ (80054a8 <_cbSendSystemDesc+0x14>)
 800549a:	f002 f8ad 	bl	80075f8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800549e:	4803      	ldr	r0, [pc, #12]	@ (80054ac <_cbSendSystemDesc+0x18>)
 80054a0:	f002 f8aa 	bl	80075f8 <SEGGER_SYSVIEW_SendSysDesc>
}
 80054a4:	bf00      	nop
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	08007f98 	.word	0x08007f98
 80054ac:	08007fd4 	.word	0x08007fd4

080054b0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80054b4:	4b06      	ldr	r3, [pc, #24]	@ (80054d0 <SEGGER_SYSVIEW_Conf+0x20>)
 80054b6:	6818      	ldr	r0, [r3, #0]
 80054b8:	4b05      	ldr	r3, [pc, #20]	@ (80054d0 <SEGGER_SYSVIEW_Conf+0x20>)
 80054ba:	6819      	ldr	r1, [r3, #0]
 80054bc:	4b05      	ldr	r3, [pc, #20]	@ (80054d4 <SEGGER_SYSVIEW_Conf+0x24>)
 80054be:	4a06      	ldr	r2, [pc, #24]	@ (80054d8 <SEGGER_SYSVIEW_Conf+0x28>)
 80054c0:	f001 fd20 	bl	8006f04 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80054c4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80054c8:	f001 fd60 	bl	8006f8c <SEGGER_SYSVIEW_SetRAMBase>
}
 80054cc:	bf00      	nop
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	20000000 	.word	0x20000000
 80054d4:	08005495 	.word	0x08005495
 80054d8:	08008070 	.word	0x08008070

080054dc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80054dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054de:	b085      	sub	sp, #20
 80054e0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80054e2:	2300      	movs	r3, #0
 80054e4:	607b      	str	r3, [r7, #4]
 80054e6:	e033      	b.n	8005550 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80054e8:	491e      	ldr	r1, [pc, #120]	@ (8005564 <_cbSendTaskList+0x88>)
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	4613      	mov	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	6818      	ldr	r0, [r3, #0]
 80054f8:	491a      	ldr	r1, [pc, #104]	@ (8005564 <_cbSendTaskList+0x88>)
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	3304      	adds	r3, #4
 8005508:	6819      	ldr	r1, [r3, #0]
 800550a:	4c16      	ldr	r4, [pc, #88]	@ (8005564 <_cbSendTaskList+0x88>)
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4423      	add	r3, r4
 8005518:	3308      	adds	r3, #8
 800551a:	681c      	ldr	r4, [r3, #0]
 800551c:	4d11      	ldr	r5, [pc, #68]	@ (8005564 <_cbSendTaskList+0x88>)
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	442b      	add	r3, r5
 800552a:	330c      	adds	r3, #12
 800552c:	681d      	ldr	r5, [r3, #0]
 800552e:	4e0d      	ldr	r6, [pc, #52]	@ (8005564 <_cbSendTaskList+0x88>)
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	4613      	mov	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4433      	add	r3, r6
 800553c:	3310      	adds	r3, #16
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	462b      	mov	r3, r5
 8005544:	4622      	mov	r2, r4
 8005546:	f000 f979 	bl	800583c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3301      	adds	r3, #1
 800554e:	607b      	str	r3, [r7, #4]
 8005550:	4b05      	ldr	r3, [pc, #20]	@ (8005568 <_cbSendTaskList+0x8c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	429a      	cmp	r2, r3
 8005558:	d3c6      	bcc.n	80054e8 <_cbSendTaskList+0xc>
  }
}
 800555a:	bf00      	nop
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005564:	2000ba3c 	.word	0x2000ba3c
 8005568:	2000badc 	.word	0x2000badc

0800556c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800556c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005574:	f7fd ffd8 	bl	8003528 <xTaskGetTickCountFromISR>
 8005578:	4603      	mov	r3, r0
 800557a:	2200      	movs	r2, #0
 800557c:	469a      	mov	sl, r3
 800557e:	4693      	mov	fp, r2
 8005580:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005584:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	f04f 0a00 	mov.w	sl, #0
 8005590:	f04f 0b00 	mov.w	fp, #0
 8005594:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005598:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800559c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80055a0:	4652      	mov	r2, sl
 80055a2:	465b      	mov	r3, fp
 80055a4:	1a14      	subs	r4, r2, r0
 80055a6:	eb63 0501 	sbc.w	r5, r3, r1
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	f04f 0300 	mov.w	r3, #0
 80055b2:	00ab      	lsls	r3, r5, #2
 80055b4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80055b8:	00a2      	lsls	r2, r4, #2
 80055ba:	4614      	mov	r4, r2
 80055bc:	461d      	mov	r5, r3
 80055be:	eb14 0800 	adds.w	r8, r4, r0
 80055c2:	eb45 0901 	adc.w	r9, r5, r1
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	f04f 0300 	mov.w	r3, #0
 80055ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055da:	4690      	mov	r8, r2
 80055dc:	4699      	mov	r9, r3
 80055de:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80055e2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80055e6:	4610      	mov	r0, r2
 80055e8:	4619      	mov	r1, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080055f4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005602:	2205      	movs	r2, #5
 8005604:	492b      	ldr	r1, [pc, #172]	@ (80056b4 <SYSVIEW_AddTask+0xc0>)
 8005606:	68b8      	ldr	r0, [r7, #8]
 8005608:	f002 fc30 	bl	8007e6c <memcmp>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d04b      	beq.n	80056aa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005612:	4b29      	ldr	r3, [pc, #164]	@ (80056b8 <SYSVIEW_AddTask+0xc4>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b07      	cmp	r3, #7
 8005618:	d903      	bls.n	8005622 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800561a:	4828      	ldr	r0, [pc, #160]	@ (80056bc <SYSVIEW_AddTask+0xc8>)
 800561c:	f002 fb9c 	bl	8007d58 <SEGGER_SYSVIEW_Warn>
    return;
 8005620:	e044      	b.n	80056ac <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005622:	4b25      	ldr	r3, [pc, #148]	@ (80056b8 <SYSVIEW_AddTask+0xc4>)
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	4926      	ldr	r1, [pc, #152]	@ (80056c0 <SYSVIEW_AddTask+0xcc>)
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005636:	4b20      	ldr	r3, [pc, #128]	@ (80056b8 <SYSVIEW_AddTask+0xc4>)
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	4921      	ldr	r1, [pc, #132]	@ (80056c0 <SYSVIEW_AddTask+0xcc>)
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	3304      	adds	r3, #4
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800564c:	4b1a      	ldr	r3, [pc, #104]	@ (80056b8 <SYSVIEW_AddTask+0xc4>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	491b      	ldr	r1, [pc, #108]	@ (80056c0 <SYSVIEW_AddTask+0xcc>)
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	440b      	add	r3, r1
 800565c:	3308      	adds	r3, #8
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005662:	4b15      	ldr	r3, [pc, #84]	@ (80056b8 <SYSVIEW_AddTask+0xc4>)
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	4916      	ldr	r1, [pc, #88]	@ (80056c0 <SYSVIEW_AddTask+0xcc>)
 8005668:	4613      	mov	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	330c      	adds	r3, #12
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005678:	4b0f      	ldr	r3, [pc, #60]	@ (80056b8 <SYSVIEW_AddTask+0xc4>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	4910      	ldr	r1, [pc, #64]	@ (80056c0 <SYSVIEW_AddTask+0xcc>)
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	440b      	add	r3, r1
 8005688:	3310      	adds	r3, #16
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800568e:	4b0a      	ldr	r3, [pc, #40]	@ (80056b8 <SYSVIEW_AddTask+0xc4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3301      	adds	r3, #1
 8005694:	4a08      	ldr	r2, [pc, #32]	@ (80056b8 <SYSVIEW_AddTask+0xc4>)
 8005696:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 f8ca 	bl	800583c <SYSVIEW_SendTaskInfo>
 80056a8:	e000      	b.n	80056ac <SYSVIEW_AddTask+0xb8>
    return;
 80056aa:	bf00      	nop

}
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	08007fe4 	.word	0x08007fe4
 80056b8:	2000badc 	.word	0x2000badc
 80056bc:	08007fec 	.word	0x08007fec
 80056c0:	2000ba3c 	.word	0x2000ba3c

080056c4 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80056cc:	4b59      	ldr	r3, [pc, #356]	@ (8005834 <SYSVIEW_DeleteTask+0x170>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 80ab 	beq.w	800582c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	e00d      	b.n	80056f8 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 80056dc:	4956      	ldr	r1, [pc, #344]	@ (8005838 <SYSVIEW_DeleteTask+0x174>)
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4613      	mov	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	440b      	add	r3, r1
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d008      	beq.n	8005704 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3301      	adds	r3, #1
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	4b4e      	ldr	r3, [pc, #312]	@ (8005834 <SYSVIEW_DeleteTask+0x170>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d3ec      	bcc.n	80056dc <SYSVIEW_DeleteTask+0x18>
 8005702:	e000      	b.n	8005706 <SYSVIEW_DeleteTask+0x42>
      break;
 8005704:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8005706:	4b4b      	ldr	r3, [pc, #300]	@ (8005834 <SYSVIEW_DeleteTask+0x170>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3b01      	subs	r3, #1
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	429a      	cmp	r2, r3
 8005710:	d111      	bne.n	8005736 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4613      	mov	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4a46      	ldr	r2, [pc, #280]	@ (8005838 <SYSVIEW_DeleteTask+0x174>)
 800571e:	4413      	add	r3, r2
 8005720:	2214      	movs	r2, #20
 8005722:	2100      	movs	r1, #0
 8005724:	4618      	mov	r0, r3
 8005726:	f002 fbb1 	bl	8007e8c <memset>
    _NumTasks--;
 800572a:	4b42      	ldr	r3, [pc, #264]	@ (8005834 <SYSVIEW_DeleteTask+0x170>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3b01      	subs	r3, #1
 8005730:	4a40      	ldr	r2, [pc, #256]	@ (8005834 <SYSVIEW_DeleteTask+0x170>)
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	e07b      	b.n	800582e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8005736:	4b3f      	ldr	r3, [pc, #252]	@ (8005834 <SYSVIEW_DeleteTask+0x170>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	429a      	cmp	r2, r3
 800573e:	d276      	bcs.n	800582e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8005740:	4b3c      	ldr	r3, [pc, #240]	@ (8005834 <SYSVIEW_DeleteTask+0x170>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	1e5a      	subs	r2, r3, #1
 8005746:	493c      	ldr	r1, [pc, #240]	@ (8005838 <SYSVIEW_DeleteTask+0x174>)
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	440b      	add	r3, r1
 8005752:	6819      	ldr	r1, [r3, #0]
 8005754:	4838      	ldr	r0, [pc, #224]	@ (8005838 <SYSVIEW_DeleteTask+0x174>)
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4613      	mov	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4403      	add	r3, r0
 8005762:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005764:	4b33      	ldr	r3, [pc, #204]	@ (8005834 <SYSVIEW_DeleteTask+0x170>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	1e5a      	subs	r2, r3, #1
 800576a:	4933      	ldr	r1, [pc, #204]	@ (8005838 <SYSVIEW_DeleteTask+0x174>)
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	3304      	adds	r3, #4
 8005778:	6819      	ldr	r1, [r3, #0]
 800577a:	482f      	ldr	r0, [pc, #188]	@ (8005838 <SYSVIEW_DeleteTask+0x174>)
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4403      	add	r3, r0
 8005788:	3304      	adds	r3, #4
 800578a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800578c:	4b29      	ldr	r3, [pc, #164]	@ (8005834 <SYSVIEW_DeleteTask+0x170>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	1e5a      	subs	r2, r3, #1
 8005792:	4929      	ldr	r1, [pc, #164]	@ (8005838 <SYSVIEW_DeleteTask+0x174>)
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	440b      	add	r3, r1
 800579e:	3308      	adds	r3, #8
 80057a0:	6819      	ldr	r1, [r3, #0]
 80057a2:	4825      	ldr	r0, [pc, #148]	@ (8005838 <SYSVIEW_DeleteTask+0x174>)
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4403      	add	r3, r0
 80057b0:	3308      	adds	r3, #8
 80057b2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80057b4:	4b1f      	ldr	r3, [pc, #124]	@ (8005834 <SYSVIEW_DeleteTask+0x170>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	1e5a      	subs	r2, r3, #1
 80057ba:	491f      	ldr	r1, [pc, #124]	@ (8005838 <SYSVIEW_DeleteTask+0x174>)
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	330c      	adds	r3, #12
 80057c8:	6819      	ldr	r1, [r3, #0]
 80057ca:	481b      	ldr	r0, [pc, #108]	@ (8005838 <SYSVIEW_DeleteTask+0x174>)
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4613      	mov	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4403      	add	r3, r0
 80057d8:	330c      	adds	r3, #12
 80057da:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80057dc:	4b15      	ldr	r3, [pc, #84]	@ (8005834 <SYSVIEW_DeleteTask+0x170>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	1e5a      	subs	r2, r3, #1
 80057e2:	4915      	ldr	r1, [pc, #84]	@ (8005838 <SYSVIEW_DeleteTask+0x174>)
 80057e4:	4613      	mov	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	440b      	add	r3, r1
 80057ee:	3310      	adds	r3, #16
 80057f0:	6819      	ldr	r1, [r3, #0]
 80057f2:	4811      	ldr	r0, [pc, #68]	@ (8005838 <SYSVIEW_DeleteTask+0x174>)
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4613      	mov	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4413      	add	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4403      	add	r3, r0
 8005800:	3310      	adds	r3, #16
 8005802:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8005804:	4b0b      	ldr	r3, [pc, #44]	@ (8005834 <SYSVIEW_DeleteTask+0x170>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	1e5a      	subs	r2, r3, #1
 800580a:	4613      	mov	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4a09      	ldr	r2, [pc, #36]	@ (8005838 <SYSVIEW_DeleteTask+0x174>)
 8005814:	4413      	add	r3, r2
 8005816:	2214      	movs	r2, #20
 8005818:	2100      	movs	r1, #0
 800581a:	4618      	mov	r0, r3
 800581c:	f002 fb36 	bl	8007e8c <memset>
    _NumTasks--;
 8005820:	4b04      	ldr	r3, [pc, #16]	@ (8005834 <SYSVIEW_DeleteTask+0x170>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3b01      	subs	r3, #1
 8005826:	4a03      	ldr	r2, [pc, #12]	@ (8005834 <SYSVIEW_DeleteTask+0x170>)
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	e000      	b.n	800582e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800582c:	bf00      	nop
  }
}
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	2000badc 	.word	0x2000badc
 8005838:	2000ba3c 	.word	0x2000ba3c

0800583c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b08a      	sub	sp, #40	@ 0x28
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800584a:	f107 0310 	add.w	r3, r7, #16
 800584e:	2218      	movs	r2, #24
 8005850:	2100      	movs	r1, #0
 8005852:	4618      	mov	r0, r3
 8005854:	f002 fb1a 	bl	8007e8c <memset>
  TaskInfo.TaskID     = TaskID;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8005868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586a:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800586c:	f107 0310 	add.w	r3, r7, #16
 8005870:	4618      	mov	r0, r3
 8005872:	f001 fdc9 	bl	8007408 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005876:	bf00      	nop
 8005878:	3728      	adds	r7, #40	@ 0x28
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
	...

08005880 <__NVIC_EnableIRQ>:
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800588a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800588e:	2b00      	cmp	r3, #0
 8005890:	db0b      	blt.n	80058aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	f003 021f 	and.w	r2, r3, #31
 8005898:	4907      	ldr	r1, [pc, #28]	@ (80058b8 <__NVIC_EnableIRQ+0x38>)
 800589a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	2001      	movs	r0, #1
 80058a2:	fa00 f202 	lsl.w	r2, r0, r2
 80058a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	e000e100 	.word	0xe000e100

080058bc <__NVIC_SetPriority>:
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	4603      	mov	r3, r0
 80058c4:	6039      	str	r1, [r7, #0]
 80058c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	db0a      	blt.n	80058e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	490c      	ldr	r1, [pc, #48]	@ (8005908 <__NVIC_SetPriority+0x4c>)
 80058d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058da:	0112      	lsls	r2, r2, #4
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	440b      	add	r3, r1
 80058e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80058e4:	e00a      	b.n	80058fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	4908      	ldr	r1, [pc, #32]	@ (800590c <__NVIC_SetPriority+0x50>)
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	3b04      	subs	r3, #4
 80058f4:	0112      	lsls	r2, r2, #4
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	440b      	add	r3, r1
 80058fa:	761a      	strb	r2, [r3, #24]
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	e000e100 	.word	0xe000e100
 800590c:	e000ed00 	.word	0xe000ed00

08005910 <_StartSysView>:

} _SVInfo = {0,0,1};



static void _StartSysView(void) {
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0

  int r;



  r = SEGGER_SYSVIEW_IsStarted();
 8005916:	f002 fa7b 	bl	8007e10 <SEGGER_SYSVIEW_IsStarted>
 800591a:	6078      	str	r0, [r7, #4]

  if (r == 0) {
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <_StartSysView+0x16>

    SEGGER_SYSVIEW_Start();
 8005922:	f001 fbf7 	bl	8007114 <SEGGER_SYSVIEW_Start>

  }

}
 8005926:	bf00      	nop
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
	...

08005930 <_cbOnUARTRx>:



static void _cbOnUARTRx(U8 Data) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	4603      	mov	r3, r0
 8005938:	71fb      	strb	r3, [r7, #7]

  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800593a:	4b0c      	ldr	r3, [pc, #48]	@ (800596c <_cbOnUARTRx+0x3c>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b03      	cmp	r3, #3
 8005940:	d806      	bhi.n	8005950 <_cbOnUARTRx+0x20>

    _SVInfo.NumBytesHelloRcvd++;
 8005942:	4b0a      	ldr	r3, [pc, #40]	@ (800596c <_cbOnUARTRx+0x3c>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	3301      	adds	r3, #1
 8005948:	b2da      	uxtb	r2, r3
 800594a:	4b08      	ldr	r3, [pc, #32]	@ (800596c <_cbOnUARTRx+0x3c>)
 800594c:	701a      	strb	r2, [r3, #0]

    goto Done;
 800594e:	e009      	b.n	8005964 <_cbOnUARTRx+0x34>

  }

  _StartSysView();
 8005950:	f7ff ffde 	bl	8005910 <_StartSysView>

  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005954:	4b05      	ldr	r3, [pc, #20]	@ (800596c <_cbOnUARTRx+0x3c>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	4618      	mov	r0, r3
 800595a:	1dfb      	adds	r3, r7, #7
 800595c:	2201      	movs	r2, #1
 800595e:	4619      	mov	r1, r3
 8005960:	f000 fb8e 	bl	8006080 <SEGGER_RTT_WriteDownBuffer>

Done:

  return;
 8005964:	bf00      	nop

}
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	20000014 	.word	0x20000014

08005970 <_cbOnUARTTx>:



static int _cbOnUARTTx(U8* pChar) {
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]

  int r;



  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005978:	4b14      	ldr	r3, [pc, #80]	@ (80059cc <_cbOnUARTTx+0x5c>)
 800597a:	785b      	ldrb	r3, [r3, #1]
 800597c:	2b03      	cmp	r3, #3
 800597e:	d80f      	bhi.n	80059a0 <_cbOnUARTTx+0x30>

    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005980:	4b12      	ldr	r3, [pc, #72]	@ (80059cc <_cbOnUARTTx+0x5c>)
 8005982:	785b      	ldrb	r3, [r3, #1]
 8005984:	461a      	mov	r2, r3
 8005986:	4b12      	ldr	r3, [pc, #72]	@ (80059d0 <_cbOnUARTTx+0x60>)
 8005988:	5c9a      	ldrb	r2, [r3, r2]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	701a      	strb	r2, [r3, #0]

    _SVInfo.NumBytesHelloSent++;
 800598e:	4b0f      	ldr	r3, [pc, #60]	@ (80059cc <_cbOnUARTTx+0x5c>)
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	3301      	adds	r3, #1
 8005994:	b2da      	uxtb	r2, r3
 8005996:	4b0d      	ldr	r3, [pc, #52]	@ (80059cc <_cbOnUARTTx+0x5c>)
 8005998:	705a      	strb	r2, [r3, #1]

    r = 1;
 800599a:	2301      	movs	r3, #1
 800599c:	60fb      	str	r3, [r7, #12]

    goto Done;
 800599e:	e00f      	b.n	80059c0 <_cbOnUARTTx+0x50>

  }

  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80059a0:	4b0a      	ldr	r3, [pc, #40]	@ (80059cc <_cbOnUARTTx+0x5c>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	6879      	ldr	r1, [r7, #4]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fa0d 	bl	8005dc8 <SEGGER_RTT_ReadUpBufferNoLock>
 80059ae:	4603      	mov	r3, r0
 80059b0:	60fb      	str	r3, [r7, #12]

  if (r < 0) {  // Failed to read from up buffer?
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	da02      	bge.n	80059be <_cbOnUARTTx+0x4e>

    r = 0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	e000      	b.n	80059c0 <_cbOnUARTTx+0x50>

  }

Done:
 80059be:	bf00      	nop

  return r;
 80059c0:	68fb      	ldr	r3, [r7, #12]

}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20000014 	.word	0x20000014
 80059d0:	08008078 	.word	0x08008078

080059d4 <SEGGER_UART_init>:



void SEGGER_UART_init(U32 baud)

{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]

HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80059dc:	4a04      	ldr	r2, [pc, #16]	@ (80059f0 <SEGGER_UART_init+0x1c>)
 80059de:	4905      	ldr	r1, [pc, #20]	@ (80059f4 <SEGGER_UART_init+0x20>)
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f855 	bl	8005a90 <HIF_UART_Init>

}
 80059e6:	bf00      	nop
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	08005931 	.word	0x08005931
 80059f4:	08005971 	.word	0x08005971

080059f8 <USART3_IRQHandler>:

*/

void USART3_IRQHandler(void);

void USART3_IRQHandler(void) {
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0

  int r;



  UsartStatus = USART_SR;                              // Examine status register
 80059fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005a78 <USART3_IRQHandler+0x80>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60fb      	str	r3, [r7, #12]

  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d011      	beq.n	8005a32 <USART3_IRQHandler+0x3a>

    v = USART_RDR;                                      // Read data
 8005a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8005a7c <USART3_IRQHandler+0x84>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	71fb      	strb	r3, [r7, #7]

    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f003 030b 	and.w	r3, r3, #11
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d108      	bne.n	8005a32 <USART3_IRQHandler+0x3a>

      (void)v;                                         // Avoid warning in BTL

      if (_cbOnRx) {
 8005a20:	4b17      	ldr	r3, [pc, #92]	@ (8005a80 <USART3_IRQHandler+0x88>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d004      	beq.n	8005a32 <USART3_IRQHandler+0x3a>

        _cbOnRx(v);
 8005a28:	4b15      	ldr	r3, [pc, #84]	@ (8005a80 <USART3_IRQHandler+0x88>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	79fa      	ldrb	r2, [r7, #7]
 8005a2e:	4610      	mov	r0, r2
 8005a30:	4798      	blx	r3

    }

  }

  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01a      	beq.n	8005a72 <USART3_IRQHandler+0x7a>

    // Therefore, we need to check if the function pointer is valid.

    //

    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005a3c:	4b11      	ldr	r3, [pc, #68]	@ (8005a84 <USART3_IRQHandler+0x8c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d015      	beq.n	8005a70 <USART3_IRQHandler+0x78>

      return;

    }

    r = _cbOnTx(&v);
 8005a44:	4b0f      	ldr	r3, [pc, #60]	@ (8005a84 <USART3_IRQHandler+0x8c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	1dfa      	adds	r2, r7, #7
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	4798      	blx	r3
 8005a4e:	60b8      	str	r0, [r7, #8]

    if (r == 0) {                          // No more characters to send ?
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d106      	bne.n	8005a64 <USART3_IRQHandler+0x6c>

      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005a56:	4b0c      	ldr	r3, [pc, #48]	@ (8005a88 <USART3_IRQHandler+0x90>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a0b      	ldr	r2, [pc, #44]	@ (8005a88 <USART3_IRQHandler+0x90>)
 8005a5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	e006      	b.n	8005a72 <USART3_IRQHandler+0x7a>

    } else {

      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005a64:	4b04      	ldr	r3, [pc, #16]	@ (8005a78 <USART3_IRQHandler+0x80>)
 8005a66:	681b      	ldr	r3, [r3, #0]

      USART_TDR = v;  // Start transmission by writing to data register
 8005a68:	79fa      	ldrb	r2, [r7, #7]
 8005a6a:	4b08      	ldr	r3, [pc, #32]	@ (8005a8c <USART3_IRQHandler+0x94>)
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	e000      	b.n	8005a72 <USART3_IRQHandler+0x7a>
      return;
 8005a70:	bf00      	nop

    }

  }

}
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	4000481c 	.word	0x4000481c
 8005a7c:	40004824 	.word	0x40004824
 8005a80:	2000bae0 	.word	0x2000bae0
 8005a84:	2000bae4 	.word	0x2000bae4
 8005a88:	40004800 	.word	0x40004800
 8005a8c:	40004828 	.word	0x40004828

08005a90 <HIF_UART_Init>:

*       HIF_UART_Init()

*/

void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]

  //

  // Habilitar reloj de USART3 y puerto D

  RCC_APB1ENR |= (1 << 18);       // Habilitar reloj USART3 (APB1)
 8005a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8005b58 <HIF_UART_Init+0xc8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a2d      	ldr	r2, [pc, #180]	@ (8005b58 <HIF_UART_Init+0xc8>)
 8005aa2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005aa6:	6013      	str	r3, [r2, #0]

  RCC_AHB1ENR |= (1 << 3);        // Habilitar reloj GPIO D
 8005aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8005b5c <HIF_UART_Init+0xcc>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a2b      	ldr	r2, [pc, #172]	@ (8005b5c <HIF_UART_Init+0xcc>)
 8005aae:	f043 0308 	orr.w	r3, r3, #8
 8005ab2:	6013      	str	r3, [r2, #0]



  // Configurar los pines PD8 y PD9 para función alternativa AF7 (USART3)

  v  = GPIO_AFRH;
 8005ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8005b60 <HIF_UART_Init+0xd0>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	613b      	str	r3, [r7, #16]

  v &= ~((15UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (15UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005ac0:	613b      	str	r3, [r7, #16]

  v |=  ((7UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (7UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ac8:	613b      	str	r3, [r7, #16]

  GPIO_AFRH = v;
 8005aca:	4a25      	ldr	r2, [pc, #148]	@ (8005b60 <HIF_UART_Init+0xd0>)
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	6013      	str	r3, [r2, #0]

  // Configure USART RX/TX pins for alternate function usage

  //

  v  = GPIO_MODER;
 8005ad0:	4b24      	ldr	r3, [pc, #144]	@ (8005b64 <HIF_UART_Init+0xd4>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	613b      	str	r3, [r7, #16]

  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8005adc:	613b      	str	r3, [r7, #16]

  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8005ae4:	613b      	str	r3, [r7, #16]

  GPIO_MODER = v;
 8005ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8005b64 <HIF_UART_Init+0xd4>)
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	6013      	str	r3, [r2, #0]

  // Set baudrate

  //

  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	617b      	str	r3, [r7, #20]

  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8005af2:	4a1d      	ldr	r2, [pc, #116]	@ (8005b68 <HIF_UART_Init+0xd8>)
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005afa:	3301      	adds	r3, #1
 8005afc:	617b      	str	r3, [r7, #20]

  Div = Div / 2;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	085b      	lsrs	r3, r3, #1
 8005b02:	617b      	str	r3, [r7, #20]

  if (Div > 0xFFF) {
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b0a:	d302      	bcc.n	8005b12 <HIF_UART_Init+0x82>

    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005b0c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005b10:	617b      	str	r3, [r7, #20]

  }

  if (Div >= 1) {
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d004      	beq.n	8005b22 <HIF_UART_Init+0x92>

    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	011b      	lsls	r3, r3, #4
 8005b1c:	4a13      	ldr	r2, [pc, #76]	@ (8005b6c <HIF_UART_Init+0xdc>)
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	6013      	str	r3, [r2, #0]

  // Initialize USART

  //

  USART_CR1 = 0
 8005b22:	4b13      	ldr	r3, [pc, #76]	@ (8005b70 <HIF_UART_Init+0xe0>)
 8005b24:	f248 022d 	movw	r2, #32813	@ 0x802d
 8005b28:	601a      	str	r2, [r3, #0]

            | (1 <<  2)                         // RE     = 1; Receiver enabled

            ;

  USART_CR2 = 0
 8005b2a:	4b12      	ldr	r3, [pc, #72]	@ (8005b74 <HIF_UART_Init+0xe4>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]

            | (0 << 12)                         // STOP = 00b; 1 stop bit

            ;

  USART_CR3 = 0
 8005b30:	4b11      	ldr	r3, [pc, #68]	@ (8005b78 <HIF_UART_Init+0xe8>)
 8005b32:	2280      	movs	r2, #128	@ 0x80
 8005b34:	601a      	str	r2, [r3, #0]

  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC

  //

  _cbOnRx = cbOnRx;
 8005b36:	4a11      	ldr	r2, [pc, #68]	@ (8005b7c <HIF_UART_Init+0xec>)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6013      	str	r3, [r2, #0]

  _cbOnTx = cbOnTx;
 8005b3c:	4a10      	ldr	r2, [pc, #64]	@ (8005b80 <HIF_UART_Init+0xf0>)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	6013      	str	r3, [r2, #0]

  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005b42:	2106      	movs	r1, #6
 8005b44:	2027      	movs	r0, #39	@ 0x27
 8005b46:	f7ff feb9 	bl	80058bc <__NVIC_SetPriority>

  NVIC_EnableIRQ(USART_IRQn);
 8005b4a:	2027      	movs	r0, #39	@ 0x27
 8005b4c:	f7ff fe98 	bl	8005880 <__NVIC_EnableIRQ>

}
 8005b50:	bf00      	nop
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	40023840 	.word	0x40023840
 8005b5c:	40023830 	.word	0x40023830
 8005b60:	40020c24 	.word	0x40020c24
 8005b64:	40020c00 	.word	0x40020c00
 8005b68:	0501bd00 	.word	0x0501bd00
 8005b6c:	4000480c 	.word	0x4000480c
 8005b70:	40004800 	.word	0x40004800
 8005b74:	40004804 	.word	0x40004804
 8005b78:	40004808 	.word	0x40004808
 8005b7c:	2000bae0 	.word	0x2000bae0
 8005b80:	2000bae4 	.word	0x2000bae4

08005b84 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005b8a:	4b26      	ldr	r3, [pc, #152]	@ (8005c24 <_DoInit+0xa0>)
 8005b8c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005b8e:	22a8      	movs	r2, #168	@ 0xa8
 8005b90:	2100      	movs	r1, #0
 8005b92:	6838      	ldr	r0, [r7, #0]
 8005b94:	f002 f97a 	bl	8007e8c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2203      	movs	r2, #3
 8005b9c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2203      	movs	r2, #3
 8005ba2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	4a20      	ldr	r2, [pc, #128]	@ (8005c28 <_DoInit+0xa4>)
 8005ba8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	4a1f      	ldr	r2, [pc, #124]	@ (8005c2c <_DoInit+0xa8>)
 8005bae:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005bb6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	4a16      	ldr	r2, [pc, #88]	@ (8005c28 <_DoInit+0xa4>)
 8005bce:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	4a17      	ldr	r2, [pc, #92]	@ (8005c30 <_DoInit+0xac>)
 8005bd4:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2210      	movs	r2, #16
 8005bda:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2200      	movs	r2, #0
 8005be0:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2200      	movs	r2, #0
 8005be6:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2200      	movs	r2, #0
 8005bec:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005bee:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	607b      	str	r3, [r7, #4]
 8005bf6:	e00c      	b.n	8005c12 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f1c3 030f 	rsb	r3, r3, #15
 8005bfe:	4a0d      	ldr	r2, [pc, #52]	@ (8005c34 <_DoInit+0xb0>)
 8005c00:	5cd1      	ldrb	r1, [r2, r3]
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4413      	add	r3, r2
 8005c08:	460a      	mov	r2, r1
 8005c0a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	607b      	str	r3, [r7, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b0f      	cmp	r3, #15
 8005c16:	d9ef      	bls.n	8005bf8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005c18:	f3bf 8f5f 	dmb	sy
}
 8005c1c:	bf00      	nop
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	2000bae8 	.word	0x2000bae8
 8005c28:	0800803c 	.word	0x0800803c
 8005c2c:	2000bb90 	.word	0x2000bb90
 8005c30:	2000bf90 	.word	0x2000bf90
 8005c34:	0800807c 	.word	0x0800807c

08005c38 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08a      	sub	sp, #40	@ 0x28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005c44:	2300      	movs	r3, #0
 8005c46:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d905      	bls.n	8005c68 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c66:	e007      	b.n	8005c78 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	69b9      	ldr	r1, [r7, #24]
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	1acb      	subs	r3, r1, r3
 8005c72:	4413      	add	r3, r2
 8005c74:	3b01      	subs	r3, #1
 8005c76:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c82:	4293      	cmp	r3, r2
 8005c84:	bf28      	it	cs
 8005c86:	4613      	movcs	r3, r2
 8005c88:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	bf28      	it	cs
 8005c92:	4613      	movcs	r3, r2
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	6978      	ldr	r0, [r7, #20]
 8005ca6:	f002 f91d 	bl	8007ee4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005caa:	6a3a      	ldr	r2, [r7, #32]
 8005cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cae:	4413      	add	r3, r2
 8005cb0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb6:	4413      	add	r3, r2
 8005cb8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005cc2:	69fa      	ldr	r2, [r7, #28]
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc6:	4413      	add	r3, r2
 8005cc8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d101      	bne.n	8005cd8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005cd8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	69fa      	ldr	r2, [r7, #28]
 8005ce0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1b2      	bne.n	8005c4e <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3728      	adds	r7, #40	@ 0x28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b088      	sub	sp, #32
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d911      	bls.n	8005d3a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	68b9      	ldr	r1, [r7, #8]
 8005d24:	6938      	ldr	r0, [r7, #16]
 8005d26:	f002 f8dd 	bl	8007ee4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005d2a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005d2e:	69fa      	ldr	r2, [r7, #28]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	441a      	add	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005d38:	e01f      	b.n	8005d7a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	4413      	add	r3, r2
 8005d46:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	68b9      	ldr	r1, [r7, #8]
 8005d4c:	6938      	ldr	r0, [r7, #16]
 8005d4e:	f002 f8c9 	bl	8007ee4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	4413      	add	r3, r2
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6938      	ldr	r0, [r7, #16]
 8005d6c:	f002 f8ba 	bl	8007ee4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005d70:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	60da      	str	r2, [r3, #12]
}
 8005d7a:	bf00      	nop
 8005d7c:	3720      	adds	r7, #32
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005d82:	b480      	push	{r7}
 8005d84:	b087      	sub	sp, #28
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d808      	bhi.n	8005db0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	1ad2      	subs	r2, r2, r3
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	4413      	add	r3, r2
 8005daa:	3b01      	subs	r3, #1
 8005dac:	617b      	str	r3, [r7, #20]
 8005dae:	e004      	b.n	8005dba <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005dba:	697b      	ldr	r3, [r7, #20]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08c      	sub	sp, #48	@ 0x30
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005dd4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ed0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005dd6:	623b      	str	r3, [r7, #32]
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b53      	cmp	r3, #83	@ 0x53
 8005de0:	d001      	beq.n	8005de6 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005de2:	f7ff fecf 	bl	8005b84 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	1c5a      	adds	r2, r3, #1
 8005dea:	4613      	mov	r3, r2
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	4413      	add	r3, r2
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	4a37      	ldr	r2, [pc, #220]	@ (8005ed0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005df4:	4413      	add	r3, r2
 8005df6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005e0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d92b      	bls.n	8005e6c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4293      	cmp	r3, r2
 8005e24:	bf28      	it	cs
 8005e26:	4613      	movcs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e30:	4413      	add	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	6939      	ldr	r1, [r7, #16]
 8005e38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e3a:	f002 f853 	bl	8007ee4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005e3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	4413      	add	r3, r2
 8005e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005e56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d101      	bne.n	8005e6c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	bf28      	it	cs
 8005e7c:	4613      	movcs	r3, r2
 8005e7e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d019      	beq.n	8005eba <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8c:	4413      	add	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	6939      	ldr	r1, [r7, #16]
 8005e94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e96:	f002 f825 	bl	8007ee4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005e9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005ea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005eb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ec4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3730      	adds	r7, #48	@ 0x30
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	2000bae8 	.word	0x2000bae8

08005ed4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b08c      	sub	sp, #48	@ 0x30
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005ee0:	4b3e      	ldr	r3, [pc, #248]	@ (8005fdc <SEGGER_RTT_ReadNoLock+0x108>)
 8005ee2:	623b      	str	r3, [r7, #32]
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b53      	cmp	r3, #83	@ 0x53
 8005eec:	d001      	beq.n	8005ef2 <SEGGER_RTT_ReadNoLock+0x1e>
 8005eee:	f7ff fe49 	bl	8005b84 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	4413      	add	r3, r2
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	3360      	adds	r3, #96	@ 0x60
 8005efe:	4a37      	ldr	r2, [pc, #220]	@ (8005fdc <SEGGER_RTT_ReadNoLock+0x108>)
 8005f00:	4413      	add	r3, r2
 8005f02:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005f14:	2300      	movs	r3, #0
 8005f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005f18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d92b      	bls.n	8005f78 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	bf28      	it	cs
 8005f32:	4613      	movcs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3c:	4413      	add	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	6939      	ldr	r1, [r7, #16]
 8005f44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f46:	f001 ffcd 	bl	8007ee4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	4413      	add	r3, r2
 8005f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	4413      	add	r3, r2
 8005f58:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005f62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	4413      	add	r3, r2
 8005f68:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d101      	bne.n	8005f78 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005f74:	2300      	movs	r3, #0
 8005f76:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4293      	cmp	r3, r2
 8005f86:	bf28      	it	cs
 8005f88:	4613      	movcs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d019      	beq.n	8005fc6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f98:	4413      	add	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	6939      	ldr	r1, [r7, #16]
 8005fa0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005fa2:	f001 ff9f 	bl	8007ee4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	4413      	add	r3, r2
 8005fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005fbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fd0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3730      	adds	r7, #48	@ 0x30
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	2000bae8 	.word	0x2000bae8

08005fe0 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b088      	sub	sp, #32
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	4413      	add	r3, r2
 8005ff8:	00db      	lsls	r3, r3, #3
 8005ffa:	3360      	adds	r3, #96	@ 0x60
 8005ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800607c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005ffe:	4413      	add	r3, r2
 8006000:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	2b02      	cmp	r3, #2
 8006008:	d029      	beq.n	800605e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800600a:	2b02      	cmp	r3, #2
 800600c:	d82e      	bhi.n	800606c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8006012:	2b01      	cmp	r3, #1
 8006014:	d013      	beq.n	800603e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8006016:	e029      	b.n	800606c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006018:	6978      	ldr	r0, [r7, #20]
 800601a:	f7ff feb2 	bl	8005d82 <_GetAvailWriteSpace>
 800601e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	429a      	cmp	r2, r3
 8006026:	d202      	bcs.n	800602e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8006028:	2300      	movs	r3, #0
 800602a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800602c:	e021      	b.n	8006072 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	69b9      	ldr	r1, [r7, #24]
 8006036:	6978      	ldr	r0, [r7, #20]
 8006038:	f7ff fe5b 	bl	8005cf2 <_WriteNoCheck>
    break;
 800603c:	e019      	b.n	8006072 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800603e:	6978      	ldr	r0, [r7, #20]
 8006040:	f7ff fe9f 	bl	8005d82 <_GetAvailWriteSpace>
 8006044:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	4293      	cmp	r3, r2
 800604c:	bf28      	it	cs
 800604e:	4613      	movcs	r3, r2
 8006050:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	69b9      	ldr	r1, [r7, #24]
 8006056:	6978      	ldr	r0, [r7, #20]
 8006058:	f7ff fe4b 	bl	8005cf2 <_WriteNoCheck>
    break;
 800605c:	e009      	b.n	8006072 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	69b9      	ldr	r1, [r7, #24]
 8006062:	6978      	ldr	r0, [r7, #20]
 8006064:	f7ff fde8 	bl	8005c38 <_WriteBlocking>
 8006068:	61f8      	str	r0, [r7, #28]
    break;
 800606a:	e002      	b.n	8006072 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 800606c:	2300      	movs	r3, #0
 800606e:	61fb      	str	r3, [r7, #28]
    break;
 8006070:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8006072:	69fb      	ldr	r3, [r7, #28]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3720      	adds	r7, #32
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	2000bae8 	.word	0x2000bae8

08006080 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800608c:	4b0e      	ldr	r3, [pc, #56]	@ (80060c8 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800608e:	61fb      	str	r3, [r7, #28]
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b53      	cmp	r3, #83	@ 0x53
 8006098:	d001      	beq.n	800609e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800609a:	f7ff fd73 	bl	8005b84 <_DoInit>
  SEGGER_RTT_LOCK();
 800609e:	f3ef 8311 	mrs	r3, BASEPRI
 80060a2:	f04f 0120 	mov.w	r1, #32
 80060a6:	f381 8811 	msr	BASEPRI, r1
 80060aa:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f7ff ff95 	bl	8005fe0 <SEGGER_RTT_WriteDownBufferNoLock>
 80060b6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80060be:	697b      	ldr	r3, [r7, #20]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3720      	adds	r7, #32
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	2000bae8 	.word	0x2000bae8

080060cc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80060da:	4b3d      	ldr	r3, [pc, #244]	@ (80061d0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80060dc:	61bb      	str	r3, [r7, #24]
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b53      	cmp	r3, #83	@ 0x53
 80060e6:	d001      	beq.n	80060ec <SEGGER_RTT_AllocUpBuffer+0x20>
 80060e8:	f7ff fd4c 	bl	8005b84 <_DoInit>
  SEGGER_RTT_LOCK();
 80060ec:	f3ef 8311 	mrs	r3, BASEPRI
 80060f0:	f04f 0120 	mov.w	r1, #32
 80060f4:	f381 8811 	msr	BASEPRI, r1
 80060f8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80060fa:	4b35      	ldr	r3, [pc, #212]	@ (80061d0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80060fc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80060fe:	2300      	movs	r3, #0
 8006100:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8006102:	6939      	ldr	r1, [r7, #16]
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	4613      	mov	r3, r2
 800610a:	005b      	lsls	r3, r3, #1
 800610c:	4413      	add	r3, r2
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	440b      	add	r3, r1
 8006112:	3304      	adds	r3, #4
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d008      	beq.n	800612c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	3301      	adds	r3, #1
 800611e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	69fa      	ldr	r2, [r7, #28]
 8006126:	429a      	cmp	r2, r3
 8006128:	dbeb      	blt.n	8006102 <SEGGER_RTT_AllocUpBuffer+0x36>
 800612a:	e000      	b.n	800612e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800612c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	429a      	cmp	r2, r3
 8006136:	da3f      	bge.n	80061b8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8006138:	6939      	ldr	r1, [r7, #16]
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	4613      	mov	r3, r2
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	4413      	add	r3, r2
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	440b      	add	r3, r1
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800614c:	6939      	ldr	r1, [r7, #16]
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	4613      	mov	r3, r2
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	4413      	add	r3, r2
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	440b      	add	r3, r1
 800615c:	3304      	adds	r3, #4
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8006162:	6939      	ldr	r1, [r7, #16]
 8006164:	69fa      	ldr	r2, [r7, #28]
 8006166:	4613      	mov	r3, r2
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	4413      	add	r3, r2
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	440b      	add	r3, r1
 8006170:	3320      	adds	r3, #32
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8006176:	6939      	ldr	r1, [r7, #16]
 8006178:	69fa      	ldr	r2, [r7, #28]
 800617a:	4613      	mov	r3, r2
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	4413      	add	r3, r2
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	440b      	add	r3, r1
 8006184:	3328      	adds	r3, #40	@ 0x28
 8006186:	2200      	movs	r2, #0
 8006188:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800618a:	6939      	ldr	r1, [r7, #16]
 800618c:	69fa      	ldr	r2, [r7, #28]
 800618e:	4613      	mov	r3, r2
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	4413      	add	r3, r2
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	440b      	add	r3, r1
 8006198:	3324      	adds	r3, #36	@ 0x24
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800619e:	6939      	ldr	r1, [r7, #16]
 80061a0:	69fa      	ldr	r2, [r7, #28]
 80061a2:	4613      	mov	r3, r2
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	4413      	add	r3, r2
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	440b      	add	r3, r1
 80061ac:	332c      	adds	r3, #44	@ 0x2c
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80061b2:	f3bf 8f5f 	dmb	sy
 80061b6:	e002      	b.n	80061be <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80061b8:	f04f 33ff 	mov.w	r3, #4294967295
 80061bc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80061c4:	69fb      	ldr	r3, [r7, #28]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3720      	adds	r7, #32
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	2000bae8 	.word	0x2000bae8

080061d4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08a      	sub	sp, #40	@ 0x28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80061e2:	4b21      	ldr	r3, [pc, #132]	@ (8006268 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80061e4:	623b      	str	r3, [r7, #32]
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b53      	cmp	r3, #83	@ 0x53
 80061ee:	d001      	beq.n	80061f4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80061f0:	f7ff fcc8 	bl	8005b84 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80061f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006268 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80061f6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d82c      	bhi.n	8006258 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80061fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006202:	f04f 0120 	mov.w	r1, #32
 8006206:	f381 8811 	msr	BASEPRI, r1
 800620a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	4613      	mov	r3, r2
 8006210:	005b      	lsls	r3, r3, #1
 8006212:	4413      	add	r3, r2
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	3360      	adds	r3, #96	@ 0x60
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	4413      	add	r3, r2
 800621c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00e      	beq.n	8006242 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2200      	movs	r2, #0
 800623a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2200      	movs	r2, #0
 8006240:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006246:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006248:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006252:	2300      	movs	r3, #0
 8006254:	627b      	str	r3, [r7, #36]	@ 0x24
 8006256:	e002      	b.n	800625e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8006258:	f04f 33ff 	mov.w	r3, #4294967295
 800625c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800625e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006260:	4618      	mov	r0, r3
 8006262:	3728      	adds	r7, #40	@ 0x28
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	2000bae8 	.word	0x2000bae8

0800626c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	60fa      	str	r2, [r7, #12]
 8006282:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b80      	cmp	r3, #128	@ 0x80
 8006288:	d90a      	bls.n	80062a0 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800628a:	2380      	movs	r3, #128	@ 0x80
 800628c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800628e:	e007      	b.n	80062a0 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	1c53      	adds	r3, r2, #1
 8006294:	60bb      	str	r3, [r7, #8]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	1c59      	adds	r1, r3, #1
 800629a:	60f9      	str	r1, [r7, #12]
 800629c:	7812      	ldrb	r2, [r2, #0]
 800629e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	1e5a      	subs	r2, r3, #1
 80062a4:	607a      	str	r2, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <_EncodeStr+0x46>
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1ee      	bne.n	8006290 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80062be:	68fb      	ldr	r3, [r7, #12]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	371c      	adds	r7, #28
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	3307      	adds	r3, #7
}
 80062d8:	4618      	mov	r0, r3
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80062ea:	4b34      	ldr	r3, [pc, #208]	@ (80063bc <_HandleIncomingPacket+0xd8>)
 80062ec:	7e1b      	ldrb	r3, [r3, #24]
 80062ee:	4618      	mov	r0, r3
 80062f0:	1cfb      	adds	r3, r7, #3
 80062f2:	2201      	movs	r2, #1
 80062f4:	4619      	mov	r1, r3
 80062f6:	f7ff fded 	bl	8005ed4 <SEGGER_RTT_ReadNoLock>
 80062fa:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d057      	beq.n	80063b2 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8006302:	78fb      	ldrb	r3, [r7, #3]
 8006304:	2b80      	cmp	r3, #128	@ 0x80
 8006306:	d031      	beq.n	800636c <_HandleIncomingPacket+0x88>
 8006308:	2b80      	cmp	r3, #128	@ 0x80
 800630a:	dc40      	bgt.n	800638e <_HandleIncomingPacket+0xaa>
 800630c:	2b07      	cmp	r3, #7
 800630e:	dc15      	bgt.n	800633c <_HandleIncomingPacket+0x58>
 8006310:	2b00      	cmp	r3, #0
 8006312:	dd3c      	ble.n	800638e <_HandleIncomingPacket+0xaa>
 8006314:	3b01      	subs	r3, #1
 8006316:	2b06      	cmp	r3, #6
 8006318:	d839      	bhi.n	800638e <_HandleIncomingPacket+0xaa>
 800631a:	a201      	add	r2, pc, #4	@ (adr r2, 8006320 <_HandleIncomingPacket+0x3c>)
 800631c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006320:	08006343 	.word	0x08006343
 8006324:	08006349 	.word	0x08006349
 8006328:	0800634f 	.word	0x0800634f
 800632c:	08006355 	.word	0x08006355
 8006330:	0800635b 	.word	0x0800635b
 8006334:	08006361 	.word	0x08006361
 8006338:	08006367 	.word	0x08006367
 800633c:	2b7f      	cmp	r3, #127	@ 0x7f
 800633e:	d033      	beq.n	80063a8 <_HandleIncomingPacket+0xc4>
 8006340:	e025      	b.n	800638e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006342:	f000 fee7 	bl	8007114 <SEGGER_SYSVIEW_Start>
      break;
 8006346:	e034      	b.n	80063b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006348:	f000 ff9e 	bl	8007288 <SEGGER_SYSVIEW_Stop>
      break;
 800634c:	e031      	b.n	80063b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800634e:	f001 f977 	bl	8007640 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006352:	e02e      	b.n	80063b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006354:	f001 f93c 	bl	80075d0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006358:	e02b      	b.n	80063b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800635a:	f000 ffbb 	bl	80072d4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800635e:	e028      	b.n	80063b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006360:	f001 fca8 	bl	8007cb4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006364:	e025      	b.n	80063b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006366:	f001 fc87 	bl	8007c78 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800636a:	e022      	b.n	80063b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800636c:	4b13      	ldr	r3, [pc, #76]	@ (80063bc <_HandleIncomingPacket+0xd8>)
 800636e:	7e1b      	ldrb	r3, [r3, #24]
 8006370:	4618      	mov	r0, r3
 8006372:	1cfb      	adds	r3, r7, #3
 8006374:	2201      	movs	r2, #1
 8006376:	4619      	mov	r1, r3
 8006378:	f7ff fdac 	bl	8005ed4 <SEGGER_RTT_ReadNoLock>
 800637c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d013      	beq.n	80063ac <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	4618      	mov	r0, r3
 8006388:	f001 fbec 	bl	8007b64 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800638c:	e00e      	b.n	80063ac <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	b25b      	sxtb	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	da0c      	bge.n	80063b0 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006396:	4b09      	ldr	r3, [pc, #36]	@ (80063bc <_HandleIncomingPacket+0xd8>)
 8006398:	7e1b      	ldrb	r3, [r3, #24]
 800639a:	4618      	mov	r0, r3
 800639c:	1cfb      	adds	r3, r7, #3
 800639e:	2201      	movs	r2, #1
 80063a0:	4619      	mov	r1, r3
 80063a2:	f7ff fd97 	bl	8005ed4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80063a6:	e003      	b.n	80063b0 <_HandleIncomingPacket+0xcc>
      break;
 80063a8:	bf00      	nop
 80063aa:	e002      	b.n	80063b2 <_HandleIncomingPacket+0xce>
      break;
 80063ac:	bf00      	nop
 80063ae:	e000      	b.n	80063b2 <_HandleIncomingPacket+0xce>
      break;
 80063b0:	bf00      	nop
    }
  }
}
 80063b2:	bf00      	nop
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	2000c3a8 	.word	0x2000c3a8

080063c0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08c      	sub	sp, #48	@ 0x30
 80063c4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80063c6:	2301      	movs	r3, #1
 80063c8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80063ca:	1d3b      	adds	r3, r7, #4
 80063cc:	3301      	adds	r3, #1
 80063ce:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063d4:	4b31      	ldr	r3, [pc, #196]	@ (800649c <_TrySendOverflowPacket+0xdc>)
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063da:	e00b      	b.n	80063f4 <_TrySendOverflowPacket+0x34>
 80063dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e2:	1c59      	adds	r1, r3, #1
 80063e4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80063e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f0:	09db      	lsrs	r3, r3, #7
 80063f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80063f8:	d8f0      	bhi.n	80063dc <_TrySendOverflowPacket+0x1c>
 80063fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006400:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006408:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800640a:	4b25      	ldr	r3, [pc, #148]	@ (80064a0 <_TrySendOverflowPacket+0xe0>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006410:	4b22      	ldr	r3, [pc, #136]	@ (800649c <_TrySendOverflowPacket+0xdc>)
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	627b      	str	r3, [r7, #36]	@ 0x24
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	623b      	str	r3, [r7, #32]
 8006422:	e00b      	b.n	800643c <_TrySendOverflowPacket+0x7c>
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	b2da      	uxtb	r2, r3
 8006428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642a:	1c59      	adds	r1, r3, #1
 800642c:	6279      	str	r1, [r7, #36]	@ 0x24
 800642e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006432:	b2d2      	uxtb	r2, r2
 8006434:	701a      	strb	r2, [r3, #0]
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	09db      	lsrs	r3, r3, #7
 800643a:	623b      	str	r3, [r7, #32]
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006440:	d8f0      	bhi.n	8006424 <_TrySendOverflowPacket+0x64>
 8006442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	627a      	str	r2, [r7, #36]	@ 0x24
 8006448:	6a3a      	ldr	r2, [r7, #32]
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006450:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8006452:	4b12      	ldr	r3, [pc, #72]	@ (800649c <_TrySendOverflowPacket+0xdc>)
 8006454:	785b      	ldrb	r3, [r3, #1]
 8006456:	4618      	mov	r0, r3
 8006458:	1d3b      	adds	r3, r7, #4
 800645a:	69fa      	ldr	r2, [r7, #28]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	461a      	mov	r2, r3
 8006460:	1d3b      	adds	r3, r7, #4
 8006462:	4619      	mov	r1, r3
 8006464:	f7f9 feec 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006468:	4603      	mov	r3, r0
 800646a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d009      	beq.n	8006486 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006472:	4a0a      	ldr	r2, [pc, #40]	@ (800649c <_TrySendOverflowPacket+0xdc>)
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006478:	4b08      	ldr	r3, [pc, #32]	@ (800649c <_TrySendOverflowPacket+0xdc>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	3b01      	subs	r3, #1
 800647e:	b2da      	uxtb	r2, r3
 8006480:	4b06      	ldr	r3, [pc, #24]	@ (800649c <_TrySendOverflowPacket+0xdc>)
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	e004      	b.n	8006490 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006486:	4b05      	ldr	r3, [pc, #20]	@ (800649c <_TrySendOverflowPacket+0xdc>)
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	3301      	adds	r3, #1
 800648c:	4a03      	ldr	r2, [pc, #12]	@ (800649c <_TrySendOverflowPacket+0xdc>)
 800648e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006490:	693b      	ldr	r3, [r7, #16]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3730      	adds	r7, #48	@ 0x30
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	2000c3a8 	.word	0x2000c3a8
 80064a0:	e0001004 	.word	0xe0001004

080064a4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b08a      	sub	sp, #40	@ 0x28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80064b0:	4b98      	ldr	r3, [pc, #608]	@ (8006714 <_SendPacket+0x270>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d010      	beq.n	80064da <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80064b8:	4b96      	ldr	r3, [pc, #600]	@ (8006714 <_SendPacket+0x270>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 812d 	beq.w	800671c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80064c2:	4b94      	ldr	r3, [pc, #592]	@ (8006714 <_SendPacket+0x270>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d109      	bne.n	80064de <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80064ca:	f7ff ff79 	bl	80063c0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80064ce:	4b91      	ldr	r3, [pc, #580]	@ (8006714 <_SendPacket+0x270>)
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	f040 8124 	bne.w	8006720 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80064d8:	e001      	b.n	80064de <_SendPacket+0x3a>
    goto Send;
 80064da:	bf00      	nop
 80064dc:	e000      	b.n	80064e0 <_SendPacket+0x3c>
Send:
 80064de:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b1f      	cmp	r3, #31
 80064e4:	d809      	bhi.n	80064fa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80064e6:	4b8b      	ldr	r3, [pc, #556]	@ (8006714 <_SendPacket+0x270>)
 80064e8:	69da      	ldr	r2, [r3, #28]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	fa22 f303 	lsr.w	r3, r2, r3
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f040 8115 	bne.w	8006724 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b17      	cmp	r3, #23
 80064fe:	d807      	bhi.n	8006510 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3b01      	subs	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	b2da      	uxtb	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	e0c4      	b.n	800669a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	2b7f      	cmp	r3, #127	@ 0x7f
 800651c:	d912      	bls.n	8006544 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	09da      	lsrs	r2, r3, #7
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3b01      	subs	r3, #1
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	b2db      	uxtb	r3, r3
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	3a01      	subs	r2, #1
 8006536:	60fa      	str	r2, [r7, #12]
 8006538:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800653c:	b2da      	uxtb	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	e006      	b.n	8006552 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3b01      	subs	r3, #1
 8006548:	60fb      	str	r3, [r7, #12]
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	b2da      	uxtb	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b7e      	cmp	r3, #126	@ 0x7e
 8006556:	d807      	bhi.n	8006568 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3b01      	subs	r3, #1
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	b2da      	uxtb	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	e098      	b.n	800669a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800656e:	d212      	bcs.n	8006596 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	09da      	lsrs	r2, r3, #7
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	3b01      	subs	r3, #1
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	b2d2      	uxtb	r2, r2
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	b2db      	uxtb	r3, r3
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	3a01      	subs	r2, #1
 8006588:	60fa      	str	r2, [r7, #12]
 800658a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800658e:	b2da      	uxtb	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	701a      	strb	r2, [r3, #0]
 8006594:	e081      	b.n	800669a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800659c:	d21d      	bcs.n	80065da <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	0b9a      	lsrs	r2, r3, #14
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	b2d2      	uxtb	r2, r2
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	09db      	lsrs	r3, r3, #7
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	3a01      	subs	r2, #1
 80065b8:	60fa      	str	r2, [r7, #12]
 80065ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	3a01      	subs	r2, #1
 80065cc:	60fa      	str	r2, [r7, #12]
 80065ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	701a      	strb	r2, [r3, #0]
 80065d8:	e05f      	b.n	800669a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065e0:	d228      	bcs.n	8006634 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	0d5a      	lsrs	r2, r3, #21
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	b2d2      	uxtb	r2, r2
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	0b9b      	lsrs	r3, r3, #14
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	3a01      	subs	r2, #1
 80065fc:	60fa      	str	r2, [r7, #12]
 80065fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006602:	b2da      	uxtb	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	09db      	lsrs	r3, r3, #7
 800660c:	b2db      	uxtb	r3, r3
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	3a01      	subs	r2, #1
 8006612:	60fa      	str	r2, [r7, #12]
 8006614:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006618:	b2da      	uxtb	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	b2db      	uxtb	r3, r3
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	3a01      	subs	r2, #1
 8006626:	60fa      	str	r2, [r7, #12]
 8006628:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800662c:	b2da      	uxtb	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	e032      	b.n	800669a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	0f1a      	lsrs	r2, r3, #28
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3b01      	subs	r3, #1
 800663c:	60fb      	str	r3, [r7, #12]
 800663e:	b2d2      	uxtb	r2, r2
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	0d5b      	lsrs	r3, r3, #21
 8006648:	b2db      	uxtb	r3, r3
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	3a01      	subs	r2, #1
 800664e:	60fa      	str	r2, [r7, #12]
 8006650:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006654:	b2da      	uxtb	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	0b9b      	lsrs	r3, r3, #14
 800665e:	b2db      	uxtb	r3, r3
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	3a01      	subs	r2, #1
 8006664:	60fa      	str	r2, [r7, #12]
 8006666:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800666a:	b2da      	uxtb	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	09db      	lsrs	r3, r3, #7
 8006674:	b2db      	uxtb	r3, r3
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	3a01      	subs	r2, #1
 800667a:	60fa      	str	r2, [r7, #12]
 800667c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006680:	b2da      	uxtb	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	b2db      	uxtb	r3, r3
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	3a01      	subs	r2, #1
 800668e:	60fa      	str	r2, [r7, #12]
 8006690:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006694:	b2da      	uxtb	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800669a:	4b1f      	ldr	r3, [pc, #124]	@ (8006718 <_SendPacket+0x274>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80066a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006714 <_SendPacket+0x270>)
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	623b      	str	r3, [r7, #32]
 80066b2:	e00b      	b.n	80066cc <_SendPacket+0x228>
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ba:	1c59      	adds	r1, r3, #1
 80066bc:	6279      	str	r1, [r7, #36]	@ 0x24
 80066be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	09db      	lsrs	r3, r3, #7
 80066ca:	623b      	str	r3, [r7, #32]
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80066d0:	d8f0      	bhi.n	80066b4 <_SendPacket+0x210>
 80066d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80066d8:	6a3a      	ldr	r2, [r7, #32]
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	701a      	strb	r2, [r3, #0]
 80066de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80066e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006714 <_SendPacket+0x270>)
 80066e4:	785b      	ldrb	r3, [r3, #1]
 80066e6:	4618      	mov	r0, r3
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	461a      	mov	r2, r3
 80066f0:	68f9      	ldr	r1, [r7, #12]
 80066f2:	f7f9 fda5 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80066f6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80066fe:	4a05      	ldr	r2, [pc, #20]	@ (8006714 <_SendPacket+0x270>)
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	60d3      	str	r3, [r2, #12]
 8006704:	e00f      	b.n	8006726 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006706:	4b03      	ldr	r3, [pc, #12]	@ (8006714 <_SendPacket+0x270>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	3301      	adds	r3, #1
 800670c:	b2da      	uxtb	r2, r3
 800670e:	4b01      	ldr	r3, [pc, #4]	@ (8006714 <_SendPacket+0x270>)
 8006710:	701a      	strb	r2, [r3, #0]
 8006712:	e008      	b.n	8006726 <_SendPacket+0x282>
 8006714:	2000c3a8 	.word	0x2000c3a8
 8006718:	e0001004 	.word	0xe0001004
    goto SendDone;
 800671c:	bf00      	nop
 800671e:	e002      	b.n	8006726 <_SendPacket+0x282>
      goto SendDone;
 8006720:	bf00      	nop
 8006722:	e000      	b.n	8006726 <_SendPacket+0x282>
      goto SendDone;
 8006724:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006726:	4b14      	ldr	r3, [pc, #80]	@ (8006778 <_SendPacket+0x2d4>)
 8006728:	7e1b      	ldrb	r3, [r3, #24]
 800672a:	4619      	mov	r1, r3
 800672c:	4a13      	ldr	r2, [pc, #76]	@ (800677c <_SendPacket+0x2d8>)
 800672e:	460b      	mov	r3, r1
 8006730:	005b      	lsls	r3, r3, #1
 8006732:	440b      	add	r3, r1
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	4413      	add	r3, r2
 8006738:	336c      	adds	r3, #108	@ 0x6c
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	4b0e      	ldr	r3, [pc, #56]	@ (8006778 <_SendPacket+0x2d4>)
 800673e:	7e1b      	ldrb	r3, [r3, #24]
 8006740:	4618      	mov	r0, r3
 8006742:	490e      	ldr	r1, [pc, #56]	@ (800677c <_SendPacket+0x2d8>)
 8006744:	4603      	mov	r3, r0
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	4403      	add	r3, r0
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	440b      	add	r3, r1
 800674e:	3370      	adds	r3, #112	@ 0x70
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	429a      	cmp	r2, r3
 8006754:	d00b      	beq.n	800676e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006756:	4b08      	ldr	r3, [pc, #32]	@ (8006778 <_SendPacket+0x2d4>)
 8006758:	789b      	ldrb	r3, [r3, #2]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d107      	bne.n	800676e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800675e:	4b06      	ldr	r3, [pc, #24]	@ (8006778 <_SendPacket+0x2d4>)
 8006760:	2201      	movs	r2, #1
 8006762:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006764:	f7ff fdbe 	bl	80062e4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006768:	4b03      	ldr	r3, [pc, #12]	@ (8006778 <_SendPacket+0x2d4>)
 800676a:	2200      	movs	r2, #0
 800676c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800676e:	bf00      	nop
 8006770:	3728      	adds	r7, #40	@ 0x28
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	2000c3a8 	.word	0x2000c3a8
 800677c:	2000bae8 	.word	0x2000bae8

08006780 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006780:	b580      	push	{r7, lr}
 8006782:	b08a      	sub	sp, #40	@ 0x28
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	460b      	mov	r3, r1
 800678a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	3301      	adds	r3, #1
 8006796:	2b80      	cmp	r3, #128	@ 0x80
 8006798:	d80a      	bhi.n	80067b0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	1c59      	adds	r1, r3, #1
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6051      	str	r1, [r2, #4]
 80067a4:	78fa      	ldrb	r2, [r7, #3]
 80067a6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	2b80      	cmp	r3, #128	@ 0x80
 80067b6:	d15a      	bne.n	800686e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	623b      	str	r3, [r7, #32]
 80067d8:	e00b      	b.n	80067f2 <_StoreChar+0x72>
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	1c59      	adds	r1, r3, #1
 80067e2:	6279      	str	r1, [r7, #36]	@ 0x24
 80067e4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067e8:	b2d2      	uxtb	r2, r2
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	09db      	lsrs	r3, r3, #7
 80067f0:	623b      	str	r3, [r7, #32]
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80067f6:	d8f0      	bhi.n	80067da <_StoreChar+0x5a>
 80067f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80067fe:	6a3a      	ldr	r2, [r7, #32]
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	701a      	strb	r2, [r3, #0]
 8006804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006806:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	61fb      	str	r3, [r7, #28]
 800680c:	2300      	movs	r3, #0
 800680e:	61bb      	str	r3, [r7, #24]
 8006810:	e00b      	b.n	800682a <_StoreChar+0xaa>
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	b2da      	uxtb	r2, r3
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	1c59      	adds	r1, r3, #1
 800681a:	61f9      	str	r1, [r7, #28]
 800681c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	701a      	strb	r2, [r3, #0]
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	09db      	lsrs	r3, r3, #7
 8006828:	61bb      	str	r3, [r7, #24]
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	2b7f      	cmp	r3, #127	@ 0x7f
 800682e:	d8f0      	bhi.n	8006812 <_StoreChar+0x92>
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	61fa      	str	r2, [r7, #28]
 8006836:	69ba      	ldr	r2, [r7, #24]
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	701a      	strb	r2, [r3, #0]
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	221a      	movs	r2, #26
 8006846:	6939      	ldr	r1, [r7, #16]
 8006848:	4618      	mov	r0, r3
 800684a:	f7ff fe2b 	bl	80064a4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff fd3a 	bl	80062cc <_PreparePacket>
 8006858:	4602      	mov	r2, r0
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	1c5a      	adds	r2, r3, #1
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	611a      	str	r2, [r3, #16]
  }
}
 800686e:	bf00      	nop
 8006870:	3728      	adds	r7, #40	@ 0x28
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
	...

08006878 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006878:	b580      	push	{r7, lr}
 800687a:	b08a      	sub	sp, #40	@ 0x28
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
 8006884:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800688a:	2301      	movs	r3, #1
 800688c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800688e:	2301      	movs	r3, #1
 8006890:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006892:	e007      	b.n	80068a4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8006894:	6a3a      	ldr	r2, [r7, #32]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	fbb2 f3f3 	udiv	r3, r2, r3
 800689c:	623b      	str	r3, [r7, #32]
    Width++;
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	3301      	adds	r3, #1
 80068a2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80068a4:	6a3a      	ldr	r2, [r7, #32]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d2f3      	bcs.n	8006894 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d901      	bls.n	80068b8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80068b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d000      	beq.n	80068c4 <_PrintUnsigned+0x4c>
 80068c2:	e01f      	b.n	8006904 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80068c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d01c      	beq.n	8006904 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80068ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d005      	beq.n	80068e0 <_PrintUnsigned+0x68>
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d102      	bne.n	80068e0 <_PrintUnsigned+0x68>
        c = '0';
 80068da:	2330      	movs	r3, #48	@ 0x30
 80068dc:	76fb      	strb	r3, [r7, #27]
 80068de:	e001      	b.n	80068e4 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 80068e0:	2320      	movs	r3, #32
 80068e2:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80068e4:	e007      	b.n	80068f6 <_PrintUnsigned+0x7e>
        FieldWidth--;
 80068e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e8:	3b01      	subs	r3, #1
 80068ea:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 80068ec:	7efb      	ldrb	r3, [r7, #27]
 80068ee:	4619      	mov	r1, r3
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f7ff ff45 	bl	8006780 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80068f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <_PrintUnsigned+0x8c>
 80068fc:	69fa      	ldr	r2, [r7, #28]
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	429a      	cmp	r2, r3
 8006902:	d3f0      	bcc.n	80068e6 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d903      	bls.n	8006912 <_PrintUnsigned+0x9a>
      NumDigits--;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	3b01      	subs	r3, #1
 800690e:	603b      	str	r3, [r7, #0]
 8006910:	e009      	b.n	8006926 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006916:	fbb2 f3f3 	udiv	r3, r2, r3
 800691a:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	429a      	cmp	r2, r3
 8006922:	d200      	bcs.n	8006926 <_PrintUnsigned+0xae>
        break;
 8006924:	e005      	b.n	8006932 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8006926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	fb02 f303 	mul.w	r3, r2, r3
 800692e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006930:	e7e8      	b.n	8006904 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006936:	fbb2 f3f3 	udiv	r3, r2, r3
 800693a:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006940:	fb02 f303 	mul.w	r3, r2, r3
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800694a:	4a15      	ldr	r2, [pc, #84]	@ (80069a0 <_PrintUnsigned+0x128>)
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	4413      	add	r3, r2
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	4619      	mov	r1, r3
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f7ff ff13 	bl	8006780 <_StoreChar>
    Digit /= Base;
 800695a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006962:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8006964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e3      	bne.n	8006932 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800696a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b00      	cmp	r3, #0
 8006972:	d011      	beq.n	8006998 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8006974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00e      	beq.n	8006998 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800697a:	e006      	b.n	800698a <_PrintUnsigned+0x112>
        FieldWidth--;
 800697c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697e:	3b01      	subs	r3, #1
 8006980:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8006982:	2120      	movs	r1, #32
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f7ff fefb 	bl	8006780 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800698a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <_PrintUnsigned+0x120>
 8006990:	69fa      	ldr	r2, [r7, #28]
 8006992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006994:	429a      	cmp	r2, r3
 8006996:	d3f1      	bcc.n	800697c <_PrintUnsigned+0x104>
      }
    }
  }
}
 8006998:	bf00      	nop
 800699a:	3728      	adds	r7, #40	@ 0x28
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	0800809c 	.word	0x0800809c

080069a4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b088      	sub	sp, #32
 80069a8:	af02      	add	r7, sp, #8
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	bfb8      	it	lt
 80069b8:	425b      	neglt	r3, r3
 80069ba:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80069bc:	2301      	movs	r3, #1
 80069be:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80069c0:	e007      	b.n	80069d2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80069ca:	613b      	str	r3, [r7, #16]
    Width++;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	3301      	adds	r3, #1
 80069d0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	daf3      	bge.n	80069c2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d901      	bls.n	80069e6 <_PrintInt+0x42>
    Width = NumDigits;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00a      	beq.n	8006a02 <_PrintInt+0x5e>
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	db04      	blt.n	80069fc <_PrintInt+0x58>
 80069f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d002      	beq.n	8006a02 <_PrintInt+0x5e>
    FieldWidth--;
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <_PrintInt+0x6e>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d016      	beq.n	8006a40 <_PrintInt+0x9c>
 8006a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d111      	bne.n	8006a40 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00e      	beq.n	8006a40 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006a22:	e006      	b.n	8006a32 <_PrintInt+0x8e>
        FieldWidth--;
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	3b01      	subs	r3, #1
 8006a28:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006a2a:	2120      	movs	r1, #32
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f7ff fea7 	bl	8006780 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <_PrintInt+0x9c>
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d3f1      	bcc.n	8006a24 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	da07      	bge.n	8006a56 <_PrintInt+0xb2>
    v = -v;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	425b      	negs	r3, r3
 8006a4a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006a4c:	212d      	movs	r1, #45	@ 0x2d
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f7ff fe96 	bl	8006780 <_StoreChar>
 8006a54:	e008      	b.n	8006a68 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a58:	f003 0304 	and.w	r3, r3, #4
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006a60:	212b      	movs	r1, #43	@ 0x2b
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f7ff fe8c 	bl	8006780 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d019      	beq.n	8006aa6 <_PrintInt+0x102>
 8006a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d114      	bne.n	8006aa6 <_PrintInt+0x102>
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d111      	bne.n	8006aa6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00e      	beq.n	8006aa6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006a88:	e006      	b.n	8006a98 <_PrintInt+0xf4>
        FieldWidth--;
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006a90:	2130      	movs	r1, #48	@ 0x30
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f7ff fe74 	bl	8006780 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <_PrintInt+0x102>
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d3f1      	bcc.n	8006a8a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006aa6:	68b9      	ldr	r1, [r7, #8]
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aaa:	9301      	str	r3, [sp, #4]
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f7ff fedf 	bl	8006878 <_PrintUnsigned>
}
 8006aba:	bf00      	nop
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
	...

08006ac4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b098      	sub	sp, #96	@ 0x60
 8006ac8:	af02      	add	r7, sp, #8
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ad0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ad4:	f04f 0120 	mov.w	r1, #32
 8006ad8:	f381 8811 	msr	BASEPRI, r1
 8006adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ade:	48b7      	ldr	r0, [pc, #732]	@ (8006dbc <_VPrintTarget+0x2f8>)
 8006ae0:	f7ff fbf4 	bl	80062cc <_PreparePacket>
 8006ae4:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006ae6:	4bb5      	ldr	r3, [pc, #724]	@ (8006dbc <_VPrintTarget+0x2f8>)
 8006ae8:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8006aea:	2300      	movs	r3, #0
 8006aec:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af0:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	3301      	adds	r3, #1
 8006af6:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	3301      	adds	r3, #1
 8006b08:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006b0a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 81a8 	beq.w	8006e64 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8006b14:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b18:	2b25      	cmp	r3, #37	@ 0x25
 8006b1a:	f040 8195 	bne.w	8006e48 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8006b22:	2301      	movs	r3, #1
 8006b24:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8006b2e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b32:	3b23      	subs	r3, #35	@ 0x23
 8006b34:	2b0d      	cmp	r3, #13
 8006b36:	d83f      	bhi.n	8006bb8 <_VPrintTarget+0xf4>
 8006b38:	a201      	add	r2, pc, #4	@ (adr r2, 8006b40 <_VPrintTarget+0x7c>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006ba9 	.word	0x08006ba9
 8006b44:	08006bb9 	.word	0x08006bb9
 8006b48:	08006bb9 	.word	0x08006bb9
 8006b4c:	08006bb9 	.word	0x08006bb9
 8006b50:	08006bb9 	.word	0x08006bb9
 8006b54:	08006bb9 	.word	0x08006bb9
 8006b58:	08006bb9 	.word	0x08006bb9
 8006b5c:	08006bb9 	.word	0x08006bb9
 8006b60:	08006b99 	.word	0x08006b99
 8006b64:	08006bb9 	.word	0x08006bb9
 8006b68:	08006b79 	.word	0x08006b79
 8006b6c:	08006bb9 	.word	0x08006bb9
 8006b70:	08006bb9 	.word	0x08006bb9
 8006b74:	08006b89 	.word	0x08006b89
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006b78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b7a:	f043 0301 	orr.w	r3, r3, #1
 8006b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	3301      	adds	r3, #1
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	e01a      	b.n	8006bbe <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006b88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b8a:	f043 0302 	orr.w	r3, r3, #2
 8006b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3301      	adds	r3, #1
 8006b94:	60fb      	str	r3, [r7, #12]
 8006b96:	e012      	b.n	8006bbe <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006b98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b9a:	f043 0304 	orr.w	r3, r3, #4
 8006b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	e00a      	b.n	8006bbe <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006ba8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006baa:	f043 0308 	orr.w	r3, r3, #8
 8006bae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	60fb      	str	r3, [r7, #12]
 8006bb6:	e002      	b.n	8006bbe <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bbc:	bf00      	nop
        }
      } while (v);
 8006bbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1b0      	bne.n	8006b26 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8006bd0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006bd4:	2b2f      	cmp	r3, #47	@ 0x2f
 8006bd6:	d912      	bls.n	8006bfe <_VPrintTarget+0x13a>
 8006bd8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006bdc:	2b39      	cmp	r3, #57	@ 0x39
 8006bde:	d80e      	bhi.n	8006bfe <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3301      	adds	r3, #1
 8006be4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006be6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006be8:	4613      	mov	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006bf6:	4413      	add	r3, r2
 8006bf8:	3b30      	subs	r3, #48	@ 0x30
 8006bfa:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8006bfc:	e7e4      	b.n	8006bc8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8006c0a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c10:	d11d      	bne.n	8006c4e <_VPrintTarget+0x18a>
        sFormat++;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3301      	adds	r3, #1
 8006c16:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8006c20:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c24:	2b2f      	cmp	r3, #47	@ 0x2f
 8006c26:	d912      	bls.n	8006c4e <_VPrintTarget+0x18a>
 8006c28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c2c:	2b39      	cmp	r3, #57	@ 0x39
 8006c2e:	d80e      	bhi.n	8006c4e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	3301      	adds	r3, #1
 8006c34:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006c36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c38:	4613      	mov	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	005b      	lsls	r3, r3, #1
 8006c40:	461a      	mov	r2, r3
 8006c42:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c46:	4413      	add	r3, r2
 8006c48:	3b30      	subs	r3, #48	@ 0x30
 8006c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8006c4c:	e7e4      	b.n	8006c18 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006c56:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c5a:	2b6c      	cmp	r3, #108	@ 0x6c
 8006c5c:	d003      	beq.n	8006c66 <_VPrintTarget+0x1a2>
 8006c5e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c62:	2b68      	cmp	r3, #104	@ 0x68
 8006c64:	d107      	bne.n	8006c76 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3301      	adds	r3, #1
 8006c72:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006c74:	e7ef      	b.n	8006c56 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006c76:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c7a:	2b25      	cmp	r3, #37	@ 0x25
 8006c7c:	f000 80d8 	beq.w	8006e30 <_VPrintTarget+0x36c>
 8006c80:	2b25      	cmp	r3, #37	@ 0x25
 8006c82:	f2c0 80dc 	blt.w	8006e3e <_VPrintTarget+0x37a>
 8006c86:	2b78      	cmp	r3, #120	@ 0x78
 8006c88:	f300 80d9 	bgt.w	8006e3e <_VPrintTarget+0x37a>
 8006c8c:	2b58      	cmp	r3, #88	@ 0x58
 8006c8e:	f2c0 80d6 	blt.w	8006e3e <_VPrintTarget+0x37a>
 8006c92:	3b58      	subs	r3, #88	@ 0x58
 8006c94:	2b20      	cmp	r3, #32
 8006c96:	f200 80d2 	bhi.w	8006e3e <_VPrintTarget+0x37a>
 8006c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006ca0 <_VPrintTarget+0x1dc>)
 8006c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca0:	08006d97 	.word	0x08006d97
 8006ca4:	08006e3f 	.word	0x08006e3f
 8006ca8:	08006e3f 	.word	0x08006e3f
 8006cac:	08006e3f 	.word	0x08006e3f
 8006cb0:	08006e3f 	.word	0x08006e3f
 8006cb4:	08006e3f 	.word	0x08006e3f
 8006cb8:	08006e3f 	.word	0x08006e3f
 8006cbc:	08006e3f 	.word	0x08006e3f
 8006cc0:	08006e3f 	.word	0x08006e3f
 8006cc4:	08006e3f 	.word	0x08006e3f
 8006cc8:	08006e3f 	.word	0x08006e3f
 8006ccc:	08006d25 	.word	0x08006d25
 8006cd0:	08006d4b 	.word	0x08006d4b
 8006cd4:	08006e3f 	.word	0x08006e3f
 8006cd8:	08006e3f 	.word	0x08006e3f
 8006cdc:	08006e3f 	.word	0x08006e3f
 8006ce0:	08006e3f 	.word	0x08006e3f
 8006ce4:	08006e3f 	.word	0x08006e3f
 8006ce8:	08006e3f 	.word	0x08006e3f
 8006cec:	08006e3f 	.word	0x08006e3f
 8006cf0:	08006e3f 	.word	0x08006e3f
 8006cf4:	08006e3f 	.word	0x08006e3f
 8006cf8:	08006e3f 	.word	0x08006e3f
 8006cfc:	08006e3f 	.word	0x08006e3f
 8006d00:	08006e0b 	.word	0x08006e0b
 8006d04:	08006e3f 	.word	0x08006e3f
 8006d08:	08006e3f 	.word	0x08006e3f
 8006d0c:	08006dc1 	.word	0x08006dc1
 8006d10:	08006e3f 	.word	0x08006e3f
 8006d14:	08006d71 	.word	0x08006d71
 8006d18:	08006e3f 	.word	0x08006e3f
 8006d1c:	08006e3f 	.word	0x08006e3f
 8006d20:	08006d97 	.word	0x08006d97
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	1d19      	adds	r1, r3, #4
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	6011      	str	r1, [r2, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8006d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8006d38:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006d3c:	f107 0310 	add.w	r3, r7, #16
 8006d40:	4611      	mov	r1, r2
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7ff fd1c 	bl	8006780 <_StoreChar>
        break;
 8006d48:	e07a      	b.n	8006e40 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	1d19      	adds	r1, r3, #4
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	6011      	str	r1, [r2, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006d58:	f107 0010 	add.w	r0, r7, #16
 8006d5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d5e:	9301      	str	r3, [sp, #4]
 8006d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d66:	220a      	movs	r2, #10
 8006d68:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d6a:	f7ff fe1b 	bl	80069a4 <_PrintInt>
        break;
 8006d6e:	e067      	b.n	8006e40 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	1d19      	adds	r1, r3, #4
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	6011      	str	r1, [r2, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006d7e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d80:	f107 0010 	add.w	r0, r7, #16
 8006d84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d86:	9301      	str	r3, [sp, #4]
 8006d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d8e:	220a      	movs	r2, #10
 8006d90:	f7ff fd72 	bl	8006878 <_PrintUnsigned>
        break;
 8006d94:	e054      	b.n	8006e40 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	1d19      	adds	r1, r3, #4
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6011      	str	r1, [r2, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006da4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006da6:	f107 0010 	add.w	r0, r7, #16
 8006daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dac:	9301      	str	r3, [sp, #4]
 8006dae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006db4:	2210      	movs	r2, #16
 8006db6:	f7ff fd5f 	bl	8006878 <_PrintUnsigned>
        break;
 8006dba:	e041      	b.n	8006e40 <_VPrintTarget+0x37c>
 8006dbc:	2000c3d8 	.word	0x2000c3d8
      case 's':
        s = va_arg(*pParamList, const char*);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	1d19      	adds	r1, r3, #4
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	6011      	str	r1, [r2, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8006dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <_VPrintTarget+0x314>
          s = "(null)";
 8006dd4:	4b4a      	ldr	r3, [pc, #296]	@ (8006f00 <_VPrintTarget+0x43c>)
 8006dd6:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8006dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8006de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006de2:	3301      	adds	r3, #1
 8006de4:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8006de6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00b      	beq.n	8006e06 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8006dee:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006df2:	f107 0310 	add.w	r3, r7, #16
 8006df6:	4611      	mov	r1, r2
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7ff fcc1 	bl	8006780 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e02:	d9e9      	bls.n	8006dd8 <_VPrintTarget+0x314>
        break;
 8006e04:	e01c      	b.n	8006e40 <_VPrintTarget+0x37c>
            break;
 8006e06:	bf00      	nop
        break;
 8006e08:	e01a      	b.n	8006e40 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	1d19      	adds	r1, r3, #4
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	6011      	str	r1, [r2, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006e18:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006e1a:	f107 0010 	add.w	r0, r7, #16
 8006e1e:	2300      	movs	r3, #0
 8006e20:	9301      	str	r3, [sp, #4]
 8006e22:	2308      	movs	r3, #8
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	2308      	movs	r3, #8
 8006e28:	2210      	movs	r2, #16
 8006e2a:	f7ff fd25 	bl	8006878 <_PrintUnsigned>
        break;
 8006e2e:	e007      	b.n	8006e40 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006e30:	f107 0310 	add.w	r3, r7, #16
 8006e34:	2125      	movs	r1, #37	@ 0x25
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff fca2 	bl	8006780 <_StoreChar>
        break;
 8006e3c:	e000      	b.n	8006e40 <_VPrintTarget+0x37c>
      default:
        break;
 8006e3e:	bf00      	nop
      }
      sFormat++;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3301      	adds	r3, #1
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	e007      	b.n	8006e58 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006e48:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006e4c:	f107 0310 	add.w	r3, r7, #16
 8006e50:	4611      	mov	r1, r2
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7ff fc94 	bl	8006780 <_StoreChar>
    }
  } while (*sFormat);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f47f ae4d 	bne.w	8006afc <_VPrintTarget+0x38>
 8006e62:	e000      	b.n	8006e66 <_VPrintTarget+0x3a2>
      break;
 8006e64:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d041      	beq.n	8006ef0 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006e6c:	6a3a      	ldr	r2, [r7, #32]
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	b2d2      	uxtb	r2, r2
 8006e72:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e7c:	e00b      	b.n	8006e96 <_VPrintTarget+0x3d2>
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e84:	1c59      	adds	r1, r3, #1
 8006e86:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006e88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e8c:	b2d2      	uxtb	r2, r2
 8006e8e:	701a      	strb	r2, [r3, #0]
 8006e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e92:	09db      	lsrs	r3, r3, #7
 8006e94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e98:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e9a:	d8f0      	bhi.n	8006e7e <_VPrintTarget+0x3ba>
 8006e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006ea2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ea4:	b2d2      	uxtb	r2, r2
 8006ea6:	701a      	strb	r2, [r3, #0]
 8006ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eaa:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006eb4:	e00b      	b.n	8006ece <_VPrintTarget+0x40a>
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ebc:	1c59      	adds	r1, r3, #1
 8006ebe:	6379      	str	r1, [r7, #52]	@ 0x34
 8006ec0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ec4:	b2d2      	uxtb	r2, r2
 8006ec6:	701a      	strb	r2, [r3, #0]
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eca:	09db      	lsrs	r3, r3, #7
 8006ecc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ed2:	d8f0      	bhi.n	8006eb6 <_VPrintTarget+0x3f2>
 8006ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed6:	1c5a      	adds	r2, r3, #1
 8006ed8:	637a      	str	r2, [r7, #52]	@ 0x34
 8006eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006edc:	b2d2      	uxtb	r2, r2
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee2:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	6979      	ldr	r1, [r7, #20]
 8006ee8:	221a      	movs	r2, #26
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7ff fada 	bl	80064a4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef2:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006ef6:	bf00      	nop
 8006ef8:	3758      	adds	r7, #88	@ 0x58
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	08008048 	.word	0x08008048

08006f04 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af02      	add	r7, sp, #8
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
 8006f10:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006f12:	2300      	movs	r3, #0
 8006f14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006f18:	4917      	ldr	r1, [pc, #92]	@ (8006f78 <SEGGER_SYSVIEW_Init+0x74>)
 8006f1a:	4818      	ldr	r0, [pc, #96]	@ (8006f7c <SEGGER_SYSVIEW_Init+0x78>)
 8006f1c:	f7ff f8d6 	bl	80060cc <SEGGER_RTT_AllocUpBuffer>
 8006f20:	4603      	mov	r3, r0
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	4b16      	ldr	r3, [pc, #88]	@ (8006f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f26:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006f28:	4b15      	ldr	r3, [pc, #84]	@ (8006f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f2a:	785a      	ldrb	r2, [r3, #1]
 8006f2c:	4b14      	ldr	r3, [pc, #80]	@ (8006f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f2e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006f30:	4b13      	ldr	r3, [pc, #76]	@ (8006f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f32:	7e1b      	ldrb	r3, [r3, #24]
 8006f34:	4618      	mov	r0, r3
 8006f36:	2300      	movs	r3, #0
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	2308      	movs	r3, #8
 8006f3c:	4a11      	ldr	r2, [pc, #68]	@ (8006f84 <SEGGER_SYSVIEW_Init+0x80>)
 8006f3e:	490f      	ldr	r1, [pc, #60]	@ (8006f7c <SEGGER_SYSVIEW_Init+0x78>)
 8006f40:	f7ff f948 	bl	80061d4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006f44:	4b0e      	ldr	r3, [pc, #56]	@ (8006f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f88 <SEGGER_SYSVIEW_Init+0x84>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8006f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f50:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006f52:	4a0b      	ldr	r2, [pc, #44]	@ (8006f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006f58:	4a09      	ldr	r2, [pc, #36]	@ (8006f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006f5e:	4a08      	ldr	r2, [pc, #32]	@ (8006f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006f64:	4a06      	ldr	r2, [pc, #24]	@ (8006f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006f6a:	4b05      	ldr	r3, [pc, #20]	@ (8006f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006f70:	bf00      	nop
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	2000bfa0 	.word	0x2000bfa0
 8006f7c:	08008050 	.word	0x08008050
 8006f80:	2000c3a8 	.word	0x2000c3a8
 8006f84:	2000c3a0 	.word	0x2000c3a0
 8006f88:	e0001004 	.word	0xe0001004

08006f8c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006f94:	4a04      	ldr	r2, [pc, #16]	@ (8006fa8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6113      	str	r3, [r2, #16]
}
 8006f9a:	bf00      	nop
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	2000c3a8 	.word	0x2000c3a8

08006fac <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006fb4:	f3ef 8311 	mrs	r3, BASEPRI
 8006fb8:	f04f 0120 	mov.w	r1, #32
 8006fbc:	f381 8811 	msr	BASEPRI, r1
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	4808      	ldr	r0, [pc, #32]	@ (8006fe4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006fc4:	f7ff f982 	bl	80062cc <_PreparePacket>
 8006fc8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	68b8      	ldr	r0, [r7, #8]
 8006fd0:	f7ff fa68 	bl	80064a4 <_SendPacket>
  RECORD_END();
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f383 8811 	msr	BASEPRI, r3
}
 8006fda:	bf00      	nop
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	2000c3d8 	.word	0x2000c3d8

08006fe8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ff2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ff6:	f04f 0120 	mov.w	r1, #32
 8006ffa:	f381 8811 	msr	BASEPRI, r1
 8006ffe:	617b      	str	r3, [r7, #20]
 8007000:	4816      	ldr	r0, [pc, #88]	@ (800705c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8007002:	f7ff f963 	bl	80062cc <_PreparePacket>
 8007006:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	61fb      	str	r3, [r7, #28]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	61bb      	str	r3, [r7, #24]
 8007014:	e00b      	b.n	800702e <SEGGER_SYSVIEW_RecordU32+0x46>
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	b2da      	uxtb	r2, r3
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	1c59      	adds	r1, r3, #1
 800701e:	61f9      	str	r1, [r7, #28]
 8007020:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007024:	b2d2      	uxtb	r2, r2
 8007026:	701a      	strb	r2, [r3, #0]
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	09db      	lsrs	r3, r3, #7
 800702c:	61bb      	str	r3, [r7, #24]
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	2b7f      	cmp	r3, #127	@ 0x7f
 8007032:	d8f0      	bhi.n	8007016 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	1c5a      	adds	r2, r3, #1
 8007038:	61fa      	str	r2, [r7, #28]
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	b2d2      	uxtb	r2, r2
 800703e:	701a      	strb	r2, [r3, #0]
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	68f9      	ldr	r1, [r7, #12]
 8007048:	6938      	ldr	r0, [r7, #16]
 800704a:	f7ff fa2b 	bl	80064a4 <_SendPacket>
  RECORD_END();
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f383 8811 	msr	BASEPRI, r3
}
 8007054:	bf00      	nop
 8007056:	3720      	adds	r7, #32
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	2000c3d8 	.word	0x2000c3d8

08007060 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007060:	b580      	push	{r7, lr}
 8007062:	b08c      	sub	sp, #48	@ 0x30
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800706c:	f3ef 8311 	mrs	r3, BASEPRI
 8007070:	f04f 0120 	mov.w	r1, #32
 8007074:	f381 8811 	msr	BASEPRI, r1
 8007078:	61fb      	str	r3, [r7, #28]
 800707a:	4825      	ldr	r0, [pc, #148]	@ (8007110 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800707c:	f7ff f926 	bl	80062cc <_PreparePacket>
 8007080:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800708e:	e00b      	b.n	80070a8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007092:	b2da      	uxtb	r2, r3
 8007094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007096:	1c59      	adds	r1, r3, #1
 8007098:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800709a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	701a      	strb	r2, [r3, #0]
 80070a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a4:	09db      	lsrs	r3, r3, #7
 80070a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80070ac:	d8f0      	bhi.n	8007090 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80070ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070bc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	623b      	str	r3, [r7, #32]
 80070c6:	e00b      	b.n	80070e0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	b2da      	uxtb	r2, r3
 80070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ce:	1c59      	adds	r1, r3, #1
 80070d0:	6279      	str	r1, [r7, #36]	@ 0x24
 80070d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	701a      	strb	r2, [r3, #0]
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	09db      	lsrs	r3, r3, #7
 80070de:	623b      	str	r3, [r7, #32]
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80070e4:	d8f0      	bhi.n	80070c8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80070e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80070ec:	6a3a      	ldr	r2, [r7, #32]
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	701a      	strb	r2, [r3, #0]
 80070f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	6979      	ldr	r1, [r7, #20]
 80070fa:	69b8      	ldr	r0, [r7, #24]
 80070fc:	f7ff f9d2 	bl	80064a4 <_SendPacket>
  RECORD_END();
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	f383 8811 	msr	BASEPRI, r3
}
 8007106:	bf00      	nop
 8007108:	3730      	adds	r7, #48	@ 0x30
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	2000c3d8 	.word	0x2000c3d8

08007114 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007114:	b580      	push	{r7, lr}
 8007116:	b08c      	sub	sp, #48	@ 0x30
 8007118:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800711a:	4b58      	ldr	r3, [pc, #352]	@ (800727c <SEGGER_SYSVIEW_Start+0x168>)
 800711c:	2201      	movs	r2, #1
 800711e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007120:	f3ef 8311 	mrs	r3, BASEPRI
 8007124:	f04f 0120 	mov.w	r1, #32
 8007128:	f381 8811 	msr	BASEPRI, r1
 800712c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800712e:	4b53      	ldr	r3, [pc, #332]	@ (800727c <SEGGER_SYSVIEW_Start+0x168>)
 8007130:	785b      	ldrb	r3, [r3, #1]
 8007132:	220a      	movs	r2, #10
 8007134:	4952      	ldr	r1, [pc, #328]	@ (8007280 <SEGGER_SYSVIEW_Start+0x16c>)
 8007136:	4618      	mov	r0, r3
 8007138:	f7f9 f882 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007142:	200a      	movs	r0, #10
 8007144:	f7ff ff32 	bl	8006fac <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007148:	f3ef 8311 	mrs	r3, BASEPRI
 800714c:	f04f 0120 	mov.w	r1, #32
 8007150:	f381 8811 	msr	BASEPRI, r1
 8007154:	60bb      	str	r3, [r7, #8]
 8007156:	484b      	ldr	r0, [pc, #300]	@ (8007284 <SEGGER_SYSVIEW_Start+0x170>)
 8007158:	f7ff f8b8 	bl	80062cc <_PreparePacket>
 800715c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007166:	4b45      	ldr	r3, [pc, #276]	@ (800727c <SEGGER_SYSVIEW_Start+0x168>)
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800716c:	e00b      	b.n	8007186 <SEGGER_SYSVIEW_Start+0x72>
 800716e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007170:	b2da      	uxtb	r2, r3
 8007172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007174:	1c59      	adds	r1, r3, #1
 8007176:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007178:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800717c:	b2d2      	uxtb	r2, r2
 800717e:	701a      	strb	r2, [r3, #0]
 8007180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007182:	09db      	lsrs	r3, r3, #7
 8007184:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007188:	2b7f      	cmp	r3, #127	@ 0x7f
 800718a:	d8f0      	bhi.n	800716e <SEGGER_SYSVIEW_Start+0x5a>
 800718c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800718e:	1c5a      	adds	r2, r3, #1
 8007190:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007192:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007194:	b2d2      	uxtb	r2, r2
 8007196:	701a      	strb	r2, [r3, #0]
 8007198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	627b      	str	r3, [r7, #36]	@ 0x24
 80071a0:	4b36      	ldr	r3, [pc, #216]	@ (800727c <SEGGER_SYSVIEW_Start+0x168>)
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	623b      	str	r3, [r7, #32]
 80071a6:	e00b      	b.n	80071c0 <SEGGER_SYSVIEW_Start+0xac>
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ae:	1c59      	adds	r1, r3, #1
 80071b0:	6279      	str	r1, [r7, #36]	@ 0x24
 80071b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071b6:	b2d2      	uxtb	r2, r2
 80071b8:	701a      	strb	r2, [r3, #0]
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	09db      	lsrs	r3, r3, #7
 80071be:	623b      	str	r3, [r7, #32]
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80071c4:	d8f0      	bhi.n	80071a8 <SEGGER_SYSVIEW_Start+0x94>
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80071cc:	6a3a      	ldr	r2, [r7, #32]
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	61fb      	str	r3, [r7, #28]
 80071da:	4b28      	ldr	r3, [pc, #160]	@ (800727c <SEGGER_SYSVIEW_Start+0x168>)
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	61bb      	str	r3, [r7, #24]
 80071e0:	e00b      	b.n	80071fa <SEGGER_SYSVIEW_Start+0xe6>
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	1c59      	adds	r1, r3, #1
 80071ea:	61f9      	str	r1, [r7, #28]
 80071ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071f0:	b2d2      	uxtb	r2, r2
 80071f2:	701a      	strb	r2, [r3, #0]
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	09db      	lsrs	r3, r3, #7
 80071f8:	61bb      	str	r3, [r7, #24]
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80071fe:	d8f0      	bhi.n	80071e2 <SEGGER_SYSVIEW_Start+0xce>
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	1c5a      	adds	r2, r3, #1
 8007204:	61fa      	str	r2, [r7, #28]
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	b2d2      	uxtb	r2, r2
 800720a:	701a      	strb	r2, [r3, #0]
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	2300      	movs	r3, #0
 8007216:	613b      	str	r3, [r7, #16]
 8007218:	e00b      	b.n	8007232 <SEGGER_SYSVIEW_Start+0x11e>
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	b2da      	uxtb	r2, r3
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	1c59      	adds	r1, r3, #1
 8007222:	6179      	str	r1, [r7, #20]
 8007224:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007228:	b2d2      	uxtb	r2, r2
 800722a:	701a      	strb	r2, [r3, #0]
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	09db      	lsrs	r3, r3, #7
 8007230:	613b      	str	r3, [r7, #16]
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	2b7f      	cmp	r3, #127	@ 0x7f
 8007236:	d8f0      	bhi.n	800721a <SEGGER_SYSVIEW_Start+0x106>
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	617a      	str	r2, [r7, #20]
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	b2d2      	uxtb	r2, r2
 8007242:	701a      	strb	r2, [r3, #0]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007248:	2218      	movs	r2, #24
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff f929 	bl	80064a4 <_SendPacket>
      RECORD_END();
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007258:	4b08      	ldr	r3, [pc, #32]	@ (800727c <SEGGER_SYSVIEW_Start+0x168>)
 800725a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725c:	2b00      	cmp	r3, #0
 800725e:	d002      	beq.n	8007266 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007260:	4b06      	ldr	r3, [pc, #24]	@ (800727c <SEGGER_SYSVIEW_Start+0x168>)
 8007262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007264:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007266:	f000 f9eb 	bl	8007640 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800726a:	f000 f9b1 	bl	80075d0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800726e:	f000 fd21 	bl	8007cb4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8007272:	bf00      	nop
 8007274:	3730      	adds	r7, #48	@ 0x30
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	2000c3a8 	.word	0x2000c3a8
 8007280:	08008090 	.word	0x08008090
 8007284:	2000c3d8 	.word	0x2000c3d8

08007288 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800728e:	f3ef 8311 	mrs	r3, BASEPRI
 8007292:	f04f 0120 	mov.w	r1, #32
 8007296:	f381 8811 	msr	BASEPRI, r1
 800729a:	607b      	str	r3, [r7, #4]
 800729c:	480b      	ldr	r0, [pc, #44]	@ (80072cc <SEGGER_SYSVIEW_Stop+0x44>)
 800729e:	f7ff f815 	bl	80062cc <_PreparePacket>
 80072a2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80072a4:	4b0a      	ldr	r3, [pc, #40]	@ (80072d0 <SEGGER_SYSVIEW_Stop+0x48>)
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d007      	beq.n	80072bc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80072ac:	220b      	movs	r2, #11
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6838      	ldr	r0, [r7, #0]
 80072b2:	f7ff f8f7 	bl	80064a4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80072b6:	4b06      	ldr	r3, [pc, #24]	@ (80072d0 <SEGGER_SYSVIEW_Stop+0x48>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f383 8811 	msr	BASEPRI, r3
}
 80072c2:	bf00      	nop
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	2000c3d8 	.word	0x2000c3d8
 80072d0:	2000c3a8 	.word	0x2000c3a8

080072d4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b08c      	sub	sp, #48	@ 0x30
 80072d8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80072da:	f3ef 8311 	mrs	r3, BASEPRI
 80072de:	f04f 0120 	mov.w	r1, #32
 80072e2:	f381 8811 	msr	BASEPRI, r1
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	4845      	ldr	r0, [pc, #276]	@ (8007400 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80072ea:	f7fe ffef 	bl	80062cc <_PreparePacket>
 80072ee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072f8:	4b42      	ldr	r3, [pc, #264]	@ (8007404 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072fe:	e00b      	b.n	8007318 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007302:	b2da      	uxtb	r2, r3
 8007304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007306:	1c59      	adds	r1, r3, #1
 8007308:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800730a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800730e:	b2d2      	uxtb	r2, r2
 8007310:	701a      	strb	r2, [r3, #0]
 8007312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007314:	09db      	lsrs	r3, r3, #7
 8007316:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731a:	2b7f      	cmp	r3, #127	@ 0x7f
 800731c:	d8f0      	bhi.n	8007300 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800731e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007320:	1c5a      	adds	r2, r3, #1
 8007322:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007324:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007326:	b2d2      	uxtb	r2, r2
 8007328:	701a      	strb	r2, [r3, #0]
 800732a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800732c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	627b      	str	r3, [r7, #36]	@ 0x24
 8007332:	4b34      	ldr	r3, [pc, #208]	@ (8007404 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	623b      	str	r3, [r7, #32]
 8007338:	e00b      	b.n	8007352 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	b2da      	uxtb	r2, r3
 800733e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007340:	1c59      	adds	r1, r3, #1
 8007342:	6279      	str	r1, [r7, #36]	@ 0x24
 8007344:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007348:	b2d2      	uxtb	r2, r2
 800734a:	701a      	strb	r2, [r3, #0]
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	09db      	lsrs	r3, r3, #7
 8007350:	623b      	str	r3, [r7, #32]
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	2b7f      	cmp	r3, #127	@ 0x7f
 8007356:	d8f0      	bhi.n	800733a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	627a      	str	r2, [r7, #36]	@ 0x24
 800735e:	6a3a      	ldr	r2, [r7, #32]
 8007360:	b2d2      	uxtb	r2, r2
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007366:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	61fb      	str	r3, [r7, #28]
 800736c:	4b25      	ldr	r3, [pc, #148]	@ (8007404 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	61bb      	str	r3, [r7, #24]
 8007372:	e00b      	b.n	800738c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	b2da      	uxtb	r2, r3
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	1c59      	adds	r1, r3, #1
 800737c:	61f9      	str	r1, [r7, #28]
 800737e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	701a      	strb	r2, [r3, #0]
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	09db      	lsrs	r3, r3, #7
 800738a:	61bb      	str	r3, [r7, #24]
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007390:	d8f0      	bhi.n	8007374 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	61fa      	str	r2, [r7, #28]
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	b2d2      	uxtb	r2, r2
 800739c:	701a      	strb	r2, [r3, #0]
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	2300      	movs	r3, #0
 80073a8:	613b      	str	r3, [r7, #16]
 80073aa:	e00b      	b.n	80073c4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	1c59      	adds	r1, r3, #1
 80073b4:	6179      	str	r1, [r7, #20]
 80073b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	701a      	strb	r2, [r3, #0]
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	09db      	lsrs	r3, r3, #7
 80073c2:	613b      	str	r3, [r7, #16]
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80073c8:	d8f0      	bhi.n	80073ac <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	617a      	str	r2, [r7, #20]
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	701a      	strb	r2, [r3, #0]
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80073da:	2218      	movs	r2, #24
 80073dc:	6879      	ldr	r1, [r7, #4]
 80073de:	68b8      	ldr	r0, [r7, #8]
 80073e0:	f7ff f860 	bl	80064a4 <_SendPacket>
  RECORD_END();
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80073ea:	4b06      	ldr	r3, [pc, #24]	@ (8007404 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80073ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80073f2:	4b04      	ldr	r3, [pc, #16]	@ (8007404 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80073f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f6:	4798      	blx	r3
  }
}
 80073f8:	bf00      	nop
 80073fa:	3730      	adds	r7, #48	@ 0x30
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	2000c3d8 	.word	0x2000c3d8
 8007404:	2000c3a8 	.word	0x2000c3a8

08007408 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007408:	b580      	push	{r7, lr}
 800740a:	b092      	sub	sp, #72	@ 0x48
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007410:	f3ef 8311 	mrs	r3, BASEPRI
 8007414:	f04f 0120 	mov.w	r1, #32
 8007418:	f381 8811 	msr	BASEPRI, r1
 800741c:	617b      	str	r3, [r7, #20]
 800741e:	486a      	ldr	r0, [pc, #424]	@ (80075c8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007420:	f7fe ff54 	bl	80062cc <_PreparePacket>
 8007424:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	647b      	str	r3, [r7, #68]	@ 0x44
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	4b66      	ldr	r3, [pc, #408]	@ (80075cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	643b      	str	r3, [r7, #64]	@ 0x40
 800743a:	e00b      	b.n	8007454 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800743c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800743e:	b2da      	uxtb	r2, r3
 8007440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007442:	1c59      	adds	r1, r3, #1
 8007444:	6479      	str	r1, [r7, #68]	@ 0x44
 8007446:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800744a:	b2d2      	uxtb	r2, r2
 800744c:	701a      	strb	r2, [r3, #0]
 800744e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007450:	09db      	lsrs	r3, r3, #7
 8007452:	643b      	str	r3, [r7, #64]	@ 0x40
 8007454:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007456:	2b7f      	cmp	r3, #127	@ 0x7f
 8007458:	d8f0      	bhi.n	800743c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800745a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800745c:	1c5a      	adds	r2, r3, #1
 800745e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007460:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007462:	b2d2      	uxtb	r2, r2
 8007464:	701a      	strb	r2, [r3, #0]
 8007466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007468:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007474:	e00b      	b.n	800748e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007478:	b2da      	uxtb	r2, r3
 800747a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800747c:	1c59      	adds	r1, r3, #1
 800747e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8007480:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007484:	b2d2      	uxtb	r2, r2
 8007486:	701a      	strb	r2, [r3, #0]
 8007488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748a:	09db      	lsrs	r3, r3, #7
 800748c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800748e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007490:	2b7f      	cmp	r3, #127	@ 0x7f
 8007492:	d8f0      	bhi.n	8007476 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007496:	1c5a      	adds	r2, r3, #1
 8007498:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800749a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800749c:	b2d2      	uxtb	r2, r2
 800749e:	701a      	strb	r2, [r3, #0]
 80074a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074a2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	2220      	movs	r2, #32
 80074aa:	4619      	mov	r1, r3
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f7fe fedd 	bl	800626c <_EncodeStr>
 80074b2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80074b4:	2209      	movs	r2, #9
 80074b6:	68f9      	ldr	r1, [r7, #12]
 80074b8:	6938      	ldr	r0, [r7, #16]
 80074ba:	f7fe fff3 	bl	80064a4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	4b40      	ldr	r3, [pc, #256]	@ (80075cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80074d2:	e00b      	b.n	80074ec <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80074d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074da:	1c59      	adds	r1, r3, #1
 80074dc:	6379      	str	r1, [r7, #52]	@ 0x34
 80074de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	701a      	strb	r2, [r3, #0]
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	09db      	lsrs	r3, r3, #7
 80074ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80074ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80074f0:	d8f0      	bhi.n	80074d4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80074f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f4:	1c5a      	adds	r2, r3, #1
 80074f6:	637a      	str	r2, [r7, #52]	@ 0x34
 80074f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074fa:	b2d2      	uxtb	r2, r2
 80074fc:	701a      	strb	r2, [r3, #0]
 80074fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007500:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800750c:	e00b      	b.n	8007526 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800750e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007510:	b2da      	uxtb	r2, r3
 8007512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007514:	1c59      	adds	r1, r3, #1
 8007516:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007518:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800751c:	b2d2      	uxtb	r2, r2
 800751e:	701a      	strb	r2, [r3, #0]
 8007520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007522:	09db      	lsrs	r3, r3, #7
 8007524:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007528:	2b7f      	cmp	r3, #127	@ 0x7f
 800752a:	d8f0      	bhi.n	800750e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800752c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800752e:	1c5a      	adds	r2, r3, #1
 8007530:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007532:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007534:	b2d2      	uxtb	r2, r2
 8007536:	701a      	strb	r2, [r3, #0]
 8007538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	623b      	str	r3, [r7, #32]
 8007546:	e00b      	b.n	8007560 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	b2da      	uxtb	r2, r3
 800754c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754e:	1c59      	adds	r1, r3, #1
 8007550:	6279      	str	r1, [r7, #36]	@ 0x24
 8007552:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007556:	b2d2      	uxtb	r2, r2
 8007558:	701a      	strb	r2, [r3, #0]
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	09db      	lsrs	r3, r3, #7
 800755e:	623b      	str	r3, [r7, #32]
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	2b7f      	cmp	r3, #127	@ 0x7f
 8007564:	d8f0      	bhi.n	8007548 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	627a      	str	r2, [r7, #36]	@ 0x24
 800756c:	6a3a      	ldr	r2, [r7, #32]
 800756e:	b2d2      	uxtb	r2, r2
 8007570:	701a      	strb	r2, [r3, #0]
 8007572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007574:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	61fb      	str	r3, [r7, #28]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	61bb      	str	r3, [r7, #24]
 8007580:	e00b      	b.n	800759a <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	b2da      	uxtb	r2, r3
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	1c59      	adds	r1, r3, #1
 800758a:	61f9      	str	r1, [r7, #28]
 800758c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007590:	b2d2      	uxtb	r2, r2
 8007592:	701a      	strb	r2, [r3, #0]
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	09db      	lsrs	r3, r3, #7
 8007598:	61bb      	str	r3, [r7, #24]
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	2b7f      	cmp	r3, #127	@ 0x7f
 800759e:	d8f0      	bhi.n	8007582 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	1c5a      	adds	r2, r3, #1
 80075a4:	61fa      	str	r2, [r7, #28]
 80075a6:	69ba      	ldr	r2, [r7, #24]
 80075a8:	b2d2      	uxtb	r2, r2
 80075aa:	701a      	strb	r2, [r3, #0]
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80075b0:	2215      	movs	r2, #21
 80075b2:	68f9      	ldr	r1, [r7, #12]
 80075b4:	6938      	ldr	r0, [r7, #16]
 80075b6:	f7fe ff75 	bl	80064a4 <_SendPacket>
  RECORD_END();
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f383 8811 	msr	BASEPRI, r3
}
 80075c0:	bf00      	nop
 80075c2:	3748      	adds	r7, #72	@ 0x48
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	2000c3d8 	.word	0x2000c3d8
 80075cc:	2000c3a8 	.word	0x2000c3a8

080075d0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80075d0:	b580      	push	{r7, lr}
 80075d2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80075d4:	4b07      	ldr	r3, [pc, #28]	@ (80075f4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d008      	beq.n	80075ee <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80075dc:	4b05      	ldr	r3, [pc, #20]	@ (80075f4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80075de:	6a1b      	ldr	r3, [r3, #32]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80075e6:	4b03      	ldr	r3, [pc, #12]	@ (80075f4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	4798      	blx	r3
  }
}
 80075ee:	bf00      	nop
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	2000c3a8 	.word	0x2000c3a8

080075f8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007600:	f3ef 8311 	mrs	r3, BASEPRI
 8007604:	f04f 0120 	mov.w	r1, #32
 8007608:	f381 8811 	msr	BASEPRI, r1
 800760c:	617b      	str	r3, [r7, #20]
 800760e:	480b      	ldr	r0, [pc, #44]	@ (800763c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007610:	f7fe fe5c 	bl	80062cc <_PreparePacket>
 8007614:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007616:	2280      	movs	r2, #128	@ 0x80
 8007618:	6879      	ldr	r1, [r7, #4]
 800761a:	6938      	ldr	r0, [r7, #16]
 800761c:	f7fe fe26 	bl	800626c <_EncodeStr>
 8007620:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007622:	220e      	movs	r2, #14
 8007624:	68f9      	ldr	r1, [r7, #12]
 8007626:	6938      	ldr	r0, [r7, #16]
 8007628:	f7fe ff3c 	bl	80064a4 <_SendPacket>
  RECORD_END();
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f383 8811 	msr	BASEPRI, r3
}
 8007632:	bf00      	nop
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	2000c3d8 	.word	0x2000c3d8

08007640 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007640:	b590      	push	{r4, r7, lr}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007646:	4b15      	ldr	r3, [pc, #84]	@ (800769c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d01a      	beq.n	8007684 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800764e:	4b13      	ldr	r3, [pc, #76]	@ (800769c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d015      	beq.n	8007684 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007658:	4b10      	ldr	r3, [pc, #64]	@ (800769c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4798      	blx	r3
 8007660:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007664:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007666:	e9d7 0100 	ldrd	r0, r1, [r7]
 800766a:	f04f 0200 	mov.w	r2, #0
 800766e:	f04f 0300 	mov.w	r3, #0
 8007672:	000a      	movs	r2, r1
 8007674:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007676:	4613      	mov	r3, r2
 8007678:	461a      	mov	r2, r3
 800767a:	4621      	mov	r1, r4
 800767c:	200d      	movs	r0, #13
 800767e:	f7ff fcef 	bl	8007060 <SEGGER_SYSVIEW_RecordU32x2>
 8007682:	e006      	b.n	8007692 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007684:	4b06      	ldr	r3, [pc, #24]	@ (80076a0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4619      	mov	r1, r3
 800768a:	200c      	movs	r0, #12
 800768c:	f7ff fcac 	bl	8006fe8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007690:	bf00      	nop
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	bd90      	pop	{r4, r7, pc}
 800769a:	bf00      	nop
 800769c:	2000c3a8 	.word	0x2000c3a8
 80076a0:	e0001004 	.word	0xe0001004

080076a4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80076aa:	f3ef 8311 	mrs	r3, BASEPRI
 80076ae:	f04f 0120 	mov.w	r1, #32
 80076b2:	f381 8811 	msr	BASEPRI, r1
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	4819      	ldr	r0, [pc, #100]	@ (8007720 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80076ba:	f7fe fe07 	bl	80062cc <_PreparePacket>
 80076be:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80076c4:	4b17      	ldr	r3, [pc, #92]	@ (8007724 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076cc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	617b      	str	r3, [r7, #20]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	613b      	str	r3, [r7, #16]
 80076d6:	e00b      	b.n	80076f0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	1c59      	adds	r1, r3, #1
 80076e0:	6179      	str	r1, [r7, #20]
 80076e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80076e6:	b2d2      	uxtb	r2, r2
 80076e8:	701a      	strb	r2, [r3, #0]
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	09db      	lsrs	r3, r3, #7
 80076ee:	613b      	str	r3, [r7, #16]
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80076f4:	d8f0      	bhi.n	80076d8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	1c5a      	adds	r2, r3, #1
 80076fa:	617a      	str	r2, [r7, #20]
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	b2d2      	uxtb	r2, r2
 8007700:	701a      	strb	r2, [r3, #0]
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007706:	2202      	movs	r2, #2
 8007708:	6879      	ldr	r1, [r7, #4]
 800770a:	68b8      	ldr	r0, [r7, #8]
 800770c:	f7fe feca 	bl	80064a4 <_SendPacket>
  RECORD_END();
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f383 8811 	msr	BASEPRI, r3
}
 8007716:	bf00      	nop
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	2000c3d8 	.word	0x2000c3d8
 8007724:	e000ed04 	.word	0xe000ed04

08007728 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800772e:	f3ef 8311 	mrs	r3, BASEPRI
 8007732:	f04f 0120 	mov.w	r1, #32
 8007736:	f381 8811 	msr	BASEPRI, r1
 800773a:	607b      	str	r3, [r7, #4]
 800773c:	4807      	ldr	r0, [pc, #28]	@ (800775c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800773e:	f7fe fdc5 	bl	80062cc <_PreparePacket>
 8007742:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007744:	2203      	movs	r2, #3
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6838      	ldr	r0, [r7, #0]
 800774a:	f7fe feab 	bl	80064a4 <_SendPacket>
  RECORD_END();
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f383 8811 	msr	BASEPRI, r3
}
 8007754:	bf00      	nop
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	2000c3d8 	.word	0x2000c3d8

08007760 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007766:	f3ef 8311 	mrs	r3, BASEPRI
 800776a:	f04f 0120 	mov.w	r1, #32
 800776e:	f381 8811 	msr	BASEPRI, r1
 8007772:	607b      	str	r3, [r7, #4]
 8007774:	4807      	ldr	r0, [pc, #28]	@ (8007794 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007776:	f7fe fda9 	bl	80062cc <_PreparePacket>
 800777a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800777c:	2212      	movs	r2, #18
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6838      	ldr	r0, [r7, #0]
 8007782:	f7fe fe8f 	bl	80064a4 <_SendPacket>
  RECORD_END();
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f383 8811 	msr	BASEPRI, r3
}
 800778c:	bf00      	nop
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	2000c3d8 	.word	0x2000c3d8

08007798 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8007798:	b580      	push	{r7, lr}
 800779a:	b088      	sub	sp, #32
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80077a0:	f3ef 8311 	mrs	r3, BASEPRI
 80077a4:	f04f 0120 	mov.w	r1, #32
 80077a8:	f381 8811 	msr	BASEPRI, r1
 80077ac:	617b      	str	r3, [r7, #20]
 80077ae:	4817      	ldr	r0, [pc, #92]	@ (800780c <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 80077b0:	f7fe fd8c 	bl	80062cc <_PreparePacket>
 80077b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	61fb      	str	r3, [r7, #28]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	61bb      	str	r3, [r7, #24]
 80077c2:	e00b      	b.n	80077dc <SEGGER_SYSVIEW_RecordEndCall+0x44>
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	1c59      	adds	r1, r3, #1
 80077cc:	61f9      	str	r1, [r7, #28]
 80077ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80077d2:	b2d2      	uxtb	r2, r2
 80077d4:	701a      	strb	r2, [r3, #0]
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	09db      	lsrs	r3, r3, #7
 80077da:	61bb      	str	r3, [r7, #24]
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	2b7f      	cmp	r3, #127	@ 0x7f
 80077e0:	d8f0      	bhi.n	80077c4 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	1c5a      	adds	r2, r3, #1
 80077e6:	61fa      	str	r2, [r7, #28]
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	b2d2      	uxtb	r2, r2
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80077f2:	221c      	movs	r2, #28
 80077f4:	68f9      	ldr	r1, [r7, #12]
 80077f6:	6938      	ldr	r0, [r7, #16]
 80077f8:	f7fe fe54 	bl	80064a4 <_SendPacket>
  RECORD_END();
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f383 8811 	msr	BASEPRI, r3
}
 8007802:	bf00      	nop
 8007804:	3720      	adds	r7, #32
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	2000c3d8 	.word	0x2000c3d8

08007810 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8007810:	b580      	push	{r7, lr}
 8007812:	b08a      	sub	sp, #40	@ 0x28
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800781a:	f3ef 8311 	mrs	r3, BASEPRI
 800781e:	f04f 0120 	mov.w	r1, #32
 8007822:	f381 8811 	msr	BASEPRI, r1
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	4824      	ldr	r0, [pc, #144]	@ (80078bc <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 800782a:	f7fe fd4f 	bl	80062cc <_PreparePacket>
 800782e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	627b      	str	r3, [r7, #36]	@ 0x24
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	623b      	str	r3, [r7, #32]
 800783c:	e00b      	b.n	8007856 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	b2da      	uxtb	r2, r3
 8007842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007844:	1c59      	adds	r1, r3, #1
 8007846:	6279      	str	r1, [r7, #36]	@ 0x24
 8007848:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800784c:	b2d2      	uxtb	r2, r2
 800784e:	701a      	strb	r2, [r3, #0]
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	09db      	lsrs	r3, r3, #7
 8007854:	623b      	str	r3, [r7, #32]
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	2b7f      	cmp	r3, #127	@ 0x7f
 800785a:	d8f0      	bhi.n	800783e <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 800785c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785e:	1c5a      	adds	r2, r3, #1
 8007860:	627a      	str	r2, [r7, #36]	@ 0x24
 8007862:	6a3a      	ldr	r2, [r7, #32]
 8007864:	b2d2      	uxtb	r2, r2
 8007866:	701a      	strb	r2, [r3, #0]
 8007868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	61fb      	str	r3, [r7, #28]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	61bb      	str	r3, [r7, #24]
 8007874:	e00b      	b.n	800788e <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	b2da      	uxtb	r2, r3
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	1c59      	adds	r1, r3, #1
 800787e:	61f9      	str	r1, [r7, #28]
 8007880:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007884:	b2d2      	uxtb	r2, r2
 8007886:	701a      	strb	r2, [r3, #0]
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	09db      	lsrs	r3, r3, #7
 800788c:	61bb      	str	r3, [r7, #24]
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	2b7f      	cmp	r3, #127	@ 0x7f
 8007892:	d8f0      	bhi.n	8007876 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	1c5a      	adds	r2, r3, #1
 8007898:	61fa      	str	r2, [r7, #28]
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	b2d2      	uxtb	r2, r2
 800789e:	701a      	strb	r2, [r3, #0]
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80078a4:	221c      	movs	r2, #28
 80078a6:	68f9      	ldr	r1, [r7, #12]
 80078a8:	6938      	ldr	r0, [r7, #16]
 80078aa:	f7fe fdfb 	bl	80064a4 <_SendPacket>
  RECORD_END();
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f383 8811 	msr	BASEPRI, r3
}
 80078b4:	bf00      	nop
 80078b6:	3728      	adds	r7, #40	@ 0x28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	2000c3d8 	.word	0x2000c3d8

080078c0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80078c6:	f3ef 8311 	mrs	r3, BASEPRI
 80078ca:	f04f 0120 	mov.w	r1, #32
 80078ce:	f381 8811 	msr	BASEPRI, r1
 80078d2:	607b      	str	r3, [r7, #4]
 80078d4:	4807      	ldr	r0, [pc, #28]	@ (80078f4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80078d6:	f7fe fcf9 	bl	80062cc <_PreparePacket>
 80078da:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80078dc:	2211      	movs	r2, #17
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6838      	ldr	r0, [r7, #0]
 80078e2:	f7fe fddf 	bl	80064a4 <_SendPacket>
  RECORD_END();
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f383 8811 	msr	BASEPRI, r3
}
 80078ec:	bf00      	nop
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	2000c3d8 	.word	0x2000c3d8

080078f8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007900:	f3ef 8311 	mrs	r3, BASEPRI
 8007904:	f04f 0120 	mov.w	r1, #32
 8007908:	f381 8811 	msr	BASEPRI, r1
 800790c:	617b      	str	r3, [r7, #20]
 800790e:	4819      	ldr	r0, [pc, #100]	@ (8007974 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007910:	f7fe fcdc 	bl	80062cc <_PreparePacket>
 8007914:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800791a:	4b17      	ldr	r3, [pc, #92]	@ (8007978 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	61fb      	str	r3, [r7, #28]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	61bb      	str	r3, [r7, #24]
 800792c:	e00b      	b.n	8007946 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	b2da      	uxtb	r2, r3
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	1c59      	adds	r1, r3, #1
 8007936:	61f9      	str	r1, [r7, #28]
 8007938:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800793c:	b2d2      	uxtb	r2, r2
 800793e:	701a      	strb	r2, [r3, #0]
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	09db      	lsrs	r3, r3, #7
 8007944:	61bb      	str	r3, [r7, #24]
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	2b7f      	cmp	r3, #127	@ 0x7f
 800794a:	d8f0      	bhi.n	800792e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	1c5a      	adds	r2, r3, #1
 8007950:	61fa      	str	r2, [r7, #28]
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	b2d2      	uxtb	r2, r2
 8007956:	701a      	strb	r2, [r3, #0]
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800795c:	2208      	movs	r2, #8
 800795e:	68f9      	ldr	r1, [r7, #12]
 8007960:	6938      	ldr	r0, [r7, #16]
 8007962:	f7fe fd9f 	bl	80064a4 <_SendPacket>
  RECORD_END();
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f383 8811 	msr	BASEPRI, r3
}
 800796c:	bf00      	nop
 800796e:	3720      	adds	r7, #32
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	2000c3d8 	.word	0x2000c3d8
 8007978:	2000c3a8 	.word	0x2000c3a8

0800797c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800797c:	b580      	push	{r7, lr}
 800797e:	b088      	sub	sp, #32
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007984:	f3ef 8311 	mrs	r3, BASEPRI
 8007988:	f04f 0120 	mov.w	r1, #32
 800798c:	f381 8811 	msr	BASEPRI, r1
 8007990:	617b      	str	r3, [r7, #20]
 8007992:	4819      	ldr	r0, [pc, #100]	@ (80079f8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007994:	f7fe fc9a 	bl	80062cc <_PreparePacket>
 8007998:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800799e:	4b17      	ldr	r3, [pc, #92]	@ (80079fc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	61fb      	str	r3, [r7, #28]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	61bb      	str	r3, [r7, #24]
 80079b0:	e00b      	b.n	80079ca <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	1c59      	adds	r1, r3, #1
 80079ba:	61f9      	str	r1, [r7, #28]
 80079bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80079c0:	b2d2      	uxtb	r2, r2
 80079c2:	701a      	strb	r2, [r3, #0]
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	09db      	lsrs	r3, r3, #7
 80079c8:	61bb      	str	r3, [r7, #24]
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80079ce:	d8f0      	bhi.n	80079b2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	1c5a      	adds	r2, r3, #1
 80079d4:	61fa      	str	r2, [r7, #28]
 80079d6:	69ba      	ldr	r2, [r7, #24]
 80079d8:	b2d2      	uxtb	r2, r2
 80079da:	701a      	strb	r2, [r3, #0]
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80079e0:	2204      	movs	r2, #4
 80079e2:	68f9      	ldr	r1, [r7, #12]
 80079e4:	6938      	ldr	r0, [r7, #16]
 80079e6:	f7fe fd5d 	bl	80064a4 <_SendPacket>
  RECORD_END();
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f383 8811 	msr	BASEPRI, r3
}
 80079f0:	bf00      	nop
 80079f2:	3720      	adds	r7, #32
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	2000c3d8 	.word	0x2000c3d8
 80079fc:	2000c3a8 	.word	0x2000c3a8

08007a00 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b088      	sub	sp, #32
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007a08:	f3ef 8311 	mrs	r3, BASEPRI
 8007a0c:	f04f 0120 	mov.w	r1, #32
 8007a10:	f381 8811 	msr	BASEPRI, r1
 8007a14:	617b      	str	r3, [r7, #20]
 8007a16:	4819      	ldr	r0, [pc, #100]	@ (8007a7c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007a18:	f7fe fc58 	bl	80062cc <_PreparePacket>
 8007a1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007a22:	4b17      	ldr	r3, [pc, #92]	@ (8007a80 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	61fb      	str	r3, [r7, #28]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	61bb      	str	r3, [r7, #24]
 8007a34:	e00b      	b.n	8007a4e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	1c59      	adds	r1, r3, #1
 8007a3e:	61f9      	str	r1, [r7, #28]
 8007a40:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007a44:	b2d2      	uxtb	r2, r2
 8007a46:	701a      	strb	r2, [r3, #0]
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	09db      	lsrs	r3, r3, #7
 8007a4c:	61bb      	str	r3, [r7, #24]
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a52:	d8f0      	bhi.n	8007a36 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	61fa      	str	r2, [r7, #28]
 8007a5a:	69ba      	ldr	r2, [r7, #24]
 8007a5c:	b2d2      	uxtb	r2, r2
 8007a5e:	701a      	strb	r2, [r3, #0]
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007a64:	2206      	movs	r2, #6
 8007a66:	68f9      	ldr	r1, [r7, #12]
 8007a68:	6938      	ldr	r0, [r7, #16]
 8007a6a:	f7fe fd1b 	bl	80064a4 <_SendPacket>
  RECORD_END();
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f383 8811 	msr	BASEPRI, r3
}
 8007a74:	bf00      	nop
 8007a76:	3720      	adds	r7, #32
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	2000c3d8 	.word	0x2000c3d8
 8007a80:	2000c3a8 	.word	0x2000c3a8

08007a84 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b08a      	sub	sp, #40	@ 0x28
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007a8e:	f3ef 8311 	mrs	r3, BASEPRI
 8007a92:	f04f 0120 	mov.w	r1, #32
 8007a96:	f381 8811 	msr	BASEPRI, r1
 8007a9a:	617b      	str	r3, [r7, #20]
 8007a9c:	4827      	ldr	r0, [pc, #156]	@ (8007b3c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007a9e:	f7fe fc15 	bl	80062cc <_PreparePacket>
 8007aa2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007aa8:	4b25      	ldr	r3, [pc, #148]	@ (8007b40 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	623b      	str	r3, [r7, #32]
 8007aba:	e00b      	b.n	8007ad4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac2:	1c59      	adds	r1, r3, #1
 8007ac4:	6279      	str	r1, [r7, #36]	@ 0x24
 8007ac6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007aca:	b2d2      	uxtb	r2, r2
 8007acc:	701a      	strb	r2, [r3, #0]
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	09db      	lsrs	r3, r3, #7
 8007ad2:	623b      	str	r3, [r7, #32]
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ad8:	d8f0      	bhi.n	8007abc <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007adc:	1c5a      	adds	r2, r3, #1
 8007ade:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ae0:	6a3a      	ldr	r2, [r7, #32]
 8007ae2:	b2d2      	uxtb	r2, r2
 8007ae4:	701a      	strb	r2, [r3, #0]
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	61fb      	str	r3, [r7, #28]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	61bb      	str	r3, [r7, #24]
 8007af2:	e00b      	b.n	8007b0c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	1c59      	adds	r1, r3, #1
 8007afc:	61f9      	str	r1, [r7, #28]
 8007afe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007b02:	b2d2      	uxtb	r2, r2
 8007b04:	701a      	strb	r2, [r3, #0]
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	09db      	lsrs	r3, r3, #7
 8007b0a:	61bb      	str	r3, [r7, #24]
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b10:	d8f0      	bhi.n	8007af4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	61fa      	str	r2, [r7, #28]
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	b2d2      	uxtb	r2, r2
 8007b1c:	701a      	strb	r2, [r3, #0]
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007b22:	2207      	movs	r2, #7
 8007b24:	68f9      	ldr	r1, [r7, #12]
 8007b26:	6938      	ldr	r0, [r7, #16]
 8007b28:	f7fe fcbc 	bl	80064a4 <_SendPacket>
  RECORD_END();
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f383 8811 	msr	BASEPRI, r3
}
 8007b32:	bf00      	nop
 8007b34:	3728      	adds	r7, #40	@ 0x28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	2000c3d8 	.word	0x2000c3d8
 8007b40:	2000c3a8 	.word	0x2000c3a8

08007b44 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007b4c:	4b04      	ldr	r3, [pc, #16]	@ (8007b60 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	1ad3      	subs	r3, r2, r3
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	2000c3a8 	.word	0x2000c3a8

08007b64 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b08c      	sub	sp, #48	@ 0x30
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007b6e:	4b40      	ldr	r3, [pc, #256]	@ (8007c70 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d077      	beq.n	8007c66 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8007b76:	4b3e      	ldr	r3, [pc, #248]	@ (8007c70 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b80:	e008      	b.n	8007b94 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d007      	beq.n	8007b9e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b90:	3301      	adds	r3, #1
 8007b92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b94:	79fb      	ldrb	r3, [r7, #7]
 8007b96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d3f2      	bcc.n	8007b82 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007b9c:	e000      	b.n	8007ba0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007b9e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d055      	beq.n	8007c52 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007ba6:	f3ef 8311 	mrs	r3, BASEPRI
 8007baa:	f04f 0120 	mov.w	r1, #32
 8007bae:	f381 8811 	msr	BASEPRI, r1
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	482f      	ldr	r0, [pc, #188]	@ (8007c74 <SEGGER_SYSVIEW_SendModule+0x110>)
 8007bb6:	f7fe fb89 	bl	80062cc <_PreparePacket>
 8007bba:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bc4:	79fb      	ldrb	r3, [r7, #7]
 8007bc6:	623b      	str	r3, [r7, #32]
 8007bc8:	e00b      	b.n	8007be2 <SEGGER_SYSVIEW_SendModule+0x7e>
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd0:	1c59      	adds	r1, r3, #1
 8007bd2:	6279      	str	r1, [r7, #36]	@ 0x24
 8007bd4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007bd8:	b2d2      	uxtb	r2, r2
 8007bda:	701a      	strb	r2, [r3, #0]
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	09db      	lsrs	r3, r3, #7
 8007be0:	623b      	str	r3, [r7, #32]
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	2b7f      	cmp	r3, #127	@ 0x7f
 8007be6:	d8f0      	bhi.n	8007bca <SEGGER_SYSVIEW_SendModule+0x66>
 8007be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	627a      	str	r2, [r7, #36]	@ 0x24
 8007bee:	6a3a      	ldr	r2, [r7, #32]
 8007bf0:	b2d2      	uxtb	r2, r2
 8007bf2:	701a      	strb	r2, [r3, #0]
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	61fb      	str	r3, [r7, #28]
 8007bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	61bb      	str	r3, [r7, #24]
 8007c02:	e00b      	b.n	8007c1c <SEGGER_SYSVIEW_SendModule+0xb8>
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	b2da      	uxtb	r2, r3
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	1c59      	adds	r1, r3, #1
 8007c0c:	61f9      	str	r1, [r7, #28]
 8007c0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007c12:	b2d2      	uxtb	r2, r2
 8007c14:	701a      	strb	r2, [r3, #0]
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	09db      	lsrs	r3, r3, #7
 8007c1a:	61bb      	str	r3, [r7, #24]
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c20:	d8f0      	bhi.n	8007c04 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	1c5a      	adds	r2, r3, #1
 8007c26:	61fa      	str	r2, [r7, #28]
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	b2d2      	uxtb	r2, r2
 8007c2c:	701a      	strb	r2, [r3, #0]
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2280      	movs	r2, #128	@ 0x80
 8007c38:	4619      	mov	r1, r3
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f7fe fb16 	bl	800626c <_EncodeStr>
 8007c40:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007c42:	2216      	movs	r2, #22
 8007c44:	68f9      	ldr	r1, [r7, #12]
 8007c46:	6938      	ldr	r0, [r7, #16]
 8007c48:	f7fe fc2c 	bl	80064a4 <_SendPacket>
      RECORD_END();
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8007c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d006      	beq.n	8007c66 <SEGGER_SYSVIEW_SendModule+0x102>
 8007c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	4798      	blx	r3
    }
  }
}
 8007c66:	bf00      	nop
 8007c68:	3730      	adds	r7, #48	@ 0x30
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	2000c3d0 	.word	0x2000c3d0
 8007c74:	2000c3d8 	.word	0x2000c3d8

08007c78 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8007cb0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00f      	beq.n	8007ca6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007c86:	4b0a      	ldr	r3, [pc, #40]	@ (8007cb0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1f2      	bne.n	8007c8c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007ca6:	bf00      	nop
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	2000c3d0 	.word	0x2000c3d0

08007cb4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007cba:	f3ef 8311 	mrs	r3, BASEPRI
 8007cbe:	f04f 0120 	mov.w	r1, #32
 8007cc2:	f381 8811 	msr	BASEPRI, r1
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	4817      	ldr	r0, [pc, #92]	@ (8007d28 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007cca:	f7fe faff 	bl	80062cc <_PreparePacket>
 8007cce:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	617b      	str	r3, [r7, #20]
 8007cd8:	4b14      	ldr	r3, [pc, #80]	@ (8007d2c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	613b      	str	r3, [r7, #16]
 8007cde:	e00b      	b.n	8007cf8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	1c59      	adds	r1, r3, #1
 8007ce8:	6179      	str	r1, [r7, #20]
 8007cea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007cee:	b2d2      	uxtb	r2, r2
 8007cf0:	701a      	strb	r2, [r3, #0]
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	09db      	lsrs	r3, r3, #7
 8007cf6:	613b      	str	r3, [r7, #16]
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8007cfc:	d8f0      	bhi.n	8007ce0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	1c5a      	adds	r2, r3, #1
 8007d02:	617a      	str	r2, [r7, #20]
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	b2d2      	uxtb	r2, r2
 8007d08:	701a      	strb	r2, [r3, #0]
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007d0e:	221b      	movs	r2, #27
 8007d10:	6879      	ldr	r1, [r7, #4]
 8007d12:	68b8      	ldr	r0, [r7, #8]
 8007d14:	f7fe fbc6 	bl	80064a4 <_SendPacket>
  RECORD_END();
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f383 8811 	msr	BASEPRI, r3
}
 8007d1e:	bf00      	nop
 8007d20:	3718      	adds	r7, #24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	2000c3d8 	.word	0x2000c3d8
 8007d2c:	2000c3d4 	.word	0x2000c3d4

08007d30 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007d30:	b40f      	push	{r0, r1, r2, r3}
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b082      	sub	sp, #8
 8007d36:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007d38:	f107 0314 	add.w	r3, r7, #20
 8007d3c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007d3e:	1d3b      	adds	r3, r7, #4
 8007d40:	461a      	mov	r2, r3
 8007d42:	2100      	movs	r1, #0
 8007d44:	6938      	ldr	r0, [r7, #16]
 8007d46:	f7fe febd 	bl	8006ac4 <_VPrintTarget>
  va_end(ParamList);
}
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d54:	b004      	add	sp, #16
 8007d56:	4770      	bx	lr

08007d58 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08a      	sub	sp, #40	@ 0x28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007d60:	f3ef 8311 	mrs	r3, BASEPRI
 8007d64:	f04f 0120 	mov.w	r1, #32
 8007d68:	f381 8811 	msr	BASEPRI, r1
 8007d6c:	617b      	str	r3, [r7, #20]
 8007d6e:	4827      	ldr	r0, [pc, #156]	@ (8007e0c <SEGGER_SYSVIEW_Warn+0xb4>)
 8007d70:	f7fe faac 	bl	80062cc <_PreparePacket>
 8007d74:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007d76:	2280      	movs	r2, #128	@ 0x80
 8007d78:	6879      	ldr	r1, [r7, #4]
 8007d7a:	6938      	ldr	r0, [r7, #16]
 8007d7c:	f7fe fa76 	bl	800626c <_EncodeStr>
 8007d80:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d86:	2301      	movs	r3, #1
 8007d88:	623b      	str	r3, [r7, #32]
 8007d8a:	e00b      	b.n	8007da4 <SEGGER_SYSVIEW_Warn+0x4c>
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d92:	1c59      	adds	r1, r3, #1
 8007d94:	6279      	str	r1, [r7, #36]	@ 0x24
 8007d96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007d9a:	b2d2      	uxtb	r2, r2
 8007d9c:	701a      	strb	r2, [r3, #0]
 8007d9e:	6a3b      	ldr	r3, [r7, #32]
 8007da0:	09db      	lsrs	r3, r3, #7
 8007da2:	623b      	str	r3, [r7, #32]
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	2b7f      	cmp	r3, #127	@ 0x7f
 8007da8:	d8f0      	bhi.n	8007d8c <SEGGER_SYSVIEW_Warn+0x34>
 8007daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dac:	1c5a      	adds	r2, r3, #1
 8007dae:	627a      	str	r2, [r7, #36]	@ 0x24
 8007db0:	6a3a      	ldr	r2, [r7, #32]
 8007db2:	b2d2      	uxtb	r2, r2
 8007db4:	701a      	strb	r2, [r3, #0]
 8007db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	61fb      	str	r3, [r7, #28]
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	61bb      	str	r3, [r7, #24]
 8007dc2:	e00b      	b.n	8007ddc <SEGGER_SYSVIEW_Warn+0x84>
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	1c59      	adds	r1, r3, #1
 8007dcc:	61f9      	str	r1, [r7, #28]
 8007dce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007dd2:	b2d2      	uxtb	r2, r2
 8007dd4:	701a      	strb	r2, [r3, #0]
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	09db      	lsrs	r3, r3, #7
 8007dda:	61bb      	str	r3, [r7, #24]
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	2b7f      	cmp	r3, #127	@ 0x7f
 8007de0:	d8f0      	bhi.n	8007dc4 <SEGGER_SYSVIEW_Warn+0x6c>
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	61fa      	str	r2, [r7, #28]
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	b2d2      	uxtb	r2, r2
 8007dec:	701a      	strb	r2, [r3, #0]
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007df2:	221a      	movs	r2, #26
 8007df4:	68f9      	ldr	r1, [r7, #12]
 8007df6:	6938      	ldr	r0, [r7, #16]
 8007df8:	f7fe fb54 	bl	80064a4 <_SendPacket>
  RECORD_END();
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	f383 8811 	msr	BASEPRI, r3
}
 8007e02:	bf00      	nop
 8007e04:	3728      	adds	r7, #40	@ 0x28
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	2000c3d8 	.word	0x2000c3d8

08007e10 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007e10:	b580      	push	{r7, lr}
 8007e12:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007e14:	4b13      	ldr	r3, [pc, #76]	@ (8007e64 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e16:	7e1b      	ldrb	r3, [r3, #24]
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4a13      	ldr	r2, [pc, #76]	@ (8007e68 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	005b      	lsls	r3, r3, #1
 8007e20:	440b      	add	r3, r1
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	4413      	add	r3, r2
 8007e26:	336c      	adds	r3, #108	@ 0x6c
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8007e64 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e2c:	7e1b      	ldrb	r3, [r3, #24]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	490d      	ldr	r1, [pc, #52]	@ (8007e68 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007e32:	4603      	mov	r3, r0
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	4403      	add	r3, r0
 8007e38:	00db      	lsls	r3, r3, #3
 8007e3a:	440b      	add	r3, r1
 8007e3c:	3370      	adds	r3, #112	@ 0x70
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d00b      	beq.n	8007e5c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007e44:	4b07      	ldr	r3, [pc, #28]	@ (8007e64 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e46:	789b      	ldrb	r3, [r3, #2]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d107      	bne.n	8007e5c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007e4c:	4b05      	ldr	r3, [pc, #20]	@ (8007e64 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e4e:	2201      	movs	r2, #1
 8007e50:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007e52:	f7fe fa47 	bl	80062e4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007e56:	4b03      	ldr	r3, [pc, #12]	@ (8007e64 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007e5c:	4b01      	ldr	r3, [pc, #4]	@ (8007e64 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e5e:	781b      	ldrb	r3, [r3, #0]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	2000c3a8 	.word	0x2000c3a8
 8007e68:	2000bae8 	.word	0x2000bae8

08007e6c <memcmp>:
 8007e6c:	b510      	push	{r4, lr}
 8007e6e:	3901      	subs	r1, #1
 8007e70:	4402      	add	r2, r0
 8007e72:	4290      	cmp	r0, r2
 8007e74:	d101      	bne.n	8007e7a <memcmp+0xe>
 8007e76:	2000      	movs	r0, #0
 8007e78:	e005      	b.n	8007e86 <memcmp+0x1a>
 8007e7a:	7803      	ldrb	r3, [r0, #0]
 8007e7c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007e80:	42a3      	cmp	r3, r4
 8007e82:	d001      	beq.n	8007e88 <memcmp+0x1c>
 8007e84:	1b18      	subs	r0, r3, r4
 8007e86:	bd10      	pop	{r4, pc}
 8007e88:	3001      	adds	r0, #1
 8007e8a:	e7f2      	b.n	8007e72 <memcmp+0x6>

08007e8c <memset>:
 8007e8c:	4402      	add	r2, r0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d100      	bne.n	8007e96 <memset+0xa>
 8007e94:	4770      	bx	lr
 8007e96:	f803 1b01 	strb.w	r1, [r3], #1
 8007e9a:	e7f9      	b.n	8007e90 <memset+0x4>

08007e9c <__libc_init_array>:
 8007e9c:	b570      	push	{r4, r5, r6, lr}
 8007e9e:	4d0d      	ldr	r5, [pc, #52]	@ (8007ed4 <__libc_init_array+0x38>)
 8007ea0:	4c0d      	ldr	r4, [pc, #52]	@ (8007ed8 <__libc_init_array+0x3c>)
 8007ea2:	1b64      	subs	r4, r4, r5
 8007ea4:	10a4      	asrs	r4, r4, #2
 8007ea6:	2600      	movs	r6, #0
 8007ea8:	42a6      	cmp	r6, r4
 8007eaa:	d109      	bne.n	8007ec0 <__libc_init_array+0x24>
 8007eac:	4d0b      	ldr	r5, [pc, #44]	@ (8007edc <__libc_init_array+0x40>)
 8007eae:	4c0c      	ldr	r4, [pc, #48]	@ (8007ee0 <__libc_init_array+0x44>)
 8007eb0:	f000 f826 	bl	8007f00 <_init>
 8007eb4:	1b64      	subs	r4, r4, r5
 8007eb6:	10a4      	asrs	r4, r4, #2
 8007eb8:	2600      	movs	r6, #0
 8007eba:	42a6      	cmp	r6, r4
 8007ebc:	d105      	bne.n	8007eca <__libc_init_array+0x2e>
 8007ebe:	bd70      	pop	{r4, r5, r6, pc}
 8007ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec4:	4798      	blx	r3
 8007ec6:	3601      	adds	r6, #1
 8007ec8:	e7ee      	b.n	8007ea8 <__libc_init_array+0xc>
 8007eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ece:	4798      	blx	r3
 8007ed0:	3601      	adds	r6, #1
 8007ed2:	e7f2      	b.n	8007eba <__libc_init_array+0x1e>
 8007ed4:	080080b4 	.word	0x080080b4
 8007ed8:	080080b4 	.word	0x080080b4
 8007edc:	080080b4 	.word	0x080080b4
 8007ee0:	080080b8 	.word	0x080080b8

08007ee4 <memcpy>:
 8007ee4:	440a      	add	r2, r1
 8007ee6:	4291      	cmp	r1, r2
 8007ee8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007eec:	d100      	bne.n	8007ef0 <memcpy+0xc>
 8007eee:	4770      	bx	lr
 8007ef0:	b510      	push	{r4, lr}
 8007ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007efa:	4291      	cmp	r1, r2
 8007efc:	d1f9      	bne.n	8007ef2 <memcpy+0xe>
 8007efe:	bd10      	pop	{r4, pc}

08007f00 <_init>:
 8007f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f02:	bf00      	nop
 8007f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f06:	bc08      	pop	{r3}
 8007f08:	469e      	mov	lr, r3
 8007f0a:	4770      	bx	lr

08007f0c <_fini>:
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0e:	bf00      	nop
 8007f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f12:	bc08      	pop	{r3}
 8007f14:	469e      	mov	lr, r3
 8007f16:	4770      	bx	lr
