
011_Binary_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b08  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08007d08  08007d08  00008d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f10  08007f10  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  08007f10  08007f10  00008f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f18  08007f18  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f18  08007f18  00008f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f1c  08007f1c  00008f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007f20  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bcec  20000070  08007f90  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000bd5c  08007f90  00009d5c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155a1  00000000  00000000  0000909e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f4d  00000000  00000000  0001e63f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  00021590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef5  00000000  00000000  000228b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bd15  00000000  00000000  000237ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c62  00000000  00000000  0004f4c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d3fb  00000000  00000000  00068124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017551f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b64  00000000  00000000  00175564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0017b0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08007cf0 	.word	0x08007cf0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08007cf0 	.word	0x08007cf0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 fccc 	bl	8000f82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f861 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 f8eb 	bl	80007c8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 f8b9 	bl	8000768 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	sprintf(usr_msg,"Demo of Binary semaphore usage between 2 Tasks \r\n");
 80005f6:	4925      	ldr	r1, [pc, #148]	@ (800068c <main+0xac>)
 80005f8:	4825      	ldr	r0, [pc, #148]	@ (8000690 <main+0xb0>)
 80005fa:	f006 fac5 	bl	8006b88 <siprintf>
	printmsg(usr_msg);
 80005fe:	4824      	ldr	r0, [pc, #144]	@ (8000690 <main+0xb0>)
 8000600:	f000 fa6c 	bl	8000adc <printmsg>

	/* Before a semaphore is used it must be explicitly created.
	 * In this example a binary semaphore is created . */
	vSemaphoreCreateBinary( xWork );
 8000604:	2203      	movs	r2, #3
 8000606:	2100      	movs	r1, #0
 8000608:	2001      	movs	r0, #1
 800060a:	f003 fa0d 	bl	8003a28 <xQueueGenericCreate>
 800060e:	4603      	mov	r3, r0
 8000610:	4a20      	ldr	r2, [pc, #128]	@ (8000694 <main+0xb4>)
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <main+0xb4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d006      	beq.n	800062a <main+0x4a>
 800061c:	4b1d      	ldr	r3, [pc, #116]	@ (8000694 <main+0xb4>)
 800061e:	6818      	ldr	r0, [r3, #0]
 8000620:	2300      	movs	r3, #0
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	f003 fa77 	bl	8003b18 <xQueueGenericSend>

	/* The queue is created to hold a maximum of 1 Element. */
	xWorkQueue = xQueueCreate( 1, sizeof( unsigned int ) );
 800062a:	2200      	movs	r2, #0
 800062c:	2104      	movs	r1, #4
 800062e:	2001      	movs	r0, #1
 8000630:	f003 f9fa 	bl	8003a28 <xQueueGenericCreate>
 8000634:	4603      	mov	r3, r0
 8000636:	4a18      	ldr	r2, [pc, #96]	@ (8000698 <main+0xb8>)
 8000638:	6013      	str	r3, [r2, #0]

	/* Check the semaphore and queue was created successfully. */
	if( (xWork != NULL) && (xWorkQueue != NULL) )
 800063a:	4b16      	ldr	r3, [pc, #88]	@ (8000694 <main+0xb4>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d01b      	beq.n	800067a <main+0x9a>
 8000642:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <main+0xb8>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d017      	beq.n	800067a <main+0x9a>
	{

		/* Create the 'Manager' task.  This is the task that will be synchronized with the Employee task.  The Manager task is created with a high priority  */
		xTaskCreate( vManagerTask, "Manager", 500, NULL, 3, NULL );
 800064a:	2300      	movs	r3, #0
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	2303      	movs	r3, #3
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2300      	movs	r3, #0
 8000654:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000658:	4910      	ldr	r1, [pc, #64]	@ (800069c <main+0xbc>)
 800065a:	4811      	ldr	r0, [pc, #68]	@ (80006a0 <main+0xc0>)
 800065c:	f003 ffe1 	bl	8004622 <xTaskCreate>

		/* Create a employee task with less priority than manager */
		xTaskCreate( vEmployeeTask, "Employee", 500, NULL, 1, NULL );
 8000660:	2300      	movs	r3, #0
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	2301      	movs	r3, #1
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2300      	movs	r3, #0
 800066a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800066e:	490d      	ldr	r1, [pc, #52]	@ (80006a4 <main+0xc4>)
 8000670:	480d      	ldr	r0, [pc, #52]	@ (80006a8 <main+0xc8>)
 8000672:	f003 ffd6 	bl	8004622 <xTaskCreate>

		/* Start the scheduler so the created tasks start executing. */
		vTaskStartScheduler();
 8000676:	f004 f9a5 	bl	80049c4 <vTaskStartScheduler>
	}

	sprintf(usr_msg,"Queue/Sema create failed.. \r\n");
 800067a:	490c      	ldr	r1, [pc, #48]	@ (80006ac <main+0xcc>)
 800067c:	4804      	ldr	r0, [pc, #16]	@ (8000690 <main+0xb0>)
 800067e:	f006 fa83 	bl	8006b88 <siprintf>
	printmsg(usr_msg);
 8000682:	4803      	ldr	r0, [pc, #12]	@ (8000690 <main+0xb0>)
 8000684:	f000 fa2a 	bl	8000adc <printmsg>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <main+0xa8>
 800068c:	08007d08 	.word	0x08007d08
 8000690:	2000008c 	.word	0x2000008c
 8000694:	20000210 	.word	0x20000210
 8000698:	20000214 	.word	0x20000214
 800069c:	08007d3c 	.word	0x08007d3c
 80006a0:	080009d1 	.word	0x080009d1
 80006a4:	08007d44 	.word	0x08007d44
 80006a8:	08000a85 	.word	0x08000a85
 80006ac:	08007d50 	.word	0x08007d50

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	@ 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	2234      	movs	r2, #52	@ 0x34
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f006 fac5 	bl	8006c4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	4b22      	ldr	r3, [pc, #136]	@ (8000760 <SystemClock_Config+0xb0>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d8:	4a21      	ldr	r2, [pc, #132]	@ (8000760 <SystemClock_Config+0xb0>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <SystemClock_Config+0xb0>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <SystemClock_Config+0xb4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000764 <SystemClock_Config+0xb4>)
 80006f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b19      	ldr	r3, [pc, #100]	@ (8000764 <SystemClock_Config+0xb4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000708:	2302      	movs	r3, #2
 800070a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000710:	2310      	movs	r3, #16
 8000712:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000714:	2300      	movs	r3, #0
 8000716:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4618      	mov	r0, r3
 800071e:	f000 ff05 	bl	800152c <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000728:	f000 fa00 	bl	8000b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f99d 	bl	8001a88 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000754:	f000 f9ea 	bl	8000b2c <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	@ 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800076c:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_USART3_UART_Init+0x58>)
 800076e:	4a15      	ldr	r2, [pc, #84]	@ (80007c4 <MX_USART3_UART_Init+0x5c>)
 8000770:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000772:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <MX_USART3_UART_Init+0x58>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_USART3_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_USART3_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_USART3_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_USART3_UART_Init+0x58>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <MX_USART3_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_USART3_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <MX_USART3_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_USART3_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_USART3_UART_Init+0x58>)
 80007ac:	f002 fabe 	bl	8002d2c <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007b6:	f000 f9b9 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000188 	.word	0x20000188
 80007c4:	40004800 	.word	0x40004800

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	@ 0x30
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b77      	ldr	r3, [pc, #476]	@ (80009bc <MX_GPIO_Init+0x1f4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a76      	ldr	r2, [pc, #472]	@ (80009bc <MX_GPIO_Init+0x1f4>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b74      	ldr	r3, [pc, #464]	@ (80009bc <MX_GPIO_Init+0x1f4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	4b71      	ldr	r3, [pc, #452]	@ (80009bc <MX_GPIO_Init+0x1f4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a70      	ldr	r2, [pc, #448]	@ (80009bc <MX_GPIO_Init+0x1f4>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b6e      	ldr	r3, [pc, #440]	@ (80009bc <MX_GPIO_Init+0x1f4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b6b      	ldr	r3, [pc, #428]	@ (80009bc <MX_GPIO_Init+0x1f4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a6a      	ldr	r2, [pc, #424]	@ (80009bc <MX_GPIO_Init+0x1f4>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b68      	ldr	r3, [pc, #416]	@ (80009bc <MX_GPIO_Init+0x1f4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b65      	ldr	r3, [pc, #404]	@ (80009bc <MX_GPIO_Init+0x1f4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a64      	ldr	r2, [pc, #400]	@ (80009bc <MX_GPIO_Init+0x1f4>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b62      	ldr	r3, [pc, #392]	@ (80009bc <MX_GPIO_Init+0x1f4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083e:	4b5f      	ldr	r3, [pc, #380]	@ (80009bc <MX_GPIO_Init+0x1f4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a5e      	ldr	r2, [pc, #376]	@ (80009bc <MX_GPIO_Init+0x1f4>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b5c      	ldr	r3, [pc, #368]	@ (80009bc <MX_GPIO_Init+0x1f4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000856:	4b59      	ldr	r3, [pc, #356]	@ (80009bc <MX_GPIO_Init+0x1f4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a58      	ldr	r2, [pc, #352]	@ (80009bc <MX_GPIO_Init+0x1f4>)
 800085c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b56      	ldr	r3, [pc, #344]	@ (80009bc <MX_GPIO_Init+0x1f4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000874:	4852      	ldr	r0, [pc, #328]	@ (80009c0 <MX_GPIO_Init+0x1f8>)
 8000876:	f000 fe3f 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2140      	movs	r1, #64	@ 0x40
 800087e:	4851      	ldr	r0, [pc, #324]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 8000880:	f000 fe3a 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000884:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	484b      	ldr	r0, [pc, #300]	@ (80009c8 <MX_GPIO_Init+0x200>)
 800089c:	f000 fc80 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008a0:	2332      	movs	r3, #50	@ 0x32
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b0:	230b      	movs	r3, #11
 80008b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4843      	ldr	r0, [pc, #268]	@ (80009c8 <MX_GPIO_Init+0x200>)
 80008bc:	f000 fc70 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008c0:	2386      	movs	r3, #134	@ 0x86
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008d0:	230b      	movs	r3, #11
 80008d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	483c      	ldr	r0, [pc, #240]	@ (80009cc <MX_GPIO_Init+0x204>)
 80008dc:	f000 fc60 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008e0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4831      	ldr	r0, [pc, #196]	@ (80009c0 <MX_GPIO_Init+0x1f8>)
 80008fa:	f000 fc51 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000910:	230b      	movs	r3, #11
 8000912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4829      	ldr	r0, [pc, #164]	@ (80009c0 <MX_GPIO_Init+0x1f8>)
 800091c:	f000 fc40 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000920:	2340      	movs	r3, #64	@ 0x40
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4823      	ldr	r0, [pc, #140]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 8000938:	f000 fc32 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800093c:	2380      	movs	r3, #128	@ 0x80
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	481d      	ldr	r0, [pc, #116]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 8000950:	f000 fc26 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000954:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000966:	230a      	movs	r3, #10
 8000968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4816      	ldr	r0, [pc, #88]	@ (80009cc <MX_GPIO_Init+0x204>)
 8000972:	f000 fc15 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000976:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4810      	ldr	r0, [pc, #64]	@ (80009cc <MX_GPIO_Init+0x204>)
 800098c:	f000 fc08 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000990:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a2:	230b      	movs	r3, #11
 80009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 80009ae:	f000 fbf7 	bl	80011a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b2:	bf00      	nop
 80009b4:	3730      	adds	r7, #48	@ 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020400 	.word	0x40020400
 80009c4:	40021800 	.word	0x40021800
 80009c8:	40020800 	.word	0x40020800
 80009cc:	40020000 	.word	0x40020000

080009d0 <vManagerTask>:

/* USER CODE BEGIN 4 */
void vManagerTask( void *pvParameters )
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	 portBASE_TYPE xStatus;

    /* The semaphore is created in the 'empty' state, meaning the semaphore must
	 first be given using the xSemaphoreGive() API function before it
	 can subsequently be taken (obtained) */
    xSemaphoreGive( xWork);
 80009d8:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <vManagerTask+0x6c>)
 80009da:	6818      	ldr	r0, [r3, #0]
 80009dc:	2300      	movs	r3, #0
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	f003 f899 	bl	8003b18 <xQueueGenericSend>

    for( ;; )
    {
        /* get a work ticket id(some random number) */
        xWorkTicketId = ( rand() & 0x1FF );
 80009e6:	f005 ffcf 	bl	8006988 <rand>
 80009ea:	4603      	mov	r3, r0
 80009ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009f0:	60bb      	str	r3, [r7, #8]

		/* Sends work ticket id to the work queue */
		xStatus = xQueueSend( xWorkQueue, &xWorkTicketId , portMAX_DELAY ); //Post an item on back of the queue
 80009f2:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <vManagerTask+0x70>)
 80009f4:	6818      	ldr	r0, [r3, #0]
 80009f6:	f107 0108 	add.w	r1, r7, #8
 80009fa:	2300      	movs	r3, #0
 80009fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000a00:	f003 f88a 	bl	8003b18 <xQueueGenericSend>
 8000a04:	60f8      	str	r0, [r7, #12]

		if( xStatus != pdPASS )
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d007      	beq.n	8000a1c <vManagerTask+0x4c>
		{
			sprintf(usr_msg,"Could not send to the queue.\r\n");
 8000a0c:	490d      	ldr	r1, [pc, #52]	@ (8000a44 <vManagerTask+0x74>)
 8000a0e:	480e      	ldr	r0, [pc, #56]	@ (8000a48 <vManagerTask+0x78>)
 8000a10:	f006 f8ba 	bl	8006b88 <siprintf>
		    printmsg(usr_msg);
 8000a14:	480c      	ldr	r0, [pc, #48]	@ (8000a48 <vManagerTask+0x78>)
 8000a16:	f000 f861 	bl	8000adc <printmsg>
 8000a1a:	e7e4      	b.n	80009e6 <vManagerTask+0x16>

		}else
		{
			/* Manager notifying the employee by "Giving" semaphore */
			xSemaphoreGive( xWork);
 8000a1c:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <vManagerTask+0x6c>)
 8000a1e:	6818      	ldr	r0, [r3, #0]
 8000a20:	2300      	movs	r3, #0
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	f003 f877 	bl	8003b18 <xQueueGenericSend>
			/* after assigning the work , just yield the processor because nothing to do */
			taskYIELD();
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <vManagerTask+0x7c>)
 8000a2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	f3bf 8f4f 	dsb	sy
 8000a36:	f3bf 8f6f 	isb	sy
        xWorkTicketId = ( rand() & 0x1FF );
 8000a3a:	e7d4      	b.n	80009e6 <vManagerTask+0x16>
 8000a3c:	20000210 	.word	0x20000210
 8000a40:	20000214 	.word	0x20000214
 8000a44:	08007d70 	.word	0x08007d70
 8000a48:	2000008c 	.word	0x2000008c
 8000a4c:	e000ed04 	.word	0xe000ed04

08000a50 <EmployeeDoWork>:
		}
    }
}

void EmployeeDoWork(unsigned char TicketId)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
	/* implement the work according to TickedID */
	sprintf(usr_msg,"Employee task : Working on Ticked id : %d\r\n",TicketId);
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4907      	ldr	r1, [pc, #28]	@ (8000a7c <EmployeeDoWork+0x2c>)
 8000a60:	4807      	ldr	r0, [pc, #28]	@ (8000a80 <EmployeeDoWork+0x30>)
 8000a62:	f006 f891 	bl	8006b88 <siprintf>
	printmsg(usr_msg);
 8000a66:	4806      	ldr	r0, [pc, #24]	@ (8000a80 <EmployeeDoWork+0x30>)
 8000a68:	f000 f838 	bl	8000adc <printmsg>
	vTaskDelay(TicketId);
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f003 ff26 	bl	80048c0 <vTaskDelay>
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	08007d90 	.word	0x08007d90
 8000a80:	2000008c 	.word	0x2000008c

08000a84 <vEmployeeTask>:

static void vEmployeeTask( void *pvParameters )
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xStatus;
    /* As per most tasks, this task is implemented within an infinite loop. */
    for( ;; )
    {
		/* First Employee tries to take the semaphore, if it is available that means there is a task assigned by manager, otherwise employee task will be blocked */
		xSemaphoreTake( xWork, 0 );
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <vEmployeeTask+0x48>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f003 fa4e 	bl	8003f34 <xQueueSemaphoreTake>

		/* get the ticket id from the work queue */
		xStatus = xQueueReceive( xWorkQueue, &xWorkTicketId, 0 );
 8000a98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad0 <vEmployeeTask+0x4c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f107 010b 	add.w	r1, r7, #11
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f003 f95e 	bl	8003d64 <xQueueReceive>
 8000aa8:	60f8      	str	r0, [r7, #12]

		if( xStatus == pdPASS )
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d104      	bne.n	8000aba <vEmployeeTask+0x36>
		{
		  /* employee may decode the xWorkTicketId in this function to do the work*/
			EmployeeDoWork(xWorkTicketId);
 8000ab0:	7afb      	ldrb	r3, [r7, #11]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff ffcc 	bl	8000a50 <EmployeeDoWork>
 8000ab8:	e7e8      	b.n	8000a8c <vEmployeeTask+0x8>
		}
		else
		{
			/* We did not receive anything from the queue.  This must be an error as this task should only run when the manager assigns at least one work. */
			sprintf(usr_msg,"Employee task : Queue is empty , nothing to do.\r\n");
 8000aba:	4906      	ldr	r1, [pc, #24]	@ (8000ad4 <vEmployeeTask+0x50>)
 8000abc:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <vEmployeeTask+0x54>)
 8000abe:	f006 f863 	bl	8006b88 <siprintf>
		    printmsg(usr_msg);
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <vEmployeeTask+0x54>)
 8000ac4:	f000 f80a 	bl	8000adc <printmsg>
		xSemaphoreTake( xWork, 0 );
 8000ac8:	e7e0      	b.n	8000a8c <vEmployeeTask+0x8>
 8000aca:	bf00      	nop
 8000acc:	20000210 	.word	0x20000210
 8000ad0:	20000214 	.word	0x20000214
 8000ad4:	08007dbc 	.word	0x08007dbc
 8000ad8:	2000008c 	.word	0x2000008c

08000adc <printmsg>:
    }
}


void printmsg(char *msg)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff fbab 	bl	8000240 <strlen>
 8000aea:	4603      	mov	r3, r0
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	4803      	ldr	r0, [pc, #12]	@ (8000b04 <printmsg+0x28>)
 8000af6:	f002 f967 	bl	8002dc8 <HAL_UART_Transmit>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000188 	.word	0x20000188

08000b08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a04      	ldr	r2, [pc, #16]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d101      	bne.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b1a:	f000 fa3f 	bl	8000f9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40001000 	.word	0x40001000

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <Error_Handler+0x8>

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <HAL_MspInit+0x44>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b42:	4a0e      	ldr	r2, [pc, #56]	@ (8000b7c <HAL_MspInit+0x44>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <HAL_MspInit+0x44>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <HAL_MspInit+0x44>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5a:	4a08      	ldr	r2, [pc, #32]	@ (8000b7c <HAL_MspInit+0x44>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_MspInit+0x44>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800

08000b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b0ae      	sub	sp, #184	@ 0xb8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2290      	movs	r2, #144	@ 0x90
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f006 f854 	bl	8006c4e <memset>
  if(huart->Instance==USART3)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a22      	ldr	r2, [pc, #136]	@ (8000c34 <HAL_UART_MspInit+0xb4>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d13c      	bne.n	8000c2a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bb4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 f9b8 	bl	8001f34 <HAL_RCCEx_PeriphCLKConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bca:	f7ff ffaf 	bl	8000b2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bce:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <HAL_UART_MspInit+0xb8>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	4a19      	ldr	r2, [pc, #100]	@ (8000c38 <HAL_UART_MspInit+0xb8>)
 8000bd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bda:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <HAL_UART_MspInit+0xb8>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be6:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <HAL_UART_MspInit+0xb8>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	4a13      	ldr	r2, [pc, #76]	@ (8000c38 <HAL_UART_MspInit+0xb8>)
 8000bec:	f043 0308 	orr.w	r3, r3, #8
 8000bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <HAL_UART_MspInit+0xb8>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bfe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c18:	2307      	movs	r3, #7
 8000c1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <HAL_UART_MspInit+0xbc>)
 8000c26:	f000 fabb 	bl	80011a0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000c2a:	bf00      	nop
 8000c2c:	37b8      	adds	r7, #184	@ 0xb8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40004800 	.word	0x40004800
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020c00 	.word	0x40020c00

08000c40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	@ 0x38
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c50:	4b33      	ldr	r3, [pc, #204]	@ (8000d20 <HAL_InitTick+0xe0>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c54:	4a32      	ldr	r2, [pc, #200]	@ (8000d20 <HAL_InitTick+0xe0>)
 8000c56:	f043 0310 	orr.w	r3, r3, #16
 8000c5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5c:	4b30      	ldr	r3, [pc, #192]	@ (8000d20 <HAL_InitTick+0xe0>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c60:	f003 0310 	and.w	r3, r3, #16
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c68:	f107 0210 	add.w	r2, r7, #16
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4611      	mov	r1, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 f92c 	bl	8001ed0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c78:	6a3b      	ldr	r3, [r7, #32]
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d103      	bne.n	8000c8a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c82:	f001 f8fd 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8000c86:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c88:	e004      	b.n	8000c94 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c8a:	f001 f8f9 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c96:	4a23      	ldr	r2, [pc, #140]	@ (8000d24 <HAL_InitTick+0xe4>)
 8000c98:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9c:	0c9b      	lsrs	r3, r3, #18
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	@ (8000d28 <HAL_InitTick+0xe8>)
 8000ca4:	4a21      	ldr	r2, [pc, #132]	@ (8000d2c <HAL_InitTick+0xec>)
 8000ca6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d28 <HAL_InitTick+0xe8>)
 8000caa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d28 <HAL_InitTick+0xe8>)
 8000cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cb4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <HAL_InitTick+0xe8>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <HAL_InitTick+0xe8>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <HAL_InitTick+0xe8>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cc8:	4817      	ldr	r0, [pc, #92]	@ (8000d28 <HAL_InitTick+0xe8>)
 8000cca:	f001 fd5b 	bl	8002784 <HAL_TIM_Base_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000cd4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d11b      	bne.n	8000d14 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cdc:	4812      	ldr	r0, [pc, #72]	@ (8000d28 <HAL_InitTick+0xe8>)
 8000cde:	f001 fdb3 	bl	8002848 <HAL_TIM_Base_Start_IT>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ce8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d111      	bne.n	8000d14 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cf0:	2036      	movs	r0, #54	@ 0x36
 8000cf2:	f000 fa47 	bl	8001184 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d808      	bhi.n	8000d0e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	2036      	movs	r0, #54	@ 0x36
 8000d02:	f000 fa23 	bl	800114c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d06:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <HAL_InitTick+0xf0>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	e002      	b.n	8000d14 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3738      	adds	r7, #56	@ 0x38
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40023800 	.word	0x40023800
 8000d24:	431bde83 	.word	0x431bde83
 8000d28:	20000218 	.word	0x20000218
 8000d2c:	40001000 	.word	0x40001000
 8000d30:	20000004 	.word	0x20000004

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <NMI_Handler+0x4>

08000d3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d70:	4802      	ldr	r0, [pc, #8]	@ (8000d7c <TIM6_DAC_IRQHandler+0x10>)
 8000d72:	f001 fde1 	bl	8002938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000218 	.word	0x20000218

08000d80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return 1;
 8000d84:	2301      	movs	r3, #1
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <_kill>:

int _kill(int pid, int sig)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d9a:	f005 ffa7 	bl	8006cec <__errno>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2216      	movs	r2, #22
 8000da2:	601a      	str	r2, [r3, #0]
  return -1;
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <_exit>:

void _exit (int status)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ffe7 	bl	8000d90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dc2:	bf00      	nop
 8000dc4:	e7fd      	b.n	8000dc2 <_exit+0x12>

08000dc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	60f8      	str	r0, [r7, #12]
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	e00a      	b.n	8000dee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dd8:	f3af 8000 	nop.w
 8000ddc:	4601      	mov	r1, r0
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	1c5a      	adds	r2, r3, #1
 8000de2:	60ba      	str	r2, [r7, #8]
 8000de4:	b2ca      	uxtb	r2, r1
 8000de6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	3301      	adds	r3, #1
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	dbf0      	blt.n	8000dd8 <_read+0x12>
  }

  return len;
 8000df6:	687b      	ldr	r3, [r7, #4]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	e009      	b.n	8000e26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	1c5a      	adds	r2, r3, #1
 8000e16:	60ba      	str	r2, [r7, #8]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	3301      	adds	r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	dbf1      	blt.n	8000e12 <_write+0x12>
  }
  return len;
 8000e2e:	687b      	ldr	r3, [r7, #4]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <_close>:

int _close(int file)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e60:	605a      	str	r2, [r3, #4]
  return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_isatty>:

int _isatty(int file)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e78:	2301      	movs	r3, #1
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b085      	sub	sp, #20
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea8:	4a14      	ldr	r2, [pc, #80]	@ (8000efc <_sbrk+0x5c>)
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <_sbrk+0x60>)
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb4:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d102      	bne.n	8000ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <_sbrk+0x64>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	@ (8000f08 <_sbrk+0x68>)
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec2:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d207      	bcs.n	8000ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed0:	f005 ff0c 	bl	8006cec <__errno>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	e009      	b.n	8000ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a05      	ldr	r2, [pc, #20]	@ (8000f04 <_sbrk+0x64>)
 8000ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20080000 	.word	0x20080000
 8000f00:	00000400 	.word	0x00000400
 8000f04:	20000264 	.word	0x20000264
 8000f08:	2000bd60 	.word	0x2000bd60

08000f0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <SystemInit+0x20>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <SystemInit+0x20>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f34:	f7ff ffea 	bl	8000f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f38:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f3a:	490d      	ldr	r1, [pc, #52]	@ (8000f70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f50:	4c0a      	ldr	r4, [pc, #40]	@ (8000f7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f005 fecb 	bl	8006cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f62:	f7ff fb3d 	bl	80005e0 <main>
  bx  lr    
 8000f66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f68:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f74:	08007f20 	.word	0x08007f20
  ldr r2, =_sbss
 8000f78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f7c:	2000bd5c 	.word	0x2000bd5c

08000f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC_IRQHandler>

08000f82 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f86:	2003      	movs	r0, #3
 8000f88:	f000 f8d5 	bl	8001136 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8c:	200f      	movs	r0, #15
 8000f8e:	f7ff fe57 	bl	8000c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f92:	f7ff fdd1 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_IncTick+0x20>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_IncTick+0x24>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <HAL_IncTick+0x24>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000268 	.word	0x20000268

08000fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	@ (8000fd8 <HAL_GetTick+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000268 	.word	0x20000268

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <__NVIC_SetPriorityGrouping+0x40>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	4313      	orrs	r3, r2
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	@ (800101c <__NVIC_SetPriorityGrouping+0x40>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00
 8001020:	05fa0000 	.word	0x05fa0000

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	@ (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	db0b      	blt.n	800106a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f003 021f 	and.w	r2, r3, #31
 8001058:	4907      	ldr	r1, [pc, #28]	@ (8001078 <__NVIC_EnableIRQ+0x38>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	2001      	movs	r0, #1
 8001062:	fa00 f202 	lsl.w	r2, r0, r2
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	@ (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	@ (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	@ 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	@ 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ff4c 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800115e:	f7ff ff61 	bl	8001024 <__NVIC_GetPriorityGrouping>
 8001162:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	68b9      	ldr	r1, [r7, #8]
 8001168:	6978      	ldr	r0, [r7, #20]
 800116a:	f7ff ffb1 	bl	80010d0 <NVIC_EncodePriority>
 800116e:	4602      	mov	r2, r0
 8001170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff80 	bl	800107c <__NVIC_SetPriority>
}
 800117c:	bf00      	nop
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff54 	bl	8001040 <__NVIC_EnableIRQ>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b089      	sub	sp, #36	@ 0x24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
 80011be:	e175      	b.n	80014ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80011c0:	2201      	movs	r2, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	429a      	cmp	r2, r3
 80011da:	f040 8164 	bne.w	80014a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d005      	beq.n	80011f6 <HAL_GPIO_Init+0x56>
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d130      	bne.n	8001258 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	2203      	movs	r2, #3
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	68da      	ldr	r2, [r3, #12]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800122c:	2201      	movs	r2, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	091b      	lsrs	r3, r3, #4
 8001242:	f003 0201 	and.w	r2, r3, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b03      	cmp	r3, #3
 8001262:	d017      	beq.n	8001294 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d123      	bne.n	80012e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	08da      	lsrs	r2, r3, #3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3208      	adds	r2, #8
 80012a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	f003 0307 	and.w	r3, r3, #7
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	220f      	movs	r2, #15
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	691a      	ldr	r2, [r3, #16]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	08da      	lsrs	r2, r3, #3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3208      	adds	r2, #8
 80012e2:	69b9      	ldr	r1, [r7, #24]
 80012e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0203 	and.w	r2, r3, #3
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80be 	beq.w	80014a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	4b66      	ldr	r3, [pc, #408]	@ (80014c4 <HAL_GPIO_Init+0x324>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	4a65      	ldr	r2, [pc, #404]	@ (80014c4 <HAL_GPIO_Init+0x324>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001334:	6453      	str	r3, [r2, #68]	@ 0x44
 8001336:	4b63      	ldr	r3, [pc, #396]	@ (80014c4 <HAL_GPIO_Init+0x324>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001342:	4a61      	ldr	r2, [pc, #388]	@ (80014c8 <HAL_GPIO_Init+0x328>)
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	3302      	adds	r3, #2
 800134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	220f      	movs	r2, #15
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a58      	ldr	r2, [pc, #352]	@ (80014cc <HAL_GPIO_Init+0x32c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d037      	beq.n	80013de <HAL_GPIO_Init+0x23e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a57      	ldr	r2, [pc, #348]	@ (80014d0 <HAL_GPIO_Init+0x330>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d031      	beq.n	80013da <HAL_GPIO_Init+0x23a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a56      	ldr	r2, [pc, #344]	@ (80014d4 <HAL_GPIO_Init+0x334>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d02b      	beq.n	80013d6 <HAL_GPIO_Init+0x236>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a55      	ldr	r2, [pc, #340]	@ (80014d8 <HAL_GPIO_Init+0x338>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d025      	beq.n	80013d2 <HAL_GPIO_Init+0x232>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a54      	ldr	r2, [pc, #336]	@ (80014dc <HAL_GPIO_Init+0x33c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d01f      	beq.n	80013ce <HAL_GPIO_Init+0x22e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a53      	ldr	r2, [pc, #332]	@ (80014e0 <HAL_GPIO_Init+0x340>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d019      	beq.n	80013ca <HAL_GPIO_Init+0x22a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a52      	ldr	r2, [pc, #328]	@ (80014e4 <HAL_GPIO_Init+0x344>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d013      	beq.n	80013c6 <HAL_GPIO_Init+0x226>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a51      	ldr	r2, [pc, #324]	@ (80014e8 <HAL_GPIO_Init+0x348>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d00d      	beq.n	80013c2 <HAL_GPIO_Init+0x222>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a50      	ldr	r2, [pc, #320]	@ (80014ec <HAL_GPIO_Init+0x34c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d007      	beq.n	80013be <HAL_GPIO_Init+0x21e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4f      	ldr	r2, [pc, #316]	@ (80014f0 <HAL_GPIO_Init+0x350>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d101      	bne.n	80013ba <HAL_GPIO_Init+0x21a>
 80013b6:	2309      	movs	r3, #9
 80013b8:	e012      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013ba:	230a      	movs	r3, #10
 80013bc:	e010      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013be:	2308      	movs	r3, #8
 80013c0:	e00e      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013c2:	2307      	movs	r3, #7
 80013c4:	e00c      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013c6:	2306      	movs	r3, #6
 80013c8:	e00a      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013ca:	2305      	movs	r3, #5
 80013cc:	e008      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013ce:	2304      	movs	r3, #4
 80013d0:	e006      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013d2:	2303      	movs	r3, #3
 80013d4:	e004      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013de:	2300      	movs	r3, #0
 80013e0:	69fa      	ldr	r2, [r7, #28]
 80013e2:	f002 0203 	and.w	r2, r2, #3
 80013e6:	0092      	lsls	r2, r2, #2
 80013e8:	4093      	lsls	r3, r2
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013f0:	4935      	ldr	r1, [pc, #212]	@ (80014c8 <HAL_GPIO_Init+0x328>)
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	3302      	adds	r3, #2
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fe:	4b3d      	ldr	r3, [pc, #244]	@ (80014f4 <HAL_GPIO_Init+0x354>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001422:	4a34      	ldr	r2, [pc, #208]	@ (80014f4 <HAL_GPIO_Init+0x354>)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001428:	4b32      	ldr	r3, [pc, #200]	@ (80014f4 <HAL_GPIO_Init+0x354>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800144c:	4a29      	ldr	r2, [pc, #164]	@ (80014f4 <HAL_GPIO_Init+0x354>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001452:	4b28      	ldr	r3, [pc, #160]	@ (80014f4 <HAL_GPIO_Init+0x354>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001476:	4a1f      	ldr	r2, [pc, #124]	@ (80014f4 <HAL_GPIO_Init+0x354>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800147c:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <HAL_GPIO_Init+0x354>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014a0:	4a14      	ldr	r2, [pc, #80]	@ (80014f4 <HAL_GPIO_Init+0x354>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3301      	adds	r3, #1
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	2b0f      	cmp	r3, #15
 80014b0:	f67f ae86 	bls.w	80011c0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3724      	adds	r7, #36	@ 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40013800 	.word	0x40013800
 80014cc:	40020000 	.word	0x40020000
 80014d0:	40020400 	.word	0x40020400
 80014d4:	40020800 	.word	0x40020800
 80014d8:	40020c00 	.word	0x40020c00
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40021400 	.word	0x40021400
 80014e4:	40021800 	.word	0x40021800
 80014e8:	40021c00 	.word	0x40021c00
 80014ec:	40022000 	.word	0x40022000
 80014f0:	40022400 	.word	0x40022400
 80014f4:	40013c00 	.word	0x40013c00

080014f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
 8001504:	4613      	mov	r3, r2
 8001506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001508:	787b      	ldrb	r3, [r7, #1]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150e:	887a      	ldrh	r2, [r7, #2]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001514:	e003      	b.n	800151e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001516:	887b      	ldrh	r3, [r7, #2]
 8001518:	041a      	lsls	r2, r3, #16
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	619a      	str	r2, [r3, #24]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e29b      	b.n	8001a7a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 8087 	beq.w	800165e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001550:	4b96      	ldr	r3, [pc, #600]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 030c 	and.w	r3, r3, #12
 8001558:	2b04      	cmp	r3, #4
 800155a:	d00c      	beq.n	8001576 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800155c:	4b93      	ldr	r3, [pc, #588]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b08      	cmp	r3, #8
 8001566:	d112      	bne.n	800158e <HAL_RCC_OscConfig+0x62>
 8001568:	4b90      	ldr	r3, [pc, #576]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001570:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001574:	d10b      	bne.n	800158e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001576:	4b8d      	ldr	r3, [pc, #564]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d06c      	beq.n	800165c <HAL_RCC_OscConfig+0x130>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d168      	bne.n	800165c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e275      	b.n	8001a7a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001596:	d106      	bne.n	80015a6 <HAL_RCC_OscConfig+0x7a>
 8001598:	4b84      	ldr	r3, [pc, #528]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a83      	ldr	r2, [pc, #524]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 800159e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	e02e      	b.n	8001604 <HAL_RCC_OscConfig+0xd8>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x9c>
 80015ae:	4b7f      	ldr	r3, [pc, #508]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a7e      	ldr	r2, [pc, #504]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 80015b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b7c      	ldr	r3, [pc, #496]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a7b      	ldr	r2, [pc, #492]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 80015c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e01d      	b.n	8001604 <HAL_RCC_OscConfig+0xd8>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015d0:	d10c      	bne.n	80015ec <HAL_RCC_OscConfig+0xc0>
 80015d2:	4b76      	ldr	r3, [pc, #472]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a75      	ldr	r2, [pc, #468]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 80015d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b73      	ldr	r3, [pc, #460]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a72      	ldr	r2, [pc, #456]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e00b      	b.n	8001604 <HAL_RCC_OscConfig+0xd8>
 80015ec:	4b6f      	ldr	r3, [pc, #444]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a6e      	ldr	r2, [pc, #440]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 80015f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b6c      	ldr	r3, [pc, #432]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a6b      	ldr	r2, [pc, #428]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 80015fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d013      	beq.n	8001634 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fcda 	bl	8000fc4 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fcd6 	bl	8000fc4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	@ 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e229      	b.n	8001a7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	4b61      	ldr	r3, [pc, #388]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0xe8>
 8001632:	e014      	b.n	800165e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fcc6 	bl	8000fc4 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fcc2 	bl	8000fc4 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	@ 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e215      	b.n	8001a7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164e:	4b57      	ldr	r3, [pc, #348]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x110>
 800165a:	e000      	b.n	800165e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d069      	beq.n	800173e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800166a:	4b50      	ldr	r3, [pc, #320]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00b      	beq.n	800168e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001676:	4b4d      	ldr	r3, [pc, #308]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b08      	cmp	r3, #8
 8001680:	d11c      	bne.n	80016bc <HAL_RCC_OscConfig+0x190>
 8001682:	4b4a      	ldr	r3, [pc, #296]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d116      	bne.n	80016bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168e:	4b47      	ldr	r3, [pc, #284]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d005      	beq.n	80016a6 <HAL_RCC_OscConfig+0x17a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d001      	beq.n	80016a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e1e9      	b.n	8001a7a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a6:	4b41      	ldr	r3, [pc, #260]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	493d      	ldr	r1, [pc, #244]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ba:	e040      	b.n	800173e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d023      	beq.n	800170c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c4:	4b39      	ldr	r3, [pc, #228]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a38      	ldr	r2, [pc, #224]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fc78 	bl	8000fc4 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d8:	f7ff fc74 	bl	8000fc4 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1c7      	b.n	8001a7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ea:	4b30      	ldr	r3, [pc, #192]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f6:	4b2d      	ldr	r3, [pc, #180]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4929      	ldr	r1, [pc, #164]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
 800170a:	e018      	b.n	800173e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170c:	4b27      	ldr	r3, [pc, #156]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a26      	ldr	r2, [pc, #152]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 8001712:	f023 0301 	bic.w	r3, r3, #1
 8001716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7ff fc54 	bl	8000fc4 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001720:	f7ff fc50 	bl	8000fc4 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e1a3      	b.n	8001a7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001732:	4b1e      	ldr	r3, [pc, #120]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d038      	beq.n	80017bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d019      	beq.n	8001786 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001752:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 8001754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001756:	4a15      	ldr	r2, [pc, #84]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175e:	f7ff fc31 	bl	8000fc4 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001766:	f7ff fc2d 	bl	8000fc4 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e180      	b.n	8001a7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001778:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 800177a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x23a>
 8001784:	e01a      	b.n	80017bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 8001788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800178a:	4a08      	ldr	r2, [pc, #32]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001792:	f7ff fc17 	bl	8000fc4 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001798:	e00a      	b.n	80017b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179a:	f7ff fc13 	bl	8000fc4 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d903      	bls.n	80017b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e166      	b.n	8001a7a <HAL_RCC_OscConfig+0x54e>
 80017ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b0:	4b92      	ldr	r3, [pc, #584]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 80017b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1ee      	bne.n	800179a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 80a4 	beq.w	8001912 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ca:	4b8c      	ldr	r3, [pc, #560]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10d      	bne.n	80017f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d6:	4b89      	ldr	r3, [pc, #548]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	4a88      	ldr	r2, [pc, #544]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e2:	4b86      	ldr	r3, [pc, #536]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ee:	2301      	movs	r3, #1
 80017f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f2:	4b83      	ldr	r3, [pc, #524]	@ (8001a00 <HAL_RCC_OscConfig+0x4d4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d118      	bne.n	8001830 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017fe:	4b80      	ldr	r3, [pc, #512]	@ (8001a00 <HAL_RCC_OscConfig+0x4d4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a7f      	ldr	r2, [pc, #508]	@ (8001a00 <HAL_RCC_OscConfig+0x4d4>)
 8001804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800180a:	f7ff fbdb 	bl	8000fc4 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001812:	f7ff fbd7 	bl	8000fc4 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b64      	cmp	r3, #100	@ 0x64
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e12a      	b.n	8001a7a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001824:	4b76      	ldr	r3, [pc, #472]	@ (8001a00 <HAL_RCC_OscConfig+0x4d4>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d106      	bne.n	8001846 <HAL_RCC_OscConfig+0x31a>
 8001838:	4b70      	ldr	r3, [pc, #448]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 800183a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800183c:	4a6f      	ldr	r2, [pc, #444]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6713      	str	r3, [r2, #112]	@ 0x70
 8001844:	e02d      	b.n	80018a2 <HAL_RCC_OscConfig+0x376>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10c      	bne.n	8001868 <HAL_RCC_OscConfig+0x33c>
 800184e:	4b6b      	ldr	r3, [pc, #428]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 8001850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001852:	4a6a      	ldr	r2, [pc, #424]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	6713      	str	r3, [r2, #112]	@ 0x70
 800185a:	4b68      	ldr	r3, [pc, #416]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 800185c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800185e:	4a67      	ldr	r2, [pc, #412]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 8001860:	f023 0304 	bic.w	r3, r3, #4
 8001864:	6713      	str	r3, [r2, #112]	@ 0x70
 8001866:	e01c      	b.n	80018a2 <HAL_RCC_OscConfig+0x376>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b05      	cmp	r3, #5
 800186e:	d10c      	bne.n	800188a <HAL_RCC_OscConfig+0x35e>
 8001870:	4b62      	ldr	r3, [pc, #392]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 8001872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001874:	4a61      	ldr	r2, [pc, #388]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	6713      	str	r3, [r2, #112]	@ 0x70
 800187c:	4b5f      	ldr	r3, [pc, #380]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001880:	4a5e      	ldr	r2, [pc, #376]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6713      	str	r3, [r2, #112]	@ 0x70
 8001888:	e00b      	b.n	80018a2 <HAL_RCC_OscConfig+0x376>
 800188a:	4b5c      	ldr	r3, [pc, #368]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 800188c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800188e:	4a5b      	ldr	r2, [pc, #364]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	6713      	str	r3, [r2, #112]	@ 0x70
 8001896:	4b59      	ldr	r3, [pc, #356]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800189a:	4a58      	ldr	r2, [pc, #352]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 800189c:	f023 0304 	bic.w	r3, r3, #4
 80018a0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d015      	beq.n	80018d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018aa:	f7ff fb8b 	bl	8000fc4 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b0:	e00a      	b.n	80018c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b2:	f7ff fb87 	bl	8000fc4 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e0d8      	b.n	8001a7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c8:	4b4c      	ldr	r3, [pc, #304]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0ee      	beq.n	80018b2 <HAL_RCC_OscConfig+0x386>
 80018d4:	e014      	b.n	8001900 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d6:	f7ff fb75 	bl	8000fc4 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff fb71 	bl	8000fc4 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e0c2      	b.n	8001a7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f4:	4b41      	ldr	r3, [pc, #260]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1ee      	bne.n	80018de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001900:	7dfb      	ldrb	r3, [r7, #23]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d105      	bne.n	8001912 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001906:	4b3d      	ldr	r3, [pc, #244]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	4a3c      	ldr	r2, [pc, #240]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 800190c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001910:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80ae 	beq.w	8001a78 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800191c:	4b37      	ldr	r3, [pc, #220]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b08      	cmp	r3, #8
 8001926:	d06d      	beq.n	8001a04 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d14b      	bne.n	80019c8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001930:	4b32      	ldr	r3, [pc, #200]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a31      	ldr	r2, [pc, #196]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 8001936:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800193a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff fb42 	bl	8000fc4 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff fb3e 	bl	8000fc4 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e091      	b.n	8001a7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001956:	4b29      	ldr	r3, [pc, #164]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69da      	ldr	r2, [r3, #28]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001970:	019b      	lsls	r3, r3, #6
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001978:	085b      	lsrs	r3, r3, #1
 800197a:	3b01      	subs	r3, #1
 800197c:	041b      	lsls	r3, r3, #16
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001984:	061b      	lsls	r3, r3, #24
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198c:	071b      	lsls	r3, r3, #28
 800198e:	491b      	ldr	r1, [pc, #108]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001994:	4b19      	ldr	r3, [pc, #100]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a18      	ldr	r2, [pc, #96]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 800199a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800199e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a0:	f7ff fb10 	bl	8000fc4 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a8:	f7ff fb0c 	bl	8000fc4 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e05f      	b.n	8001a7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCC_OscConfig+0x47c>
 80019c6:	e057      	b.n	8001a78 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c8:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0b      	ldr	r2, [pc, #44]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 80019ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff faf6 	bl	8000fc4 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff faf2 	bl	8000fc4 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e045      	b.n	8001a7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ee:	4b03      	ldr	r3, [pc, #12]	@ (80019fc <HAL_RCC_OscConfig+0x4d0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x4b0>
 80019fa:	e03d      	b.n	8001a78 <HAL_RCC_OscConfig+0x54c>
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a04:	4b1f      	ldr	r3, [pc, #124]	@ (8001a84 <HAL_RCC_OscConfig+0x558>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d030      	beq.n	8001a74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d129      	bne.n	8001a74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d122      	bne.n	8001a74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a34:	4013      	ands	r3, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d119      	bne.n	8001a74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4a:	085b      	lsrs	r3, r3, #1
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d10f      	bne.n	8001a74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d107      	bne.n	8001a74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800

08001a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0d0      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d910      	bls.n	8001ad0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	4b67      	ldr	r3, [pc, #412]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 020f 	bic.w	r2, r3, #15
 8001ab6:	4965      	ldr	r1, [pc, #404]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abe:	4b63      	ldr	r3, [pc, #396]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0b8      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d020      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae8:	4b59      	ldr	r3, [pc, #356]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	4a58      	ldr	r2, [pc, #352]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001aee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001af2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b00:	4b53      	ldr	r3, [pc, #332]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4a52      	ldr	r2, [pc, #328]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001b06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b0c:	4b50      	ldr	r3, [pc, #320]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	494d      	ldr	r1, [pc, #308]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d040      	beq.n	8001bac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d107      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	4b47      	ldr	r3, [pc, #284]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d115      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e07f      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4a:	4b41      	ldr	r3, [pc, #260]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d109      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e073      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e06b      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b6a:	4b39      	ldr	r3, [pc, #228]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f023 0203 	bic.w	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4936      	ldr	r1, [pc, #216]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b7c:	f7ff fa22 	bl	8000fc4 <HAL_GetTick>
 8001b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	e00a      	b.n	8001b9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b84:	f7ff fa1e 	bl	8000fc4 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e053      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 020c 	and.w	r2, r3, #12
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d1eb      	bne.n	8001b84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bac:	4b27      	ldr	r3, [pc, #156]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d210      	bcs.n	8001bdc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bba:	4b24      	ldr	r3, [pc, #144]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 020f 	bic.w	r2, r3, #15
 8001bc2:	4922      	ldr	r1, [pc, #136]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bca:	4b20      	ldr	r3, [pc, #128]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e032      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d008      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be8:	4b19      	ldr	r3, [pc, #100]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4916      	ldr	r1, [pc, #88]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d009      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c06:	4b12      	ldr	r3, [pc, #72]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	490e      	ldr	r1, [pc, #56]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c1a:	f000 f821 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	490a      	ldr	r1, [pc, #40]	@ (8001c54 <HAL_RCC_ClockConfig+0x1cc>)
 8001c2c:	5ccb      	ldrb	r3, [r1, r3]
 8001c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c32:	4a09      	ldr	r2, [pc, #36]	@ (8001c58 <HAL_RCC_ClockConfig+0x1d0>)
 8001c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c36:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <HAL_RCC_ClockConfig+0x1d4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff f800 	bl	8000c40 <HAL_InitTick>

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023c00 	.word	0x40023c00
 8001c50:	40023800 	.word	0x40023800
 8001c54:	08007e18 	.word	0x08007e18
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000004 	.word	0x20000004

08001c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c64:	b094      	sub	sp, #80	@ 0x50
 8001c66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c70:	2300      	movs	r3, #0
 8001c72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c78:	4b79      	ldr	r3, [pc, #484]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d00d      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	f200 80e1 	bhi.w	8001e4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x34>
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d003      	beq.n	8001c9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c92:	e0db      	b.n	8001e4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c94:	4b73      	ldr	r3, [pc, #460]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c98:	e0db      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c9a:	4b72      	ldr	r3, [pc, #456]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c9e:	e0d8      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ca0:	4b6f      	ldr	r3, [pc, #444]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ca8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001caa:	4b6d      	ldr	r3, [pc, #436]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d063      	beq.n	8001d7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb6:	4b6a      	ldr	r3, [pc, #424]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	099b      	lsrs	r3, r3, #6
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cca:	2300      	movs	r3, #0
 8001ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001cd2:	4622      	mov	r2, r4
 8001cd4:	462b      	mov	r3, r5
 8001cd6:	f04f 0000 	mov.w	r0, #0
 8001cda:	f04f 0100 	mov.w	r1, #0
 8001cde:	0159      	lsls	r1, r3, #5
 8001ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ce4:	0150      	lsls	r0, r2, #5
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4621      	mov	r1, r4
 8001cec:	1a51      	subs	r1, r2, r1
 8001cee:	6139      	str	r1, [r7, #16]
 8001cf0:	4629      	mov	r1, r5
 8001cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d04:	4659      	mov	r1, fp
 8001d06:	018b      	lsls	r3, r1, #6
 8001d08:	4651      	mov	r1, sl
 8001d0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d0e:	4651      	mov	r1, sl
 8001d10:	018a      	lsls	r2, r1, #6
 8001d12:	4651      	mov	r1, sl
 8001d14:	ebb2 0801 	subs.w	r8, r2, r1
 8001d18:	4659      	mov	r1, fp
 8001d1a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d32:	4690      	mov	r8, r2
 8001d34:	4699      	mov	r9, r3
 8001d36:	4623      	mov	r3, r4
 8001d38:	eb18 0303 	adds.w	r3, r8, r3
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	462b      	mov	r3, r5
 8001d40:	eb49 0303 	adc.w	r3, r9, r3
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d52:	4629      	mov	r1, r5
 8001d54:	028b      	lsls	r3, r1, #10
 8001d56:	4621      	mov	r1, r4
 8001d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	028a      	lsls	r2, r1, #10
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d66:	2200      	movs	r2, #0
 8001d68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d70:	f7fe fabe 	bl	80002f0 <__aeabi_uldivmod>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4613      	mov	r3, r2
 8001d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d7c:	e058      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7e:	4b38      	ldr	r3, [pc, #224]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	099b      	lsrs	r3, r3, #6
 8001d84:	2200      	movs	r2, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	4611      	mov	r1, r2
 8001d8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d8e:	623b      	str	r3, [r7, #32]
 8001d90:	2300      	movs	r3, #0
 8001d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d98:	4642      	mov	r2, r8
 8001d9a:	464b      	mov	r3, r9
 8001d9c:	f04f 0000 	mov.w	r0, #0
 8001da0:	f04f 0100 	mov.w	r1, #0
 8001da4:	0159      	lsls	r1, r3, #5
 8001da6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001daa:	0150      	lsls	r0, r2, #5
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4641      	mov	r1, r8
 8001db2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001db6:	4649      	mov	r1, r9
 8001db8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dd0:	ebb2 040a 	subs.w	r4, r2, sl
 8001dd4:	eb63 050b 	sbc.w	r5, r3, fp
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	00eb      	lsls	r3, r5, #3
 8001de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001de6:	00e2      	lsls	r2, r4, #3
 8001de8:	4614      	mov	r4, r2
 8001dea:	461d      	mov	r5, r3
 8001dec:	4643      	mov	r3, r8
 8001dee:	18e3      	adds	r3, r4, r3
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	464b      	mov	r3, r9
 8001df4:	eb45 0303 	adc.w	r3, r5, r3
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e06:	4629      	mov	r1, r5
 8001e08:	028b      	lsls	r3, r1, #10
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e10:	4621      	mov	r1, r4
 8001e12:	028a      	lsls	r2, r1, #10
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
 8001e1e:	61fa      	str	r2, [r7, #28]
 8001e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e24:	f7fe fa64 	bl	80002f0 <__aeabi_uldivmod>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e30:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	0c1b      	lsrs	r3, r3, #16
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e4a:	e002      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3750      	adds	r7, #80	@ 0x50
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	00f42400 	.word	0x00f42400

08001e68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	@ (8001e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000000 	.word	0x20000000

08001e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e84:	f7ff fff0 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	0a9b      	lsrs	r3, r3, #10
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	4903      	ldr	r1, [pc, #12]	@ (8001ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e96:	5ccb      	ldrb	r3, [r1, r3]
 8001e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	08007e28 	.word	0x08007e28

08001ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001eac:	f7ff ffdc 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	0b5b      	lsrs	r3, r3, #13
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	4903      	ldr	r1, [pc, #12]	@ (8001ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ebe:	5ccb      	ldrb	r3, [r1, r3]
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	08007e28 	.word	0x08007e28

08001ed0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	220f      	movs	r2, #15
 8001ede:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ee0:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <HAL_RCC_GetClockConfig+0x5c>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 0203 	and.w	r2, r3, #3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001eec:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <HAL_RCC_GetClockConfig+0x5c>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <HAL_RCC_GetClockConfig+0x5c>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f04:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <HAL_RCC_GetClockConfig+0x5c>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	08db      	lsrs	r3, r3, #3
 8001f0a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f12:	4b07      	ldr	r3, [pc, #28]	@ (8001f30 <HAL_RCC_GetClockConfig+0x60>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 020f 	and.w	r2, r3, #15
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	601a      	str	r2, [r3, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40023c00 	.word	0x40023c00

08001f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d012      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f5c:	4b69      	ldr	r3, [pc, #420]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	4a68      	ldr	r2, [pc, #416]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f62:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001f66:	6093      	str	r3, [r2, #8]
 8001f68:	4b66      	ldr	r3, [pc, #408]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f70:	4964      	ldr	r1, [pc, #400]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d017      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f8e:	4b5d      	ldr	r3, [pc, #372]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f94:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f9c:	4959      	ldr	r1, [pc, #356]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d017      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fca:	4b4e      	ldr	r3, [pc, #312]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fd0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd8:	494a      	ldr	r1, [pc, #296]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fe8:	d101      	bne.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001fea:	2301      	movs	r3, #1
 8001fec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002006:	2301      	movs	r3, #1
 8002008:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0320 	and.w	r3, r3, #32
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 808b 	beq.w	800212e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002018:	4b3a      	ldr	r3, [pc, #232]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201c:	4a39      	ldr	r2, [pc, #228]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002022:	6413      	str	r3, [r2, #64]	@ 0x40
 8002024:	4b37      	ldr	r3, [pc, #220]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002030:	4b35      	ldr	r3, [pc, #212]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a34      	ldr	r2, [pc, #208]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800203a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800203c:	f7fe ffc2 	bl	8000fc4 <HAL_GetTick>
 8002040:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002044:	f7fe ffbe 	bl	8000fc4 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	@ 0x64
 8002050:	d901      	bls.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e38f      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002056:	4b2c      	ldr	r3, [pc, #176]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002062:	4b28      	ldr	r3, [pc, #160]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800206a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d035      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	429a      	cmp	r2, r3
 800207e:	d02e      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002080:	4b20      	ldr	r3, [pc, #128]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002084:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002088:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800208a:	4b1e      	ldr	r3, [pc, #120]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208e:	4a1d      	ldr	r2, [pc, #116]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002094:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002096:	4b1b      	ldr	r3, [pc, #108]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209a:	4a1a      	ldr	r2, [pc, #104]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800209c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020a0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80020a2:	4a18      	ldr	r2, [pc, #96]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80020a8:	4b16      	ldr	r3, [pc, #88]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d114      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7fe ff86 	bl	8000fc4 <HAL_GetTick>
 80020b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ba:	e00a      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020bc:	f7fe ff82 	bl	8000fc4 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e351      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0ee      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80020ea:	d111      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80020ec:	4b05      	ldr	r3, [pc, #20]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020f8:	4b04      	ldr	r3, [pc, #16]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80020fa:	400b      	ands	r3, r1
 80020fc:	4901      	ldr	r1, [pc, #4]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	608b      	str	r3, [r1, #8]
 8002102:	e00b      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002104:	40023800 	.word	0x40023800
 8002108:	40007000 	.word	0x40007000
 800210c:	0ffffcff 	.word	0x0ffffcff
 8002110:	4bac      	ldr	r3, [pc, #688]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4aab      	ldr	r2, [pc, #684]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002116:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800211a:	6093      	str	r3, [r2, #8]
 800211c:	4ba9      	ldr	r3, [pc, #676]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800211e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002128:	49a6      	ldr	r1, [pc, #664]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800212a:	4313      	orrs	r3, r2
 800212c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	2b00      	cmp	r3, #0
 8002138:	d010      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800213a:	4ba2      	ldr	r3, [pc, #648]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800213c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002140:	4aa0      	ldr	r2, [pc, #640]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002142:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002146:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800214a:	4b9e      	ldr	r3, [pc, #632]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800214c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002154:	499b      	ldr	r1, [pc, #620]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002168:	4b96      	ldr	r3, [pc, #600]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800216e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002176:	4993      	ldr	r1, [pc, #588]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800218a:	4b8e      	ldr	r3, [pc, #568]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002190:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002198:	498a      	ldr	r1, [pc, #552]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800219a:	4313      	orrs	r3, r2
 800219c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00a      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021ac:	4b85      	ldr	r3, [pc, #532]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021ba:	4982      	ldr	r1, [pc, #520]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021ce:	4b7d      	ldr	r3, [pc, #500]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021dc:	4979      	ldr	r1, [pc, #484]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00a      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021f0:	4b74      	ldr	r3, [pc, #464]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f6:	f023 0203 	bic.w	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	4971      	ldr	r1, [pc, #452]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002212:	4b6c      	ldr	r3, [pc, #432]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002218:	f023 020c 	bic.w	r2, r3, #12
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002220:	4968      	ldr	r1, [pc, #416]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00a      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002234:	4b63      	ldr	r3, [pc, #396]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800223a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002242:	4960      	ldr	r1, [pc, #384]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002256:	4b5b      	ldr	r3, [pc, #364]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800225c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002264:	4957      	ldr	r1, [pc, #348]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00a      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002278:	4b52      	ldr	r3, [pc, #328]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800227e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002286:	494f      	ldr	r1, [pc, #316]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800229a:	4b4a      	ldr	r3, [pc, #296]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a8:	4946      	ldr	r1, [pc, #280]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80022bc:	4b41      	ldr	r3, [pc, #260]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022c2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ca:	493e      	ldr	r1, [pc, #248]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80022de:	4b39      	ldr	r3, [pc, #228]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ec:	4935      	ldr	r1, [pc, #212]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002300:	4b30      	ldr	r3, [pc, #192]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002306:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800230e:	492d      	ldr	r1, [pc, #180]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d011      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002322:	4b28      	ldr	r3, [pc, #160]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002328:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002330:	4924      	ldr	r1, [pc, #144]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800233c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002340:	d101      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002342:	2301      	movs	r3, #1
 8002344:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002352:	2301      	movs	r3, #1
 8002354:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002362:	4b18      	ldr	r3, [pc, #96]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002368:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002370:	4914      	ldr	r1, [pc, #80]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00b      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002384:	4b0f      	ldr	r3, [pc, #60]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800238a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002394:	490b      	ldr	r1, [pc, #44]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00f      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80023a8:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ae:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023b8:	4902      	ldr	r1, [pc, #8]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80023c0:	e002      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00b      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023d4:	4b8a      	ldr	r3, [pc, #552]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e4:	4986      	ldr	r1, [pc, #536]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00b      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80023f8:	4b81      	ldr	r3, [pc, #516]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023fe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002408:	497d      	ldr	r1, [pc, #500]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d006      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 80d6 	beq.w	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002424:	4b76      	ldr	r3, [pc, #472]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a75      	ldr	r2, [pc, #468]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800242a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800242e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002430:	f7fe fdc8 	bl	8000fc4 <HAL_GetTick>
 8002434:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002438:	f7fe fdc4 	bl	8000fc4 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	@ 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e195      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800244a:	4b6d      	ldr	r3, [pc, #436]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d021      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002466:	2b00      	cmp	r3, #0
 8002468:	d11d      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800246a:	4b65      	ldr	r3, [pc, #404]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800246c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002478:	4b61      	ldr	r3, [pc, #388]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800247a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800247e:	0e1b      	lsrs	r3, r3, #24
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	019a      	lsls	r2, r3, #6
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	431a      	orrs	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	061b      	lsls	r3, r3, #24
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	071b      	lsls	r3, r3, #28
 800249e:	4958      	ldr	r1, [pc, #352]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d004      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024ba:	d00a      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d02e      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024d0:	d129      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024d2:	4b4b      	ldr	r3, [pc, #300]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024d8:	0c1b      	lsrs	r3, r3, #16
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024e0:	4b47      	ldr	r3, [pc, #284]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024e6:	0f1b      	lsrs	r3, r3, #28
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	019a      	lsls	r2, r3, #6
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	041b      	lsls	r3, r3, #16
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	061b      	lsls	r3, r3, #24
 8002500:	431a      	orrs	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	071b      	lsls	r3, r3, #28
 8002506:	493e      	ldr	r1, [pc, #248]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800250e:	4b3c      	ldr	r3, [pc, #240]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002510:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002514:	f023 021f 	bic.w	r2, r3, #31
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	3b01      	subs	r3, #1
 800251e:	4938      	ldr	r1, [pc, #224]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d01d      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002532:	4b33      	ldr	r3, [pc, #204]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002534:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002538:	0e1b      	lsrs	r3, r3, #24
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002540:	4b2f      	ldr	r3, [pc, #188]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002546:	0f1b      	lsrs	r3, r3, #28
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	019a      	lsls	r2, r3, #6
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	431a      	orrs	r2, r3
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	061b      	lsls	r3, r3, #24
 8002560:	431a      	orrs	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	071b      	lsls	r3, r3, #28
 8002566:	4926      	ldr	r1, [pc, #152]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d011      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	019a      	lsls	r2, r3, #6
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	041b      	lsls	r3, r3, #16
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	061b      	lsls	r3, r3, #24
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	071b      	lsls	r3, r3, #28
 8002596:	491a      	ldr	r1, [pc, #104]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800259e:	4b18      	ldr	r3, [pc, #96]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a17      	ldr	r2, [pc, #92]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025aa:	f7fe fd0b 	bl	8000fc4 <HAL_GetTick>
 80025ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025b2:	f7fe fd07 	bl	8000fc4 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b64      	cmp	r3, #100	@ 0x64
 80025be:	d901      	bls.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e0d8      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	f040 80ce 	bne.w	8002774 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80025d8:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a08      	ldr	r2, [pc, #32]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e4:	f7fe fcee 	bl	8000fc4 <HAL_GetTick>
 80025e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025ea:	e00b      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025ec:	f7fe fcea 	bl	8000fc4 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	@ 0x64
 80025f8:	d904      	bls.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e0bb      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80025fe:	bf00      	nop
 8002600:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002604:	4b5e      	ldr	r3, [pc, #376]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800260c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002610:	d0ec      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800262e:	2b00      	cmp	r3, #0
 8002630:	d02e      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	2b00      	cmp	r3, #0
 8002638:	d12a      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800263a:	4b51      	ldr	r3, [pc, #324]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800263c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002640:	0c1b      	lsrs	r3, r3, #16
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002648:	4b4d      	ldr	r3, [pc, #308]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264e:	0f1b      	lsrs	r3, r3, #28
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	019a      	lsls	r2, r3, #6
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	041b      	lsls	r3, r3, #16
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	061b      	lsls	r3, r3, #24
 8002668:	431a      	orrs	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	071b      	lsls	r3, r3, #28
 800266e:	4944      	ldr	r1, [pc, #272]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002676:	4b42      	ldr	r3, [pc, #264]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002678:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800267c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002684:	3b01      	subs	r3, #1
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	493d      	ldr	r1, [pc, #244]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d022      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026a4:	d11d      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026a6:	4b36      	ldr	r3, [pc, #216]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ac:	0e1b      	lsrs	r3, r3, #24
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026b4:	4b32      	ldr	r3, [pc, #200]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ba:	0f1b      	lsrs	r3, r3, #28
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	019a      	lsls	r2, r3, #6
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	041b      	lsls	r3, r3, #16
 80026ce:	431a      	orrs	r2, r3
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	061b      	lsls	r3, r3, #24
 80026d4:	431a      	orrs	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	071b      	lsls	r3, r3, #28
 80026da:	4929      	ldr	r1, [pc, #164]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d028      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026ee:	4b24      	ldr	r3, [pc, #144]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f4:	0e1b      	lsrs	r3, r3, #24
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026fc:	4b20      	ldr	r3, [pc, #128]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002702:	0c1b      	lsrs	r3, r3, #16
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	019a      	lsls	r2, r3, #6
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	041b      	lsls	r3, r3, #16
 8002714:	431a      	orrs	r2, r3
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	061b      	lsls	r3, r3, #24
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	071b      	lsls	r3, r3, #28
 8002722:	4917      	ldr	r1, [pc, #92]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800272a:	4b15      	ldr	r3, [pc, #84]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800272c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002730:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002738:	4911      	ldr	r1, [pc, #68]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002740:	4b0f      	ldr	r3, [pc, #60]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0e      	ldr	r2, [pc, #56]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800274a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800274c:	f7fe fc3a 	bl	8000fc4 <HAL_GetTick>
 8002750:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002754:	f7fe fc36 	bl	8000fc4 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	@ 0x64
 8002760:	d901      	bls.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e007      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002766:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800276e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002772:	d1ef      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3720      	adds	r7, #32
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800

08002784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e049      	b.n	800282a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f841 	bl	8002832 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3304      	adds	r3, #4
 80027c0:	4619      	mov	r1, r3
 80027c2:	4610      	mov	r0, r2
 80027c4:	f000 f9e8 	bl	8002b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d001      	beq.n	8002860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e054      	b.n	800290a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a26      	ldr	r2, [pc, #152]	@ (8002918 <HAL_TIM_Base_Start_IT+0xd0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d022      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x80>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800288a:	d01d      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x80>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a22      	ldr	r2, [pc, #136]	@ (800291c <HAL_TIM_Base_Start_IT+0xd4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d018      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x80>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a21      	ldr	r2, [pc, #132]	@ (8002920 <HAL_TIM_Base_Start_IT+0xd8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d013      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x80>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002924 <HAL_TIM_Base_Start_IT+0xdc>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00e      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x80>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002928 <HAL_TIM_Base_Start_IT+0xe0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d009      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x80>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1c      	ldr	r2, [pc, #112]	@ (800292c <HAL_TIM_Base_Start_IT+0xe4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d004      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x80>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002930 <HAL_TIM_Base_Start_IT+0xe8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d115      	bne.n	80028f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	4b19      	ldr	r3, [pc, #100]	@ (8002934 <HAL_TIM_Base_Start_IT+0xec>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d015      	beq.n	8002906 <HAL_TIM_Base_Start_IT+0xbe>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028e0:	d011      	beq.n	8002906 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f042 0201 	orr.w	r2, r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f2:	e008      	b.n	8002906 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	e000      	b.n	8002908 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002906:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40010000 	.word	0x40010000
 800291c:	40000400 	.word	0x40000400
 8002920:	40000800 	.word	0x40000800
 8002924:	40000c00 	.word	0x40000c00
 8002928:	40010400 	.word	0x40010400
 800292c:	40014000 	.word	0x40014000
 8002930:	40001800 	.word	0x40001800
 8002934:	00010007 	.word	0x00010007

08002938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d020      	beq.n	800299c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01b      	beq.n	800299c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0202 	mvn.w	r2, #2
 800296c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f8e9 	bl	8002b5a <HAL_TIM_IC_CaptureCallback>
 8002988:	e005      	b.n	8002996 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f8db 	bl	8002b46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f8ec 	bl	8002b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d020      	beq.n	80029e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01b      	beq.n	80029e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0204 	mvn.w	r2, #4
 80029b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2202      	movs	r2, #2
 80029be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f8c3 	bl	8002b5a <HAL_TIM_IC_CaptureCallback>
 80029d4:	e005      	b.n	80029e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f8b5 	bl	8002b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f8c6 	bl	8002b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d020      	beq.n	8002a34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01b      	beq.n	8002a34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0208 	mvn.w	r2, #8
 8002a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2204      	movs	r2, #4
 8002a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f89d 	bl	8002b5a <HAL_TIM_IC_CaptureCallback>
 8002a20:	e005      	b.n	8002a2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f88f 	bl	8002b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f8a0 	bl	8002b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d020      	beq.n	8002a80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01b      	beq.n	8002a80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0210 	mvn.w	r2, #16
 8002a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2208      	movs	r2, #8
 8002a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f877 	bl	8002b5a <HAL_TIM_IC_CaptureCallback>
 8002a6c:	e005      	b.n	8002a7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f869 	bl	8002b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f87a 	bl	8002b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00c      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0201 	mvn.w	r2, #1
 8002a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fe f832 	bl	8000b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d104      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00c      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f919 	bl	8002d04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00c      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f911 	bl	8002d18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00c      	beq.n	8002b1a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d007      	beq.n	8002b1a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f834 	bl	8002b82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f003 0320 	and.w	r3, r3, #32
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00c      	beq.n	8002b3e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f06f 0220 	mvn.w	r2, #32
 8002b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f8d9 	bl	8002cf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a46      	ldr	r2, [pc, #280]	@ (8002cc4 <TIM_Base_SetConfig+0x12c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d013      	beq.n	8002bd8 <TIM_Base_SetConfig+0x40>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb6:	d00f      	beq.n	8002bd8 <TIM_Base_SetConfig+0x40>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a43      	ldr	r2, [pc, #268]	@ (8002cc8 <TIM_Base_SetConfig+0x130>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d00b      	beq.n	8002bd8 <TIM_Base_SetConfig+0x40>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a42      	ldr	r2, [pc, #264]	@ (8002ccc <TIM_Base_SetConfig+0x134>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d007      	beq.n	8002bd8 <TIM_Base_SetConfig+0x40>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a41      	ldr	r2, [pc, #260]	@ (8002cd0 <TIM_Base_SetConfig+0x138>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d003      	beq.n	8002bd8 <TIM_Base_SetConfig+0x40>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a40      	ldr	r2, [pc, #256]	@ (8002cd4 <TIM_Base_SetConfig+0x13c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d108      	bne.n	8002bea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a35      	ldr	r2, [pc, #212]	@ (8002cc4 <TIM_Base_SetConfig+0x12c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d02b      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf8:	d027      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a32      	ldr	r2, [pc, #200]	@ (8002cc8 <TIM_Base_SetConfig+0x130>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d023      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a31      	ldr	r2, [pc, #196]	@ (8002ccc <TIM_Base_SetConfig+0x134>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01f      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a30      	ldr	r2, [pc, #192]	@ (8002cd0 <TIM_Base_SetConfig+0x138>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d01b      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a2f      	ldr	r2, [pc, #188]	@ (8002cd4 <TIM_Base_SetConfig+0x13c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d017      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a2e      	ldr	r2, [pc, #184]	@ (8002cd8 <TIM_Base_SetConfig+0x140>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d013      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a2d      	ldr	r2, [pc, #180]	@ (8002cdc <TIM_Base_SetConfig+0x144>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00f      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ce0 <TIM_Base_SetConfig+0x148>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00b      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a2b      	ldr	r2, [pc, #172]	@ (8002ce4 <TIM_Base_SetConfig+0x14c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d007      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ce8 <TIM_Base_SetConfig+0x150>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d003      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a29      	ldr	r2, [pc, #164]	@ (8002cec <TIM_Base_SetConfig+0x154>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d108      	bne.n	8002c5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a10      	ldr	r2, [pc, #64]	@ (8002cc4 <TIM_Base_SetConfig+0x12c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d003      	beq.n	8002c90 <TIM_Base_SetConfig+0xf8>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a12      	ldr	r2, [pc, #72]	@ (8002cd4 <TIM_Base_SetConfig+0x13c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d103      	bne.n	8002c98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d105      	bne.n	8002cb6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f023 0201 	bic.w	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	611a      	str	r2, [r3, #16]
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40010000 	.word	0x40010000
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40000800 	.word	0x40000800
 8002cd0:	40000c00 	.word	0x40000c00
 8002cd4:	40010400 	.word	0x40010400
 8002cd8:	40014000 	.word	0x40014000
 8002cdc:	40014400 	.word	0x40014400
 8002ce0:	40014800 	.word	0x40014800
 8002ce4:	40001800 	.word	0x40001800
 8002ce8:	40001c00 	.word	0x40001c00
 8002cec:	40002000 	.word	0x40002000

08002cf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e040      	b.n	8002dc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d106      	bne.n	8002d54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fd ff16 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2224      	movs	r2, #36	@ 0x24
 8002d58:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0201 	bic.w	r2, r2, #1
 8002d68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fb16 	bl	80033a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f8af 	bl	8002edc <UART_SetConfig>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e01b      	b.n	8002dc0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002da6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 fb95 	bl	80034e8 <UART_CheckIdleState>
 8002dbe:	4603      	mov	r3, r0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	@ 0x28
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	d177      	bne.n	8002ed0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <HAL_UART_Transmit+0x24>
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e070      	b.n	8002ed2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2221      	movs	r2, #33	@ 0x21
 8002dfc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dfe:	f7fe f8e1 	bl	8000fc4 <HAL_GetTick>
 8002e02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	88fa      	ldrh	r2, [r7, #6]
 8002e08:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	88fa      	ldrh	r2, [r7, #6]
 8002e10:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e1c:	d108      	bne.n	8002e30 <HAL_UART_Transmit+0x68>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d104      	bne.n	8002e30 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	e003      	b.n	8002e38 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e38:	e02f      	b.n	8002e9a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2200      	movs	r2, #0
 8002e42:	2180      	movs	r1, #128	@ 0x80
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fbf7 	bl	8003638 <UART_WaitOnFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d004      	beq.n	8002e5a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e03b      	b.n	8002ed2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10b      	bne.n	8002e78 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e6e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	3302      	adds	r3, #2
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	e007      	b.n	8002e88 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	781a      	ldrb	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3301      	adds	r3, #1
 8002e86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1c9      	bne.n	8002e3a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2200      	movs	r2, #0
 8002eae:	2140      	movs	r1, #64	@ 0x40
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 fbc1 	bl	8003638 <UART_WaitOnFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d004      	beq.n	8002ec6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e005      	b.n	8002ed2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e000      	b.n	8002ed2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002ed0:	2302      	movs	r3, #2
  }
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3720      	adds	r7, #32
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4ba6      	ldr	r3, [pc, #664]	@ (80031a0 <UART_SetConfig+0x2c4>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	6979      	ldr	r1, [r7, #20]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a94      	ldr	r2, [pc, #592]	@ (80031a4 <UART_SetConfig+0x2c8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d120      	bne.n	8002f9a <UART_SetConfig+0xbe>
 8002f58:	4b93      	ldr	r3, [pc, #588]	@ (80031a8 <UART_SetConfig+0x2cc>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d816      	bhi.n	8002f94 <UART_SetConfig+0xb8>
 8002f66:	a201      	add	r2, pc, #4	@ (adr r2, 8002f6c <UART_SetConfig+0x90>)
 8002f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6c:	08002f7d 	.word	0x08002f7d
 8002f70:	08002f89 	.word	0x08002f89
 8002f74:	08002f83 	.word	0x08002f83
 8002f78:	08002f8f 	.word	0x08002f8f
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	77fb      	strb	r3, [r7, #31]
 8002f80:	e150      	b.n	8003224 <UART_SetConfig+0x348>
 8002f82:	2302      	movs	r3, #2
 8002f84:	77fb      	strb	r3, [r7, #31]
 8002f86:	e14d      	b.n	8003224 <UART_SetConfig+0x348>
 8002f88:	2304      	movs	r3, #4
 8002f8a:	77fb      	strb	r3, [r7, #31]
 8002f8c:	e14a      	b.n	8003224 <UART_SetConfig+0x348>
 8002f8e:	2308      	movs	r3, #8
 8002f90:	77fb      	strb	r3, [r7, #31]
 8002f92:	e147      	b.n	8003224 <UART_SetConfig+0x348>
 8002f94:	2310      	movs	r3, #16
 8002f96:	77fb      	strb	r3, [r7, #31]
 8002f98:	e144      	b.n	8003224 <UART_SetConfig+0x348>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a83      	ldr	r2, [pc, #524]	@ (80031ac <UART_SetConfig+0x2d0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d132      	bne.n	800300a <UART_SetConfig+0x12e>
 8002fa4:	4b80      	ldr	r3, [pc, #512]	@ (80031a8 <UART_SetConfig+0x2cc>)
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b0c      	cmp	r3, #12
 8002fb0:	d828      	bhi.n	8003004 <UART_SetConfig+0x128>
 8002fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb8 <UART_SetConfig+0xdc>)
 8002fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb8:	08002fed 	.word	0x08002fed
 8002fbc:	08003005 	.word	0x08003005
 8002fc0:	08003005 	.word	0x08003005
 8002fc4:	08003005 	.word	0x08003005
 8002fc8:	08002ff9 	.word	0x08002ff9
 8002fcc:	08003005 	.word	0x08003005
 8002fd0:	08003005 	.word	0x08003005
 8002fd4:	08003005 	.word	0x08003005
 8002fd8:	08002ff3 	.word	0x08002ff3
 8002fdc:	08003005 	.word	0x08003005
 8002fe0:	08003005 	.word	0x08003005
 8002fe4:	08003005 	.word	0x08003005
 8002fe8:	08002fff 	.word	0x08002fff
 8002fec:	2300      	movs	r3, #0
 8002fee:	77fb      	strb	r3, [r7, #31]
 8002ff0:	e118      	b.n	8003224 <UART_SetConfig+0x348>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	77fb      	strb	r3, [r7, #31]
 8002ff6:	e115      	b.n	8003224 <UART_SetConfig+0x348>
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e112      	b.n	8003224 <UART_SetConfig+0x348>
 8002ffe:	2308      	movs	r3, #8
 8003000:	77fb      	strb	r3, [r7, #31]
 8003002:	e10f      	b.n	8003224 <UART_SetConfig+0x348>
 8003004:	2310      	movs	r3, #16
 8003006:	77fb      	strb	r3, [r7, #31]
 8003008:	e10c      	b.n	8003224 <UART_SetConfig+0x348>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a68      	ldr	r2, [pc, #416]	@ (80031b0 <UART_SetConfig+0x2d4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d120      	bne.n	8003056 <UART_SetConfig+0x17a>
 8003014:	4b64      	ldr	r3, [pc, #400]	@ (80031a8 <UART_SetConfig+0x2cc>)
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800301a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800301e:	2b30      	cmp	r3, #48	@ 0x30
 8003020:	d013      	beq.n	800304a <UART_SetConfig+0x16e>
 8003022:	2b30      	cmp	r3, #48	@ 0x30
 8003024:	d814      	bhi.n	8003050 <UART_SetConfig+0x174>
 8003026:	2b20      	cmp	r3, #32
 8003028:	d009      	beq.n	800303e <UART_SetConfig+0x162>
 800302a:	2b20      	cmp	r3, #32
 800302c:	d810      	bhi.n	8003050 <UART_SetConfig+0x174>
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <UART_SetConfig+0x15c>
 8003032:	2b10      	cmp	r3, #16
 8003034:	d006      	beq.n	8003044 <UART_SetConfig+0x168>
 8003036:	e00b      	b.n	8003050 <UART_SetConfig+0x174>
 8003038:	2300      	movs	r3, #0
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e0f2      	b.n	8003224 <UART_SetConfig+0x348>
 800303e:	2302      	movs	r3, #2
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	e0ef      	b.n	8003224 <UART_SetConfig+0x348>
 8003044:	2304      	movs	r3, #4
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e0ec      	b.n	8003224 <UART_SetConfig+0x348>
 800304a:	2308      	movs	r3, #8
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e0e9      	b.n	8003224 <UART_SetConfig+0x348>
 8003050:	2310      	movs	r3, #16
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e0e6      	b.n	8003224 <UART_SetConfig+0x348>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a56      	ldr	r2, [pc, #344]	@ (80031b4 <UART_SetConfig+0x2d8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d120      	bne.n	80030a2 <UART_SetConfig+0x1c6>
 8003060:	4b51      	ldr	r3, [pc, #324]	@ (80031a8 <UART_SetConfig+0x2cc>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003066:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800306a:	2bc0      	cmp	r3, #192	@ 0xc0
 800306c:	d013      	beq.n	8003096 <UART_SetConfig+0x1ba>
 800306e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003070:	d814      	bhi.n	800309c <UART_SetConfig+0x1c0>
 8003072:	2b80      	cmp	r3, #128	@ 0x80
 8003074:	d009      	beq.n	800308a <UART_SetConfig+0x1ae>
 8003076:	2b80      	cmp	r3, #128	@ 0x80
 8003078:	d810      	bhi.n	800309c <UART_SetConfig+0x1c0>
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <UART_SetConfig+0x1a8>
 800307e:	2b40      	cmp	r3, #64	@ 0x40
 8003080:	d006      	beq.n	8003090 <UART_SetConfig+0x1b4>
 8003082:	e00b      	b.n	800309c <UART_SetConfig+0x1c0>
 8003084:	2300      	movs	r3, #0
 8003086:	77fb      	strb	r3, [r7, #31]
 8003088:	e0cc      	b.n	8003224 <UART_SetConfig+0x348>
 800308a:	2302      	movs	r3, #2
 800308c:	77fb      	strb	r3, [r7, #31]
 800308e:	e0c9      	b.n	8003224 <UART_SetConfig+0x348>
 8003090:	2304      	movs	r3, #4
 8003092:	77fb      	strb	r3, [r7, #31]
 8003094:	e0c6      	b.n	8003224 <UART_SetConfig+0x348>
 8003096:	2308      	movs	r3, #8
 8003098:	77fb      	strb	r3, [r7, #31]
 800309a:	e0c3      	b.n	8003224 <UART_SetConfig+0x348>
 800309c:	2310      	movs	r3, #16
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	e0c0      	b.n	8003224 <UART_SetConfig+0x348>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a44      	ldr	r2, [pc, #272]	@ (80031b8 <UART_SetConfig+0x2dc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d125      	bne.n	80030f8 <UART_SetConfig+0x21c>
 80030ac:	4b3e      	ldr	r3, [pc, #248]	@ (80031a8 <UART_SetConfig+0x2cc>)
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030ba:	d017      	beq.n	80030ec <UART_SetConfig+0x210>
 80030bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030c0:	d817      	bhi.n	80030f2 <UART_SetConfig+0x216>
 80030c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030c6:	d00b      	beq.n	80030e0 <UART_SetConfig+0x204>
 80030c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030cc:	d811      	bhi.n	80030f2 <UART_SetConfig+0x216>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <UART_SetConfig+0x1fe>
 80030d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030d6:	d006      	beq.n	80030e6 <UART_SetConfig+0x20a>
 80030d8:	e00b      	b.n	80030f2 <UART_SetConfig+0x216>
 80030da:	2300      	movs	r3, #0
 80030dc:	77fb      	strb	r3, [r7, #31]
 80030de:	e0a1      	b.n	8003224 <UART_SetConfig+0x348>
 80030e0:	2302      	movs	r3, #2
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e09e      	b.n	8003224 <UART_SetConfig+0x348>
 80030e6:	2304      	movs	r3, #4
 80030e8:	77fb      	strb	r3, [r7, #31]
 80030ea:	e09b      	b.n	8003224 <UART_SetConfig+0x348>
 80030ec:	2308      	movs	r3, #8
 80030ee:	77fb      	strb	r3, [r7, #31]
 80030f0:	e098      	b.n	8003224 <UART_SetConfig+0x348>
 80030f2:	2310      	movs	r3, #16
 80030f4:	77fb      	strb	r3, [r7, #31]
 80030f6:	e095      	b.n	8003224 <UART_SetConfig+0x348>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a2f      	ldr	r2, [pc, #188]	@ (80031bc <UART_SetConfig+0x2e0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d125      	bne.n	800314e <UART_SetConfig+0x272>
 8003102:	4b29      	ldr	r3, [pc, #164]	@ (80031a8 <UART_SetConfig+0x2cc>)
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003108:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800310c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003110:	d017      	beq.n	8003142 <UART_SetConfig+0x266>
 8003112:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003116:	d817      	bhi.n	8003148 <UART_SetConfig+0x26c>
 8003118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800311c:	d00b      	beq.n	8003136 <UART_SetConfig+0x25a>
 800311e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003122:	d811      	bhi.n	8003148 <UART_SetConfig+0x26c>
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <UART_SetConfig+0x254>
 8003128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800312c:	d006      	beq.n	800313c <UART_SetConfig+0x260>
 800312e:	e00b      	b.n	8003148 <UART_SetConfig+0x26c>
 8003130:	2301      	movs	r3, #1
 8003132:	77fb      	strb	r3, [r7, #31]
 8003134:	e076      	b.n	8003224 <UART_SetConfig+0x348>
 8003136:	2302      	movs	r3, #2
 8003138:	77fb      	strb	r3, [r7, #31]
 800313a:	e073      	b.n	8003224 <UART_SetConfig+0x348>
 800313c:	2304      	movs	r3, #4
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	e070      	b.n	8003224 <UART_SetConfig+0x348>
 8003142:	2308      	movs	r3, #8
 8003144:	77fb      	strb	r3, [r7, #31]
 8003146:	e06d      	b.n	8003224 <UART_SetConfig+0x348>
 8003148:	2310      	movs	r3, #16
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	e06a      	b.n	8003224 <UART_SetConfig+0x348>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1b      	ldr	r2, [pc, #108]	@ (80031c0 <UART_SetConfig+0x2e4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d138      	bne.n	80031ca <UART_SetConfig+0x2ee>
 8003158:	4b13      	ldr	r3, [pc, #76]	@ (80031a8 <UART_SetConfig+0x2cc>)
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003162:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003166:	d017      	beq.n	8003198 <UART_SetConfig+0x2bc>
 8003168:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800316c:	d82a      	bhi.n	80031c4 <UART_SetConfig+0x2e8>
 800316e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003172:	d00b      	beq.n	800318c <UART_SetConfig+0x2b0>
 8003174:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003178:	d824      	bhi.n	80031c4 <UART_SetConfig+0x2e8>
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <UART_SetConfig+0x2aa>
 800317e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003182:	d006      	beq.n	8003192 <UART_SetConfig+0x2b6>
 8003184:	e01e      	b.n	80031c4 <UART_SetConfig+0x2e8>
 8003186:	2300      	movs	r3, #0
 8003188:	77fb      	strb	r3, [r7, #31]
 800318a:	e04b      	b.n	8003224 <UART_SetConfig+0x348>
 800318c:	2302      	movs	r3, #2
 800318e:	77fb      	strb	r3, [r7, #31]
 8003190:	e048      	b.n	8003224 <UART_SetConfig+0x348>
 8003192:	2304      	movs	r3, #4
 8003194:	77fb      	strb	r3, [r7, #31]
 8003196:	e045      	b.n	8003224 <UART_SetConfig+0x348>
 8003198:	2308      	movs	r3, #8
 800319a:	77fb      	strb	r3, [r7, #31]
 800319c:	e042      	b.n	8003224 <UART_SetConfig+0x348>
 800319e:	bf00      	nop
 80031a0:	efff69f3 	.word	0xefff69f3
 80031a4:	40011000 	.word	0x40011000
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40004400 	.word	0x40004400
 80031b0:	40004800 	.word	0x40004800
 80031b4:	40004c00 	.word	0x40004c00
 80031b8:	40005000 	.word	0x40005000
 80031bc:	40011400 	.word	0x40011400
 80031c0:	40007800 	.word	0x40007800
 80031c4:	2310      	movs	r3, #16
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	e02c      	b.n	8003224 <UART_SetConfig+0x348>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a72      	ldr	r2, [pc, #456]	@ (8003398 <UART_SetConfig+0x4bc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d125      	bne.n	8003220 <UART_SetConfig+0x344>
 80031d4:	4b71      	ldr	r3, [pc, #452]	@ (800339c <UART_SetConfig+0x4c0>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80031de:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80031e2:	d017      	beq.n	8003214 <UART_SetConfig+0x338>
 80031e4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80031e8:	d817      	bhi.n	800321a <UART_SetConfig+0x33e>
 80031ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031ee:	d00b      	beq.n	8003208 <UART_SetConfig+0x32c>
 80031f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031f4:	d811      	bhi.n	800321a <UART_SetConfig+0x33e>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <UART_SetConfig+0x326>
 80031fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031fe:	d006      	beq.n	800320e <UART_SetConfig+0x332>
 8003200:	e00b      	b.n	800321a <UART_SetConfig+0x33e>
 8003202:	2300      	movs	r3, #0
 8003204:	77fb      	strb	r3, [r7, #31]
 8003206:	e00d      	b.n	8003224 <UART_SetConfig+0x348>
 8003208:	2302      	movs	r3, #2
 800320a:	77fb      	strb	r3, [r7, #31]
 800320c:	e00a      	b.n	8003224 <UART_SetConfig+0x348>
 800320e:	2304      	movs	r3, #4
 8003210:	77fb      	strb	r3, [r7, #31]
 8003212:	e007      	b.n	8003224 <UART_SetConfig+0x348>
 8003214:	2308      	movs	r3, #8
 8003216:	77fb      	strb	r3, [r7, #31]
 8003218:	e004      	b.n	8003224 <UART_SetConfig+0x348>
 800321a:	2310      	movs	r3, #16
 800321c:	77fb      	strb	r3, [r7, #31]
 800321e:	e001      	b.n	8003224 <UART_SetConfig+0x348>
 8003220:	2310      	movs	r3, #16
 8003222:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800322c:	d15b      	bne.n	80032e6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800322e:	7ffb      	ldrb	r3, [r7, #31]
 8003230:	2b08      	cmp	r3, #8
 8003232:	d828      	bhi.n	8003286 <UART_SetConfig+0x3aa>
 8003234:	a201      	add	r2, pc, #4	@ (adr r2, 800323c <UART_SetConfig+0x360>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	08003261 	.word	0x08003261
 8003240:	08003269 	.word	0x08003269
 8003244:	08003271 	.word	0x08003271
 8003248:	08003287 	.word	0x08003287
 800324c:	08003277 	.word	0x08003277
 8003250:	08003287 	.word	0x08003287
 8003254:	08003287 	.word	0x08003287
 8003258:	08003287 	.word	0x08003287
 800325c:	0800327f 	.word	0x0800327f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003260:	f7fe fe0e 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8003264:	61b8      	str	r0, [r7, #24]
        break;
 8003266:	e013      	b.n	8003290 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003268:	f7fe fe1e 	bl	8001ea8 <HAL_RCC_GetPCLK2Freq>
 800326c:	61b8      	str	r0, [r7, #24]
        break;
 800326e:	e00f      	b.n	8003290 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003270:	4b4b      	ldr	r3, [pc, #300]	@ (80033a0 <UART_SetConfig+0x4c4>)
 8003272:	61bb      	str	r3, [r7, #24]
        break;
 8003274:	e00c      	b.n	8003290 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003276:	f7fe fcf3 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 800327a:	61b8      	str	r0, [r7, #24]
        break;
 800327c:	e008      	b.n	8003290 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800327e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003282:	61bb      	str	r3, [r7, #24]
        break;
 8003284:	e004      	b.n	8003290 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	77bb      	strb	r3, [r7, #30]
        break;
 800328e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d074      	beq.n	8003380 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	005a      	lsls	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	085b      	lsrs	r3, r3, #1
 80032a0:	441a      	add	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	2b0f      	cmp	r3, #15
 80032b0:	d916      	bls.n	80032e0 <UART_SetConfig+0x404>
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b8:	d212      	bcs.n	80032e0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	b29b      	uxth	r3, r3
 80032be:	f023 030f 	bic.w	r3, r3, #15
 80032c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	085b      	lsrs	r3, r3, #1
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	89fb      	ldrh	r3, [r7, #14]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	89fa      	ldrh	r2, [r7, #14]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	e04f      	b.n	8003380 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	77bb      	strb	r3, [r7, #30]
 80032e4:	e04c      	b.n	8003380 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032e6:	7ffb      	ldrb	r3, [r7, #31]
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d828      	bhi.n	800333e <UART_SetConfig+0x462>
 80032ec:	a201      	add	r2, pc, #4	@ (adr r2, 80032f4 <UART_SetConfig+0x418>)
 80032ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f2:	bf00      	nop
 80032f4:	08003319 	.word	0x08003319
 80032f8:	08003321 	.word	0x08003321
 80032fc:	08003329 	.word	0x08003329
 8003300:	0800333f 	.word	0x0800333f
 8003304:	0800332f 	.word	0x0800332f
 8003308:	0800333f 	.word	0x0800333f
 800330c:	0800333f 	.word	0x0800333f
 8003310:	0800333f 	.word	0x0800333f
 8003314:	08003337 	.word	0x08003337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003318:	f7fe fdb2 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 800331c:	61b8      	str	r0, [r7, #24]
        break;
 800331e:	e013      	b.n	8003348 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003320:	f7fe fdc2 	bl	8001ea8 <HAL_RCC_GetPCLK2Freq>
 8003324:	61b8      	str	r0, [r7, #24]
        break;
 8003326:	e00f      	b.n	8003348 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003328:	4b1d      	ldr	r3, [pc, #116]	@ (80033a0 <UART_SetConfig+0x4c4>)
 800332a:	61bb      	str	r3, [r7, #24]
        break;
 800332c:	e00c      	b.n	8003348 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800332e:	f7fe fc97 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8003332:	61b8      	str	r0, [r7, #24]
        break;
 8003334:	e008      	b.n	8003348 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800333a:	61bb      	str	r3, [r7, #24]
        break;
 800333c:	e004      	b.n	8003348 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	77bb      	strb	r3, [r7, #30]
        break;
 8003346:	bf00      	nop
    }

    if (pclk != 0U)
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d018      	beq.n	8003380 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	085a      	lsrs	r2, r3, #1
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	441a      	add	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003360:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b0f      	cmp	r3, #15
 8003366:	d909      	bls.n	800337c <UART_SetConfig+0x4a0>
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800336e:	d205      	bcs.n	800337c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	b29a      	uxth	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	60da      	str	r2, [r3, #12]
 800337a:	e001      	b.n	8003380 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800338c:	7fbb      	ldrb	r3, [r7, #30]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40007c00 	.word	0x40007c00
 800339c:	40023800 	.word	0x40023800
 80033a0:	00f42400 	.word	0x00f42400

080033a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d01a      	beq.n	80034ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034a2:	d10a      	bne.n	80034ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	605a      	str	r2, [r3, #4]
  }
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b098      	sub	sp, #96	@ 0x60
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034f8:	f7fd fd64 	bl	8000fc4 <HAL_GetTick>
 80034fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b08      	cmp	r3, #8
 800350a:	d12e      	bne.n	800356a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800350c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003514:	2200      	movs	r2, #0
 8003516:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f88c 	bl	8003638 <UART_WaitOnFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d021      	beq.n	800356a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800352e:	e853 3f00 	ldrex	r3, [r3]
 8003532:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800353a:	653b      	str	r3, [r7, #80]	@ 0x50
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	461a      	mov	r2, r3
 8003542:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003544:	647b      	str	r3, [r7, #68]	@ 0x44
 8003546:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003548:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800354a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800354c:	e841 2300 	strex	r3, r2, [r1]
 8003550:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1e6      	bne.n	8003526 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e062      	b.n	8003630 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b04      	cmp	r3, #4
 8003576:	d149      	bne.n	800360c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003578:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003580:	2200      	movs	r2, #0
 8003582:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f856 	bl	8003638 <UART_WaitOnFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d03c      	beq.n	800360c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359a:	e853 3f00 	ldrex	r3, [r3]
 800359e:	623b      	str	r3, [r7, #32]
   return(result);
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	461a      	mov	r2, r3
 80035ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80035b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035b8:	e841 2300 	strex	r3, r2, [r1]
 80035bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e6      	bne.n	8003592 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3308      	adds	r3, #8
 80035ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	e853 3f00 	ldrex	r3, [r3]
 80035d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3308      	adds	r3, #8
 80035e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035e4:	61fa      	str	r2, [r7, #28]
 80035e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	69b9      	ldr	r1, [r7, #24]
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	e841 2300 	strex	r3, r2, [r1]
 80035f0:	617b      	str	r3, [r7, #20]
   return(result);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e5      	bne.n	80035c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e011      	b.n	8003630 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2220      	movs	r2, #32
 8003610:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3758      	adds	r7, #88	@ 0x58
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	4613      	mov	r3, r2
 8003646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003648:	e04f      	b.n	80036ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d04b      	beq.n	80036ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003652:	f7fd fcb7 	bl	8000fc4 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	429a      	cmp	r2, r3
 8003660:	d302      	bcc.n	8003668 <UART_WaitOnFlagUntilTimeout+0x30>
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e04e      	b.n	800370a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d037      	beq.n	80036ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b80      	cmp	r3, #128	@ 0x80
 800367e:	d034      	beq.n	80036ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b40      	cmp	r3, #64	@ 0x40
 8003684:	d031      	beq.n	80036ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b08      	cmp	r3, #8
 8003692:	d110      	bne.n	80036b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2208      	movs	r2, #8
 800369a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f838 	bl	8003712 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2208      	movs	r2, #8
 80036a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e029      	b.n	800370a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036c4:	d111      	bne.n	80036ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f81e 	bl	8003712 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2220      	movs	r2, #32
 80036da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e00f      	b.n	800370a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4013      	ands	r3, r2
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	bf0c      	ite	eq
 80036fa:	2301      	moveq	r3, #1
 80036fc:	2300      	movne	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	429a      	cmp	r2, r3
 8003706:	d0a0      	beq.n	800364a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003712:	b480      	push	{r7}
 8003714:	b095      	sub	sp, #84	@ 0x54
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003722:	e853 3f00 	ldrex	r3, [r3]
 8003726:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800372e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003738:	643b      	str	r3, [r7, #64]	@ 0x40
 800373a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800373e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003740:	e841 2300 	strex	r3, r2, [r1]
 8003744:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e6      	bne.n	800371a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3308      	adds	r3, #8
 8003752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	e853 3f00 	ldrex	r3, [r3]
 800375a:	61fb      	str	r3, [r7, #28]
   return(result);
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f023 0301 	bic.w	r3, r3, #1
 8003762:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3308      	adds	r3, #8
 800376a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800376c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800376e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003770:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003774:	e841 2300 	strex	r3, r2, [r1]
 8003778:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e5      	bne.n	800374c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003784:	2b01      	cmp	r3, #1
 8003786:	d118      	bne.n	80037ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	60bb      	str	r3, [r7, #8]
   return(result);
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f023 0310 	bic.w	r3, r3, #16
 800379c:	647b      	str	r3, [r7, #68]	@ 0x44
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037a6:	61bb      	str	r3, [r7, #24]
 80037a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	6979      	ldr	r1, [r7, #20]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	e841 2300 	strex	r3, r2, [r1]
 80037b2:	613b      	str	r3, [r7, #16]
   return(result);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1e6      	bne.n	8003788 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80037ce:	bf00      	nop
 80037d0:	3754      	adds	r7, #84	@ 0x54
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f103 0208 	add.w	r2, r3, #8
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f04f 32ff 	mov.w	r2, #4294967295
 80037f2:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f103 0208 	add.w	r2, r3, #8
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f103 0208 	add.w	r2, r3, #8
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384a:	d103      	bne.n	8003854 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	e00c      	b.n	800386e <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3308      	adds	r3, #8
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	e002      	b.n	8003862 <vListInsert+0x2e>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	429a      	cmp	r2, r3
 800386c:	d2f6      	bcs.n	800385c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 800389a:	bf00      	nop
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6892      	ldr	r2, [r2, #8]
 80038bc:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6852      	ldr	r2, [r2, #4]
 80038c6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d103      	bne.n	80038da <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	1e5a      	subs	r2, r3, #1
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003906:	2301      	movs	r3, #1
 8003908:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10d      	bne.n	8003930 <xQueueGenericReset+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8003914:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003918:	b672      	cpsid	i
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	b662      	cpsie	i
 8003928:	60fb      	str	r3, [r7, #12]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800392a:	bf00      	nop
 800392c:	bf00      	nop
 800392e:	e7fd      	b.n	800392c <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d05d      	beq.n	80039f2 <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800393a:	2b00      	cmp	r3, #0
 800393c:	d059      	beq.n	80039f2 <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003946:	2100      	movs	r1, #0
 8003948:	fba3 2302 	umull	r2, r3, r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d000      	beq.n	8003952 <xQueueGenericReset+0x56>
 8003950:	2101      	movs	r1, #1
 8003952:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003954:	2b00      	cmp	r3, #0
 8003956:	d14c      	bne.n	80039f2 <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 8003958:	f002 fc94 	bl	8006284 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003964:	6939      	ldr	r1, [r7, #16]
 8003966:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003968:	fb01 f303 	mul.w	r3, r1, r3
 800396c:	441a      	add	r2, r3
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2200      	movs	r2, #0
 8003976:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003988:	3b01      	subs	r3, #1
 800398a:	6939      	ldr	r1, [r7, #16]
 800398c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800398e:	fb01 f303 	mul.w	r3, r1, r3
 8003992:	441a      	add	r2, r3
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	22ff      	movs	r2, #255	@ 0xff
 800399c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	22ff      	movs	r2, #255	@ 0xff
 80039a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d114      	bne.n	80039d8 <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d01a      	beq.n	80039ec <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	3310      	adds	r3, #16
 80039ba:	4618      	mov	r0, r3
 80039bc:	f001 fb6a 	bl	8005094 <xTaskRemoveFromEventList>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d012      	beq.n	80039ec <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80039c6:	4b17      	ldr	r3, [pc, #92]	@ (8003a24 <xQueueGenericReset+0x128>)
 80039c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	e009      	b.n	80039ec <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	3310      	adds	r3, #16
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff fefc 	bl	80037da <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	3324      	adds	r3, #36	@ 0x24
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff fef7 	bl	80037da <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80039ec:	f002 fc80 	bl	80062f0 <vPortExitCritical>
 80039f0:	e001      	b.n	80039f6 <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10d      	bne.n	8003a18 <xQueueGenericReset+0x11c>
    __asm volatile
 80039fc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003a00:	b672      	cpsid	i
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	b662      	cpsie	i
 8003a10:	60bb      	str	r3, [r7, #8]
}
 8003a12:	bf00      	nop
 8003a14:	bf00      	nop
 8003a16:	e7fd      	b.n	8003a14 <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8003a18:	697b      	ldr	r3, [r7, #20]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	e000ed04 	.word	0xe000ed04

08003a28 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08a      	sub	sp, #40	@ 0x28
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	4613      	mov	r3, r2
 8003a34:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d02e      	beq.n	8003a9e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003a40:	2100      	movs	r1, #0
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	fba3 2302 	umull	r2, r3, r3, r2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d000      	beq.n	8003a50 <xQueueGenericCreate+0x28>
 8003a4e:	2101      	movs	r1, #1
 8003a50:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d123      	bne.n	8003a9e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003a5e:	f113 0f55 	cmn.w	r3, #85	@ 0x55
 8003a62:	d81c      	bhi.n	8003a9e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	fb02 f303 	mul.w	r3, r2, r3
 8003a6c:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	3354      	adds	r3, #84	@ 0x54
 8003a72:	4618      	mov	r0, r3
 8003a74:	f002 fcf4 	bl	8006460 <pvPortMalloc>
 8003a78:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d01f      	beq.n	8003ac0 <xQueueGenericCreate+0x98>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	3354      	adds	r3, #84	@ 0x54
 8003a88:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a8a:	79fa      	ldrb	r2, [r7, #7]
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 f817 	bl	8003aca <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003a9c:	e010      	b.n	8003ac0 <xQueueGenericCreate+0x98>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10d      	bne.n	8003ac0 <xQueueGenericCreate+0x98>
    __asm volatile
 8003aa4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003aa8:	b672      	cpsid	i
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	b662      	cpsie	i
 8003ab8:	613b      	str	r3, [r7, #16]
}
 8003aba:	bf00      	nop
 8003abc:	bf00      	nop
 8003abe:	e7fd      	b.n	8003abc <xQueueGenericCreate+0x94>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8003ac0:	69fb      	ldr	r3, [r7, #28]
    }
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3720      	adds	r7, #32
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b084      	sub	sp, #16
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d103      	bne.n	8003ae6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	e002      	b.n	8003aec <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003af8:	2101      	movs	r1, #1
 8003afa:	69b8      	ldr	r0, [r7, #24]
 8003afc:	f7ff fefe 	bl	80038fc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	78fa      	ldrb	r2, [r7, #3]
 8003b04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
    {
        pxNewQueue->pxQueueSetContainer = NULL;
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08e      	sub	sp, #56	@ 0x38
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b26:	2300      	movs	r3, #0
 8003b28:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10d      	bne.n	8003b50 <xQueueGenericSend+0x38>
    __asm volatile
 8003b34:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003b38:	b672      	cpsid	i
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	b662      	cpsie	i
 8003b48:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b4a:	bf00      	nop
 8003b4c:	bf00      	nop
 8003b4e:	e7fd      	b.n	8003b4c <xQueueGenericSend+0x34>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d103      	bne.n	8003b5e <xQueueGenericSend+0x46>
 8003b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <xQueueGenericSend+0x4a>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <xQueueGenericSend+0x4c>
 8003b62:	2300      	movs	r3, #0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10d      	bne.n	8003b84 <xQueueGenericSend+0x6c>
    __asm volatile
 8003b68:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003b6c:	b672      	cpsid	i
 8003b6e:	f383 8811 	msr	BASEPRI, r3
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	f3bf 8f4f 	dsb	sy
 8003b7a:	b662      	cpsie	i
 8003b7c:	623b      	str	r3, [r7, #32]
}
 8003b7e:	bf00      	nop
 8003b80:	bf00      	nop
 8003b82:	e7fd      	b.n	8003b80 <xQueueGenericSend+0x68>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d103      	bne.n	8003b92 <xQueueGenericSend+0x7a>
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <xQueueGenericSend+0x7e>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <xQueueGenericSend+0x80>
 8003b96:	2300      	movs	r3, #0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10d      	bne.n	8003bb8 <xQueueGenericSend+0xa0>
    __asm volatile
 8003b9c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003ba0:	b672      	cpsid	i
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	b662      	cpsie	i
 8003bb0:	61fb      	str	r3, [r7, #28]
}
 8003bb2:	bf00      	nop
 8003bb4:	bf00      	nop
 8003bb6:	e7fd      	b.n	8003bb4 <xQueueGenericSend+0x9c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bb8:	f001 fc88 	bl	80054cc <xTaskGetSchedulerState>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d102      	bne.n	8003bc8 <xQueueGenericSend+0xb0>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <xQueueGenericSend+0xb4>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <xQueueGenericSend+0xb6>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10d      	bne.n	8003bee <xQueueGenericSend+0xd6>
    __asm volatile
 8003bd2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003bd6:	b672      	cpsid	i
 8003bd8:	f383 8811 	msr	BASEPRI, r3
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	b662      	cpsie	i
 8003be6:	61bb      	str	r3, [r7, #24]
}
 8003be8:	bf00      	nop
 8003bea:	bf00      	nop
 8003bec:	e7fd      	b.n	8003bea <xQueueGenericSend+0xd2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003bee:	f002 fb49 	bl	8006284 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d302      	bcc.n	8003c04 <xQueueGenericSend+0xec>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d145      	bne.n	8003c90 <xQueueGenericSend+0x178>
            {
                traceQUEUE_SEND( pxQueue );

                #if ( configUSE_QUEUE_SETS == 1 )
                {
                    const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c08:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	68b9      	ldr	r1, [r7, #8]
 8003c0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c10:	f000 faae 	bl	8004170 <prvCopyDataToQueue>
 8003c14:	62b8      	str	r0, [r7, #40]	@ 0x28

                    if( pxQueue->pxQueueSetContainer != NULL )
 8003c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d014      	beq.n	8003c48 <xQueueGenericSend+0x130>
                    {
                        if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d102      	bne.n	8003c2a <xQueueGenericSend+0x112>
 8003c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d12e      	bne.n	8003c88 <xQueueGenericSend+0x170>
                            /* Do not notify the queue set as an existing item
                             * was overwritten in the queue so the number of items
                             * in the queue has not changed. */
                            mtCOVERAGE_TEST_MARKER();
                        }
                        else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8003c2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c2c:	f000 fc44 	bl	80044b8 <prvNotifyQueueSetContainer>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d028      	beq.n	8003c88 <xQueueGenericSend+0x170>
                        {
                            /* The queue is a member of a queue set, and posting
                             * to the queue set caused a higher priority task to
                             * unblock. A context switch is required. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003c36:	4b4a      	ldr	r3, [pc, #296]	@ (8003d60 <xQueueGenericSend+0x248>)
 8003c38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	e01f      	b.n	8003c88 <xQueueGenericSend+0x170>
                    }
                    else
                    {
                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d010      	beq.n	8003c72 <xQueueGenericSend+0x15a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c52:	3324      	adds	r3, #36	@ 0x24
 8003c54:	4618      	mov	r0, r3
 8003c56:	f001 fa1d 	bl	8005094 <xTaskRemoveFromEventList>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d013      	beq.n	8003c88 <xQueueGenericSend+0x170>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to
                                 * do this from within the critical section - the
                                 * kernel takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003c60:	4b3f      	ldr	r3, [pc, #252]	@ (8003d60 <xQueueGenericSend+0x248>)
 8003c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	e00a      	b.n	8003c88 <xQueueGenericSend+0x170>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d007      	beq.n	8003c88 <xQueueGenericSend+0x170>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes
                             * and the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003c78:	4b39      	ldr	r3, [pc, #228]	@ (8003d60 <xQueueGenericSend+0x248>)
 8003c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003c88:	f002 fb32 	bl	80062f0 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e063      	b.n	8003d58 <xQueueGenericSend+0x240>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d103      	bne.n	8003c9e <xQueueGenericSend+0x186>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003c96:	f002 fb2b 	bl	80062f0 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e05c      	b.n	8003d58 <xQueueGenericSend+0x240>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d106      	bne.n	8003cb2 <xQueueGenericSend+0x19a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003ca4:	f107 0310 	add.w	r3, r7, #16
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f001 facf 	bl	800524c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003cb2:	f002 fb1d 	bl	80062f0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003cb6:	f000 fecd 	bl	8004a54 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003cba:	f002 fae3 	bl	8006284 <vPortEnterCritical>
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cc4:	b25b      	sxtb	r3, r3
 8003cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cca:	d103      	bne.n	8003cd4 <xQueueGenericSend+0x1bc>
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cda:	b25b      	sxtb	r3, r3
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce0:	d103      	bne.n	8003cea <xQueueGenericSend+0x1d2>
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cea:	f002 fb01 	bl	80062f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cee:	1d3a      	adds	r2, r7, #4
 8003cf0:	f107 0310 	add.w	r3, r7, #16
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f001 fabe 	bl	8005278 <xTaskCheckForTimeOut>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d124      	bne.n	8003d4c <xQueueGenericSend+0x234>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d04:	f000 fb39 	bl	800437a <prvIsQueueFull>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d018      	beq.n	8003d40 <xQueueGenericSend+0x228>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d10:	3310      	adds	r3, #16
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	4611      	mov	r1, r2
 8003d16:	4618      	mov	r0, r3
 8003d18:	f001 f94c 	bl	8004fb4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003d1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d1e:	f000 fab7 	bl	8004290 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003d22:	f000 fea5 	bl	8004a70 <xTaskResumeAll>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f47f af60 	bne.w	8003bee <xQueueGenericSend+0xd6>
                {
                    taskYIELD_WITHIN_API();
 8003d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d60 <xQueueGenericSend+0x248>)
 8003d30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	e756      	b.n	8003bee <xQueueGenericSend+0xd6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003d40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d42:	f000 faa5 	bl	8004290 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003d46:	f000 fe93 	bl	8004a70 <xTaskResumeAll>
 8003d4a:	e750      	b.n	8003bee <xQueueGenericSend+0xd6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003d4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d4e:	f000 fa9f 	bl	8004290 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003d52:	f000 fe8d 	bl	8004a70 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8003d56:	2300      	movs	r3, #0
        }
    }
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3738      	adds	r7, #56	@ 0x38
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	e000ed04 	.word	0xe000ed04

08003d64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08c      	sub	sp, #48	@ 0x30
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003d70:	2300      	movs	r3, #0
 8003d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10d      	bne.n	8003d9a <xQueueReceive+0x36>
    __asm volatile
 8003d7e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003d82:	b672      	cpsid	i
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	b662      	cpsie	i
 8003d92:	623b      	str	r3, [r7, #32]
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	e7fd      	b.n	8003d96 <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d103      	bne.n	8003da8 <xQueueReceive+0x44>
 8003da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <xQueueReceive+0x48>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <xQueueReceive+0x4a>
 8003dac:	2300      	movs	r3, #0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10d      	bne.n	8003dce <xQueueReceive+0x6a>
    __asm volatile
 8003db2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003db6:	b672      	cpsid	i
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	b662      	cpsie	i
 8003dc6:	61fb      	str	r3, [r7, #28]
}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	e7fd      	b.n	8003dca <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dce:	f001 fb7d 	bl	80054cc <xTaskGetSchedulerState>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d102      	bne.n	8003dde <xQueueReceive+0x7a>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <xQueueReceive+0x7e>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <xQueueReceive+0x80>
 8003de2:	2300      	movs	r3, #0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10d      	bne.n	8003e04 <xQueueReceive+0xa0>
    __asm volatile
 8003de8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003dec:	b672      	cpsid	i
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	b662      	cpsie	i
 8003dfc:	61bb      	str	r3, [r7, #24]
}
 8003dfe:	bf00      	nop
 8003e00:	bf00      	nop
 8003e02:	e7fd      	b.n	8003e00 <xQueueReceive+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003e04:	f002 fa3e 	bl	8006284 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01f      	beq.n	8003e54 <xQueueReceive+0xf0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e14:	68b9      	ldr	r1, [r7, #8]
 8003e16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e18:	f000 fa14 	bl	8004244 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	1e5a      	subs	r2, r3, #1
 8003e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e22:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00f      	beq.n	8003e4c <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2e:	3310      	adds	r3, #16
 8003e30:	4618      	mov	r0, r3
 8003e32:	f001 f92f 	bl	8005094 <xTaskRemoveFromEventList>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d007      	beq.n	8003e4c <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003e3c:	4b3c      	ldr	r3, [pc, #240]	@ (8003f30 <xQueueReceive+0x1cc>)
 8003e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003e4c:	f002 fa50 	bl	80062f0 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e069      	b.n	8003f28 <xQueueReceive+0x1c4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d103      	bne.n	8003e62 <xQueueReceive+0xfe>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003e5a:	f002 fa49 	bl	80062f0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e062      	b.n	8003f28 <xQueueReceive+0x1c4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d106      	bne.n	8003e76 <xQueueReceive+0x112>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003e68:	f107 0310 	add.w	r3, r7, #16
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f001 f9ed 	bl	800524c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003e72:	2301      	movs	r3, #1
 8003e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003e76:	f002 fa3b 	bl	80062f0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003e7a:	f000 fdeb 	bl	8004a54 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003e7e:	f002 fa01 	bl	8006284 <vPortEnterCritical>
 8003e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e88:	b25b      	sxtb	r3, r3
 8003e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8e:	d103      	bne.n	8003e98 <xQueueReceive+0x134>
 8003e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e9e:	b25b      	sxtb	r3, r3
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea4:	d103      	bne.n	8003eae <xQueueReceive+0x14a>
 8003ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003eae:	f002 fa1f 	bl	80062f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003eb2:	1d3a      	adds	r2, r7, #4
 8003eb4:	f107 0310 	add.w	r3, r7, #16
 8003eb8:	4611      	mov	r1, r2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f001 f9dc 	bl	8005278 <xTaskCheckForTimeOut>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d123      	bne.n	8003f0e <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ec6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ec8:	f000 fa41 	bl	800434e <prvIsQueueEmpty>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d017      	beq.n	8003f02 <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed4:	3324      	adds	r3, #36	@ 0x24
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	4611      	mov	r1, r2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f001 f86a 	bl	8004fb4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003ee0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ee2:	f000 f9d5 	bl	8004290 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003ee6:	f000 fdc3 	bl	8004a70 <xTaskResumeAll>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d189      	bne.n	8003e04 <xQueueReceive+0xa0>
                {
                    taskYIELD_WITHIN_API();
 8003ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f30 <xQueueReceive+0x1cc>)
 8003ef2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	e780      	b.n	8003e04 <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003f02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f04:	f000 f9c4 	bl	8004290 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003f08:	f000 fdb2 	bl	8004a70 <xTaskResumeAll>
 8003f0c:	e77a      	b.n	8003e04 <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003f0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f10:	f000 f9be 	bl	8004290 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003f14:	f000 fdac 	bl	8004a70 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f1a:	f000 fa18 	bl	800434e <prvIsQueueEmpty>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f43f af6f 	beq.w	8003e04 <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8003f26:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3730      	adds	r7, #48	@ 0x30
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	e000ed04 	.word	0xe000ed04

08003f34 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08c      	sub	sp, #48	@ 0x30
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003f46:	2300      	movs	r3, #0
 8003f48:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10d      	bne.n	8003f6c <xQueueSemaphoreTake+0x38>
    __asm volatile
 8003f50:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003f54:	b672      	cpsid	i
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	b662      	cpsie	i
 8003f64:	61bb      	str	r3, [r7, #24]
}
 8003f66:	bf00      	nop
 8003f68:	bf00      	nop
 8003f6a:	e7fd      	b.n	8003f68 <xQueueSemaphoreTake+0x34>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00d      	beq.n	8003f90 <xQueueSemaphoreTake+0x5c>
    __asm volatile
 8003f74:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003f78:	b672      	cpsid	i
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	b662      	cpsie	i
 8003f88:	617b      	str	r3, [r7, #20]
}
 8003f8a:	bf00      	nop
 8003f8c:	bf00      	nop
 8003f8e:	e7fd      	b.n	8003f8c <xQueueSemaphoreTake+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f90:	f001 fa9c 	bl	80054cc <xTaskGetSchedulerState>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d102      	bne.n	8003fa0 <xQueueSemaphoreTake+0x6c>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <xQueueSemaphoreTake+0x70>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <xQueueSemaphoreTake+0x72>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10d      	bne.n	8003fc6 <xQueueSemaphoreTake+0x92>
    __asm volatile
 8003faa:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003fae:	b672      	cpsid	i
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	b662      	cpsie	i
 8003fbe:	613b      	str	r3, [r7, #16]
}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	e7fd      	b.n	8003fc2 <xQueueSemaphoreTake+0x8e>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003fc6:	f002 f95d 	bl	8006284 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fce:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d024      	beq.n	8004020 <xQueueSemaphoreTake+0xec>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	1e5a      	subs	r2, r3, #1
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d104      	bne.n	8003ff0 <xQueueSemaphoreTake+0xbc>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003fe6:	f001 fc9d 	bl	8005924 <pvTaskIncrementMutexHeldCount>
 8003fea:	4602      	mov	r2, r0
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fee:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00f      	beq.n	8004018 <xQueueSemaphoreTake+0xe4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	3310      	adds	r3, #16
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f001 f849 	bl	8005094 <xTaskRemoveFromEventList>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d007      	beq.n	8004018 <xQueueSemaphoreTake+0xe4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004008:	4b4c      	ldr	r3, [pc, #304]	@ (800413c <xQueueSemaphoreTake+0x208>)
 800400a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004018:	f002 f96a 	bl	80062f0 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 800401c:	2301      	movs	r3, #1
 800401e:	e089      	b.n	8004134 <xQueueSemaphoreTake+0x200>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d103      	bne.n	800402e <xQueueSemaphoreTake+0xfa>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8004026:	f002 f963 	bl	80062f0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 800402a:	2300      	movs	r3, #0
 800402c:	e082      	b.n	8004134 <xQueueSemaphoreTake+0x200>
                }
                else if( xEntryTimeSet == pdFALSE )
 800402e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d106      	bne.n	8004042 <xQueueSemaphoreTake+0x10e>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004034:	f107 0308 	add.w	r3, r7, #8
 8004038:	4618      	mov	r0, r3
 800403a:	f001 f907 	bl	800524c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800403e:	2301      	movs	r3, #1
 8004040:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004042:	f002 f955 	bl	80062f0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004046:	f000 fd05 	bl	8004a54 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800404a:	f002 f91b 	bl	8006284 <vPortEnterCritical>
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004054:	b25b      	sxtb	r3, r3
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405a:	d103      	bne.n	8004064 <xQueueSemaphoreTake+0x130>
 800405c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004066:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800406a:	b25b      	sxtb	r3, r3
 800406c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004070:	d103      	bne.n	800407a <xQueueSemaphoreTake+0x146>
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800407a:	f002 f939 	bl	80062f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800407e:	463a      	mov	r2, r7
 8004080:	f107 0308 	add.w	r3, r7, #8
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f001 f8f6 	bl	8005278 <xTaskCheckForTimeOut>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d132      	bne.n	80040f8 <xQueueSemaphoreTake+0x1c4>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004092:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004094:	f000 f95b 	bl	800434e <prvIsQueueEmpty>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d026      	beq.n	80040ec <xQueueSemaphoreTake+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <xQueueSemaphoreTake+0x186>
                    {
                        taskENTER_CRITICAL();
 80040a6:	f002 f8ed 	bl	8006284 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 fa2a 	bl	8005508 <xTaskPriorityInherit>
 80040b4:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 80040b6:	f002 f91b 	bl	80062f0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	3324      	adds	r3, #36	@ 0x24
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 ff76 	bl	8004fb4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80040c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040ca:	f000 f8e1 	bl	8004290 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80040ce:	f000 fccf 	bl	8004a70 <xTaskResumeAll>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f47f af76 	bne.w	8003fc6 <xQueueSemaphoreTake+0x92>
                {
                    taskYIELD_WITHIN_API();
 80040da:	4b18      	ldr	r3, [pc, #96]	@ (800413c <xQueueSemaphoreTake+0x208>)
 80040dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	e76c      	b.n	8003fc6 <xQueueSemaphoreTake+0x92>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80040ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040ee:	f000 f8cf 	bl	8004290 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80040f2:	f000 fcbd 	bl	8004a70 <xTaskResumeAll>
 80040f6:	e766      	b.n	8003fc6 <xQueueSemaphoreTake+0x92>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80040f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040fa:	f000 f8c9 	bl	8004290 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80040fe:	f000 fcb7 	bl	8004a70 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004102:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004104:	f000 f923 	bl	800434e <prvIsQueueEmpty>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	f43f af5b 	beq.w	8003fc6 <xQueueSemaphoreTake+0x92>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8004110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00d      	beq.n	8004132 <xQueueSemaphoreTake+0x1fe>
                    {
                        taskENTER_CRITICAL();
 8004116:	f002 f8b5 	bl	8006284 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800411a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800411c:	f000 f810 	bl	8004140 <prvGetDisinheritPriorityAfterTimeout>
 8004120:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	69f9      	ldr	r1, [r7, #28]
 8004128:	4618      	mov	r0, r3
 800412a:	f001 fb39 	bl	80057a0 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800412e:	f002 f8df 	bl	80062f0 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8004132:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8004134:	4618      	mov	r0, r3
 8004136:	3730      	adds	r7, #48	@ 0x30
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	e000ed04 	.word	0xe000ed04

08004140 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414c:	2b00      	cmp	r3, #0
 800414e:	d006      	beq.n	800415e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f1c3 0305 	rsb	r3, r3, #5
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e001      	b.n	8004162 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8004162:	68fb      	ldr	r3, [r7, #12]
    }
 8004164:	4618      	mov	r0, r3
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004184:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10d      	bne.n	80041aa <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d14d      	bne.n	8004232 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	4618      	mov	r0, r3
 800419c:	f001 fa54 	bl	8005648 <xTaskPriorityDisinherit>
 80041a0:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	609a      	str	r2, [r3, #8]
 80041a8:	e043      	b.n	8004232 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d119      	bne.n	80041e4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6858      	ldr	r0, [r3, #4]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b8:	461a      	mov	r2, r3
 80041ba:	68b9      	ldr	r1, [r7, #8]
 80041bc:	f002 fdc3 	bl	8006d46 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c8:	441a      	add	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d32b      	bcc.n	8004232 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	605a      	str	r2, [r3, #4]
 80041e2:	e026      	b.n	8004232 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68d8      	ldr	r0, [r3, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ec:	461a      	mov	r2, r3
 80041ee:	68b9      	ldr	r1, [r7, #8]
 80041f0:	f002 fda9 	bl	8006d46 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fc:	425b      	negs	r3, r3
 80041fe:	441a      	add	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d207      	bcs.n	8004220 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004218:	425b      	negs	r3, r3
 800421a:	441a      	add	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d105      	bne.n	8004232 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	3b01      	subs	r3, #1
 8004230:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800423a:	697b      	ldr	r3, [r7, #20]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d018      	beq.n	8004288 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425e:	441a      	add	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	429a      	cmp	r2, r3
 800426e:	d303      	bcc.n	8004278 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68d9      	ldr	r1, [r3, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004280:	461a      	mov	r2, r3
 8004282:	6838      	ldr	r0, [r7, #0]
 8004284:	f002 fd5f 	bl	8006d46 <memcpy>
    }
}
 8004288:	bf00      	nop
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004298:	f001 fff4 	bl	8006284 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042a2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80042a4:	e01e      	b.n	80042e4 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <prvUnlockQueue+0x30>
                {
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f902 	bl	80044b8 <prvNotifyQueueSetContainer>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d010      	beq.n	80042dc <prvUnlockQueue+0x4c>
                    {
                        /* The queue is a member of a queue set, and posting to
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
 80042ba:	f001 f849 	bl	8005350 <vTaskMissedYield>
 80042be:	e00d      	b.n	80042dc <prvUnlockQueue+0x4c>
                else
                {
                    /* Tasks that are removed from the event list will get
                     * added to the pending ready list as the scheduler is still
                     * suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d012      	beq.n	80042ee <prvUnlockQueue+0x5e>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3324      	adds	r3, #36	@ 0x24
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fee1 	bl	8005094 <xTaskRemoveFromEventList>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <prvUnlockQueue+0x4c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            vTaskMissedYield();
 80042d8:	f001 f83a 	bl	8005350 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	3b01      	subs	r3, #1
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80042e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	dcdc      	bgt.n	80042a6 <prvUnlockQueue+0x16>
 80042ec:	e000      	b.n	80042f0 <prvUnlockQueue+0x60>
                        break;
 80042ee:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	22ff      	movs	r2, #255	@ 0xff
 80042f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80042f8:	f001 fffa 	bl	80062f0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80042fc:	f001 ffc2 	bl	8006284 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004306:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004308:	e011      	b.n	800432e <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d012      	beq.n	8004338 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3310      	adds	r3, #16
 8004316:	4618      	mov	r0, r3
 8004318:	f000 febc 	bl	8005094 <xTaskRemoveFromEventList>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 8004322:	f001 f815 	bl	8005350 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004326:	7bbb      	ldrb	r3, [r7, #14]
 8004328:	3b01      	subs	r3, #1
 800432a:	b2db      	uxtb	r3, r3
 800432c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800432e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004332:	2b00      	cmp	r3, #0
 8004334:	dce9      	bgt.n	800430a <prvUnlockQueue+0x7a>
 8004336:	e000      	b.n	800433a <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8004338:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	22ff      	movs	r2, #255	@ 0xff
 800433e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8004342:	f001 ffd5 	bl	80062f0 <vPortExitCritical>
}
 8004346:	bf00      	nop
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004356:	f001 ff95 	bl	8006284 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435e:	2b00      	cmp	r3, #0
 8004360:	d102      	bne.n	8004368 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004362:	2301      	movs	r3, #1
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	e001      	b.n	800436c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800436c:	f001 ffc0 	bl	80062f0 <vPortExitCritical>

    return xReturn;
 8004370:	68fb      	ldr	r3, [r7, #12]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004382:	f001 ff7f 	bl	8006284 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800438e:	429a      	cmp	r2, r3
 8004390:	d102      	bne.n	8004398 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004392:	2301      	movs	r3, #1
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	e001      	b.n	800439c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800439c:	f001 ffa8 	bl	80062f0 <vPortExitCritical>

    return xReturn;
 80043a0:	68fb      	ldr	r3, [r7, #12]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10d      	bne.n	80043dc <vQueueAddToRegistry+0x30>
    __asm volatile
 80043c0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80043c4:	b672      	cpsid	i
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	b662      	cpsie	i
 80043d4:	60fb      	str	r3, [r7, #12]
}
 80043d6:	bf00      	nop
 80043d8:	bf00      	nop
 80043da:	e7fd      	b.n	80043d8 <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d024      	beq.n	800442c <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	e01e      	b.n	8004426 <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80043e8:	4a18      	ldr	r2, [pc, #96]	@ (800444c <vQueueAddToRegistry+0xa0>)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4413      	add	r3, r2
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d105      	bne.n	8004404 <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	4a13      	ldr	r2, [pc, #76]	@ (800444c <vQueueAddToRegistry+0xa0>)
 80043fe:	4413      	add	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
                    break;
 8004402:	e013      	b.n	800442c <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <vQueueAddToRegistry+0x74>
 800440a:	4a10      	ldr	r2, [pc, #64]	@ (800444c <vQueueAddToRegistry+0xa0>)
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d104      	bne.n	8004420 <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4a0c      	ldr	r2, [pc, #48]	@ (800444c <vQueueAddToRegistry+0xa0>)
 800441c:	4413      	add	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	3301      	adds	r3, #1
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b07      	cmp	r3, #7
 800442a:	d9dd      	bls.n	80043e8 <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	2000026c 	.word	0x2000026c

08004450 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004460:	f001 ff10 	bl	8006284 <vPortEnterCritical>
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800446a:	b25b      	sxtb	r3, r3
 800446c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004470:	d103      	bne.n	800447a <vQueueWaitForMessageRestricted+0x2a>
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004480:	b25b      	sxtb	r3, r3
 8004482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004486:	d103      	bne.n	8004490 <vQueueWaitForMessageRestricted+0x40>
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004490:	f001 ff2e 	bl	80062f0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004498:	2b00      	cmp	r3, #0
 800449a:	d106      	bne.n	80044aa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	3324      	adds	r3, #36	@ 0x24
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	68b9      	ldr	r1, [r7, #8]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fdad 	bl	8005004 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80044aa:	6978      	ldr	r0, [r7, #20]
 80044ac:	f7ff fef0 	bl	8004290 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 80044b0:	bf00      	nop
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	@ 0x28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044c4:	623b      	str	r3, [r7, #32]
        BaseType_t xReturn = pdFALSE;
 80044c6:	2300      	movs	r3, #0
 80044c8:	627b      	str	r3, [r7, #36]	@ 0x24
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10d      	bne.n	80044ec <prvNotifyQueueSetContainer+0x34>
    __asm volatile
 80044d0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80044d4:	b672      	cpsid	i
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	b662      	cpsie	i
 80044e4:	617b      	str	r3, [r7, #20]
}
 80044e6:	bf00      	nop
 80044e8:	bf00      	nop
 80044ea:	e7fd      	b.n	80044e8 <prvNotifyQueueSetContainer+0x30>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d30d      	bcc.n	8004514 <prvNotifyQueueSetContainer+0x5c>
    __asm volatile
 80044f8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80044fc:	b672      	cpsid	i
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	b662      	cpsie	i
 800450c:	613b      	str	r3, [r7, #16]
}
 800450e:	bf00      	nop
 8004510:	bf00      	nop
 8004512:	e7fd      	b.n	8004510 <prvNotifyQueueSetContainer+0x58>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800451c:	429a      	cmp	r2, r3
 800451e:	d23f      	bcs.n	80045a0 <prvNotifyQueueSetContainer+0xe8>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004526:	77fb      	strb	r3, [r7, #31]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8004528:	1d3b      	adds	r3, r7, #4
 800452a:	2200      	movs	r2, #0
 800452c:	4619      	mov	r1, r3
 800452e:	6a38      	ldr	r0, [r7, #32]
 8004530:	f7ff fe1e 	bl	8004170 <prvCopyDataToQueue>
 8004534:	6278      	str	r0, [r7, #36]	@ 0x24

            if( cTxLock == queueUNLOCKED )
 8004536:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800453a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453e:	d10e      	bne.n	800455e <prvNotifyQueueSetContainer+0xa6>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	2b00      	cmp	r3, #0
 8004546:	d02b      	beq.n	80045a0 <prvNotifyQueueSetContainer+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	3324      	adds	r3, #36	@ 0x24
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fda1 	bl	8005094 <xTaskRemoveFromEventList>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d023      	beq.n	80045a0 <prvNotifyQueueSetContainer+0xe8>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8004558:	2301      	movs	r3, #1
 800455a:	627b      	str	r3, [r7, #36]	@ 0x24
 800455c:	e020      	b.n	80045a0 <prvNotifyQueueSetContainer+0xe8>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
 800455e:	f000 fba1 	bl	8004ca4 <uxTaskGetNumberOfTasks>
 8004562:	61b8      	str	r0, [r7, #24]
 8004564:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	429a      	cmp	r2, r3
 800456c:	d918      	bls.n	80045a0 <prvNotifyQueueSetContainer+0xe8>
 800456e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004572:	2b7f      	cmp	r3, #127	@ 0x7f
 8004574:	d10d      	bne.n	8004592 <prvNotifyQueueSetContainer+0xda>
    __asm volatile
 8004576:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800457a:	b672      	cpsid	i
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	b662      	cpsie	i
 800458a:	60fb      	str	r3, [r7, #12]
}
 800458c:	bf00      	nop
 800458e:	bf00      	nop
 8004590:	e7fd      	b.n	800458e <prvNotifyQueueSetContainer+0xd6>
 8004592:	7ffb      	ldrb	r3, [r7, #31]
 8004594:	3301      	adds	r3, #1
 8004596:	b2db      	uxtb	r3, r3
 8004598:	b25a      	sxtb	r2, r3
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80045a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80045a2:	4618      	mov	r0, r3
 80045a4:	3728      	adds	r7, #40	@ 0x28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b08a      	sub	sp, #40	@ 0x28
 80045ae:	af04      	add	r7, sp, #16
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4618      	mov	r0, r3
 80045be:	f001 ff4f 	bl	8006460 <pvPortMalloc>
 80045c2:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d013      	beq.n	80045f2 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80045ca:	2058      	movs	r0, #88	@ 0x58
 80045cc:	f001 ff48 	bl	8006460 <pvPortMalloc>
 80045d0:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80045d8:	2258      	movs	r2, #88	@ 0x58
 80045da:	2100      	movs	r1, #0
 80045dc:	6978      	ldr	r0, [r7, #20]
 80045de:	f002 fb36 	bl	8006c4e <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80045e8:	e005      	b.n	80045f6 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80045ea:	6938      	ldr	r0, [r7, #16]
 80045ec:	f002 f876 	bl	80066dc <vPortFree>
 80045f0:	e001      	b.n	80045f6 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80045f2:	2300      	movs	r3, #0
 80045f4:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00d      	beq.n	8004618 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80045fc:	2300      	movs	r3, #0
 80045fe:	9303      	str	r3, [sp, #12]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	9302      	str	r3, [sp, #8]
 8004604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f828 	bl	8004668 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8004618:	697b      	ldr	r3, [r7, #20]
    }
 800461a:	4618      	mov	r0, r3
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004622:	b580      	push	{r7, lr}
 8004624:	b088      	sub	sp, #32
 8004626:	af02      	add	r7, sp, #8
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	607a      	str	r2, [r7, #4]
 800462e:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8004630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004632:	9301      	str	r3, [sp, #4]
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	68b9      	ldr	r1, [r7, #8]
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f7ff ffb3 	bl	80045aa <prvCreateTask>
 8004644:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800464c:	6938      	ldr	r0, [r7, #16]
 800464e:	f000 f89f 	bl	8004790 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004652:	2301      	movs	r3, #1
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	e002      	b.n	800465e <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004658:	f04f 33ff 	mov.w	r3, #4294967295
 800465c:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 800465e:	697b      	ldr	r3, [r7, #20]
    }
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8004676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004678:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	461a      	mov	r2, r3
 8004680:	21a5      	movs	r1, #165	@ 0xa5
 8004682:	f002 fae4 	bl	8006c4e <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8004686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004688:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004690:	440b      	add	r3, r1
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	f023 0307 	bic.w	r3, r3, #7
 800469e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00d      	beq.n	80046c6 <prvInitialiseNewTask+0x5e>
    __asm volatile
 80046aa:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80046ae:	b672      	cpsid	i
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	b662      	cpsie	i
 80046be:	617b      	str	r3, [r7, #20]
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	e7fd      	b.n	80046c2 <prvInitialiseNewTask+0x5a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01e      	beq.n	800470a <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046cc:	2300      	movs	r3, #0
 80046ce:	61fb      	str	r3, [r7, #28]
 80046d0:	e012      	b.n	80046f8 <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	4413      	add	r3, r2
 80046d8:	7819      	ldrb	r1, [r3, #0]
 80046da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	4413      	add	r3, r2
 80046e0:	3334      	adds	r3, #52	@ 0x34
 80046e2:	460a      	mov	r2, r1
 80046e4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	4413      	add	r3, r2
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d006      	beq.n	8004700 <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	3301      	adds	r3, #1
 80046f6:	61fb      	str	r3, [r7, #28]
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	2b09      	cmp	r3, #9
 80046fc:	d9e9      	bls.n	80046d2 <prvInitialiseNewTask+0x6a>
 80046fe:	e000      	b.n	8004702 <prvInitialiseNewTask+0x9a>
            {
                break;
 8004700:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8004702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800470a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470c:	2b04      	cmp	r3, #4
 800470e:	d90d      	bls.n	800472c <prvInitialiseNewTask+0xc4>
    __asm volatile
 8004710:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004714:	b672      	cpsid	i
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	b662      	cpsie	i
 8004724:	613b      	str	r3, [r7, #16]
}
 8004726:	bf00      	nop
 8004728:	bf00      	nop
 800472a:	e7fd      	b.n	8004728 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800472c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472e:	2b04      	cmp	r3, #4
 8004730:	d901      	bls.n	8004736 <prvInitialiseNewTask+0xce>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004732:	2304      	movs	r3, #4
 8004734:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004738:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800473a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800473c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004740:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004744:	3304      	adds	r3, #4
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff f867 	bl	800381a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800474c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474e:	3318      	adds	r3, #24
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff f862 	bl	800381a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800475a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800475c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475e:	f1c3 0205 	rsb	r2, r3, #5
 8004762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004764:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800476a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	68f9      	ldr	r1, [r7, #12]
 8004770:	69b8      	ldr	r0, [r7, #24]
 8004772:	f001 fc25 	bl	8005fc0 <pxPortInitialiseStack>
 8004776:	4602      	mov	r2, r0
 8004778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477a:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800477c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <prvInitialiseNewTask+0x120>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004786:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004788:	bf00      	nop
 800478a:	3720      	adds	r7, #32
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8004798:	f001 fd74 	bl	8006284 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800479c:	4b41      	ldr	r3, [pc, #260]	@ (80048a4 <prvAddNewTaskToReadyList+0x114>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3301      	adds	r3, #1
 80047a2:	4a40      	ldr	r2, [pc, #256]	@ (80048a4 <prvAddNewTaskToReadyList+0x114>)
 80047a4:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80047a6:	4b40      	ldr	r3, [pc, #256]	@ (80048a8 <prvAddNewTaskToReadyList+0x118>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d109      	bne.n	80047c2 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80047ae:	4a3e      	ldr	r2, [pc, #248]	@ (80048a8 <prvAddNewTaskToReadyList+0x118>)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80047b4:	4b3b      	ldr	r3, [pc, #236]	@ (80048a4 <prvAddNewTaskToReadyList+0x114>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d110      	bne.n	80047de <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80047bc:	f000 fdec 	bl	8005398 <prvInitialiseTaskLists>
 80047c0:	e00d      	b.n	80047de <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80047c2:	4b3a      	ldr	r3, [pc, #232]	@ (80048ac <prvAddNewTaskToReadyList+0x11c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d109      	bne.n	80047de <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80047ca:	4b37      	ldr	r3, [pc, #220]	@ (80048a8 <prvAddNewTaskToReadyList+0x118>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d802      	bhi.n	80047de <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80047d8:	4a33      	ldr	r2, [pc, #204]	@ (80048a8 <prvAddNewTaskToReadyList+0x118>)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80047de:	4b34      	ldr	r3, [pc, #208]	@ (80048b0 <prvAddNewTaskToReadyList+0x120>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3301      	adds	r3, #1
 80047e4:	4a32      	ldr	r2, [pc, #200]	@ (80048b0 <prvAddNewTaskToReadyList+0x120>)
 80047e6:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80047e8:	4b31      	ldr	r3, [pc, #196]	@ (80048b0 <prvAddNewTaskToReadyList+0x120>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f4:	2201      	movs	r2, #1
 80047f6:	409a      	lsls	r2, r3
 80047f8:	4b2e      	ldr	r3, [pc, #184]	@ (80048b4 <prvAddNewTaskToReadyList+0x124>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	4a2d      	ldr	r2, [pc, #180]	@ (80048b4 <prvAddNewTaskToReadyList+0x124>)
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004806:	492c      	ldr	r1, [pc, #176]	@ (80048b8 <prvAddNewTaskToReadyList+0x128>)
 8004808:	4613      	mov	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	3304      	adds	r3, #4
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	609a      	str	r2, [r3, #8]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	60da      	str	r2, [r3, #12]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	3204      	adds	r2, #4
 800482e:	605a      	str	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	1d1a      	adds	r2, r3, #4
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	609a      	str	r2, [r3, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4a1c      	ldr	r2, [pc, #112]	@ (80048b8 <prvAddNewTaskToReadyList+0x128>)
 8004846:	441a      	add	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	615a      	str	r2, [r3, #20]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004850:	4919      	ldr	r1, [pc, #100]	@ (80048b8 <prvAddNewTaskToReadyList+0x128>)
 8004852:	4613      	mov	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004862:	1c59      	adds	r1, r3, #1
 8004864:	4814      	ldr	r0, [pc, #80]	@ (80048b8 <prvAddNewTaskToReadyList+0x128>)
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4403      	add	r3, r0
 8004870:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8004872:	f001 fd3d 	bl	80062f0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8004876:	4b0d      	ldr	r3, [pc, #52]	@ (80048ac <prvAddNewTaskToReadyList+0x11c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00e      	beq.n	800489c <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800487e:	4b0a      	ldr	r3, [pc, #40]	@ (80048a8 <prvAddNewTaskToReadyList+0x118>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004888:	429a      	cmp	r2, r3
 800488a:	d207      	bcs.n	800489c <prvAddNewTaskToReadyList+0x10c>
 800488c:	4b0b      	ldr	r3, [pc, #44]	@ (80048bc <prvAddNewTaskToReadyList+0x12c>)
 800488e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800489c:	bf00      	nop
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20000384 	.word	0x20000384
 80048a8:	200002ac 	.word	0x200002ac
 80048ac:	20000390 	.word	0x20000390
 80048b0:	200003a0 	.word	0x200003a0
 80048b4:	2000038c 	.word	0x2000038c
 80048b8:	200002b0 	.word	0x200002b0
 80048bc:	e000ed04 	.word	0xe000ed04

080048c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d01a      	beq.n	8004908 <vTaskDelay+0x48>
        {
            vTaskSuspendAll();
 80048d2:	f000 f8bf 	bl	8004a54 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 80048d6:	4b14      	ldr	r3, [pc, #80]	@ (8004928 <vTaskDelay+0x68>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d00d      	beq.n	80048fa <vTaskDelay+0x3a>
    __asm volatile
 80048de:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80048e2:	b672      	cpsid	i
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	b662      	cpsie	i
 80048f2:	60bb      	str	r3, [r7, #8]
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop
 80048f8:	e7fd      	b.n	80048f6 <vTaskDelay+0x36>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048fa:	2100      	movs	r1, #0
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f001 f829 	bl	8005954 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004902:	f000 f8b5 	bl	8004a70 <xTaskResumeAll>
 8004906:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d107      	bne.n	800491e <vTaskDelay+0x5e>
        {
            taskYIELD_WITHIN_API();
 800490e:	4b07      	ldr	r3, [pc, #28]	@ (800492c <vTaskDelay+0x6c>)
 8004910:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	200003ac 	.word	0x200003ac
 800492c:	e000ed04 	.word	0xe000ed04

08004930 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08a      	sub	sp, #40	@ 0x28
 8004934:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8004936:	2301      	movs	r3, #1
 8004938:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	e011      	b.n	8004968 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8004944:	4a1c      	ldr	r2, [pc, #112]	@ (80049b8 <prvCreateIdleTasks+0x88>)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	4413      	add	r3, r2
 800494a:	7819      	ldrb	r1, [r3, #0]
 800494c:	1d3a      	adds	r2, r7, #4
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	4413      	add	r3, r2
 8004952:	460a      	mov	r2, r1
 8004954:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8004956:	1d3a      	adds	r2, r7, #4
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	4413      	add	r3, r2
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d006      	beq.n	8004970 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	3301      	adds	r3, #1
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	2b09      	cmp	r3, #9
 800496c:	ddea      	ble.n	8004944 <prvCreateIdleTasks+0x14>
 800496e:	e000      	b.n	8004972 <prvCreateIdleTasks+0x42>
        {
            break;
 8004970:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8004972:	2300      	movs	r3, #0
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	e015      	b.n	80049a4 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8004978:	4b10      	ldr	r3, [pc, #64]	@ (80049bc <prvCreateIdleTasks+0x8c>)
 800497a:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4a0f      	ldr	r2, [pc, #60]	@ (80049c0 <prvCreateIdleTasks+0x90>)
 8004982:	4413      	add	r3, r2
 8004984:	1d39      	adds	r1, r7, #4
 8004986:	9301      	str	r3, [sp, #4]
 8004988:	2300      	movs	r3, #0
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	2300      	movs	r3, #0
 800498e:	2282      	movs	r2, #130	@ 0x82
 8004990:	6938      	ldr	r0, [r7, #16]
 8004992:	f7ff fe46 	bl	8004622 <xTaskCreate>
 8004996:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d006      	beq.n	80049ac <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	3301      	adds	r3, #1
 80049a2:	61bb      	str	r3, [r7, #24]
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	dde6      	ble.n	8004978 <prvCreateIdleTasks+0x48>
 80049aa:	e000      	b.n	80049ae <prvCreateIdleTasks+0x7e>
        {
            break;
 80049ac:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80049ae:	69fb      	ldr	r3, [r7, #28]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3720      	adds	r7, #32
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	08007df0 	.word	0x08007df0
 80049bc:	08005369 	.word	0x08005369
 80049c0:	200003a8 	.word	0x200003a8

080049c4 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80049ca:	f7ff ffb1 	bl	8004930 <prvCreateIdleTasks>
 80049ce:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d102      	bne.n	80049dc <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80049d6:	f001 f83f 	bl	8005a58 <xTimerCreateTimerTask>
 80049da:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d118      	bne.n	8004a14 <vTaskStartScheduler+0x50>
    __asm volatile
 80049e2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80049e6:	b672      	cpsid	i
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	b662      	cpsie	i
 80049f6:	60bb      	str	r3, [r7, #8]
}
 80049f8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80049fa:	4b12      	ldr	r3, [pc, #72]	@ (8004a44 <vTaskStartScheduler+0x80>)
 80049fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004a00:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004a02:	4b11      	ldr	r3, [pc, #68]	@ (8004a48 <vTaskStartScheduler+0x84>)
 8004a04:	2201      	movs	r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a08:	4b10      	ldr	r3, [pc, #64]	@ (8004a4c <vTaskStartScheduler+0x88>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8004a0e:	f001 fb69 	bl	80060e4 <xPortStartScheduler>
 8004a12:	e011      	b.n	8004a38 <vTaskStartScheduler+0x74>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1a:	d10d      	bne.n	8004a38 <vTaskStartScheduler+0x74>
    __asm volatile
 8004a1c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004a20:	b672      	cpsid	i
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	b662      	cpsie	i
 8004a30:	607b      	str	r3, [r7, #4]
}
 8004a32:	bf00      	nop
 8004a34:	bf00      	nop
 8004a36:	e7fd      	b.n	8004a34 <vTaskStartScheduler+0x70>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004a38:	4b05      	ldr	r3, [pc, #20]	@ (8004a50 <vTaskStartScheduler+0x8c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8004a3c:	bf00      	nop
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	200003a4 	.word	0x200003a4
 8004a48:	20000390 	.word	0x20000390
 8004a4c:	20000388 	.word	0x20000388
 8004a50:	2000000c 	.word	0x2000000c

08004a54 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8004a58:	4b04      	ldr	r3, [pc, #16]	@ (8004a6c <vTaskSuspendAll+0x18>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	4a03      	ldr	r2, [pc, #12]	@ (8004a6c <vTaskSuspendAll+0x18>)
 8004a60:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8004a62:	bf00      	nop
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	200003ac 	.word	0x200003ac

08004a70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8004a7e:	f001 fc01 	bl	8006284 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8004a82:	2300      	movs	r3, #0
 8004a84:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8004a86:	4b76      	ldr	r3, [pc, #472]	@ (8004c60 <xTaskResumeAll+0x1f0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10d      	bne.n	8004aaa <xTaskResumeAll+0x3a>
    __asm volatile
 8004a8e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004a92:	b672      	cpsid	i
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	b662      	cpsie	i
 8004aa2:	603b      	str	r3, [r7, #0]
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	e7fd      	b.n	8004aa6 <xTaskResumeAll+0x36>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8004aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8004c60 <xTaskResumeAll+0x1f0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	4a6b      	ldr	r2, [pc, #428]	@ (8004c60 <xTaskResumeAll+0x1f0>)
 8004ab2:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004ab4:	4b6a      	ldr	r3, [pc, #424]	@ (8004c60 <xTaskResumeAll+0x1f0>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f040 80ca 	bne.w	8004c52 <xTaskResumeAll+0x1e2>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004abe:	4b69      	ldr	r3, [pc, #420]	@ (8004c64 <xTaskResumeAll+0x1f4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 80c5 	beq.w	8004c52 <xTaskResumeAll+0x1e2>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ac8:	e08e      	b.n	8004be8 <xTaskResumeAll+0x178>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004aca:	4b67      	ldr	r3, [pc, #412]	@ (8004c68 <xTaskResumeAll+0x1f8>)
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	69fa      	ldr	r2, [r7, #28]
 8004ade:	6a12      	ldr	r2, [r2, #32]
 8004ae0:	609a      	str	r2, [r3, #8]
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	69d2      	ldr	r2, [r2, #28]
 8004aea:	605a      	str	r2, [r3, #4]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	3318      	adds	r3, #24
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d103      	bne.n	8004b00 <xTaskResumeAll+0x90>
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	6a1a      	ldr	r2, [r3, #32]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	605a      	str	r2, [r3, #4]
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	2200      	movs	r2, #0
 8004b04:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	1e5a      	subs	r2, r3, #1
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	69fa      	ldr	r2, [r7, #28]
 8004b1c:	68d2      	ldr	r2, [r2, #12]
 8004b1e:	609a      	str	r2, [r3, #8]
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	69fa      	ldr	r2, [r7, #28]
 8004b26:	6892      	ldr	r2, [r2, #8]
 8004b28:	605a      	str	r2, [r3, #4]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	3304      	adds	r3, #4
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d103      	bne.n	8004b3e <xTaskResumeAll+0xce>
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	2200      	movs	r2, #0
 8004b42:	615a      	str	r2, [r3, #20]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	1e5a      	subs	r2, r3, #1
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b52:	2201      	movs	r2, #1
 8004b54:	409a      	lsls	r2, r3
 8004b56:	4b45      	ldr	r3, [pc, #276]	@ (8004c6c <xTaskResumeAll+0x1fc>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	4a43      	ldr	r2, [pc, #268]	@ (8004c6c <xTaskResumeAll+0x1fc>)
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b64:	4942      	ldr	r1, [pc, #264]	@ (8004c70 <xTaskResumeAll+0x200>)
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	440b      	add	r3, r1
 8004b70:	3304      	adds	r3, #4
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	607b      	str	r3, [r7, #4]
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	609a      	str	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	60da      	str	r2, [r3, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	69fa      	ldr	r2, [r7, #28]
 8004b8a:	3204      	adds	r2, #4
 8004b8c:	605a      	str	r2, [r3, #4]
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	1d1a      	adds	r2, r3, #4
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	609a      	str	r2, [r3, #8]
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4a33      	ldr	r2, [pc, #204]	@ (8004c70 <xTaskResumeAll+0x200>)
 8004ba4:	441a      	add	r2, r3
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	615a      	str	r2, [r3, #20]
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bae:	4930      	ldr	r1, [pc, #192]	@ (8004c70 <xTaskResumeAll+0x200>)
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	69fa      	ldr	r2, [r7, #28]
 8004bbe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004bc0:	1c59      	adds	r1, r3, #1
 8004bc2:	482b      	ldr	r0, [pc, #172]	@ (8004c70 <xTaskResumeAll+0x200>)
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4403      	add	r3, r0
 8004bce:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bd4:	4b27      	ldr	r3, [pc, #156]	@ (8004c74 <xTaskResumeAll+0x204>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d904      	bls.n	8004be8 <xTaskResumeAll+0x178>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8004bde:	4a26      	ldr	r2, [pc, #152]	@ (8004c78 <xTaskResumeAll+0x208>)
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2101      	movs	r1, #1
 8004be4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004be8:	4b1f      	ldr	r3, [pc, #124]	@ (8004c68 <xTaskResumeAll+0x1f8>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f47f af6c 	bne.w	8004aca <xTaskResumeAll+0x5a>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <xTaskResumeAll+0x18c>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8004bf8:	f000 fc4c 	bl	8005494 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8004c7c <xTaskResumeAll+0x20c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d012      	beq.n	8004c2e <xTaskResumeAll+0x1be>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8004c08:	f000 f858 	bl	8004cbc <xTaskIncrementTick>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d004      	beq.n	8004c1c <xTaskResumeAll+0x1ac>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8004c12:	4a19      	ldr	r2, [pc, #100]	@ (8004c78 <xTaskResumeAll+0x208>)
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	2101      	movs	r1, #1
 8004c18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1ef      	bne.n	8004c08 <xTaskResumeAll+0x198>

                            xPendedTicks = 0;
 8004c28:	4b14      	ldr	r3, [pc, #80]	@ (8004c7c <xTaskResumeAll+0x20c>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8004c2e:	4a12      	ldr	r2, [pc, #72]	@ (8004c78 <xTaskResumeAll+0x208>)
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00b      	beq.n	8004c52 <xTaskResumeAll+0x1e2>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8004c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c74 <xTaskResumeAll+0x204>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4b0f      	ldr	r3, [pc, #60]	@ (8004c80 <xTaskResumeAll+0x210>)
 8004c44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004c52:	f001 fb4d 	bl	80062f0 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8004c56:	69bb      	ldr	r3, [r7, #24]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3720      	adds	r7, #32
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	200003ac 	.word	0x200003ac
 8004c64:	20000384 	.word	0x20000384
 8004c68:	20000344 	.word	0x20000344
 8004c6c:	2000038c 	.word	0x2000038c
 8004c70:	200002b0 	.word	0x200002b0
 8004c74:	200002ac 	.word	0x200002ac
 8004c78:	20000398 	.word	0x20000398
 8004c7c:	20000394 	.word	0x20000394
 8004c80:	e000ed04 	.word	0xe000ed04

08004c84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004c8a:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <xTaskGetTickCount+0x1c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8004c90:	687b      	ldr	r3, [r7, #4]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	20000388 	.word	0x20000388

08004ca4 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 8004ca8:	4b03      	ldr	r3, [pc, #12]	@ (8004cb8 <uxTaskGetNumberOfTasks+0x14>)
 8004caa:	681b      	ldr	r3, [r3, #0]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	20000384 	.word	0x20000384

08004cbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08a      	sub	sp, #40	@ 0x28
 8004cc0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004cc6:	4b80      	ldr	r3, [pc, #512]	@ (8004ec8 <xTaskIncrementTick+0x20c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f040 80f1 	bne.w	8004eb2 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004cd0:	4b7e      	ldr	r3, [pc, #504]	@ (8004ecc <xTaskIncrementTick+0x210>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004cd8:	4a7c      	ldr	r2, [pc, #496]	@ (8004ecc <xTaskIncrementTick+0x210>)
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d123      	bne.n	8004d2c <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 8004ce4:	4b7a      	ldr	r3, [pc, #488]	@ (8004ed0 <xTaskIncrementTick+0x214>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00d      	beq.n	8004d0a <xTaskIncrementTick+0x4e>
    __asm volatile
 8004cee:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004cf2:	b672      	cpsid	i
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	b662      	cpsie	i
 8004d02:	607b      	str	r3, [r7, #4]
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop
 8004d08:	e7fd      	b.n	8004d06 <xTaskIncrementTick+0x4a>
 8004d0a:	4b71      	ldr	r3, [pc, #452]	@ (8004ed0 <xTaskIncrementTick+0x214>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	61fb      	str	r3, [r7, #28]
 8004d10:	4b70      	ldr	r3, [pc, #448]	@ (8004ed4 <xTaskIncrementTick+0x218>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a6e      	ldr	r2, [pc, #440]	@ (8004ed0 <xTaskIncrementTick+0x214>)
 8004d16:	6013      	str	r3, [r2, #0]
 8004d18:	4a6e      	ldr	r2, [pc, #440]	@ (8004ed4 <xTaskIncrementTick+0x218>)
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	4b6e      	ldr	r3, [pc, #440]	@ (8004ed8 <xTaskIncrementTick+0x21c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3301      	adds	r3, #1
 8004d24:	4a6c      	ldr	r2, [pc, #432]	@ (8004ed8 <xTaskIncrementTick+0x21c>)
 8004d26:	6013      	str	r3, [r2, #0]
 8004d28:	f000 fbb4 	bl	8005494 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004d2c:	4b6b      	ldr	r3, [pc, #428]	@ (8004edc <xTaskIncrementTick+0x220>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6a3a      	ldr	r2, [r7, #32]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	f0c0 80a8 	bcc.w	8004e88 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d38:	4b65      	ldr	r3, [pc, #404]	@ (8004ed0 <xTaskIncrementTick+0x214>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d104      	bne.n	8004d4c <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8004d42:	4b66      	ldr	r3, [pc, #408]	@ (8004edc <xTaskIncrementTick+0x220>)
 8004d44:	f04f 32ff 	mov.w	r2, #4294967295
 8004d48:	601a      	str	r2, [r3, #0]
                    break;
 8004d4a:	e09d      	b.n	8004e88 <xTaskIncrementTick+0x1cc>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d4c:	4b60      	ldr	r3, [pc, #384]	@ (8004ed0 <xTaskIncrementTick+0x214>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004d5c:	6a3a      	ldr	r2, [r7, #32]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d203      	bcs.n	8004d6c <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004d64:	4a5d      	ldr	r2, [pc, #372]	@ (8004edc <xTaskIncrementTick+0x220>)
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	6013      	str	r3, [r2, #0]
                        break;
 8004d6a:	e08d      	b.n	8004e88 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	68d2      	ldr	r2, [r2, #12]
 8004d7a:	609a      	str	r2, [r3, #8]
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	6892      	ldr	r2, [r2, #8]
 8004d84:	605a      	str	r2, [r3, #4]
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d103      	bne.n	8004d9a <xTaskIncrementTick+0xde>
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	605a      	str	r2, [r3, #4]
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	615a      	str	r2, [r3, #20]
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	1e5a      	subs	r2, r3, #1
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01e      	beq.n	8004df0 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	6a12      	ldr	r2, [r2, #32]
 8004dc0:	609a      	str	r2, [r3, #8]
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	69d2      	ldr	r2, [r2, #28]
 8004dca:	605a      	str	r2, [r3, #4]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	3318      	adds	r3, #24
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d103      	bne.n	8004de0 <xTaskIncrementTick+0x124>
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	6a1a      	ldr	r2, [r3, #32]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	605a      	str	r2, [r3, #4]
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	2200      	movs	r2, #0
 8004de4:	629a      	str	r2, [r3, #40]	@ 0x28
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	1e5a      	subs	r2, r3, #1
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df4:	2201      	movs	r2, #1
 8004df6:	409a      	lsls	r2, r3
 8004df8:	4b39      	ldr	r3, [pc, #228]	@ (8004ee0 <xTaskIncrementTick+0x224>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	4a38      	ldr	r2, [pc, #224]	@ (8004ee0 <xTaskIncrementTick+0x224>)
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e06:	4937      	ldr	r1, [pc, #220]	@ (8004ee4 <xTaskIncrementTick+0x228>)
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	440b      	add	r3, r1
 8004e12:	3304      	adds	r3, #4
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60bb      	str	r3, [r7, #8]
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	609a      	str	r2, [r3, #8]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	60da      	str	r2, [r3, #12]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	3204      	adds	r2, #4
 8004e2e:	605a      	str	r2, [r3, #4]
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	1d1a      	adds	r2, r3, #4
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	609a      	str	r2, [r3, #8]
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4a27      	ldr	r2, [pc, #156]	@ (8004ee4 <xTaskIncrementTick+0x228>)
 8004e46:	441a      	add	r2, r3
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	615a      	str	r2, [r3, #20]
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e50:	4924      	ldr	r1, [pc, #144]	@ (8004ee4 <xTaskIncrementTick+0x228>)
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e62:	1c59      	adds	r1, r3, #1
 8004e64:	481f      	ldr	r0, [pc, #124]	@ (8004ee4 <xTaskIncrementTick+0x228>)
 8004e66:	4613      	mov	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4403      	add	r3, r0
 8004e70:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e76:	4b1c      	ldr	r3, [pc, #112]	@ (8004ee8 <xTaskIncrementTick+0x22c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	f67f af5b 	bls.w	8004d38 <xTaskIncrementTick+0x7c>
                            {
                                xSwitchRequired = pdTRUE;
 8004e82:	2301      	movs	r3, #1
 8004e84:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e86:	e757      	b.n	8004d38 <xTaskIncrementTick+0x7c>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8004e88:	4b17      	ldr	r3, [pc, #92]	@ (8004ee8 <xTaskIncrementTick+0x22c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e8e:	4915      	ldr	r1, [pc, #84]	@ (8004ee4 <xTaskIncrementTick+0x228>)
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d901      	bls.n	8004ea4 <xTaskIncrementTick+0x1e8>
                {
                    xSwitchRequired = pdTRUE;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8004ea4:	4b11      	ldr	r3, [pc, #68]	@ (8004eec <xTaskIncrementTick+0x230>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d007      	beq.n	8004ebc <xTaskIncrementTick+0x200>
                {
                    xSwitchRequired = pdTRUE;
 8004eac:	2301      	movs	r3, #1
 8004eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eb0:	e004      	b.n	8004ebc <xTaskIncrementTick+0x200>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef0 <xTaskIncrementTick+0x234>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8004ef0 <xTaskIncrementTick+0x234>)
 8004eba:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3728      	adds	r7, #40	@ 0x28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	200003ac 	.word	0x200003ac
 8004ecc:	20000388 	.word	0x20000388
 8004ed0:	2000033c 	.word	0x2000033c
 8004ed4:	20000340 	.word	0x20000340
 8004ed8:	2000039c 	.word	0x2000039c
 8004edc:	200003a4 	.word	0x200003a4
 8004ee0:	2000038c 	.word	0x2000038c
 8004ee4:	200002b0 	.word	0x200002b0
 8004ee8:	200002ac 	.word	0x200002ac
 8004eec:	20000398 	.word	0x20000398
 8004ef0:	20000394 	.word	0x20000394

08004ef4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8004efa:	4b29      	ldr	r3, [pc, #164]	@ (8004fa0 <vTaskSwitchContext+0xac>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004f02:	4b28      	ldr	r3, [pc, #160]	@ (8004fa4 <vTaskSwitchContext+0xb0>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8004f08:	e043      	b.n	8004f92 <vTaskSwitchContext+0x9e>
            xYieldPendings[ 0 ] = pdFALSE;
 8004f0a:	4b26      	ldr	r3, [pc, #152]	@ (8004fa4 <vTaskSwitchContext+0xb0>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8004f10:	4b25      	ldr	r3, [pc, #148]	@ (8004fa8 <vTaskSwitchContext+0xb4>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	fab3 f383 	clz	r3, r3
 8004f1c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8004f1e:	7afb      	ldrb	r3, [r7, #11]
 8004f20:	f1c3 031f 	rsb	r3, r3, #31
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	4921      	ldr	r1, [pc, #132]	@ (8004fac <vTaskSwitchContext+0xb8>)
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10d      	bne.n	8004f56 <vTaskSwitchContext+0x62>
    __asm volatile
 8004f3a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004f3e:	b672      	cpsid	i
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	b662      	cpsie	i
 8004f4e:	607b      	str	r3, [r7, #4]
}
 8004f50:	bf00      	nop
 8004f52:	bf00      	nop
 8004f54:	e7fd      	b.n	8004f52 <vTaskSwitchContext+0x5e>
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4a12      	ldr	r2, [pc, #72]	@ (8004fac <vTaskSwitchContext+0xb8>)
 8004f62:	4413      	add	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	605a      	str	r2, [r3, #4]
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	3308      	adds	r3, #8
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d103      	bne.n	8004f84 <vTaskSwitchContext+0x90>
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	605a      	str	r2, [r3, #4]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	4a09      	ldr	r2, [pc, #36]	@ (8004fb0 <vTaskSwitchContext+0xbc>)
 8004f8c:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8004f8e:	4b08      	ldr	r3, [pc, #32]	@ (8004fb0 <vTaskSwitchContext+0xbc>)
 8004f90:	681b      	ldr	r3, [r3, #0]
    }
 8004f92:	bf00      	nop
 8004f94:	371c      	adds	r7, #28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	200003ac 	.word	0x200003ac
 8004fa4:	20000398 	.word	0x20000398
 8004fa8:	2000038c 	.word	0x2000038c
 8004fac:	200002b0 	.word	0x200002b0
 8004fb0:	200002ac 	.word	0x200002ac

08004fb4 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10d      	bne.n	8004fe0 <vTaskPlaceOnEventList+0x2c>
    __asm volatile
 8004fc4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004fc8:	b672      	cpsid	i
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	b662      	cpsie	i
 8004fd8:	60fb      	str	r3, [r7, #12]
}
 8004fda:	bf00      	nop
 8004fdc:	bf00      	nop
 8004fde:	e7fd      	b.n	8004fdc <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fe0:	4b07      	ldr	r3, [pc, #28]	@ (8005000 <vTaskPlaceOnEventList+0x4c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3318      	adds	r3, #24
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7fe fc23 	bl	8003834 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004fee:	2101      	movs	r1, #1
 8004ff0:	6838      	ldr	r0, [r7, #0]
 8004ff2:	f000 fcaf 	bl	8005954 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8004ff6:	bf00      	nop
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	200002ac 	.word	0x200002ac

08005004 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10d      	bne.n	8005032 <vTaskPlaceOnEventListRestricted+0x2e>
    __asm volatile
 8005016:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800501a:	b672      	cpsid	i
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	b662      	cpsie	i
 800502a:	613b      	str	r3, [r7, #16]
}
 800502c:	bf00      	nop
 800502e:	bf00      	nop
 8005030:	e7fd      	b.n	800502e <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	4b15      	ldr	r3, [pc, #84]	@ (8005090 <vTaskPlaceOnEventListRestricted+0x8c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	61da      	str	r2, [r3, #28]
 8005040:	4b13      	ldr	r3, [pc, #76]	@ (8005090 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	6892      	ldr	r2, [r2, #8]
 8005048:	621a      	str	r2, [r3, #32]
 800504a:	4b11      	ldr	r3, [pc, #68]	@ (8005090 <vTaskPlaceOnEventListRestricted+0x8c>)
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	3218      	adds	r2, #24
 8005054:	605a      	str	r2, [r3, #4]
 8005056:	4b0e      	ldr	r3, [pc, #56]	@ (8005090 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f103 0218 	add.w	r2, r3, #24
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	609a      	str	r2, [r3, #8]
 8005062:	4b0b      	ldr	r3, [pc, #44]	@ (8005090 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	629a      	str	r2, [r3, #40]	@ 0x28
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 800507a:	f04f 33ff 	mov.w	r3, #4294967295
 800507e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	68b8      	ldr	r0, [r7, #8]
 8005084:	f000 fc66 	bl	8005954 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8005088:	bf00      	nop
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	200002ac 	.word	0x200002ac

08005094 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005094:	b480      	push	{r7}
 8005096:	b08b      	sub	sp, #44	@ 0x2c
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10d      	bne.n	80050c6 <xTaskRemoveFromEventList+0x32>
    __asm volatile
 80050aa:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80050ae:	b672      	cpsid	i
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	b662      	cpsie	i
 80050be:	60fb      	str	r3, [r7, #12]
}
 80050c0:	bf00      	nop
 80050c2:	bf00      	nop
 80050c4:	e7fd      	b.n	80050c2 <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ca:	61fb      	str	r3, [r7, #28]
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	6a3a      	ldr	r2, [r7, #32]
 80050d2:	6a12      	ldr	r2, [r2, #32]
 80050d4:	609a      	str	r2, [r3, #8]
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	6a3a      	ldr	r2, [r7, #32]
 80050dc:	69d2      	ldr	r2, [r2, #28]
 80050de:	605a      	str	r2, [r3, #4]
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	3318      	adds	r3, #24
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d103      	bne.n	80050f4 <xTaskRemoveFromEventList+0x60>
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	6a1a      	ldr	r2, [r3, #32]
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	605a      	str	r2, [r3, #4]
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	2200      	movs	r2, #0
 80050f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	1e5a      	subs	r2, r3, #1
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005104:	4b4b      	ldr	r3, [pc, #300]	@ (8005234 <xTaskRemoveFromEventList+0x1a0>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d160      	bne.n	80051ce <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	6a3a      	ldr	r2, [r7, #32]
 8005118:	68d2      	ldr	r2, [r2, #12]
 800511a:	609a      	str	r2, [r3, #8]
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	6a3a      	ldr	r2, [r7, #32]
 8005122:	6892      	ldr	r2, [r2, #8]
 8005124:	605a      	str	r2, [r3, #4]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	3304      	adds	r3, #4
 800512e:	429a      	cmp	r2, r3
 8005130:	d103      	bne.n	800513a <xTaskRemoveFromEventList+0xa6>
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	605a      	str	r2, [r3, #4]
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	2200      	movs	r2, #0
 800513e:	615a      	str	r2, [r3, #20]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	1e5a      	subs	r2, r3, #1
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514e:	2201      	movs	r2, #1
 8005150:	409a      	lsls	r2, r3
 8005152:	4b39      	ldr	r3, [pc, #228]	@ (8005238 <xTaskRemoveFromEventList+0x1a4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4313      	orrs	r3, r2
 8005158:	4a37      	ldr	r2, [pc, #220]	@ (8005238 <xTaskRemoveFromEventList+0x1a4>)
 800515a:	6013      	str	r3, [r2, #0]
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005160:	4936      	ldr	r1, [pc, #216]	@ (800523c <xTaskRemoveFromEventList+0x1a8>)
 8005162:	4613      	mov	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	440b      	add	r3, r1
 800516c:	3304      	adds	r3, #4
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	609a      	str	r2, [r3, #8]
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	60da      	str	r2, [r3, #12]
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	6a3a      	ldr	r2, [r7, #32]
 8005186:	3204      	adds	r2, #4
 8005188:	605a      	str	r2, [r3, #4]
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	1d1a      	adds	r2, r3, #4
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	609a      	str	r2, [r3, #8]
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4a27      	ldr	r2, [pc, #156]	@ (800523c <xTaskRemoveFromEventList+0x1a8>)
 80051a0:	441a      	add	r2, r3
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	615a      	str	r2, [r3, #20]
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051aa:	4924      	ldr	r1, [pc, #144]	@ (800523c <xTaskRemoveFromEventList+0x1a8>)
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6a3a      	ldr	r2, [r7, #32]
 80051ba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051bc:	1c59      	adds	r1, r3, #1
 80051be:	481f      	ldr	r0, [pc, #124]	@ (800523c <xTaskRemoveFromEventList+0x1a8>)
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4403      	add	r3, r0
 80051ca:	6019      	str	r1, [r3, #0]
 80051cc:	e01b      	b.n	8005206 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80051ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005240 <xTaskRemoveFromEventList+0x1ac>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	61bb      	str	r3, [r7, #24]
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	61da      	str	r2, [r3, #28]
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	621a      	str	r2, [r3, #32]
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	6a3a      	ldr	r2, [r7, #32]
 80051e8:	3218      	adds	r2, #24
 80051ea:	605a      	str	r2, [r3, #4]
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	f103 0218 	add.w	r2, r3, #24
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	609a      	str	r2, [r3, #8]
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	4a11      	ldr	r2, [pc, #68]	@ (8005240 <xTaskRemoveFromEventList+0x1ac>)
 80051fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80051fc:	4b10      	ldr	r3, [pc, #64]	@ (8005240 <xTaskRemoveFromEventList+0x1ac>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3301      	adds	r3, #1
 8005202:	4a0f      	ldr	r2, [pc, #60]	@ (8005240 <xTaskRemoveFromEventList+0x1ac>)
 8005204:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800520a:	4b0e      	ldr	r3, [pc, #56]	@ (8005244 <xTaskRemoveFromEventList+0x1b0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005210:	429a      	cmp	r2, r3
 8005212:	d905      	bls.n	8005220 <xTaskRemoveFromEventList+0x18c>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8005214:	2301      	movs	r3, #1
 8005216:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8005218:	4b0b      	ldr	r3, [pc, #44]	@ (8005248 <xTaskRemoveFromEventList+0x1b4>)
 800521a:	2201      	movs	r2, #1
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e001      	b.n	8005224 <xTaskRemoveFromEventList+0x190>
        }
        else
        {
            xReturn = pdFALSE;
 8005220:	2300      	movs	r3, #0
 8005222:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8005224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005226:	4618      	mov	r0, r3
 8005228:	372c      	adds	r7, #44	@ 0x2c
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	200003ac 	.word	0x200003ac
 8005238:	2000038c 	.word	0x2000038c
 800523c:	200002b0 	.word	0x200002b0
 8005240:	20000344 	.word	0x20000344
 8005244:	200002ac 	.word	0x200002ac
 8005248:	20000398 	.word	0x20000398

0800524c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005254:	4b06      	ldr	r3, [pc, #24]	@ (8005270 <vTaskInternalSetTimeOutState+0x24>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800525c:	4b05      	ldr	r3, [pc, #20]	@ (8005274 <vTaskInternalSetTimeOutState+0x28>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	2000039c 	.word	0x2000039c
 8005274:	20000388 	.word	0x20000388

08005278 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10d      	bne.n	80052a4 <xTaskCheckForTimeOut+0x2c>
    __asm volatile
 8005288:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800528c:	b672      	cpsid	i
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	b662      	cpsie	i
 800529c:	613b      	str	r3, [r7, #16]
}
 800529e:	bf00      	nop
 80052a0:	bf00      	nop
 80052a2:	e7fd      	b.n	80052a0 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10d      	bne.n	80052c6 <xTaskCheckForTimeOut+0x4e>
    __asm volatile
 80052aa:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80052ae:	b672      	cpsid	i
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	b662      	cpsie	i
 80052be:	60fb      	str	r3, [r7, #12]
}
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	e7fd      	b.n	80052c2 <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 80052c6:	f000 ffdd 	bl	8006284 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80052ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005348 <xTaskCheckForTimeOut+0xd0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e2:	d102      	bne.n	80052ea <xTaskCheckForTimeOut+0x72>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80052e4:	2300      	movs	r3, #0
 80052e6:	61fb      	str	r3, [r7, #28]
 80052e8:	e026      	b.n	8005338 <xTaskCheckForTimeOut+0xc0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	4b17      	ldr	r3, [pc, #92]	@ (800534c <xTaskCheckForTimeOut+0xd4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d00a      	beq.n	800530c <xTaskCheckForTimeOut+0x94>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d305      	bcc.n	800530c <xTaskCheckForTimeOut+0x94>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005300:	2301      	movs	r3, #1
 8005302:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e015      	b.n	8005338 <xTaskCheckForTimeOut+0xc0>
        }
        else if( xElapsedTime < *pxTicksToWait )
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	429a      	cmp	r2, r3
 8005314:	d20b      	bcs.n	800532e <xTaskCheckForTimeOut+0xb6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	1ad2      	subs	r2, r2, r3
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7ff ff92 	bl	800524c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005328:	2300      	movs	r3, #0
 800532a:	61fb      	str	r3, [r7, #28]
 800532c:	e004      	b.n	8005338 <xTaskCheckForTimeOut+0xc0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2200      	movs	r2, #0
 8005332:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005334:	2301      	movs	r3, #1
 8005336:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005338:	f000 ffda 	bl	80062f0 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 800533c:	69fb      	ldr	r3, [r7, #28]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3720      	adds	r7, #32
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20000388 	.word	0x20000388
 800534c:	2000039c 	.word	0x2000039c

08005350 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8005354:	4b03      	ldr	r3, [pc, #12]	@ (8005364 <vTaskMissedYield+0x14>)
 8005356:	2201      	movs	r2, #1
 8005358:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 800535a:	bf00      	nop
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	20000398 	.word	0x20000398

08005368 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005370:	f000 f852 	bl	8005418 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8005374:	4b06      	ldr	r3, [pc, #24]	@ (8005390 <prvIdleTask+0x28>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d9f9      	bls.n	8005370 <prvIdleTask+0x8>
            {
                taskYIELD();
 800537c:	4b05      	ldr	r3, [pc, #20]	@ (8005394 <prvIdleTask+0x2c>)
 800537e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800538c:	e7f0      	b.n	8005370 <prvIdleTask+0x8>
 800538e:	bf00      	nop
 8005390:	200002b0 	.word	0x200002b0
 8005394:	e000ed04 	.word	0xe000ed04

08005398 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800539e:	2300      	movs	r3, #0
 80053a0:	607b      	str	r3, [r7, #4]
 80053a2:	e00c      	b.n	80053be <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	4613      	mov	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4a12      	ldr	r2, [pc, #72]	@ (80053f8 <prvInitialiseTaskLists+0x60>)
 80053b0:	4413      	add	r3, r2
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fe fa11 	bl	80037da <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3301      	adds	r3, #1
 80053bc:	607b      	str	r3, [r7, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d9ef      	bls.n	80053a4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80053c4:	480d      	ldr	r0, [pc, #52]	@ (80053fc <prvInitialiseTaskLists+0x64>)
 80053c6:	f7fe fa08 	bl	80037da <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80053ca:	480d      	ldr	r0, [pc, #52]	@ (8005400 <prvInitialiseTaskLists+0x68>)
 80053cc:	f7fe fa05 	bl	80037da <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80053d0:	480c      	ldr	r0, [pc, #48]	@ (8005404 <prvInitialiseTaskLists+0x6c>)
 80053d2:	f7fe fa02 	bl	80037da <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80053d6:	480c      	ldr	r0, [pc, #48]	@ (8005408 <prvInitialiseTaskLists+0x70>)
 80053d8:	f7fe f9ff 	bl	80037da <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80053dc:	480b      	ldr	r0, [pc, #44]	@ (800540c <prvInitialiseTaskLists+0x74>)
 80053de:	f7fe f9fc 	bl	80037da <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80053e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005410 <prvInitialiseTaskLists+0x78>)
 80053e4:	4a05      	ldr	r2, [pc, #20]	@ (80053fc <prvInitialiseTaskLists+0x64>)
 80053e6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80053e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005414 <prvInitialiseTaskLists+0x7c>)
 80053ea:	4a05      	ldr	r2, [pc, #20]	@ (8005400 <prvInitialiseTaskLists+0x68>)
 80053ec:	601a      	str	r2, [r3, #0]
}
 80053ee:	bf00      	nop
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	200002b0 	.word	0x200002b0
 80053fc:	20000314 	.word	0x20000314
 8005400:	20000328 	.word	0x20000328
 8005404:	20000344 	.word	0x20000344
 8005408:	20000358 	.word	0x20000358
 800540c:	20000370 	.word	0x20000370
 8005410:	2000033c 	.word	0x2000033c
 8005414:	20000340 	.word	0x20000340

08005418 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800541e:	e019      	b.n	8005454 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8005420:	f000 ff30 	bl	8006284 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005424:	4b10      	ldr	r3, [pc, #64]	@ (8005468 <prvCheckTasksWaitingTermination+0x50>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3304      	adds	r3, #4
 8005430:	4618      	mov	r0, r3
 8005432:	f7fe fa38 	bl	80038a6 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8005436:	4b0d      	ldr	r3, [pc, #52]	@ (800546c <prvCheckTasksWaitingTermination+0x54>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3b01      	subs	r3, #1
 800543c:	4a0b      	ldr	r2, [pc, #44]	@ (800546c <prvCheckTasksWaitingTermination+0x54>)
 800543e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8005440:	4b0b      	ldr	r3, [pc, #44]	@ (8005470 <prvCheckTasksWaitingTermination+0x58>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3b01      	subs	r3, #1
 8005446:	4a0a      	ldr	r2, [pc, #40]	@ (8005470 <prvCheckTasksWaitingTermination+0x58>)
 8005448:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800544a:	f000 ff51 	bl	80062f0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f810 	bl	8005474 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005454:	4b06      	ldr	r3, [pc, #24]	@ (8005470 <prvCheckTasksWaitingTermination+0x58>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e1      	bne.n	8005420 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800545c:	bf00      	nop
 800545e:	bf00      	nop
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20000358 	.word	0x20000358
 800546c:	20000384 	.word	0x20000384
 8005470:	2000036c 	.word	0x2000036c

08005474 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005480:	4618      	mov	r0, r3
 8005482:	f001 f92b 	bl	80066dc <vPortFree>
            vPortFree( pxTCB );
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f001 f928 	bl	80066dc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800548c:	bf00      	nop
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005498:	4b0a      	ldr	r3, [pc, #40]	@ (80054c4 <prvResetNextTaskUnblockTime+0x30>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d104      	bne.n	80054ac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80054a2:	4b09      	ldr	r3, [pc, #36]	@ (80054c8 <prvResetNextTaskUnblockTime+0x34>)
 80054a4:	f04f 32ff 	mov.w	r2, #4294967295
 80054a8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80054aa:	e005      	b.n	80054b8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80054ac:	4b05      	ldr	r3, [pc, #20]	@ (80054c4 <prvResetNextTaskUnblockTime+0x30>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a04      	ldr	r2, [pc, #16]	@ (80054c8 <prvResetNextTaskUnblockTime+0x34>)
 80054b6:	6013      	str	r3, [r2, #0]
}
 80054b8:	bf00      	nop
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	2000033c 	.word	0x2000033c
 80054c8:	200003a4 	.word	0x200003a4

080054cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80054d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005500 <xTaskGetSchedulerState+0x34>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d102      	bne.n	80054e0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80054da:	2301      	movs	r3, #1
 80054dc:	607b      	str	r3, [r7, #4]
 80054de:	e008      	b.n	80054f2 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80054e0:	4b08      	ldr	r3, [pc, #32]	@ (8005504 <xTaskGetSchedulerState+0x38>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80054e8:	2302      	movs	r3, #2
 80054ea:	607b      	str	r3, [r7, #4]
 80054ec:	e001      	b.n	80054f2 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80054ee:	2300      	movs	r3, #0
 80054f0:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 80054f2:	687b      	ldr	r3, [r7, #4]
    }
 80054f4:	4618      	mov	r0, r3
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	20000390 	.word	0x20000390
 8005504:	200003ac 	.word	0x200003ac

08005508 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 8089 	beq.w	8005632 <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005524:	4b45      	ldr	r3, [pc, #276]	@ (800563c <xTaskPriorityInherit+0x134>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552a:	429a      	cmp	r2, r3
 800552c:	d278      	bcs.n	8005620 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	2b00      	cmp	r3, #0
 8005534:	db06      	blt.n	8005544 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8005536:	4b41      	ldr	r3, [pc, #260]	@ (800563c <xTaskPriorityInherit+0x134>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553c:	f1c3 0205 	rsb	r2, r3, #5
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	6959      	ldr	r1, [r3, #20]
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4a3a      	ldr	r2, [pc, #232]	@ (8005640 <xTaskPriorityInherit+0x138>)
 8005556:	4413      	add	r3, r2
 8005558:	4299      	cmp	r1, r3
 800555a:	d159      	bne.n	8005610 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	3304      	adds	r3, #4
 8005560:	4618      	mov	r0, r3
 8005562:	f7fe f9a0 	bl	80038a6 <uxListRemove>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10a      	bne.n	8005582 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005570:	2201      	movs	r2, #1
 8005572:	fa02 f303 	lsl.w	r3, r2, r3
 8005576:	43da      	mvns	r2, r3
 8005578:	4b32      	ldr	r3, [pc, #200]	@ (8005644 <xTaskPriorityInherit+0x13c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4013      	ands	r3, r2
 800557e:	4a31      	ldr	r2, [pc, #196]	@ (8005644 <xTaskPriorityInherit+0x13c>)
 8005580:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005582:	4b2e      	ldr	r3, [pc, #184]	@ (800563c <xTaskPriorityInherit+0x134>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005590:	2201      	movs	r2, #1
 8005592:	409a      	lsls	r2, r3
 8005594:	4b2b      	ldr	r3, [pc, #172]	@ (8005644 <xTaskPriorityInherit+0x13c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4313      	orrs	r3, r2
 800559a:	4a2a      	ldr	r2, [pc, #168]	@ (8005644 <xTaskPriorityInherit+0x13c>)
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055a2:	4927      	ldr	r1, [pc, #156]	@ (8005640 <xTaskPriorityInherit+0x138>)
 80055a4:	4613      	mov	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	3304      	adds	r3, #4
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	609a      	str	r2, [r3, #8]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	60da      	str	r2, [r3, #12]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	3204      	adds	r2, #4
 80055ca:	605a      	str	r2, [r3, #4]
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1d1a      	adds	r2, r3, #4
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	609a      	str	r2, [r3, #8]
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055d8:	4613      	mov	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4a17      	ldr	r2, [pc, #92]	@ (8005640 <xTaskPriorityInherit+0x138>)
 80055e2:	441a      	add	r2, r3
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	615a      	str	r2, [r3, #20]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ec:	4914      	ldr	r1, [pc, #80]	@ (8005640 <xTaskPriorityInherit+0x138>)
 80055ee:	4613      	mov	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	440b      	add	r3, r1
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80055fe:	1c59      	adds	r1, r3, #1
 8005600:	480f      	ldr	r0, [pc, #60]	@ (8005640 <xTaskPriorityInherit+0x138>)
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4403      	add	r3, r0
 800560c:	6019      	str	r1, [r3, #0]
 800560e:	e004      	b.n	800561a <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005610:	4b0a      	ldr	r3, [pc, #40]	@ (800563c <xTaskPriorityInherit+0x134>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800561a:	2301      	movs	r3, #1
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	e008      	b.n	8005632 <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005624:	4b05      	ldr	r3, [pc, #20]	@ (800563c <xTaskPriorityInherit+0x134>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562a:	429a      	cmp	r2, r3
 800562c:	d201      	bcs.n	8005632 <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800562e:	2301      	movs	r3, #1
 8005630:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 8005632:	697b      	ldr	r3, [r7, #20]
    }
 8005634:	4618      	mov	r0, r3
 8005636:	3718      	adds	r7, #24
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	200002ac 	.word	0x200002ac
 8005640:	200002b0 	.word	0x200002b0
 8005644:	2000038c 	.word	0x2000038c

08005648 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8005654:	2300      	movs	r3, #0
 8005656:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 8094 	beq.w	8005788 <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005660:	4b4c      	ldr	r3, [pc, #304]	@ (8005794 <xTaskPriorityDisinherit+0x14c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	429a      	cmp	r2, r3
 8005668:	d00d      	beq.n	8005686 <xTaskPriorityDisinherit+0x3e>
    __asm volatile
 800566a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800566e:	b672      	cpsid	i
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	b662      	cpsie	i
 800567e:	613b      	str	r3, [r7, #16]
}
 8005680:	bf00      	nop
 8005682:	bf00      	nop
 8005684:	e7fd      	b.n	8005682 <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10d      	bne.n	80056aa <xTaskPriorityDisinherit+0x62>
    __asm volatile
 800568e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005692:	b672      	cpsid	i
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	b662      	cpsie	i
 80056a2:	60fb      	str	r3, [r7, #12]
}
 80056a4:	bf00      	nop
 80056a6:	bf00      	nop
 80056a8:	e7fd      	b.n	80056a6 <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ae:	1e5a      	subs	r2, r3, #1
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056bc:	429a      	cmp	r2, r3
 80056be:	d063      	beq.n	8005788 <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d15f      	bne.n	8005788 <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	3304      	adds	r3, #4
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7fe f8ea 	bl	80038a6 <uxListRemove>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056dc:	2201      	movs	r2, #1
 80056de:	fa02 f303 	lsl.w	r3, r2, r3
 80056e2:	43da      	mvns	r2, r3
 80056e4:	4b2c      	ldr	r3, [pc, #176]	@ (8005798 <xTaskPriorityDisinherit+0x150>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4013      	ands	r3, r2
 80056ea:	4a2b      	ldr	r2, [pc, #172]	@ (8005798 <xTaskPriorityDisinherit+0x150>)
 80056ec:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fa:	f1c3 0205 	rsb	r2, r3, #5
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005706:	2201      	movs	r2, #1
 8005708:	409a      	lsls	r2, r3
 800570a:	4b23      	ldr	r3, [pc, #140]	@ (8005798 <xTaskPriorityDisinherit+0x150>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4313      	orrs	r3, r2
 8005710:	4a21      	ldr	r2, [pc, #132]	@ (8005798 <xTaskPriorityDisinherit+0x150>)
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005718:	4920      	ldr	r1, [pc, #128]	@ (800579c <xTaskPriorityDisinherit+0x154>)
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	440b      	add	r3, r1
 8005724:	3304      	adds	r3, #4
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	609a      	str	r2, [r3, #8]
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	60da      	str	r2, [r3, #12]
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	3204      	adds	r2, #4
 8005740:	605a      	str	r2, [r3, #4]
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	1d1a      	adds	r2, r3, #4
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	609a      	str	r2, [r3, #8]
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800574e:	4613      	mov	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4a11      	ldr	r2, [pc, #68]	@ (800579c <xTaskPriorityDisinherit+0x154>)
 8005758:	441a      	add	r2, r3
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	615a      	str	r2, [r3, #20]
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005762:	490e      	ldr	r1, [pc, #56]	@ (800579c <xTaskPriorityDisinherit+0x154>)
 8005764:	4613      	mov	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	440b      	add	r3, r1
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005774:	1c59      	adds	r1, r3, #1
 8005776:	4809      	ldr	r0, [pc, #36]	@ (800579c <xTaskPriorityDisinherit+0x154>)
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4403      	add	r3, r0
 8005782:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005784:	2301      	movs	r3, #1
 8005786:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8005788:	69fb      	ldr	r3, [r7, #28]
    }
 800578a:	4618      	mov	r0, r3
 800578c:	3720      	adds	r7, #32
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	200002ac 	.word	0x200002ac
 8005798:	2000038c 	.word	0x2000038c
 800579c:	200002b0 	.word	0x200002b0

080057a0 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08a      	sub	sp, #40	@ 0x28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80057ae:	2301      	movs	r3, #1
 80057b0:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80aa 	beq.w	800590e <vTaskPriorityDisinheritAfterTimeout+0x16e>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10d      	bne.n	80057de <vTaskPriorityDisinheritAfterTimeout+0x3e>
    __asm volatile
 80057c2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80057c6:	b672      	cpsid	i
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	b662      	cpsie	i
 80057d6:	613b      	str	r3, [r7, #16]
}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop
 80057dc:	e7fd      	b.n	80057da <vTaskPriorityDisinheritAfterTimeout+0x3a>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d902      	bls.n	80057ee <vTaskPriorityDisinheritAfterTimeout+0x4e>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ec:	e002      	b.n	80057f4 <vTaskPriorityDisinheritAfterTimeout+0x54>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057f2:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057fa:	429a      	cmp	r2, r3
 80057fc:	f000 8087 	beq.w	800590e <vTaskPriorityDisinheritAfterTimeout+0x16e>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005804:	69fa      	ldr	r2, [r7, #28]
 8005806:	429a      	cmp	r2, r3
 8005808:	f040 8081 	bne.w	800590e <vTaskPriorityDisinheritAfterTimeout+0x16e>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800580c:	4b42      	ldr	r3, [pc, #264]	@ (8005918 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6a3a      	ldr	r2, [r7, #32]
 8005812:	429a      	cmp	r2, r3
 8005814:	d10d      	bne.n	8005832 <vTaskPriorityDisinheritAfterTimeout+0x92>
    __asm volatile
 8005816:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800581a:	b672      	cpsid	i
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	b662      	cpsie	i
 800582a:	60fb      	str	r3, [r7, #12]
}
 800582c:	bf00      	nop
 800582e:	bf00      	nop
 8005830:	e7fd      	b.n	800582e <vTaskPriorityDisinheritAfterTimeout+0x8e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005836:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800583c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	2b00      	cmp	r3, #0
 8005844:	db04      	blt.n	8005850 <vTaskPriorityDisinheritAfterTimeout+0xb0>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	f1c3 0205 	rsb	r2, r3, #5
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	6959      	ldr	r1, [r3, #20]
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	4613      	mov	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4a2f      	ldr	r2, [pc, #188]	@ (800591c <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8005860:	4413      	add	r3, r2
 8005862:	4299      	cmp	r1, r3
 8005864:	d153      	bne.n	800590e <vTaskPriorityDisinheritAfterTimeout+0x16e>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	3304      	adds	r3, #4
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe f81b 	bl	80038a6 <uxListRemove>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10a      	bne.n	800588c <vTaskPriorityDisinheritAfterTimeout+0xec>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587a:	2201      	movs	r2, #1
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	43da      	mvns	r2, r3
 8005882:	4b27      	ldr	r3, [pc, #156]	@ (8005920 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4013      	ands	r3, r2
 8005888:	4a25      	ldr	r2, [pc, #148]	@ (8005920 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 800588a:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005890:	2201      	movs	r2, #1
 8005892:	409a      	lsls	r2, r3
 8005894:	4b22      	ldr	r3, [pc, #136]	@ (8005920 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4313      	orrs	r3, r2
 800589a:	4a21      	ldr	r2, [pc, #132]	@ (8005920 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a2:	491e      	ldr	r1, [pc, #120]	@ (800591c <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 80058a4:	4613      	mov	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	440b      	add	r3, r1
 80058ae:	3304      	adds	r3, #4
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	609a      	str	r2, [r3, #8]
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	60da      	str	r2, [r3, #12]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	6a3a      	ldr	r2, [r7, #32]
 80058c8:	3204      	adds	r2, #4
 80058ca:	605a      	str	r2, [r3, #4]
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	1d1a      	adds	r2, r3, #4
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	609a      	str	r2, [r3, #8]
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d8:	4613      	mov	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4a0e      	ldr	r2, [pc, #56]	@ (800591c <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 80058e2:	441a      	add	r2, r3
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	615a      	str	r2, [r3, #20]
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ec:	490b      	ldr	r1, [pc, #44]	@ (800591c <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	440b      	add	r3, r1
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6a3a      	ldr	r2, [r7, #32]
 80058fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80058fe:	1c59      	adds	r1, r3, #1
 8005900:	4806      	ldr	r0, [pc, #24]	@ (800591c <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4403      	add	r3, r0
 800590c:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 800590e:	bf00      	nop
 8005910:	3728      	adds	r7, #40	@ 0x28
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	200002ac 	.word	0x200002ac
 800591c:	200002b0 	.word	0x200002b0
 8005920:	2000038c 	.word	0x2000038c

08005924 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 800592a:	4b09      	ldr	r3, [pc, #36]	@ (8005950 <pvTaskIncrementMutexHeldCount+0x2c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d004      	beq.n	8005940 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 8005940:	687b      	ldr	r3, [r7, #4]
    }
 8005942:	4618      	mov	r0, r3
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	200002ac 	.word	0x200002ac

08005954 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800595e:	4b37      	ldr	r3, [pc, #220]	@ (8005a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8005964:	4b36      	ldr	r3, [pc, #216]	@ (8005a40 <prvAddCurrentTaskToDelayedList+0xec>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800596a:	4b36      	ldr	r3, [pc, #216]	@ (8005a44 <prvAddCurrentTaskToDelayedList+0xf0>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005970:	4b35      	ldr	r3, [pc, #212]	@ (8005a48 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3304      	adds	r3, #4
 8005976:	4618      	mov	r0, r3
 8005978:	f7fd ff95 	bl	80038a6 <uxListRemove>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10b      	bne.n	800599a <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005982:	4b31      	ldr	r3, [pc, #196]	@ (8005a48 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005988:	2201      	movs	r2, #1
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	43da      	mvns	r2, r3
 8005990:	4b2e      	ldr	r3, [pc, #184]	@ (8005a4c <prvAddCurrentTaskToDelayedList+0xf8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4013      	ands	r3, r2
 8005996:	4a2d      	ldr	r2, [pc, #180]	@ (8005a4c <prvAddCurrentTaskToDelayedList+0xf8>)
 8005998:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a0:	d124      	bne.n	80059ec <prvAddCurrentTaskToDelayedList+0x98>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d021      	beq.n	80059ec <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059a8:	4b29      	ldr	r3, [pc, #164]	@ (8005a50 <prvAddCurrentTaskToDelayedList+0xfc>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	4b26      	ldr	r3, [pc, #152]	@ (8005a48 <prvAddCurrentTaskToDelayedList+0xf4>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	609a      	str	r2, [r3, #8]
 80059b6:	4b24      	ldr	r3, [pc, #144]	@ (8005a48 <prvAddCurrentTaskToDelayedList+0xf4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	6892      	ldr	r2, [r2, #8]
 80059be:	60da      	str	r2, [r3, #12]
 80059c0:	4b21      	ldr	r3, [pc, #132]	@ (8005a48 <prvAddCurrentTaskToDelayedList+0xf4>)
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	3204      	adds	r2, #4
 80059ca:	605a      	str	r2, [r3, #4]
 80059cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005a48 <prvAddCurrentTaskToDelayedList+0xf4>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	1d1a      	adds	r2, r3, #4
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	609a      	str	r2, [r3, #8]
 80059d6:	4b1c      	ldr	r3, [pc, #112]	@ (8005a48 <prvAddCurrentTaskToDelayedList+0xf4>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a1d      	ldr	r2, [pc, #116]	@ (8005a50 <prvAddCurrentTaskToDelayedList+0xfc>)
 80059dc:	615a      	str	r2, [r3, #20]
 80059de:	4b1c      	ldr	r3, [pc, #112]	@ (8005a50 <prvAddCurrentTaskToDelayedList+0xfc>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3301      	adds	r3, #1
 80059e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a50 <prvAddCurrentTaskToDelayedList+0xfc>)
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80059ea:	e022      	b.n	8005a32 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80059ec:	69fa      	ldr	r2, [r7, #28]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4413      	add	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80059f4:	4b14      	ldr	r3, [pc, #80]	@ (8005a48 <prvAddCurrentTaskToDelayedList+0xf4>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d207      	bcs.n	8005a14 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8005a04:	4b10      	ldr	r3, [pc, #64]	@ (8005a48 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6978      	ldr	r0, [r7, #20]
 8005a0e:	f7fd ff11 	bl	8003834 <vListInsert>
}
 8005a12:	e00e      	b.n	8005a32 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8005a14:	4b0c      	ldr	r3, [pc, #48]	@ (8005a48 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	69b8      	ldr	r0, [r7, #24]
 8005a1e:	f7fd ff09 	bl	8003834 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8005a22:	4b0c      	ldr	r3, [pc, #48]	@ (8005a54 <prvAddCurrentTaskToDelayedList+0x100>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d202      	bcs.n	8005a32 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8005a2c:	4a09      	ldr	r2, [pc, #36]	@ (8005a54 <prvAddCurrentTaskToDelayedList+0x100>)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6013      	str	r3, [r2, #0]
}
 8005a32:	bf00      	nop
 8005a34:	3720      	adds	r7, #32
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000388 	.word	0x20000388
 8005a40:	2000033c 	.word	0x2000033c
 8005a44:	20000340 	.word	0x20000340
 8005a48:	200002ac 	.word	0x200002ac
 8005a4c:	2000038c 	.word	0x2000038c
 8005a50:	20000370 	.word	0x20000370
 8005a54:	200003a4 	.word	0x200003a4

08005a58 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005a62:	f000 fa77 	bl	8005f54 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005a66:	4b13      	ldr	r3, [pc, #76]	@ (8005ab4 <xTimerCreateTimerTask+0x5c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00b      	beq.n	8005a86 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8005a6e:	4b12      	ldr	r3, [pc, #72]	@ (8005ab8 <xTimerCreateTimerTask+0x60>)
 8005a70:	9301      	str	r3, [sp, #4]
 8005a72:	2304      	movs	r3, #4
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	2300      	movs	r3, #0
 8005a78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005a7c:	490f      	ldr	r1, [pc, #60]	@ (8005abc <xTimerCreateTimerTask+0x64>)
 8005a7e:	4810      	ldr	r0, [pc, #64]	@ (8005ac0 <xTimerCreateTimerTask+0x68>)
 8005a80:	f7fe fdcf 	bl	8004622 <xTaskCreate>
 8005a84:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10d      	bne.n	8005aa8 <xTimerCreateTimerTask+0x50>
    __asm volatile
 8005a8c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005a90:	b672      	cpsid	i
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	b662      	cpsie	i
 8005aa0:	603b      	str	r3, [r7, #0]
}
 8005aa2:	bf00      	nop
 8005aa4:	bf00      	nop
 8005aa6:	e7fd      	b.n	8005aa4 <xTimerCreateTimerTask+0x4c>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8005aa8:	687b      	ldr	r3, [r7, #4]
    }
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	200003e0 	.word	0x200003e0
 8005ab8:	200003e4 	.word	0x200003e4
 8005abc:	08007e08 	.word	0x08007e08
 8005ac0:	08005b69 	.word	0x08005b69

08005ac4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005ad0:	e008      	b.n	8005ae4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	4413      	add	r3, r2
 8005ada:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	699a      	ldr	r2, [r3, #24]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	18d1      	adds	r1, r2, r3
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 f8df 	bl	8005cb4 <prvInsertTimerInActiveList>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1ea      	bne.n	8005ad2 <prvReloadTimer+0xe>
        }
    }
 8005afc:	bf00      	nop
 8005afe:	bf00      	nop
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b12:	4b14      	ldr	r3, [pc, #80]	@ (8005b64 <prvProcessExpiredTimer+0x5c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3304      	adds	r3, #4
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fd fec0 	bl	80038a6 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff ffc3 	bl	8005ac4 <prvReloadTimer>
 8005b3e:	e008      	b.n	8005b52 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b46:	f023 0301 	bic.w	r3, r3, #1
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	4798      	blx	r3
    }
 8005b5a:	bf00      	nop
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	200003d8 	.word	0x200003d8

08005b68 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b70:	f107 0308 	add.w	r3, r7, #8
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 f859 	bl	8005c2c <prvGetNextExpireTime>
 8005b7a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	4619      	mov	r1, r3
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 f805 	bl	8005b90 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005b86:	f000 f8d7 	bl	8005d38 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b8a:	bf00      	nop
 8005b8c:	e7f0      	b.n	8005b70 <prvTimerTask+0x8>
	...

08005b90 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005b9a:	f7fe ff5b 	bl	8004a54 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b9e:	f107 0308 	add.w	r3, r7, #8
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 f866 	bl	8005c74 <prvSampleTimeNow>
 8005ba8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d130      	bne.n	8005c12 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10a      	bne.n	8005bcc <prvProcessTimerOrBlockTask+0x3c>
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d806      	bhi.n	8005bcc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005bbe:	f7fe ff57 	bl	8004a70 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005bc2:	68f9      	ldr	r1, [r7, #12]
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7ff ff9f 	bl	8005b08 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005bca:	e024      	b.n	8005c16 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d008      	beq.n	8005be4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005bd2:	4b13      	ldr	r3, [pc, #76]	@ (8005c20 <prvProcessTimerOrBlockTask+0x90>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <prvProcessTimerOrBlockTask+0x50>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e000      	b.n	8005be2 <prvProcessTimerOrBlockTask+0x52>
 8005be0:	2300      	movs	r3, #0
 8005be2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005be4:	4b0f      	ldr	r3, [pc, #60]	@ (8005c24 <prvProcessTimerOrBlockTask+0x94>)
 8005be6:	6818      	ldr	r0, [r3, #0]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	f7fe fc2d 	bl	8004450 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005bf6:	f7fe ff3b 	bl	8004a70 <xTaskResumeAll>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10a      	bne.n	8005c16 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8005c00:	4b09      	ldr	r3, [pc, #36]	@ (8005c28 <prvProcessTimerOrBlockTask+0x98>)
 8005c02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	f3bf 8f6f 	isb	sy
    }
 8005c10:	e001      	b.n	8005c16 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005c12:	f7fe ff2d 	bl	8004a70 <xTaskResumeAll>
    }
 8005c16:	bf00      	nop
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	200003dc 	.word	0x200003dc
 8005c24:	200003e0 	.word	0x200003e0
 8005c28:	e000ed04 	.word	0xe000ed04

08005c2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c34:	4b0e      	ldr	r3, [pc, #56]	@ (8005c70 <prvGetNextExpireTime+0x44>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <prvGetNextExpireTime+0x16>
 8005c3e:	2201      	movs	r2, #1
 8005c40:	e000      	b.n	8005c44 <prvGetNextExpireTime+0x18>
 8005c42:	2200      	movs	r2, #0
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d105      	bne.n	8005c5c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c50:	4b07      	ldr	r3, [pc, #28]	@ (8005c70 <prvGetNextExpireTime+0x44>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	e001      	b.n	8005c60 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005c60:	68fb      	ldr	r3, [r7, #12]
    }
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	200003d8 	.word	0x200003d8

08005c74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8005c7c:	f7ff f802 	bl	8004c84 <xTaskGetTickCount>
 8005c80:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005c82:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb0 <prvSampleTimeNow+0x3c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d205      	bcs.n	8005c98 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005c8c:	f000 f93c 	bl	8005f08 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	e002      	b.n	8005c9e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005c9e:	4a04      	ldr	r2, [pc, #16]	@ (8005cb0 <prvSampleTimeNow+0x3c>)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
    }
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	200003e8 	.word	0x200003e8

08005cb4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
 8005cc0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d812      	bhi.n	8005d00 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	1ad2      	subs	r2, r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d302      	bcc.n	8005cee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	e01b      	b.n	8005d26 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005cee:	4b10      	ldr	r3, [pc, #64]	@ (8005d30 <prvInsertTimerInActiveList+0x7c>)
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	f7fd fd9b 	bl	8003834 <vListInsert>
 8005cfe:	e012      	b.n	8005d26 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d206      	bcs.n	8005d16 <prvInsertTimerInActiveList+0x62>
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d302      	bcc.n	8005d16 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005d10:	2301      	movs	r3, #1
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	e007      	b.n	8005d26 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d16:	4b07      	ldr	r3, [pc, #28]	@ (8005d34 <prvInsertTimerInActiveList+0x80>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4610      	mov	r0, r2
 8005d22:	f7fd fd87 	bl	8003834 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005d26:	697b      	ldr	r3, [r7, #20]
    }
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	200003dc 	.word	0x200003dc
 8005d34:	200003d8 	.word	0x200003d8

08005d38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08a      	sub	sp, #40	@ 0x28
 8005d3c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8005d3e:	1d3b      	adds	r3, r7, #4
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	605a      	str	r2, [r3, #4]
 8005d46:	609a      	str	r2, [r3, #8]
 8005d48:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8005d4a:	e0cb      	b.n	8005ee4 <prvProcessReceivedCommands+0x1ac>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	da1b      	bge.n	8005d8a <prvProcessReceivedCommands+0x52>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d52:	1d3b      	adds	r3, r7, #4
 8005d54:	3304      	adds	r3, #4
 8005d56:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8005d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10d      	bne.n	8005d7a <prvProcessReceivedCommands+0x42>
    __asm volatile
 8005d5e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005d62:	b672      	cpsid	i
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	b662      	cpsie	i
 8005d72:	61bb      	str	r3, [r7, #24]
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
 8005d78:	e7fd      	b.n	8005d76 <prvProcessReceivedCommands+0x3e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d80:	6850      	ldr	r0, [r2, #4]
 8005d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d84:	6892      	ldr	r2, [r2, #8]
 8005d86:	4611      	mov	r1, r2
 8005d88:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f2c0 80a9 	blt.w	8005ee4 <prvProcessReceivedCommands+0x1ac>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d004      	beq.n	8005da8 <prvProcessReceivedCommands+0x70>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	3304      	adds	r3, #4
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fd fd7f 	bl	80038a6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005da8:	463b      	mov	r3, r7
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7ff ff62 	bl	8005c74 <prvSampleTimeNow>
 8005db0:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3b01      	subs	r3, #1
 8005db6:	2b08      	cmp	r3, #8
 8005db8:	f200 8091 	bhi.w	8005ede <prvProcessReceivedCommands+0x1a6>
 8005dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc4 <prvProcessReceivedCommands+0x8c>)
 8005dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc2:	bf00      	nop
 8005dc4:	08005de9 	.word	0x08005de9
 8005dc8:	08005de9 	.word	0x08005de9
 8005dcc:	08005e51 	.word	0x08005e51
 8005dd0:	08005e65 	.word	0x08005e65
 8005dd4:	08005eb5 	.word	0x08005eb5
 8005dd8:	08005de9 	.word	0x08005de9
 8005ddc:	08005de9 	.word	0x08005de9
 8005de0:	08005e51 	.word	0x08005e51
 8005de4:	08005e65 	.word	0x08005e65
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005dee:	f043 0301 	orr.w	r3, r3, #1
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	18d1      	adds	r1, r2, r3
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	69fa      	ldr	r2, [r7, #28]
 8005e06:	6a38      	ldr	r0, [r7, #32]
 8005e08:	f7ff ff54 	bl	8005cb4 <prvInsertTimerInActiveList>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d067      	beq.n	8005ee2 <prvProcessReceivedCommands+0x1aa>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d009      	beq.n	8005e34 <prvProcessReceivedCommands+0xfc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	4413      	add	r3, r2
 8005e28:	69fa      	ldr	r2, [r7, #28]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6a38      	ldr	r0, [r7, #32]
 8005e2e:	f7ff fe49 	bl	8005ac4 <prvReloadTimer>
 8005e32:	e008      	b.n	8005e46 <prvProcessReceivedCommands+0x10e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e3a:	f023 0301 	bic.w	r3, r3, #1
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	6a38      	ldr	r0, [r7, #32]
 8005e4c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005e4e:	e048      	b.n	8005ee2 <prvProcessReceivedCommands+0x1aa>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e56:	f023 0301 	bic.w	r3, r3, #1
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8005e62:	e03f      	b.n	8005ee4 <prvProcessReceivedCommands+0x1ac>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e6a:	f043 0301 	orr.w	r3, r3, #1
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10d      	bne.n	8005ea0 <prvProcessReceivedCommands+0x168>
    __asm volatile
 8005e84:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005e88:	b672      	cpsid	i
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	b662      	cpsie	i
 8005e98:	617b      	str	r3, [r7, #20]
}
 8005e9a:	bf00      	nop
 8005e9c:	bf00      	nop
 8005e9e:	e7fd      	b.n	8005e9c <prvProcessReceivedCommands+0x164>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	699a      	ldr	r2, [r3, #24]
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	18d1      	adds	r1, r2, r3
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	6a38      	ldr	r0, [r7, #32]
 8005eae:	f7ff ff01 	bl	8005cb4 <prvInsertTimerInActiveList>
                        break;
 8005eb2:	e017      	b.n	8005ee4 <prvProcessReceivedCommands+0x1ac>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d103      	bne.n	8005eca <prvProcessReceivedCommands+0x192>
                            {
                                vPortFree( pxTimer );
 8005ec2:	6a38      	ldr	r0, [r7, #32]
 8005ec4:	f000 fc0a 	bl	80066dc <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005ec8:	e00c      	b.n	8005ee4 <prvProcessReceivedCommands+0x1ac>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ed0:	f023 0301 	bic.w	r3, r3, #1
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8005edc:	e002      	b.n	8005ee4 <prvProcessReceivedCommands+0x1ac>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005ede:	bf00      	nop
 8005ee0:	e000      	b.n	8005ee4 <prvProcessReceivedCommands+0x1ac>
                        break;
 8005ee2:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8005ee4:	4b07      	ldr	r3, [pc, #28]	@ (8005f04 <prvProcessReceivedCommands+0x1cc>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	1d39      	adds	r1, r7, #4
 8005eea:	2200      	movs	r2, #0
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fd ff39 	bl	8003d64 <xQueueReceive>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f47f af29 	bne.w	8005d4c <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8005efa:	bf00      	nop
 8005efc:	bf00      	nop
 8005efe:	3728      	adds	r7, #40	@ 0x28
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	200003e0 	.word	0x200003e0

08005f08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f0e:	e009      	b.n	8005f24 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f10:	4b0e      	ldr	r3, [pc, #56]	@ (8005f4c <prvSwitchTimerLists+0x44>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8005f1a:	f04f 31ff 	mov.w	r1, #4294967295
 8005f1e:	6838      	ldr	r0, [r7, #0]
 8005f20:	f7ff fdf2 	bl	8005b08 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f24:	4b09      	ldr	r3, [pc, #36]	@ (8005f4c <prvSwitchTimerLists+0x44>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005f2e:	4b07      	ldr	r3, [pc, #28]	@ (8005f4c <prvSwitchTimerLists+0x44>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005f34:	4b06      	ldr	r3, [pc, #24]	@ (8005f50 <prvSwitchTimerLists+0x48>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a04      	ldr	r2, [pc, #16]	@ (8005f4c <prvSwitchTimerLists+0x44>)
 8005f3a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005f3c:	4a04      	ldr	r2, [pc, #16]	@ (8005f50 <prvSwitchTimerLists+0x48>)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6013      	str	r3, [r2, #0]
    }
 8005f42:	bf00      	nop
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	200003d8 	.word	0x200003d8
 8005f50:	200003dc 	.word	0x200003dc

08005f54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005f58:	f000 f994 	bl	8006284 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005f5c:	4b12      	ldr	r3, [pc, #72]	@ (8005fa8 <prvCheckForValidListAndQueue+0x54>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d11d      	bne.n	8005fa0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005f64:	4811      	ldr	r0, [pc, #68]	@ (8005fac <prvCheckForValidListAndQueue+0x58>)
 8005f66:	f7fd fc38 	bl	80037da <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005f6a:	4811      	ldr	r0, [pc, #68]	@ (8005fb0 <prvCheckForValidListAndQueue+0x5c>)
 8005f6c:	f7fd fc35 	bl	80037da <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005f70:	4b10      	ldr	r3, [pc, #64]	@ (8005fb4 <prvCheckForValidListAndQueue+0x60>)
 8005f72:	4a0e      	ldr	r2, [pc, #56]	@ (8005fac <prvCheckForValidListAndQueue+0x58>)
 8005f74:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005f76:	4b10      	ldr	r3, [pc, #64]	@ (8005fb8 <prvCheckForValidListAndQueue+0x64>)
 8005f78:	4a0d      	ldr	r2, [pc, #52]	@ (8005fb0 <prvCheckForValidListAndQueue+0x5c>)
 8005f7a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2110      	movs	r1, #16
 8005f80:	2005      	movs	r0, #5
 8005f82:	f7fd fd51 	bl	8003a28 <xQueueGenericCreate>
 8005f86:	4603      	mov	r3, r0
 8005f88:	4a07      	ldr	r2, [pc, #28]	@ (8005fa8 <prvCheckForValidListAndQueue+0x54>)
 8005f8a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8005f8c:	4b06      	ldr	r3, [pc, #24]	@ (8005fa8 <prvCheckForValidListAndQueue+0x54>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f94:	4b04      	ldr	r3, [pc, #16]	@ (8005fa8 <prvCheckForValidListAndQueue+0x54>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4908      	ldr	r1, [pc, #32]	@ (8005fbc <prvCheckForValidListAndQueue+0x68>)
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fe fa06 	bl	80043ac <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005fa0:	f000 f9a6 	bl	80062f0 <vPortExitCritical>
    }
 8005fa4:	bf00      	nop
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	200003e0 	.word	0x200003e0
 8005fac:	200003b0 	.word	0x200003b0
 8005fb0:	200003c4 	.word	0x200003c4
 8005fb4:	200003d8 	.word	0x200003d8
 8005fb8:	200003dc 	.word	0x200003dc
 8005fbc:	08007e10 	.word	0x08007e10

08005fc0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3b04      	subs	r3, #4
 8005fd0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005fd8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3b04      	subs	r3, #4
 8005fde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f023 0201 	bic.w	r2, r3, #1
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3b04      	subs	r3, #4
 8005fee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005ff0:	4a0c      	ldr	r2, [pc, #48]	@ (8006024 <pxPortInitialiseStack+0x64>)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3b14      	subs	r3, #20
 8005ffa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	3b04      	subs	r3, #4
 8006006:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f06f 0202 	mvn.w	r2, #2
 800600e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	3b20      	subs	r3, #32
 8006014:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006016:	68fb      	ldr	r3, [r7, #12]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	08006029 	.word	0x08006029

08006028 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006032:	4b15      	ldr	r3, [pc, #84]	@ (8006088 <prvTaskExitError+0x60>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603a:	d00d      	beq.n	8006058 <prvTaskExitError+0x30>
    __asm volatile
 800603c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006040:	b672      	cpsid	i
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	b662      	cpsie	i
 8006050:	60fb      	str	r3, [r7, #12]
}
 8006052:	bf00      	nop
 8006054:	bf00      	nop
 8006056:	e7fd      	b.n	8006054 <prvTaskExitError+0x2c>
    __asm volatile
 8006058:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800605c:	b672      	cpsid	i
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	b662      	cpsie	i
 800606c:	60bb      	str	r3, [r7, #8]
}
 800606e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006070:	bf00      	nop
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0fc      	beq.n	8006072 <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006078:	bf00      	nop
 800607a:	bf00      	nop
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	20000010 	.word	0x20000010
 800608c:	00000000 	.word	0x00000000

08006090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006090:	4b07      	ldr	r3, [pc, #28]	@ (80060b0 <pxCurrentTCBConst2>)
 8006092:	6819      	ldr	r1, [r3, #0]
 8006094:	6808      	ldr	r0, [r1, #0]
 8006096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609a:	f380 8809 	msr	PSP, r0
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f04f 0000 	mov.w	r0, #0
 80060a6:	f380 8811 	msr	BASEPRI, r0
 80060aa:	4770      	bx	lr
 80060ac:	f3af 8000 	nop.w

080060b0 <pxCurrentTCBConst2>:
 80060b0:	200002ac 	.word	0x200002ac
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop

080060b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80060b8:	4808      	ldr	r0, [pc, #32]	@ (80060dc <prvPortStartFirstTask+0x24>)
 80060ba:	6800      	ldr	r0, [r0, #0]
 80060bc:	6800      	ldr	r0, [r0, #0]
 80060be:	f380 8808 	msr	MSP, r0
 80060c2:	f04f 0000 	mov.w	r0, #0
 80060c6:	f380 8814 	msr	CONTROL, r0
 80060ca:	b662      	cpsie	i
 80060cc:	b661      	cpsie	f
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	df00      	svc	0
 80060d8:	bf00      	nop
 80060da:	0000      	.short	0x0000
 80060dc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop

080060e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b08a      	sub	sp, #40	@ 0x28
 80060e8:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80060ea:	4b5c      	ldr	r3, [pc, #368]	@ (800625c <xPortStartScheduler+0x178>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80060f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f2:	332c      	adds	r3, #44	@ 0x2c
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a5a      	ldr	r2, [pc, #360]	@ (8006260 <xPortStartScheduler+0x17c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d00d      	beq.n	8006118 <xPortStartScheduler+0x34>
    __asm volatile
 80060fc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006100:	b672      	cpsid	i
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	b662      	cpsie	i
 8006110:	61fb      	str	r3, [r7, #28]
}
 8006112:	bf00      	nop
 8006114:	bf00      	nop
 8006116:	e7fd      	b.n	8006114 <xPortStartScheduler+0x30>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8006118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611a:	3338      	adds	r3, #56	@ 0x38
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a51      	ldr	r2, [pc, #324]	@ (8006264 <xPortStartScheduler+0x180>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00d      	beq.n	8006140 <xPortStartScheduler+0x5c>
    __asm volatile
 8006124:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006128:	b672      	cpsid	i
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	b662      	cpsie	i
 8006138:	61bb      	str	r3, [r7, #24]
}
 800613a:	bf00      	nop
 800613c:	bf00      	nop
 800613e:	e7fd      	b.n	800613c <xPortStartScheduler+0x58>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006144:	4b48      	ldr	r3, [pc, #288]	@ (8006268 <xPortStartScheduler+0x184>)
 8006146:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	22ff      	movs	r2, #255	@ 0xff
 8006154:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	b2db      	uxtb	r3, r3
 800615c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800615e:	79fb      	ldrb	r3, [r7, #7]
 8006160:	b2db      	uxtb	r3, r3
 8006162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006166:	b2da      	uxtb	r2, r3
 8006168:	4b40      	ldr	r3, [pc, #256]	@ (800626c <xPortStartScheduler+0x188>)
 800616a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800616c:	4b3f      	ldr	r3, [pc, #252]	@ (800626c <xPortStartScheduler+0x188>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10d      	bne.n	8006190 <xPortStartScheduler+0xac>
    __asm volatile
 8006174:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006178:	b672      	cpsid	i
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	b662      	cpsie	i
 8006188:	617b      	str	r3, [r7, #20]
}
 800618a:	bf00      	nop
 800618c:	bf00      	nop
 800618e:	e7fd      	b.n	800618c <xPortStartScheduler+0xa8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	b2db      	uxtb	r3, r3
 8006194:	43db      	mvns	r3, r3
 8006196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	d015      	beq.n	80061ca <xPortStartScheduler+0xe6>
    __asm volatile
 800619e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80061a2:	b672      	cpsid	i
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	b662      	cpsie	i
 80061b2:	613b      	str	r3, [r7, #16]
}
 80061b4:	bf00      	nop
 80061b6:	bf00      	nop
 80061b8:	e7fd      	b.n	80061b6 <xPortStartScheduler+0xd2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	3301      	adds	r3, #1
 80061be:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061ca:	79fb      	ldrb	r3, [r7, #7]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d2:	2b80      	cmp	r3, #128	@ 0x80
 80061d4:	d0f1      	beq.n	80061ba <xPortStartScheduler+0xd6>
        }

        if( ulImplementedPrioBits == 8 )
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d103      	bne.n	80061e4 <xPortStartScheduler+0x100>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80061dc:	4b24      	ldr	r3, [pc, #144]	@ (8006270 <xPortStartScheduler+0x18c>)
 80061de:	2200      	movs	r2, #0
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	e004      	b.n	80061ee <xPortStartScheduler+0x10a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f1c3 0307 	rsb	r3, r3, #7
 80061ea:	4a21      	ldr	r2, [pc, #132]	@ (8006270 <xPortStartScheduler+0x18c>)
 80061ec:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80061ee:	4b20      	ldr	r3, [pc, #128]	@ (8006270 <xPortStartScheduler+0x18c>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	021b      	lsls	r3, r3, #8
 80061f4:	4a1e      	ldr	r2, [pc, #120]	@ (8006270 <xPortStartScheduler+0x18c>)
 80061f6:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006270 <xPortStartScheduler+0x18c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006200:	4a1b      	ldr	r2, [pc, #108]	@ (8006270 <xPortStartScheduler+0x18c>)
 8006202:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	b2da      	uxtb	r2, r3
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800620c:	4b19      	ldr	r3, [pc, #100]	@ (8006274 <xPortStartScheduler+0x190>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a18      	ldr	r2, [pc, #96]	@ (8006274 <xPortStartScheduler+0x190>)
 8006212:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006216:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006218:	4b16      	ldr	r3, [pc, #88]	@ (8006274 <xPortStartScheduler+0x190>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a15      	ldr	r2, [pc, #84]	@ (8006274 <xPortStartScheduler+0x190>)
 800621e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006222:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8006224:	4b14      	ldr	r3, [pc, #80]	@ (8006278 <xPortStartScheduler+0x194>)
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800622a:	f000 f8e9 	bl	8006400 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800622e:	4b13      	ldr	r3, [pc, #76]	@ (800627c <xPortStartScheduler+0x198>)
 8006230:	2200      	movs	r2, #0
 8006232:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006234:	f000 f908 	bl	8006448 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006238:	4b11      	ldr	r3, [pc, #68]	@ (8006280 <xPortStartScheduler+0x19c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a10      	ldr	r2, [pc, #64]	@ (8006280 <xPortStartScheduler+0x19c>)
 800623e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006242:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006244:	f7ff ff38 	bl	80060b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006248:	f7fe fe54 	bl	8004ef4 <vTaskSwitchContext>
    prvTaskExitError();
 800624c:	f7ff feec 	bl	8006028 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3728      	adds	r7, #40	@ 0x28
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	e000ed08 	.word	0xe000ed08
 8006260:	08006091 	.word	0x08006091
 8006264:	08006351 	.word	0x08006351
 8006268:	e000e400 	.word	0xe000e400
 800626c:	200003ec 	.word	0x200003ec
 8006270:	200003f0 	.word	0x200003f0
 8006274:	e000ed20 	.word	0xe000ed20
 8006278:	e000ed1c 	.word	0xe000ed1c
 800627c:	20000010 	.word	0x20000010
 8006280:	e000ef34 	.word	0xe000ef34

08006284 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
    __asm volatile
 800628a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800628e:	b672      	cpsid	i
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	b662      	cpsie	i
 800629e:	607b      	str	r3, [r7, #4]
}
 80062a0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80062a2:	4b11      	ldr	r3, [pc, #68]	@ (80062e8 <vPortEnterCritical+0x64>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3301      	adds	r3, #1
 80062a8:	4a0f      	ldr	r2, [pc, #60]	@ (80062e8 <vPortEnterCritical+0x64>)
 80062aa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80062ac:	4b0e      	ldr	r3, [pc, #56]	@ (80062e8 <vPortEnterCritical+0x64>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d112      	bne.n	80062da <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062b4:	4b0d      	ldr	r3, [pc, #52]	@ (80062ec <vPortEnterCritical+0x68>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00d      	beq.n	80062da <vPortEnterCritical+0x56>
    __asm volatile
 80062be:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80062c2:	b672      	cpsid	i
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	b662      	cpsie	i
 80062d2:	603b      	str	r3, [r7, #0]
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop
 80062d8:	e7fd      	b.n	80062d6 <vPortEnterCritical+0x52>
    }
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	20000010 	.word	0x20000010
 80062ec:	e000ed04 	.word	0xe000ed04

080062f0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80062f6:	4b13      	ldr	r3, [pc, #76]	@ (8006344 <vPortExitCritical+0x54>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10d      	bne.n	800631a <vPortExitCritical+0x2a>
    __asm volatile
 80062fe:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006302:	b672      	cpsid	i
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	b662      	cpsie	i
 8006312:	607b      	str	r3, [r7, #4]
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop
 8006318:	e7fd      	b.n	8006316 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 800631a:	4b0a      	ldr	r3, [pc, #40]	@ (8006344 <vPortExitCritical+0x54>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3b01      	subs	r3, #1
 8006320:	4a08      	ldr	r2, [pc, #32]	@ (8006344 <vPortExitCritical+0x54>)
 8006322:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006324:	4b07      	ldr	r3, [pc, #28]	@ (8006344 <vPortExitCritical+0x54>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d105      	bne.n	8006338 <vPortExitCritical+0x48>
 800632c:	2300      	movs	r3, #0
 800632e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8006336:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	20000010 	.word	0x20000010
	...

08006350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006350:	f3ef 8009 	mrs	r0, PSP
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	4b15      	ldr	r3, [pc, #84]	@ (80063b0 <pxCurrentTCBConst>)
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	f01e 0f10 	tst.w	lr, #16
 8006360:	bf08      	it	eq
 8006362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800636a:	6010      	str	r0, [r2, #0]
 800636c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006370:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8006374:	b672      	cpsid	i
 8006376:	f380 8811 	msr	BASEPRI, r0
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	b662      	cpsie	i
 8006384:	f7fe fdb6 	bl	8004ef4 <vTaskSwitchContext>
 8006388:	f04f 0000 	mov.w	r0, #0
 800638c:	f380 8811 	msr	BASEPRI, r0
 8006390:	bc09      	pop	{r0, r3}
 8006392:	6819      	ldr	r1, [r3, #0]
 8006394:	6808      	ldr	r0, [r1, #0]
 8006396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639a:	f01e 0f10 	tst.w	lr, #16
 800639e:	bf08      	it	eq
 80063a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063a4:	f380 8809 	msr	PSP, r0
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop

080063b0 <pxCurrentTCBConst>:
 80063b0:	200002ac 	.word	0x200002ac
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop

080063b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
    __asm volatile
 80063be:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80063c2:	b672      	cpsid	i
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	b662      	cpsie	i
 80063d2:	607b      	str	r3, [r7, #4]
}
 80063d4:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80063d6:	f7fe fc71 	bl	8004cbc <xTaskIncrementTick>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <SysTick_Handler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063e0:	4b06      	ldr	r3, [pc, #24]	@ (80063fc <SysTick_Handler+0x44>)
 80063e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	2300      	movs	r3, #0
 80063ea:	603b      	str	r3, [r7, #0]
    __asm volatile
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	f383 8811 	msr	BASEPRI, r3
}
 80063f2:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80063f4:	bf00      	nop
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	e000ed04 	.word	0xe000ed04

08006400 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006404:	4b0b      	ldr	r3, [pc, #44]	@ (8006434 <vPortSetupTimerInterrupt+0x34>)
 8006406:	2200      	movs	r2, #0
 8006408:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800640a:	4b0b      	ldr	r3, [pc, #44]	@ (8006438 <vPortSetupTimerInterrupt+0x38>)
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006410:	4b0a      	ldr	r3, [pc, #40]	@ (800643c <vPortSetupTimerInterrupt+0x3c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a0a      	ldr	r2, [pc, #40]	@ (8006440 <vPortSetupTimerInterrupt+0x40>)
 8006416:	fba2 2303 	umull	r2, r3, r2, r3
 800641a:	099b      	lsrs	r3, r3, #6
 800641c:	4a09      	ldr	r2, [pc, #36]	@ (8006444 <vPortSetupTimerInterrupt+0x44>)
 800641e:	3b01      	subs	r3, #1
 8006420:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006422:	4b04      	ldr	r3, [pc, #16]	@ (8006434 <vPortSetupTimerInterrupt+0x34>)
 8006424:	2207      	movs	r2, #7
 8006426:	601a      	str	r2, [r3, #0]
}
 8006428:	bf00      	nop
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	e000e010 	.word	0xe000e010
 8006438:	e000e018 	.word	0xe000e018
 800643c:	20000000 	.word	0x20000000
 8006440:	10624dd3 	.word	0x10624dd3
 8006444:	e000e014 	.word	0xe000e014

08006448 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006448:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006458 <vPortEnableVFP+0x10>
 800644c:	6801      	ldr	r1, [r0, #0]
 800644e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006452:	6001      	str	r1, [r0, #0]
 8006454:	4770      	bx	lr
 8006456:	0000      	.short	0x0000
 8006458:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 800645c:	bf00      	nop
 800645e:	bf00      	nop

08006460 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b08e      	sub	sp, #56	@ 0x38
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006468:	2300      	movs	r3, #0
 800646a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d022      	beq.n	80064b8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8006472:	2308      	movs	r3, #8
 8006474:	43db      	mvns	r3, r3
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	429a      	cmp	r2, r3
 800647a:	d81b      	bhi.n	80064b4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800647c:	2208      	movs	r2, #8
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4413      	add	r3, r2
 8006482:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	2b00      	cmp	r3, #0
 800648c:	d014      	beq.n	80064b8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	f1c3 0308 	rsb	r3, r3, #8
 8006498:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800649a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649c:	43db      	mvns	r3, r3
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d804      	bhi.n	80064ae <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a8:	4413      	add	r3, r2
 80064aa:	607b      	str	r3, [r7, #4]
 80064ac:	e004      	b.n	80064b8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 80064ae:	2300      	movs	r3, #0
 80064b0:	607b      	str	r3, [r7, #4]
 80064b2:	e001      	b.n	80064b8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80064b4:	2300      	movs	r3, #0
 80064b6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80064b8:	f7fe facc 	bl	8004a54 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80064bc:	4b80      	ldr	r3, [pc, #512]	@ (80066c0 <pvPortMalloc+0x260>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80064c4:	f000 f98a 	bl	80067dc <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f2c0 80de 	blt.w	800668c <pvPortMalloc+0x22c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 80da 	beq.w	800668c <pvPortMalloc+0x22c>
 80064d8:	4b7a      	ldr	r3, [pc, #488]	@ (80066c4 <pvPortMalloc+0x264>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	429a      	cmp	r2, r3
 80064e0:	f200 80d4 	bhi.w	800668c <pvPortMalloc+0x22c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80064e4:	4b78      	ldr	r3, [pc, #480]	@ (80066c8 <pvPortMalloc+0x268>)
 80064e6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80064e8:	4b77      	ldr	r3, [pc, #476]	@ (80066c8 <pvPortMalloc+0x268>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80064ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064f0:	4a76      	ldr	r2, [pc, #472]	@ (80066cc <pvPortMalloc+0x26c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d305      	bcc.n	8006502 <pvPortMalloc+0xa2>
 80064f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064f8:	4a75      	ldr	r2, [pc, #468]	@ (80066d0 <pvPortMalloc+0x270>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d801      	bhi.n	8006502 <pvPortMalloc+0xa2>
 80064fe:	2301      	movs	r3, #1
 8006500:	e000      	b.n	8006504 <pvPortMalloc+0xa4>
 8006502:	2300      	movs	r3, #0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d12d      	bne.n	8006564 <pvPortMalloc+0x104>
    __asm volatile
 8006508:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800650c:	b672      	cpsid	i
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	b662      	cpsie	i
 800651c:	623b      	str	r3, [r7, #32]
}
 800651e:	bf00      	nop
 8006520:	bf00      	nop
 8006522:	e7fd      	b.n	8006520 <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8006524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006526:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8006528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800652e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006530:	4a66      	ldr	r2, [pc, #408]	@ (80066cc <pvPortMalloc+0x26c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d305      	bcc.n	8006542 <pvPortMalloc+0xe2>
 8006536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006538:	4a65      	ldr	r2, [pc, #404]	@ (80066d0 <pvPortMalloc+0x270>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d801      	bhi.n	8006542 <pvPortMalloc+0xe2>
 800653e:	2301      	movs	r3, #1
 8006540:	e000      	b.n	8006544 <pvPortMalloc+0xe4>
 8006542:	2300      	movs	r3, #0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10d      	bne.n	8006564 <pvPortMalloc+0x104>
    __asm volatile
 8006548:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800654c:	b672      	cpsid	i
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	b662      	cpsie	i
 800655c:	61fb      	str	r3, [r7, #28]
}
 800655e:	bf00      	nop
 8006560:	bf00      	nop
 8006562:	e7fd      	b.n	8006560 <pvPortMalloc+0x100>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8006564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	429a      	cmp	r2, r3
 800656c:	d903      	bls.n	8006576 <pvPortMalloc+0x116>
 800656e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1d6      	bne.n	8006524 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006576:	4b52      	ldr	r3, [pc, #328]	@ (80066c0 <pvPortMalloc+0x260>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800657c:	429a      	cmp	r2, r3
 800657e:	f000 8085 	beq.w	800668c <pvPortMalloc+0x22c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8006582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2208      	movs	r2, #8
 8006588:	4413      	add	r3, r2
 800658a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 800658c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800658e:	4a4f      	ldr	r2, [pc, #316]	@ (80066cc <pvPortMalloc+0x26c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d305      	bcc.n	80065a0 <pvPortMalloc+0x140>
 8006594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006596:	4a4e      	ldr	r2, [pc, #312]	@ (80066d0 <pvPortMalloc+0x270>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d801      	bhi.n	80065a0 <pvPortMalloc+0x140>
 800659c:	2301      	movs	r3, #1
 800659e:	e000      	b.n	80065a2 <pvPortMalloc+0x142>
 80065a0:	2300      	movs	r3, #0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10d      	bne.n	80065c2 <pvPortMalloc+0x162>
    __asm volatile
 80065a6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80065aa:	b672      	cpsid	i
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	b662      	cpsie	i
 80065ba:	61bb      	str	r3, [r7, #24]
}
 80065bc:	bf00      	nop
 80065be:	bf00      	nop
 80065c0:	e7fd      	b.n	80065be <pvPortMalloc+0x15e>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80065ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d90d      	bls.n	80065f0 <pvPortMalloc+0x190>
    __asm volatile
 80065d4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80065d8:	b672      	cpsid	i
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	b662      	cpsie	i
 80065e8:	617b      	str	r3, [r7, #20]
}
 80065ea:	bf00      	nop
 80065ec:	bf00      	nop
 80065ee:	e7fd      	b.n	80065ec <pvPortMalloc+0x18c>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	1ad2      	subs	r2, r2, r3
 80065f8:	2308      	movs	r3, #8
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d926      	bls.n	800664e <pvPortMalloc+0x1ee>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006600:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4413      	add	r3, r2
 8006606:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660a:	f003 0307 	and.w	r3, r3, #7
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00d      	beq.n	800662e <pvPortMalloc+0x1ce>
    __asm volatile
 8006612:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006616:	b672      	cpsid	i
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	b662      	cpsie	i
 8006626:	613b      	str	r3, [r7, #16]
}
 8006628:	bf00      	nop
 800662a:	bf00      	nop
 800662c:	e7fd      	b.n	800662a <pvPortMalloc+0x1ca>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800662e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	1ad2      	subs	r2, r2, r3
 8006636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006638:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800663a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8006640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006646:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8006648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800664c:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800664e:	4b1d      	ldr	r3, [pc, #116]	@ (80066c4 <pvPortMalloc+0x264>)
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	4a1a      	ldr	r2, [pc, #104]	@ (80066c4 <pvPortMalloc+0x264>)
 800665a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800665c:	4b19      	ldr	r3, [pc, #100]	@ (80066c4 <pvPortMalloc+0x264>)
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	4b1c      	ldr	r3, [pc, #112]	@ (80066d4 <pvPortMalloc+0x274>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	429a      	cmp	r2, r3
 8006666:	d203      	bcs.n	8006670 <pvPortMalloc+0x210>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006668:	4b16      	ldr	r3, [pc, #88]	@ (80066c4 <pvPortMalloc+0x264>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a19      	ldr	r2, [pc, #100]	@ (80066d4 <pvPortMalloc+0x274>)
 800666e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800667a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800667c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800667e:	2200      	movs	r2, #0
 8006680:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006682:	4b15      	ldr	r3, [pc, #84]	@ (80066d8 <pvPortMalloc+0x278>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3301      	adds	r3, #1
 8006688:	4a13      	ldr	r2, [pc, #76]	@ (80066d8 <pvPortMalloc+0x278>)
 800668a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800668c:	f7fe f9f0 	bl	8004a70 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00d      	beq.n	80066b6 <pvPortMalloc+0x256>
    __asm volatile
 800669a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800669e:	b672      	cpsid	i
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	b662      	cpsie	i
 80066ae:	60fb      	str	r3, [r7, #12]
}
 80066b0:	bf00      	nop
 80066b2:	bf00      	nop
 80066b4:	e7fd      	b.n	80066b2 <pvPortMalloc+0x252>
    return pvReturn;
 80066b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3738      	adds	r7, #56	@ 0x38
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	2000bbfc 	.word	0x2000bbfc
 80066c4:	2000bc00 	.word	0x2000bc00
 80066c8:	2000bbf4 	.word	0x2000bbf4
 80066cc:	200003f4 	.word	0x200003f4
 80066d0:	2000bbf3 	.word	0x2000bbf3
 80066d4:	2000bc04 	.word	0x2000bc04
 80066d8:	2000bc08 	.word	0x2000bc08

080066dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b088      	sub	sp, #32
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d06a      	beq.n	80067c4 <vPortFree+0xe8>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80066ee:	2308      	movs	r3, #8
 80066f0:	425b      	negs	r3, r3
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	4413      	add	r3, r2
 80066f6:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	4a33      	ldr	r2, [pc, #204]	@ (80067cc <vPortFree+0xf0>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d305      	bcc.n	8006710 <vPortFree+0x34>
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	4a32      	ldr	r2, [pc, #200]	@ (80067d0 <vPortFree+0xf4>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d801      	bhi.n	8006710 <vPortFree+0x34>
 800670c:	2301      	movs	r3, #1
 800670e:	e000      	b.n	8006712 <vPortFree+0x36>
 8006710:	2300      	movs	r3, #0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10d      	bne.n	8006732 <vPortFree+0x56>
    __asm volatile
 8006716:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800671a:	b672      	cpsid	i
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	b662      	cpsie	i
 800672a:	617b      	str	r3, [r7, #20]
}
 800672c:	bf00      	nop
 800672e:	bf00      	nop
 8006730:	e7fd      	b.n	800672e <vPortFree+0x52>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	db0d      	blt.n	8006756 <vPortFree+0x7a>
    __asm volatile
 800673a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800673e:	b672      	cpsid	i
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	b662      	cpsie	i
 800674e:	613b      	str	r3, [r7, #16]
}
 8006750:	bf00      	nop
 8006752:	bf00      	nop
 8006754:	e7fd      	b.n	8006752 <vPortFree+0x76>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00d      	beq.n	800677a <vPortFree+0x9e>
    __asm volatile
 800675e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006762:	b672      	cpsid	i
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	b662      	cpsie	i
 8006772:	60fb      	str	r3, [r7, #12]
}
 8006774:	bf00      	nop
 8006776:	bf00      	nop
 8006778:	e7fd      	b.n	8006776 <vPortFree+0x9a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	0fdb      	lsrs	r3, r3, #31
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d01c      	beq.n	80067c4 <vPortFree+0xe8>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d118      	bne.n	80067c4 <vPortFree+0xe8>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800679e:	f7fe f959 	bl	8004a54 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	4b0b      	ldr	r3, [pc, #44]	@ (80067d4 <vPortFree+0xf8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4413      	add	r3, r2
 80067ac:	4a09      	ldr	r2, [pc, #36]	@ (80067d4 <vPortFree+0xf8>)
 80067ae:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067b0:	69b8      	ldr	r0, [r7, #24]
 80067b2:	f000 f86d 	bl	8006890 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80067b6:	4b08      	ldr	r3, [pc, #32]	@ (80067d8 <vPortFree+0xfc>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3301      	adds	r3, #1
 80067bc:	4a06      	ldr	r2, [pc, #24]	@ (80067d8 <vPortFree+0xfc>)
 80067be:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80067c0:	f7fe f956 	bl	8004a70 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80067c4:	bf00      	nop
 80067c6:	3720      	adds	r7, #32
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	200003f4 	.word	0x200003f4
 80067d0:	2000bbf3 	.word	0x2000bbf3
 80067d4:	2000bc00 	.word	0x2000bc00
 80067d8:	2000bc0c 	.word	0x2000bc0c

080067dc <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067e2:	f44f 4338 	mov.w	r3, #47104	@ 0xb800
 80067e6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80067e8:	4b24      	ldr	r3, [pc, #144]	@ (800687c <prvHeapInit+0xa0>)
 80067ea:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f003 0307 	and.w	r3, r3, #7
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00c      	beq.n	8006810 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3307      	adds	r3, #7
 80067fa:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0307 	bic.w	r3, r3, #7
 8006802:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	4a1c      	ldr	r2, [pc, #112]	@ (800687c <prvHeapInit+0xa0>)
 800680c:	4413      	add	r3, r2
 800680e:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4a1b      	ldr	r2, [pc, #108]	@ (8006880 <prvHeapInit+0xa4>)
 8006814:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006816:	4b1a      	ldr	r3, [pc, #104]	@ (8006880 <prvHeapInit+0xa4>)
 8006818:	2200      	movs	r2, #0
 800681a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	4413      	add	r3, r2
 8006822:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8006824:	2208      	movs	r2, #8
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	1a9b      	subs	r3, r3, r2
 800682a:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f023 0307 	bic.w	r3, r3, #7
 8006832:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a13      	ldr	r2, [pc, #76]	@ (8006884 <prvHeapInit+0xa8>)
 8006838:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800683a:	4b12      	ldr	r3, [pc, #72]	@ (8006884 <prvHeapInit+0xa8>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2200      	movs	r2, #0
 8006840:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8006842:	4b10      	ldr	r3, [pc, #64]	@ (8006884 <prvHeapInit+0xa8>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2200      	movs	r2, #0
 8006848:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	1ad2      	subs	r2, r2, r3
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8006858:	4b0a      	ldr	r3, [pc, #40]	@ (8006884 <prvHeapInit+0xa8>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	4a08      	ldr	r2, [pc, #32]	@ (8006888 <prvHeapInit+0xac>)
 8006866:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	4a07      	ldr	r2, [pc, #28]	@ (800688c <prvHeapInit+0xb0>)
 800686e:	6013      	str	r3, [r2, #0]
}
 8006870:	bf00      	nop
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	200003f4 	.word	0x200003f4
 8006880:	2000bbf4 	.word	0x2000bbf4
 8006884:	2000bbfc 	.word	0x2000bbfc
 8006888:	2000bc04 	.word	0x2000bc04
 800688c:	2000bc00 	.word	0x2000bc00

08006890 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006890:	b480      	push	{r7}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006898:	4b37      	ldr	r3, [pc, #220]	@ (8006978 <prvInsertBlockIntoFreeList+0xe8>)
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	e002      	b.n	80068a4 <prvInsertBlockIntoFreeList+0x14>
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	617b      	str	r3, [r7, #20]
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d8f7      	bhi.n	800689e <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	4a31      	ldr	r2, [pc, #196]	@ (8006978 <prvInsertBlockIntoFreeList+0xe8>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d01a      	beq.n	80068ec <prvInsertBlockIntoFreeList+0x5c>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	4a30      	ldr	r2, [pc, #192]	@ (800697c <prvInsertBlockIntoFreeList+0xec>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d305      	bcc.n	80068ca <prvInsertBlockIntoFreeList+0x3a>
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	4a2f      	ldr	r2, [pc, #188]	@ (8006980 <prvInsertBlockIntoFreeList+0xf0>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d801      	bhi.n	80068ca <prvInsertBlockIntoFreeList+0x3a>
 80068c6:	2301      	movs	r3, #1
 80068c8:	e000      	b.n	80068cc <prvInsertBlockIntoFreeList+0x3c>
 80068ca:	2300      	movs	r3, #0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10d      	bne.n	80068ec <prvInsertBlockIntoFreeList+0x5c>
    __asm volatile
 80068d0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80068d4:	b672      	cpsid	i
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	b662      	cpsie	i
 80068e4:	60fb      	str	r3, [r7, #12]
}
 80068e6:	bf00      	nop
 80068e8:	bf00      	nop
 80068ea:	e7fd      	b.n	80068e8 <prvInsertBlockIntoFreeList+0x58>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4413      	add	r3, r2
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d108      	bne.n	8006910 <prvInsertBlockIntoFreeList+0x80>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	441a      	add	r2, r3
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	441a      	add	r2, r3
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	429a      	cmp	r2, r3
 8006922:	d118      	bne.n	8006956 <prvInsertBlockIntoFreeList+0xc6>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	4b16      	ldr	r3, [pc, #88]	@ (8006984 <prvInsertBlockIntoFreeList+0xf4>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	429a      	cmp	r2, r3
 800692e:	d00d      	beq.n	800694c <prvInsertBlockIntoFreeList+0xbc>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	441a      	add	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	e008      	b.n	800695e <prvInsertBlockIntoFreeList+0xce>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800694c:	4b0d      	ldr	r3, [pc, #52]	@ (8006984 <prvInsertBlockIntoFreeList+0xf4>)
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	e003      	b.n	800695e <prvInsertBlockIntoFreeList+0xce>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	429a      	cmp	r2, r3
 8006964:	d002      	beq.n	800696c <prvInsertBlockIntoFreeList+0xdc>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800696c:	bf00      	nop
 800696e:	371c      	adds	r7, #28
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	2000bbf4 	.word	0x2000bbf4
 800697c:	200003f4 	.word	0x200003f4
 8006980:	2000bbf3 	.word	0x2000bbf3
 8006984:	2000bbfc 	.word	0x2000bbfc

08006988 <rand>:
 8006988:	4b16      	ldr	r3, [pc, #88]	@ (80069e4 <rand+0x5c>)
 800698a:	b510      	push	{r4, lr}
 800698c:	681c      	ldr	r4, [r3, #0]
 800698e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006990:	b9b3      	cbnz	r3, 80069c0 <rand+0x38>
 8006992:	2018      	movs	r0, #24
 8006994:	f000 fa4e 	bl	8006e34 <malloc>
 8006998:	4602      	mov	r2, r0
 800699a:	6320      	str	r0, [r4, #48]	@ 0x30
 800699c:	b920      	cbnz	r0, 80069a8 <rand+0x20>
 800699e:	4b12      	ldr	r3, [pc, #72]	@ (80069e8 <rand+0x60>)
 80069a0:	4812      	ldr	r0, [pc, #72]	@ (80069ec <rand+0x64>)
 80069a2:	2152      	movs	r1, #82	@ 0x52
 80069a4:	f000 f9de 	bl	8006d64 <__assert_func>
 80069a8:	4911      	ldr	r1, [pc, #68]	@ (80069f0 <rand+0x68>)
 80069aa:	4b12      	ldr	r3, [pc, #72]	@ (80069f4 <rand+0x6c>)
 80069ac:	e9c0 1300 	strd	r1, r3, [r0]
 80069b0:	4b11      	ldr	r3, [pc, #68]	@ (80069f8 <rand+0x70>)
 80069b2:	6083      	str	r3, [r0, #8]
 80069b4:	230b      	movs	r3, #11
 80069b6:	8183      	strh	r3, [r0, #12]
 80069b8:	2100      	movs	r1, #0
 80069ba:	2001      	movs	r0, #1
 80069bc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80069c0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80069c2:	480e      	ldr	r0, [pc, #56]	@ (80069fc <rand+0x74>)
 80069c4:	690b      	ldr	r3, [r1, #16]
 80069c6:	694c      	ldr	r4, [r1, #20]
 80069c8:	4a0d      	ldr	r2, [pc, #52]	@ (8006a00 <rand+0x78>)
 80069ca:	4358      	muls	r0, r3
 80069cc:	fb02 0004 	mla	r0, r2, r4, r0
 80069d0:	fba3 3202 	umull	r3, r2, r3, r2
 80069d4:	3301      	adds	r3, #1
 80069d6:	eb40 0002 	adc.w	r0, r0, r2
 80069da:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80069de:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80069e2:	bd10      	pop	{r4, pc}
 80069e4:	20000020 	.word	0x20000020
 80069e8:	08007e30 	.word	0x08007e30
 80069ec:	08007e47 	.word	0x08007e47
 80069f0:	abcd330e 	.word	0xabcd330e
 80069f4:	e66d1234 	.word	0xe66d1234
 80069f8:	0005deec 	.word	0x0005deec
 80069fc:	5851f42d 	.word	0x5851f42d
 8006a00:	4c957f2d 	.word	0x4c957f2d

08006a04 <std>:
 8006a04:	2300      	movs	r3, #0
 8006a06:	b510      	push	{r4, lr}
 8006a08:	4604      	mov	r4, r0
 8006a0a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a12:	6083      	str	r3, [r0, #8]
 8006a14:	8181      	strh	r1, [r0, #12]
 8006a16:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a18:	81c2      	strh	r2, [r0, #14]
 8006a1a:	6183      	str	r3, [r0, #24]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	2208      	movs	r2, #8
 8006a20:	305c      	adds	r0, #92	@ 0x5c
 8006a22:	f000 f914 	bl	8006c4e <memset>
 8006a26:	4b0d      	ldr	r3, [pc, #52]	@ (8006a5c <std+0x58>)
 8006a28:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a60 <std+0x5c>)
 8006a2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a64 <std+0x60>)
 8006a30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a32:	4b0d      	ldr	r3, [pc, #52]	@ (8006a68 <std+0x64>)
 8006a34:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a36:	4b0d      	ldr	r3, [pc, #52]	@ (8006a6c <std+0x68>)
 8006a38:	6224      	str	r4, [r4, #32]
 8006a3a:	429c      	cmp	r4, r3
 8006a3c:	d006      	beq.n	8006a4c <std+0x48>
 8006a3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a42:	4294      	cmp	r4, r2
 8006a44:	d002      	beq.n	8006a4c <std+0x48>
 8006a46:	33d0      	adds	r3, #208	@ 0xd0
 8006a48:	429c      	cmp	r4, r3
 8006a4a:	d105      	bne.n	8006a58 <std+0x54>
 8006a4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a54:	f000 b974 	b.w	8006d40 <__retarget_lock_init_recursive>
 8006a58:	bd10      	pop	{r4, pc}
 8006a5a:	bf00      	nop
 8006a5c:	08006bc9 	.word	0x08006bc9
 8006a60:	08006beb 	.word	0x08006beb
 8006a64:	08006c23 	.word	0x08006c23
 8006a68:	08006c47 	.word	0x08006c47
 8006a6c:	2000bc10 	.word	0x2000bc10

08006a70 <stdio_exit_handler>:
 8006a70:	4a02      	ldr	r2, [pc, #8]	@ (8006a7c <stdio_exit_handler+0xc>)
 8006a72:	4903      	ldr	r1, [pc, #12]	@ (8006a80 <stdio_exit_handler+0x10>)
 8006a74:	4803      	ldr	r0, [pc, #12]	@ (8006a84 <stdio_exit_handler+0x14>)
 8006a76:	f000 b869 	b.w	8006b4c <_fwalk_sglue>
 8006a7a:	bf00      	nop
 8006a7c:	20000014 	.word	0x20000014
 8006a80:	08007675 	.word	0x08007675
 8006a84:	20000024 	.word	0x20000024

08006a88 <cleanup_stdio>:
 8006a88:	6841      	ldr	r1, [r0, #4]
 8006a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8006abc <cleanup_stdio+0x34>)
 8006a8c:	4299      	cmp	r1, r3
 8006a8e:	b510      	push	{r4, lr}
 8006a90:	4604      	mov	r4, r0
 8006a92:	d001      	beq.n	8006a98 <cleanup_stdio+0x10>
 8006a94:	f000 fdee 	bl	8007674 <_fflush_r>
 8006a98:	68a1      	ldr	r1, [r4, #8]
 8006a9a:	4b09      	ldr	r3, [pc, #36]	@ (8006ac0 <cleanup_stdio+0x38>)
 8006a9c:	4299      	cmp	r1, r3
 8006a9e:	d002      	beq.n	8006aa6 <cleanup_stdio+0x1e>
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f000 fde7 	bl	8007674 <_fflush_r>
 8006aa6:	68e1      	ldr	r1, [r4, #12]
 8006aa8:	4b06      	ldr	r3, [pc, #24]	@ (8006ac4 <cleanup_stdio+0x3c>)
 8006aaa:	4299      	cmp	r1, r3
 8006aac:	d004      	beq.n	8006ab8 <cleanup_stdio+0x30>
 8006aae:	4620      	mov	r0, r4
 8006ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ab4:	f000 bdde 	b.w	8007674 <_fflush_r>
 8006ab8:	bd10      	pop	{r4, pc}
 8006aba:	bf00      	nop
 8006abc:	2000bc10 	.word	0x2000bc10
 8006ac0:	2000bc78 	.word	0x2000bc78
 8006ac4:	2000bce0 	.word	0x2000bce0

08006ac8 <global_stdio_init.part.0>:
 8006ac8:	b510      	push	{r4, lr}
 8006aca:	4b0b      	ldr	r3, [pc, #44]	@ (8006af8 <global_stdio_init.part.0+0x30>)
 8006acc:	4c0b      	ldr	r4, [pc, #44]	@ (8006afc <global_stdio_init.part.0+0x34>)
 8006ace:	4a0c      	ldr	r2, [pc, #48]	@ (8006b00 <global_stdio_init.part.0+0x38>)
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2104      	movs	r1, #4
 8006ad8:	f7ff ff94 	bl	8006a04 <std>
 8006adc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	2109      	movs	r1, #9
 8006ae4:	f7ff ff8e 	bl	8006a04 <std>
 8006ae8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006aec:	2202      	movs	r2, #2
 8006aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006af2:	2112      	movs	r1, #18
 8006af4:	f7ff bf86 	b.w	8006a04 <std>
 8006af8:	2000bd48 	.word	0x2000bd48
 8006afc:	2000bc10 	.word	0x2000bc10
 8006b00:	08006a71 	.word	0x08006a71

08006b04 <__sfp_lock_acquire>:
 8006b04:	4801      	ldr	r0, [pc, #4]	@ (8006b0c <__sfp_lock_acquire+0x8>)
 8006b06:	f000 b91c 	b.w	8006d42 <__retarget_lock_acquire_recursive>
 8006b0a:	bf00      	nop
 8006b0c:	2000bd51 	.word	0x2000bd51

08006b10 <__sfp_lock_release>:
 8006b10:	4801      	ldr	r0, [pc, #4]	@ (8006b18 <__sfp_lock_release+0x8>)
 8006b12:	f000 b917 	b.w	8006d44 <__retarget_lock_release_recursive>
 8006b16:	bf00      	nop
 8006b18:	2000bd51 	.word	0x2000bd51

08006b1c <__sinit>:
 8006b1c:	b510      	push	{r4, lr}
 8006b1e:	4604      	mov	r4, r0
 8006b20:	f7ff fff0 	bl	8006b04 <__sfp_lock_acquire>
 8006b24:	6a23      	ldr	r3, [r4, #32]
 8006b26:	b11b      	cbz	r3, 8006b30 <__sinit+0x14>
 8006b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b2c:	f7ff bff0 	b.w	8006b10 <__sfp_lock_release>
 8006b30:	4b04      	ldr	r3, [pc, #16]	@ (8006b44 <__sinit+0x28>)
 8006b32:	6223      	str	r3, [r4, #32]
 8006b34:	4b04      	ldr	r3, [pc, #16]	@ (8006b48 <__sinit+0x2c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1f5      	bne.n	8006b28 <__sinit+0xc>
 8006b3c:	f7ff ffc4 	bl	8006ac8 <global_stdio_init.part.0>
 8006b40:	e7f2      	b.n	8006b28 <__sinit+0xc>
 8006b42:	bf00      	nop
 8006b44:	08006a89 	.word	0x08006a89
 8006b48:	2000bd48 	.word	0x2000bd48

08006b4c <_fwalk_sglue>:
 8006b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b50:	4607      	mov	r7, r0
 8006b52:	4688      	mov	r8, r1
 8006b54:	4614      	mov	r4, r2
 8006b56:	2600      	movs	r6, #0
 8006b58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b5c:	f1b9 0901 	subs.w	r9, r9, #1
 8006b60:	d505      	bpl.n	8006b6e <_fwalk_sglue+0x22>
 8006b62:	6824      	ldr	r4, [r4, #0]
 8006b64:	2c00      	cmp	r4, #0
 8006b66:	d1f7      	bne.n	8006b58 <_fwalk_sglue+0xc>
 8006b68:	4630      	mov	r0, r6
 8006b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b6e:	89ab      	ldrh	r3, [r5, #12]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d907      	bls.n	8006b84 <_fwalk_sglue+0x38>
 8006b74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	d003      	beq.n	8006b84 <_fwalk_sglue+0x38>
 8006b7c:	4629      	mov	r1, r5
 8006b7e:	4638      	mov	r0, r7
 8006b80:	47c0      	blx	r8
 8006b82:	4306      	orrs	r6, r0
 8006b84:	3568      	adds	r5, #104	@ 0x68
 8006b86:	e7e9      	b.n	8006b5c <_fwalk_sglue+0x10>

08006b88 <siprintf>:
 8006b88:	b40e      	push	{r1, r2, r3}
 8006b8a:	b500      	push	{lr}
 8006b8c:	b09c      	sub	sp, #112	@ 0x70
 8006b8e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006b90:	9002      	str	r0, [sp, #8]
 8006b92:	9006      	str	r0, [sp, #24]
 8006b94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b98:	4809      	ldr	r0, [pc, #36]	@ (8006bc0 <siprintf+0x38>)
 8006b9a:	9107      	str	r1, [sp, #28]
 8006b9c:	9104      	str	r1, [sp, #16]
 8006b9e:	4909      	ldr	r1, [pc, #36]	@ (8006bc4 <siprintf+0x3c>)
 8006ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ba4:	9105      	str	r1, [sp, #20]
 8006ba6:	6800      	ldr	r0, [r0, #0]
 8006ba8:	9301      	str	r3, [sp, #4]
 8006baa:	a902      	add	r1, sp, #8
 8006bac:	f000 fa54 	bl	8007058 <_svfiprintf_r>
 8006bb0:	9b02      	ldr	r3, [sp, #8]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	701a      	strb	r2, [r3, #0]
 8006bb6:	b01c      	add	sp, #112	@ 0x70
 8006bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bbc:	b003      	add	sp, #12
 8006bbe:	4770      	bx	lr
 8006bc0:	20000020 	.word	0x20000020
 8006bc4:	ffff0208 	.word	0xffff0208

08006bc8 <__sread>:
 8006bc8:	b510      	push	{r4, lr}
 8006bca:	460c      	mov	r4, r1
 8006bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd0:	f000 f868 	bl	8006ca4 <_read_r>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	bfab      	itete	ge
 8006bd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006bda:	89a3      	ldrhlt	r3, [r4, #12]
 8006bdc:	181b      	addge	r3, r3, r0
 8006bde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006be2:	bfac      	ite	ge
 8006be4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006be6:	81a3      	strhlt	r3, [r4, #12]
 8006be8:	bd10      	pop	{r4, pc}

08006bea <__swrite>:
 8006bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bee:	461f      	mov	r7, r3
 8006bf0:	898b      	ldrh	r3, [r1, #12]
 8006bf2:	05db      	lsls	r3, r3, #23
 8006bf4:	4605      	mov	r5, r0
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	4616      	mov	r6, r2
 8006bfa:	d505      	bpl.n	8006c08 <__swrite+0x1e>
 8006bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c00:	2302      	movs	r3, #2
 8006c02:	2200      	movs	r2, #0
 8006c04:	f000 f83c 	bl	8006c80 <_lseek_r>
 8006c08:	89a3      	ldrh	r3, [r4, #12]
 8006c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c12:	81a3      	strh	r3, [r4, #12]
 8006c14:	4632      	mov	r2, r6
 8006c16:	463b      	mov	r3, r7
 8006c18:	4628      	mov	r0, r5
 8006c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c1e:	f000 b853 	b.w	8006cc8 <_write_r>

08006c22 <__sseek>:
 8006c22:	b510      	push	{r4, lr}
 8006c24:	460c      	mov	r4, r1
 8006c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c2a:	f000 f829 	bl	8006c80 <_lseek_r>
 8006c2e:	1c43      	adds	r3, r0, #1
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	bf15      	itete	ne
 8006c34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c3e:	81a3      	strheq	r3, [r4, #12]
 8006c40:	bf18      	it	ne
 8006c42:	81a3      	strhne	r3, [r4, #12]
 8006c44:	bd10      	pop	{r4, pc}

08006c46 <__sclose>:
 8006c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c4a:	f000 b809 	b.w	8006c60 <_close_r>

08006c4e <memset>:
 8006c4e:	4402      	add	r2, r0
 8006c50:	4603      	mov	r3, r0
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d100      	bne.n	8006c58 <memset+0xa>
 8006c56:	4770      	bx	lr
 8006c58:	f803 1b01 	strb.w	r1, [r3], #1
 8006c5c:	e7f9      	b.n	8006c52 <memset+0x4>
	...

08006c60 <_close_r>:
 8006c60:	b538      	push	{r3, r4, r5, lr}
 8006c62:	4d06      	ldr	r5, [pc, #24]	@ (8006c7c <_close_r+0x1c>)
 8006c64:	2300      	movs	r3, #0
 8006c66:	4604      	mov	r4, r0
 8006c68:	4608      	mov	r0, r1
 8006c6a:	602b      	str	r3, [r5, #0]
 8006c6c:	f7fa f8e4 	bl	8000e38 <_close>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d102      	bne.n	8006c7a <_close_r+0x1a>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	b103      	cbz	r3, 8006c7a <_close_r+0x1a>
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	2000bd4c 	.word	0x2000bd4c

08006c80 <_lseek_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4d07      	ldr	r5, [pc, #28]	@ (8006ca0 <_lseek_r+0x20>)
 8006c84:	4604      	mov	r4, r0
 8006c86:	4608      	mov	r0, r1
 8006c88:	4611      	mov	r1, r2
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	602a      	str	r2, [r5, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f7fa f8f9 	bl	8000e86 <_lseek>
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	d102      	bne.n	8006c9e <_lseek_r+0x1e>
 8006c98:	682b      	ldr	r3, [r5, #0]
 8006c9a:	b103      	cbz	r3, 8006c9e <_lseek_r+0x1e>
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ca0:	2000bd4c 	.word	0x2000bd4c

08006ca4 <_read_r>:
 8006ca4:	b538      	push	{r3, r4, r5, lr}
 8006ca6:	4d07      	ldr	r5, [pc, #28]	@ (8006cc4 <_read_r+0x20>)
 8006ca8:	4604      	mov	r4, r0
 8006caa:	4608      	mov	r0, r1
 8006cac:	4611      	mov	r1, r2
 8006cae:	2200      	movs	r2, #0
 8006cb0:	602a      	str	r2, [r5, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f7fa f887 	bl	8000dc6 <_read>
 8006cb8:	1c43      	adds	r3, r0, #1
 8006cba:	d102      	bne.n	8006cc2 <_read_r+0x1e>
 8006cbc:	682b      	ldr	r3, [r5, #0]
 8006cbe:	b103      	cbz	r3, 8006cc2 <_read_r+0x1e>
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	bd38      	pop	{r3, r4, r5, pc}
 8006cc4:	2000bd4c 	.word	0x2000bd4c

08006cc8 <_write_r>:
 8006cc8:	b538      	push	{r3, r4, r5, lr}
 8006cca:	4d07      	ldr	r5, [pc, #28]	@ (8006ce8 <_write_r+0x20>)
 8006ccc:	4604      	mov	r4, r0
 8006cce:	4608      	mov	r0, r1
 8006cd0:	4611      	mov	r1, r2
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	602a      	str	r2, [r5, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	f7fa f892 	bl	8000e00 <_write>
 8006cdc:	1c43      	adds	r3, r0, #1
 8006cde:	d102      	bne.n	8006ce6 <_write_r+0x1e>
 8006ce0:	682b      	ldr	r3, [r5, #0]
 8006ce2:	b103      	cbz	r3, 8006ce6 <_write_r+0x1e>
 8006ce4:	6023      	str	r3, [r4, #0]
 8006ce6:	bd38      	pop	{r3, r4, r5, pc}
 8006ce8:	2000bd4c 	.word	0x2000bd4c

08006cec <__errno>:
 8006cec:	4b01      	ldr	r3, [pc, #4]	@ (8006cf4 <__errno+0x8>)
 8006cee:	6818      	ldr	r0, [r3, #0]
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	20000020 	.word	0x20000020

08006cf8 <__libc_init_array>:
 8006cf8:	b570      	push	{r4, r5, r6, lr}
 8006cfa:	4d0d      	ldr	r5, [pc, #52]	@ (8006d30 <__libc_init_array+0x38>)
 8006cfc:	4c0d      	ldr	r4, [pc, #52]	@ (8006d34 <__libc_init_array+0x3c>)
 8006cfe:	1b64      	subs	r4, r4, r5
 8006d00:	10a4      	asrs	r4, r4, #2
 8006d02:	2600      	movs	r6, #0
 8006d04:	42a6      	cmp	r6, r4
 8006d06:	d109      	bne.n	8006d1c <__libc_init_array+0x24>
 8006d08:	4d0b      	ldr	r5, [pc, #44]	@ (8006d38 <__libc_init_array+0x40>)
 8006d0a:	4c0c      	ldr	r4, [pc, #48]	@ (8006d3c <__libc_init_array+0x44>)
 8006d0c:	f000 fff0 	bl	8007cf0 <_init>
 8006d10:	1b64      	subs	r4, r4, r5
 8006d12:	10a4      	asrs	r4, r4, #2
 8006d14:	2600      	movs	r6, #0
 8006d16:	42a6      	cmp	r6, r4
 8006d18:	d105      	bne.n	8006d26 <__libc_init_array+0x2e>
 8006d1a:	bd70      	pop	{r4, r5, r6, pc}
 8006d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d20:	4798      	blx	r3
 8006d22:	3601      	adds	r6, #1
 8006d24:	e7ee      	b.n	8006d04 <__libc_init_array+0xc>
 8006d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d2a:	4798      	blx	r3
 8006d2c:	3601      	adds	r6, #1
 8006d2e:	e7f2      	b.n	8006d16 <__libc_init_array+0x1e>
 8006d30:	08007f18 	.word	0x08007f18
 8006d34:	08007f18 	.word	0x08007f18
 8006d38:	08007f18 	.word	0x08007f18
 8006d3c:	08007f1c 	.word	0x08007f1c

08006d40 <__retarget_lock_init_recursive>:
 8006d40:	4770      	bx	lr

08006d42 <__retarget_lock_acquire_recursive>:
 8006d42:	4770      	bx	lr

08006d44 <__retarget_lock_release_recursive>:
 8006d44:	4770      	bx	lr

08006d46 <memcpy>:
 8006d46:	440a      	add	r2, r1
 8006d48:	4291      	cmp	r1, r2
 8006d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d4e:	d100      	bne.n	8006d52 <memcpy+0xc>
 8006d50:	4770      	bx	lr
 8006d52:	b510      	push	{r4, lr}
 8006d54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d5c:	4291      	cmp	r1, r2
 8006d5e:	d1f9      	bne.n	8006d54 <memcpy+0xe>
 8006d60:	bd10      	pop	{r4, pc}
	...

08006d64 <__assert_func>:
 8006d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d66:	4614      	mov	r4, r2
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4b09      	ldr	r3, [pc, #36]	@ (8006d90 <__assert_func+0x2c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4605      	mov	r5, r0
 8006d70:	68d8      	ldr	r0, [r3, #12]
 8006d72:	b954      	cbnz	r4, 8006d8a <__assert_func+0x26>
 8006d74:	4b07      	ldr	r3, [pc, #28]	@ (8006d94 <__assert_func+0x30>)
 8006d76:	461c      	mov	r4, r3
 8006d78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d7c:	9100      	str	r1, [sp, #0]
 8006d7e:	462b      	mov	r3, r5
 8006d80:	4905      	ldr	r1, [pc, #20]	@ (8006d98 <__assert_func+0x34>)
 8006d82:	f000 fc9f 	bl	80076c4 <fiprintf>
 8006d86:	f000 fcd9 	bl	800773c <abort>
 8006d8a:	4b04      	ldr	r3, [pc, #16]	@ (8006d9c <__assert_func+0x38>)
 8006d8c:	e7f4      	b.n	8006d78 <__assert_func+0x14>
 8006d8e:	bf00      	nop
 8006d90:	20000020 	.word	0x20000020
 8006d94:	08007eda 	.word	0x08007eda
 8006d98:	08007eac 	.word	0x08007eac
 8006d9c:	08007e9f 	.word	0x08007e9f

08006da0 <_free_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	4605      	mov	r5, r0
 8006da4:	2900      	cmp	r1, #0
 8006da6:	d041      	beq.n	8006e2c <_free_r+0x8c>
 8006da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dac:	1f0c      	subs	r4, r1, #4
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	bfb8      	it	lt
 8006db2:	18e4      	addlt	r4, r4, r3
 8006db4:	f000 f8e8 	bl	8006f88 <__malloc_lock>
 8006db8:	4a1d      	ldr	r2, [pc, #116]	@ (8006e30 <_free_r+0x90>)
 8006dba:	6813      	ldr	r3, [r2, #0]
 8006dbc:	b933      	cbnz	r3, 8006dcc <_free_r+0x2c>
 8006dbe:	6063      	str	r3, [r4, #4]
 8006dc0:	6014      	str	r4, [r2, #0]
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dc8:	f000 b8e4 	b.w	8006f94 <__malloc_unlock>
 8006dcc:	42a3      	cmp	r3, r4
 8006dce:	d908      	bls.n	8006de2 <_free_r+0x42>
 8006dd0:	6820      	ldr	r0, [r4, #0]
 8006dd2:	1821      	adds	r1, r4, r0
 8006dd4:	428b      	cmp	r3, r1
 8006dd6:	bf01      	itttt	eq
 8006dd8:	6819      	ldreq	r1, [r3, #0]
 8006dda:	685b      	ldreq	r3, [r3, #4]
 8006ddc:	1809      	addeq	r1, r1, r0
 8006dde:	6021      	streq	r1, [r4, #0]
 8006de0:	e7ed      	b.n	8006dbe <_free_r+0x1e>
 8006de2:	461a      	mov	r2, r3
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	b10b      	cbz	r3, 8006dec <_free_r+0x4c>
 8006de8:	42a3      	cmp	r3, r4
 8006dea:	d9fa      	bls.n	8006de2 <_free_r+0x42>
 8006dec:	6811      	ldr	r1, [r2, #0]
 8006dee:	1850      	adds	r0, r2, r1
 8006df0:	42a0      	cmp	r0, r4
 8006df2:	d10b      	bne.n	8006e0c <_free_r+0x6c>
 8006df4:	6820      	ldr	r0, [r4, #0]
 8006df6:	4401      	add	r1, r0
 8006df8:	1850      	adds	r0, r2, r1
 8006dfa:	4283      	cmp	r3, r0
 8006dfc:	6011      	str	r1, [r2, #0]
 8006dfe:	d1e0      	bne.n	8006dc2 <_free_r+0x22>
 8006e00:	6818      	ldr	r0, [r3, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	6053      	str	r3, [r2, #4]
 8006e06:	4408      	add	r0, r1
 8006e08:	6010      	str	r0, [r2, #0]
 8006e0a:	e7da      	b.n	8006dc2 <_free_r+0x22>
 8006e0c:	d902      	bls.n	8006e14 <_free_r+0x74>
 8006e0e:	230c      	movs	r3, #12
 8006e10:	602b      	str	r3, [r5, #0]
 8006e12:	e7d6      	b.n	8006dc2 <_free_r+0x22>
 8006e14:	6820      	ldr	r0, [r4, #0]
 8006e16:	1821      	adds	r1, r4, r0
 8006e18:	428b      	cmp	r3, r1
 8006e1a:	bf04      	itt	eq
 8006e1c:	6819      	ldreq	r1, [r3, #0]
 8006e1e:	685b      	ldreq	r3, [r3, #4]
 8006e20:	6063      	str	r3, [r4, #4]
 8006e22:	bf04      	itt	eq
 8006e24:	1809      	addeq	r1, r1, r0
 8006e26:	6021      	streq	r1, [r4, #0]
 8006e28:	6054      	str	r4, [r2, #4]
 8006e2a:	e7ca      	b.n	8006dc2 <_free_r+0x22>
 8006e2c:	bd38      	pop	{r3, r4, r5, pc}
 8006e2e:	bf00      	nop
 8006e30:	2000bd58 	.word	0x2000bd58

08006e34 <malloc>:
 8006e34:	4b02      	ldr	r3, [pc, #8]	@ (8006e40 <malloc+0xc>)
 8006e36:	4601      	mov	r1, r0
 8006e38:	6818      	ldr	r0, [r3, #0]
 8006e3a:	f000 b825 	b.w	8006e88 <_malloc_r>
 8006e3e:	bf00      	nop
 8006e40:	20000020 	.word	0x20000020

08006e44 <sbrk_aligned>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	4e0f      	ldr	r6, [pc, #60]	@ (8006e84 <sbrk_aligned+0x40>)
 8006e48:	460c      	mov	r4, r1
 8006e4a:	6831      	ldr	r1, [r6, #0]
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	b911      	cbnz	r1, 8006e56 <sbrk_aligned+0x12>
 8006e50:	f000 fc64 	bl	800771c <_sbrk_r>
 8006e54:	6030      	str	r0, [r6, #0]
 8006e56:	4621      	mov	r1, r4
 8006e58:	4628      	mov	r0, r5
 8006e5a:	f000 fc5f 	bl	800771c <_sbrk_r>
 8006e5e:	1c43      	adds	r3, r0, #1
 8006e60:	d103      	bne.n	8006e6a <sbrk_aligned+0x26>
 8006e62:	f04f 34ff 	mov.w	r4, #4294967295
 8006e66:	4620      	mov	r0, r4
 8006e68:	bd70      	pop	{r4, r5, r6, pc}
 8006e6a:	1cc4      	adds	r4, r0, #3
 8006e6c:	f024 0403 	bic.w	r4, r4, #3
 8006e70:	42a0      	cmp	r0, r4
 8006e72:	d0f8      	beq.n	8006e66 <sbrk_aligned+0x22>
 8006e74:	1a21      	subs	r1, r4, r0
 8006e76:	4628      	mov	r0, r5
 8006e78:	f000 fc50 	bl	800771c <_sbrk_r>
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	d1f2      	bne.n	8006e66 <sbrk_aligned+0x22>
 8006e80:	e7ef      	b.n	8006e62 <sbrk_aligned+0x1e>
 8006e82:	bf00      	nop
 8006e84:	2000bd54 	.word	0x2000bd54

08006e88 <_malloc_r>:
 8006e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e8c:	1ccd      	adds	r5, r1, #3
 8006e8e:	f025 0503 	bic.w	r5, r5, #3
 8006e92:	3508      	adds	r5, #8
 8006e94:	2d0c      	cmp	r5, #12
 8006e96:	bf38      	it	cc
 8006e98:	250c      	movcc	r5, #12
 8006e9a:	2d00      	cmp	r5, #0
 8006e9c:	4606      	mov	r6, r0
 8006e9e:	db01      	blt.n	8006ea4 <_malloc_r+0x1c>
 8006ea0:	42a9      	cmp	r1, r5
 8006ea2:	d904      	bls.n	8006eae <_malloc_r+0x26>
 8006ea4:	230c      	movs	r3, #12
 8006ea6:	6033      	str	r3, [r6, #0]
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f84 <_malloc_r+0xfc>
 8006eb2:	f000 f869 	bl	8006f88 <__malloc_lock>
 8006eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8006eba:	461c      	mov	r4, r3
 8006ebc:	bb44      	cbnz	r4, 8006f10 <_malloc_r+0x88>
 8006ebe:	4629      	mov	r1, r5
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	f7ff ffbf 	bl	8006e44 <sbrk_aligned>
 8006ec6:	1c43      	adds	r3, r0, #1
 8006ec8:	4604      	mov	r4, r0
 8006eca:	d158      	bne.n	8006f7e <_malloc_r+0xf6>
 8006ecc:	f8d8 4000 	ldr.w	r4, [r8]
 8006ed0:	4627      	mov	r7, r4
 8006ed2:	2f00      	cmp	r7, #0
 8006ed4:	d143      	bne.n	8006f5e <_malloc_r+0xd6>
 8006ed6:	2c00      	cmp	r4, #0
 8006ed8:	d04b      	beq.n	8006f72 <_malloc_r+0xea>
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	4639      	mov	r1, r7
 8006ede:	4630      	mov	r0, r6
 8006ee0:	eb04 0903 	add.w	r9, r4, r3
 8006ee4:	f000 fc1a 	bl	800771c <_sbrk_r>
 8006ee8:	4581      	cmp	r9, r0
 8006eea:	d142      	bne.n	8006f72 <_malloc_r+0xea>
 8006eec:	6821      	ldr	r1, [r4, #0]
 8006eee:	1a6d      	subs	r5, r5, r1
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f7ff ffa6 	bl	8006e44 <sbrk_aligned>
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d03a      	beq.n	8006f72 <_malloc_r+0xea>
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	442b      	add	r3, r5
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	f8d8 3000 	ldr.w	r3, [r8]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	bb62      	cbnz	r2, 8006f64 <_malloc_r+0xdc>
 8006f0a:	f8c8 7000 	str.w	r7, [r8]
 8006f0e:	e00f      	b.n	8006f30 <_malloc_r+0xa8>
 8006f10:	6822      	ldr	r2, [r4, #0]
 8006f12:	1b52      	subs	r2, r2, r5
 8006f14:	d420      	bmi.n	8006f58 <_malloc_r+0xd0>
 8006f16:	2a0b      	cmp	r2, #11
 8006f18:	d917      	bls.n	8006f4a <_malloc_r+0xc2>
 8006f1a:	1961      	adds	r1, r4, r5
 8006f1c:	42a3      	cmp	r3, r4
 8006f1e:	6025      	str	r5, [r4, #0]
 8006f20:	bf18      	it	ne
 8006f22:	6059      	strne	r1, [r3, #4]
 8006f24:	6863      	ldr	r3, [r4, #4]
 8006f26:	bf08      	it	eq
 8006f28:	f8c8 1000 	streq.w	r1, [r8]
 8006f2c:	5162      	str	r2, [r4, r5]
 8006f2e:	604b      	str	r3, [r1, #4]
 8006f30:	4630      	mov	r0, r6
 8006f32:	f000 f82f 	bl	8006f94 <__malloc_unlock>
 8006f36:	f104 000b 	add.w	r0, r4, #11
 8006f3a:	1d23      	adds	r3, r4, #4
 8006f3c:	f020 0007 	bic.w	r0, r0, #7
 8006f40:	1ac2      	subs	r2, r0, r3
 8006f42:	bf1c      	itt	ne
 8006f44:	1a1b      	subne	r3, r3, r0
 8006f46:	50a3      	strne	r3, [r4, r2]
 8006f48:	e7af      	b.n	8006eaa <_malloc_r+0x22>
 8006f4a:	6862      	ldr	r2, [r4, #4]
 8006f4c:	42a3      	cmp	r3, r4
 8006f4e:	bf0c      	ite	eq
 8006f50:	f8c8 2000 	streq.w	r2, [r8]
 8006f54:	605a      	strne	r2, [r3, #4]
 8006f56:	e7eb      	b.n	8006f30 <_malloc_r+0xa8>
 8006f58:	4623      	mov	r3, r4
 8006f5a:	6864      	ldr	r4, [r4, #4]
 8006f5c:	e7ae      	b.n	8006ebc <_malloc_r+0x34>
 8006f5e:	463c      	mov	r4, r7
 8006f60:	687f      	ldr	r7, [r7, #4]
 8006f62:	e7b6      	b.n	8006ed2 <_malloc_r+0x4a>
 8006f64:	461a      	mov	r2, r3
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	42a3      	cmp	r3, r4
 8006f6a:	d1fb      	bne.n	8006f64 <_malloc_r+0xdc>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	6053      	str	r3, [r2, #4]
 8006f70:	e7de      	b.n	8006f30 <_malloc_r+0xa8>
 8006f72:	230c      	movs	r3, #12
 8006f74:	6033      	str	r3, [r6, #0]
 8006f76:	4630      	mov	r0, r6
 8006f78:	f000 f80c 	bl	8006f94 <__malloc_unlock>
 8006f7c:	e794      	b.n	8006ea8 <_malloc_r+0x20>
 8006f7e:	6005      	str	r5, [r0, #0]
 8006f80:	e7d6      	b.n	8006f30 <_malloc_r+0xa8>
 8006f82:	bf00      	nop
 8006f84:	2000bd58 	.word	0x2000bd58

08006f88 <__malloc_lock>:
 8006f88:	4801      	ldr	r0, [pc, #4]	@ (8006f90 <__malloc_lock+0x8>)
 8006f8a:	f7ff beda 	b.w	8006d42 <__retarget_lock_acquire_recursive>
 8006f8e:	bf00      	nop
 8006f90:	2000bd50 	.word	0x2000bd50

08006f94 <__malloc_unlock>:
 8006f94:	4801      	ldr	r0, [pc, #4]	@ (8006f9c <__malloc_unlock+0x8>)
 8006f96:	f7ff bed5 	b.w	8006d44 <__retarget_lock_release_recursive>
 8006f9a:	bf00      	nop
 8006f9c:	2000bd50 	.word	0x2000bd50

08006fa0 <__ssputs_r>:
 8006fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa4:	688e      	ldr	r6, [r1, #8]
 8006fa6:	461f      	mov	r7, r3
 8006fa8:	42be      	cmp	r6, r7
 8006faa:	680b      	ldr	r3, [r1, #0]
 8006fac:	4682      	mov	sl, r0
 8006fae:	460c      	mov	r4, r1
 8006fb0:	4690      	mov	r8, r2
 8006fb2:	d82d      	bhi.n	8007010 <__ssputs_r+0x70>
 8006fb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006fbc:	d026      	beq.n	800700c <__ssputs_r+0x6c>
 8006fbe:	6965      	ldr	r5, [r4, #20]
 8006fc0:	6909      	ldr	r1, [r1, #16]
 8006fc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fc6:	eba3 0901 	sub.w	r9, r3, r1
 8006fca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fce:	1c7b      	adds	r3, r7, #1
 8006fd0:	444b      	add	r3, r9
 8006fd2:	106d      	asrs	r5, r5, #1
 8006fd4:	429d      	cmp	r5, r3
 8006fd6:	bf38      	it	cc
 8006fd8:	461d      	movcc	r5, r3
 8006fda:	0553      	lsls	r3, r2, #21
 8006fdc:	d527      	bpl.n	800702e <__ssputs_r+0x8e>
 8006fde:	4629      	mov	r1, r5
 8006fe0:	f7ff ff52 	bl	8006e88 <_malloc_r>
 8006fe4:	4606      	mov	r6, r0
 8006fe6:	b360      	cbz	r0, 8007042 <__ssputs_r+0xa2>
 8006fe8:	6921      	ldr	r1, [r4, #16]
 8006fea:	464a      	mov	r2, r9
 8006fec:	f7ff feab 	bl	8006d46 <memcpy>
 8006ff0:	89a3      	ldrh	r3, [r4, #12]
 8006ff2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ffa:	81a3      	strh	r3, [r4, #12]
 8006ffc:	6126      	str	r6, [r4, #16]
 8006ffe:	6165      	str	r5, [r4, #20]
 8007000:	444e      	add	r6, r9
 8007002:	eba5 0509 	sub.w	r5, r5, r9
 8007006:	6026      	str	r6, [r4, #0]
 8007008:	60a5      	str	r5, [r4, #8]
 800700a:	463e      	mov	r6, r7
 800700c:	42be      	cmp	r6, r7
 800700e:	d900      	bls.n	8007012 <__ssputs_r+0x72>
 8007010:	463e      	mov	r6, r7
 8007012:	6820      	ldr	r0, [r4, #0]
 8007014:	4632      	mov	r2, r6
 8007016:	4641      	mov	r1, r8
 8007018:	f000 fb66 	bl	80076e8 <memmove>
 800701c:	68a3      	ldr	r3, [r4, #8]
 800701e:	1b9b      	subs	r3, r3, r6
 8007020:	60a3      	str	r3, [r4, #8]
 8007022:	6823      	ldr	r3, [r4, #0]
 8007024:	4433      	add	r3, r6
 8007026:	6023      	str	r3, [r4, #0]
 8007028:	2000      	movs	r0, #0
 800702a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800702e:	462a      	mov	r2, r5
 8007030:	f000 fb8b 	bl	800774a <_realloc_r>
 8007034:	4606      	mov	r6, r0
 8007036:	2800      	cmp	r0, #0
 8007038:	d1e0      	bne.n	8006ffc <__ssputs_r+0x5c>
 800703a:	6921      	ldr	r1, [r4, #16]
 800703c:	4650      	mov	r0, sl
 800703e:	f7ff feaf 	bl	8006da0 <_free_r>
 8007042:	230c      	movs	r3, #12
 8007044:	f8ca 3000 	str.w	r3, [sl]
 8007048:	89a3      	ldrh	r3, [r4, #12]
 800704a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800704e:	81a3      	strh	r3, [r4, #12]
 8007050:	f04f 30ff 	mov.w	r0, #4294967295
 8007054:	e7e9      	b.n	800702a <__ssputs_r+0x8a>
	...

08007058 <_svfiprintf_r>:
 8007058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705c:	4698      	mov	r8, r3
 800705e:	898b      	ldrh	r3, [r1, #12]
 8007060:	061b      	lsls	r3, r3, #24
 8007062:	b09d      	sub	sp, #116	@ 0x74
 8007064:	4607      	mov	r7, r0
 8007066:	460d      	mov	r5, r1
 8007068:	4614      	mov	r4, r2
 800706a:	d510      	bpl.n	800708e <_svfiprintf_r+0x36>
 800706c:	690b      	ldr	r3, [r1, #16]
 800706e:	b973      	cbnz	r3, 800708e <_svfiprintf_r+0x36>
 8007070:	2140      	movs	r1, #64	@ 0x40
 8007072:	f7ff ff09 	bl	8006e88 <_malloc_r>
 8007076:	6028      	str	r0, [r5, #0]
 8007078:	6128      	str	r0, [r5, #16]
 800707a:	b930      	cbnz	r0, 800708a <_svfiprintf_r+0x32>
 800707c:	230c      	movs	r3, #12
 800707e:	603b      	str	r3, [r7, #0]
 8007080:	f04f 30ff 	mov.w	r0, #4294967295
 8007084:	b01d      	add	sp, #116	@ 0x74
 8007086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708a:	2340      	movs	r3, #64	@ 0x40
 800708c:	616b      	str	r3, [r5, #20]
 800708e:	2300      	movs	r3, #0
 8007090:	9309      	str	r3, [sp, #36]	@ 0x24
 8007092:	2320      	movs	r3, #32
 8007094:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007098:	f8cd 800c 	str.w	r8, [sp, #12]
 800709c:	2330      	movs	r3, #48	@ 0x30
 800709e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800723c <_svfiprintf_r+0x1e4>
 80070a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80070a6:	f04f 0901 	mov.w	r9, #1
 80070aa:	4623      	mov	r3, r4
 80070ac:	469a      	mov	sl, r3
 80070ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070b2:	b10a      	cbz	r2, 80070b8 <_svfiprintf_r+0x60>
 80070b4:	2a25      	cmp	r2, #37	@ 0x25
 80070b6:	d1f9      	bne.n	80070ac <_svfiprintf_r+0x54>
 80070b8:	ebba 0b04 	subs.w	fp, sl, r4
 80070bc:	d00b      	beq.n	80070d6 <_svfiprintf_r+0x7e>
 80070be:	465b      	mov	r3, fp
 80070c0:	4622      	mov	r2, r4
 80070c2:	4629      	mov	r1, r5
 80070c4:	4638      	mov	r0, r7
 80070c6:	f7ff ff6b 	bl	8006fa0 <__ssputs_r>
 80070ca:	3001      	adds	r0, #1
 80070cc:	f000 80a7 	beq.w	800721e <_svfiprintf_r+0x1c6>
 80070d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070d2:	445a      	add	r2, fp
 80070d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80070d6:	f89a 3000 	ldrb.w	r3, [sl]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 809f 	beq.w	800721e <_svfiprintf_r+0x1c6>
 80070e0:	2300      	movs	r3, #0
 80070e2:	f04f 32ff 	mov.w	r2, #4294967295
 80070e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070ea:	f10a 0a01 	add.w	sl, sl, #1
 80070ee:	9304      	str	r3, [sp, #16]
 80070f0:	9307      	str	r3, [sp, #28]
 80070f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80070f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80070f8:	4654      	mov	r4, sl
 80070fa:	2205      	movs	r2, #5
 80070fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007100:	484e      	ldr	r0, [pc, #312]	@ (800723c <_svfiprintf_r+0x1e4>)
 8007102:	f7f9 f8a5 	bl	8000250 <memchr>
 8007106:	9a04      	ldr	r2, [sp, #16]
 8007108:	b9d8      	cbnz	r0, 8007142 <_svfiprintf_r+0xea>
 800710a:	06d0      	lsls	r0, r2, #27
 800710c:	bf44      	itt	mi
 800710e:	2320      	movmi	r3, #32
 8007110:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007114:	0711      	lsls	r1, r2, #28
 8007116:	bf44      	itt	mi
 8007118:	232b      	movmi	r3, #43	@ 0x2b
 800711a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800711e:	f89a 3000 	ldrb.w	r3, [sl]
 8007122:	2b2a      	cmp	r3, #42	@ 0x2a
 8007124:	d015      	beq.n	8007152 <_svfiprintf_r+0xfa>
 8007126:	9a07      	ldr	r2, [sp, #28]
 8007128:	4654      	mov	r4, sl
 800712a:	2000      	movs	r0, #0
 800712c:	f04f 0c0a 	mov.w	ip, #10
 8007130:	4621      	mov	r1, r4
 8007132:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007136:	3b30      	subs	r3, #48	@ 0x30
 8007138:	2b09      	cmp	r3, #9
 800713a:	d94b      	bls.n	80071d4 <_svfiprintf_r+0x17c>
 800713c:	b1b0      	cbz	r0, 800716c <_svfiprintf_r+0x114>
 800713e:	9207      	str	r2, [sp, #28]
 8007140:	e014      	b.n	800716c <_svfiprintf_r+0x114>
 8007142:	eba0 0308 	sub.w	r3, r0, r8
 8007146:	fa09 f303 	lsl.w	r3, r9, r3
 800714a:	4313      	orrs	r3, r2
 800714c:	9304      	str	r3, [sp, #16]
 800714e:	46a2      	mov	sl, r4
 8007150:	e7d2      	b.n	80070f8 <_svfiprintf_r+0xa0>
 8007152:	9b03      	ldr	r3, [sp, #12]
 8007154:	1d19      	adds	r1, r3, #4
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	9103      	str	r1, [sp, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	bfbb      	ittet	lt
 800715e:	425b      	neglt	r3, r3
 8007160:	f042 0202 	orrlt.w	r2, r2, #2
 8007164:	9307      	strge	r3, [sp, #28]
 8007166:	9307      	strlt	r3, [sp, #28]
 8007168:	bfb8      	it	lt
 800716a:	9204      	strlt	r2, [sp, #16]
 800716c:	7823      	ldrb	r3, [r4, #0]
 800716e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007170:	d10a      	bne.n	8007188 <_svfiprintf_r+0x130>
 8007172:	7863      	ldrb	r3, [r4, #1]
 8007174:	2b2a      	cmp	r3, #42	@ 0x2a
 8007176:	d132      	bne.n	80071de <_svfiprintf_r+0x186>
 8007178:	9b03      	ldr	r3, [sp, #12]
 800717a:	1d1a      	adds	r2, r3, #4
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	9203      	str	r2, [sp, #12]
 8007180:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007184:	3402      	adds	r4, #2
 8007186:	9305      	str	r3, [sp, #20]
 8007188:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800724c <_svfiprintf_r+0x1f4>
 800718c:	7821      	ldrb	r1, [r4, #0]
 800718e:	2203      	movs	r2, #3
 8007190:	4650      	mov	r0, sl
 8007192:	f7f9 f85d 	bl	8000250 <memchr>
 8007196:	b138      	cbz	r0, 80071a8 <_svfiprintf_r+0x150>
 8007198:	9b04      	ldr	r3, [sp, #16]
 800719a:	eba0 000a 	sub.w	r0, r0, sl
 800719e:	2240      	movs	r2, #64	@ 0x40
 80071a0:	4082      	lsls	r2, r0
 80071a2:	4313      	orrs	r3, r2
 80071a4:	3401      	adds	r4, #1
 80071a6:	9304      	str	r3, [sp, #16]
 80071a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ac:	4824      	ldr	r0, [pc, #144]	@ (8007240 <_svfiprintf_r+0x1e8>)
 80071ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80071b2:	2206      	movs	r2, #6
 80071b4:	f7f9 f84c 	bl	8000250 <memchr>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d036      	beq.n	800722a <_svfiprintf_r+0x1d2>
 80071bc:	4b21      	ldr	r3, [pc, #132]	@ (8007244 <_svfiprintf_r+0x1ec>)
 80071be:	bb1b      	cbnz	r3, 8007208 <_svfiprintf_r+0x1b0>
 80071c0:	9b03      	ldr	r3, [sp, #12]
 80071c2:	3307      	adds	r3, #7
 80071c4:	f023 0307 	bic.w	r3, r3, #7
 80071c8:	3308      	adds	r3, #8
 80071ca:	9303      	str	r3, [sp, #12]
 80071cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ce:	4433      	add	r3, r6
 80071d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80071d2:	e76a      	b.n	80070aa <_svfiprintf_r+0x52>
 80071d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80071d8:	460c      	mov	r4, r1
 80071da:	2001      	movs	r0, #1
 80071dc:	e7a8      	b.n	8007130 <_svfiprintf_r+0xd8>
 80071de:	2300      	movs	r3, #0
 80071e0:	3401      	adds	r4, #1
 80071e2:	9305      	str	r3, [sp, #20]
 80071e4:	4619      	mov	r1, r3
 80071e6:	f04f 0c0a 	mov.w	ip, #10
 80071ea:	4620      	mov	r0, r4
 80071ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071f0:	3a30      	subs	r2, #48	@ 0x30
 80071f2:	2a09      	cmp	r2, #9
 80071f4:	d903      	bls.n	80071fe <_svfiprintf_r+0x1a6>
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d0c6      	beq.n	8007188 <_svfiprintf_r+0x130>
 80071fa:	9105      	str	r1, [sp, #20]
 80071fc:	e7c4      	b.n	8007188 <_svfiprintf_r+0x130>
 80071fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007202:	4604      	mov	r4, r0
 8007204:	2301      	movs	r3, #1
 8007206:	e7f0      	b.n	80071ea <_svfiprintf_r+0x192>
 8007208:	ab03      	add	r3, sp, #12
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	462a      	mov	r2, r5
 800720e:	4b0e      	ldr	r3, [pc, #56]	@ (8007248 <_svfiprintf_r+0x1f0>)
 8007210:	a904      	add	r1, sp, #16
 8007212:	4638      	mov	r0, r7
 8007214:	f3af 8000 	nop.w
 8007218:	1c42      	adds	r2, r0, #1
 800721a:	4606      	mov	r6, r0
 800721c:	d1d6      	bne.n	80071cc <_svfiprintf_r+0x174>
 800721e:	89ab      	ldrh	r3, [r5, #12]
 8007220:	065b      	lsls	r3, r3, #25
 8007222:	f53f af2d 	bmi.w	8007080 <_svfiprintf_r+0x28>
 8007226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007228:	e72c      	b.n	8007084 <_svfiprintf_r+0x2c>
 800722a:	ab03      	add	r3, sp, #12
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	462a      	mov	r2, r5
 8007230:	4b05      	ldr	r3, [pc, #20]	@ (8007248 <_svfiprintf_r+0x1f0>)
 8007232:	a904      	add	r1, sp, #16
 8007234:	4638      	mov	r0, r7
 8007236:	f000 f879 	bl	800732c <_printf_i>
 800723a:	e7ed      	b.n	8007218 <_svfiprintf_r+0x1c0>
 800723c:	08007edb 	.word	0x08007edb
 8007240:	08007ee5 	.word	0x08007ee5
 8007244:	00000000 	.word	0x00000000
 8007248:	08006fa1 	.word	0x08006fa1
 800724c:	08007ee1 	.word	0x08007ee1

08007250 <_printf_common>:
 8007250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007254:	4616      	mov	r6, r2
 8007256:	4698      	mov	r8, r3
 8007258:	688a      	ldr	r2, [r1, #8]
 800725a:	690b      	ldr	r3, [r1, #16]
 800725c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007260:	4293      	cmp	r3, r2
 8007262:	bfb8      	it	lt
 8007264:	4613      	movlt	r3, r2
 8007266:	6033      	str	r3, [r6, #0]
 8007268:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800726c:	4607      	mov	r7, r0
 800726e:	460c      	mov	r4, r1
 8007270:	b10a      	cbz	r2, 8007276 <_printf_common+0x26>
 8007272:	3301      	adds	r3, #1
 8007274:	6033      	str	r3, [r6, #0]
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	0699      	lsls	r1, r3, #26
 800727a:	bf42      	ittt	mi
 800727c:	6833      	ldrmi	r3, [r6, #0]
 800727e:	3302      	addmi	r3, #2
 8007280:	6033      	strmi	r3, [r6, #0]
 8007282:	6825      	ldr	r5, [r4, #0]
 8007284:	f015 0506 	ands.w	r5, r5, #6
 8007288:	d106      	bne.n	8007298 <_printf_common+0x48>
 800728a:	f104 0a19 	add.w	sl, r4, #25
 800728e:	68e3      	ldr	r3, [r4, #12]
 8007290:	6832      	ldr	r2, [r6, #0]
 8007292:	1a9b      	subs	r3, r3, r2
 8007294:	42ab      	cmp	r3, r5
 8007296:	dc26      	bgt.n	80072e6 <_printf_common+0x96>
 8007298:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800729c:	6822      	ldr	r2, [r4, #0]
 800729e:	3b00      	subs	r3, #0
 80072a0:	bf18      	it	ne
 80072a2:	2301      	movne	r3, #1
 80072a4:	0692      	lsls	r2, r2, #26
 80072a6:	d42b      	bmi.n	8007300 <_printf_common+0xb0>
 80072a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80072ac:	4641      	mov	r1, r8
 80072ae:	4638      	mov	r0, r7
 80072b0:	47c8      	blx	r9
 80072b2:	3001      	adds	r0, #1
 80072b4:	d01e      	beq.n	80072f4 <_printf_common+0xa4>
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	6922      	ldr	r2, [r4, #16]
 80072ba:	f003 0306 	and.w	r3, r3, #6
 80072be:	2b04      	cmp	r3, #4
 80072c0:	bf02      	ittt	eq
 80072c2:	68e5      	ldreq	r5, [r4, #12]
 80072c4:	6833      	ldreq	r3, [r6, #0]
 80072c6:	1aed      	subeq	r5, r5, r3
 80072c8:	68a3      	ldr	r3, [r4, #8]
 80072ca:	bf0c      	ite	eq
 80072cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072d0:	2500      	movne	r5, #0
 80072d2:	4293      	cmp	r3, r2
 80072d4:	bfc4      	itt	gt
 80072d6:	1a9b      	subgt	r3, r3, r2
 80072d8:	18ed      	addgt	r5, r5, r3
 80072da:	2600      	movs	r6, #0
 80072dc:	341a      	adds	r4, #26
 80072de:	42b5      	cmp	r5, r6
 80072e0:	d11a      	bne.n	8007318 <_printf_common+0xc8>
 80072e2:	2000      	movs	r0, #0
 80072e4:	e008      	b.n	80072f8 <_printf_common+0xa8>
 80072e6:	2301      	movs	r3, #1
 80072e8:	4652      	mov	r2, sl
 80072ea:	4641      	mov	r1, r8
 80072ec:	4638      	mov	r0, r7
 80072ee:	47c8      	blx	r9
 80072f0:	3001      	adds	r0, #1
 80072f2:	d103      	bne.n	80072fc <_printf_common+0xac>
 80072f4:	f04f 30ff 	mov.w	r0, #4294967295
 80072f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fc:	3501      	adds	r5, #1
 80072fe:	e7c6      	b.n	800728e <_printf_common+0x3e>
 8007300:	18e1      	adds	r1, r4, r3
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	2030      	movs	r0, #48	@ 0x30
 8007306:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800730a:	4422      	add	r2, r4
 800730c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007310:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007314:	3302      	adds	r3, #2
 8007316:	e7c7      	b.n	80072a8 <_printf_common+0x58>
 8007318:	2301      	movs	r3, #1
 800731a:	4622      	mov	r2, r4
 800731c:	4641      	mov	r1, r8
 800731e:	4638      	mov	r0, r7
 8007320:	47c8      	blx	r9
 8007322:	3001      	adds	r0, #1
 8007324:	d0e6      	beq.n	80072f4 <_printf_common+0xa4>
 8007326:	3601      	adds	r6, #1
 8007328:	e7d9      	b.n	80072de <_printf_common+0x8e>
	...

0800732c <_printf_i>:
 800732c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007330:	7e0f      	ldrb	r7, [r1, #24]
 8007332:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007334:	2f78      	cmp	r7, #120	@ 0x78
 8007336:	4691      	mov	r9, r2
 8007338:	4680      	mov	r8, r0
 800733a:	460c      	mov	r4, r1
 800733c:	469a      	mov	sl, r3
 800733e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007342:	d807      	bhi.n	8007354 <_printf_i+0x28>
 8007344:	2f62      	cmp	r7, #98	@ 0x62
 8007346:	d80a      	bhi.n	800735e <_printf_i+0x32>
 8007348:	2f00      	cmp	r7, #0
 800734a:	f000 80d2 	beq.w	80074f2 <_printf_i+0x1c6>
 800734e:	2f58      	cmp	r7, #88	@ 0x58
 8007350:	f000 80b9 	beq.w	80074c6 <_printf_i+0x19a>
 8007354:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007358:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800735c:	e03a      	b.n	80073d4 <_printf_i+0xa8>
 800735e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007362:	2b15      	cmp	r3, #21
 8007364:	d8f6      	bhi.n	8007354 <_printf_i+0x28>
 8007366:	a101      	add	r1, pc, #4	@ (adr r1, 800736c <_printf_i+0x40>)
 8007368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800736c:	080073c5 	.word	0x080073c5
 8007370:	080073d9 	.word	0x080073d9
 8007374:	08007355 	.word	0x08007355
 8007378:	08007355 	.word	0x08007355
 800737c:	08007355 	.word	0x08007355
 8007380:	08007355 	.word	0x08007355
 8007384:	080073d9 	.word	0x080073d9
 8007388:	08007355 	.word	0x08007355
 800738c:	08007355 	.word	0x08007355
 8007390:	08007355 	.word	0x08007355
 8007394:	08007355 	.word	0x08007355
 8007398:	080074d9 	.word	0x080074d9
 800739c:	08007403 	.word	0x08007403
 80073a0:	08007493 	.word	0x08007493
 80073a4:	08007355 	.word	0x08007355
 80073a8:	08007355 	.word	0x08007355
 80073ac:	080074fb 	.word	0x080074fb
 80073b0:	08007355 	.word	0x08007355
 80073b4:	08007403 	.word	0x08007403
 80073b8:	08007355 	.word	0x08007355
 80073bc:	08007355 	.word	0x08007355
 80073c0:	0800749b 	.word	0x0800749b
 80073c4:	6833      	ldr	r3, [r6, #0]
 80073c6:	1d1a      	adds	r2, r3, #4
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6032      	str	r2, [r6, #0]
 80073cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80073d4:	2301      	movs	r3, #1
 80073d6:	e09d      	b.n	8007514 <_printf_i+0x1e8>
 80073d8:	6833      	ldr	r3, [r6, #0]
 80073da:	6820      	ldr	r0, [r4, #0]
 80073dc:	1d19      	adds	r1, r3, #4
 80073de:	6031      	str	r1, [r6, #0]
 80073e0:	0606      	lsls	r6, r0, #24
 80073e2:	d501      	bpl.n	80073e8 <_printf_i+0xbc>
 80073e4:	681d      	ldr	r5, [r3, #0]
 80073e6:	e003      	b.n	80073f0 <_printf_i+0xc4>
 80073e8:	0645      	lsls	r5, r0, #25
 80073ea:	d5fb      	bpl.n	80073e4 <_printf_i+0xb8>
 80073ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80073f0:	2d00      	cmp	r5, #0
 80073f2:	da03      	bge.n	80073fc <_printf_i+0xd0>
 80073f4:	232d      	movs	r3, #45	@ 0x2d
 80073f6:	426d      	negs	r5, r5
 80073f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073fc:	4859      	ldr	r0, [pc, #356]	@ (8007564 <_printf_i+0x238>)
 80073fe:	230a      	movs	r3, #10
 8007400:	e011      	b.n	8007426 <_printf_i+0xfa>
 8007402:	6821      	ldr	r1, [r4, #0]
 8007404:	6833      	ldr	r3, [r6, #0]
 8007406:	0608      	lsls	r0, r1, #24
 8007408:	f853 5b04 	ldr.w	r5, [r3], #4
 800740c:	d402      	bmi.n	8007414 <_printf_i+0xe8>
 800740e:	0649      	lsls	r1, r1, #25
 8007410:	bf48      	it	mi
 8007412:	b2ad      	uxthmi	r5, r5
 8007414:	2f6f      	cmp	r7, #111	@ 0x6f
 8007416:	4853      	ldr	r0, [pc, #332]	@ (8007564 <_printf_i+0x238>)
 8007418:	6033      	str	r3, [r6, #0]
 800741a:	bf14      	ite	ne
 800741c:	230a      	movne	r3, #10
 800741e:	2308      	moveq	r3, #8
 8007420:	2100      	movs	r1, #0
 8007422:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007426:	6866      	ldr	r6, [r4, #4]
 8007428:	60a6      	str	r6, [r4, #8]
 800742a:	2e00      	cmp	r6, #0
 800742c:	bfa2      	ittt	ge
 800742e:	6821      	ldrge	r1, [r4, #0]
 8007430:	f021 0104 	bicge.w	r1, r1, #4
 8007434:	6021      	strge	r1, [r4, #0]
 8007436:	b90d      	cbnz	r5, 800743c <_printf_i+0x110>
 8007438:	2e00      	cmp	r6, #0
 800743a:	d04b      	beq.n	80074d4 <_printf_i+0x1a8>
 800743c:	4616      	mov	r6, r2
 800743e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007442:	fb03 5711 	mls	r7, r3, r1, r5
 8007446:	5dc7      	ldrb	r7, [r0, r7]
 8007448:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800744c:	462f      	mov	r7, r5
 800744e:	42bb      	cmp	r3, r7
 8007450:	460d      	mov	r5, r1
 8007452:	d9f4      	bls.n	800743e <_printf_i+0x112>
 8007454:	2b08      	cmp	r3, #8
 8007456:	d10b      	bne.n	8007470 <_printf_i+0x144>
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	07df      	lsls	r7, r3, #31
 800745c:	d508      	bpl.n	8007470 <_printf_i+0x144>
 800745e:	6923      	ldr	r3, [r4, #16]
 8007460:	6861      	ldr	r1, [r4, #4]
 8007462:	4299      	cmp	r1, r3
 8007464:	bfde      	ittt	le
 8007466:	2330      	movle	r3, #48	@ 0x30
 8007468:	f806 3c01 	strble.w	r3, [r6, #-1]
 800746c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007470:	1b92      	subs	r2, r2, r6
 8007472:	6122      	str	r2, [r4, #16]
 8007474:	f8cd a000 	str.w	sl, [sp]
 8007478:	464b      	mov	r3, r9
 800747a:	aa03      	add	r2, sp, #12
 800747c:	4621      	mov	r1, r4
 800747e:	4640      	mov	r0, r8
 8007480:	f7ff fee6 	bl	8007250 <_printf_common>
 8007484:	3001      	adds	r0, #1
 8007486:	d14a      	bne.n	800751e <_printf_i+0x1f2>
 8007488:	f04f 30ff 	mov.w	r0, #4294967295
 800748c:	b004      	add	sp, #16
 800748e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007492:	6823      	ldr	r3, [r4, #0]
 8007494:	f043 0320 	orr.w	r3, r3, #32
 8007498:	6023      	str	r3, [r4, #0]
 800749a:	4833      	ldr	r0, [pc, #204]	@ (8007568 <_printf_i+0x23c>)
 800749c:	2778      	movs	r7, #120	@ 0x78
 800749e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	6831      	ldr	r1, [r6, #0]
 80074a6:	061f      	lsls	r7, r3, #24
 80074a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80074ac:	d402      	bmi.n	80074b4 <_printf_i+0x188>
 80074ae:	065f      	lsls	r7, r3, #25
 80074b0:	bf48      	it	mi
 80074b2:	b2ad      	uxthmi	r5, r5
 80074b4:	6031      	str	r1, [r6, #0]
 80074b6:	07d9      	lsls	r1, r3, #31
 80074b8:	bf44      	itt	mi
 80074ba:	f043 0320 	orrmi.w	r3, r3, #32
 80074be:	6023      	strmi	r3, [r4, #0]
 80074c0:	b11d      	cbz	r5, 80074ca <_printf_i+0x19e>
 80074c2:	2310      	movs	r3, #16
 80074c4:	e7ac      	b.n	8007420 <_printf_i+0xf4>
 80074c6:	4827      	ldr	r0, [pc, #156]	@ (8007564 <_printf_i+0x238>)
 80074c8:	e7e9      	b.n	800749e <_printf_i+0x172>
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	f023 0320 	bic.w	r3, r3, #32
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	e7f6      	b.n	80074c2 <_printf_i+0x196>
 80074d4:	4616      	mov	r6, r2
 80074d6:	e7bd      	b.n	8007454 <_printf_i+0x128>
 80074d8:	6833      	ldr	r3, [r6, #0]
 80074da:	6825      	ldr	r5, [r4, #0]
 80074dc:	6961      	ldr	r1, [r4, #20]
 80074de:	1d18      	adds	r0, r3, #4
 80074e0:	6030      	str	r0, [r6, #0]
 80074e2:	062e      	lsls	r6, r5, #24
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	d501      	bpl.n	80074ec <_printf_i+0x1c0>
 80074e8:	6019      	str	r1, [r3, #0]
 80074ea:	e002      	b.n	80074f2 <_printf_i+0x1c6>
 80074ec:	0668      	lsls	r0, r5, #25
 80074ee:	d5fb      	bpl.n	80074e8 <_printf_i+0x1bc>
 80074f0:	8019      	strh	r1, [r3, #0]
 80074f2:	2300      	movs	r3, #0
 80074f4:	6123      	str	r3, [r4, #16]
 80074f6:	4616      	mov	r6, r2
 80074f8:	e7bc      	b.n	8007474 <_printf_i+0x148>
 80074fa:	6833      	ldr	r3, [r6, #0]
 80074fc:	1d1a      	adds	r2, r3, #4
 80074fe:	6032      	str	r2, [r6, #0]
 8007500:	681e      	ldr	r6, [r3, #0]
 8007502:	6862      	ldr	r2, [r4, #4]
 8007504:	2100      	movs	r1, #0
 8007506:	4630      	mov	r0, r6
 8007508:	f7f8 fea2 	bl	8000250 <memchr>
 800750c:	b108      	cbz	r0, 8007512 <_printf_i+0x1e6>
 800750e:	1b80      	subs	r0, r0, r6
 8007510:	6060      	str	r0, [r4, #4]
 8007512:	6863      	ldr	r3, [r4, #4]
 8007514:	6123      	str	r3, [r4, #16]
 8007516:	2300      	movs	r3, #0
 8007518:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800751c:	e7aa      	b.n	8007474 <_printf_i+0x148>
 800751e:	6923      	ldr	r3, [r4, #16]
 8007520:	4632      	mov	r2, r6
 8007522:	4649      	mov	r1, r9
 8007524:	4640      	mov	r0, r8
 8007526:	47d0      	blx	sl
 8007528:	3001      	adds	r0, #1
 800752a:	d0ad      	beq.n	8007488 <_printf_i+0x15c>
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	079b      	lsls	r3, r3, #30
 8007530:	d413      	bmi.n	800755a <_printf_i+0x22e>
 8007532:	68e0      	ldr	r0, [r4, #12]
 8007534:	9b03      	ldr	r3, [sp, #12]
 8007536:	4298      	cmp	r0, r3
 8007538:	bfb8      	it	lt
 800753a:	4618      	movlt	r0, r3
 800753c:	e7a6      	b.n	800748c <_printf_i+0x160>
 800753e:	2301      	movs	r3, #1
 8007540:	4632      	mov	r2, r6
 8007542:	4649      	mov	r1, r9
 8007544:	4640      	mov	r0, r8
 8007546:	47d0      	blx	sl
 8007548:	3001      	adds	r0, #1
 800754a:	d09d      	beq.n	8007488 <_printf_i+0x15c>
 800754c:	3501      	adds	r5, #1
 800754e:	68e3      	ldr	r3, [r4, #12]
 8007550:	9903      	ldr	r1, [sp, #12]
 8007552:	1a5b      	subs	r3, r3, r1
 8007554:	42ab      	cmp	r3, r5
 8007556:	dcf2      	bgt.n	800753e <_printf_i+0x212>
 8007558:	e7eb      	b.n	8007532 <_printf_i+0x206>
 800755a:	2500      	movs	r5, #0
 800755c:	f104 0619 	add.w	r6, r4, #25
 8007560:	e7f5      	b.n	800754e <_printf_i+0x222>
 8007562:	bf00      	nop
 8007564:	08007eec 	.word	0x08007eec
 8007568:	08007efd 	.word	0x08007efd

0800756c <__sflush_r>:
 800756c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007574:	0716      	lsls	r6, r2, #28
 8007576:	4605      	mov	r5, r0
 8007578:	460c      	mov	r4, r1
 800757a:	d454      	bmi.n	8007626 <__sflush_r+0xba>
 800757c:	684b      	ldr	r3, [r1, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	dc02      	bgt.n	8007588 <__sflush_r+0x1c>
 8007582:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007584:	2b00      	cmp	r3, #0
 8007586:	dd48      	ble.n	800761a <__sflush_r+0xae>
 8007588:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800758a:	2e00      	cmp	r6, #0
 800758c:	d045      	beq.n	800761a <__sflush_r+0xae>
 800758e:	2300      	movs	r3, #0
 8007590:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007594:	682f      	ldr	r7, [r5, #0]
 8007596:	6a21      	ldr	r1, [r4, #32]
 8007598:	602b      	str	r3, [r5, #0]
 800759a:	d030      	beq.n	80075fe <__sflush_r+0x92>
 800759c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800759e:	89a3      	ldrh	r3, [r4, #12]
 80075a0:	0759      	lsls	r1, r3, #29
 80075a2:	d505      	bpl.n	80075b0 <__sflush_r+0x44>
 80075a4:	6863      	ldr	r3, [r4, #4]
 80075a6:	1ad2      	subs	r2, r2, r3
 80075a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80075aa:	b10b      	cbz	r3, 80075b0 <__sflush_r+0x44>
 80075ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80075ae:	1ad2      	subs	r2, r2, r3
 80075b0:	2300      	movs	r3, #0
 80075b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075b4:	6a21      	ldr	r1, [r4, #32]
 80075b6:	4628      	mov	r0, r5
 80075b8:	47b0      	blx	r6
 80075ba:	1c43      	adds	r3, r0, #1
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	d106      	bne.n	80075ce <__sflush_r+0x62>
 80075c0:	6829      	ldr	r1, [r5, #0]
 80075c2:	291d      	cmp	r1, #29
 80075c4:	d82b      	bhi.n	800761e <__sflush_r+0xb2>
 80075c6:	4a2a      	ldr	r2, [pc, #168]	@ (8007670 <__sflush_r+0x104>)
 80075c8:	410a      	asrs	r2, r1
 80075ca:	07d6      	lsls	r6, r2, #31
 80075cc:	d427      	bmi.n	800761e <__sflush_r+0xb2>
 80075ce:	2200      	movs	r2, #0
 80075d0:	6062      	str	r2, [r4, #4]
 80075d2:	04d9      	lsls	r1, r3, #19
 80075d4:	6922      	ldr	r2, [r4, #16]
 80075d6:	6022      	str	r2, [r4, #0]
 80075d8:	d504      	bpl.n	80075e4 <__sflush_r+0x78>
 80075da:	1c42      	adds	r2, r0, #1
 80075dc:	d101      	bne.n	80075e2 <__sflush_r+0x76>
 80075de:	682b      	ldr	r3, [r5, #0]
 80075e0:	b903      	cbnz	r3, 80075e4 <__sflush_r+0x78>
 80075e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80075e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075e6:	602f      	str	r7, [r5, #0]
 80075e8:	b1b9      	cbz	r1, 800761a <__sflush_r+0xae>
 80075ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075ee:	4299      	cmp	r1, r3
 80075f0:	d002      	beq.n	80075f8 <__sflush_r+0x8c>
 80075f2:	4628      	mov	r0, r5
 80075f4:	f7ff fbd4 	bl	8006da0 <_free_r>
 80075f8:	2300      	movs	r3, #0
 80075fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80075fc:	e00d      	b.n	800761a <__sflush_r+0xae>
 80075fe:	2301      	movs	r3, #1
 8007600:	4628      	mov	r0, r5
 8007602:	47b0      	blx	r6
 8007604:	4602      	mov	r2, r0
 8007606:	1c50      	adds	r0, r2, #1
 8007608:	d1c9      	bne.n	800759e <__sflush_r+0x32>
 800760a:	682b      	ldr	r3, [r5, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d0c6      	beq.n	800759e <__sflush_r+0x32>
 8007610:	2b1d      	cmp	r3, #29
 8007612:	d001      	beq.n	8007618 <__sflush_r+0xac>
 8007614:	2b16      	cmp	r3, #22
 8007616:	d11e      	bne.n	8007656 <__sflush_r+0xea>
 8007618:	602f      	str	r7, [r5, #0]
 800761a:	2000      	movs	r0, #0
 800761c:	e022      	b.n	8007664 <__sflush_r+0xf8>
 800761e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007622:	b21b      	sxth	r3, r3
 8007624:	e01b      	b.n	800765e <__sflush_r+0xf2>
 8007626:	690f      	ldr	r7, [r1, #16]
 8007628:	2f00      	cmp	r7, #0
 800762a:	d0f6      	beq.n	800761a <__sflush_r+0xae>
 800762c:	0793      	lsls	r3, r2, #30
 800762e:	680e      	ldr	r6, [r1, #0]
 8007630:	bf08      	it	eq
 8007632:	694b      	ldreq	r3, [r1, #20]
 8007634:	600f      	str	r7, [r1, #0]
 8007636:	bf18      	it	ne
 8007638:	2300      	movne	r3, #0
 800763a:	eba6 0807 	sub.w	r8, r6, r7
 800763e:	608b      	str	r3, [r1, #8]
 8007640:	f1b8 0f00 	cmp.w	r8, #0
 8007644:	dde9      	ble.n	800761a <__sflush_r+0xae>
 8007646:	6a21      	ldr	r1, [r4, #32]
 8007648:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800764a:	4643      	mov	r3, r8
 800764c:	463a      	mov	r2, r7
 800764e:	4628      	mov	r0, r5
 8007650:	47b0      	blx	r6
 8007652:	2800      	cmp	r0, #0
 8007654:	dc08      	bgt.n	8007668 <__sflush_r+0xfc>
 8007656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800765a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800765e:	81a3      	strh	r3, [r4, #12]
 8007660:	f04f 30ff 	mov.w	r0, #4294967295
 8007664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007668:	4407      	add	r7, r0
 800766a:	eba8 0800 	sub.w	r8, r8, r0
 800766e:	e7e7      	b.n	8007640 <__sflush_r+0xd4>
 8007670:	dfbffffe 	.word	0xdfbffffe

08007674 <_fflush_r>:
 8007674:	b538      	push	{r3, r4, r5, lr}
 8007676:	690b      	ldr	r3, [r1, #16]
 8007678:	4605      	mov	r5, r0
 800767a:	460c      	mov	r4, r1
 800767c:	b913      	cbnz	r3, 8007684 <_fflush_r+0x10>
 800767e:	2500      	movs	r5, #0
 8007680:	4628      	mov	r0, r5
 8007682:	bd38      	pop	{r3, r4, r5, pc}
 8007684:	b118      	cbz	r0, 800768e <_fflush_r+0x1a>
 8007686:	6a03      	ldr	r3, [r0, #32]
 8007688:	b90b      	cbnz	r3, 800768e <_fflush_r+0x1a>
 800768a:	f7ff fa47 	bl	8006b1c <__sinit>
 800768e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0f3      	beq.n	800767e <_fflush_r+0xa>
 8007696:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007698:	07d0      	lsls	r0, r2, #31
 800769a:	d404      	bmi.n	80076a6 <_fflush_r+0x32>
 800769c:	0599      	lsls	r1, r3, #22
 800769e:	d402      	bmi.n	80076a6 <_fflush_r+0x32>
 80076a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076a2:	f7ff fb4e 	bl	8006d42 <__retarget_lock_acquire_recursive>
 80076a6:	4628      	mov	r0, r5
 80076a8:	4621      	mov	r1, r4
 80076aa:	f7ff ff5f 	bl	800756c <__sflush_r>
 80076ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076b0:	07da      	lsls	r2, r3, #31
 80076b2:	4605      	mov	r5, r0
 80076b4:	d4e4      	bmi.n	8007680 <_fflush_r+0xc>
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	059b      	lsls	r3, r3, #22
 80076ba:	d4e1      	bmi.n	8007680 <_fflush_r+0xc>
 80076bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076be:	f7ff fb41 	bl	8006d44 <__retarget_lock_release_recursive>
 80076c2:	e7dd      	b.n	8007680 <_fflush_r+0xc>

080076c4 <fiprintf>:
 80076c4:	b40e      	push	{r1, r2, r3}
 80076c6:	b503      	push	{r0, r1, lr}
 80076c8:	4601      	mov	r1, r0
 80076ca:	ab03      	add	r3, sp, #12
 80076cc:	4805      	ldr	r0, [pc, #20]	@ (80076e4 <fiprintf+0x20>)
 80076ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80076d2:	6800      	ldr	r0, [r0, #0]
 80076d4:	9301      	str	r3, [sp, #4]
 80076d6:	f000 f88f 	bl	80077f8 <_vfiprintf_r>
 80076da:	b002      	add	sp, #8
 80076dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80076e0:	b003      	add	sp, #12
 80076e2:	4770      	bx	lr
 80076e4:	20000020 	.word	0x20000020

080076e8 <memmove>:
 80076e8:	4288      	cmp	r0, r1
 80076ea:	b510      	push	{r4, lr}
 80076ec:	eb01 0402 	add.w	r4, r1, r2
 80076f0:	d902      	bls.n	80076f8 <memmove+0x10>
 80076f2:	4284      	cmp	r4, r0
 80076f4:	4623      	mov	r3, r4
 80076f6:	d807      	bhi.n	8007708 <memmove+0x20>
 80076f8:	1e43      	subs	r3, r0, #1
 80076fa:	42a1      	cmp	r1, r4
 80076fc:	d008      	beq.n	8007710 <memmove+0x28>
 80076fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007702:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007706:	e7f8      	b.n	80076fa <memmove+0x12>
 8007708:	4402      	add	r2, r0
 800770a:	4601      	mov	r1, r0
 800770c:	428a      	cmp	r2, r1
 800770e:	d100      	bne.n	8007712 <memmove+0x2a>
 8007710:	bd10      	pop	{r4, pc}
 8007712:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007716:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800771a:	e7f7      	b.n	800770c <memmove+0x24>

0800771c <_sbrk_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4d06      	ldr	r5, [pc, #24]	@ (8007738 <_sbrk_r+0x1c>)
 8007720:	2300      	movs	r3, #0
 8007722:	4604      	mov	r4, r0
 8007724:	4608      	mov	r0, r1
 8007726:	602b      	str	r3, [r5, #0]
 8007728:	f7f9 fbba 	bl	8000ea0 <_sbrk>
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	d102      	bne.n	8007736 <_sbrk_r+0x1a>
 8007730:	682b      	ldr	r3, [r5, #0]
 8007732:	b103      	cbz	r3, 8007736 <_sbrk_r+0x1a>
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	bd38      	pop	{r3, r4, r5, pc}
 8007738:	2000bd4c 	.word	0x2000bd4c

0800773c <abort>:
 800773c:	b508      	push	{r3, lr}
 800773e:	2006      	movs	r0, #6
 8007740:	f000 fa2e 	bl	8007ba0 <raise>
 8007744:	2001      	movs	r0, #1
 8007746:	f7f9 fb33 	bl	8000db0 <_exit>

0800774a <_realloc_r>:
 800774a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800774e:	4680      	mov	r8, r0
 8007750:	4615      	mov	r5, r2
 8007752:	460c      	mov	r4, r1
 8007754:	b921      	cbnz	r1, 8007760 <_realloc_r+0x16>
 8007756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800775a:	4611      	mov	r1, r2
 800775c:	f7ff bb94 	b.w	8006e88 <_malloc_r>
 8007760:	b92a      	cbnz	r2, 800776e <_realloc_r+0x24>
 8007762:	f7ff fb1d 	bl	8006da0 <_free_r>
 8007766:	2400      	movs	r4, #0
 8007768:	4620      	mov	r0, r4
 800776a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800776e:	f000 fa33 	bl	8007bd8 <_malloc_usable_size_r>
 8007772:	4285      	cmp	r5, r0
 8007774:	4606      	mov	r6, r0
 8007776:	d802      	bhi.n	800777e <_realloc_r+0x34>
 8007778:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800777c:	d8f4      	bhi.n	8007768 <_realloc_r+0x1e>
 800777e:	4629      	mov	r1, r5
 8007780:	4640      	mov	r0, r8
 8007782:	f7ff fb81 	bl	8006e88 <_malloc_r>
 8007786:	4607      	mov	r7, r0
 8007788:	2800      	cmp	r0, #0
 800778a:	d0ec      	beq.n	8007766 <_realloc_r+0x1c>
 800778c:	42b5      	cmp	r5, r6
 800778e:	462a      	mov	r2, r5
 8007790:	4621      	mov	r1, r4
 8007792:	bf28      	it	cs
 8007794:	4632      	movcs	r2, r6
 8007796:	f7ff fad6 	bl	8006d46 <memcpy>
 800779a:	4621      	mov	r1, r4
 800779c:	4640      	mov	r0, r8
 800779e:	f7ff faff 	bl	8006da0 <_free_r>
 80077a2:	463c      	mov	r4, r7
 80077a4:	e7e0      	b.n	8007768 <_realloc_r+0x1e>

080077a6 <__sfputc_r>:
 80077a6:	6893      	ldr	r3, [r2, #8]
 80077a8:	3b01      	subs	r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	b410      	push	{r4}
 80077ae:	6093      	str	r3, [r2, #8]
 80077b0:	da08      	bge.n	80077c4 <__sfputc_r+0x1e>
 80077b2:	6994      	ldr	r4, [r2, #24]
 80077b4:	42a3      	cmp	r3, r4
 80077b6:	db01      	blt.n	80077bc <__sfputc_r+0x16>
 80077b8:	290a      	cmp	r1, #10
 80077ba:	d103      	bne.n	80077c4 <__sfputc_r+0x1e>
 80077bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077c0:	f000 b932 	b.w	8007a28 <__swbuf_r>
 80077c4:	6813      	ldr	r3, [r2, #0]
 80077c6:	1c58      	adds	r0, r3, #1
 80077c8:	6010      	str	r0, [r2, #0]
 80077ca:	7019      	strb	r1, [r3, #0]
 80077cc:	4608      	mov	r0, r1
 80077ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <__sfputs_r>:
 80077d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d6:	4606      	mov	r6, r0
 80077d8:	460f      	mov	r7, r1
 80077da:	4614      	mov	r4, r2
 80077dc:	18d5      	adds	r5, r2, r3
 80077de:	42ac      	cmp	r4, r5
 80077e0:	d101      	bne.n	80077e6 <__sfputs_r+0x12>
 80077e2:	2000      	movs	r0, #0
 80077e4:	e007      	b.n	80077f6 <__sfputs_r+0x22>
 80077e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ea:	463a      	mov	r2, r7
 80077ec:	4630      	mov	r0, r6
 80077ee:	f7ff ffda 	bl	80077a6 <__sfputc_r>
 80077f2:	1c43      	adds	r3, r0, #1
 80077f4:	d1f3      	bne.n	80077de <__sfputs_r+0xa>
 80077f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080077f8 <_vfiprintf_r>:
 80077f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fc:	460d      	mov	r5, r1
 80077fe:	b09d      	sub	sp, #116	@ 0x74
 8007800:	4614      	mov	r4, r2
 8007802:	4698      	mov	r8, r3
 8007804:	4606      	mov	r6, r0
 8007806:	b118      	cbz	r0, 8007810 <_vfiprintf_r+0x18>
 8007808:	6a03      	ldr	r3, [r0, #32]
 800780a:	b90b      	cbnz	r3, 8007810 <_vfiprintf_r+0x18>
 800780c:	f7ff f986 	bl	8006b1c <__sinit>
 8007810:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007812:	07d9      	lsls	r1, r3, #31
 8007814:	d405      	bmi.n	8007822 <_vfiprintf_r+0x2a>
 8007816:	89ab      	ldrh	r3, [r5, #12]
 8007818:	059a      	lsls	r2, r3, #22
 800781a:	d402      	bmi.n	8007822 <_vfiprintf_r+0x2a>
 800781c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800781e:	f7ff fa90 	bl	8006d42 <__retarget_lock_acquire_recursive>
 8007822:	89ab      	ldrh	r3, [r5, #12]
 8007824:	071b      	lsls	r3, r3, #28
 8007826:	d501      	bpl.n	800782c <_vfiprintf_r+0x34>
 8007828:	692b      	ldr	r3, [r5, #16]
 800782a:	b99b      	cbnz	r3, 8007854 <_vfiprintf_r+0x5c>
 800782c:	4629      	mov	r1, r5
 800782e:	4630      	mov	r0, r6
 8007830:	f000 f938 	bl	8007aa4 <__swsetup_r>
 8007834:	b170      	cbz	r0, 8007854 <_vfiprintf_r+0x5c>
 8007836:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007838:	07dc      	lsls	r4, r3, #31
 800783a:	d504      	bpl.n	8007846 <_vfiprintf_r+0x4e>
 800783c:	f04f 30ff 	mov.w	r0, #4294967295
 8007840:	b01d      	add	sp, #116	@ 0x74
 8007842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007846:	89ab      	ldrh	r3, [r5, #12]
 8007848:	0598      	lsls	r0, r3, #22
 800784a:	d4f7      	bmi.n	800783c <_vfiprintf_r+0x44>
 800784c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800784e:	f7ff fa79 	bl	8006d44 <__retarget_lock_release_recursive>
 8007852:	e7f3      	b.n	800783c <_vfiprintf_r+0x44>
 8007854:	2300      	movs	r3, #0
 8007856:	9309      	str	r3, [sp, #36]	@ 0x24
 8007858:	2320      	movs	r3, #32
 800785a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800785e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007862:	2330      	movs	r3, #48	@ 0x30
 8007864:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007a14 <_vfiprintf_r+0x21c>
 8007868:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800786c:	f04f 0901 	mov.w	r9, #1
 8007870:	4623      	mov	r3, r4
 8007872:	469a      	mov	sl, r3
 8007874:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007878:	b10a      	cbz	r2, 800787e <_vfiprintf_r+0x86>
 800787a:	2a25      	cmp	r2, #37	@ 0x25
 800787c:	d1f9      	bne.n	8007872 <_vfiprintf_r+0x7a>
 800787e:	ebba 0b04 	subs.w	fp, sl, r4
 8007882:	d00b      	beq.n	800789c <_vfiprintf_r+0xa4>
 8007884:	465b      	mov	r3, fp
 8007886:	4622      	mov	r2, r4
 8007888:	4629      	mov	r1, r5
 800788a:	4630      	mov	r0, r6
 800788c:	f7ff ffa2 	bl	80077d4 <__sfputs_r>
 8007890:	3001      	adds	r0, #1
 8007892:	f000 80a7 	beq.w	80079e4 <_vfiprintf_r+0x1ec>
 8007896:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007898:	445a      	add	r2, fp
 800789a:	9209      	str	r2, [sp, #36]	@ 0x24
 800789c:	f89a 3000 	ldrb.w	r3, [sl]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 809f 	beq.w	80079e4 <_vfiprintf_r+0x1ec>
 80078a6:	2300      	movs	r3, #0
 80078a8:	f04f 32ff 	mov.w	r2, #4294967295
 80078ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078b0:	f10a 0a01 	add.w	sl, sl, #1
 80078b4:	9304      	str	r3, [sp, #16]
 80078b6:	9307      	str	r3, [sp, #28]
 80078b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80078be:	4654      	mov	r4, sl
 80078c0:	2205      	movs	r2, #5
 80078c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c6:	4853      	ldr	r0, [pc, #332]	@ (8007a14 <_vfiprintf_r+0x21c>)
 80078c8:	f7f8 fcc2 	bl	8000250 <memchr>
 80078cc:	9a04      	ldr	r2, [sp, #16]
 80078ce:	b9d8      	cbnz	r0, 8007908 <_vfiprintf_r+0x110>
 80078d0:	06d1      	lsls	r1, r2, #27
 80078d2:	bf44      	itt	mi
 80078d4:	2320      	movmi	r3, #32
 80078d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078da:	0713      	lsls	r3, r2, #28
 80078dc:	bf44      	itt	mi
 80078de:	232b      	movmi	r3, #43	@ 0x2b
 80078e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078e4:	f89a 3000 	ldrb.w	r3, [sl]
 80078e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80078ea:	d015      	beq.n	8007918 <_vfiprintf_r+0x120>
 80078ec:	9a07      	ldr	r2, [sp, #28]
 80078ee:	4654      	mov	r4, sl
 80078f0:	2000      	movs	r0, #0
 80078f2:	f04f 0c0a 	mov.w	ip, #10
 80078f6:	4621      	mov	r1, r4
 80078f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078fc:	3b30      	subs	r3, #48	@ 0x30
 80078fe:	2b09      	cmp	r3, #9
 8007900:	d94b      	bls.n	800799a <_vfiprintf_r+0x1a2>
 8007902:	b1b0      	cbz	r0, 8007932 <_vfiprintf_r+0x13a>
 8007904:	9207      	str	r2, [sp, #28]
 8007906:	e014      	b.n	8007932 <_vfiprintf_r+0x13a>
 8007908:	eba0 0308 	sub.w	r3, r0, r8
 800790c:	fa09 f303 	lsl.w	r3, r9, r3
 8007910:	4313      	orrs	r3, r2
 8007912:	9304      	str	r3, [sp, #16]
 8007914:	46a2      	mov	sl, r4
 8007916:	e7d2      	b.n	80078be <_vfiprintf_r+0xc6>
 8007918:	9b03      	ldr	r3, [sp, #12]
 800791a:	1d19      	adds	r1, r3, #4
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	9103      	str	r1, [sp, #12]
 8007920:	2b00      	cmp	r3, #0
 8007922:	bfbb      	ittet	lt
 8007924:	425b      	neglt	r3, r3
 8007926:	f042 0202 	orrlt.w	r2, r2, #2
 800792a:	9307      	strge	r3, [sp, #28]
 800792c:	9307      	strlt	r3, [sp, #28]
 800792e:	bfb8      	it	lt
 8007930:	9204      	strlt	r2, [sp, #16]
 8007932:	7823      	ldrb	r3, [r4, #0]
 8007934:	2b2e      	cmp	r3, #46	@ 0x2e
 8007936:	d10a      	bne.n	800794e <_vfiprintf_r+0x156>
 8007938:	7863      	ldrb	r3, [r4, #1]
 800793a:	2b2a      	cmp	r3, #42	@ 0x2a
 800793c:	d132      	bne.n	80079a4 <_vfiprintf_r+0x1ac>
 800793e:	9b03      	ldr	r3, [sp, #12]
 8007940:	1d1a      	adds	r2, r3, #4
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	9203      	str	r2, [sp, #12]
 8007946:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800794a:	3402      	adds	r4, #2
 800794c:	9305      	str	r3, [sp, #20]
 800794e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007a24 <_vfiprintf_r+0x22c>
 8007952:	7821      	ldrb	r1, [r4, #0]
 8007954:	2203      	movs	r2, #3
 8007956:	4650      	mov	r0, sl
 8007958:	f7f8 fc7a 	bl	8000250 <memchr>
 800795c:	b138      	cbz	r0, 800796e <_vfiprintf_r+0x176>
 800795e:	9b04      	ldr	r3, [sp, #16]
 8007960:	eba0 000a 	sub.w	r0, r0, sl
 8007964:	2240      	movs	r2, #64	@ 0x40
 8007966:	4082      	lsls	r2, r0
 8007968:	4313      	orrs	r3, r2
 800796a:	3401      	adds	r4, #1
 800796c:	9304      	str	r3, [sp, #16]
 800796e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007972:	4829      	ldr	r0, [pc, #164]	@ (8007a18 <_vfiprintf_r+0x220>)
 8007974:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007978:	2206      	movs	r2, #6
 800797a:	f7f8 fc69 	bl	8000250 <memchr>
 800797e:	2800      	cmp	r0, #0
 8007980:	d03f      	beq.n	8007a02 <_vfiprintf_r+0x20a>
 8007982:	4b26      	ldr	r3, [pc, #152]	@ (8007a1c <_vfiprintf_r+0x224>)
 8007984:	bb1b      	cbnz	r3, 80079ce <_vfiprintf_r+0x1d6>
 8007986:	9b03      	ldr	r3, [sp, #12]
 8007988:	3307      	adds	r3, #7
 800798a:	f023 0307 	bic.w	r3, r3, #7
 800798e:	3308      	adds	r3, #8
 8007990:	9303      	str	r3, [sp, #12]
 8007992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007994:	443b      	add	r3, r7
 8007996:	9309      	str	r3, [sp, #36]	@ 0x24
 8007998:	e76a      	b.n	8007870 <_vfiprintf_r+0x78>
 800799a:	fb0c 3202 	mla	r2, ip, r2, r3
 800799e:	460c      	mov	r4, r1
 80079a0:	2001      	movs	r0, #1
 80079a2:	e7a8      	b.n	80078f6 <_vfiprintf_r+0xfe>
 80079a4:	2300      	movs	r3, #0
 80079a6:	3401      	adds	r4, #1
 80079a8:	9305      	str	r3, [sp, #20]
 80079aa:	4619      	mov	r1, r3
 80079ac:	f04f 0c0a 	mov.w	ip, #10
 80079b0:	4620      	mov	r0, r4
 80079b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079b6:	3a30      	subs	r2, #48	@ 0x30
 80079b8:	2a09      	cmp	r2, #9
 80079ba:	d903      	bls.n	80079c4 <_vfiprintf_r+0x1cc>
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d0c6      	beq.n	800794e <_vfiprintf_r+0x156>
 80079c0:	9105      	str	r1, [sp, #20]
 80079c2:	e7c4      	b.n	800794e <_vfiprintf_r+0x156>
 80079c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80079c8:	4604      	mov	r4, r0
 80079ca:	2301      	movs	r3, #1
 80079cc:	e7f0      	b.n	80079b0 <_vfiprintf_r+0x1b8>
 80079ce:	ab03      	add	r3, sp, #12
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	462a      	mov	r2, r5
 80079d4:	4b12      	ldr	r3, [pc, #72]	@ (8007a20 <_vfiprintf_r+0x228>)
 80079d6:	a904      	add	r1, sp, #16
 80079d8:	4630      	mov	r0, r6
 80079da:	f3af 8000 	nop.w
 80079de:	4607      	mov	r7, r0
 80079e0:	1c78      	adds	r0, r7, #1
 80079e2:	d1d6      	bne.n	8007992 <_vfiprintf_r+0x19a>
 80079e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079e6:	07d9      	lsls	r1, r3, #31
 80079e8:	d405      	bmi.n	80079f6 <_vfiprintf_r+0x1fe>
 80079ea:	89ab      	ldrh	r3, [r5, #12]
 80079ec:	059a      	lsls	r2, r3, #22
 80079ee:	d402      	bmi.n	80079f6 <_vfiprintf_r+0x1fe>
 80079f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079f2:	f7ff f9a7 	bl	8006d44 <__retarget_lock_release_recursive>
 80079f6:	89ab      	ldrh	r3, [r5, #12]
 80079f8:	065b      	lsls	r3, r3, #25
 80079fa:	f53f af1f 	bmi.w	800783c <_vfiprintf_r+0x44>
 80079fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a00:	e71e      	b.n	8007840 <_vfiprintf_r+0x48>
 8007a02:	ab03      	add	r3, sp, #12
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	462a      	mov	r2, r5
 8007a08:	4b05      	ldr	r3, [pc, #20]	@ (8007a20 <_vfiprintf_r+0x228>)
 8007a0a:	a904      	add	r1, sp, #16
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f7ff fc8d 	bl	800732c <_printf_i>
 8007a12:	e7e4      	b.n	80079de <_vfiprintf_r+0x1e6>
 8007a14:	08007edb 	.word	0x08007edb
 8007a18:	08007ee5 	.word	0x08007ee5
 8007a1c:	00000000 	.word	0x00000000
 8007a20:	080077d5 	.word	0x080077d5
 8007a24:	08007ee1 	.word	0x08007ee1

08007a28 <__swbuf_r>:
 8007a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2a:	460e      	mov	r6, r1
 8007a2c:	4614      	mov	r4, r2
 8007a2e:	4605      	mov	r5, r0
 8007a30:	b118      	cbz	r0, 8007a3a <__swbuf_r+0x12>
 8007a32:	6a03      	ldr	r3, [r0, #32]
 8007a34:	b90b      	cbnz	r3, 8007a3a <__swbuf_r+0x12>
 8007a36:	f7ff f871 	bl	8006b1c <__sinit>
 8007a3a:	69a3      	ldr	r3, [r4, #24]
 8007a3c:	60a3      	str	r3, [r4, #8]
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	071a      	lsls	r2, r3, #28
 8007a42:	d501      	bpl.n	8007a48 <__swbuf_r+0x20>
 8007a44:	6923      	ldr	r3, [r4, #16]
 8007a46:	b943      	cbnz	r3, 8007a5a <__swbuf_r+0x32>
 8007a48:	4621      	mov	r1, r4
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	f000 f82a 	bl	8007aa4 <__swsetup_r>
 8007a50:	b118      	cbz	r0, 8007a5a <__swbuf_r+0x32>
 8007a52:	f04f 37ff 	mov.w	r7, #4294967295
 8007a56:	4638      	mov	r0, r7
 8007a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a5a:	6823      	ldr	r3, [r4, #0]
 8007a5c:	6922      	ldr	r2, [r4, #16]
 8007a5e:	1a98      	subs	r0, r3, r2
 8007a60:	6963      	ldr	r3, [r4, #20]
 8007a62:	b2f6      	uxtb	r6, r6
 8007a64:	4283      	cmp	r3, r0
 8007a66:	4637      	mov	r7, r6
 8007a68:	dc05      	bgt.n	8007a76 <__swbuf_r+0x4e>
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f7ff fe01 	bl	8007674 <_fflush_r>
 8007a72:	2800      	cmp	r0, #0
 8007a74:	d1ed      	bne.n	8007a52 <__swbuf_r+0x2a>
 8007a76:	68a3      	ldr	r3, [r4, #8]
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	60a3      	str	r3, [r4, #8]
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	1c5a      	adds	r2, r3, #1
 8007a80:	6022      	str	r2, [r4, #0]
 8007a82:	701e      	strb	r6, [r3, #0]
 8007a84:	6962      	ldr	r2, [r4, #20]
 8007a86:	1c43      	adds	r3, r0, #1
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d004      	beq.n	8007a96 <__swbuf_r+0x6e>
 8007a8c:	89a3      	ldrh	r3, [r4, #12]
 8007a8e:	07db      	lsls	r3, r3, #31
 8007a90:	d5e1      	bpl.n	8007a56 <__swbuf_r+0x2e>
 8007a92:	2e0a      	cmp	r6, #10
 8007a94:	d1df      	bne.n	8007a56 <__swbuf_r+0x2e>
 8007a96:	4621      	mov	r1, r4
 8007a98:	4628      	mov	r0, r5
 8007a9a:	f7ff fdeb 	bl	8007674 <_fflush_r>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d0d9      	beq.n	8007a56 <__swbuf_r+0x2e>
 8007aa2:	e7d6      	b.n	8007a52 <__swbuf_r+0x2a>

08007aa4 <__swsetup_r>:
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	4b29      	ldr	r3, [pc, #164]	@ (8007b4c <__swsetup_r+0xa8>)
 8007aa8:	4605      	mov	r5, r0
 8007aaa:	6818      	ldr	r0, [r3, #0]
 8007aac:	460c      	mov	r4, r1
 8007aae:	b118      	cbz	r0, 8007ab8 <__swsetup_r+0x14>
 8007ab0:	6a03      	ldr	r3, [r0, #32]
 8007ab2:	b90b      	cbnz	r3, 8007ab8 <__swsetup_r+0x14>
 8007ab4:	f7ff f832 	bl	8006b1c <__sinit>
 8007ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007abc:	0719      	lsls	r1, r3, #28
 8007abe:	d422      	bmi.n	8007b06 <__swsetup_r+0x62>
 8007ac0:	06da      	lsls	r2, r3, #27
 8007ac2:	d407      	bmi.n	8007ad4 <__swsetup_r+0x30>
 8007ac4:	2209      	movs	r2, #9
 8007ac6:	602a      	str	r2, [r5, #0]
 8007ac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007acc:	81a3      	strh	r3, [r4, #12]
 8007ace:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad2:	e033      	b.n	8007b3c <__swsetup_r+0x98>
 8007ad4:	0758      	lsls	r0, r3, #29
 8007ad6:	d512      	bpl.n	8007afe <__swsetup_r+0x5a>
 8007ad8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ada:	b141      	cbz	r1, 8007aee <__swsetup_r+0x4a>
 8007adc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ae0:	4299      	cmp	r1, r3
 8007ae2:	d002      	beq.n	8007aea <__swsetup_r+0x46>
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f7ff f95b 	bl	8006da0 <_free_r>
 8007aea:	2300      	movs	r3, #0
 8007aec:	6363      	str	r3, [r4, #52]	@ 0x34
 8007aee:	89a3      	ldrh	r3, [r4, #12]
 8007af0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007af4:	81a3      	strh	r3, [r4, #12]
 8007af6:	2300      	movs	r3, #0
 8007af8:	6063      	str	r3, [r4, #4]
 8007afa:	6923      	ldr	r3, [r4, #16]
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	89a3      	ldrh	r3, [r4, #12]
 8007b00:	f043 0308 	orr.w	r3, r3, #8
 8007b04:	81a3      	strh	r3, [r4, #12]
 8007b06:	6923      	ldr	r3, [r4, #16]
 8007b08:	b94b      	cbnz	r3, 8007b1e <__swsetup_r+0x7a>
 8007b0a:	89a3      	ldrh	r3, [r4, #12]
 8007b0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b14:	d003      	beq.n	8007b1e <__swsetup_r+0x7a>
 8007b16:	4621      	mov	r1, r4
 8007b18:	4628      	mov	r0, r5
 8007b1a:	f000 f88b 	bl	8007c34 <__smakebuf_r>
 8007b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b22:	f013 0201 	ands.w	r2, r3, #1
 8007b26:	d00a      	beq.n	8007b3e <__swsetup_r+0x9a>
 8007b28:	2200      	movs	r2, #0
 8007b2a:	60a2      	str	r2, [r4, #8]
 8007b2c:	6962      	ldr	r2, [r4, #20]
 8007b2e:	4252      	negs	r2, r2
 8007b30:	61a2      	str	r2, [r4, #24]
 8007b32:	6922      	ldr	r2, [r4, #16]
 8007b34:	b942      	cbnz	r2, 8007b48 <__swsetup_r+0xa4>
 8007b36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b3a:	d1c5      	bne.n	8007ac8 <__swsetup_r+0x24>
 8007b3c:	bd38      	pop	{r3, r4, r5, pc}
 8007b3e:	0799      	lsls	r1, r3, #30
 8007b40:	bf58      	it	pl
 8007b42:	6962      	ldrpl	r2, [r4, #20]
 8007b44:	60a2      	str	r2, [r4, #8]
 8007b46:	e7f4      	b.n	8007b32 <__swsetup_r+0x8e>
 8007b48:	2000      	movs	r0, #0
 8007b4a:	e7f7      	b.n	8007b3c <__swsetup_r+0x98>
 8007b4c:	20000020 	.word	0x20000020

08007b50 <_raise_r>:
 8007b50:	291f      	cmp	r1, #31
 8007b52:	b538      	push	{r3, r4, r5, lr}
 8007b54:	4605      	mov	r5, r0
 8007b56:	460c      	mov	r4, r1
 8007b58:	d904      	bls.n	8007b64 <_raise_r+0x14>
 8007b5a:	2316      	movs	r3, #22
 8007b5c:	6003      	str	r3, [r0, #0]
 8007b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007b66:	b112      	cbz	r2, 8007b6e <_raise_r+0x1e>
 8007b68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b6c:	b94b      	cbnz	r3, 8007b82 <_raise_r+0x32>
 8007b6e:	4628      	mov	r0, r5
 8007b70:	f000 f830 	bl	8007bd4 <_getpid_r>
 8007b74:	4622      	mov	r2, r4
 8007b76:	4601      	mov	r1, r0
 8007b78:	4628      	mov	r0, r5
 8007b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b7e:	f000 b817 	b.w	8007bb0 <_kill_r>
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d00a      	beq.n	8007b9c <_raise_r+0x4c>
 8007b86:	1c59      	adds	r1, r3, #1
 8007b88:	d103      	bne.n	8007b92 <_raise_r+0x42>
 8007b8a:	2316      	movs	r3, #22
 8007b8c:	6003      	str	r3, [r0, #0]
 8007b8e:	2001      	movs	r0, #1
 8007b90:	e7e7      	b.n	8007b62 <_raise_r+0x12>
 8007b92:	2100      	movs	r1, #0
 8007b94:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007b98:	4620      	mov	r0, r4
 8007b9a:	4798      	blx	r3
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	e7e0      	b.n	8007b62 <_raise_r+0x12>

08007ba0 <raise>:
 8007ba0:	4b02      	ldr	r3, [pc, #8]	@ (8007bac <raise+0xc>)
 8007ba2:	4601      	mov	r1, r0
 8007ba4:	6818      	ldr	r0, [r3, #0]
 8007ba6:	f7ff bfd3 	b.w	8007b50 <_raise_r>
 8007baa:	bf00      	nop
 8007bac:	20000020 	.word	0x20000020

08007bb0 <_kill_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	4d07      	ldr	r5, [pc, #28]	@ (8007bd0 <_kill_r+0x20>)
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	4608      	mov	r0, r1
 8007bba:	4611      	mov	r1, r2
 8007bbc:	602b      	str	r3, [r5, #0]
 8007bbe:	f7f9 f8e7 	bl	8000d90 <_kill>
 8007bc2:	1c43      	adds	r3, r0, #1
 8007bc4:	d102      	bne.n	8007bcc <_kill_r+0x1c>
 8007bc6:	682b      	ldr	r3, [r5, #0]
 8007bc8:	b103      	cbz	r3, 8007bcc <_kill_r+0x1c>
 8007bca:	6023      	str	r3, [r4, #0]
 8007bcc:	bd38      	pop	{r3, r4, r5, pc}
 8007bce:	bf00      	nop
 8007bd0:	2000bd4c 	.word	0x2000bd4c

08007bd4 <_getpid_r>:
 8007bd4:	f7f9 b8d4 	b.w	8000d80 <_getpid>

08007bd8 <_malloc_usable_size_r>:
 8007bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bdc:	1f18      	subs	r0, r3, #4
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	bfbc      	itt	lt
 8007be2:	580b      	ldrlt	r3, [r1, r0]
 8007be4:	18c0      	addlt	r0, r0, r3
 8007be6:	4770      	bx	lr

08007be8 <__swhatbuf_r>:
 8007be8:	b570      	push	{r4, r5, r6, lr}
 8007bea:	460c      	mov	r4, r1
 8007bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf0:	2900      	cmp	r1, #0
 8007bf2:	b096      	sub	sp, #88	@ 0x58
 8007bf4:	4615      	mov	r5, r2
 8007bf6:	461e      	mov	r6, r3
 8007bf8:	da0d      	bge.n	8007c16 <__swhatbuf_r+0x2e>
 8007bfa:	89a3      	ldrh	r3, [r4, #12]
 8007bfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007c00:	f04f 0100 	mov.w	r1, #0
 8007c04:	bf14      	ite	ne
 8007c06:	2340      	movne	r3, #64	@ 0x40
 8007c08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	6031      	str	r1, [r6, #0]
 8007c10:	602b      	str	r3, [r5, #0]
 8007c12:	b016      	add	sp, #88	@ 0x58
 8007c14:	bd70      	pop	{r4, r5, r6, pc}
 8007c16:	466a      	mov	r2, sp
 8007c18:	f000 f848 	bl	8007cac <_fstat_r>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	dbec      	blt.n	8007bfa <__swhatbuf_r+0x12>
 8007c20:	9901      	ldr	r1, [sp, #4]
 8007c22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c2a:	4259      	negs	r1, r3
 8007c2c:	4159      	adcs	r1, r3
 8007c2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c32:	e7eb      	b.n	8007c0c <__swhatbuf_r+0x24>

08007c34 <__smakebuf_r>:
 8007c34:	898b      	ldrh	r3, [r1, #12]
 8007c36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c38:	079d      	lsls	r5, r3, #30
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	460c      	mov	r4, r1
 8007c3e:	d507      	bpl.n	8007c50 <__smakebuf_r+0x1c>
 8007c40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	6123      	str	r3, [r4, #16]
 8007c48:	2301      	movs	r3, #1
 8007c4a:	6163      	str	r3, [r4, #20]
 8007c4c:	b003      	add	sp, #12
 8007c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c50:	ab01      	add	r3, sp, #4
 8007c52:	466a      	mov	r2, sp
 8007c54:	f7ff ffc8 	bl	8007be8 <__swhatbuf_r>
 8007c58:	9f00      	ldr	r7, [sp, #0]
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	4639      	mov	r1, r7
 8007c5e:	4630      	mov	r0, r6
 8007c60:	f7ff f912 	bl	8006e88 <_malloc_r>
 8007c64:	b948      	cbnz	r0, 8007c7a <__smakebuf_r+0x46>
 8007c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c6a:	059a      	lsls	r2, r3, #22
 8007c6c:	d4ee      	bmi.n	8007c4c <__smakebuf_r+0x18>
 8007c6e:	f023 0303 	bic.w	r3, r3, #3
 8007c72:	f043 0302 	orr.w	r3, r3, #2
 8007c76:	81a3      	strh	r3, [r4, #12]
 8007c78:	e7e2      	b.n	8007c40 <__smakebuf_r+0xc>
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	6020      	str	r0, [r4, #0]
 8007c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c82:	81a3      	strh	r3, [r4, #12]
 8007c84:	9b01      	ldr	r3, [sp, #4]
 8007c86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c8a:	b15b      	cbz	r3, 8007ca4 <__smakebuf_r+0x70>
 8007c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c90:	4630      	mov	r0, r6
 8007c92:	f000 f81d 	bl	8007cd0 <_isatty_r>
 8007c96:	b128      	cbz	r0, 8007ca4 <__smakebuf_r+0x70>
 8007c98:	89a3      	ldrh	r3, [r4, #12]
 8007c9a:	f023 0303 	bic.w	r3, r3, #3
 8007c9e:	f043 0301 	orr.w	r3, r3, #1
 8007ca2:	81a3      	strh	r3, [r4, #12]
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	431d      	orrs	r5, r3
 8007ca8:	81a5      	strh	r5, [r4, #12]
 8007caa:	e7cf      	b.n	8007c4c <__smakebuf_r+0x18>

08007cac <_fstat_r>:
 8007cac:	b538      	push	{r3, r4, r5, lr}
 8007cae:	4d07      	ldr	r5, [pc, #28]	@ (8007ccc <_fstat_r+0x20>)
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	4608      	mov	r0, r1
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	602b      	str	r3, [r5, #0]
 8007cba:	f7f9 f8c9 	bl	8000e50 <_fstat>
 8007cbe:	1c43      	adds	r3, r0, #1
 8007cc0:	d102      	bne.n	8007cc8 <_fstat_r+0x1c>
 8007cc2:	682b      	ldr	r3, [r5, #0]
 8007cc4:	b103      	cbz	r3, 8007cc8 <_fstat_r+0x1c>
 8007cc6:	6023      	str	r3, [r4, #0]
 8007cc8:	bd38      	pop	{r3, r4, r5, pc}
 8007cca:	bf00      	nop
 8007ccc:	2000bd4c 	.word	0x2000bd4c

08007cd0 <_isatty_r>:
 8007cd0:	b538      	push	{r3, r4, r5, lr}
 8007cd2:	4d06      	ldr	r5, [pc, #24]	@ (8007cec <_isatty_r+0x1c>)
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	4608      	mov	r0, r1
 8007cda:	602b      	str	r3, [r5, #0]
 8007cdc:	f7f9 f8c8 	bl	8000e70 <_isatty>
 8007ce0:	1c43      	adds	r3, r0, #1
 8007ce2:	d102      	bne.n	8007cea <_isatty_r+0x1a>
 8007ce4:	682b      	ldr	r3, [r5, #0]
 8007ce6:	b103      	cbz	r3, 8007cea <_isatty_r+0x1a>
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	bd38      	pop	{r3, r4, r5, pc}
 8007cec:	2000bd4c 	.word	0x2000bd4c

08007cf0 <_init>:
 8007cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf2:	bf00      	nop
 8007cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cf6:	bc08      	pop	{r3}
 8007cf8:	469e      	mov	lr, r3
 8007cfa:	4770      	bx	lr

08007cfc <_fini>:
 8007cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfe:	bf00      	nop
 8007d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d02:	bc08      	pop	{r3}
 8007d04:	469e      	mov	lr, r3
 8007d06:	4770      	bx	lr
