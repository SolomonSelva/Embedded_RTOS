
008_Task_PrioSwap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007264  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08007464  08007464  00008464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075a0  080075a0  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  080075a0  080075a0  000085a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075a8  080075a8  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075a8  080075a8  000085a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075ac  080075ac  000085ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080075b0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c49c  2000001c  080075cc  0000901c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c4b8  080075cc  000094b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165cc  00000000  00000000  0000904a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031d6  00000000  00000000  0001f616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  000227f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001016  00000000  00000000  00023cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c0be  00000000  00000000  00024cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198a7  00000000  00000000  00050dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116e83  00000000  00000000  0006a653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001814d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000575c  00000000  00000000  0018151c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ec  00000000  00000000  00186c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000001c 	.word	0x2000001c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800744c 	.word	0x0800744c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000020 	.word	0x20000020
 800023c:	0800744c 	.word	0x0800744c

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	2000bae4 	.word	0x2000bae4

080002d4 <strlen>:
 80002d4:	4603      	mov	r3, r0
 80002d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d1fb      	bne.n	80002d6 <strlen+0x2>
 80002de:	1a18      	subs	r0, r3, r0
 80002e0:	3801      	subs	r0, #1
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_uldivmod>:
 80002e4:	b953      	cbnz	r3, 80002fc <__aeabi_uldivmod+0x18>
 80002e6:	b94a      	cbnz	r2, 80002fc <__aeabi_uldivmod+0x18>
 80002e8:	2900      	cmp	r1, #0
 80002ea:	bf08      	it	eq
 80002ec:	2800      	cmpeq	r0, #0
 80002ee:	bf1c      	itt	ne
 80002f0:	f04f 31ff 	movne.w	r1, #4294967295
 80002f4:	f04f 30ff 	movne.w	r0, #4294967295
 80002f8:	f000 b96a 	b.w	80005d0 <__aeabi_idiv0>
 80002fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000300:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000304:	f000 f806 	bl	8000314 <__udivmoddi4>
 8000308:	f8dd e004 	ldr.w	lr, [sp, #4]
 800030c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000310:	b004      	add	sp, #16
 8000312:	4770      	bx	lr

08000314 <__udivmoddi4>:
 8000314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000318:	9d08      	ldr	r5, [sp, #32]
 800031a:	460c      	mov	r4, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14e      	bne.n	80003be <__udivmoddi4+0xaa>
 8000320:	4694      	mov	ip, r2
 8000322:	458c      	cmp	ip, r1
 8000324:	4686      	mov	lr, r0
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	d962      	bls.n	80003f2 <__udivmoddi4+0xde>
 800032c:	b14a      	cbz	r2, 8000342 <__udivmoddi4+0x2e>
 800032e:	f1c2 0320 	rsb	r3, r2, #32
 8000332:	4091      	lsls	r1, r2
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	fa0c fc02 	lsl.w	ip, ip, r2
 800033c:	4319      	orrs	r1, r3
 800033e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f f68c 	uxth.w	r6, ip
 800034a:	fbb1 f4f7 	udiv	r4, r1, r7
 800034e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000352:	fb07 1114 	mls	r1, r7, r4, r1
 8000356:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035a:	fb04 f106 	mul.w	r1, r4, r6
 800035e:	4299      	cmp	r1, r3
 8000360:	d90a      	bls.n	8000378 <__udivmoddi4+0x64>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f104 30ff 	add.w	r0, r4, #4294967295
 800036a:	f080 8112 	bcs.w	8000592 <__udivmoddi4+0x27e>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 810f 	bls.w	8000592 <__udivmoddi4+0x27e>
 8000374:	3c02      	subs	r4, #2
 8000376:	4463      	add	r3, ip
 8000378:	1a59      	subs	r1, r3, r1
 800037a:	fa1f f38e 	uxth.w	r3, lr
 800037e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000382:	fb07 1110 	mls	r1, r7, r0, r1
 8000386:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038a:	fb00 f606 	mul.w	r6, r0, r6
 800038e:	429e      	cmp	r6, r3
 8000390:	d90a      	bls.n	80003a8 <__udivmoddi4+0x94>
 8000392:	eb1c 0303 	adds.w	r3, ip, r3
 8000396:	f100 31ff 	add.w	r1, r0, #4294967295
 800039a:	f080 80fc 	bcs.w	8000596 <__udivmoddi4+0x282>
 800039e:	429e      	cmp	r6, r3
 80003a0:	f240 80f9 	bls.w	8000596 <__udivmoddi4+0x282>
 80003a4:	4463      	add	r3, ip
 80003a6:	3802      	subs	r0, #2
 80003a8:	1b9b      	subs	r3, r3, r6
 80003aa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ae:	2100      	movs	r1, #0
 80003b0:	b11d      	cbz	r5, 80003ba <__udivmoddi4+0xa6>
 80003b2:	40d3      	lsrs	r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	e9c5 3200 	strd	r3, r2, [r5]
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d905      	bls.n	80003ce <__udivmoddi4+0xba>
 80003c2:	b10d      	cbz	r5, 80003c8 <__udivmoddi4+0xb4>
 80003c4:	e9c5 0100 	strd	r0, r1, [r5]
 80003c8:	2100      	movs	r1, #0
 80003ca:	4608      	mov	r0, r1
 80003cc:	e7f5      	b.n	80003ba <__udivmoddi4+0xa6>
 80003ce:	fab3 f183 	clz	r1, r3
 80003d2:	2900      	cmp	r1, #0
 80003d4:	d146      	bne.n	8000464 <__udivmoddi4+0x150>
 80003d6:	42a3      	cmp	r3, r4
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xcc>
 80003da:	4290      	cmp	r0, r2
 80003dc:	f0c0 80f0 	bcc.w	80005c0 <__udivmoddi4+0x2ac>
 80003e0:	1a86      	subs	r6, r0, r2
 80003e2:	eb64 0303 	sbc.w	r3, r4, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	2d00      	cmp	r5, #0
 80003ea:	d0e6      	beq.n	80003ba <__udivmoddi4+0xa6>
 80003ec:	e9c5 6300 	strd	r6, r3, [r5]
 80003f0:	e7e3      	b.n	80003ba <__udivmoddi4+0xa6>
 80003f2:	2a00      	cmp	r2, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x204>
 80003f8:	eba1 040c 	sub.w	r4, r1, ip
 80003fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000400:	fa1f f78c 	uxth.w	r7, ip
 8000404:	2101      	movs	r1, #1
 8000406:	fbb4 f6f8 	udiv	r6, r4, r8
 800040a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040e:	fb08 4416 	mls	r4, r8, r6, r4
 8000412:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000416:	fb07 f006 	mul.w	r0, r7, r6
 800041a:	4298      	cmp	r0, r3
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x11c>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 34ff 	add.w	r4, r6, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x11a>
 8000428:	4298      	cmp	r0, r3
 800042a:	f200 80cd 	bhi.w	80005c8 <__udivmoddi4+0x2b4>
 800042e:	4626      	mov	r6, r4
 8000430:	1a1c      	subs	r4, r3, r0
 8000432:	fa1f f38e 	uxth.w	r3, lr
 8000436:	fbb4 f0f8 	udiv	r0, r4, r8
 800043a:	fb08 4410 	mls	r4, r8, r0, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb00 f707 	mul.w	r7, r0, r7
 8000446:	429f      	cmp	r7, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x148>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x146>
 8000454:	429f      	cmp	r7, r3
 8000456:	f200 80b0 	bhi.w	80005ba <__udivmoddi4+0x2a6>
 800045a:	4620      	mov	r0, r4
 800045c:	1bdb      	subs	r3, r3, r7
 800045e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0x9c>
 8000464:	f1c1 0620 	rsb	r6, r1, #32
 8000468:	408b      	lsls	r3, r1
 800046a:	fa22 f706 	lsr.w	r7, r2, r6
 800046e:	431f      	orrs	r7, r3
 8000470:	fa20 fc06 	lsr.w	ip, r0, r6
 8000474:	fa04 f301 	lsl.w	r3, r4, r1
 8000478:	ea43 030c 	orr.w	r3, r3, ip
 800047c:	40f4      	lsrs	r4, r6
 800047e:	fa00 f801 	lsl.w	r8, r0, r1
 8000482:	0c38      	lsrs	r0, r7, #16
 8000484:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000488:	fbb4 fef0 	udiv	lr, r4, r0
 800048c:	fa1f fc87 	uxth.w	ip, r7
 8000490:	fb00 441e 	mls	r4, r0, lr, r4
 8000494:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000498:	fb0e f90c 	mul.w	r9, lr, ip
 800049c:	45a1      	cmp	r9, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	d90a      	bls.n	80004ba <__udivmoddi4+0x1a6>
 80004a4:	193c      	adds	r4, r7, r4
 80004a6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004aa:	f080 8084 	bcs.w	80005b6 <__udivmoddi4+0x2a2>
 80004ae:	45a1      	cmp	r9, r4
 80004b0:	f240 8081 	bls.w	80005b6 <__udivmoddi4+0x2a2>
 80004b4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b8:	443c      	add	r4, r7
 80004ba:	eba4 0409 	sub.w	r4, r4, r9
 80004be:	fa1f f983 	uxth.w	r9, r3
 80004c2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ce:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x1d2>
 80004d6:	193c      	adds	r4, r7, r4
 80004d8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004dc:	d267      	bcs.n	80005ae <__udivmoddi4+0x29a>
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d965      	bls.n	80005ae <__udivmoddi4+0x29a>
 80004e2:	3b02      	subs	r3, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004ea:	fba0 9302 	umull	r9, r3, r0, r2
 80004ee:	eba4 040c 	sub.w	r4, r4, ip
 80004f2:	429c      	cmp	r4, r3
 80004f4:	46ce      	mov	lr, r9
 80004f6:	469c      	mov	ip, r3
 80004f8:	d351      	bcc.n	800059e <__udivmoddi4+0x28a>
 80004fa:	d04e      	beq.n	800059a <__udivmoddi4+0x286>
 80004fc:	b155      	cbz	r5, 8000514 <__udivmoddi4+0x200>
 80004fe:	ebb8 030e 	subs.w	r3, r8, lr
 8000502:	eb64 040c 	sbc.w	r4, r4, ip
 8000506:	fa04 f606 	lsl.w	r6, r4, r6
 800050a:	40cb      	lsrs	r3, r1
 800050c:	431e      	orrs	r6, r3
 800050e:	40cc      	lsrs	r4, r1
 8000510:	e9c5 6400 	strd	r6, r4, [r5]
 8000514:	2100      	movs	r1, #0
 8000516:	e750      	b.n	80003ba <__udivmoddi4+0xa6>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f103 	lsr.w	r1, r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa24 f303 	lsr.w	r3, r4, r3
 8000528:	4094      	lsls	r4, r2
 800052a:	430c      	orrs	r4, r1
 800052c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000530:	fa00 fe02 	lsl.w	lr, r0, r2
 8000534:	fa1f f78c 	uxth.w	r7, ip
 8000538:	fbb3 f0f8 	udiv	r0, r3, r8
 800053c:	fb08 3110 	mls	r1, r8, r0, r3
 8000540:	0c23      	lsrs	r3, r4, #16
 8000542:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000546:	fb00 f107 	mul.w	r1, r0, r7
 800054a:	4299      	cmp	r1, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x24c>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 36ff 	add.w	r6, r0, #4294967295
 8000556:	d22c      	bcs.n	80005b2 <__udivmoddi4+0x29e>
 8000558:	4299      	cmp	r1, r3
 800055a:	d92a      	bls.n	80005b2 <__udivmoddi4+0x29e>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1a5b      	subs	r3, r3, r1
 8000562:	b2a4      	uxth	r4, r4
 8000564:	fbb3 f1f8 	udiv	r1, r3, r8
 8000568:	fb08 3311 	mls	r3, r8, r1, r3
 800056c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000570:	fb01 f307 	mul.w	r3, r1, r7
 8000574:	42a3      	cmp	r3, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x276>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000580:	d213      	bcs.n	80005aa <__udivmoddi4+0x296>
 8000582:	42a3      	cmp	r3, r4
 8000584:	d911      	bls.n	80005aa <__udivmoddi4+0x296>
 8000586:	3902      	subs	r1, #2
 8000588:	4464      	add	r4, ip
 800058a:	1ae4      	subs	r4, r4, r3
 800058c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000590:	e739      	b.n	8000406 <__udivmoddi4+0xf2>
 8000592:	4604      	mov	r4, r0
 8000594:	e6f0      	b.n	8000378 <__udivmoddi4+0x64>
 8000596:	4608      	mov	r0, r1
 8000598:	e706      	b.n	80003a8 <__udivmoddi4+0x94>
 800059a:	45c8      	cmp	r8, r9
 800059c:	d2ae      	bcs.n	80004fc <__udivmoddi4+0x1e8>
 800059e:	ebb9 0e02 	subs.w	lr, r9, r2
 80005a2:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a6:	3801      	subs	r0, #1
 80005a8:	e7a8      	b.n	80004fc <__udivmoddi4+0x1e8>
 80005aa:	4631      	mov	r1, r6
 80005ac:	e7ed      	b.n	800058a <__udivmoddi4+0x276>
 80005ae:	4603      	mov	r3, r0
 80005b0:	e799      	b.n	80004e6 <__udivmoddi4+0x1d2>
 80005b2:	4630      	mov	r0, r6
 80005b4:	e7d4      	b.n	8000560 <__udivmoddi4+0x24c>
 80005b6:	46d6      	mov	lr, sl
 80005b8:	e77f      	b.n	80004ba <__udivmoddi4+0x1a6>
 80005ba:	4463      	add	r3, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e74d      	b.n	800045c <__udivmoddi4+0x148>
 80005c0:	4606      	mov	r6, r0
 80005c2:	4623      	mov	r3, r4
 80005c4:	4608      	mov	r0, r1
 80005c6:	e70f      	b.n	80003e8 <__udivmoddi4+0xd4>
 80005c8:	3e02      	subs	r6, #2
 80005ca:	4463      	add	r3, ip
 80005cc:	e730      	b.n	8000430 <__udivmoddi4+0x11c>
 80005ce:	bf00      	nop

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005da:	f000 fb54 	bl	8000c86 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005de:	f000 f83b 	bl	8000658 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005e2:	f000 f895 	bl	8000710 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	/* Enable the CYcle counting */
	DWT_CTRL |= (1 << 0);
 80005e6:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <main+0x64>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a13      	ldr	r2, [pc, #76]	@ (8000638 <main+0x64>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6013      	str	r3, [r2, #0]

	SEGGER_UART_init(250000);
 80005f2:	4812      	ldr	r0, [pc, #72]	@ (800063c <main+0x68>)
 80005f4:	f005 f86a 	bl	80056cc <SEGGER_UART_init>

	SEGGER_SYSVIEW_Conf();
 80005f8:	f004 fe22 	bl	8005240 <SEGGER_SYSVIEW_Conf>
	//SEGGER_SYSVIEW_Start();


	status = xTaskCreate(led_green_handler, "G_Task", 200, NULL, 3, &ledg_handle);
 80005fc:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <main+0x6c>)
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	2303      	movs	r3, #3
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2300      	movs	r3, #0
 8000606:	22c8      	movs	r2, #200	@ 0xc8
 8000608:	490e      	ldr	r1, [pc, #56]	@ (8000644 <main+0x70>)
 800060a:	480f      	ldr	r0, [pc, #60]	@ (8000648 <main+0x74>)
 800060c:	f002 fb24 	bl	8002c58 <xTaskCreate>
 8000610:	6078      	str	r0, [r7, #4]

	configASSERT(status = pdPASS);
 8000612:	2301      	movs	r3, #1
 8000614:	607b      	str	r3, [r7, #4]

	status = xTaskCreate(led_red_handler, "R_Task", 200, NULL, 2, &ledr_handle);
 8000616:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <main+0x78>)
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	2302      	movs	r3, #2
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2300      	movs	r3, #0
 8000620:	22c8      	movs	r2, #200	@ 0xc8
 8000622:	490b      	ldr	r1, [pc, #44]	@ (8000650 <main+0x7c>)
 8000624:	480b      	ldr	r0, [pc, #44]	@ (8000654 <main+0x80>)
 8000626:	f002 fb17 	bl	8002c58 <xTaskCreate>
 800062a:	6078      	str	r0, [r7, #4]

	configASSERT(status = pdPASS);
 800062c:	2301      	movs	r3, #1
 800062e:	607b      	str	r3, [r7, #4]

	//STart the FreeRTOS Scheduler
	vTaskStartScheduler();
 8000630:	f002 fde6 	bl	8003200 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <main+0x60>
 8000638:	e0001000 	.word	0xe0001000
 800063c:	0003d090 	.word	0x0003d090
 8000640:	2000003c 	.word	0x2000003c
 8000644:	08007464 	.word	0x08007464
 8000648:	08000a21 	.word	0x08000a21
 800064c:	20000040 	.word	0x20000040
 8000650:	0800746c 	.word	0x0800746c
 8000654:	080009fd 	.word	0x080009fd

08000658 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	@ 0x50
 800065c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2234      	movs	r2, #52	@ 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f006 feb6 	bl	80073d8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800067c:	4b22      	ldr	r3, [pc, #136]	@ (8000708 <SystemClock_Config+0xb0>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	4a21      	ldr	r2, [pc, #132]	@ (8000708 <SystemClock_Config+0xb0>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	@ 0x40
 8000688:	4b1f      	ldr	r3, [pc, #124]	@ (8000708 <SystemClock_Config+0xb0>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000694:	4b1d      	ldr	r3, [pc, #116]	@ (800070c <SystemClock_Config+0xb4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800069c:	4a1b      	ldr	r2, [pc, #108]	@ (800070c <SystemClock_Config+0xb4>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b19      	ldr	r3, [pc, #100]	@ (800070c <SystemClock_Config+0xb4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006bc:	2300      	movs	r3, #0
 80006be:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fe15 	bl	80012f4 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x7c>
	{
		Error_Handler();
 80006d0:	f000 f9ca 	bl	8000a68 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 f8ad 	bl	8001850 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xa8>
	{
		Error_Handler();
 80006fc:	f000 f9b4 	bl	8000a68 <Error_Handler>
	}
}
 8000700:	bf00      	nop
 8000702:	3750      	adds	r7, #80	@ 0x50
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08c      	sub	sp, #48	@ 0x30
 8000714:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	4b83      	ldr	r3, [pc, #524]	@ (8000934 <MX_GPIO_Init+0x224>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a82      	ldr	r2, [pc, #520]	@ (8000934 <MX_GPIO_Init+0x224>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b80      	ldr	r3, [pc, #512]	@ (8000934 <MX_GPIO_Init+0x224>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	61bb      	str	r3, [r7, #24]
 800073c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	4b7d      	ldr	r3, [pc, #500]	@ (8000934 <MX_GPIO_Init+0x224>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a7c      	ldr	r2, [pc, #496]	@ (8000934 <MX_GPIO_Init+0x224>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b7a      	ldr	r3, [pc, #488]	@ (8000934 <MX_GPIO_Init+0x224>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b77      	ldr	r3, [pc, #476]	@ (8000934 <MX_GPIO_Init+0x224>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a76      	ldr	r2, [pc, #472]	@ (8000934 <MX_GPIO_Init+0x224>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b74      	ldr	r3, [pc, #464]	@ (8000934 <MX_GPIO_Init+0x224>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b71      	ldr	r3, [pc, #452]	@ (8000934 <MX_GPIO_Init+0x224>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a70      	ldr	r2, [pc, #448]	@ (8000934 <MX_GPIO_Init+0x224>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b6e      	ldr	r3, [pc, #440]	@ (8000934 <MX_GPIO_Init+0x224>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	4b6b      	ldr	r3, [pc, #428]	@ (8000934 <MX_GPIO_Init+0x224>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a6a      	ldr	r2, [pc, #424]	@ (8000934 <MX_GPIO_Init+0x224>)
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b68      	ldr	r3, [pc, #416]	@ (8000934 <MX_GPIO_Init+0x224>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0308 	and.w	r3, r3, #8
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800079e:	4b65      	ldr	r3, [pc, #404]	@ (8000934 <MX_GPIO_Init+0x224>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a64      	ldr	r2, [pc, #400]	@ (8000934 <MX_GPIO_Init+0x224>)
 80007a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b62      	ldr	r3, [pc, #392]	@ (8000934 <MX_GPIO_Init+0x224>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80007bc:	485e      	ldr	r0, [pc, #376]	@ (8000938 <MX_GPIO_Init+0x228>)
 80007be:	f000 fd41 	bl	8001244 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2140      	movs	r1, #64	@ 0x40
 80007c6:	485d      	ldr	r0, [pc, #372]	@ (800093c <MX_GPIO_Init+0x22c>)
 80007c8:	f000 fd3c 	bl	8001244 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007d6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	4857      	ldr	r0, [pc, #348]	@ (8000940 <MX_GPIO_Init+0x230>)
 80007e4:	f000 fb82 	bl	8000eec <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007e8:	2332      	movs	r3, #50	@ 0x32
 80007ea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f4:	2303      	movs	r3, #3
 80007f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f8:	230b      	movs	r3, #11
 80007fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	484f      	ldr	r0, [pc, #316]	@ (8000940 <MX_GPIO_Init+0x230>)
 8000804:	f000 fb72 	bl	8000eec <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000808:	2386      	movs	r3, #134	@ 0x86
 800080a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000814:	2303      	movs	r3, #3
 8000816:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000818:	230b      	movs	r3, #11
 800081a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	4848      	ldr	r0, [pc, #288]	@ (8000944 <MX_GPIO_Init+0x234>)
 8000824:	f000 fb62 	bl	8000eec <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000828:	f244 0381 	movw	r3, #16513	@ 0x4081
 800082c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	483d      	ldr	r0, [pc, #244]	@ (8000938 <MX_GPIO_Init+0x228>)
 8000842:	f000 fb53 	bl	8000eec <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000846:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800084a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000858:	230b      	movs	r3, #11
 800085a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	4835      	ldr	r0, [pc, #212]	@ (8000938 <MX_GPIO_Init+0x228>)
 8000864:	f000 fb42 	bl	8000eec <HAL_GPIO_Init>

	/*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
	GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000868:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800086c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800087a:	2307      	movs	r3, #7
 800087c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4830      	ldr	r0, [pc, #192]	@ (8000948 <MX_GPIO_Init+0x238>)
 8000886:	f000 fb31 	bl	8000eec <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800088a:	2340      	movs	r3, #64	@ 0x40
 800088c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4826      	ldr	r0, [pc, #152]	@ (800093c <MX_GPIO_Init+0x22c>)
 80008a2:	f000 fb23 	bl	8000eec <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008a6:	2380      	movs	r3, #128	@ 0x80
 80008a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4820      	ldr	r0, [pc, #128]	@ (800093c <MX_GPIO_Init+0x22c>)
 80008ba:	f000 fb17 	bl	8000eec <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008be:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80008c2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008d0:	230a      	movs	r3, #10
 80008d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	481a      	ldr	r0, [pc, #104]	@ (8000944 <MX_GPIO_Init+0x234>)
 80008dc:	f000 fb06 	bl	8000eec <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008e4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4813      	ldr	r0, [pc, #76]	@ (8000944 <MX_GPIO_Init+0x234>)
 80008f6:	f000 faf9 	bl	8000eec <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008fa:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80008fe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800090c:	230b      	movs	r3, #11
 800090e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4809      	ldr	r0, [pc, #36]	@ (800093c <MX_GPIO_Init+0x22c>)
 8000918:	f000 fae8 	bl	8000eec <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2107      	movs	r1, #7
 8000920:	2028      	movs	r0, #40	@ 0x28
 8000922:	f000 fab9 	bl	8000e98 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000926:	2028      	movs	r0, #40	@ 0x28
 8000928:	f000 fad2 	bl	8000ed0 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800092c:	bf00      	nop
 800092e:	3730      	adds	r7, #48	@ 0x30
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40020400 	.word	0x40020400
 800093c:	40021800 	.word	0x40021800
 8000940:	40020800 	.word	0x40020800
 8000944:	40020000 	.word	0x40020000
 8000948:	40020c00 	.word	0x40020c00

0800094c <switch_priority>:

/* USER CODE BEGIN 4 */
void switch_priority(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
	UBaseType_t p1, p2;
	xTaskHandle t1,t2,curr;

	BaseType_t switch_priority = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]

	portENTER_CRITICAL();
 8000956:	f004 f895 	bl	8004a84 <vPortEnterCritical>
	if (status_button)
 800095a:	4b1e      	ldr	r3, [pc, #120]	@ (80009d4 <switch_priority+0x88>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d004      	beq.n	800096c <switch_priority+0x20>
	{
		status_button = 0;
 8000962:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <switch_priority+0x88>)
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
		switch_priority = 1;
 8000968:	2301      	movs	r3, #1
 800096a:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 800096c:	f004 f8c0 	bl	8004af0 <vPortExitCritical>

	if (switch_priority)
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d02a      	beq.n	80009cc <switch_priority+0x80>
	{
		t1 = xTaskGetHandle("G_Task");
 8000976:	4818      	ldr	r0, [pc, #96]	@ (80009d8 <switch_priority+0x8c>)
 8000978:	f002 fe4a 	bl	8003610 <xTaskGetHandle>
 800097c:	6138      	str	r0, [r7, #16]
		t2 = xTaskGetHandle("R_Task");
 800097e:	4817      	ldr	r0, [pc, #92]	@ (80009dc <switch_priority+0x90>)
 8000980:	f002 fe46 	bl	8003610 <xTaskGetHandle>
 8000984:	60f8      	str	r0, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 8000986:	6938      	ldr	r0, [r7, #16]
 8000988:	f002 fad8 	bl	8002f3c <uxTaskPriorityGet>
 800098c:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f002 fad4 	bl	8002f3c <uxTaskPriorityGet>
 8000994:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 8000996:	f003 fadd 	bl	8003f54 <xTaskGetCurrentTaskHandle>
 800099a:	6038      	str	r0, [r7, #0]

		if (curr == t1)
 800099c:	683a      	ldr	r2, [r7, #0]
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d107      	bne.n	80009b4 <switch_priority+0x68>
		{
			vTaskPrioritySet(t1, p2);
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	6938      	ldr	r0, [r7, #16]
 80009a8:	f002 fae6 	bl	8002f78 <vTaskPrioritySet>
			vTaskPrioritySet(t2, p1);
 80009ac:	68b9      	ldr	r1, [r7, #8]
 80009ae:	68f8      	ldr	r0, [r7, #12]
 80009b0:	f002 fae2 	bl	8002f78 <vTaskPrioritySet>
		}

		if (curr == t2)
 80009b4:	683a      	ldr	r2, [r7, #0]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d107      	bne.n	80009cc <switch_priority+0x80>
		{
			vTaskPrioritySet(t2, p1);
 80009bc:	68b9      	ldr	r1, [r7, #8]
 80009be:	68f8      	ldr	r0, [r7, #12]
 80009c0:	f002 fada 	bl	8002f78 <vTaskPrioritySet>
			vTaskPrioritySet(t1, p2);
 80009c4:	6879      	ldr	r1, [r7, #4]
 80009c6:	6938      	ldr	r0, [r7, #16]
 80009c8:	f002 fad6 	bl	8002f78 <vTaskPrioritySet>

		}
	}
}
 80009cc:	bf00      	nop
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000038 	.word	0x20000038
 80009d8:	08007464 	.word	0x08007464
 80009dc:	0800746c 	.word	0x0800746c

080009e0 <button_interrupt_handler>:

void button_interrupt_handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 80009e4:	f006 f918 	bl	8006c18 <SEGGER_SYSVIEW_RecordEnterISR>
	status_button = 1;
 80009e8:	4b03      	ldr	r3, [pc, #12]	@ (80009f8 <button_interrupt_handler+0x18>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	601a      	str	r2, [r3, #0]
	traceISR_EXIT();
 80009ee:	f006 f955 	bl	8006c9c <SEGGER_SYSVIEW_RecordExitISR>
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000038 	.word	0x20000038

080009fc <led_red_handler>:


static void led_red_handler(void* parameters)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <led_red_handler+0x20>)
 8000a08:	f000 fc35 	bl	8001276 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000a0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a10:	f000 f966 	bl	8000ce0 <HAL_Delay>
		switch_priority();
 8000a14:	f7ff ff9a 	bl	800094c <switch_priority>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a18:	bf00      	nop
 8000a1a:	e7f3      	b.n	8000a04 <led_red_handler+0x8>
 8000a1c:	40020400 	.word	0x40020400

08000a20 <led_green_handler>:
	}
}

static void led_green_handler(void* parameters)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000a28:	2101      	movs	r1, #1
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <led_green_handler+0x20>)
 8000a2c:	f000 fc23 	bl	8001276 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000a30:	2064      	movs	r0, #100	@ 0x64
 8000a32:	f000 f955 	bl	8000ce0 <HAL_Delay>
		switch_priority();
 8000a36:	f7ff ff89 	bl	800094c <switch_priority>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000a3a:	bf00      	nop
 8000a3c:	e7f4      	b.n	8000a28 <led_green_handler+0x8>
 8000a3e:	bf00      	nop
 8000a40:	40020400 	.word	0x40020400

08000a44 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a04      	ldr	r2, [pc, #16]	@ (8000a64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d101      	bne.n	8000a5a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000a56:	f000 f923 	bl	8000ca0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40001000 	.word	0x40001000

08000a68 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <Error_Handler+0x8>

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <HAL_MspInit+0x44>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab8 <HAL_MspInit+0x44>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a86:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <HAL_MspInit+0x44>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <HAL_MspInit+0x44>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a96:	4a08      	ldr	r2, [pc, #32]	@ (8000ab8 <HAL_MspInit+0x44>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_MspInit+0x44>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	@ 0x38
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000acc:	4b33      	ldr	r3, [pc, #204]	@ (8000b9c <HAL_InitTick+0xe0>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad0:	4a32      	ldr	r2, [pc, #200]	@ (8000b9c <HAL_InitTick+0xe0>)
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad8:	4b30      	ldr	r3, [pc, #192]	@ (8000b9c <HAL_InitTick+0xe0>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000adc:	f003 0310 	and.w	r3, r3, #16
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae4:	f107 0210 	add.w	r2, r7, #16
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 f8be 	bl	8001c70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d103      	bne.n	8000b06 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000afe:	f001 f8a3 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 8000b02:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b04:	e004      	b.n	8000b10 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b06:	f001 f89f 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b12:	4a23      	ldr	r2, [pc, #140]	@ (8000ba0 <HAL_InitTick+0xe4>)
 8000b14:	fba2 2303 	umull	r2, r3, r2, r3
 8000b18:	0c9b      	lsrs	r3, r3, #18
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ba4 <HAL_InitTick+0xe8>)
 8000b20:	4a21      	ldr	r2, [pc, #132]	@ (8000ba8 <HAL_InitTick+0xec>)
 8000b22:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <HAL_InitTick+0xe8>)
 8000b26:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b2a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba4 <HAL_InitTick+0xe8>)
 8000b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b30:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <HAL_InitTick+0xe8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba4 <HAL_InitTick+0xe8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <HAL_InitTick+0xe8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b44:	4817      	ldr	r0, [pc, #92]	@ (8000ba4 <HAL_InitTick+0xe8>)
 8000b46:	f001 f8c5 	bl	8001cd4 <HAL_TIM_Base_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d11b      	bne.n	8000b90 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b58:	4812      	ldr	r0, [pc, #72]	@ (8000ba4 <HAL_InitTick+0xe8>)
 8000b5a:	f001 f91d 	bl	8001d98 <HAL_TIM_Base_Start_IT>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d111      	bne.n	8000b90 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b6c:	2036      	movs	r0, #54	@ 0x36
 8000b6e:	f000 f9af 	bl	8000ed0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b0f      	cmp	r3, #15
 8000b76:	d808      	bhi.n	8000b8a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	2036      	movs	r0, #54	@ 0x36
 8000b7e:	f000 f98b 	bl	8000e98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b82:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <HAL_InitTick+0xf0>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6013      	str	r3, [r2, #0]
 8000b88:	e002      	b.n	8000b90 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3738      	adds	r7, #56	@ 0x38
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	431bde83 	.word	0x431bde83
 8000ba4:	20000044 	.word	0x20000044
 8000ba8:	40001000 	.word	0x40001000
 8000bac:	20000004 	.word	0x20000004

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	button_interrupt_handler();
 8000bea:	f7ff fef9 	bl	80009e0 <button_interrupt_handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000bee:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000bf2:	f000 fb5b 	bl	80012ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c00:	4802      	ldr	r0, [pc, #8]	@ (8000c0c <TIM6_DAC_IRQHandler+0x10>)
 8000c02:	f001 f941 	bl	8001e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000044 	.word	0x20000044

08000c10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <SystemInit+0x20>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c1a:	4a05      	ldr	r2, [pc, #20]	@ (8000c30 <SystemInit+0x20>)
 8000c1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c38:	f7ff ffea 	bl	8000c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c3c:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c3e:	490d      	ldr	r1, [pc, #52]	@ (8000c74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c40:	4a0d      	ldr	r2, [pc, #52]	@ (8000c78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c54:	4c0a      	ldr	r4, [pc, #40]	@ (8000c80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c62:	f006 fbc1 	bl	80073e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c66:	f7ff fcb5 	bl	80005d4 <main>
  bx  lr    
 8000c6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c6c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c78:	080075b0 	.word	0x080075b0
  ldr r2, =_sbss
 8000c7c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c80:	2000c4b8 	.word	0x2000c4b8

08000c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC_IRQHandler>

08000c86 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8a:	2003      	movs	r0, #3
 8000c8c:	f000 f8f9 	bl	8000e82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c90:	200f      	movs	r0, #15
 8000c92:	f7ff ff13 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c96:	f7ff feed 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <HAL_IncTick+0x20>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <HAL_IncTick+0x24>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a04      	ldr	r2, [pc, #16]	@ (8000cc4 <HAL_IncTick+0x24>)
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000090 	.word	0x20000090

08000cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	@ (8000cdc <HAL_GetTick+0x14>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000090 	.word	0x20000090

08000ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce8:	f7ff ffee 	bl	8000cc8 <HAL_GetTick>
 8000cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf8:	d005      	beq.n	8000d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <HAL_Delay+0x44>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4413      	add	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d06:	bf00      	nop
 8000d08:	f7ff ffde 	bl	8000cc8 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d8f7      	bhi.n	8000d08 <HAL_Delay+0x28>
  {
  }
}
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000008 	.word	0x20000008

08000d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d38:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <__NVIC_SetPriorityGrouping+0x40>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	4313      	orrs	r3, r2
 8000d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d56:	4a04      	ldr	r2, [pc, #16]	@ (8000d68 <__NVIC_SetPriorityGrouping+0x40>)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	60d3      	str	r3, [r2, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00
 8000d6c:	05fa0000 	.word	0x05fa0000

08000d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <__NVIC_GetPriorityGrouping+0x18>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	f003 0307 	and.w	r3, r3, #7
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	db0b      	blt.n	8000db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 021f 	and.w	r2, r3, #31
 8000da4:	4907      	ldr	r1, [pc, #28]	@ (8000dc4 <__NVIC_EnableIRQ+0x38>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	2001      	movs	r0, #1
 8000dae:	fa00 f202 	lsl.w	r2, r0, r2
 8000db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	@ (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	@ (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	@ 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
         );
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	@ 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ff4c 	bl	8000d28 <__NVIC_SetPriorityGrouping>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eaa:	f7ff ff61 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000eae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	6978      	ldr	r0, [r7, #20]
 8000eb6:	f7ff ffb1 	bl	8000e1c <NVIC_EncodePriority>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff80 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000ec8:	bf00      	nop
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff54 	bl	8000d8c <__NVIC_EnableIRQ>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	@ 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	e175      	b.n	80011f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	f040 8164 	bne.w	80011f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d005      	beq.n	8000f42 <HAL_GPIO_Init+0x56>
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d130      	bne.n	8000fa4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	091b      	lsrs	r3, r3, #4
 8000f8e:	f003 0201 	and.w	r2, r3, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d017      	beq.n	8000fe0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d123      	bne.n	8001034 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	220f      	movs	r2, #15
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	691a      	ldr	r2, [r3, #16]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3208      	adds	r2, #8
 800102e:	69b9      	ldr	r1, [r7, #24]
 8001030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0203 	and.w	r2, r3, #3
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80be 	beq.w	80011f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	4b66      	ldr	r3, [pc, #408]	@ (8001210 <HAL_GPIO_Init+0x324>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107a:	4a65      	ldr	r2, [pc, #404]	@ (8001210 <HAL_GPIO_Init+0x324>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001080:	6453      	str	r3, [r2, #68]	@ 0x44
 8001082:	4b63      	ldr	r3, [pc, #396]	@ (8001210 <HAL_GPIO_Init+0x324>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800108e:	4a61      	ldr	r2, [pc, #388]	@ (8001214 <HAL_GPIO_Init+0x328>)
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	220f      	movs	r2, #15
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a58      	ldr	r2, [pc, #352]	@ (8001218 <HAL_GPIO_Init+0x32c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d037      	beq.n	800112a <HAL_GPIO_Init+0x23e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a57      	ldr	r2, [pc, #348]	@ (800121c <HAL_GPIO_Init+0x330>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d031      	beq.n	8001126 <HAL_GPIO_Init+0x23a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a56      	ldr	r2, [pc, #344]	@ (8001220 <HAL_GPIO_Init+0x334>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d02b      	beq.n	8001122 <HAL_GPIO_Init+0x236>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a55      	ldr	r2, [pc, #340]	@ (8001224 <HAL_GPIO_Init+0x338>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d025      	beq.n	800111e <HAL_GPIO_Init+0x232>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a54      	ldr	r2, [pc, #336]	@ (8001228 <HAL_GPIO_Init+0x33c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d01f      	beq.n	800111a <HAL_GPIO_Init+0x22e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a53      	ldr	r2, [pc, #332]	@ (800122c <HAL_GPIO_Init+0x340>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d019      	beq.n	8001116 <HAL_GPIO_Init+0x22a>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a52      	ldr	r2, [pc, #328]	@ (8001230 <HAL_GPIO_Init+0x344>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d013      	beq.n	8001112 <HAL_GPIO_Init+0x226>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a51      	ldr	r2, [pc, #324]	@ (8001234 <HAL_GPIO_Init+0x348>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00d      	beq.n	800110e <HAL_GPIO_Init+0x222>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a50      	ldr	r2, [pc, #320]	@ (8001238 <HAL_GPIO_Init+0x34c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d007      	beq.n	800110a <HAL_GPIO_Init+0x21e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4f      	ldr	r2, [pc, #316]	@ (800123c <HAL_GPIO_Init+0x350>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d101      	bne.n	8001106 <HAL_GPIO_Init+0x21a>
 8001102:	2309      	movs	r3, #9
 8001104:	e012      	b.n	800112c <HAL_GPIO_Init+0x240>
 8001106:	230a      	movs	r3, #10
 8001108:	e010      	b.n	800112c <HAL_GPIO_Init+0x240>
 800110a:	2308      	movs	r3, #8
 800110c:	e00e      	b.n	800112c <HAL_GPIO_Init+0x240>
 800110e:	2307      	movs	r3, #7
 8001110:	e00c      	b.n	800112c <HAL_GPIO_Init+0x240>
 8001112:	2306      	movs	r3, #6
 8001114:	e00a      	b.n	800112c <HAL_GPIO_Init+0x240>
 8001116:	2305      	movs	r3, #5
 8001118:	e008      	b.n	800112c <HAL_GPIO_Init+0x240>
 800111a:	2304      	movs	r3, #4
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x240>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x240>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x240>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x240>
 800112a:	2300      	movs	r3, #0
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	f002 0203 	and.w	r2, r2, #3
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4093      	lsls	r3, r2
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800113c:	4935      	ldr	r1, [pc, #212]	@ (8001214 <HAL_GPIO_Init+0x328>)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114a:	4b3d      	ldr	r3, [pc, #244]	@ (8001240 <HAL_GPIO_Init+0x354>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800116e:	4a34      	ldr	r2, [pc, #208]	@ (8001240 <HAL_GPIO_Init+0x354>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001174:	4b32      	ldr	r3, [pc, #200]	@ (8001240 <HAL_GPIO_Init+0x354>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001198:	4a29      	ldr	r2, [pc, #164]	@ (8001240 <HAL_GPIO_Init+0x354>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800119e:	4b28      	ldr	r3, [pc, #160]	@ (8001240 <HAL_GPIO_Init+0x354>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001240 <HAL_GPIO_Init+0x354>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <HAL_GPIO_Init+0x354>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ec:	4a14      	ldr	r2, [pc, #80]	@ (8001240 <HAL_GPIO_Init+0x354>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b0f      	cmp	r3, #15
 80011fc:	f67f ae86 	bls.w	8000f0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3724      	adds	r7, #36	@ 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40013800 	.word	0x40013800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40020800 	.word	0x40020800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40021000 	.word	0x40021000
 800122c:	40021400 	.word	0x40021400
 8001230:	40021800 	.word	0x40021800
 8001234:	40021c00 	.word	0x40021c00
 8001238:	40022000 	.word	0x40022000
 800123c:	40022400 	.word	0x40022400
 8001240:	40013c00 	.word	0x40013c00

08001244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
 8001250:	4613      	mov	r3, r2
 8001252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001254:	787b      	ldrb	r3, [r7, #1]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001260:	e003      	b.n	800126a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	041a      	lsls	r2, r3, #16
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	619a      	str	r2, [r3, #24]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001276:	b480      	push	{r7}
 8001278:	b085      	sub	sp, #20
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	460b      	mov	r3, r1
 8001280:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001288:	887a      	ldrh	r2, [r7, #2]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4013      	ands	r3, r2
 800128e:	041a      	lsls	r2, r3, #16
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43d9      	mvns	r1, r3
 8001294:	887b      	ldrh	r3, [r7, #2]
 8001296:	400b      	ands	r3, r1
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	619a      	str	r2, [r3, #24]
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012b6:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b8:	695a      	ldr	r2, [r3, #20]
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	4013      	ands	r3, r2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d006      	beq.n	80012d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012c2:	4a05      	ldr	r2, [pc, #20]	@ (80012d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f806 	bl	80012dc <HAL_GPIO_EXTI_Callback>
  }
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40013c00 	.word	0x40013c00

080012dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80012fc:	2300      	movs	r3, #0
 80012fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e29b      	b.n	8001842 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8087 	beq.w	8001426 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001318:	4b96      	ldr	r3, [pc, #600]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 030c 	and.w	r3, r3, #12
 8001320:	2b04      	cmp	r3, #4
 8001322:	d00c      	beq.n	800133e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001324:	4b93      	ldr	r3, [pc, #588]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	2b08      	cmp	r3, #8
 800132e:	d112      	bne.n	8001356 <HAL_RCC_OscConfig+0x62>
 8001330:	4b90      	ldr	r3, [pc, #576]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001338:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800133c:	d10b      	bne.n	8001356 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133e:	4b8d      	ldr	r3, [pc, #564]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d06c      	beq.n	8001424 <HAL_RCC_OscConfig+0x130>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d168      	bne.n	8001424 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e275      	b.n	8001842 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800135e:	d106      	bne.n	800136e <HAL_RCC_OscConfig+0x7a>
 8001360:	4b84      	ldr	r3, [pc, #528]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a83      	ldr	r2, [pc, #524]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 8001366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	e02e      	b.n	80013cc <HAL_RCC_OscConfig+0xd8>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10c      	bne.n	8001390 <HAL_RCC_OscConfig+0x9c>
 8001376:	4b7f      	ldr	r3, [pc, #508]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a7e      	ldr	r2, [pc, #504]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 800137c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	4b7c      	ldr	r3, [pc, #496]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a7b      	ldr	r2, [pc, #492]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 8001388:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	e01d      	b.n	80013cc <HAL_RCC_OscConfig+0xd8>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001398:	d10c      	bne.n	80013b4 <HAL_RCC_OscConfig+0xc0>
 800139a:	4b76      	ldr	r3, [pc, #472]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a75      	ldr	r2, [pc, #468]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 80013a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	4b73      	ldr	r3, [pc, #460]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a72      	ldr	r2, [pc, #456]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 80013ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e00b      	b.n	80013cc <HAL_RCC_OscConfig+0xd8>
 80013b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a6e      	ldr	r2, [pc, #440]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 80013ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a6b      	ldr	r2, [pc, #428]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 80013c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d013      	beq.n	80013fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d4:	f7ff fc78 	bl	8000cc8 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fc74 	bl	8000cc8 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	@ 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e229      	b.n	8001842 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ee:	4b61      	ldr	r3, [pc, #388]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0xe8>
 80013fa:	e014      	b.n	8001426 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff fc64 	bl	8000cc8 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001404:	f7ff fc60 	bl	8000cc8 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	@ 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e215      	b.n	8001842 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001416:	4b57      	ldr	r3, [pc, #348]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x110>
 8001422:	e000      	b.n	8001426 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d069      	beq.n	8001506 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001432:	4b50      	ldr	r3, [pc, #320]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00b      	beq.n	8001456 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800143e:	4b4d      	ldr	r3, [pc, #308]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b08      	cmp	r3, #8
 8001448:	d11c      	bne.n	8001484 <HAL_RCC_OscConfig+0x190>
 800144a:	4b4a      	ldr	r3, [pc, #296]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d116      	bne.n	8001484 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001456:	4b47      	ldr	r3, [pc, #284]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <HAL_RCC_OscConfig+0x17a>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d001      	beq.n	800146e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e1e9      	b.n	8001842 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146e:	4b41      	ldr	r3, [pc, #260]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	493d      	ldr	r1, [pc, #244]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001482:	e040      	b.n	8001506 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d023      	beq.n	80014d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800148c:	4b39      	ldr	r3, [pc, #228]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a38      	ldr	r2, [pc, #224]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fc16 	bl	8000cc8 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fc12 	bl	8000cc8 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e1c7      	b.n	8001842 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b2:	4b30      	ldr	r3, [pc, #192]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014be:	4b2d      	ldr	r3, [pc, #180]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4929      	ldr	r1, [pc, #164]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	600b      	str	r3, [r1, #0]
 80014d2:	e018      	b.n	8001506 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d4:	4b27      	ldr	r3, [pc, #156]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a26      	ldr	r2, [pc, #152]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 80014da:	f023 0301 	bic.w	r3, r3, #1
 80014de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fbf2 	bl	8000cc8 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e8:	f7ff fbee 	bl	8000cc8 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e1a3      	b.n	8001842 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d038      	beq.n	8001584 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d019      	beq.n	800154e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151a:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 800151c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800151e:	4a15      	ldr	r2, [pc, #84]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001526:	f7ff fbcf 	bl	8000cc8 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152e:	f7ff fbcb 	bl	8000cc8 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e180      	b.n	8001842 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 8001542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x23a>
 800154c:	e01a      	b.n	8001584 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 8001550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001552:	4a08      	ldr	r2, [pc, #32]	@ (8001574 <HAL_RCC_OscConfig+0x280>)
 8001554:	f023 0301 	bic.w	r3, r3, #1
 8001558:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155a:	f7ff fbb5 	bl	8000cc8 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001560:	e00a      	b.n	8001578 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001562:	f7ff fbb1 	bl	8000cc8 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d903      	bls.n	8001578 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e166      	b.n	8001842 <HAL_RCC_OscConfig+0x54e>
 8001574:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001578:	4b92      	ldr	r3, [pc, #584]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 800157a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1ee      	bne.n	8001562 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 80a4 	beq.w	80016da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001592:	4b8c      	ldr	r3, [pc, #560]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10d      	bne.n	80015ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	4b89      	ldr	r3, [pc, #548]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	4a88      	ldr	r2, [pc, #544]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015aa:	4b86      	ldr	r3, [pc, #536]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015b6:	2301      	movs	r3, #1
 80015b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ba:	4b83      	ldr	r3, [pc, #524]	@ (80017c8 <HAL_RCC_OscConfig+0x4d4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d118      	bne.n	80015f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80015c6:	4b80      	ldr	r3, [pc, #512]	@ (80017c8 <HAL_RCC_OscConfig+0x4d4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a7f      	ldr	r2, [pc, #508]	@ (80017c8 <HAL_RCC_OscConfig+0x4d4>)
 80015cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015d2:	f7ff fb79 	bl	8000cc8 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015da:	f7ff fb75 	bl	8000cc8 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b64      	cmp	r3, #100	@ 0x64
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e12a      	b.n	8001842 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ec:	4b76      	ldr	r3, [pc, #472]	@ (80017c8 <HAL_RCC_OscConfig+0x4d4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f0      	beq.n	80015da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d106      	bne.n	800160e <HAL_RCC_OscConfig+0x31a>
 8001600:	4b70      	ldr	r3, [pc, #448]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 8001602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001604:	4a6f      	ldr	r2, [pc, #444]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6713      	str	r3, [r2, #112]	@ 0x70
 800160c:	e02d      	b.n	800166a <HAL_RCC_OscConfig+0x376>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10c      	bne.n	8001630 <HAL_RCC_OscConfig+0x33c>
 8001616:	4b6b      	ldr	r3, [pc, #428]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 8001618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161a:	4a6a      	ldr	r2, [pc, #424]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 800161c:	f023 0301 	bic.w	r3, r3, #1
 8001620:	6713      	str	r3, [r2, #112]	@ 0x70
 8001622:	4b68      	ldr	r3, [pc, #416]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 8001624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001626:	4a67      	ldr	r2, [pc, #412]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 8001628:	f023 0304 	bic.w	r3, r3, #4
 800162c:	6713      	str	r3, [r2, #112]	@ 0x70
 800162e:	e01c      	b.n	800166a <HAL_RCC_OscConfig+0x376>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b05      	cmp	r3, #5
 8001636:	d10c      	bne.n	8001652 <HAL_RCC_OscConfig+0x35e>
 8001638:	4b62      	ldr	r3, [pc, #392]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800163c:	4a61      	ldr	r2, [pc, #388]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	6713      	str	r3, [r2, #112]	@ 0x70
 8001644:	4b5f      	ldr	r3, [pc, #380]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 8001646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001648:	4a5e      	ldr	r2, [pc, #376]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001650:	e00b      	b.n	800166a <HAL_RCC_OscConfig+0x376>
 8001652:	4b5c      	ldr	r3, [pc, #368]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 8001654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001656:	4a5b      	ldr	r2, [pc, #364]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	6713      	str	r3, [r2, #112]	@ 0x70
 800165e:	4b59      	ldr	r3, [pc, #356]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001662:	4a58      	ldr	r2, [pc, #352]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 8001664:	f023 0304 	bic.w	r3, r3, #4
 8001668:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d015      	beq.n	800169e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001672:	f7ff fb29 	bl	8000cc8 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001678:	e00a      	b.n	8001690 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167a:	f7ff fb25 	bl	8000cc8 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001688:	4293      	cmp	r3, r2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e0d8      	b.n	8001842 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001690:	4b4c      	ldr	r3, [pc, #304]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 8001692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0ee      	beq.n	800167a <HAL_RCC_OscConfig+0x386>
 800169c:	e014      	b.n	80016c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169e:	f7ff fb13 	bl	8000cc8 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7ff fb0f 	bl	8000cc8 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e0c2      	b.n	8001842 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016bc:	4b41      	ldr	r3, [pc, #260]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1ee      	bne.n	80016a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d105      	bne.n	80016da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ce:	4b3d      	ldr	r3, [pc, #244]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	4a3c      	ldr	r2, [pc, #240]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 80016d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80ae 	beq.w	8001840 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e4:	4b37      	ldr	r3, [pc, #220]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d06d      	beq.n	80017cc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d14b      	bne.n	8001790 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f8:	4b32      	ldr	r3, [pc, #200]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a31      	ldr	r2, [pc, #196]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 80016fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff fae0 	bl	8000cc8 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff fadc 	bl	8000cc8 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e091      	b.n	8001842 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171e:	4b29      	ldr	r3, [pc, #164]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69da      	ldr	r2, [r3, #28]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001738:	019b      	lsls	r3, r3, #6
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001740:	085b      	lsrs	r3, r3, #1
 8001742:	3b01      	subs	r3, #1
 8001744:	041b      	lsls	r3, r3, #16
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174c:	061b      	lsls	r3, r3, #24
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001754:	071b      	lsls	r3, r3, #28
 8001756:	491b      	ldr	r1, [pc, #108]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800175c:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a18      	ldr	r2, [pc, #96]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 8001762:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff faae 	bl	8000cc8 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001770:	f7ff faaa 	bl	8000cc8 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e05f      	b.n	8001842 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001782:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x47c>
 800178e:	e057      	b.n	8001840 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0b      	ldr	r2, [pc, #44]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 8001796:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800179a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff fa94 	bl	8000cc8 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a4:	f7ff fa90 	bl	8000cc8 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e045      	b.n	8001842 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b6:	4b03      	ldr	r3, [pc, #12]	@ (80017c4 <HAL_RCC_OscConfig+0x4d0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4b0>
 80017c2:	e03d      	b.n	8001840 <HAL_RCC_OscConfig+0x54c>
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80017cc:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <HAL_RCC_OscConfig+0x558>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d030      	beq.n	800183c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d129      	bne.n	800183c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d122      	bne.n	800183c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80017fc:	4013      	ands	r3, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001802:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001804:	4293      	cmp	r3, r2
 8001806:	d119      	bne.n	800183c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001812:	085b      	lsrs	r3, r3, #1
 8001814:	3b01      	subs	r3, #1
 8001816:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001818:	429a      	cmp	r2, r3
 800181a:	d10f      	bne.n	800183c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001826:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001828:	429a      	cmp	r2, r3
 800182a:	d107      	bne.n	800183c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800

08001850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0d0      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001868:	4b6a      	ldr	r3, [pc, #424]	@ (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 030f 	and.w	r3, r3, #15
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d910      	bls.n	8001898 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001876:	4b67      	ldr	r3, [pc, #412]	@ (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 020f 	bic.w	r2, r3, #15
 800187e:	4965      	ldr	r1, [pc, #404]	@ (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b63      	ldr	r3, [pc, #396]	@ (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0b8      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d020      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b0:	4b59      	ldr	r3, [pc, #356]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	4a58      	ldr	r2, [pc, #352]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 80018b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c8:	4b53      	ldr	r3, [pc, #332]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4a52      	ldr	r2, [pc, #328]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 80018ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d4:	4b50      	ldr	r3, [pc, #320]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	494d      	ldr	r1, [pc, #308]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d040      	beq.n	8001974 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b47      	ldr	r3, [pc, #284]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d115      	bne.n	8001932 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e07f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001912:	4b41      	ldr	r3, [pc, #260]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e073      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001922:	4b3d      	ldr	r3, [pc, #244]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e06b      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001932:	4b39      	ldr	r3, [pc, #228]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f023 0203 	bic.w	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4936      	ldr	r1, [pc, #216]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 8001940:	4313      	orrs	r3, r2
 8001942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001944:	f7ff f9c0 	bl	8000cc8 <HAL_GetTick>
 8001948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194a:	e00a      	b.n	8001962 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194c:	f7ff f9bc 	bl	8000cc8 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e053      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001962:	4b2d      	ldr	r3, [pc, #180]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 020c 	and.w	r2, r3, #12
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	429a      	cmp	r2, r3
 8001972:	d1eb      	bne.n	800194c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001974:	4b27      	ldr	r3, [pc, #156]	@ (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 030f 	and.w	r3, r3, #15
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d210      	bcs.n	80019a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b24      	ldr	r3, [pc, #144]	@ (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 020f 	bic.w	r2, r3, #15
 800198a:	4922      	ldr	r1, [pc, #136]	@ (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b20      	ldr	r3, [pc, #128]	@ (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e032      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d008      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b0:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4916      	ldr	r1, [pc, #88]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ce:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	490e      	ldr	r1, [pc, #56]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019e2:	f000 f821 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 80019e6:	4602      	mov	r2, r0
 80019e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	490a      	ldr	r1, [pc, #40]	@ (8001a1c <HAL_RCC_ClockConfig+0x1cc>)
 80019f4:	5ccb      	ldrb	r3, [r1, r3]
 80019f6:	fa22 f303 	lsr.w	r3, r2, r3
 80019fa:	4a09      	ldr	r2, [pc, #36]	@ (8001a20 <HAL_RCC_ClockConfig+0x1d0>)
 80019fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019fe:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <HAL_RCC_ClockConfig+0x1d4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff f85a 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023c00 	.word	0x40023c00
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	0800755c 	.word	0x0800755c
 8001a20:	20000000 	.word	0x20000000
 8001a24:	20000004 	.word	0x20000004

08001a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a2c:	b094      	sub	sp, #80	@ 0x50
 8001a2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a34:	2300      	movs	r3, #0
 8001a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a38:	2300      	movs	r3, #0
 8001a3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a40:	4b79      	ldr	r3, [pc, #484]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d00d      	beq.n	8001a68 <HAL_RCC_GetSysClockFreq+0x40>
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	f200 80e1 	bhi.w	8001c14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x34>
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d003      	beq.n	8001a62 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a5a:	e0db      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a5c:	4b73      	ldr	r3, [pc, #460]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a60:	e0db      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a62:	4b72      	ldr	r3, [pc, #456]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a66:	e0d8      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a68:	4b6f      	ldr	r3, [pc, #444]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a70:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a72:	4b6d      	ldr	r3, [pc, #436]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d063      	beq.n	8001b46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7e:	4b6a      	ldr	r3, [pc, #424]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	099b      	lsrs	r3, r3, #6
 8001a84:	2200      	movs	r2, #0
 8001a86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a90:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a92:	2300      	movs	r3, #0
 8001a94:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a9a:	4622      	mov	r2, r4
 8001a9c:	462b      	mov	r3, r5
 8001a9e:	f04f 0000 	mov.w	r0, #0
 8001aa2:	f04f 0100 	mov.w	r1, #0
 8001aa6:	0159      	lsls	r1, r3, #5
 8001aa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aac:	0150      	lsls	r0, r2, #5
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4621      	mov	r1, r4
 8001ab4:	1a51      	subs	r1, r2, r1
 8001ab6:	6139      	str	r1, [r7, #16]
 8001ab8:	4629      	mov	r1, r5
 8001aba:	eb63 0301 	sbc.w	r3, r3, r1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001acc:	4659      	mov	r1, fp
 8001ace:	018b      	lsls	r3, r1, #6
 8001ad0:	4651      	mov	r1, sl
 8001ad2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ad6:	4651      	mov	r1, sl
 8001ad8:	018a      	lsls	r2, r1, #6
 8001ada:	4651      	mov	r1, sl
 8001adc:	ebb2 0801 	subs.w	r8, r2, r1
 8001ae0:	4659      	mov	r1, fp
 8001ae2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001afa:	4690      	mov	r8, r2
 8001afc:	4699      	mov	r9, r3
 8001afe:	4623      	mov	r3, r4
 8001b00:	eb18 0303 	adds.w	r3, r8, r3
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	462b      	mov	r3, r5
 8001b08:	eb49 0303 	adc.w	r3, r9, r3
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	028b      	lsls	r3, r1, #10
 8001b1e:	4621      	mov	r1, r4
 8001b20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b24:	4621      	mov	r1, r4
 8001b26:	028a      	lsls	r2, r1, #10
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b2e:	2200      	movs	r2, #0
 8001b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b38:	f7fe fbd4 	bl	80002e4 <__aeabi_uldivmod>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4613      	mov	r3, r2
 8001b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b44:	e058      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b46:	4b38      	ldr	r3, [pc, #224]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	099b      	lsrs	r3, r3, #6
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	4611      	mov	r1, r2
 8001b52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b56:	623b      	str	r3, [r7, #32]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b60:	4642      	mov	r2, r8
 8001b62:	464b      	mov	r3, r9
 8001b64:	f04f 0000 	mov.w	r0, #0
 8001b68:	f04f 0100 	mov.w	r1, #0
 8001b6c:	0159      	lsls	r1, r3, #5
 8001b6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b72:	0150      	lsls	r0, r2, #5
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4641      	mov	r1, r8
 8001b7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b7e:	4649      	mov	r1, r9
 8001b80:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b98:	ebb2 040a 	subs.w	r4, r2, sl
 8001b9c:	eb63 050b 	sbc.w	r5, r3, fp
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	00eb      	lsls	r3, r5, #3
 8001baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bae:	00e2      	lsls	r2, r4, #3
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	461d      	mov	r5, r3
 8001bb4:	4643      	mov	r3, r8
 8001bb6:	18e3      	adds	r3, r4, r3
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	464b      	mov	r3, r9
 8001bbc:	eb45 0303 	adc.w	r3, r5, r3
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bce:	4629      	mov	r1, r5
 8001bd0:	028b      	lsls	r3, r1, #10
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bd8:	4621      	mov	r1, r4
 8001bda:	028a      	lsls	r2, r1, #10
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001be2:	2200      	movs	r2, #0
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	61fa      	str	r2, [r7, #28]
 8001be8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bec:	f7fe fb7a 	bl	80002e4 <__aeabi_uldivmod>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	0c1b      	lsrs	r3, r3, #16
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	3301      	adds	r3, #1
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c12:	e002      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c14:	4b05      	ldr	r3, [pc, #20]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3750      	adds	r7, #80	@ 0x50
 8001c20:	46bd      	mov	sp, r7
 8001c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	00f42400 	.word	0x00f42400

08001c30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c34:	4b03      	ldr	r3, [pc, #12]	@ (8001c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000000 	.word	0x20000000

08001c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c4c:	f7ff fff0 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	0a9b      	lsrs	r3, r3, #10
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4903      	ldr	r1, [pc, #12]	@ (8001c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	0800756c 	.word	0x0800756c

08001c70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0203 	and.w	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ca4:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	08db      	lsrs	r3, r3, #3
 8001caa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cb2:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <HAL_RCC_GetClockConfig+0x60>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 020f 	and.w	r2, r3, #15
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	601a      	str	r2, [r3, #0]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40023c00 	.word	0x40023c00

08001cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e049      	b.n	8001d7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f841 	bl	8001d82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3304      	adds	r3, #4
 8001d10:	4619      	mov	r1, r3
 8001d12:	4610      	mov	r0, r2
 8001d14:	f000 f9e8 	bl	80020e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d001      	beq.n	8001db0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e054      	b.n	8001e5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a26      	ldr	r2, [pc, #152]	@ (8001e68 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d022      	beq.n	8001e18 <HAL_TIM_Base_Start_IT+0x80>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dda:	d01d      	beq.n	8001e18 <HAL_TIM_Base_Start_IT+0x80>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a22      	ldr	r2, [pc, #136]	@ (8001e6c <HAL_TIM_Base_Start_IT+0xd4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d018      	beq.n	8001e18 <HAL_TIM_Base_Start_IT+0x80>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a21      	ldr	r2, [pc, #132]	@ (8001e70 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d013      	beq.n	8001e18 <HAL_TIM_Base_Start_IT+0x80>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a1f      	ldr	r2, [pc, #124]	@ (8001e74 <HAL_TIM_Base_Start_IT+0xdc>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00e      	beq.n	8001e18 <HAL_TIM_Base_Start_IT+0x80>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8001e78 <HAL_TIM_Base_Start_IT+0xe0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d009      	beq.n	8001e18 <HAL_TIM_Base_Start_IT+0x80>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1c      	ldr	r2, [pc, #112]	@ (8001e7c <HAL_TIM_Base_Start_IT+0xe4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d004      	beq.n	8001e18 <HAL_TIM_Base_Start_IT+0x80>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a1b      	ldr	r2, [pc, #108]	@ (8001e80 <HAL_TIM_Base_Start_IT+0xe8>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d115      	bne.n	8001e44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	4b19      	ldr	r3, [pc, #100]	@ (8001e84 <HAL_TIM_Base_Start_IT+0xec>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d015      	beq.n	8001e56 <HAL_TIM_Base_Start_IT+0xbe>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e30:	d011      	beq.n	8001e56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0201 	orr.w	r2, r2, #1
 8001e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e42:	e008      	b.n	8001e56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	e000      	b.n	8001e58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	40000800 	.word	0x40000800
 8001e74:	40000c00 	.word	0x40000c00
 8001e78:	40010400 	.word	0x40010400
 8001e7c:	40014000 	.word	0x40014000
 8001e80:	40001800 	.word	0x40001800
 8001e84:	00010007 	.word	0x00010007

08001e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d020      	beq.n	8001eec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d01b      	beq.n	8001eec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0202 	mvn.w	r2, #2
 8001ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f8e9 	bl	80020aa <HAL_TIM_IC_CaptureCallback>
 8001ed8:	e005      	b.n	8001ee6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f8db 	bl	8002096 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f8ec 	bl	80020be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d020      	beq.n	8001f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d01b      	beq.n	8001f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0204 	mvn.w	r2, #4
 8001f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8c3 	bl	80020aa <HAL_TIM_IC_CaptureCallback>
 8001f24:	e005      	b.n	8001f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f8b5 	bl	8002096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f8c6 	bl	80020be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d020      	beq.n	8001f84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d01b      	beq.n	8001f84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0208 	mvn.w	r2, #8
 8001f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2204      	movs	r2, #4
 8001f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f89d 	bl	80020aa <HAL_TIM_IC_CaptureCallback>
 8001f70:	e005      	b.n	8001f7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f88f 	bl	8002096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f8a0 	bl	80020be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d020      	beq.n	8001fd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 0310 	and.w	r3, r3, #16
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d01b      	beq.n	8001fd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0210 	mvn.w	r2, #16
 8001fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2208      	movs	r2, #8
 8001fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f877 	bl	80020aa <HAL_TIM_IC_CaptureCallback>
 8001fbc:	e005      	b.n	8001fca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f869 	bl	8002096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f87a 	bl	80020be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00c      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d007      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0201 	mvn.w	r2, #1
 8001fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7fe fd28 	bl	8000a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d104      	bne.n	8002008 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00c      	beq.n	8002022 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800201a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f919 	bl	8002254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00c      	beq.n	8002046 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800203e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f911 	bl	8002268 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00c      	beq.n	800206a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002056:	2b00      	cmp	r3, #0
 8002058:	d007      	beq.n	800206a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f834 	bl	80020d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	f003 0320 	and.w	r3, r3, #32
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00c      	beq.n	800208e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f06f 0220 	mvn.w	r2, #32
 8002086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f8d9 	bl	8002240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a46      	ldr	r2, [pc, #280]	@ (8002214 <TIM_Base_SetConfig+0x12c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d013      	beq.n	8002128 <TIM_Base_SetConfig+0x40>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002106:	d00f      	beq.n	8002128 <TIM_Base_SetConfig+0x40>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a43      	ldr	r2, [pc, #268]	@ (8002218 <TIM_Base_SetConfig+0x130>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d00b      	beq.n	8002128 <TIM_Base_SetConfig+0x40>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a42      	ldr	r2, [pc, #264]	@ (800221c <TIM_Base_SetConfig+0x134>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d007      	beq.n	8002128 <TIM_Base_SetConfig+0x40>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a41      	ldr	r2, [pc, #260]	@ (8002220 <TIM_Base_SetConfig+0x138>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d003      	beq.n	8002128 <TIM_Base_SetConfig+0x40>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a40      	ldr	r2, [pc, #256]	@ (8002224 <TIM_Base_SetConfig+0x13c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d108      	bne.n	800213a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800212e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a35      	ldr	r2, [pc, #212]	@ (8002214 <TIM_Base_SetConfig+0x12c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d02b      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002148:	d027      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a32      	ldr	r2, [pc, #200]	@ (8002218 <TIM_Base_SetConfig+0x130>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d023      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a31      	ldr	r2, [pc, #196]	@ (800221c <TIM_Base_SetConfig+0x134>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d01f      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a30      	ldr	r2, [pc, #192]	@ (8002220 <TIM_Base_SetConfig+0x138>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01b      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a2f      	ldr	r2, [pc, #188]	@ (8002224 <TIM_Base_SetConfig+0x13c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d017      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a2e      	ldr	r2, [pc, #184]	@ (8002228 <TIM_Base_SetConfig+0x140>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d013      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a2d      	ldr	r2, [pc, #180]	@ (800222c <TIM_Base_SetConfig+0x144>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00f      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a2c      	ldr	r2, [pc, #176]	@ (8002230 <TIM_Base_SetConfig+0x148>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00b      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a2b      	ldr	r2, [pc, #172]	@ (8002234 <TIM_Base_SetConfig+0x14c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d007      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a2a      	ldr	r2, [pc, #168]	@ (8002238 <TIM_Base_SetConfig+0x150>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d003      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a29      	ldr	r2, [pc, #164]	@ (800223c <TIM_Base_SetConfig+0x154>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d108      	bne.n	80021ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a10      	ldr	r2, [pc, #64]	@ (8002214 <TIM_Base_SetConfig+0x12c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d003      	beq.n	80021e0 <TIM_Base_SetConfig+0xf8>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a12      	ldr	r2, [pc, #72]	@ (8002224 <TIM_Base_SetConfig+0x13c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d103      	bne.n	80021e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d105      	bne.n	8002206 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f023 0201 	bic.w	r2, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	611a      	str	r2, [r3, #16]
  }
}
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40010000 	.word	0x40010000
 8002218:	40000400 	.word	0x40000400
 800221c:	40000800 	.word	0x40000800
 8002220:	40000c00 	.word	0x40000c00
 8002224:	40010400 	.word	0x40010400
 8002228:	40014000 	.word	0x40014000
 800222c:	40014400 	.word	0x40014400
 8002230:	40014800 	.word	0x40014800
 8002234:	40001800 	.word	0x40001800
 8002238:	40001c00 	.word	0x40001c00
 800223c:	40002000 	.word	0x40002000

08002240 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f103 0208 	add.w	r2, r3, #8
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f04f 32ff 	mov.w	r2, #4294967295
 8002294:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f103 0208 	add.w	r2, r3, #8
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f103 0208 	add.w	r2, r3, #8
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80022b0:	f240 1019 	movw	r0, #281	@ 0x119
 80022b4:	f004 fd2a 	bl	8006d0c <SEGGER_SYSVIEW_RecordEndCall>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80022ce:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80022d2:	f004 fd1b 	bl	8006d0c <SEGGER_SYSVIEW_RecordEndCall>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d103      	bne.n	80022fe <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	e00c      	b.n	8002318 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3308      	adds	r3, #8
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	e002      	b.n	800230c <vListInsert+0x2e>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	429a      	cmp	r2, r3
 8002316:	d2f6      	bcs.n	8002306 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002344:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002348:	f004 fce0 	bl	8006d0c <SEGGER_SYSVIEW_RecordEndCall>
}
 800234c:	bf00      	nop
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6892      	ldr	r2, [r2, #8]
 800236a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6852      	ldr	r2, [r2, #4]
 8002374:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	429a      	cmp	r2, r3
 800237e:	d103      	bne.n	8002388 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	1e5a      	subs	r2, r3, #1
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	f240 101d 	movw	r0, #285	@ 0x11d
 80023a2:	f004 fcef 	bl	8006d84 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80023be:	2301      	movs	r3, #1
 80023c0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10d      	bne.n	80023e8 <xQueueGenericReset+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80023cc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80023d0:	b672      	cpsid	i
 80023d2:	f383 8811 	msr	BASEPRI, r3
 80023d6:	f3bf 8f6f 	isb	sy
 80023da:	f3bf 8f4f 	dsb	sy
 80023de:	b662      	cpsie	i
 80023e0:	60fb      	str	r3, [r7, #12]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80023e2:	bf00      	nop
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d05d      	beq.n	80024aa <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d059      	beq.n	80024aa <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023fe:	2100      	movs	r1, #0
 8002400:	fba3 2302 	umull	r2, r3, r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d000      	beq.n	800240a <xQueueGenericReset+0x56>
 8002408:	2101      	movs	r1, #1
 800240a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800240c:	2b00      	cmp	r3, #0
 800240e:	d14c      	bne.n	80024aa <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 8002410:	f002 fb38 	bl	8004a84 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241c:	6939      	ldr	r1, [r7, #16]
 800241e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	441a      	add	r2, r3
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2200      	movs	r2, #0
 800242e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002440:	3b01      	subs	r3, #1
 8002442:	6939      	ldr	r1, [r7, #16]
 8002444:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	441a      	add	r2, r3
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	22ff      	movs	r2, #255	@ 0xff
 8002454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	22ff      	movs	r2, #255	@ 0xff
 800245c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d114      	bne.n	8002490 <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d01a      	beq.n	80024a4 <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	3310      	adds	r3, #16
 8002472:	4618      	mov	r0, r3
 8002474:	f001 fb46 	bl	8003b04 <xTaskRemoveFromEventList>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d012      	beq.n	80024a4 <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800247e:	4b19      	ldr	r3, [pc, #100]	@ (80024e4 <xQueueGenericReset+0x130>)
 8002480:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	f3bf 8f4f 	dsb	sy
 800248a:	f3bf 8f6f 	isb	sy
 800248e:	e009      	b.n	80024a4 <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	3310      	adds	r3, #16
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fef1 	bl	800227c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	3324      	adds	r3, #36	@ 0x24
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff feec 	bl	800227c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80024a4:	f002 fb24 	bl	8004af0 <vPortExitCritical>
 80024a8:	e001      	b.n	80024ae <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10d      	bne.n	80024d0 <xQueueGenericReset+0x11c>
    __asm volatile
 80024b4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80024b8:	b672      	cpsid	i
 80024ba:	f383 8811 	msr	BASEPRI, r3
 80024be:	f3bf 8f6f 	isb	sy
 80024c2:	f3bf 8f4f 	dsb	sy
 80024c6:	b662      	cpsie	i
 80024c8:	60bb      	str	r3, [r7, #8]
}
 80024ca:	bf00      	nop
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	4619      	mov	r1, r3
 80024d4:	2096      	movs	r0, #150	@ 0x96
 80024d6:	f004 fc55 	bl	8006d84 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80024da:	697b      	ldr	r3, [r7, #20]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	e000ed04 	.word	0xe000ed04

080024e8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	@ 0x28
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	4613      	mov	r3, r2
 80024f4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d02e      	beq.n	800255e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002500:	2100      	movs	r1, #0
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	fba3 2302 	umull	r2, r3, r3, r2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d000      	beq.n	8002510 <xQueueGenericCreate+0x28>
 800250e:	2101      	movs	r1, #1
 8002510:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002512:	2b00      	cmp	r3, #0
 8002514:	d123      	bne.n	800255e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800251e:	f113 0f55 	cmn.w	r3, #85	@ 0x55
 8002522:	d81c      	bhi.n	800255e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	fb02 f303 	mul.w	r3, r2, r3
 800252c:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	3354      	adds	r3, #84	@ 0x54
 8002532:	4618      	mov	r0, r3
 8002534:	f002 fbe2 	bl	8004cfc <pvPortMalloc>
 8002538:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d01f      	beq.n	8002580 <xQueueGenericCreate+0x98>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	3354      	adds	r3, #84	@ 0x54
 8002548:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800254a:	79fa      	ldrb	r2, [r7, #7]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	4613      	mov	r3, r2
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f820 	bl	800259c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800255c:	e010      	b.n	8002580 <xQueueGenericCreate+0x98>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10d      	bne.n	8002580 <xQueueGenericCreate+0x98>
    __asm volatile
 8002564:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002568:	b672      	cpsid	i
 800256a:	f383 8811 	msr	BASEPRI, r3
 800256e:	f3bf 8f6f 	isb	sy
 8002572:	f3bf 8f4f 	dsb	sy
 8002576:	b662      	cpsie	i
 8002578:	613b      	str	r3, [r7, #16]
}
 800257a:	bf00      	nop
 800257c:	bf00      	nop
 800257e:	e7fd      	b.n	800257c <xQueueGenericCreate+0x94>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	4618      	mov	r0, r3
 8002584:	f004 fd98 	bl	80070b8 <SEGGER_SYSVIEW_ShrinkId>
 8002588:	4603      	mov	r3, r0
 800258a:	4619      	mov	r1, r3
 800258c:	2098      	movs	r0, #152	@ 0x98
 800258e:	f004 fbf9 	bl	8006d84 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8002592:	69fb      	ldr	r3, [r7, #28]
    }
 8002594:	4618      	mov	r0, r3
 8002596:	3720      	adds	r7, #32
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d103      	bne.n	80025b8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e002      	b.n	80025be <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025ca:	2101      	movs	r1, #1
 80025cc:	69b8      	ldr	r0, [r7, #24]
 80025ce:	f7ff fef1 	bl	80023b4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
    {
        pxNewQueue->pxQueueSetContainer = NULL;
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	2200      	movs	r2, #0
 80025de:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08c      	sub	sp, #48	@ 0x30
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80025fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10d      	bne.n	800261e <xQueueReceive+0x36>
    __asm volatile
 8002602:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002606:	b672      	cpsid	i
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	b662      	cpsie	i
 8002616:	623b      	str	r3, [r7, #32]
}
 8002618:	bf00      	nop
 800261a:	bf00      	nop
 800261c:	e7fd      	b.n	800261a <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d103      	bne.n	800262c <xQueueReceive+0x44>
 8002624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <xQueueReceive+0x48>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <xQueueReceive+0x4a>
 8002630:	2300      	movs	r3, #0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10d      	bne.n	8002652 <xQueueReceive+0x6a>
    __asm volatile
 8002636:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800263a:	b672      	cpsid	i
 800263c:	f383 8811 	msr	BASEPRI, r3
 8002640:	f3bf 8f6f 	isb	sy
 8002644:	f3bf 8f4f 	dsb	sy
 8002648:	b662      	cpsie	i
 800264a:	61fb      	str	r3, [r7, #28]
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	e7fd      	b.n	800264e <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002652:	f001 fc95 	bl	8003f80 <xTaskGetSchedulerState>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <xQueueReceive+0x7a>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <xQueueReceive+0x7e>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <xQueueReceive+0x80>
 8002666:	2300      	movs	r3, #0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10d      	bne.n	8002688 <xQueueReceive+0xa0>
    __asm volatile
 800266c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002670:	b672      	cpsid	i
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	b662      	cpsie	i
 8002680:	61bb      	str	r3, [r7, #24]
}
 8002682:	bf00      	nop
 8002684:	bf00      	nop
 8002686:	e7fd      	b.n	8002684 <xQueueReceive+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002688:	f002 f9fc 	bl	8004a84 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800268c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002690:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	2b00      	cmp	r3, #0
 8002696:	d023      	beq.n	80026e0 <xQueueReceive+0xf8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800269c:	f000 f902 	bl	80028a4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	1e5a      	subs	r2, r3, #1
 80026a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00f      	beq.n	80026d0 <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b2:	3310      	adds	r3, #16
 80026b4:	4618      	mov	r0, r3
 80026b6:	f001 fa25 	bl	8003b04 <xTaskRemoveFromEventList>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80026c0:	4b42      	ldr	r3, [pc, #264]	@ (80027cc <xQueueReceive+0x1e4>)
 80026c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80026d0:	f002 fa0e 	bl	8004af0 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 80026d4:	2101      	movs	r1, #1
 80026d6:	20a4      	movs	r0, #164	@ 0xa4
 80026d8:	f004 fb54 	bl	8006d84 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80026dc:	2301      	movs	r3, #1
 80026de:	e071      	b.n	80027c4 <xQueueReceive+0x1dc>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d107      	bne.n	80026f6 <xQueueReceive+0x10e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026e6:	f002 fa03 	bl	8004af0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80026ea:	2100      	movs	r1, #0
 80026ec:	20a4      	movs	r0, #164	@ 0xa4
 80026ee:	f004 fb49 	bl	8006d84 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e066      	b.n	80027c4 <xQueueReceive+0x1dc>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d106      	bne.n	800270a <xQueueReceive+0x122>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026fc:	f107 0310 	add.w	r3, r7, #16
 8002700:	4618      	mov	r0, r3
 8002702:	f001 fae1 	bl	8003cc8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002706:	2301      	movs	r3, #1
 8002708:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800270a:	f002 f9f1 	bl	8004af0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800270e:	f000 fdd5 	bl	80032bc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002712:	f002 f9b7 	bl	8004a84 <vPortEnterCritical>
 8002716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002718:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800271c:	b25b      	sxtb	r3, r3
 800271e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002722:	d103      	bne.n	800272c <xQueueReceive+0x144>
 8002724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800272c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800272e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002732:	b25b      	sxtb	r3, r3
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d103      	bne.n	8002742 <xQueueReceive+0x15a>
 800273a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002742:	f002 f9d5 	bl	8004af0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002746:	1d3a      	adds	r2, r7, #4
 8002748:	f107 0310 	add.w	r3, r7, #16
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f001 fad2 	bl	8003cf8 <xTaskCheckForTimeOut>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d123      	bne.n	80027a2 <xQueueReceive+0x1ba>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800275a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800275c:	f000 f927 	bl	80029ae <prvIsQueueEmpty>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d017      	beq.n	8002796 <xQueueReceive+0x1ae>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002768:	3324      	adds	r3, #36	@ 0x24
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f001 f952 	bl	8003a18 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002774:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002776:	f000 f8bb 	bl	80028f0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800277a:	f000 fdad 	bl	80032d8 <xTaskResumeAll>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d181      	bne.n	8002688 <xQueueReceive+0xa0>
                {
                    taskYIELD_WITHIN_API();
 8002784:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <xQueueReceive+0x1e4>)
 8002786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	f3bf 8f6f 	isb	sy
 8002794:	e778      	b.n	8002688 <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002796:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002798:	f000 f8aa 	bl	80028f0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800279c:	f000 fd9c 	bl	80032d8 <xTaskResumeAll>
 80027a0:	e772      	b.n	8002688 <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80027a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027a4:	f000 f8a4 	bl	80028f0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80027a8:	f000 fd96 	bl	80032d8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027ae:	f000 f8fe 	bl	80029ae <prvIsQueueEmpty>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f43f af67 	beq.w	8002688 <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80027ba:	2100      	movs	r1, #0
 80027bc:	20a4      	movs	r0, #164	@ 0xa4
 80027be:	f004 fae1 	bl	8006d84 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80027c2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3730      	adds	r7, #48	@ 0x30
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	e000ed04 	.word	0xe000ed04

080027d0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10d      	bne.n	800280a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d14d      	bne.n	8002892 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 fbe2 	bl	8003fc4 <xTaskPriorityDisinherit>
 8002800:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	e043      	b.n	8002892 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d119      	bne.n	8002844 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6858      	ldr	r0, [r3, #4]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002818:	461a      	mov	r2, r3
 800281a:	68b9      	ldr	r1, [r7, #8]
 800281c:	f004 fe08 	bl	8007430 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002828:	441a      	add	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	429a      	cmp	r2, r3
 8002838:	d32b      	bcc.n	8002892 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	e026      	b.n	8002892 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	68d8      	ldr	r0, [r3, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	461a      	mov	r2, r3
 800284e:	68b9      	ldr	r1, [r7, #8]
 8002850:	f004 fdee 	bl	8007430 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285c:	425b      	negs	r3, r3
 800285e:	441a      	add	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d207      	bcs.n	8002880 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002878:	425b      	negs	r3, r3
 800287a:	441a      	add	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d105      	bne.n	8002892 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	3b01      	subs	r3, #1
 8002890:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800289a:	697b      	ldr	r3, [r7, #20]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d018      	beq.n	80028e8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	441a      	add	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d303      	bcc.n	80028d8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68d9      	ldr	r1, [r3, #12]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e0:	461a      	mov	r2, r3
 80028e2:	6838      	ldr	r0, [r7, #0]
 80028e4:	f004 fda4 	bl	8007430 <memcpy>
    }
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80028f8:	f002 f8c4 	bl	8004a84 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002902:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002904:	e01e      	b.n	8002944 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800290a:	2b00      	cmp	r3, #0
 800290c:	d008      	beq.n	8002920 <prvUnlockQueue+0x30>
                {
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f8ed 	bl	8002aee <prvNotifyQueueSetContainer>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d010      	beq.n	800293c <prvUnlockQueue+0x4c>
                    {
                        /* The queue is a member of a queue set, and posting to
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
 800291a:	f001 fa5d 	bl	8003dd8 <vTaskMissedYield>
 800291e:	e00d      	b.n	800293c <prvUnlockQueue+0x4c>
                else
                {
                    /* Tasks that are removed from the event list will get
                     * added to the pending ready list as the scheduler is still
                     * suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002924:	2b00      	cmp	r3, #0
 8002926:	d012      	beq.n	800294e <prvUnlockQueue+0x5e>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3324      	adds	r3, #36	@ 0x24
 800292c:	4618      	mov	r0, r3
 800292e:	f001 f8e9 	bl	8003b04 <xTaskRemoveFromEventList>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <prvUnlockQueue+0x4c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            vTaskMissedYield();
 8002938:	f001 fa4e 	bl	8003dd8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	3b01      	subs	r3, #1
 8002940:	b2db      	uxtb	r3, r3
 8002942:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002948:	2b00      	cmp	r3, #0
 800294a:	dcdc      	bgt.n	8002906 <prvUnlockQueue+0x16>
 800294c:	e000      	b.n	8002950 <prvUnlockQueue+0x60>
                        break;
 800294e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	22ff      	movs	r2, #255	@ 0xff
 8002954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002958:	f002 f8ca 	bl	8004af0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800295c:	f002 f892 	bl	8004a84 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002966:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002968:	e011      	b.n	800298e <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d012      	beq.n	8002998 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3310      	adds	r3, #16
 8002976:	4618      	mov	r0, r3
 8002978:	f001 f8c4 	bl	8003b04 <xTaskRemoveFromEventList>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 8002982:	f001 fa29 	bl	8003dd8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002986:	7bbb      	ldrb	r3, [r7, #14]
 8002988:	3b01      	subs	r3, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800298e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002992:	2b00      	cmp	r3, #0
 8002994:	dce9      	bgt.n	800296a <prvUnlockQueue+0x7a>
 8002996:	e000      	b.n	800299a <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8002998:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	22ff      	movs	r2, #255	@ 0xff
 800299e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80029a2:	f002 f8a5 	bl	8004af0 <vPortExitCritical>
}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80029b6:	f002 f865 	bl	8004a84 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d102      	bne.n	80029c8 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80029c2:	2301      	movs	r3, #1
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	e001      	b.n	80029cc <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80029cc:	f002 f890 	bl	8004af0 <vPortExitCritical>

    return xReturn;
 80029d0:	68fb      	ldr	r3, [r7, #12]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10d      	bne.n	8002a0c <vQueueAddToRegistry+0x30>
    __asm volatile
 80029f0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80029f4:	b672      	cpsid	i
 80029f6:	f383 8811 	msr	BASEPRI, r3
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	b662      	cpsie	i
 8002a04:	60fb      	str	r3, [r7, #12]
}
 8002a06:	bf00      	nop
 8002a08:	bf00      	nop
 8002a0a:	e7fd      	b.n	8002a08 <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d024      	beq.n	8002a5c <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	e01e      	b.n	8002a56 <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002a18:	4a18      	ldr	r2, [pc, #96]	@ (8002a7c <vQueueAddToRegistry+0xa0>)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d105      	bne.n	8002a34 <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4a13      	ldr	r2, [pc, #76]	@ (8002a7c <vQueueAddToRegistry+0xa0>)
 8002a2e:	4413      	add	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
                    break;
 8002a32:	e013      	b.n	8002a5c <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10a      	bne.n	8002a50 <vQueueAddToRegistry+0x74>
 8002a3a:	4a10      	ldr	r2, [pc, #64]	@ (8002a7c <vQueueAddToRegistry+0xa0>)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d104      	bne.n	8002a50 <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8002a7c <vQueueAddToRegistry+0xa0>)
 8002a4c:	4413      	add	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	3301      	adds	r3, #1
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2b07      	cmp	r3, #7
 8002a5a:	d9dd      	bls.n	8002a18 <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8002a6e:	20b6      	movs	r0, #182	@ 0xb6
 8002a70:	f004 f94c 	bl	8006d0c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002a74:	bf00      	nop
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000094 	.word	0x20000094

08002a80 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002a90:	f001 fff8 	bl	8004a84 <vPortEnterCritical>
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a9a:	b25b      	sxtb	r3, r3
 8002a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa0:	d103      	bne.n	8002aaa <vQueueWaitForMessageRestricted+0x2a>
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ab0:	b25b      	sxtb	r3, r3
 8002ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab6:	d103      	bne.n	8002ac0 <vQueueWaitForMessageRestricted+0x40>
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ac0:	f002 f816 	bl	8004af0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d106      	bne.n	8002ada <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	3324      	adds	r3, #36	@ 0x24
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	68b9      	ldr	r1, [r7, #8]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 ffc9 	bl	8003a6c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002ada:	6978      	ldr	r0, [r7, #20]
 8002adc:	f7ff ff08 	bl	80028f0 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8002ae0:	20b9      	movs	r0, #185	@ 0xb9
 8002ae2:	f004 f913 	bl	8006d0c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002ae6:	bf00      	nop
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b08a      	sub	sp, #40	@ 0x28
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afa:	623b      	str	r3, [r7, #32]
        BaseType_t xReturn = pdFALSE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	627b      	str	r3, [r7, #36]	@ 0x24
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10d      	bne.n	8002b22 <prvNotifyQueueSetContainer+0x34>
    __asm volatile
 8002b06:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002b0a:	b672      	cpsid	i
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	b662      	cpsie	i
 8002b1a:	617b      	str	r3, [r7, #20]
}
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	e7fd      	b.n	8002b1e <prvNotifyQueueSetContainer+0x30>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d30d      	bcc.n	8002b4a <prvNotifyQueueSetContainer+0x5c>
    __asm volatile
 8002b2e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002b32:	b672      	cpsid	i
 8002b34:	f383 8811 	msr	BASEPRI, r3
 8002b38:	f3bf 8f6f 	isb	sy
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	b662      	cpsie	i
 8002b42:	613b      	str	r3, [r7, #16]
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	e7fd      	b.n	8002b46 <prvNotifyQueueSetContainer+0x58>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d23f      	bcs.n	8002bd6 <prvNotifyQueueSetContainer+0xe8>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b5c:	77fb      	strb	r3, [r7, #31]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8002b5e:	1d3b      	adds	r3, r7, #4
 8002b60:	2200      	movs	r2, #0
 8002b62:	4619      	mov	r1, r3
 8002b64:	6a38      	ldr	r0, [r7, #32]
 8002b66:	f7ff fe33 	bl	80027d0 <prvCopyDataToQueue>
 8002b6a:	6278      	str	r0, [r7, #36]	@ 0x24

            if( cTxLock == queueUNLOCKED )
 8002b6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d10e      	bne.n	8002b94 <prvNotifyQueueSetContainer+0xa6>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d02b      	beq.n	8002bd6 <prvNotifyQueueSetContainer+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	3324      	adds	r3, #36	@ 0x24
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 ffbe 	bl	8003b04 <xTaskRemoveFromEventList>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d023      	beq.n	8002bd6 <prvNotifyQueueSetContainer+0xe8>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b92:	e020      	b.n	8002bd6 <prvNotifyQueueSetContainer+0xe8>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
 8002b94:	f000 fcdc 	bl	8003550 <uxTaskGetNumberOfTasks>
 8002b98:	61b8      	str	r0, [r7, #24]
 8002b9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d918      	bls.n	8002bd6 <prvNotifyQueueSetContainer+0xe8>
 8002ba4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ba8:	2b7f      	cmp	r3, #127	@ 0x7f
 8002baa:	d10d      	bne.n	8002bc8 <prvNotifyQueueSetContainer+0xda>
    __asm volatile
 8002bac:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002bb0:	b672      	cpsid	i
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	b662      	cpsie	i
 8002bc0:	60fb      	str	r3, [r7, #12]
}
 8002bc2:	bf00      	nop
 8002bc4:	bf00      	nop
 8002bc6:	e7fd      	b.n	8002bc4 <prvNotifyQueueSetContainer+0xd6>
 8002bc8:	7ffb      	ldrb	r3, [r7, #31]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	b25a      	sxtb	r2, r3
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3728      	adds	r7, #40	@ 0x28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	@ 0x28
 8002be4:	af04      	add	r7, sp, #16
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f002 f882 	bl	8004cfc <pvPortMalloc>
 8002bf8:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d013      	beq.n	8002c28 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002c00:	2058      	movs	r0, #88	@ 0x58
 8002c02:	f002 f87b 	bl	8004cfc <pvPortMalloc>
 8002c06:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d008      	beq.n	8002c20 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002c0e:	2258      	movs	r2, #88	@ 0x58
 8002c10:	2100      	movs	r1, #0
 8002c12:	6978      	ldr	r0, [r7, #20]
 8002c14:	f004 fbe0 	bl	80073d8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c1e:	e005      	b.n	8002c2c <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002c20:	6938      	ldr	r0, [r7, #16]
 8002c22:	f002 f9a9 	bl	8004f78 <vPortFree>
 8002c26:	e001      	b.n	8002c2c <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00d      	beq.n	8002c4e <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c32:	2300      	movs	r3, #0
 8002c34:	9303      	str	r3, [sp, #12]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	9302      	str	r3, [sp, #8]
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	68b9      	ldr	r1, [r7, #8]
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 f82d 	bl	8002ca8 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002c4e:	697b      	ldr	r3, [r7, #20]
    }
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af02      	add	r7, sp, #8
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c68:	9301      	str	r3, [sp, #4]
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f7ff ffb3 	bl	8002be0 <prvCreateTask>
 8002c7a:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002c82:	6938      	ldr	r0, [r7, #16]
 8002c84:	f000 f8a4 	bl	8002dd0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	e002      	b.n	8002c94 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c92:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	4619      	mov	r1, r3
 8002c98:	20c2      	movs	r0, #194	@ 0xc2
 8002c9a:	f004 f873 	bl	8006d84 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002c9e:	697b      	ldr	r3, [r7, #20]
    }
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	21a5      	movs	r1, #165	@ 0xa5
 8002cc2:	f004 fb89 	bl	80073d8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002cd0:	440b      	add	r3, r1
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f023 0307 	bic.w	r3, r3, #7
 8002cde:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00d      	beq.n	8002d06 <prvInitialiseNewTask+0x5e>
    __asm volatile
 8002cea:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002cee:	b672      	cpsid	i
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	b662      	cpsie	i
 8002cfe:	617b      	str	r3, [r7, #20]
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop
 8002d04:	e7fd      	b.n	8002d02 <prvInitialiseNewTask+0x5a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01e      	beq.n	8002d4a <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61fb      	str	r3, [r7, #28]
 8002d10:	e012      	b.n	8002d38 <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	4413      	add	r3, r2
 8002d18:	7819      	ldrb	r1, [r3, #0]
 8002d1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	4413      	add	r3, r2
 8002d20:	3334      	adds	r3, #52	@ 0x34
 8002d22:	460a      	mov	r2, r1
 8002d24:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d006      	beq.n	8002d40 <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3301      	adds	r3, #1
 8002d36:	61fb      	str	r3, [r7, #28]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	2b09      	cmp	r3, #9
 8002d3c:	d9e9      	bls.n	8002d12 <prvInitialiseNewTask+0x6a>
 8002d3e:	e000      	b.n	8002d42 <prvInitialiseNewTask+0x9a>
            {
                break;
 8002d40:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d90d      	bls.n	8002d6c <prvInitialiseNewTask+0xc4>
    __asm volatile
 8002d50:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002d54:	b672      	cpsid	i
 8002d56:	f383 8811 	msr	BASEPRI, r3
 8002d5a:	f3bf 8f6f 	isb	sy
 8002d5e:	f3bf 8f4f 	dsb	sy
 8002d62:	b662      	cpsie	i
 8002d64:	613b      	str	r3, [r7, #16]
}
 8002d66:	bf00      	nop
 8002d68:	bf00      	nop
 8002d6a:	e7fd      	b.n	8002d68 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d901      	bls.n	8002d76 <prvInitialiseNewTask+0xce>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d72:	2304      	movs	r3, #4
 8002d74:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d80:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d84:	3304      	adds	r3, #4
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fa9a 	bl	80022c0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8e:	3318      	adds	r3, #24
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fa95 	bl	80022c0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d9a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9e:	f1c3 0205 	rsb	r2, r3, #5
 8002da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002daa:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	68f9      	ldr	r1, [r7, #12]
 8002db0:	69b8      	ldr	r0, [r7, #24]
 8002db2:	f001 fd03 	bl	80047bc <pxPortInitialiseStack>
 8002db6:	4602      	mov	r2, r0
 8002db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dba:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <prvInitialiseNewTask+0x120>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dc6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002dc8:	bf00      	nop
 8002dca:	3720      	adds	r7, #32
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002dd0:	b5b0      	push	{r4, r5, r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002dd8:	f001 fe54 	bl	8004a84 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002ddc:	4b50      	ldr	r3, [pc, #320]	@ (8002f20 <prvAddNewTaskToReadyList+0x150>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3301      	adds	r3, #1
 8002de2:	4a4f      	ldr	r2, [pc, #316]	@ (8002f20 <prvAddNewTaskToReadyList+0x150>)
 8002de4:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002de6:	4b4f      	ldr	r3, [pc, #316]	@ (8002f24 <prvAddNewTaskToReadyList+0x154>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002dee:	4a4d      	ldr	r2, [pc, #308]	@ (8002f24 <prvAddNewTaskToReadyList+0x154>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002df4:	4b4a      	ldr	r3, [pc, #296]	@ (8002f20 <prvAddNewTaskToReadyList+0x150>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d110      	bne.n	8002e1e <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002dfc:	f001 f810 	bl	8003e20 <prvInitialiseTaskLists>
 8002e00:	e00d      	b.n	8002e1e <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002e02:	4b49      	ldr	r3, [pc, #292]	@ (8002f28 <prvAddNewTaskToReadyList+0x158>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e0a:	4b46      	ldr	r3, [pc, #280]	@ (8002f24 <prvAddNewTaskToReadyList+0x154>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d802      	bhi.n	8002e1e <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002e18:	4a42      	ldr	r2, [pc, #264]	@ (8002f24 <prvAddNewTaskToReadyList+0x154>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002e1e:	4b43      	ldr	r3, [pc, #268]	@ (8002f2c <prvAddNewTaskToReadyList+0x15c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3301      	adds	r3, #1
 8002e24:	4a41      	ldr	r2, [pc, #260]	@ (8002f2c <prvAddNewTaskToReadyList+0x15c>)
 8002e26:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e28:	4b40      	ldr	r3, [pc, #256]	@ (8002f2c <prvAddNewTaskToReadyList+0x15c>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d016      	beq.n	8002e64 <prvAddNewTaskToReadyList+0x94>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f004 f817 	bl	8006e6c <SEGGER_SYSVIEW_OnTaskCreate>
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	461d      	mov	r5, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	461c      	mov	r4, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	1ae3      	subs	r3, r4, r3
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	462b      	mov	r3, r5
 8002e60:	f002 fa90 	bl	8005384 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f004 f884 	bl	8006f74 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e70:	2201      	movs	r2, #1
 8002e72:	409a      	lsls	r2, r3
 8002e74:	4b2e      	ldr	r3, [pc, #184]	@ (8002f30 <prvAddNewTaskToReadyList+0x160>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	4a2d      	ldr	r2, [pc, #180]	@ (8002f30 <prvAddNewTaskToReadyList+0x160>)
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e82:	492c      	ldr	r1, [pc, #176]	@ (8002f34 <prvAddNewTaskToReadyList+0x164>)
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3304      	adds	r3, #4
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	609a      	str	r2, [r3, #8]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	3204      	adds	r2, #4
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	1d1a      	adds	r2, r3, #4
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f34 <prvAddNewTaskToReadyList+0x164>)
 8002ec2:	441a      	add	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	615a      	str	r2, [r3, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ecc:	4919      	ldr	r1, [pc, #100]	@ (8002f34 <prvAddNewTaskToReadyList+0x164>)
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ede:	1c59      	adds	r1, r3, #1
 8002ee0:	4814      	ldr	r0, [pc, #80]	@ (8002f34 <prvAddNewTaskToReadyList+0x164>)
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4403      	add	r3, r0
 8002eec:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002eee:	f001 fdff 	bl	8004af0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f28 <prvAddNewTaskToReadyList+0x158>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00e      	beq.n	8002f18 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8002efa:	4b0a      	ldr	r3, [pc, #40]	@ (8002f24 <prvAddNewTaskToReadyList+0x154>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d207      	bcs.n	8002f18 <prvAddNewTaskToReadyList+0x148>
 8002f08:	4b0b      	ldr	r3, [pc, #44]	@ (8002f38 <prvAddNewTaskToReadyList+0x168>)
 8002f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f20:	200001ac 	.word	0x200001ac
 8002f24:	200000d4 	.word	0x200000d4
 8002f28:	200001b8 	.word	0x200001b8
 8002f2c:	200001c8 	.word	0x200001c8
 8002f30:	200001b4 	.word	0x200001b4
 8002f34:	200000d8 	.word	0x200000d8
 8002f38:	e000ed04 	.word	0xe000ed04

08002f3c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        traceENTER_uxTaskPriorityGet( xTask );

        taskENTER_CRITICAL();
 8002f44:	f001 fd9e 	bl	8004a84 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <uxTaskPriorityGet+0x18>
 8002f4e:	4b09      	ldr	r3, [pc, #36]	@ (8002f74 <uxTaskPriorityGet+0x38>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	e000      	b.n	8002f56 <uxTaskPriorityGet+0x1a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5c:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8002f5e:	f001 fdc7 	bl	8004af0 <vPortExitCritical>

        traceRETURN_uxTaskPriorityGet( uxReturn );
 8002f62:	68b9      	ldr	r1, [r7, #8]
 8002f64:	20c7      	movs	r0, #199	@ 0xc7
 8002f66:	f003 ff0d 	bl	8006d84 <SEGGER_SYSVIEW_RecordEndCallU32>

        return uxReturn;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
    }
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	200000d4 	.word	0x200000d4

08002f78 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	@ 0x28
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
            BaseType_t xYieldForTask = pdFALSE;
        #endif

        traceENTER_vTaskPrioritySet( xTask, uxNewPriority );

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d90d      	bls.n	8002fa8 <vTaskPrioritySet+0x30>
    __asm volatile
 8002f8c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002f90:	b672      	cpsid	i
 8002f92:	f383 8811 	msr	BASEPRI, r3
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	b662      	cpsie	i
 8002fa0:	60bb      	str	r3, [r7, #8]
}
 8002fa2:	bf00      	nop
 8002fa4:	bf00      	nop
 8002fa6:	e7fd      	b.n	8002fa4 <vTaskPrioritySet+0x2c>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d901      	bls.n	8002fb2 <vTaskPrioritySet+0x3a>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002fae:	2304      	movs	r3, #4
 8002fb0:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002fb2:	f001 fd67 	bl	8004a84 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <vTaskPrioritySet+0x4a>
 8002fbc:	4b67      	ldr	r3, [pc, #412]	@ (800315c <vTaskPrioritySet+0x1e4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	e000      	b.n	8002fc4 <vTaskPrioritySet+0x4c>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f004 f875 	bl	80070b8 <SEGGER_SYSVIEW_ShrinkId>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	20c9      	movs	r0, #201	@ 0xc9
 8002fd6:	f003 fafd 	bl	80065d4 <SEGGER_SYSVIEW_RecordU32x2>
 8002fda:	69b8      	ldr	r0, [r7, #24]
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2300      	movs	r3, #0
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	4613      	mov	r3, r2
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	f002 fa30 	bl	8005454 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff8:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	f000 80a3 	beq.w	800314a <vTaskPrioritySet+0x1d2>
            {
                /* The priority change may have readied a task of higher
                 * priority than a running task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	429a      	cmp	r2, r3
 800300a:	d90d      	bls.n	8003028 <vTaskPrioritySet+0xb0>
                {
                    #if ( configNUMBER_OF_CORES == 1 )
                    {
                        if( pxTCB != pxCurrentTCB )
 800300c:	4b53      	ldr	r3, [pc, #332]	@ (800315c <vTaskPrioritySet+0x1e4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	429a      	cmp	r2, r3
 8003014:	d00f      	beq.n	8003036 <vTaskPrioritySet+0xbe>
                        {
                            /* The priority of a task other than the currently
                             * running task is being raised.  Is the priority being
                             * raised above that of the running task? */
                            if( uxNewPriority > pxCurrentTCB->uxPriority )
 8003016:	4b51      	ldr	r3, [pc, #324]	@ (800315c <vTaskPrioritySet+0x1e4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d909      	bls.n	8003036 <vTaskPrioritySet+0xbe>
                            {
                                xYieldRequired = pdTRUE;
 8003022:	2301      	movs	r3, #1
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	e006      	b.n	8003036 <vTaskPrioritySet+0xbe>
                         * perform a yield for this task later. */
                        xYieldForTask = pdTRUE;
                    }
                    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                }
                else if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 8003028:	4b4c      	ldr	r3, [pc, #304]	@ (800315c <vTaskPrioritySet+0x1e4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	429a      	cmp	r2, r3
 8003030:	d101      	bne.n	8003036 <vTaskPrioritySet+0xbe>
                     * is ready to execute. */
                    #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 )
                        if( pxTCB->xPreemptionDisable == pdFALSE )
                    #endif
                    {
                        xYieldRequired = pdTRUE;
 8003032:	2301      	movs	r3, #1
 8003034:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303a:	613b      	str	r3, [r7, #16]
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority or the new priority
                     * is bigger than the inherited priority. */
                    if( ( pxTCB->uxBasePriority == pxTCB->uxPriority ) || ( uxNewPriority > pxTCB->uxPriority ) )
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003044:	429a      	cmp	r2, r3
 8003046:	d004      	beq.n	8003052 <vTaskPrioritySet+0xda>
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d902      	bls.n	8003058 <vTaskPrioritySet+0xe0>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	62da      	str	r2, [r3, #44]	@ 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	649a      	str	r2, [r3, #72]	@ 0x48
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	db04      	blt.n	8003070 <vTaskPrioritySet+0xf8>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) );
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f1c3 0205 	rsb	r2, r3, #5
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	6959      	ldr	r1, [r3, #20]
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4a38      	ldr	r2, [pc, #224]	@ (8003160 <vTaskPrioritySet+0x1e8>)
 8003080:	4413      	add	r3, r2
 8003082:	4299      	cmp	r1, r3
 8003084:	d156      	bne.n	8003134 <vTaskPrioritySet+0x1bc>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	3304      	adds	r3, #4
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff f962 	bl	8002354 <uxListRemove>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <vTaskPrioritySet+0x132>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8003096:	2201      	movs	r2, #1
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43da      	mvns	r2, r3
 80030a0:	4b30      	ldr	r3, [pc, #192]	@ (8003164 <vTaskPrioritySet+0x1ec>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4013      	ands	r3, r2
 80030a6:	4a2f      	ldr	r2, [pc, #188]	@ (8003164 <vTaskPrioritySet+0x1ec>)
 80030a8:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f003 ff61 	bl	8006f74 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b6:	2201      	movs	r2, #1
 80030b8:	409a      	lsls	r2, r3
 80030ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003164 <vTaskPrioritySet+0x1ec>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4313      	orrs	r3, r2
 80030c0:	4a28      	ldr	r2, [pc, #160]	@ (8003164 <vTaskPrioritySet+0x1ec>)
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c8:	4925      	ldr	r1, [pc, #148]	@ (8003160 <vTaskPrioritySet+0x1e8>)
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	3304      	adds	r3, #4
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	60da      	str	r2, [r3, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	3204      	adds	r2, #4
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	1d1a      	adds	r2, r3, #4
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	609a      	str	r2, [r3, #8]
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4a16      	ldr	r2, [pc, #88]	@ (8003160 <vTaskPrioritySet+0x1e8>)
 8003108:	441a      	add	r2, r3
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	615a      	str	r2, [r3, #20]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003112:	4913      	ldr	r1, [pc, #76]	@ (8003160 <vTaskPrioritySet+0x1e8>)
 8003114:	4613      	mov	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003124:	1c59      	adds	r1, r3, #1
 8003126:	480e      	ldr	r0, [pc, #56]	@ (8003160 <vTaskPrioritySet+0x1e8>)
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4403      	add	r3, r0
 8003132:	6019      	str	r1, [r3, #0]
                        xYieldForTask = pdFALSE;
                    }
                    #endif
                }

                if( xYieldRequired != pdFALSE )
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <vTaskPrioritySet+0x1d2>
                {
                    /* The running task priority is set down. Request the task to yield. */
                    taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxTCB );
 800313a:	4b0b      	ldr	r3, [pc, #44]	@ (8003168 <vTaskPrioritySet+0x1f0>)
 800313c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 800314a:	f001 fcd1 	bl	8004af0 <vPortExitCritical>

        traceRETURN_vTaskPrioritySet();
 800314e:	20c9      	movs	r0, #201	@ 0xc9
 8003150:	f003 fddc 	bl	8006d0c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003154:	bf00      	nop
 8003156:	3720      	adds	r7, #32
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	200000d4 	.word	0x200000d4
 8003160:	200000d8 	.word	0x200000d8
 8003164:	200001b4 	.word	0x200001b4
 8003168:	e000ed04 	.word	0xe000ed04

0800316c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	@ 0x28
 8003170:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8003172:	2301      	movs	r3, #1
 8003174:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	e011      	b.n	80031a4 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003180:	4a1c      	ldr	r2, [pc, #112]	@ (80031f4 <prvCreateIdleTasks+0x88>)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	4413      	add	r3, r2
 8003186:	7819      	ldrb	r1, [r3, #0]
 8003188:	1d3a      	adds	r2, r7, #4
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	4413      	add	r3, r2
 800318e:	460a      	mov	r2, r1
 8003190:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003192:	1d3a      	adds	r2, r7, #4
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	4413      	add	r3, r2
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d006      	beq.n	80031ac <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	3301      	adds	r3, #1
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	2b09      	cmp	r3, #9
 80031a8:	ddea      	ble.n	8003180 <prvCreateIdleTasks+0x14>
 80031aa:	e000      	b.n	80031ae <prvCreateIdleTasks+0x42>
        {
            break;
 80031ac:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	e015      	b.n	80031e0 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80031b4:	4b10      	ldr	r3, [pc, #64]	@ (80031f8 <prvCreateIdleTasks+0x8c>)
 80031b6:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4a0f      	ldr	r2, [pc, #60]	@ (80031fc <prvCreateIdleTasks+0x90>)
 80031be:	4413      	add	r3, r2
 80031c0:	1d39      	adds	r1, r7, #4
 80031c2:	9301      	str	r3, [sp, #4]
 80031c4:	2300      	movs	r3, #0
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	2300      	movs	r3, #0
 80031ca:	2282      	movs	r2, #130	@ 0x82
 80031cc:	6938      	ldr	r0, [r7, #16]
 80031ce:	f7ff fd43 	bl	8002c58 <xTaskCreate>
 80031d2:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d006      	beq.n	80031e8 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	3301      	adds	r3, #1
 80031de:	61bb      	str	r3, [r7, #24]
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	dde6      	ble.n	80031b4 <prvCreateIdleTasks+0x48>
 80031e6:	e000      	b.n	80031ea <prvCreateIdleTasks+0x7e>
        {
            break;
 80031e8:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80031ea:	69fb      	ldr	r3, [r7, #28]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3720      	adds	r7, #32
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	08007474 	.word	0x08007474
 80031f8:	08003df1 	.word	0x08003df1
 80031fc:	200001d0 	.word	0x200001d0

08003200 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8003206:	f7ff ffb1 	bl	800316c <prvCreateIdleTasks>
 800320a:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d102      	bne.n	8003218 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8003212:	f001 f819 	bl	8004248 <xTimerCreateTimerTask>
 8003216:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d126      	bne.n	800326c <vTaskStartScheduler+0x6c>
    __asm volatile
 800321e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003222:	b672      	cpsid	i
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	b662      	cpsie	i
 8003232:	60bb      	str	r3, [r7, #8]
}
 8003234:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003236:	4b1b      	ldr	r3, [pc, #108]	@ (80032a4 <vTaskStartScheduler+0xa4>)
 8003238:	f04f 32ff 	mov.w	r2, #4294967295
 800323c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800323e:	4b1a      	ldr	r3, [pc, #104]	@ (80032a8 <vTaskStartScheduler+0xa8>)
 8003240:	2201      	movs	r2, #1
 8003242:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003244:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <vTaskStartScheduler+0xac>)
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800324a:	4b19      	ldr	r3, [pc, #100]	@ (80032b0 <vTaskStartScheduler+0xb0>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4b19      	ldr	r3, [pc, #100]	@ (80032b4 <vTaskStartScheduler+0xb4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d102      	bne.n	800325c <vTaskStartScheduler+0x5c>
 8003256:	f003 fded 	bl	8006e34 <SEGGER_SYSVIEW_OnIdle>
 800325a:	e004      	b.n	8003266 <vTaskStartScheduler+0x66>
 800325c:	4b15      	ldr	r3, [pc, #84]	@ (80032b4 <vTaskStartScheduler+0xb4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f003 fe45 	bl	8006ef0 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8003266:	f001 fb3d 	bl	80048e4 <xPortStartScheduler>
 800326a:	e011      	b.n	8003290 <vTaskStartScheduler+0x90>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003272:	d10d      	bne.n	8003290 <vTaskStartScheduler+0x90>
    __asm volatile
 8003274:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003278:	b672      	cpsid	i
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	b662      	cpsie	i
 8003288:	607b      	str	r3, [r7, #4]
}
 800328a:	bf00      	nop
 800328c:	bf00      	nop
 800328e:	e7fd      	b.n	800328c <vTaskStartScheduler+0x8c>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <vTaskStartScheduler+0xb8>)
 8003292:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8003294:	20cd      	movs	r0, #205	@ 0xcd
 8003296:	f003 fd39 	bl	8006d0c <SEGGER_SYSVIEW_RecordEndCall>
}
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	200001cc 	.word	0x200001cc
 80032a8:	200001b8 	.word	0x200001b8
 80032ac:	200001b0 	.word	0x200001b0
 80032b0:	200001d0 	.word	0x200001d0
 80032b4:	200000d4 	.word	0x200000d4
 80032b8:	2000000c 	.word	0x2000000c

080032bc <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80032c0:	4b04      	ldr	r3, [pc, #16]	@ (80032d4 <vTaskSuspendAll+0x18>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3301      	adds	r3, #1
 80032c6:	4a03      	ldr	r2, [pc, #12]	@ (80032d4 <vTaskSuspendAll+0x18>)
 80032c8:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 80032ca:	20cf      	movs	r0, #207	@ 0xcf
 80032cc:	f003 fd1e 	bl	8006d0c <SEGGER_SYSVIEW_RecordEndCall>
}
 80032d0:	bf00      	nop
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	200001d4 	.word	0x200001d4

080032d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80032e6:	f001 fbcd 	bl	8004a84 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80032ee:	4b7b      	ldr	r3, [pc, #492]	@ (80034dc <xTaskResumeAll+0x204>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10d      	bne.n	8003312 <xTaskResumeAll+0x3a>
    __asm volatile
 80032f6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80032fa:	b672      	cpsid	i
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	b662      	cpsie	i
 800330a:	603b      	str	r3, [r7, #0]
}
 800330c:	bf00      	nop
 800330e:	bf00      	nop
 8003310:	e7fd      	b.n	800330e <xTaskResumeAll+0x36>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003312:	4b72      	ldr	r3, [pc, #456]	@ (80034dc <xTaskResumeAll+0x204>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3b01      	subs	r3, #1
 8003318:	4a70      	ldr	r2, [pc, #448]	@ (80034dc <xTaskResumeAll+0x204>)
 800331a:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800331c:	4b6f      	ldr	r3, [pc, #444]	@ (80034dc <xTaskResumeAll+0x204>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	f040 80ce 	bne.w	80034c2 <xTaskResumeAll+0x1ea>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003326:	4b6e      	ldr	r3, [pc, #440]	@ (80034e0 <xTaskResumeAll+0x208>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 80c9 	beq.w	80034c2 <xTaskResumeAll+0x1ea>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003330:	e092      	b.n	8003458 <xTaskResumeAll+0x180>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003332:	4b6c      	ldr	r3, [pc, #432]	@ (80034e4 <xTaskResumeAll+0x20c>)
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	6a12      	ldr	r2, [r2, #32]
 8003348:	609a      	str	r2, [r3, #8]
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	69d2      	ldr	r2, [r2, #28]
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	3318      	adds	r3, #24
 800335c:	429a      	cmp	r2, r3
 800335e:	d103      	bne.n	8003368 <xTaskResumeAll+0x90>
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	6a1a      	ldr	r2, [r3, #32]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	2200      	movs	r2, #0
 800336c:	629a      	str	r2, [r3, #40]	@ 0x28
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	1e5a      	subs	r2, r3, #1
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	69fa      	ldr	r2, [r7, #28]
 8003384:	68d2      	ldr	r2, [r2, #12]
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	69fa      	ldr	r2, [r7, #28]
 800338e:	6892      	ldr	r2, [r2, #8]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3304      	adds	r3, #4
 800339a:	429a      	cmp	r2, r3
 800339c:	d103      	bne.n	80033a6 <xTaskResumeAll+0xce>
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	2200      	movs	r2, #0
 80033aa:	615a      	str	r2, [r3, #20]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	1e5a      	subs	r2, r3, #1
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f003 fddb 	bl	8006f74 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c2:	2201      	movs	r2, #1
 80033c4:	409a      	lsls	r2, r3
 80033c6:	4b48      	ldr	r3, [pc, #288]	@ (80034e8 <xTaskResumeAll+0x210>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	4a46      	ldr	r2, [pc, #280]	@ (80034e8 <xTaskResumeAll+0x210>)
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033d4:	4945      	ldr	r1, [pc, #276]	@ (80034ec <xTaskResumeAll+0x214>)
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	3304      	adds	r3, #4
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	60da      	str	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	3204      	adds	r2, #4
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	1d1a      	adds	r2, r3, #4
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4a36      	ldr	r2, [pc, #216]	@ (80034ec <xTaskResumeAll+0x214>)
 8003414:	441a      	add	r2, r3
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	615a      	str	r2, [r3, #20]
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800341e:	4933      	ldr	r1, [pc, #204]	@ (80034ec <xTaskResumeAll+0x214>)
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003430:	1c59      	adds	r1, r3, #1
 8003432:	482e      	ldr	r0, [pc, #184]	@ (80034ec <xTaskResumeAll+0x214>)
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4403      	add	r3, r0
 800343e:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003444:	4b2a      	ldr	r3, [pc, #168]	@ (80034f0 <xTaskResumeAll+0x218>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344a:	429a      	cmp	r2, r3
 800344c:	d904      	bls.n	8003458 <xTaskResumeAll+0x180>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800344e:	4a29      	ldr	r2, [pc, #164]	@ (80034f4 <xTaskResumeAll+0x21c>)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	2101      	movs	r1, #1
 8003454:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003458:	4b22      	ldr	r3, [pc, #136]	@ (80034e4 <xTaskResumeAll+0x20c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	f47f af68 	bne.w	8003332 <xTaskResumeAll+0x5a>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <xTaskResumeAll+0x194>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003468:	f000 fd58 	bl	8003f1c <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800346c:	4b22      	ldr	r3, [pc, #136]	@ (80034f8 <xTaskResumeAll+0x220>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d012      	beq.n	800349e <xTaskResumeAll+0x1c6>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003478:	f000 f93c 	bl	80036f4 <xTaskIncrementTick>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d004      	beq.n	800348c <xTaskResumeAll+0x1b4>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003482:	4a1c      	ldr	r2, [pc, #112]	@ (80034f4 <xTaskResumeAll+0x21c>)
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	2101      	movs	r1, #1
 8003488:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	3b01      	subs	r3, #1
 8003490:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1ef      	bne.n	8003478 <xTaskResumeAll+0x1a0>

                            xPendedTicks = 0;
 8003498:	4b17      	ldr	r3, [pc, #92]	@ (80034f8 <xTaskResumeAll+0x220>)
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800349e:	4a15      	ldr	r2, [pc, #84]	@ (80034f4 <xTaskResumeAll+0x21c>)
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <xTaskResumeAll+0x1ea>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80034aa:	2301      	movs	r3, #1
 80034ac:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80034ae:	4b10      	ldr	r3, [pc, #64]	@ (80034f0 <xTaskResumeAll+0x218>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4b12      	ldr	r3, [pc, #72]	@ (80034fc <xTaskResumeAll+0x224>)
 80034b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80034c2:	f001 fb15 	bl	8004af0 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	4619      	mov	r1, r3
 80034ca:	20d0      	movs	r0, #208	@ 0xd0
 80034cc:	f003 fc5a 	bl	8006d84 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 80034d0:	69bb      	ldr	r3, [r7, #24]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3720      	adds	r7, #32
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	200001d4 	.word	0x200001d4
 80034e0:	200001ac 	.word	0x200001ac
 80034e4:	2000016c 	.word	0x2000016c
 80034e8:	200001b4 	.word	0x200001b4
 80034ec:	200000d8 	.word	0x200000d8
 80034f0:	200000d4 	.word	0x200000d4
 80034f4:	200001c0 	.word	0x200001c0
 80034f8:	200001bc 	.word	0x200001bc
 80034fc:	e000ed04 	.word	0xe000ed04

08003500 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003506:	4b06      	ldr	r3, [pc, #24]	@ (8003520 <xTaskGetTickCount+0x20>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	20d1      	movs	r0, #209	@ 0xd1
 8003510:	f003 fc38 	bl	8006d84 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003514:	687b      	ldr	r3, [r7, #4]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	200001b0 	.word	0x200001b0

08003524 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800352a:	f001 fba1 	bl	8004c70 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003532:	4b06      	ldr	r3, [pc, #24]	@ (800354c <xTaskGetTickCountFromISR+0x28>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8003538:	6839      	ldr	r1, [r7, #0]
 800353a:	20d2      	movs	r0, #210	@ 0xd2
 800353c:	f003 fc22 	bl	8006d84 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003540:	683b      	ldr	r3, [r7, #0]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	200001b0 	.word	0x200001b0

08003550 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
    traceENTER_uxTaskGetNumberOfTasks();

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );
 8003554:	4b04      	ldr	r3, [pc, #16]	@ (8003568 <uxTaskGetNumberOfTasks+0x18>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4619      	mov	r1, r3
 800355a:	20d3      	movs	r0, #211	@ 0xd3
 800355c:	f003 fc12 	bl	8006d84 <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxCurrentNumberOfTasks;
 8003560:	4b01      	ldr	r3, [pc, #4]	@ (8003568 <uxTaskGetNumberOfTasks+0x18>)
 8003562:	681b      	ldr	r3, [r3, #0]
}
 8003564:	4618      	mov	r0, r3
 8003566:	bd80      	pop	{r7, pc}
 8003568:	200001ac 	.word	0x200001ac

0800356c <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )
    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 800356c:	b480      	push	{r7}
 800356e:	b08b      	sub	sp, #44	@ 0x2c
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
        TCB_t * pxReturn = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24
        TCB_t * pxTCB = NULL;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
        UBaseType_t x;
        char cNextChar;
        BaseType_t xBreakLoop;
        const ListItem_t * pxEndMarker = listGET_END_MARKER( pxList );
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3308      	adds	r3, #8
 8003582:	613b      	str	r3, [r7, #16]
        ListItem_t * pxIterator;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d039      	beq.n	8003600 <prvSearchForNameWithinSingleList+0x94>
        {
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	e02f      	b.n	80035f4 <prvSearchForNameWithinSingleList+0x88>
            {
                /* MISRA Ref 11.5.3 [Void pointer assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxTCB = listGET_LIST_ITEM_OWNER( pxIterator );
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	617b      	str	r3, [r7, #20]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800359e:	2300      	movs	r3, #0
 80035a0:	623b      	str	r3, [r7, #32]
 80035a2:	e01c      	b.n	80035de <prvSearchForNameWithinSingleList+0x72>
                {
                    cNextChar = pxTCB->pcTaskName[ x ];
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	4413      	add	r3, r2
 80035aa:	3334      	adds	r3, #52	@ 0x34
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	73fb      	strb	r3, [r7, #15]

                    if( cNextChar != pcNameToQuery[ x ] )
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	4413      	add	r3, r2
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	7bfa      	ldrb	r2, [r7, #15]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d002      	beq.n	80035c4 <prvSearchForNameWithinSingleList+0x58>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 80035be:	2301      	movs	r3, #1
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	e006      	b.n	80035d2 <prvSearchForNameWithinSingleList+0x66>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d103      	bne.n	80035d2 <prvSearchForNameWithinSingleList+0x66>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxTCB;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	627b      	str	r3, [r7, #36]	@ 0x24
                        xBreakLoop = pdTRUE;
 80035ce:	2301      	movs	r3, #1
 80035d0:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d106      	bne.n	80035e6 <prvSearchForNameWithinSingleList+0x7a>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	3301      	adds	r3, #1
 80035dc:	623b      	str	r3, [r7, #32]
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	2b09      	cmp	r3, #9
 80035e2:	d9df      	bls.n	80035a4 <prvSearchForNameWithinSingleList+0x38>
 80035e4:	e000      	b.n	80035e8 <prvSearchForNameWithinSingleList+0x7c>
                    {
                        break;
 80035e6:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 80035e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d107      	bne.n	80035fe <prvSearchForNameWithinSingleList+0x92>
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	61bb      	str	r3, [r7, #24]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d1cb      	bne.n	8003594 <prvSearchForNameWithinSingleList+0x28>
 80035fc:	e000      	b.n	8003600 <prvSearchForNameWithinSingleList+0x94>
                {
                    /* The handle has been found. */
                    break;
 80035fe:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003602:	4618      	mov	r0, r3
 8003604:	372c      	adds	r7, #44	@ 0x2c
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery )
    {
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8003618:	2305      	movs	r3, #5
 800361a:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        traceENTER_xTaskGetHandle( pcNameToQuery );

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7fc fe59 	bl	80002d4 <strlen>
 8003622:	4603      	mov	r3, r0
 8003624:	2b09      	cmp	r3, #9
 8003626:	d90d      	bls.n	8003644 <xTaskGetHandle+0x34>
    __asm volatile
 8003628:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800362c:	b672      	cpsid	i
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	b662      	cpsie	i
 800363c:	60fb      	str	r3, [r7, #12]
}
 800363e:	bf00      	nop
 8003640:	bf00      	nop
 8003642:	e7fd      	b.n	8003640 <xTaskGetHandle+0x30>

        vTaskSuspendAll();
 8003644:	f7ff fe3a 	bl	80032bc <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	3b01      	subs	r3, #1
 800364c:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4a21      	ldr	r2, [pc, #132]	@ (80036e0 <xTaskGetHandle+0xd0>)
 800365a:	4413      	add	r3, r2
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff ff84 	bl	800356c <prvSearchForNameWithinSingleList>
 8003664:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d103      	bne.n	8003674 <xTaskGetHandle+0x64>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY );
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1ea      	bne.n	8003648 <xTaskGetHandle+0x38>
 8003672:	e000      	b.n	8003676 <xTaskGetHandle+0x66>
                    break;
 8003674:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d106      	bne.n	800368a <xTaskGetHandle+0x7a>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800367c:	4b19      	ldr	r3, [pc, #100]	@ (80036e4 <xTaskGetHandle+0xd4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff ff72 	bl	800356c <prvSearchForNameWithinSingleList>
 8003688:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d106      	bne.n	800369e <xTaskGetHandle+0x8e>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8003690:	4b15      	ldr	r3, [pc, #84]	@ (80036e8 <xTaskGetHandle+0xd8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff ff68 	bl	800356c <prvSearchForNameWithinSingleList>
 800369c:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
            {
                if( pxTCB == NULL )
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d104      	bne.n	80036ae <xTaskGetHandle+0x9e>
                {
                    /* Search the suspended list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4811      	ldr	r0, [pc, #68]	@ (80036ec <xTaskGetHandle+0xdc>)
 80036a8:	f7ff ff60 	bl	800356c <prvSearchForNameWithinSingleList>
 80036ac:	6138      	str	r0, [r7, #16]
            }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
            {
                if( pxTCB == NULL )
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d104      	bne.n	80036be <xTaskGetHandle+0xae>
                {
                    /* Search the deleted list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	480e      	ldr	r0, [pc, #56]	@ (80036f0 <xTaskGetHandle+0xe0>)
 80036b8:	f7ff ff58 	bl	800356c <prvSearchForNameWithinSingleList>
 80036bc:	6138      	str	r0, [r7, #16]
                }
            }
            #endif
        }
        ( void ) xTaskResumeAll();
 80036be:	f7ff fe0b 	bl	80032d8 <xTaskResumeAll>

        traceRETURN_xTaskGetHandle( pxTCB );
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f003 fcf7 	bl	80070b8 <SEGGER_SYSVIEW_ShrinkId>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4619      	mov	r1, r3
 80036ce:	20d5      	movs	r0, #213	@ 0xd5
 80036d0:	f003 fb58 	bl	8006d84 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxTCB;
 80036d4:	693b      	ldr	r3, [r7, #16]
    }
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	200000d8 	.word	0x200000d8
 80036e4:	20000164 	.word	0x20000164
 80036e8:	20000168 	.word	0x20000168
 80036ec:	20000198 	.word	0x20000198
 80036f0:	20000180 	.word	0x20000180

080036f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	@ 0x28
 80036f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80036fe:	4b84      	ldr	r3, [pc, #528]	@ (8003910 <xTaskIncrementTick+0x21c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f040 80f5 	bne.w	80038f2 <xTaskIncrementTick+0x1fe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003708:	4b82      	ldr	r3, [pc, #520]	@ (8003914 <xTaskIncrementTick+0x220>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3301      	adds	r3, #1
 800370e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003710:	4a80      	ldr	r2, [pc, #512]	@ (8003914 <xTaskIncrementTick+0x220>)
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d123      	bne.n	8003764 <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 800371c:	4b7e      	ldr	r3, [pc, #504]	@ (8003918 <xTaskIncrementTick+0x224>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00d      	beq.n	8003742 <xTaskIncrementTick+0x4e>
    __asm volatile
 8003726:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800372a:	b672      	cpsid	i
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	b662      	cpsie	i
 800373a:	607b      	str	r3, [r7, #4]
}
 800373c:	bf00      	nop
 800373e:	bf00      	nop
 8003740:	e7fd      	b.n	800373e <xTaskIncrementTick+0x4a>
 8003742:	4b75      	ldr	r3, [pc, #468]	@ (8003918 <xTaskIncrementTick+0x224>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	61fb      	str	r3, [r7, #28]
 8003748:	4b74      	ldr	r3, [pc, #464]	@ (800391c <xTaskIncrementTick+0x228>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a72      	ldr	r2, [pc, #456]	@ (8003918 <xTaskIncrementTick+0x224>)
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	4a72      	ldr	r2, [pc, #456]	@ (800391c <xTaskIncrementTick+0x228>)
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	4b72      	ldr	r3, [pc, #456]	@ (8003920 <xTaskIncrementTick+0x22c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3301      	adds	r3, #1
 800375c:	4a70      	ldr	r2, [pc, #448]	@ (8003920 <xTaskIncrementTick+0x22c>)
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	f000 fbdc 	bl	8003f1c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003764:	4b6f      	ldr	r3, [pc, #444]	@ (8003924 <xTaskIncrementTick+0x230>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6a3a      	ldr	r2, [r7, #32]
 800376a:	429a      	cmp	r2, r3
 800376c:	f0c0 80ac 	bcc.w	80038c8 <xTaskIncrementTick+0x1d4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003770:	4b69      	ldr	r3, [pc, #420]	@ (8003918 <xTaskIncrementTick+0x224>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d104      	bne.n	8003784 <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800377a:	4b6a      	ldr	r3, [pc, #424]	@ (8003924 <xTaskIncrementTick+0x230>)
 800377c:	f04f 32ff 	mov.w	r2, #4294967295
 8003780:	601a      	str	r2, [r3, #0]
                    break;
 8003782:	e0a1      	b.n	80038c8 <xTaskIncrementTick+0x1d4>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003784:	4b64      	ldr	r3, [pc, #400]	@ (8003918 <xTaskIncrementTick+0x224>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003794:	6a3a      	ldr	r2, [r7, #32]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	429a      	cmp	r2, r3
 800379a:	d203      	bcs.n	80037a4 <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800379c:	4a61      	ldr	r2, [pc, #388]	@ (8003924 <xTaskIncrementTick+0x230>)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	6013      	str	r3, [r2, #0]
                        break;
 80037a2:	e091      	b.n	80038c8 <xTaskIncrementTick+0x1d4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	613b      	str	r3, [r7, #16]
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	68d2      	ldr	r2, [r2, #12]
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	6892      	ldr	r2, [r2, #8]
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	3304      	adds	r3, #4
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d103      	bne.n	80037d2 <xTaskIncrementTick+0xde>
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2200      	movs	r2, #0
 80037d6:	615a      	str	r2, [r3, #20]
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	1e5a      	subs	r2, r3, #1
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01e      	beq.n	8003828 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	6a12      	ldr	r2, [r2, #32]
 80037f8:	609a      	str	r2, [r3, #8]
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	69d2      	ldr	r2, [r2, #28]
 8003802:	605a      	str	r2, [r3, #4]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	3318      	adds	r3, #24
 800380c:	429a      	cmp	r2, r3
 800380e:	d103      	bne.n	8003818 <xTaskIncrementTick+0x124>
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	6a1a      	ldr	r2, [r3, #32]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	605a      	str	r2, [r3, #4]
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2200      	movs	r2, #0
 800381c:	629a      	str	r2, [r3, #40]	@ 0x28
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	1e5a      	subs	r2, r3, #1
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	4618      	mov	r0, r3
 800382c:	f003 fba2 	bl	8006f74 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003834:	2201      	movs	r2, #1
 8003836:	409a      	lsls	r2, r3
 8003838:	4b3b      	ldr	r3, [pc, #236]	@ (8003928 <xTaskIncrementTick+0x234>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4313      	orrs	r3, r2
 800383e:	4a3a      	ldr	r2, [pc, #232]	@ (8003928 <xTaskIncrementTick+0x234>)
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003846:	4939      	ldr	r1, [pc, #228]	@ (800392c <xTaskIncrementTick+0x238>)
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	3304      	adds	r3, #4
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60bb      	str	r3, [r7, #8]
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	609a      	str	r2, [r3, #8]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	60da      	str	r2, [r3, #12]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	3204      	adds	r2, #4
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	1d1a      	adds	r2, r3, #4
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4a29      	ldr	r2, [pc, #164]	@ (800392c <xTaskIncrementTick+0x238>)
 8003886:	441a      	add	r2, r3
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	615a      	str	r2, [r3, #20]
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003890:	4926      	ldr	r1, [pc, #152]	@ (800392c <xTaskIncrementTick+0x238>)
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80038a2:	1c59      	adds	r1, r3, #1
 80038a4:	4821      	ldr	r0, [pc, #132]	@ (800392c <xTaskIncrementTick+0x238>)
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4403      	add	r3, r0
 80038b0:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003930 <xTaskIncrementTick+0x23c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038bc:	429a      	cmp	r2, r3
 80038be:	f67f af57 	bls.w	8003770 <xTaskIncrementTick+0x7c>
                            {
                                xSwitchRequired = pdTRUE;
 80038c2:	2301      	movs	r3, #1
 80038c4:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038c6:	e753      	b.n	8003770 <xTaskIncrementTick+0x7c>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80038c8:	4b19      	ldr	r3, [pc, #100]	@ (8003930 <xTaskIncrementTick+0x23c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ce:	4917      	ldr	r1, [pc, #92]	@ (800392c <xTaskIncrementTick+0x238>)
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d901      	bls.n	80038e4 <xTaskIncrementTick+0x1f0>
                {
                    xSwitchRequired = pdTRUE;
 80038e0:	2301      	movs	r3, #1
 80038e2:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80038e4:	4b13      	ldr	r3, [pc, #76]	@ (8003934 <xTaskIncrementTick+0x240>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <xTaskIncrementTick+0x208>
                {
                    xSwitchRequired = pdTRUE;
 80038ec:	2301      	movs	r3, #1
 80038ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f0:	e004      	b.n	80038fc <xTaskIncrementTick+0x208>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80038f2:	4b11      	ldr	r3, [pc, #68]	@ (8003938 <xTaskIncrementTick+0x244>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3301      	adds	r3, #1
 80038f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003938 <xTaskIncrementTick+0x244>)
 80038fa:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	4619      	mov	r1, r3
 8003900:	20db      	movs	r0, #219	@ 0xdb
 8003902:	f003 fa3f 	bl	8006d84 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003908:	4618      	mov	r0, r3
 800390a:	3728      	adds	r7, #40	@ 0x28
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	200001d4 	.word	0x200001d4
 8003914:	200001b0 	.word	0x200001b0
 8003918:	20000164 	.word	0x20000164
 800391c:	20000168 	.word	0x20000168
 8003920:	200001c4 	.word	0x200001c4
 8003924:	200001cc 	.word	0x200001cc
 8003928:	200001b4 	.word	0x200001b4
 800392c:	200000d8 	.word	0x200000d8
 8003930:	200000d4 	.word	0x200000d4
 8003934:	200001c0 	.word	0x200001c0
 8003938:	200001bc 	.word	0x200001bc

0800393c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003942:	4b2f      	ldr	r3, [pc, #188]	@ (8003a00 <vTaskSwitchContext+0xc4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800394a:	4b2e      	ldr	r3, [pc, #184]	@ (8003a04 <vTaskSwitchContext+0xc8>)
 800394c:	2201      	movs	r2, #1
 800394e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003950:	e051      	b.n	80039f6 <vTaskSwitchContext+0xba>
            xYieldPendings[ 0 ] = pdFALSE;
 8003952:	4b2c      	ldr	r3, [pc, #176]	@ (8003a04 <vTaskSwitchContext+0xc8>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003958:	4b2b      	ldr	r3, [pc, #172]	@ (8003a08 <vTaskSwitchContext+0xcc>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	fab3 f383 	clz	r3, r3
 8003964:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8003966:	7afb      	ldrb	r3, [r7, #11]
 8003968:	f1c3 031f 	rsb	r3, r3, #31
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	4927      	ldr	r1, [pc, #156]	@ (8003a0c <vTaskSwitchContext+0xd0>)
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10d      	bne.n	800399e <vTaskSwitchContext+0x62>
    __asm volatile
 8003982:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003986:	b672      	cpsid	i
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	b662      	cpsie	i
 8003996:	607b      	str	r3, [r7, #4]
}
 8003998:	bf00      	nop
 800399a:	bf00      	nop
 800399c:	e7fd      	b.n	800399a <vTaskSwitchContext+0x5e>
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4a18      	ldr	r2, [pc, #96]	@ (8003a0c <vTaskSwitchContext+0xd0>)
 80039aa:	4413      	add	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	605a      	str	r2, [r3, #4]
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	3308      	adds	r3, #8
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d103      	bne.n	80039cc <vTaskSwitchContext+0x90>
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	4a0f      	ldr	r2, [pc, #60]	@ (8003a10 <vTaskSwitchContext+0xd4>)
 80039d4:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 80039d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003a14 <vTaskSwitchContext+0xd8>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	4b0d      	ldr	r3, [pc, #52]	@ (8003a10 <vTaskSwitchContext+0xd4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d102      	bne.n	80039e8 <vTaskSwitchContext+0xac>
 80039e2:	f003 fa27 	bl	8006e34 <SEGGER_SYSVIEW_OnIdle>
 80039e6:	e004      	b.n	80039f2 <vTaskSwitchContext+0xb6>
 80039e8:	4b09      	ldr	r3, [pc, #36]	@ (8003a10 <vTaskSwitchContext+0xd4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f003 fa7f 	bl	8006ef0 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80039f2:	4b07      	ldr	r3, [pc, #28]	@ (8003a10 <vTaskSwitchContext+0xd4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
    }
 80039f6:	bf00      	nop
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	200001d4 	.word	0x200001d4
 8003a04:	200001c0 	.word	0x200001c0
 8003a08:	200001b4 	.word	0x200001b4
 8003a0c:	200000d8 	.word	0x200000d8
 8003a10:	200000d4 	.word	0x200000d4
 8003a14:	200001d0 	.word	0x200001d0

08003a18 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10d      	bne.n	8003a44 <vTaskPlaceOnEventList+0x2c>
    __asm volatile
 8003a28:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003a2c:	b672      	cpsid	i
 8003a2e:	f383 8811 	msr	BASEPRI, r3
 8003a32:	f3bf 8f6f 	isb	sy
 8003a36:	f3bf 8f4f 	dsb	sy
 8003a3a:	b662      	cpsie	i
 8003a3c:	60fb      	str	r3, [r7, #12]
}
 8003a3e:	bf00      	nop
 8003a40:	bf00      	nop
 8003a42:	e7fd      	b.n	8003a40 <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a44:	4b08      	ldr	r3, [pc, #32]	@ (8003a68 <vTaskPlaceOnEventList+0x50>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3318      	adds	r3, #24
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7fe fc46 	bl	80022de <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a52:	2101      	movs	r1, #1
 8003a54:	6838      	ldr	r0, [r7, #0]
 8003a56:	f000 fb69 	bl	800412c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8003a5a:	20e1      	movs	r0, #225	@ 0xe1
 8003a5c:	f003 f956 	bl	8006d0c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003a60:	bf00      	nop
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	200000d4 	.word	0x200000d4

08003a6c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10d      	bne.n	8003a9a <vTaskPlaceOnEventListRestricted+0x2e>
    __asm volatile
 8003a7e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003a82:	b672      	cpsid	i
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	b662      	cpsie	i
 8003a92:	613b      	str	r3, [r7, #16]
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	e7fd      	b.n	8003a96 <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	4b17      	ldr	r3, [pc, #92]	@ (8003b00 <vTaskPlaceOnEventListRestricted+0x94>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	61da      	str	r2, [r3, #28]
 8003aa8:	4b15      	ldr	r3, [pc, #84]	@ (8003b00 <vTaskPlaceOnEventListRestricted+0x94>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	6892      	ldr	r2, [r2, #8]
 8003ab0:	621a      	str	r2, [r3, #32]
 8003ab2:	4b13      	ldr	r3, [pc, #76]	@ (8003b00 <vTaskPlaceOnEventListRestricted+0x94>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	3218      	adds	r2, #24
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	4b10      	ldr	r3, [pc, #64]	@ (8003b00 <vTaskPlaceOnEventListRestricted+0x94>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f103 0218 	add.w	r2, r3, #24
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	609a      	str	r2, [r3, #8]
 8003aca:	4b0d      	ldr	r3, [pc, #52]	@ (8003b00 <vTaskPlaceOnEventListRestricted+0x94>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 8003ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	68b8      	ldr	r0, [r7, #8]
 8003aec:	f000 fb1e 	bl	800412c <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8003af0:	20e3      	movs	r0, #227	@ 0xe3
 8003af2:	f003 f90b 	bl	8006d0c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003af6:	bf00      	nop
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	200000d4 	.word	0x200000d4

08003b04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08a      	sub	sp, #40	@ 0x28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10d      	bne.n	8003b36 <xTaskRemoveFromEventList+0x32>
    __asm volatile
 8003b1a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003b1e:	b672      	cpsid	i
 8003b20:	f383 8811 	msr	BASEPRI, r3
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	b662      	cpsie	i
 8003b2e:	60fb      	str	r3, [r7, #12]
}
 8003b30:	bf00      	nop
 8003b32:	bf00      	nop
 8003b34:	e7fd      	b.n	8003b32 <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3a:	61fb      	str	r3, [r7, #28]
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	6a3a      	ldr	r2, [r7, #32]
 8003b42:	6a12      	ldr	r2, [r2, #32]
 8003b44:	609a      	str	r2, [r3, #8]
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	6a3a      	ldr	r2, [r7, #32]
 8003b4c:	69d2      	ldr	r2, [r2, #28]
 8003b4e:	605a      	str	r2, [r3, #4]
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	3318      	adds	r3, #24
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d103      	bne.n	8003b64 <xTaskRemoveFromEventList+0x60>
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	6a1a      	ldr	r2, [r3, #32]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	605a      	str	r2, [r3, #4]
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	2200      	movs	r2, #0
 8003b68:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	1e5a      	subs	r2, r3, #1
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003b74:	4b4e      	ldr	r3, [pc, #312]	@ (8003cb0 <xTaskRemoveFromEventList+0x1ac>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d164      	bne.n	8003c46 <xTaskRemoveFromEventList+0x142>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	6a3a      	ldr	r2, [r7, #32]
 8003b88:	68d2      	ldr	r2, [r2, #12]
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	6a3a      	ldr	r2, [r7, #32]
 8003b92:	6892      	ldr	r2, [r2, #8]
 8003b94:	605a      	str	r2, [r3, #4]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d103      	bne.n	8003baa <xTaskRemoveFromEventList+0xa6>
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	605a      	str	r2, [r3, #4]
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	2200      	movs	r2, #0
 8003bae:	615a      	str	r2, [r3, #20]
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	1e5a      	subs	r2, r3, #1
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f003 f9d9 	bl	8006f74 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	409a      	lsls	r2, r3
 8003bca:	4b3a      	ldr	r3, [pc, #232]	@ (8003cb4 <xTaskRemoveFromEventList+0x1b0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	4a38      	ldr	r2, [pc, #224]	@ (8003cb4 <xTaskRemoveFromEventList+0x1b0>)
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bd8:	4937      	ldr	r1, [pc, #220]	@ (8003cb8 <xTaskRemoveFromEventList+0x1b4>)
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	3304      	adds	r3, #4
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	60da      	str	r2, [r3, #12]
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	6a3a      	ldr	r2, [r7, #32]
 8003bfe:	3204      	adds	r2, #4
 8003c00:	605a      	str	r2, [r3, #4]
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	1d1a      	adds	r2, r3, #4
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	609a      	str	r2, [r3, #8]
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4a28      	ldr	r2, [pc, #160]	@ (8003cb8 <xTaskRemoveFromEventList+0x1b4>)
 8003c18:	441a      	add	r2, r3
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	615a      	str	r2, [r3, #20]
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c22:	4925      	ldr	r1, [pc, #148]	@ (8003cb8 <xTaskRemoveFromEventList+0x1b4>)
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6a3a      	ldr	r2, [r7, #32]
 8003c32:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c34:	1c59      	adds	r1, r3, #1
 8003c36:	4820      	ldr	r0, [pc, #128]	@ (8003cb8 <xTaskRemoveFromEventList+0x1b4>)
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4403      	add	r3, r0
 8003c42:	6019      	str	r1, [r3, #0]
 8003c44:	e01b      	b.n	8003c7e <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c46:	4b1d      	ldr	r3, [pc, #116]	@ (8003cbc <xTaskRemoveFromEventList+0x1b8>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	61bb      	str	r3, [r7, #24]
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	61da      	str	r2, [r3, #28]
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	621a      	str	r2, [r3, #32]
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	6a3a      	ldr	r2, [r7, #32]
 8003c60:	3218      	adds	r2, #24
 8003c62:	605a      	str	r2, [r3, #4]
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	f103 0218 	add.w	r2, r3, #24
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	609a      	str	r2, [r3, #8]
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	4a12      	ldr	r2, [pc, #72]	@ (8003cbc <xTaskRemoveFromEventList+0x1b8>)
 8003c72:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c74:	4b11      	ldr	r3, [pc, #68]	@ (8003cbc <xTaskRemoveFromEventList+0x1b8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	4a10      	ldr	r2, [pc, #64]	@ (8003cbc <xTaskRemoveFromEventList+0x1b8>)
 8003c7c:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c82:	4b0f      	ldr	r3, [pc, #60]	@ (8003cc0 <xTaskRemoveFromEventList+0x1bc>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d905      	bls.n	8003c98 <xTaskRemoveFromEventList+0x194>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003c90:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc4 <xTaskRemoveFromEventList+0x1c0>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	e001      	b.n	8003c9c <xTaskRemoveFromEventList+0x198>
        }
        else
        {
            xReturn = pdFALSE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	20e4      	movs	r0, #228	@ 0xe4
 8003ca2:	f003 f86f 	bl	8006d84 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3728      	adds	r7, #40	@ 0x28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	200001d4 	.word	0x200001d4
 8003cb4:	200001b4 	.word	0x200001b4
 8003cb8:	200000d8 	.word	0x200000d8
 8003cbc:	2000016c 	.word	0x2000016c
 8003cc0:	200000d4 	.word	0x200000d4
 8003cc4:	200001c0 	.word	0x200001c0

08003cc8 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003cd0:	4b07      	ldr	r3, [pc, #28]	@ (8003cf0 <vTaskInternalSetTimeOutState+0x28>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003cd8:	4b06      	ldr	r3, [pc, #24]	@ (8003cf4 <vTaskInternalSetTimeOutState+0x2c>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8003ce0:	20e7      	movs	r0, #231	@ 0xe7
 8003ce2:	f003 f813 	bl	8006d0c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	200001c4 	.word	0x200001c4
 8003cf4:	200001b0 	.word	0x200001b0

08003cf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10d      	bne.n	8003d24 <xTaskCheckForTimeOut+0x2c>
    __asm volatile
 8003d08:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003d0c:	b672      	cpsid	i
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	b662      	cpsie	i
 8003d1c:	613b      	str	r3, [r7, #16]
}
 8003d1e:	bf00      	nop
 8003d20:	bf00      	nop
 8003d22:	e7fd      	b.n	8003d20 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10d      	bne.n	8003d46 <xTaskCheckForTimeOut+0x4e>
    __asm volatile
 8003d2a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003d2e:	b672      	cpsid	i
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	b662      	cpsie	i
 8003d3e:	60fb      	str	r3, [r7, #12]
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	e7fd      	b.n	8003d42 <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 8003d46:	f000 fe9d 	bl	8004a84 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003d4a:	4b21      	ldr	r3, [pc, #132]	@ (8003dd0 <xTaskCheckForTimeOut+0xd8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d62:	d102      	bne.n	8003d6a <xTaskCheckForTimeOut+0x72>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61fb      	str	r3, [r7, #28]
 8003d68:	e026      	b.n	8003db8 <xTaskCheckForTimeOut+0xc0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	4b19      	ldr	r3, [pc, #100]	@ (8003dd4 <xTaskCheckForTimeOut+0xdc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d00a      	beq.n	8003d8c <xTaskCheckForTimeOut+0x94>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d305      	bcc.n	8003d8c <xTaskCheckForTimeOut+0x94>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003d80:	2301      	movs	r3, #1
 8003d82:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e015      	b.n	8003db8 <xTaskCheckForTimeOut+0xc0>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d20b      	bcs.n	8003dae <xTaskCheckForTimeOut+0xb6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	1ad2      	subs	r2, r2, r3
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff ff90 	bl	8003cc8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	e004      	b.n	8003db8 <xTaskCheckForTimeOut+0xc0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003db4:	2301      	movs	r3, #1
 8003db6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003db8:	f000 fe9a 	bl	8004af0 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	20e8      	movs	r0, #232	@ 0xe8
 8003dc2:	f002 ffdf 	bl	8006d84 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3720      	adds	r7, #32
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	200001b0 	.word	0x200001b0
 8003dd4:	200001c4 	.word	0x200001c4

08003dd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003ddc:	4b03      	ldr	r3, [pc, #12]	@ (8003dec <vTaskMissedYield+0x14>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8003de2:	20e9      	movs	r0, #233	@ 0xe9
 8003de4:	f002 ff92 	bl	8006d0c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003de8:	bf00      	nop
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	200001c0 	.word	0x200001c0

08003df0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003df8:	f000 f852 	bl	8003ea0 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003dfc:	4b06      	ldr	r3, [pc, #24]	@ (8003e18 <prvIdleTask+0x28>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d9f9      	bls.n	8003df8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003e04:	4b05      	ldr	r3, [pc, #20]	@ (8003e1c <prvIdleTask+0x2c>)
 8003e06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003e14:	e7f0      	b.n	8003df8 <prvIdleTask+0x8>
 8003e16:	bf00      	nop
 8003e18:	200000d8 	.word	0x200000d8
 8003e1c:	e000ed04 	.word	0xe000ed04

08003e20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e26:	2300      	movs	r3, #0
 8003e28:	607b      	str	r3, [r7, #4]
 8003e2a:	e00c      	b.n	8003e46 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4a12      	ldr	r2, [pc, #72]	@ (8003e80 <prvInitialiseTaskLists+0x60>)
 8003e38:	4413      	add	r3, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe fa1e 	bl	800227c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3301      	adds	r3, #1
 8003e44:	607b      	str	r3, [r7, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d9ef      	bls.n	8003e2c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003e4c:	480d      	ldr	r0, [pc, #52]	@ (8003e84 <prvInitialiseTaskLists+0x64>)
 8003e4e:	f7fe fa15 	bl	800227c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003e52:	480d      	ldr	r0, [pc, #52]	@ (8003e88 <prvInitialiseTaskLists+0x68>)
 8003e54:	f7fe fa12 	bl	800227c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003e58:	480c      	ldr	r0, [pc, #48]	@ (8003e8c <prvInitialiseTaskLists+0x6c>)
 8003e5a:	f7fe fa0f 	bl	800227c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003e5e:	480c      	ldr	r0, [pc, #48]	@ (8003e90 <prvInitialiseTaskLists+0x70>)
 8003e60:	f7fe fa0c 	bl	800227c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003e64:	480b      	ldr	r0, [pc, #44]	@ (8003e94 <prvInitialiseTaskLists+0x74>)
 8003e66:	f7fe fa09 	bl	800227c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e98 <prvInitialiseTaskLists+0x78>)
 8003e6c:	4a05      	ldr	r2, [pc, #20]	@ (8003e84 <prvInitialiseTaskLists+0x64>)
 8003e6e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e70:	4b0a      	ldr	r3, [pc, #40]	@ (8003e9c <prvInitialiseTaskLists+0x7c>)
 8003e72:	4a05      	ldr	r2, [pc, #20]	@ (8003e88 <prvInitialiseTaskLists+0x68>)
 8003e74:	601a      	str	r2, [r3, #0]
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	200000d8 	.word	0x200000d8
 8003e84:	2000013c 	.word	0x2000013c
 8003e88:	20000150 	.word	0x20000150
 8003e8c:	2000016c 	.word	0x2000016c
 8003e90:	20000180 	.word	0x20000180
 8003e94:	20000198 	.word	0x20000198
 8003e98:	20000164 	.word	0x20000164
 8003e9c:	20000168 	.word	0x20000168

08003ea0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ea6:	e019      	b.n	8003edc <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003ea8:	f000 fdec 	bl	8004a84 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003eac:	4b10      	ldr	r3, [pc, #64]	@ (8003ef0 <prvCheckTasksWaitingTermination+0x50>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fe fa4b 	bl	8002354 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef4 <prvCheckTasksWaitingTermination+0x54>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	4a0b      	ldr	r2, [pc, #44]	@ (8003ef4 <prvCheckTasksWaitingTermination+0x54>)
 8003ec6:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef8 <prvCheckTasksWaitingTermination+0x58>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef8 <prvCheckTasksWaitingTermination+0x58>)
 8003ed0:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003ed2:	f000 fe0d 	bl	8004af0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f810 	bl	8003efc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003edc:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <prvCheckTasksWaitingTermination+0x58>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1e1      	bne.n	8003ea8 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000180 	.word	0x20000180
 8003ef4:	200001ac 	.word	0x200001ac
 8003ef8:	20000194 	.word	0x20000194

08003efc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f001 f835 	bl	8004f78 <vPortFree>
            vPortFree( pxTCB );
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f001 f832 	bl	8004f78 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003f14:	bf00      	nop
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f20:	4b0a      	ldr	r3, [pc, #40]	@ (8003f4c <prvResetNextTaskUnblockTime+0x30>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d104      	bne.n	8003f34 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003f2a:	4b09      	ldr	r3, [pc, #36]	@ (8003f50 <prvResetNextTaskUnblockTime+0x34>)
 8003f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f30:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003f32:	e005      	b.n	8003f40 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f34:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <prvResetNextTaskUnblockTime+0x30>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a04      	ldr	r2, [pc, #16]	@ (8003f50 <prvResetNextTaskUnblockTime+0x34>)
 8003f3e:	6013      	str	r3, [r2, #0]
}
 8003f40:	bf00      	nop
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	20000164 	.word	0x20000164
 8003f50:	200001cc 	.word	0x200001cc

08003f54 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 8003f5a:	4b08      	ldr	r3, [pc, #32]	@ (8003f7c <xTaskGetCurrentTaskHandle+0x28>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f003 f8a8 	bl	80070b8 <SEGGER_SYSVIEW_ShrinkId>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	20f4      	movs	r0, #244	@ 0xf4
 8003f6e:	f002 ff09 	bl	8006d84 <SEGGER_SYSVIEW_RecordEndCallU32>

            return xReturn;
 8003f72:	687b      	ldr	r3, [r7, #4]
        }
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	200000d4 	.word	0x200000d4

08003f80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8003f86:	4b0d      	ldr	r3, [pc, #52]	@ (8003fbc <xTaskGetSchedulerState+0x3c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d102      	bne.n	8003f94 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	e008      	b.n	8003fa6 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003f94:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc0 <xTaskGetSchedulerState+0x40>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d102      	bne.n	8003fa2 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	607b      	str	r3, [r7, #4]
 8003fa0:	e001      	b.n	8003fa6 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4619      	mov	r1, r3
 8003faa:	20f5      	movs	r0, #245	@ 0xf5
 8003fac:	f002 feea 	bl	8006d84 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003fb0:	687b      	ldr	r3, [r7, #4]
    }
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	200001b8 	.word	0x200001b8
 8003fc0:	200001d4 	.word	0x200001d4

08003fc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 8098 	beq.w	800410c <xTaskPriorityDisinherit+0x148>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003fdc:	4b50      	ldr	r3, [pc, #320]	@ (8004120 <xTaskPriorityDisinherit+0x15c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d00d      	beq.n	8004002 <xTaskPriorityDisinherit+0x3e>
    __asm volatile
 8003fe6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003fea:	b672      	cpsid	i
 8003fec:	f383 8811 	msr	BASEPRI, r3
 8003ff0:	f3bf 8f6f 	isb	sy
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	b662      	cpsie	i
 8003ffa:	613b      	str	r3, [r7, #16]
}
 8003ffc:	bf00      	nop
 8003ffe:	bf00      	nop
 8004000:	e7fd      	b.n	8003ffe <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10d      	bne.n	8004026 <xTaskPriorityDisinherit+0x62>
    __asm volatile
 800400a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800400e:	b672      	cpsid	i
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	b662      	cpsie	i
 800401e:	60fb      	str	r3, [r7, #12]
}
 8004020:	bf00      	nop
 8004022:	bf00      	nop
 8004024:	e7fd      	b.n	8004022 <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800402a:	1e5a      	subs	r2, r3, #1
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004038:	429a      	cmp	r2, r3
 800403a:	d067      	beq.n	800410c <xTaskPriorityDisinherit+0x148>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004040:	2b00      	cmp	r3, #0
 8004042:	d163      	bne.n	800410c <xTaskPriorityDisinherit+0x148>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	3304      	adds	r3, #4
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe f983 	bl	8002354 <uxListRemove>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10a      	bne.n	800406a <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004058:	2201      	movs	r2, #1
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43da      	mvns	r2, r3
 8004060:	4b30      	ldr	r3, [pc, #192]	@ (8004124 <xTaskPriorityDisinherit+0x160>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4013      	ands	r3, r2
 8004066:	4a2f      	ldr	r2, [pc, #188]	@ (8004124 <xTaskPriorityDisinherit+0x160>)
 8004068:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004076:	f1c3 0205 	rsb	r2, r3, #5
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	4618      	mov	r0, r3
 8004082:	f002 ff77 	bl	8006f74 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408a:	2201      	movs	r2, #1
 800408c:	409a      	lsls	r2, r3
 800408e:	4b25      	ldr	r3, [pc, #148]	@ (8004124 <xTaskPriorityDisinherit+0x160>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4313      	orrs	r3, r2
 8004094:	4a23      	ldr	r2, [pc, #140]	@ (8004124 <xTaskPriorityDisinherit+0x160>)
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800409c:	4922      	ldr	r1, [pc, #136]	@ (8004128 <xTaskPriorityDisinherit+0x164>)
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	3304      	adds	r3, #4
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	60da      	str	r2, [r3, #12]
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	3204      	adds	r2, #4
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	1d1a      	adds	r2, r3, #4
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	609a      	str	r2, [r3, #8]
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4a13      	ldr	r2, [pc, #76]	@ (8004128 <xTaskPriorityDisinherit+0x164>)
 80040dc:	441a      	add	r2, r3
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	615a      	str	r2, [r3, #20]
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e6:	4910      	ldr	r1, [pc, #64]	@ (8004128 <xTaskPriorityDisinherit+0x164>)
 80040e8:	4613      	mov	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80040f8:	1c59      	adds	r1, r3, #1
 80040fa:	480b      	ldr	r0, [pc, #44]	@ (8004128 <xTaskPriorityDisinherit+0x164>)
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4403      	add	r3, r0
 8004106:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004108:	2301      	movs	r3, #1
 800410a:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	4619      	mov	r1, r3
 8004110:	20f7      	movs	r0, #247	@ 0xf7
 8004112:	f002 fe37 	bl	8006d84 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004116:	69fb      	ldr	r3, [r7, #28]
    }
 8004118:	4618      	mov	r0, r3
 800411a:	3720      	adds	r7, #32
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	200000d4 	.word	0x200000d4
 8004124:	200001b4 	.word	0x200001b4
 8004128:	200000d8 	.word	0x200000d8

0800412c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004136:	4b3d      	ldr	r3, [pc, #244]	@ (800422c <prvAddCurrentTaskToDelayedList+0x100>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 800413c:	4b3c      	ldr	r3, [pc, #240]	@ (8004230 <prvAddCurrentTaskToDelayedList+0x104>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8004142:	4b3c      	ldr	r3, [pc, #240]	@ (8004234 <prvAddCurrentTaskToDelayedList+0x108>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004148:	4b3b      	ldr	r3, [pc, #236]	@ (8004238 <prvAddCurrentTaskToDelayedList+0x10c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3304      	adds	r3, #4
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe f900 	bl	8002354 <uxListRemove>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10b      	bne.n	8004172 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800415a:	4b37      	ldr	r3, [pc, #220]	@ (8004238 <prvAddCurrentTaskToDelayedList+0x10c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004160:	2201      	movs	r2, #1
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	43da      	mvns	r2, r3
 8004168:	4b34      	ldr	r3, [pc, #208]	@ (800423c <prvAddCurrentTaskToDelayedList+0x110>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4013      	ands	r3, r2
 800416e:	4a33      	ldr	r2, [pc, #204]	@ (800423c <prvAddCurrentTaskToDelayedList+0x110>)
 8004170:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d124      	bne.n	80041c4 <prvAddCurrentTaskToDelayedList+0x98>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d021      	beq.n	80041c4 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004180:	4b2f      	ldr	r3, [pc, #188]	@ (8004240 <prvAddCurrentTaskToDelayedList+0x114>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	4b2c      	ldr	r3, [pc, #176]	@ (8004238 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	609a      	str	r2, [r3, #8]
 800418e:	4b2a      	ldr	r3, [pc, #168]	@ (8004238 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	6892      	ldr	r2, [r2, #8]
 8004196:	60da      	str	r2, [r3, #12]
 8004198:	4b27      	ldr	r3, [pc, #156]	@ (8004238 <prvAddCurrentTaskToDelayedList+0x10c>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	3204      	adds	r2, #4
 80041a2:	605a      	str	r2, [r3, #4]
 80041a4:	4b24      	ldr	r3, [pc, #144]	@ (8004238 <prvAddCurrentTaskToDelayedList+0x10c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	1d1a      	adds	r2, r3, #4
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	609a      	str	r2, [r3, #8]
 80041ae:	4b22      	ldr	r3, [pc, #136]	@ (8004238 <prvAddCurrentTaskToDelayedList+0x10c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a23      	ldr	r2, [pc, #140]	@ (8004240 <prvAddCurrentTaskToDelayedList+0x114>)
 80041b4:	615a      	str	r2, [r3, #20]
 80041b6:	4b22      	ldr	r3, [pc, #136]	@ (8004240 <prvAddCurrentTaskToDelayedList+0x114>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3301      	adds	r3, #1
 80041bc:	4a20      	ldr	r2, [pc, #128]	@ (8004240 <prvAddCurrentTaskToDelayedList+0x114>)
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80041c2:	e02e      	b.n	8004222 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80041c4:	69fa      	ldr	r2, [r7, #28]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4413      	add	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004238 <prvAddCurrentTaskToDelayedList+0x10c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d20d      	bcs.n	80041f8 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80041dc:	4b16      	ldr	r3, [pc, #88]	@ (8004238 <prvAddCurrentTaskToDelayedList+0x10c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2104      	movs	r1, #4
 80041e2:	4618      	mov	r0, r3
 80041e4:	f002 ff08 	bl	8006ff8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80041e8:	4b13      	ldr	r3, [pc, #76]	@ (8004238 <prvAddCurrentTaskToDelayedList+0x10c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3304      	adds	r3, #4
 80041ee:	4619      	mov	r1, r3
 80041f0:	6978      	ldr	r0, [r7, #20]
 80041f2:	f7fe f874 	bl	80022de <vListInsert>
}
 80041f6:	e014      	b.n	8004222 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 80041f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004238 <prvAddCurrentTaskToDelayedList+0x10c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2104      	movs	r1, #4
 80041fe:	4618      	mov	r0, r3
 8004200:	f002 fefa 	bl	8006ff8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004204:	4b0c      	ldr	r3, [pc, #48]	@ (8004238 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3304      	adds	r3, #4
 800420a:	4619      	mov	r1, r3
 800420c:	69b8      	ldr	r0, [r7, #24]
 800420e:	f7fe f866 	bl	80022de <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004212:	4b0c      	ldr	r3, [pc, #48]	@ (8004244 <prvAddCurrentTaskToDelayedList+0x118>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	429a      	cmp	r2, r3
 800421a:	d202      	bcs.n	8004222 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 800421c:	4a09      	ldr	r2, [pc, #36]	@ (8004244 <prvAddCurrentTaskToDelayedList+0x118>)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6013      	str	r3, [r2, #0]
}
 8004222:	bf00      	nop
 8004224:	3720      	adds	r7, #32
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	200001b0 	.word	0x200001b0
 8004230:	20000164 	.word	0x20000164
 8004234:	20000168 	.word	0x20000168
 8004238:	200000d4 	.word	0x200000d4
 800423c:	200001b4 	.word	0x200001b4
 8004240:	20000198 	.word	0x20000198
 8004244:	200001cc 	.word	0x200001cc

08004248 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800424e:	2300      	movs	r3, #0
 8004250:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004252:	f000 fa7d 	bl	8004750 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004256:	4b16      	ldr	r3, [pc, #88]	@ (80042b0 <xTimerCreateTimerTask+0x68>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800425e:	4b15      	ldr	r3, [pc, #84]	@ (80042b4 <xTimerCreateTimerTask+0x6c>)
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	2304      	movs	r3, #4
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	2300      	movs	r3, #0
 8004268:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800426c:	4912      	ldr	r1, [pc, #72]	@ (80042b8 <xTimerCreateTimerTask+0x70>)
 800426e:	4813      	ldr	r0, [pc, #76]	@ (80042bc <xTimerCreateTimerTask+0x74>)
 8004270:	f7fe fcf2 	bl	8002c58 <xTaskCreate>
 8004274:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10d      	bne.n	8004298 <xTimerCreateTimerTask+0x50>
    __asm volatile
 800427c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004280:	b672      	cpsid	i
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	b662      	cpsie	i
 8004290:	603b      	str	r3, [r7, #0]
}
 8004292:	bf00      	nop
 8004294:	bf00      	nop
 8004296:	e7fd      	b.n	8004294 <xTimerCreateTimerTask+0x4c>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4619      	mov	r1, r3
 800429c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80042a0:	f002 fd70 	bl	8006d84 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80042a4:	687b      	ldr	r3, [r7, #4]
    }
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20000208 	.word	0x20000208
 80042b4:	2000020c 	.word	0x2000020c
 80042b8:	0800748c 	.word	0x0800748c
 80042bc:	08004365 	.word	0x08004365

080042c0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80042cc:	e008      	b.n	80042e0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	4413      	add	r3, r2
 80042d6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	699a      	ldr	r2, [r3, #24]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	18d1      	adds	r1, r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f8df 	bl	80044b0 <prvInsertTimerInActiveList>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1ea      	bne.n	80042ce <prvReloadTimer+0xe>
        }
    }
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800430e:	4b14      	ldr	r3, [pc, #80]	@ (8004360 <prvProcessExpiredTimer+0x5c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3304      	adds	r3, #4
 800431c:	4618      	mov	r0, r3
 800431e:	f7fe f819 	bl	8002354 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d005      	beq.n	800433c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f7ff ffc3 	bl	80042c0 <prvReloadTimer>
 800433a:	e008      	b.n	800434e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	b2da      	uxtb	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	4798      	blx	r3
    }
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000200 	.word	0x20000200

08004364 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800436c:	f107 0308 	add.w	r3, r7, #8
 8004370:	4618      	mov	r0, r3
 8004372:	f000 f859 	bl	8004428 <prvGetNextExpireTime>
 8004376:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4619      	mov	r1, r3
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f805 	bl	800438c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004382:	f000 f8d7 	bl	8004534 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004386:	bf00      	nop
 8004388:	e7f0      	b.n	800436c <prvTimerTask+0x8>
	...

0800438c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004396:	f7fe ff91 	bl	80032bc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800439a:	f107 0308 	add.w	r3, r7, #8
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 f866 	bl	8004470 <prvSampleTimeNow>
 80043a4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d130      	bne.n	800440e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10a      	bne.n	80043c8 <prvProcessTimerOrBlockTask+0x3c>
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d806      	bhi.n	80043c8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80043ba:	f7fe ff8d 	bl	80032d8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80043be:	68f9      	ldr	r1, [r7, #12]
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff ff9f 	bl	8004304 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80043c6:	e024      	b.n	8004412 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d008      	beq.n	80043e0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80043ce:	4b13      	ldr	r3, [pc, #76]	@ (800441c <prvProcessTimerOrBlockTask+0x90>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <prvProcessTimerOrBlockTask+0x50>
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <prvProcessTimerOrBlockTask+0x52>
 80043dc:	2300      	movs	r3, #0
 80043de:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80043e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004420 <prvProcessTimerOrBlockTask+0x94>)
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	4619      	mov	r1, r3
 80043ee:	f7fe fb47 	bl	8002a80 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80043f2:	f7fe ff71 	bl	80032d8 <xTaskResumeAll>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 80043fc:	4b09      	ldr	r3, [pc, #36]	@ (8004424 <prvProcessTimerOrBlockTask+0x98>)
 80043fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	f3bf 8f6f 	isb	sy
    }
 800440c:	e001      	b.n	8004412 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800440e:	f7fe ff63 	bl	80032d8 <xTaskResumeAll>
    }
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000204 	.word	0x20000204
 8004420:	20000208 	.word	0x20000208
 8004424:	e000ed04 	.word	0xe000ed04

08004428 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004430:	4b0e      	ldr	r3, [pc, #56]	@ (800446c <prvGetNextExpireTime+0x44>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <prvGetNextExpireTime+0x16>
 800443a:	2201      	movs	r2, #1
 800443c:	e000      	b.n	8004440 <prvGetNextExpireTime+0x18>
 800443e:	2200      	movs	r2, #0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d105      	bne.n	8004458 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800444c:	4b07      	ldr	r3, [pc, #28]	@ (800446c <prvGetNextExpireTime+0x44>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	e001      	b.n	800445c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800445c:	68fb      	ldr	r3, [r7, #12]
    }
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	20000200 	.word	0x20000200

08004470 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8004478:	f7ff f842 	bl	8003500 <xTaskGetTickCount>
 800447c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800447e:	4b0b      	ldr	r3, [pc, #44]	@ (80044ac <prvSampleTimeNow+0x3c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	429a      	cmp	r2, r3
 8004486:	d205      	bcs.n	8004494 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004488:	f000 f93c 	bl	8004704 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	e002      	b.n	800449a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800449a:	4a04      	ldr	r2, [pc, #16]	@ (80044ac <prvSampleTimeNow+0x3c>)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80044a0:	68fb      	ldr	r3, [r7, #12]
    }
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20000210 	.word	0x20000210

080044b0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d812      	bhi.n	80044fc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	1ad2      	subs	r2, r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d302      	bcc.n	80044ea <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80044e4:	2301      	movs	r3, #1
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	e01b      	b.n	8004522 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80044ea:	4b10      	ldr	r3, [pc, #64]	@ (800452c <prvInsertTimerInActiveList+0x7c>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	3304      	adds	r3, #4
 80044f2:	4619      	mov	r1, r3
 80044f4:	4610      	mov	r0, r2
 80044f6:	f7fd fef2 	bl	80022de <vListInsert>
 80044fa:	e012      	b.n	8004522 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d206      	bcs.n	8004512 <prvInsertTimerInActiveList+0x62>
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d302      	bcc.n	8004512 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800450c:	2301      	movs	r3, #1
 800450e:	617b      	str	r3, [r7, #20]
 8004510:	e007      	b.n	8004522 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004512:	4b07      	ldr	r3, [pc, #28]	@ (8004530 <prvInsertTimerInActiveList+0x80>)
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	3304      	adds	r3, #4
 800451a:	4619      	mov	r1, r3
 800451c:	4610      	mov	r0, r2
 800451e:	f7fd fede 	bl	80022de <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004522:	697b      	ldr	r3, [r7, #20]
    }
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000204 	.word	0x20000204
 8004530:	20000200 	.word	0x20000200

08004534 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004534:	b580      	push	{r7, lr}
 8004536:	b08a      	sub	sp, #40	@ 0x28
 8004538:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800453a:	1d3b      	adds	r3, r7, #4
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	609a      	str	r2, [r3, #8]
 8004544:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004546:	e0cb      	b.n	80046e0 <prvProcessReceivedCommands+0x1ac>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	da1b      	bge.n	8004586 <prvProcessReceivedCommands+0x52>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800454e:	1d3b      	adds	r3, r7, #4
 8004550:	3304      	adds	r3, #4
 8004552:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8004554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10d      	bne.n	8004576 <prvProcessReceivedCommands+0x42>
    __asm volatile
 800455a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800455e:	b672      	cpsid	i
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	b662      	cpsie	i
 800456e:	61bb      	str	r3, [r7, #24]
}
 8004570:	bf00      	nop
 8004572:	bf00      	nop
 8004574:	e7fd      	b.n	8004572 <prvProcessReceivedCommands+0x3e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800457c:	6850      	ldr	r0, [r2, #4]
 800457e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004580:	6892      	ldr	r2, [r2, #8]
 8004582:	4611      	mov	r1, r2
 8004584:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	f2c0 80a9 	blt.w	80046e0 <prvProcessReceivedCommands+0x1ac>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d004      	beq.n	80045a4 <prvProcessReceivedCommands+0x70>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	3304      	adds	r3, #4
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fd fed8 	bl	8002354 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045a4:	463b      	mov	r3, r7
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff ff62 	bl	8004470 <prvSampleTimeNow>
 80045ac:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	f200 8091 	bhi.w	80046da <prvProcessReceivedCommands+0x1a6>
 80045b8:	a201      	add	r2, pc, #4	@ (adr r2, 80045c0 <prvProcessReceivedCommands+0x8c>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045e5 	.word	0x080045e5
 80045c4:	080045e5 	.word	0x080045e5
 80045c8:	0800464d 	.word	0x0800464d
 80045cc:	08004661 	.word	0x08004661
 80045d0:	080046b1 	.word	0x080046b1
 80045d4:	080045e5 	.word	0x080045e5
 80045d8:	080045e5 	.word	0x080045e5
 80045dc:	0800464d 	.word	0x0800464d
 80045e0:	08004661 	.word	0x08004661
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	18d1      	adds	r1, r2, r3
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	6a38      	ldr	r0, [r7, #32]
 8004604:	f7ff ff54 	bl	80044b0 <prvInsertTimerInActiveList>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d067      	beq.n	80046de <prvProcessReceivedCommands+0x1aa>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d009      	beq.n	8004630 <prvProcessReceivedCommands+0xfc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	4413      	add	r3, r2
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	4619      	mov	r1, r3
 8004628:	6a38      	ldr	r0, [r7, #32]
 800462a:	f7ff fe49 	bl	80042c0 <prvReloadTimer>
 800462e:	e008      	b.n	8004642 <prvProcessReceivedCommands+0x10e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004636:	f023 0301 	bic.w	r3, r3, #1
 800463a:	b2da      	uxtb	r2, r3
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	6a38      	ldr	r0, [r7, #32]
 8004648:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800464a:	e048      	b.n	80046de <prvProcessReceivedCommands+0x1aa>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004652:	f023 0301 	bic.w	r3, r3, #1
 8004656:	b2da      	uxtb	r2, r3
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800465e:	e03f      	b.n	80046e0 <prvProcessReceivedCommands+0x1ac>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	b2da      	uxtb	r2, r3
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10d      	bne.n	800469c <prvProcessReceivedCommands+0x168>
    __asm volatile
 8004680:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004684:	b672      	cpsid	i
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	b662      	cpsie	i
 8004694:	617b      	str	r3, [r7, #20]
}
 8004696:	bf00      	nop
 8004698:	bf00      	nop
 800469a:	e7fd      	b.n	8004698 <prvProcessReceivedCommands+0x164>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	699a      	ldr	r2, [r3, #24]
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	18d1      	adds	r1, r2, r3
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	6a38      	ldr	r0, [r7, #32]
 80046aa:	f7ff ff01 	bl	80044b0 <prvInsertTimerInActiveList>
                        break;
 80046ae:	e017      	b.n	80046e0 <prvProcessReceivedCommands+0x1ac>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d103      	bne.n	80046c6 <prvProcessReceivedCommands+0x192>
                            {
                                vPortFree( pxTimer );
 80046be:	6a38      	ldr	r0, [r7, #32]
 80046c0:	f000 fc5a 	bl	8004f78 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80046c4:	e00c      	b.n	80046e0 <prvProcessReceivedCommands+0x1ac>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046cc:	f023 0301 	bic.w	r3, r3, #1
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80046d8:	e002      	b.n	80046e0 <prvProcessReceivedCommands+0x1ac>

                    default:
                        /* Don't expect to get here. */
                        break;
 80046da:	bf00      	nop
 80046dc:	e000      	b.n	80046e0 <prvProcessReceivedCommands+0x1ac>
                        break;
 80046de:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80046e0:	4b07      	ldr	r3, [pc, #28]	@ (8004700 <prvProcessReceivedCommands+0x1cc>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	1d39      	adds	r1, r7, #4
 80046e6:	2200      	movs	r2, #0
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fd ff7d 	bl	80025e8 <xQueueReceive>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f47f af29 	bne.w	8004548 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 80046f6:	bf00      	nop
 80046f8:	bf00      	nop
 80046fa:	3728      	adds	r7, #40	@ 0x28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	20000208 	.word	0x20000208

08004704 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800470a:	e009      	b.n	8004720 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800470c:	4b0e      	ldr	r3, [pc, #56]	@ (8004748 <prvSwitchTimerLists+0x44>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004716:	f04f 31ff 	mov.w	r1, #4294967295
 800471a:	6838      	ldr	r0, [r7, #0]
 800471c:	f7ff fdf2 	bl	8004304 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004720:	4b09      	ldr	r3, [pc, #36]	@ (8004748 <prvSwitchTimerLists+0x44>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800472a:	4b07      	ldr	r3, [pc, #28]	@ (8004748 <prvSwitchTimerLists+0x44>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004730:	4b06      	ldr	r3, [pc, #24]	@ (800474c <prvSwitchTimerLists+0x48>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a04      	ldr	r2, [pc, #16]	@ (8004748 <prvSwitchTimerLists+0x44>)
 8004736:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004738:	4a04      	ldr	r2, [pc, #16]	@ (800474c <prvSwitchTimerLists+0x48>)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6013      	str	r3, [r2, #0]
    }
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000200 	.word	0x20000200
 800474c:	20000204 	.word	0x20000204

08004750 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004754:	f000 f996 	bl	8004a84 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004758:	4b12      	ldr	r3, [pc, #72]	@ (80047a4 <prvCheckForValidListAndQueue+0x54>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d11d      	bne.n	800479c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004760:	4811      	ldr	r0, [pc, #68]	@ (80047a8 <prvCheckForValidListAndQueue+0x58>)
 8004762:	f7fd fd8b 	bl	800227c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004766:	4811      	ldr	r0, [pc, #68]	@ (80047ac <prvCheckForValidListAndQueue+0x5c>)
 8004768:	f7fd fd88 	bl	800227c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800476c:	4b10      	ldr	r3, [pc, #64]	@ (80047b0 <prvCheckForValidListAndQueue+0x60>)
 800476e:	4a0e      	ldr	r2, [pc, #56]	@ (80047a8 <prvCheckForValidListAndQueue+0x58>)
 8004770:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004772:	4b10      	ldr	r3, [pc, #64]	@ (80047b4 <prvCheckForValidListAndQueue+0x64>)
 8004774:	4a0d      	ldr	r2, [pc, #52]	@ (80047ac <prvCheckForValidListAndQueue+0x5c>)
 8004776:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8004778:	2200      	movs	r2, #0
 800477a:	2110      	movs	r1, #16
 800477c:	2005      	movs	r0, #5
 800477e:	f7fd feb3 	bl	80024e8 <xQueueGenericCreate>
 8004782:	4603      	mov	r3, r0
 8004784:	4a07      	ldr	r2, [pc, #28]	@ (80047a4 <prvCheckForValidListAndQueue+0x54>)
 8004786:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004788:	4b06      	ldr	r3, [pc, #24]	@ (80047a4 <prvCheckForValidListAndQueue+0x54>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004790:	4b04      	ldr	r3, [pc, #16]	@ (80047a4 <prvCheckForValidListAndQueue+0x54>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4908      	ldr	r1, [pc, #32]	@ (80047b8 <prvCheckForValidListAndQueue+0x68>)
 8004796:	4618      	mov	r0, r3
 8004798:	f7fe f920 	bl	80029dc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800479c:	f000 f9a8 	bl	8004af0 <vPortExitCritical>
    }
 80047a0:	bf00      	nop
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	20000208 	.word	0x20000208
 80047a8:	200001d8 	.word	0x200001d8
 80047ac:	200001ec 	.word	0x200001ec
 80047b0:	20000200 	.word	0x20000200
 80047b4:	20000204 	.word	0x20000204
 80047b8:	08007494 	.word	0x08007494

080047bc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	3b04      	subs	r3, #4
 80047cc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3b04      	subs	r3, #4
 80047da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f023 0201 	bic.w	r2, r3, #1
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	3b04      	subs	r3, #4
 80047ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80047ec:	4a0c      	ldr	r2, [pc, #48]	@ (8004820 <pxPortInitialiseStack+0x64>)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3b14      	subs	r3, #20
 80047f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3b04      	subs	r3, #4
 8004802:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f06f 0202 	mvn.w	r2, #2
 800480a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	3b20      	subs	r3, #32
 8004810:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004812:	68fb      	ldr	r3, [r7, #12]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	08004825 	.word	0x08004825

08004824 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800482e:	4b15      	ldr	r3, [pc, #84]	@ (8004884 <prvTaskExitError+0x60>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004836:	d00d      	beq.n	8004854 <prvTaskExitError+0x30>
    __asm volatile
 8004838:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800483c:	b672      	cpsid	i
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	b662      	cpsie	i
 800484c:	60fb      	str	r3, [r7, #12]
}
 800484e:	bf00      	nop
 8004850:	bf00      	nop
 8004852:	e7fd      	b.n	8004850 <prvTaskExitError+0x2c>
    __asm volatile
 8004854:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004858:	b672      	cpsid	i
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	b662      	cpsie	i
 8004868:	60bb      	str	r3, [r7, #8]
}
 800486a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800486c:	bf00      	nop
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0fc      	beq.n	800486e <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20000010 	.word	0x20000010
	...

08004890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004890:	4b07      	ldr	r3, [pc, #28]	@ (80048b0 <pxCurrentTCBConst2>)
 8004892:	6819      	ldr	r1, [r3, #0]
 8004894:	6808      	ldr	r0, [r1, #0]
 8004896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489a:	f380 8809 	msr	PSP, r0
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f04f 0000 	mov.w	r0, #0
 80048a6:	f380 8811 	msr	BASEPRI, r0
 80048aa:	4770      	bx	lr
 80048ac:	f3af 8000 	nop.w

080048b0 <pxCurrentTCBConst2>:
 80048b0:	200000d4 	.word	0x200000d4
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop

080048b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80048b8:	4808      	ldr	r0, [pc, #32]	@ (80048dc <prvPortStartFirstTask+0x24>)
 80048ba:	6800      	ldr	r0, [r0, #0]
 80048bc:	6800      	ldr	r0, [r0, #0]
 80048be:	f380 8808 	msr	MSP, r0
 80048c2:	f04f 0000 	mov.w	r0, #0
 80048c6:	f380 8814 	msr	CONTROL, r0
 80048ca:	b662      	cpsie	i
 80048cc:	b661      	cpsie	f
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	df00      	svc	0
 80048d8:	bf00      	nop
 80048da:	0000      	.short	0x0000
 80048dc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop

080048e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	@ 0x28
 80048e8:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80048ea:	4b5c      	ldr	r3, [pc, #368]	@ (8004a5c <xPortStartScheduler+0x178>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80048f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f2:	332c      	adds	r3, #44	@ 0x2c
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a5a      	ldr	r2, [pc, #360]	@ (8004a60 <xPortStartScheduler+0x17c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00d      	beq.n	8004918 <xPortStartScheduler+0x34>
    __asm volatile
 80048fc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004900:	b672      	cpsid	i
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	b662      	cpsie	i
 8004910:	61fb      	str	r3, [r7, #28]
}
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	e7fd      	b.n	8004914 <xPortStartScheduler+0x30>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8004918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491a:	3338      	adds	r3, #56	@ 0x38
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a51      	ldr	r2, [pc, #324]	@ (8004a64 <xPortStartScheduler+0x180>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00d      	beq.n	8004940 <xPortStartScheduler+0x5c>
    __asm volatile
 8004924:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004928:	b672      	cpsid	i
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	b662      	cpsie	i
 8004938:	61bb      	str	r3, [r7, #24]
}
 800493a:	bf00      	nop
 800493c:	bf00      	nop
 800493e:	e7fd      	b.n	800493c <xPortStartScheduler+0x58>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004944:	4b48      	ldr	r3, [pc, #288]	@ (8004a68 <xPortStartScheduler+0x184>)
 8004946:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	22ff      	movs	r2, #255	@ 0xff
 8004954:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	b2db      	uxtb	r3, r3
 800495c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800495e:	79fb      	ldrb	r3, [r7, #7]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004966:	b2da      	uxtb	r2, r3
 8004968:	4b40      	ldr	r3, [pc, #256]	@ (8004a6c <xPortStartScheduler+0x188>)
 800496a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800496c:	4b3f      	ldr	r3, [pc, #252]	@ (8004a6c <xPortStartScheduler+0x188>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10d      	bne.n	8004990 <xPortStartScheduler+0xac>
    __asm volatile
 8004974:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004978:	b672      	cpsid	i
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	b662      	cpsie	i
 8004988:	617b      	str	r3, [r7, #20]
}
 800498a:	bf00      	nop
 800498c:	bf00      	nop
 800498e:	e7fd      	b.n	800498c <xPortStartScheduler+0xa8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004990:	79fb      	ldrb	r3, [r7, #7]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	43db      	mvns	r3, r3
 8004996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d015      	beq.n	80049ca <xPortStartScheduler+0xe6>
    __asm volatile
 800499e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80049a2:	b672      	cpsid	i
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	b662      	cpsie	i
 80049b2:	613b      	str	r3, [r7, #16]
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop
 80049b8:	e7fd      	b.n	80049b6 <xPortStartScheduler+0xd2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	3301      	adds	r3, #1
 80049be:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049c0:	79fb      	ldrb	r3, [r7, #7]
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d2:	2b80      	cmp	r3, #128	@ 0x80
 80049d4:	d0f1      	beq.n	80049ba <xPortStartScheduler+0xd6>
        }

        if( ulImplementedPrioBits == 8 )
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d103      	bne.n	80049e4 <xPortStartScheduler+0x100>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80049dc:	4b24      	ldr	r3, [pc, #144]	@ (8004a70 <xPortStartScheduler+0x18c>)
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	e004      	b.n	80049ee <xPortStartScheduler+0x10a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f1c3 0307 	rsb	r3, r3, #7
 80049ea:	4a21      	ldr	r2, [pc, #132]	@ (8004a70 <xPortStartScheduler+0x18c>)
 80049ec:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049ee:	4b20      	ldr	r3, [pc, #128]	@ (8004a70 <xPortStartScheduler+0x18c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004a70 <xPortStartScheduler+0x18c>)
 80049f6:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004a70 <xPortStartScheduler+0x18c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a00:	4a1b      	ldr	r2, [pc, #108]	@ (8004a70 <xPortStartScheduler+0x18c>)
 8004a02:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004a0c:	4b19      	ldr	r3, [pc, #100]	@ (8004a74 <xPortStartScheduler+0x190>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a18      	ldr	r2, [pc, #96]	@ (8004a74 <xPortStartScheduler+0x190>)
 8004a12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a16:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004a18:	4b16      	ldr	r3, [pc, #88]	@ (8004a74 <xPortStartScheduler+0x190>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a15      	ldr	r2, [pc, #84]	@ (8004a74 <xPortStartScheduler+0x190>)
 8004a1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a22:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8004a24:	4b14      	ldr	r3, [pc, #80]	@ (8004a78 <xPortStartScheduler+0x194>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004a2a:	f000 f8f1 	bl	8004c10 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004a2e:	4b13      	ldr	r3, [pc, #76]	@ (8004a7c <xPortStartScheduler+0x198>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004a34:	f000 f910 	bl	8004c58 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a38:	4b11      	ldr	r3, [pc, #68]	@ (8004a80 <xPortStartScheduler+0x19c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a10      	ldr	r2, [pc, #64]	@ (8004a80 <xPortStartScheduler+0x19c>)
 8004a3e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004a42:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004a44:	f7ff ff38 	bl	80048b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004a48:	f7fe ff78 	bl	800393c <vTaskSwitchContext>
    prvTaskExitError();
 8004a4c:	f7ff feea 	bl	8004824 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3728      	adds	r7, #40	@ 0x28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	e000ed08 	.word	0xe000ed08
 8004a60:	08004891 	.word	0x08004891
 8004a64:	08004b51 	.word	0x08004b51
 8004a68:	e000e400 	.word	0xe000e400
 8004a6c:	20000214 	.word	0x20000214
 8004a70:	20000218 	.word	0x20000218
 8004a74:	e000ed20 	.word	0xe000ed20
 8004a78:	e000ed1c 	.word	0xe000ed1c
 8004a7c:	20000010 	.word	0x20000010
 8004a80:	e000ef34 	.word	0xe000ef34

08004a84 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
    __asm volatile
 8004a8a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004a8e:	b672      	cpsid	i
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	b662      	cpsie	i
 8004a9e:	607b      	str	r3, [r7, #4]
}
 8004aa0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004aa2:	4b11      	ldr	r3, [pc, #68]	@ (8004ae8 <vPortEnterCritical+0x64>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	4a0f      	ldr	r2, [pc, #60]	@ (8004ae8 <vPortEnterCritical+0x64>)
 8004aaa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004aac:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae8 <vPortEnterCritical+0x64>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d112      	bne.n	8004ada <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8004aec <vPortEnterCritical+0x68>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00d      	beq.n	8004ada <vPortEnterCritical+0x56>
    __asm volatile
 8004abe:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004ac2:	b672      	cpsid	i
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	b662      	cpsie	i
 8004ad2:	603b      	str	r3, [r7, #0]
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop
 8004ad8:	e7fd      	b.n	8004ad6 <vPortEnterCritical+0x52>
    }
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	20000010 	.word	0x20000010
 8004aec:	e000ed04 	.word	0xe000ed04

08004af0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004af6:	4b13      	ldr	r3, [pc, #76]	@ (8004b44 <vPortExitCritical+0x54>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10d      	bne.n	8004b1a <vPortExitCritical+0x2a>
    __asm volatile
 8004afe:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004b02:	b672      	cpsid	i
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	b662      	cpsie	i
 8004b12:	607b      	str	r3, [r7, #4]
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop
 8004b18:	e7fd      	b.n	8004b16 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b44 <vPortExitCritical+0x54>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	4a08      	ldr	r2, [pc, #32]	@ (8004b44 <vPortExitCritical+0x54>)
 8004b22:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004b24:	4b07      	ldr	r3, [pc, #28]	@ (8004b44 <vPortExitCritical+0x54>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d105      	bne.n	8004b38 <vPortExitCritical+0x48>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8004b36:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	20000010 	.word	0x20000010
	...

08004b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004b50:	f3ef 8009 	mrs	r0, PSP
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	4b15      	ldr	r3, [pc, #84]	@ (8004bb0 <pxCurrentTCBConst>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	f01e 0f10 	tst.w	lr, #16
 8004b60:	bf08      	it	eq
 8004b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6a:	6010      	str	r0, [r2, #0]
 8004b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b70:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8004b74:	b672      	cpsid	i
 8004b76:	f380 8811 	msr	BASEPRI, r0
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	b662      	cpsie	i
 8004b84:	f7fe feda 	bl	800393c <vTaskSwitchContext>
 8004b88:	f04f 0000 	mov.w	r0, #0
 8004b8c:	f380 8811 	msr	BASEPRI, r0
 8004b90:	bc09      	pop	{r0, r3}
 8004b92:	6819      	ldr	r1, [r3, #0]
 8004b94:	6808      	ldr	r0, [r1, #0]
 8004b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b9a:	f01e 0f10 	tst.w	lr, #16
 8004b9e:	bf08      	it	eq
 8004ba0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ba4:	f380 8809 	msr	PSP, r0
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop

08004bb0 <pxCurrentTCBConst>:
 8004bb0:	200000d4 	.word	0x200000d4
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop

08004bb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
    __asm volatile
 8004bbe:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004bc2:	b672      	cpsid	i
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	b662      	cpsie	i
 8004bd2:	607b      	str	r3, [r7, #4]
}
 8004bd4:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004bd6:	f002 f81f 	bl	8006c18 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004bda:	f7fe fd8b 	bl	80036f4 <xTaskIncrementTick>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d006      	beq.n	8004bf2 <SysTick_Handler+0x3a>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8004be4:	f002 f876 	bl	8006cd4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004be8:	4b08      	ldr	r3, [pc, #32]	@ (8004c0c <SysTick_Handler+0x54>)
 8004bea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	e001      	b.n	8004bf6 <SysTick_Handler+0x3e>
        }
        else
        {
            traceISR_EXIT();
 8004bf2:	f002 f853 	bl	8006c9c <SEGGER_SYSVIEW_RecordExitISR>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	f383 8811 	msr	BASEPRI, r3
}
 8004c00:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004c02:	bf00      	nop
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	e000ed04 	.word	0xe000ed04

08004c10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c14:	4b0b      	ldr	r3, [pc, #44]	@ (8004c44 <vPortSetupTimerInterrupt+0x34>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c48 <vPortSetupTimerInterrupt+0x38>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c20:	4b0a      	ldr	r3, [pc, #40]	@ (8004c4c <vPortSetupTimerInterrupt+0x3c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a0a      	ldr	r2, [pc, #40]	@ (8004c50 <vPortSetupTimerInterrupt+0x40>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	099b      	lsrs	r3, r3, #6
 8004c2c:	4a09      	ldr	r2, [pc, #36]	@ (8004c54 <vPortSetupTimerInterrupt+0x44>)
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c32:	4b04      	ldr	r3, [pc, #16]	@ (8004c44 <vPortSetupTimerInterrupt+0x34>)
 8004c34:	2207      	movs	r2, #7
 8004c36:	601a      	str	r2, [r3, #0]
}
 8004c38:	bf00      	nop
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	e000e010 	.word	0xe000e010
 8004c48:	e000e018 	.word	0xe000e018
 8004c4c:	20000000 	.word	0x20000000
 8004c50:	10624dd3 	.word	0x10624dd3
 8004c54:	e000e014 	.word	0xe000e014

08004c58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004c58:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004c68 <vPortEnableVFP+0x10>
 8004c5c:	6801      	ldr	r1, [r0, #0]
 8004c5e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004c62:	6001      	str	r1, [r0, #0]
 8004c64:	4770      	bx	lr
 8004c66:	0000      	.short	0x0000
 8004c68:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8004c6c:	bf00      	nop
 8004c6e:	bf00      	nop

08004c70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004c76:	f3ef 8305 	mrs	r3, IPSR
 8004c7a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b0f      	cmp	r3, #15
 8004c80:	d917      	bls.n	8004cb2 <vPortValidateInterruptPriority+0x42>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c82:	4a1a      	ldr	r2, [pc, #104]	@ (8004cec <vPortValidateInterruptPriority+0x7c>)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c8c:	4b18      	ldr	r3, [pc, #96]	@ (8004cf0 <vPortValidateInterruptPriority+0x80>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	7afa      	ldrb	r2, [r7, #11]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d20d      	bcs.n	8004cb2 <vPortValidateInterruptPriority+0x42>
    __asm volatile
 8004c96:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004c9a:	b672      	cpsid	i
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	b662      	cpsie	i
 8004caa:	607b      	str	r3, [r7, #4]
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	e7fd      	b.n	8004cae <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004cb2:	4b10      	ldr	r3, [pc, #64]	@ (8004cf4 <vPortValidateInterruptPriority+0x84>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004cba:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf8 <vPortValidateInterruptPriority+0x88>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d90d      	bls.n	8004cde <vPortValidateInterruptPriority+0x6e>
    __asm volatile
 8004cc2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004cc6:	b672      	cpsid	i
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	b662      	cpsie	i
 8004cd6:	603b      	str	r3, [r7, #0]
}
 8004cd8:	bf00      	nop
 8004cda:	bf00      	nop
 8004cdc:	e7fd      	b.n	8004cda <vPortValidateInterruptPriority+0x6a>
    }
 8004cde:	bf00      	nop
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	e000e3f0 	.word	0xe000e3f0
 8004cf0:	20000214 	.word	0x20000214
 8004cf4:	e000ed0c 	.word	0xe000ed0c
 8004cf8:	20000218 	.word	0x20000218

08004cfc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08e      	sub	sp, #56	@ 0x38
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004d04:	2300      	movs	r3, #0
 8004d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d022      	beq.n	8004d54 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8004d0e:	2308      	movs	r3, #8
 8004d10:	43db      	mvns	r3, r3
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d81b      	bhi.n	8004d50 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8004d18:	2208      	movs	r2, #8
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d014      	beq.n	8004d54 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	f1c3 0308 	rsb	r3, r3, #8
 8004d34:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d804      	bhi.n	8004d4a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d44:	4413      	add	r3, r2
 8004d46:	607b      	str	r3, [r7, #4]
 8004d48:	e004      	b.n	8004d54 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	607b      	str	r3, [r7, #4]
 8004d4e:	e001      	b.n	8004d54 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8004d54:	f7fe fab2 	bl	80032bc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004d58:	4b80      	ldr	r3, [pc, #512]	@ (8004f5c <pvPortMalloc+0x260>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8004d60:	f000 f98a 	bl	8005078 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f2c0 80de 	blt.w	8004f28 <pvPortMalloc+0x22c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 80da 	beq.w	8004f28 <pvPortMalloc+0x22c>
 8004d74:	4b7a      	ldr	r3, [pc, #488]	@ (8004f60 <pvPortMalloc+0x264>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	f200 80d4 	bhi.w	8004f28 <pvPortMalloc+0x22c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004d80:	4b78      	ldr	r3, [pc, #480]	@ (8004f64 <pvPortMalloc+0x268>)
 8004d82:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8004d84:	4b77      	ldr	r3, [pc, #476]	@ (8004f64 <pvPortMalloc+0x268>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8c:	4a76      	ldr	r2, [pc, #472]	@ (8004f68 <pvPortMalloc+0x26c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d305      	bcc.n	8004d9e <pvPortMalloc+0xa2>
 8004d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d94:	4a75      	ldr	r2, [pc, #468]	@ (8004f6c <pvPortMalloc+0x270>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d801      	bhi.n	8004d9e <pvPortMalloc+0xa2>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <pvPortMalloc+0xa4>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d12d      	bne.n	8004e00 <pvPortMalloc+0x104>
    __asm volatile
 8004da4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004da8:	b672      	cpsid	i
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	b662      	cpsie	i
 8004db8:	623b      	str	r3, [r7, #32]
}
 8004dba:	bf00      	nop
 8004dbc:	bf00      	nop
 8004dbe:	e7fd      	b.n	8004dbc <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8004dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8004dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dcc:	4a66      	ldr	r2, [pc, #408]	@ (8004f68 <pvPortMalloc+0x26c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d305      	bcc.n	8004dde <pvPortMalloc+0xe2>
 8004dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd4:	4a65      	ldr	r2, [pc, #404]	@ (8004f6c <pvPortMalloc+0x270>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d801      	bhi.n	8004dde <pvPortMalloc+0xe2>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <pvPortMalloc+0xe4>
 8004dde:	2300      	movs	r3, #0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10d      	bne.n	8004e00 <pvPortMalloc+0x104>
    __asm volatile
 8004de4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004de8:	b672      	cpsid	i
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	b662      	cpsie	i
 8004df8:	61fb      	str	r3, [r7, #28]
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	e7fd      	b.n	8004dfc <pvPortMalloc+0x100>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8004e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d903      	bls.n	8004e12 <pvPortMalloc+0x116>
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1d6      	bne.n	8004dc0 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004e12:	4b52      	ldr	r3, [pc, #328]	@ (8004f5c <pvPortMalloc+0x260>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	f000 8085 	beq.w	8004f28 <pvPortMalloc+0x22c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2208      	movs	r2, #8
 8004e24:	4413      	add	r3, r2
 8004e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8004e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2a:	4a4f      	ldr	r2, [pc, #316]	@ (8004f68 <pvPortMalloc+0x26c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d305      	bcc.n	8004e3c <pvPortMalloc+0x140>
 8004e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e32:	4a4e      	ldr	r2, [pc, #312]	@ (8004f6c <pvPortMalloc+0x270>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d801      	bhi.n	8004e3c <pvPortMalloc+0x140>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e000      	b.n	8004e3e <pvPortMalloc+0x142>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10d      	bne.n	8004e5e <pvPortMalloc+0x162>
    __asm volatile
 8004e42:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004e46:	b672      	cpsid	i
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	b662      	cpsie	i
 8004e56:	61bb      	str	r3, [r7, #24]
}
 8004e58:	bf00      	nop
 8004e5a:	bf00      	nop
 8004e5c:	e7fd      	b.n	8004e5a <pvPortMalloc+0x15e>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e64:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8004e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d90d      	bls.n	8004e8c <pvPortMalloc+0x190>
    __asm volatile
 8004e70:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004e74:	b672      	cpsid	i
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	b662      	cpsie	i
 8004e84:	617b      	str	r3, [r7, #20]
}
 8004e86:	bf00      	nop
 8004e88:	bf00      	nop
 8004e8a:	e7fd      	b.n	8004e88 <pvPortMalloc+0x18c>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	1ad2      	subs	r2, r2, r3
 8004e94:	2308      	movs	r3, #8
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d926      	bls.n	8004eea <pvPortMalloc+0x1ee>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00d      	beq.n	8004eca <pvPortMalloc+0x1ce>
    __asm volatile
 8004eae:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004eb2:	b672      	cpsid	i
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	b662      	cpsie	i
 8004ec2:	613b      	str	r3, [r7, #16]
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop
 8004ec8:	e7fd      	b.n	8004ec6 <pvPortMalloc+0x1ca>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	1ad2      	subs	r2, r2, r3
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8004edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ee8:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004eea:	4b1d      	ldr	r3, [pc, #116]	@ (8004f60 <pvPortMalloc+0x264>)
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	4a1a      	ldr	r2, [pc, #104]	@ (8004f60 <pvPortMalloc+0x264>)
 8004ef6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ef8:	4b19      	ldr	r3, [pc, #100]	@ (8004f60 <pvPortMalloc+0x264>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	4b1c      	ldr	r3, [pc, #112]	@ (8004f70 <pvPortMalloc+0x274>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d203      	bcs.n	8004f0c <pvPortMalloc+0x210>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f04:	4b16      	ldr	r3, [pc, #88]	@ (8004f60 <pvPortMalloc+0x264>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a19      	ldr	r2, [pc, #100]	@ (8004f70 <pvPortMalloc+0x274>)
 8004f0a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f16:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004f1e:	4b15      	ldr	r3, [pc, #84]	@ (8004f74 <pvPortMalloc+0x278>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3301      	adds	r3, #1
 8004f24:	4a13      	ldr	r2, [pc, #76]	@ (8004f74 <pvPortMalloc+0x278>)
 8004f26:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004f28:	f7fe f9d6 	bl	80032d8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00d      	beq.n	8004f52 <pvPortMalloc+0x256>
    __asm volatile
 8004f36:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004f3a:	b672      	cpsid	i
 8004f3c:	f383 8811 	msr	BASEPRI, r3
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	b662      	cpsie	i
 8004f4a:	60fb      	str	r3, [r7, #12]
}
 8004f4c:	bf00      	nop
 8004f4e:	bf00      	nop
 8004f50:	e7fd      	b.n	8004f4e <pvPortMalloc+0x252>
    return pvReturn;
 8004f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3738      	adds	r7, #56	@ 0x38
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	2000ba24 	.word	0x2000ba24
 8004f60:	2000ba28 	.word	0x2000ba28
 8004f64:	2000ba1c 	.word	0x2000ba1c
 8004f68:	2000021c 	.word	0x2000021c
 8004f6c:	2000ba1b 	.word	0x2000ba1b
 8004f70:	2000ba2c 	.word	0x2000ba2c
 8004f74:	2000ba30 	.word	0x2000ba30

08004f78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d06a      	beq.n	8005060 <vPortFree+0xe8>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004f8a:	2308      	movs	r3, #8
 8004f8c:	425b      	negs	r3, r3
 8004f8e:	69fa      	ldr	r2, [r7, #28]
 8004f90:	4413      	add	r3, r2
 8004f92:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	4a33      	ldr	r2, [pc, #204]	@ (8005068 <vPortFree+0xf0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d305      	bcc.n	8004fac <vPortFree+0x34>
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	4a32      	ldr	r2, [pc, #200]	@ (800506c <vPortFree+0xf4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d801      	bhi.n	8004fac <vPortFree+0x34>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <vPortFree+0x36>
 8004fac:	2300      	movs	r3, #0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10d      	bne.n	8004fce <vPortFree+0x56>
    __asm volatile
 8004fb2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004fb6:	b672      	cpsid	i
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	b662      	cpsie	i
 8004fc6:	617b      	str	r3, [r7, #20]
}
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
 8004fcc:	e7fd      	b.n	8004fca <vPortFree+0x52>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	db0d      	blt.n	8004ff2 <vPortFree+0x7a>
    __asm volatile
 8004fd6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004fda:	b672      	cpsid	i
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	b662      	cpsie	i
 8004fea:	613b      	str	r3, [r7, #16]
}
 8004fec:	bf00      	nop
 8004fee:	bf00      	nop
 8004ff0:	e7fd      	b.n	8004fee <vPortFree+0x76>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00d      	beq.n	8005016 <vPortFree+0x9e>
    __asm volatile
 8004ffa:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004ffe:	b672      	cpsid	i
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	b662      	cpsie	i
 800500e:	60fb      	str	r3, [r7, #12]
}
 8005010:	bf00      	nop
 8005012:	bf00      	nop
 8005014:	e7fd      	b.n	8005012 <vPortFree+0x9a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	0fdb      	lsrs	r3, r3, #31
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d01c      	beq.n	8005060 <vPortFree+0xe8>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d118      	bne.n	8005060 <vPortFree+0xe8>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800503a:	f7fe f93f 	bl	80032bc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	4b0b      	ldr	r3, [pc, #44]	@ (8005070 <vPortFree+0xf8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4413      	add	r3, r2
 8005048:	4a09      	ldr	r2, [pc, #36]	@ (8005070 <vPortFree+0xf8>)
 800504a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800504c:	69b8      	ldr	r0, [r7, #24]
 800504e:	f000 f86d 	bl	800512c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005052:	4b08      	ldr	r3, [pc, #32]	@ (8005074 <vPortFree+0xfc>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3301      	adds	r3, #1
 8005058:	4a06      	ldr	r2, [pc, #24]	@ (8005074 <vPortFree+0xfc>)
 800505a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800505c:	f7fe f93c 	bl	80032d8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005060:	bf00      	nop
 8005062:	3720      	adds	r7, #32
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	2000021c 	.word	0x2000021c
 800506c:	2000ba1b 	.word	0x2000ba1b
 8005070:	2000ba28 	.word	0x2000ba28
 8005074:	2000ba34 	.word	0x2000ba34

08005078 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800507e:	f44f 4338 	mov.w	r3, #47104	@ 0xb800
 8005082:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005084:	4b24      	ldr	r3, [pc, #144]	@ (8005118 <prvHeapInit+0xa0>)
 8005086:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00c      	beq.n	80050ac <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3307      	adds	r3, #7
 8005096:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0307 	bic.w	r3, r3, #7
 800509e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005118 <prvHeapInit+0xa0>)
 80050a8:	4413      	add	r3, r2
 80050aa:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4a1b      	ldr	r2, [pc, #108]	@ (800511c <prvHeapInit+0xa4>)
 80050b0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80050b2:	4b1a      	ldr	r3, [pc, #104]	@ (800511c <prvHeapInit+0xa4>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4413      	add	r3, r2
 80050be:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80050c0:	2208      	movs	r2, #8
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	1a9b      	subs	r3, r3, r2
 80050c6:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f023 0307 	bic.w	r3, r3, #7
 80050ce:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a13      	ldr	r2, [pc, #76]	@ (8005120 <prvHeapInit+0xa8>)
 80050d4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80050d6:	4b12      	ldr	r3, [pc, #72]	@ (8005120 <prvHeapInit+0xa8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2200      	movs	r2, #0
 80050dc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80050de:	4b10      	ldr	r3, [pc, #64]	@ (8005120 <prvHeapInit+0xa8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2200      	movs	r2, #0
 80050e4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	1ad2      	subs	r2, r2, r3
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80050f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005120 <prvHeapInit+0xa8>)
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	4a08      	ldr	r2, [pc, #32]	@ (8005124 <prvHeapInit+0xac>)
 8005102:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	4a07      	ldr	r2, [pc, #28]	@ (8005128 <prvHeapInit+0xb0>)
 800510a:	6013      	str	r3, [r2, #0]
}
 800510c:	bf00      	nop
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	2000021c 	.word	0x2000021c
 800511c:	2000ba1c 	.word	0x2000ba1c
 8005120:	2000ba24 	.word	0x2000ba24
 8005124:	2000ba2c 	.word	0x2000ba2c
 8005128:	2000ba28 	.word	0x2000ba28

0800512c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005134:	4b37      	ldr	r3, [pc, #220]	@ (8005214 <prvInsertBlockIntoFreeList+0xe8>)
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	e002      	b.n	8005140 <prvInsertBlockIntoFreeList+0x14>
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	429a      	cmp	r2, r3
 8005148:	d8f7      	bhi.n	800513a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	4a31      	ldr	r2, [pc, #196]	@ (8005214 <prvInsertBlockIntoFreeList+0xe8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d01a      	beq.n	8005188 <prvInsertBlockIntoFreeList+0x5c>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	4a30      	ldr	r2, [pc, #192]	@ (8005218 <prvInsertBlockIntoFreeList+0xec>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d305      	bcc.n	8005166 <prvInsertBlockIntoFreeList+0x3a>
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	4a2f      	ldr	r2, [pc, #188]	@ (800521c <prvInsertBlockIntoFreeList+0xf0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d801      	bhi.n	8005166 <prvInsertBlockIntoFreeList+0x3a>
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <prvInsertBlockIntoFreeList+0x3c>
 8005166:	2300      	movs	r3, #0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10d      	bne.n	8005188 <prvInsertBlockIntoFreeList+0x5c>
    __asm volatile
 800516c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005170:	b672      	cpsid	i
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	b662      	cpsie	i
 8005180:	60fb      	str	r3, [r7, #12]
}
 8005182:	bf00      	nop
 8005184:	bf00      	nop
 8005186:	e7fd      	b.n	8005184 <prvInsertBlockIntoFreeList+0x58>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	4413      	add	r3, r2
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	429a      	cmp	r2, r3
 8005198:	d108      	bne.n	80051ac <prvInsertBlockIntoFreeList+0x80>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	441a      	add	r2, r3
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	441a      	add	r2, r3
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d118      	bne.n	80051f2 <prvInsertBlockIntoFreeList+0xc6>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	4b16      	ldr	r3, [pc, #88]	@ (8005220 <prvInsertBlockIntoFreeList+0xf4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d00d      	beq.n	80051e8 <prvInsertBlockIntoFreeList+0xbc>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	441a      	add	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	e008      	b.n	80051fa <prvInsertBlockIntoFreeList+0xce>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80051e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005220 <prvInsertBlockIntoFreeList+0xf4>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	e003      	b.n	80051fa <prvInsertBlockIntoFreeList+0xce>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d002      	beq.n	8005208 <prvInsertBlockIntoFreeList+0xdc>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005208:	bf00      	nop
 800520a:	371c      	adds	r7, #28
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	2000ba1c 	.word	0x2000ba1c
 8005218:	2000021c 	.word	0x2000021c
 800521c:	2000ba1b 	.word	0x2000ba1b
 8005220:	2000ba24 	.word	0x2000ba24

08005224 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005228:	4803      	ldr	r0, [pc, #12]	@ (8005238 <_cbSendSystemDesc+0x14>)
 800522a:	f001 fc9f 	bl	8006b6c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800522e:	4803      	ldr	r0, [pc, #12]	@ (800523c <_cbSendSystemDesc+0x18>)
 8005230:	f001 fc9c 	bl	8006b6c <SEGGER_SYSVIEW_SendSysDesc>
}
 8005234:	bf00      	nop
 8005236:	bd80      	pop	{r7, pc}
 8005238:	0800749c 	.word	0x0800749c
 800523c:	080074d8 	.word	0x080074d8

08005240 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005244:	4b06      	ldr	r3, [pc, #24]	@ (8005260 <SEGGER_SYSVIEW_Conf+0x20>)
 8005246:	6818      	ldr	r0, [r3, #0]
 8005248:	4b05      	ldr	r3, [pc, #20]	@ (8005260 <SEGGER_SYSVIEW_Conf+0x20>)
 800524a:	6819      	ldr	r1, [r3, #0]
 800524c:	4b05      	ldr	r3, [pc, #20]	@ (8005264 <SEGGER_SYSVIEW_Conf+0x24>)
 800524e:	4a06      	ldr	r2, [pc, #24]	@ (8005268 <SEGGER_SYSVIEW_Conf+0x28>)
 8005250:	f001 f912 	bl	8006478 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005254:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8005258:	f001 f952 	bl	8006500 <SEGGER_SYSVIEW_SetRAMBase>
}
 800525c:	bf00      	nop
 800525e:	bd80      	pop	{r7, pc}
 8005260:	20000000 	.word	0x20000000
 8005264:	08005225 	.word	0x08005225
 8005268:	08007574 	.word	0x08007574

0800526c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800526c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800526e:	b085      	sub	sp, #20
 8005270:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005272:	2300      	movs	r3, #0
 8005274:	607b      	str	r3, [r7, #4]
 8005276:	e033      	b.n	80052e0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005278:	491e      	ldr	r1, [pc, #120]	@ (80052f4 <_cbSendTaskList+0x88>)
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	6818      	ldr	r0, [r3, #0]
 8005288:	491a      	ldr	r1, [pc, #104]	@ (80052f4 <_cbSendTaskList+0x88>)
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	4613      	mov	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	3304      	adds	r3, #4
 8005298:	6819      	ldr	r1, [r3, #0]
 800529a:	4c16      	ldr	r4, [pc, #88]	@ (80052f4 <_cbSendTaskList+0x88>)
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	4613      	mov	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4423      	add	r3, r4
 80052a8:	3308      	adds	r3, #8
 80052aa:	681c      	ldr	r4, [r3, #0]
 80052ac:	4d11      	ldr	r5, [pc, #68]	@ (80052f4 <_cbSendTaskList+0x88>)
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	442b      	add	r3, r5
 80052ba:	330c      	adds	r3, #12
 80052bc:	681d      	ldr	r5, [r3, #0]
 80052be:	4e0d      	ldr	r6, [pc, #52]	@ (80052f4 <_cbSendTaskList+0x88>)
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4433      	add	r3, r6
 80052cc:	3310      	adds	r3, #16
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	462b      	mov	r3, r5
 80052d4:	4622      	mov	r2, r4
 80052d6:	f000 f92d 	bl	8005534 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3301      	adds	r3, #1
 80052de:	607b      	str	r3, [r7, #4]
 80052e0:	4b05      	ldr	r3, [pc, #20]	@ (80052f8 <_cbSendTaskList+0x8c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d3c6      	bcc.n	8005278 <_cbSendTaskList+0xc>
  }
}
 80052ea:	bf00      	nop
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052f4:	2000ba38 	.word	0x2000ba38
 80052f8:	2000bad8 	.word	0x2000bad8

080052fc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80052fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005300:	b082      	sub	sp, #8
 8005302:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005304:	f7fe f90e 	bl	8003524 <xTaskGetTickCountFromISR>
 8005308:	4603      	mov	r3, r0
 800530a:	2200      	movs	r2, #0
 800530c:	469a      	mov	sl, r3
 800530e:	4693      	mov	fp, r2
 8005310:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005314:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	f04f 0a00 	mov.w	sl, #0
 8005320:	f04f 0b00 	mov.w	fp, #0
 8005324:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005328:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800532c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005330:	4652      	mov	r2, sl
 8005332:	465b      	mov	r3, fp
 8005334:	1a14      	subs	r4, r2, r0
 8005336:	eb63 0501 	sbc.w	r5, r3, r1
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	00ab      	lsls	r3, r5, #2
 8005344:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005348:	00a2      	lsls	r2, r4, #2
 800534a:	4614      	mov	r4, r2
 800534c:	461d      	mov	r5, r3
 800534e:	eb14 0800 	adds.w	r8, r4, r0
 8005352:	eb45 0901 	adc.w	r9, r5, r1
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	f04f 0300 	mov.w	r3, #0
 800535e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005362:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005366:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800536a:	4690      	mov	r8, r2
 800536c:	4699      	mov	r9, r3
 800536e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005372:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005376:	4610      	mov	r0, r2
 8005378:	4619      	mov	r1, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005384 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af02      	add	r7, sp, #8
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005392:	2205      	movs	r2, #5
 8005394:	492b      	ldr	r1, [pc, #172]	@ (8005444 <SYSVIEW_AddTask+0xc0>)
 8005396:	68b8      	ldr	r0, [r7, #8]
 8005398:	f002 f80e 	bl	80073b8 <memcmp>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d04b      	beq.n	800543a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80053a2:	4b29      	ldr	r3, [pc, #164]	@ (8005448 <SYSVIEW_AddTask+0xc4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b07      	cmp	r3, #7
 80053a8:	d903      	bls.n	80053b2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80053aa:	4828      	ldr	r0, [pc, #160]	@ (800544c <SYSVIEW_AddTask+0xc8>)
 80053ac:	f001 ff7a 	bl	80072a4 <SEGGER_SYSVIEW_Warn>
    return;
 80053b0:	e044      	b.n	800543c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80053b2:	4b25      	ldr	r3, [pc, #148]	@ (8005448 <SYSVIEW_AddTask+0xc4>)
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	4926      	ldr	r1, [pc, #152]	@ (8005450 <SYSVIEW_AddTask+0xcc>)
 80053b8:	4613      	mov	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80053c6:	4b20      	ldr	r3, [pc, #128]	@ (8005448 <SYSVIEW_AddTask+0xc4>)
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	4921      	ldr	r1, [pc, #132]	@ (8005450 <SYSVIEW_AddTask+0xcc>)
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	440b      	add	r3, r1
 80053d6:	3304      	adds	r3, #4
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80053dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005448 <SYSVIEW_AddTask+0xc4>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	491b      	ldr	r1, [pc, #108]	@ (8005450 <SYSVIEW_AddTask+0xcc>)
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	440b      	add	r3, r1
 80053ec:	3308      	adds	r3, #8
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80053f2:	4b15      	ldr	r3, [pc, #84]	@ (8005448 <SYSVIEW_AddTask+0xc4>)
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	4916      	ldr	r1, [pc, #88]	@ (8005450 <SYSVIEW_AddTask+0xcc>)
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	330c      	adds	r3, #12
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005408:	4b0f      	ldr	r3, [pc, #60]	@ (8005448 <SYSVIEW_AddTask+0xc4>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	4910      	ldr	r1, [pc, #64]	@ (8005450 <SYSVIEW_AddTask+0xcc>)
 800540e:	4613      	mov	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	440b      	add	r3, r1
 8005418:	3310      	adds	r3, #16
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800541e:	4b0a      	ldr	r3, [pc, #40]	@ (8005448 <SYSVIEW_AddTask+0xc4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3301      	adds	r3, #1
 8005424:	4a08      	ldr	r2, [pc, #32]	@ (8005448 <SYSVIEW_AddTask+0xc4>)
 8005426:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	68b9      	ldr	r1, [r7, #8]
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 f87e 	bl	8005534 <SYSVIEW_SendTaskInfo>
 8005438:	e000      	b.n	800543c <SYSVIEW_AddTask+0xb8>
    return;
 800543a:	bf00      	nop

}
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	080074e8 	.word	0x080074e8
 8005448:	2000bad8 	.word	0x2000bad8
 800544c:	080074f0 	.word	0x080074f0
 8005450:	2000ba38 	.word	0x2000ba38

08005454 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af02      	add	r7, sp, #8
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005462:	2205      	movs	r2, #5
 8005464:	4930      	ldr	r1, [pc, #192]	@ (8005528 <SYSVIEW_UpdateTask+0xd4>)
 8005466:	68b8      	ldr	r0, [r7, #8]
 8005468:	f001 ffa6 	bl	80073b8 <memcmp>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d056      	beq.n	8005520 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8005472:	2300      	movs	r3, #0
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	e00d      	b.n	8005494 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8005478:	492c      	ldr	r1, [pc, #176]	@ (800552c <SYSVIEW_UpdateTask+0xd8>)
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	429a      	cmp	r2, r3
 800548c:	d008      	beq.n	80054a0 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	3301      	adds	r3, #1
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	4b26      	ldr	r3, [pc, #152]	@ (8005530 <SYSVIEW_UpdateTask+0xdc>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	429a      	cmp	r2, r3
 800549c:	d3ec      	bcc.n	8005478 <SYSVIEW_UpdateTask+0x24>
 800549e:	e000      	b.n	80054a2 <SYSVIEW_UpdateTask+0x4e>
      break;
 80054a0:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 80054a2:	4b23      	ldr	r3, [pc, #140]	@ (8005530 <SYSVIEW_UpdateTask+0xdc>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d230      	bcs.n	800550e <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 80054ac:	491f      	ldr	r1, [pc, #124]	@ (800552c <SYSVIEW_UpdateTask+0xd8>)
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	4613      	mov	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	3304      	adds	r3, #4
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 80054c0:	491a      	ldr	r1, [pc, #104]	@ (800552c <SYSVIEW_UpdateTask+0xd8>)
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	440b      	add	r3, r1
 80054ce:	3308      	adds	r3, #8
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 80054d4:	4915      	ldr	r1, [pc, #84]	@ (800552c <SYSVIEW_UpdateTask+0xd8>)
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4613      	mov	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	330c      	adds	r3, #12
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 80054e8:	4910      	ldr	r1, [pc, #64]	@ (800552c <SYSVIEW_UpdateTask+0xd8>)
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	4613      	mov	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	3310      	adds	r3, #16
 80054f8:	6a3a      	ldr	r2, [r7, #32]
 80054fa:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 f814 	bl	8005534 <SYSVIEW_SendTaskInfo>
 800550c:	e009      	b.n	8005522 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	68b9      	ldr	r1, [r7, #8]
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f7ff ff33 	bl	8005384 <SYSVIEW_AddTask>
 800551e:	e000      	b.n	8005522 <SYSVIEW_UpdateTask+0xce>
    return;
 8005520:	bf00      	nop
  }
}
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	080074e8 	.word	0x080074e8
 800552c:	2000ba38 	.word	0x2000ba38
 8005530:	2000bad8 	.word	0x2000bad8

08005534 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005534:	b580      	push	{r7, lr}
 8005536:	b08a      	sub	sp, #40	@ 0x28
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005542:	f107 0310 	add.w	r3, r7, #16
 8005546:	2218      	movs	r2, #24
 8005548:	2100      	movs	r1, #0
 800554a:	4618      	mov	r0, r3
 800554c:	f001 ff44 	bl	80073d8 <memset>
  TaskInfo.TaskID     = TaskID;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8005560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005562:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005564:	f107 0310 	add.w	r3, r7, #16
 8005568:	4618      	mov	r0, r3
 800556a:	f001 fa07 	bl	800697c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800556e:	bf00      	nop
 8005570:	3728      	adds	r7, #40	@ 0x28
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
	...

08005578 <__NVIC_EnableIRQ>:
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	4603      	mov	r3, r0
 8005580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005586:	2b00      	cmp	r3, #0
 8005588:	db0b      	blt.n	80055a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800558a:	79fb      	ldrb	r3, [r7, #7]
 800558c:	f003 021f 	and.w	r2, r3, #31
 8005590:	4907      	ldr	r1, [pc, #28]	@ (80055b0 <__NVIC_EnableIRQ+0x38>)
 8005592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005596:	095b      	lsrs	r3, r3, #5
 8005598:	2001      	movs	r0, #1
 800559a:	fa00 f202 	lsl.w	r2, r0, r2
 800559e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	e000e100 	.word	0xe000e100

080055b4 <__NVIC_SetPriority>:
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	6039      	str	r1, [r7, #0]
 80055be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	db0a      	blt.n	80055de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	490c      	ldr	r1, [pc, #48]	@ (8005600 <__NVIC_SetPriority+0x4c>)
 80055ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d2:	0112      	lsls	r2, r2, #4
 80055d4:	b2d2      	uxtb	r2, r2
 80055d6:	440b      	add	r3, r1
 80055d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80055dc:	e00a      	b.n	80055f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	4908      	ldr	r1, [pc, #32]	@ (8005604 <__NVIC_SetPriority+0x50>)
 80055e4:	79fb      	ldrb	r3, [r7, #7]
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	3b04      	subs	r3, #4
 80055ec:	0112      	lsls	r2, r2, #4
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	440b      	add	r3, r1
 80055f2:	761a      	strb	r2, [r3, #24]
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	e000e100 	.word	0xe000e100
 8005604:	e000ed00 	.word	0xe000ed00

08005608 <_StartSysView>:

} _SVInfo = {0,0,1};



static void _StartSysView(void) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0

  int r;



  r = SEGGER_SYSVIEW_IsStarted();
 800560e:	f001 fea5 	bl	800735c <SEGGER_SYSVIEW_IsStarted>
 8005612:	6078      	str	r0, [r7, #4]

  if (r == 0) {
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <_StartSysView+0x16>

    SEGGER_SYSVIEW_Start();
 800561a:	f001 f835 	bl	8006688 <SEGGER_SYSVIEW_Start>

  }

}
 800561e:	bf00      	nop
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
	...

08005628 <_cbOnUARTRx>:



static void _cbOnUARTRx(U8 Data) {
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	4603      	mov	r3, r0
 8005630:	71fb      	strb	r3, [r7, #7]

  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005632:	4b0c      	ldr	r3, [pc, #48]	@ (8005664 <_cbOnUARTRx+0x3c>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b03      	cmp	r3, #3
 8005638:	d806      	bhi.n	8005648 <_cbOnUARTRx+0x20>

    _SVInfo.NumBytesHelloRcvd++;
 800563a:	4b0a      	ldr	r3, [pc, #40]	@ (8005664 <_cbOnUARTRx+0x3c>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	3301      	adds	r3, #1
 8005640:	b2da      	uxtb	r2, r3
 8005642:	4b08      	ldr	r3, [pc, #32]	@ (8005664 <_cbOnUARTRx+0x3c>)
 8005644:	701a      	strb	r2, [r3, #0]

    goto Done;
 8005646:	e009      	b.n	800565c <_cbOnUARTRx+0x34>

  }

  _StartSysView();
 8005648:	f7ff ffde 	bl	8005608 <_StartSysView>

  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800564c:	4b05      	ldr	r3, [pc, #20]	@ (8005664 <_cbOnUARTRx+0x3c>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	4618      	mov	r0, r3
 8005652:	1dfb      	adds	r3, r7, #7
 8005654:	2201      	movs	r2, #1
 8005656:	4619      	mov	r1, r3
 8005658:	f000 fb8e 	bl	8005d78 <SEGGER_RTT_WriteDownBuffer>

Done:

  return;
 800565c:	bf00      	nop

}
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	20000014 	.word	0x20000014

08005668 <_cbOnUARTTx>:



static int _cbOnUARTTx(U8* pChar) {
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]

  int r;



  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005670:	4b14      	ldr	r3, [pc, #80]	@ (80056c4 <_cbOnUARTTx+0x5c>)
 8005672:	785b      	ldrb	r3, [r3, #1]
 8005674:	2b03      	cmp	r3, #3
 8005676:	d80f      	bhi.n	8005698 <_cbOnUARTTx+0x30>

    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005678:	4b12      	ldr	r3, [pc, #72]	@ (80056c4 <_cbOnUARTTx+0x5c>)
 800567a:	785b      	ldrb	r3, [r3, #1]
 800567c:	461a      	mov	r2, r3
 800567e:	4b12      	ldr	r3, [pc, #72]	@ (80056c8 <_cbOnUARTTx+0x60>)
 8005680:	5c9a      	ldrb	r2, [r3, r2]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	701a      	strb	r2, [r3, #0]

    _SVInfo.NumBytesHelloSent++;
 8005686:	4b0f      	ldr	r3, [pc, #60]	@ (80056c4 <_cbOnUARTTx+0x5c>)
 8005688:	785b      	ldrb	r3, [r3, #1]
 800568a:	3301      	adds	r3, #1
 800568c:	b2da      	uxtb	r2, r3
 800568e:	4b0d      	ldr	r3, [pc, #52]	@ (80056c4 <_cbOnUARTTx+0x5c>)
 8005690:	705a      	strb	r2, [r3, #1]

    r = 1;
 8005692:	2301      	movs	r3, #1
 8005694:	60fb      	str	r3, [r7, #12]

    goto Done;
 8005696:	e00f      	b.n	80056b8 <_cbOnUARTTx+0x50>

  }

  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005698:	4b0a      	ldr	r3, [pc, #40]	@ (80056c4 <_cbOnUARTTx+0x5c>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fa0d 	bl	8005ac0 <SEGGER_RTT_ReadUpBufferNoLock>
 80056a6:	4603      	mov	r3, r0
 80056a8:	60fb      	str	r3, [r7, #12]

  if (r < 0) {  // Failed to read from up buffer?
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	da02      	bge.n	80056b6 <_cbOnUARTTx+0x4e>

    r = 0;
 80056b0:	2300      	movs	r3, #0
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	e000      	b.n	80056b8 <_cbOnUARTTx+0x50>

  }

Done:
 80056b6:	bf00      	nop

  return r;
 80056b8:	68fb      	ldr	r3, [r7, #12]

}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000014 	.word	0x20000014
 80056c8:	0800757c 	.word	0x0800757c

080056cc <SEGGER_UART_init>:



void SEGGER_UART_init(U32 baud)

{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]

HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80056d4:	4a04      	ldr	r2, [pc, #16]	@ (80056e8 <SEGGER_UART_init+0x1c>)
 80056d6:	4905      	ldr	r1, [pc, #20]	@ (80056ec <SEGGER_UART_init+0x20>)
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f855 	bl	8005788 <HIF_UART_Init>

}
 80056de:	bf00      	nop
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	08005629 	.word	0x08005629
 80056ec:	08005669 	.word	0x08005669

080056f0 <USART3_IRQHandler>:

*/

void USART3_IRQHandler(void);

void USART3_IRQHandler(void) {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0

  int r;



  UsartStatus = USART_SR;                              // Examine status register
 80056f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005770 <USART3_IRQHandler+0x80>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	60fb      	str	r3, [r7, #12]

  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f003 0320 	and.w	r3, r3, #32
 8005702:	2b00      	cmp	r3, #0
 8005704:	d011      	beq.n	800572a <USART3_IRQHandler+0x3a>

    v = USART_RDR;                                      // Read data
 8005706:	4b1b      	ldr	r3, [pc, #108]	@ (8005774 <USART3_IRQHandler+0x84>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	b2db      	uxtb	r3, r3
 800570c:	71fb      	strb	r3, [r7, #7]

    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f003 030b 	and.w	r3, r3, #11
 8005714:	2b00      	cmp	r3, #0
 8005716:	d108      	bne.n	800572a <USART3_IRQHandler+0x3a>

      (void)v;                                         // Avoid warning in BTL

      if (_cbOnRx) {
 8005718:	4b17      	ldr	r3, [pc, #92]	@ (8005778 <USART3_IRQHandler+0x88>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d004      	beq.n	800572a <USART3_IRQHandler+0x3a>

        _cbOnRx(v);
 8005720:	4b15      	ldr	r3, [pc, #84]	@ (8005778 <USART3_IRQHandler+0x88>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	79fa      	ldrb	r2, [r7, #7]
 8005726:	4610      	mov	r0, r2
 8005728:	4798      	blx	r3

    }

  }

  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01a      	beq.n	800576a <USART3_IRQHandler+0x7a>

    // Therefore, we need to check if the function pointer is valid.

    //

    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005734:	4b11      	ldr	r3, [pc, #68]	@ (800577c <USART3_IRQHandler+0x8c>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d015      	beq.n	8005768 <USART3_IRQHandler+0x78>

      return;

    }

    r = _cbOnTx(&v);
 800573c:	4b0f      	ldr	r3, [pc, #60]	@ (800577c <USART3_IRQHandler+0x8c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	1dfa      	adds	r2, r7, #7
 8005742:	4610      	mov	r0, r2
 8005744:	4798      	blx	r3
 8005746:	60b8      	str	r0, [r7, #8]

    if (r == 0) {                          // No more characters to send ?
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <USART3_IRQHandler+0x6c>

      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800574e:	4b0c      	ldr	r3, [pc, #48]	@ (8005780 <USART3_IRQHandler+0x90>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a0b      	ldr	r2, [pc, #44]	@ (8005780 <USART3_IRQHandler+0x90>)
 8005754:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	e006      	b.n	800576a <USART3_IRQHandler+0x7a>

    } else {

      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800575c:	4b04      	ldr	r3, [pc, #16]	@ (8005770 <USART3_IRQHandler+0x80>)
 800575e:	681b      	ldr	r3, [r3, #0]

      USART_TDR = v;  // Start transmission by writing to data register
 8005760:	79fa      	ldrb	r2, [r7, #7]
 8005762:	4b08      	ldr	r3, [pc, #32]	@ (8005784 <USART3_IRQHandler+0x94>)
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	e000      	b.n	800576a <USART3_IRQHandler+0x7a>
      return;
 8005768:	bf00      	nop

    }

  }

}
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	4000481c 	.word	0x4000481c
 8005774:	40004824 	.word	0x40004824
 8005778:	2000badc 	.word	0x2000badc
 800577c:	2000bae0 	.word	0x2000bae0
 8005780:	40004800 	.word	0x40004800
 8005784:	40004828 	.word	0x40004828

08005788 <HIF_UART_Init>:

*       HIF_UART_Init()

*/

void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]

  //

  // Habilitar reloj de USART3 y puerto D

  RCC_APB1ENR |= (1 << 18);       // Habilitar reloj USART3 (APB1)
 8005794:	4b2e      	ldr	r3, [pc, #184]	@ (8005850 <HIF_UART_Init+0xc8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a2d      	ldr	r2, [pc, #180]	@ (8005850 <HIF_UART_Init+0xc8>)
 800579a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800579e:	6013      	str	r3, [r2, #0]

  RCC_AHB1ENR |= (1 << 3);        // Habilitar reloj GPIO D
 80057a0:	4b2c      	ldr	r3, [pc, #176]	@ (8005854 <HIF_UART_Init+0xcc>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a2b      	ldr	r2, [pc, #172]	@ (8005854 <HIF_UART_Init+0xcc>)
 80057a6:	f043 0308 	orr.w	r3, r3, #8
 80057aa:	6013      	str	r3, [r2, #0]



  // Configurar los pines PD8 y PD9 para función alternativa AF7 (USART3)

  v  = GPIO_AFRH;
 80057ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005858 <HIF_UART_Init+0xd0>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	613b      	str	r3, [r7, #16]

  v &= ~((15UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (15UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80057b8:	613b      	str	r3, [r7, #16]

  v |=  ((7UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (7UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80057c0:	613b      	str	r3, [r7, #16]

  GPIO_AFRH = v;
 80057c2:	4a25      	ldr	r2, [pc, #148]	@ (8005858 <HIF_UART_Init+0xd0>)
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	6013      	str	r3, [r2, #0]

  // Configure USART RX/TX pins for alternate function usage

  //

  v  = GPIO_MODER;
 80057c8:	4b24      	ldr	r3, [pc, #144]	@ (800585c <HIF_UART_Init+0xd4>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	613b      	str	r3, [r7, #16]

  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80057d4:	613b      	str	r3, [r7, #16]

  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 80057dc:	613b      	str	r3, [r7, #16]

  GPIO_MODER = v;
 80057de:	4a1f      	ldr	r2, [pc, #124]	@ (800585c <HIF_UART_Init+0xd4>)
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	6013      	str	r3, [r2, #0]

  // Set baudrate

  //

  Div = Baudrate * 8;                       // We use 8x oversampling.
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	617b      	str	r3, [r7, #20]

  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80057ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005860 <HIF_UART_Init+0xd8>)
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f2:	3301      	adds	r3, #1
 80057f4:	617b      	str	r3, [r7, #20]

  Div = Div / 2;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	085b      	lsrs	r3, r3, #1
 80057fa:	617b      	str	r3, [r7, #20]

  if (Div > 0xFFF) {
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005802:	d302      	bcc.n	800580a <HIF_UART_Init+0x82>

    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005804:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005808:	617b      	str	r3, [r7, #20]

  }

  if (Div >= 1) {
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d004      	beq.n	800581a <HIF_UART_Init+0x92>

    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	4a13      	ldr	r2, [pc, #76]	@ (8005864 <HIF_UART_Init+0xdc>)
 8005816:	b29b      	uxth	r3, r3
 8005818:	6013      	str	r3, [r2, #0]

  // Initialize USART

  //

  USART_CR1 = 0
 800581a:	4b13      	ldr	r3, [pc, #76]	@ (8005868 <HIF_UART_Init+0xe0>)
 800581c:	f248 022d 	movw	r2, #32813	@ 0x802d
 8005820:	601a      	str	r2, [r3, #0]

            | (1 <<  2)                         // RE     = 1; Receiver enabled

            ;

  USART_CR2 = 0
 8005822:	4b12      	ldr	r3, [pc, #72]	@ (800586c <HIF_UART_Init+0xe4>)
 8005824:	2200      	movs	r2, #0
 8005826:	601a      	str	r2, [r3, #0]

            | (0 << 12)                         // STOP = 00b; 1 stop bit

            ;

  USART_CR3 = 0
 8005828:	4b11      	ldr	r3, [pc, #68]	@ (8005870 <HIF_UART_Init+0xe8>)
 800582a:	2280      	movs	r2, #128	@ 0x80
 800582c:	601a      	str	r2, [r3, #0]

  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC

  //

  _cbOnRx = cbOnRx;
 800582e:	4a11      	ldr	r2, [pc, #68]	@ (8005874 <HIF_UART_Init+0xec>)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6013      	str	r3, [r2, #0]

  _cbOnTx = cbOnTx;
 8005834:	4a10      	ldr	r2, [pc, #64]	@ (8005878 <HIF_UART_Init+0xf0>)
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	6013      	str	r3, [r2, #0]

  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800583a:	2106      	movs	r1, #6
 800583c:	2027      	movs	r0, #39	@ 0x27
 800583e:	f7ff feb9 	bl	80055b4 <__NVIC_SetPriority>

  NVIC_EnableIRQ(USART_IRQn);
 8005842:	2027      	movs	r0, #39	@ 0x27
 8005844:	f7ff fe98 	bl	8005578 <__NVIC_EnableIRQ>

}
 8005848:	bf00      	nop
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40023840 	.word	0x40023840
 8005854:	40023830 	.word	0x40023830
 8005858:	40020c24 	.word	0x40020c24
 800585c:	40020c00 	.word	0x40020c00
 8005860:	0501bd00 	.word	0x0501bd00
 8005864:	4000480c 	.word	0x4000480c
 8005868:	40004800 	.word	0x40004800
 800586c:	40004804 	.word	0x40004804
 8005870:	40004808 	.word	0x40004808
 8005874:	2000badc 	.word	0x2000badc
 8005878:	2000bae0 	.word	0x2000bae0

0800587c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005882:	4b26      	ldr	r3, [pc, #152]	@ (800591c <_DoInit+0xa0>)
 8005884:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005886:	22a8      	movs	r2, #168	@ 0xa8
 8005888:	2100      	movs	r1, #0
 800588a:	6838      	ldr	r0, [r7, #0]
 800588c:	f001 fda4 	bl	80073d8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2203      	movs	r2, #3
 8005894:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2203      	movs	r2, #3
 800589a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	4a20      	ldr	r2, [pc, #128]	@ (8005920 <_DoInit+0xa4>)
 80058a0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005924 <_DoInit+0xa8>)
 80058a6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80058ae:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2200      	movs	r2, #0
 80058b4:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2200      	movs	r2, #0
 80058ba:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2200      	movs	r2, #0
 80058c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	4a16      	ldr	r2, [pc, #88]	@ (8005920 <_DoInit+0xa4>)
 80058c6:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	4a17      	ldr	r2, [pc, #92]	@ (8005928 <_DoInit+0xac>)
 80058cc:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2210      	movs	r2, #16
 80058d2:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2200      	movs	r2, #0
 80058d8:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2200      	movs	r2, #0
 80058de:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2200      	movs	r2, #0
 80058e4:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80058e6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80058ea:	2300      	movs	r3, #0
 80058ec:	607b      	str	r3, [r7, #4]
 80058ee:	e00c      	b.n	800590a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f1c3 030f 	rsb	r3, r3, #15
 80058f6:	4a0d      	ldr	r2, [pc, #52]	@ (800592c <_DoInit+0xb0>)
 80058f8:	5cd1      	ldrb	r1, [r2, r3]
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4413      	add	r3, r2
 8005900:	460a      	mov	r2, r1
 8005902:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3301      	adds	r3, #1
 8005908:	607b      	str	r3, [r7, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b0f      	cmp	r3, #15
 800590e:	d9ef      	bls.n	80058f0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005910:	f3bf 8f5f 	dmb	sy
}
 8005914:	bf00      	nop
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	2000bae4 	.word	0x2000bae4
 8005920:	08007540 	.word	0x08007540
 8005924:	2000bb8c 	.word	0x2000bb8c
 8005928:	2000bf8c 	.word	0x2000bf8c
 800592c:	08007580 	.word	0x08007580

08005930 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b08a      	sub	sp, #40	@ 0x28
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800593c:	2300      	movs	r3, #0
 800593e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	429a      	cmp	r2, r3
 8005952:	d905      	bls.n	8005960 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	3b01      	subs	r3, #1
 800595c:	627b      	str	r3, [r7, #36]	@ 0x24
 800595e:	e007      	b.n	8005970 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	69b9      	ldr	r1, [r7, #24]
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	1acb      	subs	r3, r1, r3
 800596a:	4413      	add	r3, r2
 800596c:	3b01      	subs	r3, #1
 800596e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800597a:	4293      	cmp	r3, r2
 800597c:	bf28      	it	cs
 800597e:	4613      	movcs	r3, r2
 8005980:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4293      	cmp	r3, r2
 8005988:	bf28      	it	cs
 800598a:	4613      	movcs	r3, r2
 800598c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	4413      	add	r3, r2
 8005996:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800599a:	68b9      	ldr	r1, [r7, #8]
 800599c:	6978      	ldr	r0, [r7, #20]
 800599e:	f001 fd47 	bl	8007430 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80059a2:	6a3a      	ldr	r2, [r7, #32]
 80059a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a6:	4413      	add	r3, r2
 80059a8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ae:	4413      	add	r3, r2
 80059b0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059be:	4413      	add	r3, r2
 80059c0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d101      	bne.n	80059d0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80059cc:	2300      	movs	r3, #0
 80059ce:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80059d0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	69fa      	ldr	r2, [r7, #28]
 80059d8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1b2      	bne.n	8005946 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80059e0:	6a3b      	ldr	r3, [r7, #32]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3728      	adds	r7, #40	@ 0x28
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b088      	sub	sp, #32
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	60f8      	str	r0, [r7, #12]
 80059f2:	60b9      	str	r1, [r7, #8]
 80059f4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d911      	bls.n	8005a32 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	4413      	add	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	68b9      	ldr	r1, [r7, #8]
 8005a1c:	6938      	ldr	r0, [r7, #16]
 8005a1e:	f001 fd07 	bl	8007430 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a22:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	441a      	add	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005a30:	e01f      	b.n	8005a72 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	6938      	ldr	r0, [r7, #16]
 8005a46:	f001 fcf3 	bl	8007430 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4619      	mov	r1, r3
 8005a62:	6938      	ldr	r0, [r7, #16]
 8005a64:	f001 fce4 	bl	8007430 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a68:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	60da      	str	r2, [r3, #12]
}
 8005a72:	bf00      	nop
 8005a74:	3720      	adds	r7, #32
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005a7a:	b480      	push	{r7}
 8005a7c:	b087      	sub	sp, #28
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d808      	bhi.n	8005aa8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	1ad2      	subs	r2, r2, r3
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	e004      	b.n	8005ab2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005ab2:	697b      	ldr	r3, [r7, #20]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b08c      	sub	sp, #48	@ 0x30
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005acc:	4b3e      	ldr	r3, [pc, #248]	@ (8005bc8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005ace:	623b      	str	r3, [r7, #32]
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b53      	cmp	r3, #83	@ 0x53
 8005ad8:	d001      	beq.n	8005ade <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005ada:	f7ff fecf 	bl	800587c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	4413      	add	r3, r2
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	4a37      	ldr	r2, [pc, #220]	@ (8005bc8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005aec:	4413      	add	r3, r2
 8005aee:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005b00:	2300      	movs	r3, #0
 8005b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005b04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d92b      	bls.n	8005b64 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	bf28      	it	cs
 8005b1e:	4613      	movcs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b28:	4413      	add	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	6939      	ldr	r1, [r7, #16]
 8005b30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b32:	f001 fc7d 	bl	8007430 <memcpy>
    NumBytesRead += NumBytesRem;
 8005b36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	4413      	add	r3, r2
 8005b44:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	4413      	add	r3, r2
 8005b54:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d101      	bne.n	8005b64 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005b60:	2300      	movs	r3, #0
 8005b62:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4293      	cmp	r3, r2
 8005b72:	bf28      	it	cs
 8005b74:	4613      	movcs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d019      	beq.n	8005bb2 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b84:	4413      	add	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	6939      	ldr	r1, [r7, #16]
 8005b8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b8e:	f001 fc4f 	bl	8007430 <memcpy>
    NumBytesRead += NumBytesRem;
 8005b92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	4413      	add	r3, r2
 8005b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005baa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	4413      	add	r3, r2
 8005bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bbc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3730      	adds	r7, #48	@ 0x30
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	2000bae4 	.word	0x2000bae4

08005bcc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08c      	sub	sp, #48	@ 0x30
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8005cd4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005bda:	623b      	str	r3, [r7, #32]
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b53      	cmp	r3, #83	@ 0x53
 8005be4:	d001      	beq.n	8005bea <SEGGER_RTT_ReadNoLock+0x1e>
 8005be6:	f7ff fe49 	bl	800587c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	4613      	mov	r3, r2
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	4413      	add	r3, r2
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	3360      	adds	r3, #96	@ 0x60
 8005bf6:	4a37      	ldr	r2, [pc, #220]	@ (8005cd4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005bf8:	4413      	add	r3, r2
 8005bfa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005c10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d92b      	bls.n	8005c70 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4293      	cmp	r3, r2
 8005c28:	bf28      	it	cs
 8005c2a:	4613      	movcs	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c34:	4413      	add	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	6939      	ldr	r1, [r7, #16]
 8005c3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c3e:	f001 fbf7 	bl	8007430 <memcpy>
    NumBytesRead += NumBytesRem;
 8005c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	4413      	add	r3, r2
 8005c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	4413      	add	r3, r2
 8005c50:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	4413      	add	r3, r2
 8005c60:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d101      	bne.n	8005c70 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	bf28      	it	cs
 8005c80:	4613      	movcs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d019      	beq.n	8005cbe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c90:	4413      	add	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	6939      	ldr	r1, [r7, #16]
 8005c98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c9a:	f001 fbc9 	bl	8007430 <memcpy>
    NumBytesRead += NumBytesRem;
 8005c9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	4413      	add	r3, r2
 8005cac:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005cb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	4413      	add	r3, r2
 8005cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cc8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3730      	adds	r7, #48	@ 0x30
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	2000bae4 	.word	0x2000bae4

08005cd8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4613      	mov	r3, r2
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	4413      	add	r3, r2
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	3360      	adds	r3, #96	@ 0x60
 8005cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8005d74 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005cf6:	4413      	add	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d029      	beq.n	8005d56 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d82e      	bhi.n	8005d64 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d013      	beq.n	8005d36 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005d0e:	e029      	b.n	8005d64 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005d10:	6978      	ldr	r0, [r7, #20]
 8005d12:	f7ff feb2 	bl	8005a7a <_GetAvailWriteSpace>
 8005d16:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d202      	bcs.n	8005d26 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005d20:	2300      	movs	r3, #0
 8005d22:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005d24:	e021      	b.n	8005d6a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	69b9      	ldr	r1, [r7, #24]
 8005d2e:	6978      	ldr	r0, [r7, #20]
 8005d30:	f7ff fe5b 	bl	80059ea <_WriteNoCheck>
    break;
 8005d34:	e019      	b.n	8005d6a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005d36:	6978      	ldr	r0, [r7, #20]
 8005d38:	f7ff fe9f 	bl	8005a7a <_GetAvailWriteSpace>
 8005d3c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	4293      	cmp	r3, r2
 8005d44:	bf28      	it	cs
 8005d46:	4613      	movcs	r3, r2
 8005d48:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005d4a:	69fa      	ldr	r2, [r7, #28]
 8005d4c:	69b9      	ldr	r1, [r7, #24]
 8005d4e:	6978      	ldr	r0, [r7, #20]
 8005d50:	f7ff fe4b 	bl	80059ea <_WriteNoCheck>
    break;
 8005d54:	e009      	b.n	8005d6a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	69b9      	ldr	r1, [r7, #24]
 8005d5a:	6978      	ldr	r0, [r7, #20]
 8005d5c:	f7ff fde8 	bl	8005930 <_WriteBlocking>
 8005d60:	61f8      	str	r0, [r7, #28]
    break;
 8005d62:	e002      	b.n	8005d6a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005d64:	2300      	movs	r3, #0
 8005d66:	61fb      	str	r3, [r7, #28]
    break;
 8005d68:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3720      	adds	r7, #32
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	2000bae4 	.word	0x2000bae4

08005d78 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005d84:	4b0e      	ldr	r3, [pc, #56]	@ (8005dc0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005d86:	61fb      	str	r3, [r7, #28]
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b53      	cmp	r3, #83	@ 0x53
 8005d90:	d001      	beq.n	8005d96 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005d92:	f7ff fd73 	bl	800587c <_DoInit>
  SEGGER_RTT_LOCK();
 8005d96:	f3ef 8311 	mrs	r3, BASEPRI
 8005d9a:	f04f 0120 	mov.w	r1, #32
 8005d9e:	f381 8811 	msr	BASEPRI, r1
 8005da2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	68b9      	ldr	r1, [r7, #8]
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f7ff ff95 	bl	8005cd8 <SEGGER_RTT_WriteDownBufferNoLock>
 8005dae:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005db6:	697b      	ldr	r3, [r7, #20]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3720      	adds	r7, #32
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	2000bae4 	.word	0x2000bae4

08005dc4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8005ec8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005dd4:	61bb      	str	r3, [r7, #24]
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b53      	cmp	r3, #83	@ 0x53
 8005dde:	d001      	beq.n	8005de4 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005de0:	f7ff fd4c 	bl	800587c <_DoInit>
  SEGGER_RTT_LOCK();
 8005de4:	f3ef 8311 	mrs	r3, BASEPRI
 8005de8:	f04f 0120 	mov.w	r1, #32
 8005dec:	f381 8811 	msr	BASEPRI, r1
 8005df0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005df2:	4b35      	ldr	r3, [pc, #212]	@ (8005ec8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005df4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005dfa:	6939      	ldr	r1, [r7, #16]
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	4613      	mov	r3, r2
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	4413      	add	r3, r2
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	440b      	add	r3, r1
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d008      	beq.n	8005e24 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	3301      	adds	r3, #1
 8005e16:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	dbeb      	blt.n	8005dfa <SEGGER_RTT_AllocUpBuffer+0x36>
 8005e22:	e000      	b.n	8005e26 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005e24:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	da3f      	bge.n	8005eb0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005e30:	6939      	ldr	r1, [r7, #16]
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	4613      	mov	r3, r2
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	4413      	add	r3, r2
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	440b      	add	r3, r1
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005e44:	6939      	ldr	r1, [r7, #16]
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	1c5a      	adds	r2, r3, #1
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	005b      	lsls	r3, r3, #1
 8005e4e:	4413      	add	r3, r2
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	440b      	add	r3, r1
 8005e54:	3304      	adds	r3, #4
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005e5a:	6939      	ldr	r1, [r7, #16]
 8005e5c:	69fa      	ldr	r2, [r7, #28]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	4413      	add	r3, r2
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	440b      	add	r3, r1
 8005e68:	3320      	adds	r3, #32
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005e6e:	6939      	ldr	r1, [r7, #16]
 8005e70:	69fa      	ldr	r2, [r7, #28]
 8005e72:	4613      	mov	r3, r2
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	4413      	add	r3, r2
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	440b      	add	r3, r1
 8005e7c:	3328      	adds	r3, #40	@ 0x28
 8005e7e:	2200      	movs	r2, #0
 8005e80:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005e82:	6939      	ldr	r1, [r7, #16]
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	4613      	mov	r3, r2
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	4413      	add	r3, r2
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	440b      	add	r3, r1
 8005e90:	3324      	adds	r3, #36	@ 0x24
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005e96:	6939      	ldr	r1, [r7, #16]
 8005e98:	69fa      	ldr	r2, [r7, #28]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	4413      	add	r3, r2
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	440b      	add	r3, r1
 8005ea4:	332c      	adds	r3, #44	@ 0x2c
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005eaa:	f3bf 8f5f 	dmb	sy
 8005eae:	e002      	b.n	8005eb6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005ebc:	69fb      	ldr	r3, [r7, #28]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3720      	adds	r7, #32
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	2000bae4 	.word	0x2000bae4

08005ecc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08a      	sub	sp, #40	@ 0x28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005eda:	4b21      	ldr	r3, [pc, #132]	@ (8005f60 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005edc:	623b      	str	r3, [r7, #32]
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b53      	cmp	r3, #83	@ 0x53
 8005ee6:	d001      	beq.n	8005eec <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005ee8:	f7ff fcc8 	bl	800587c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005eec:	4b1c      	ldr	r3, [pc, #112]	@ (8005f60 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005eee:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d82c      	bhi.n	8005f50 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005ef6:	f3ef 8311 	mrs	r3, BASEPRI
 8005efa:	f04f 0120 	mov.w	r1, #32
 8005efe:	f381 8811 	msr	BASEPRI, r1
 8005f02:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	4613      	mov	r3, r2
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	4413      	add	r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	3360      	adds	r3, #96	@ 0x60
 8005f10:	69fa      	ldr	r2, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00e      	beq.n	8005f3a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2200      	movs	r2, #0
 8005f32:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2200      	movs	r2, #0
 8005f38:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f3e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005f40:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f4e:	e002      	b.n	8005f56 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005f50:	f04f 33ff 	mov.w	r3, #4294967295
 8005f54:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3728      	adds	r7, #40	@ 0x28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	2000bae4 	.word	0x2000bae4

08005f64 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	60fa      	str	r2, [r7, #12]
 8005f7a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b80      	cmp	r3, #128	@ 0x80
 8005f80:	d90a      	bls.n	8005f98 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005f82:	2380      	movs	r3, #128	@ 0x80
 8005f84:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005f86:	e007      	b.n	8005f98 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	1c53      	adds	r3, r2, #1
 8005f8c:	60bb      	str	r3, [r7, #8]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	1c59      	adds	r1, r3, #1
 8005f92:	60f9      	str	r1, [r7, #12]
 8005f94:	7812      	ldrb	r2, [r2, #0]
 8005f96:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	1e5a      	subs	r2, r3, #1
 8005f9c:	607a      	str	r2, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <_EncodeStr+0x46>
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1ee      	bne.n	8005f88 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	371c      	adds	r7, #28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3307      	adds	r3, #7
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005fe2:	4b34      	ldr	r3, [pc, #208]	@ (80060b4 <_HandleIncomingPacket+0xd8>)
 8005fe4:	7e1b      	ldrb	r3, [r3, #24]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	1cfb      	adds	r3, r7, #3
 8005fea:	2201      	movs	r2, #1
 8005fec:	4619      	mov	r1, r3
 8005fee:	f7ff fded 	bl	8005bcc <SEGGER_RTT_ReadNoLock>
 8005ff2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d057      	beq.n	80060aa <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8005ffa:	78fb      	ldrb	r3, [r7, #3]
 8005ffc:	2b80      	cmp	r3, #128	@ 0x80
 8005ffe:	d031      	beq.n	8006064 <_HandleIncomingPacket+0x88>
 8006000:	2b80      	cmp	r3, #128	@ 0x80
 8006002:	dc40      	bgt.n	8006086 <_HandleIncomingPacket+0xaa>
 8006004:	2b07      	cmp	r3, #7
 8006006:	dc15      	bgt.n	8006034 <_HandleIncomingPacket+0x58>
 8006008:	2b00      	cmp	r3, #0
 800600a:	dd3c      	ble.n	8006086 <_HandleIncomingPacket+0xaa>
 800600c:	3b01      	subs	r3, #1
 800600e:	2b06      	cmp	r3, #6
 8006010:	d839      	bhi.n	8006086 <_HandleIncomingPacket+0xaa>
 8006012:	a201      	add	r2, pc, #4	@ (adr r2, 8006018 <_HandleIncomingPacket+0x3c>)
 8006014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006018:	0800603b 	.word	0x0800603b
 800601c:	08006041 	.word	0x08006041
 8006020:	08006047 	.word	0x08006047
 8006024:	0800604d 	.word	0x0800604d
 8006028:	08006053 	.word	0x08006053
 800602c:	08006059 	.word	0x08006059
 8006030:	0800605f 	.word	0x0800605f
 8006034:	2b7f      	cmp	r3, #127	@ 0x7f
 8006036:	d033      	beq.n	80060a0 <_HandleIncomingPacket+0xc4>
 8006038:	e025      	b.n	8006086 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800603a:	f000 fb25 	bl	8006688 <SEGGER_SYSVIEW_Start>
      break;
 800603e:	e034      	b.n	80060aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006040:	f000 fbdc 	bl	80067fc <SEGGER_SYSVIEW_Stop>
      break;
 8006044:	e031      	b.n	80060aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006046:	f000 fdb5 	bl	8006bb4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800604a:	e02e      	b.n	80060aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800604c:	f000 fd7a 	bl	8006b44 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006050:	e02b      	b.n	80060aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006052:	f000 fbf9 	bl	8006848 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006056:	e028      	b.n	80060aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006058:	f001 f8e6 	bl	8007228 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800605c:	e025      	b.n	80060aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800605e:	f001 f8c5 	bl	80071ec <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006062:	e022      	b.n	80060aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006064:	4b13      	ldr	r3, [pc, #76]	@ (80060b4 <_HandleIncomingPacket+0xd8>)
 8006066:	7e1b      	ldrb	r3, [r3, #24]
 8006068:	4618      	mov	r0, r3
 800606a:	1cfb      	adds	r3, r7, #3
 800606c:	2201      	movs	r2, #1
 800606e:	4619      	mov	r1, r3
 8006070:	f7ff fdac 	bl	8005bcc <SEGGER_RTT_ReadNoLock>
 8006074:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d013      	beq.n	80060a4 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	4618      	mov	r0, r3
 8006080:	f001 f82a 	bl	80070d8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006084:	e00e      	b.n	80060a4 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006086:	78fb      	ldrb	r3, [r7, #3]
 8006088:	b25b      	sxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	da0c      	bge.n	80060a8 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800608e:	4b09      	ldr	r3, [pc, #36]	@ (80060b4 <_HandleIncomingPacket+0xd8>)
 8006090:	7e1b      	ldrb	r3, [r3, #24]
 8006092:	4618      	mov	r0, r3
 8006094:	1cfb      	adds	r3, r7, #3
 8006096:	2201      	movs	r2, #1
 8006098:	4619      	mov	r1, r3
 800609a:	f7ff fd97 	bl	8005bcc <SEGGER_RTT_ReadNoLock>
      }
      break;
 800609e:	e003      	b.n	80060a8 <_HandleIncomingPacket+0xcc>
      break;
 80060a0:	bf00      	nop
 80060a2:	e002      	b.n	80060aa <_HandleIncomingPacket+0xce>
      break;
 80060a4:	bf00      	nop
 80060a6:	e000      	b.n	80060aa <_HandleIncomingPacket+0xce>
      break;
 80060a8:	bf00      	nop
    }
  }
}
 80060aa:	bf00      	nop
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	2000c3a4 	.word	0x2000c3a4

080060b8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08c      	sub	sp, #48	@ 0x30
 80060bc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80060be:	2301      	movs	r3, #1
 80060c0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80060c2:	1d3b      	adds	r3, r7, #4
 80060c4:	3301      	adds	r3, #1
 80060c6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060cc:	4b31      	ldr	r3, [pc, #196]	@ (8006194 <_TrySendOverflowPacket+0xdc>)
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060d2:	e00b      	b.n	80060ec <_TrySendOverflowPacket+0x34>
 80060d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060da:	1c59      	adds	r1, r3, #1
 80060dc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80060de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e8:	09db      	lsrs	r3, r3, #7
 80060ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80060f0:	d8f0      	bhi.n	80060d4 <_TrySendOverflowPacket+0x1c>
 80060f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	701a      	strb	r2, [r3, #0]
 80060fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006100:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006102:	4b25      	ldr	r3, [pc, #148]	@ (8006198 <_TrySendOverflowPacket+0xe0>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006108:	4b22      	ldr	r3, [pc, #136]	@ (8006194 <_TrySendOverflowPacket+0xdc>)
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	627b      	str	r3, [r7, #36]	@ 0x24
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	623b      	str	r3, [r7, #32]
 800611a:	e00b      	b.n	8006134 <_TrySendOverflowPacket+0x7c>
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	b2da      	uxtb	r2, r3
 8006120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006122:	1c59      	adds	r1, r3, #1
 8006124:	6279      	str	r1, [r7, #36]	@ 0x24
 8006126:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800612a:	b2d2      	uxtb	r2, r2
 800612c:	701a      	strb	r2, [r3, #0]
 800612e:	6a3b      	ldr	r3, [r7, #32]
 8006130:	09db      	lsrs	r3, r3, #7
 8006132:	623b      	str	r3, [r7, #32]
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	2b7f      	cmp	r3, #127	@ 0x7f
 8006138:	d8f0      	bhi.n	800611c <_TrySendOverflowPacket+0x64>
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006140:	6a3a      	ldr	r2, [r7, #32]
 8006142:	b2d2      	uxtb	r2, r2
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006148:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800614a:	4b12      	ldr	r3, [pc, #72]	@ (8006194 <_TrySendOverflowPacket+0xdc>)
 800614c:	785b      	ldrb	r3, [r3, #1]
 800614e:	4618      	mov	r0, r3
 8006150:	1d3b      	adds	r3, r7, #4
 8006152:	69fa      	ldr	r2, [r7, #28]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	461a      	mov	r2, r3
 8006158:	1d3b      	adds	r3, r7, #4
 800615a:	4619      	mov	r1, r3
 800615c:	f7fa f870 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006160:	4603      	mov	r3, r0
 8006162:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d009      	beq.n	800617e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800616a:	4a0a      	ldr	r2, [pc, #40]	@ (8006194 <_TrySendOverflowPacket+0xdc>)
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006170:	4b08      	ldr	r3, [pc, #32]	@ (8006194 <_TrySendOverflowPacket+0xdc>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	3b01      	subs	r3, #1
 8006176:	b2da      	uxtb	r2, r3
 8006178:	4b06      	ldr	r3, [pc, #24]	@ (8006194 <_TrySendOverflowPacket+0xdc>)
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	e004      	b.n	8006188 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800617e:	4b05      	ldr	r3, [pc, #20]	@ (8006194 <_TrySendOverflowPacket+0xdc>)
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	3301      	adds	r3, #1
 8006184:	4a03      	ldr	r2, [pc, #12]	@ (8006194 <_TrySendOverflowPacket+0xdc>)
 8006186:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006188:	693b      	ldr	r3, [r7, #16]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3730      	adds	r7, #48	@ 0x30
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	2000c3a4 	.word	0x2000c3a4
 8006198:	e0001004 	.word	0xe0001004

0800619c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800619c:	b580      	push	{r7, lr}
 800619e:	b08a      	sub	sp, #40	@ 0x28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80061a8:	4b98      	ldr	r3, [pc, #608]	@ (800640c <_SendPacket+0x270>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d010      	beq.n	80061d2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80061b0:	4b96      	ldr	r3, [pc, #600]	@ (800640c <_SendPacket+0x270>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 812d 	beq.w	8006414 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80061ba:	4b94      	ldr	r3, [pc, #592]	@ (800640c <_SendPacket+0x270>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d109      	bne.n	80061d6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80061c2:	f7ff ff79 	bl	80060b8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80061c6:	4b91      	ldr	r3, [pc, #580]	@ (800640c <_SendPacket+0x270>)
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	f040 8124 	bne.w	8006418 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80061d0:	e001      	b.n	80061d6 <_SendPacket+0x3a>
    goto Send;
 80061d2:	bf00      	nop
 80061d4:	e000      	b.n	80061d8 <_SendPacket+0x3c>
Send:
 80061d6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b1f      	cmp	r3, #31
 80061dc:	d809      	bhi.n	80061f2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80061de:	4b8b      	ldr	r3, [pc, #556]	@ (800640c <_SendPacket+0x270>)
 80061e0:	69da      	ldr	r2, [r3, #28]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	fa22 f303 	lsr.w	r3, r2, r3
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f040 8115 	bne.w	800641c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b17      	cmp	r3, #23
 80061f6:	d807      	bhi.n	8006208 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	b2da      	uxtb	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	e0c4      	b.n	8006392 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	2b7f      	cmp	r3, #127	@ 0x7f
 8006214:	d912      	bls.n	800623c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	09da      	lsrs	r2, r3, #7
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3b01      	subs	r3, #1
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	b2db      	uxtb	r3, r3
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	3a01      	subs	r2, #1
 800622e:	60fa      	str	r2, [r7, #12]
 8006230:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006234:	b2da      	uxtb	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	e006      	b.n	800624a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3b01      	subs	r3, #1
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	b2da      	uxtb	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b7e      	cmp	r3, #126	@ 0x7e
 800624e:	d807      	bhi.n	8006260 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	3b01      	subs	r3, #1
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	b2da      	uxtb	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	e098      	b.n	8006392 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006266:	d212      	bcs.n	800628e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	09da      	lsrs	r2, r3, #7
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3b01      	subs	r3, #1
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	b2db      	uxtb	r3, r3
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	3a01      	subs	r2, #1
 8006280:	60fa      	str	r2, [r7, #12]
 8006282:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006286:	b2da      	uxtb	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	e081      	b.n	8006392 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006294:	d21d      	bcs.n	80062d2 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	0b9a      	lsrs	r2, r3, #14
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3b01      	subs	r3, #1
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	09db      	lsrs	r3, r3, #7
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	3a01      	subs	r2, #1
 80062b0:	60fa      	str	r2, [r7, #12]
 80062b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	3a01      	subs	r2, #1
 80062c4:	60fa      	str	r2, [r7, #12]
 80062c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	701a      	strb	r2, [r3, #0]
 80062d0:	e05f      	b.n	8006392 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062d8:	d228      	bcs.n	800632c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	0d5a      	lsrs	r2, r3, #21
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	0b9b      	lsrs	r3, r3, #14
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	3a01      	subs	r2, #1
 80062f4:	60fa      	str	r2, [r7, #12]
 80062f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	09db      	lsrs	r3, r3, #7
 8006304:	b2db      	uxtb	r3, r3
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	3a01      	subs	r2, #1
 800630a:	60fa      	str	r2, [r7, #12]
 800630c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006310:	b2da      	uxtb	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	b2db      	uxtb	r3, r3
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	3a01      	subs	r2, #1
 800631e:	60fa      	str	r2, [r7, #12]
 8006320:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006324:	b2da      	uxtb	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	701a      	strb	r2, [r3, #0]
 800632a:	e032      	b.n	8006392 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	0f1a      	lsrs	r2, r3, #28
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3b01      	subs	r3, #1
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	b2d2      	uxtb	r2, r2
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	0d5b      	lsrs	r3, r3, #21
 8006340:	b2db      	uxtb	r3, r3
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	3a01      	subs	r2, #1
 8006346:	60fa      	str	r2, [r7, #12]
 8006348:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800634c:	b2da      	uxtb	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	0b9b      	lsrs	r3, r3, #14
 8006356:	b2db      	uxtb	r3, r3
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	3a01      	subs	r2, #1
 800635c:	60fa      	str	r2, [r7, #12]
 800635e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006362:	b2da      	uxtb	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	09db      	lsrs	r3, r3, #7
 800636c:	b2db      	uxtb	r3, r3
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	3a01      	subs	r2, #1
 8006372:	60fa      	str	r2, [r7, #12]
 8006374:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006378:	b2da      	uxtb	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	b2db      	uxtb	r3, r3
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	3a01      	subs	r2, #1
 8006386:	60fa      	str	r2, [r7, #12]
 8006388:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800638c:	b2da      	uxtb	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006392:	4b1f      	ldr	r3, [pc, #124]	@ (8006410 <_SendPacket+0x274>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006398:	4b1c      	ldr	r3, [pc, #112]	@ (800640c <_SendPacket+0x270>)
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	623b      	str	r3, [r7, #32]
 80063aa:	e00b      	b.n	80063c4 <_SendPacket+0x228>
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b2:	1c59      	adds	r1, r3, #1
 80063b4:	6279      	str	r1, [r7, #36]	@ 0x24
 80063b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	701a      	strb	r2, [r3, #0]
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	09db      	lsrs	r3, r3, #7
 80063c2:	623b      	str	r3, [r7, #32]
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80063c8:	d8f0      	bhi.n	80063ac <_SendPacket+0x210>
 80063ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80063d0:	6a3a      	ldr	r2, [r7, #32]
 80063d2:	b2d2      	uxtb	r2, r2
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80063da:	4b0c      	ldr	r3, [pc, #48]	@ (800640c <_SendPacket+0x270>)
 80063dc:	785b      	ldrb	r3, [r3, #1]
 80063de:	4618      	mov	r0, r3
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	461a      	mov	r2, r3
 80063e8:	68f9      	ldr	r1, [r7, #12]
 80063ea:	f7f9 ff29 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80063ee:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80063f6:	4a05      	ldr	r2, [pc, #20]	@ (800640c <_SendPacket+0x270>)
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	60d3      	str	r3, [r2, #12]
 80063fc:	e00f      	b.n	800641e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80063fe:	4b03      	ldr	r3, [pc, #12]	@ (800640c <_SendPacket+0x270>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	3301      	adds	r3, #1
 8006404:	b2da      	uxtb	r2, r3
 8006406:	4b01      	ldr	r3, [pc, #4]	@ (800640c <_SendPacket+0x270>)
 8006408:	701a      	strb	r2, [r3, #0]
 800640a:	e008      	b.n	800641e <_SendPacket+0x282>
 800640c:	2000c3a4 	.word	0x2000c3a4
 8006410:	e0001004 	.word	0xe0001004
    goto SendDone;
 8006414:	bf00      	nop
 8006416:	e002      	b.n	800641e <_SendPacket+0x282>
      goto SendDone;
 8006418:	bf00      	nop
 800641a:	e000      	b.n	800641e <_SendPacket+0x282>
      goto SendDone;
 800641c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800641e:	4b14      	ldr	r3, [pc, #80]	@ (8006470 <_SendPacket+0x2d4>)
 8006420:	7e1b      	ldrb	r3, [r3, #24]
 8006422:	4619      	mov	r1, r3
 8006424:	4a13      	ldr	r2, [pc, #76]	@ (8006474 <_SendPacket+0x2d8>)
 8006426:	460b      	mov	r3, r1
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	440b      	add	r3, r1
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	4413      	add	r3, r2
 8006430:	336c      	adds	r3, #108	@ 0x6c
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	4b0e      	ldr	r3, [pc, #56]	@ (8006470 <_SendPacket+0x2d4>)
 8006436:	7e1b      	ldrb	r3, [r3, #24]
 8006438:	4618      	mov	r0, r3
 800643a:	490e      	ldr	r1, [pc, #56]	@ (8006474 <_SendPacket+0x2d8>)
 800643c:	4603      	mov	r3, r0
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	4403      	add	r3, r0
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	440b      	add	r3, r1
 8006446:	3370      	adds	r3, #112	@ 0x70
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	429a      	cmp	r2, r3
 800644c:	d00b      	beq.n	8006466 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800644e:	4b08      	ldr	r3, [pc, #32]	@ (8006470 <_SendPacket+0x2d4>)
 8006450:	789b      	ldrb	r3, [r3, #2]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d107      	bne.n	8006466 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006456:	4b06      	ldr	r3, [pc, #24]	@ (8006470 <_SendPacket+0x2d4>)
 8006458:	2201      	movs	r2, #1
 800645a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800645c:	f7ff fdbe 	bl	8005fdc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006460:	4b03      	ldr	r3, [pc, #12]	@ (8006470 <_SendPacket+0x2d4>)
 8006462:	2200      	movs	r2, #0
 8006464:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006466:	bf00      	nop
 8006468:	3728      	adds	r7, #40	@ 0x28
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	2000c3a4 	.word	0x2000c3a4
 8006474:	2000bae4 	.word	0x2000bae4

08006478 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af02      	add	r7, sp, #8
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006486:	2300      	movs	r3, #0
 8006488:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800648c:	4917      	ldr	r1, [pc, #92]	@ (80064ec <SEGGER_SYSVIEW_Init+0x74>)
 800648e:	4818      	ldr	r0, [pc, #96]	@ (80064f0 <SEGGER_SYSVIEW_Init+0x78>)
 8006490:	f7ff fc98 	bl	8005dc4 <SEGGER_RTT_AllocUpBuffer>
 8006494:	4603      	mov	r3, r0
 8006496:	b2da      	uxtb	r2, r3
 8006498:	4b16      	ldr	r3, [pc, #88]	@ (80064f4 <SEGGER_SYSVIEW_Init+0x7c>)
 800649a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800649c:	4b15      	ldr	r3, [pc, #84]	@ (80064f4 <SEGGER_SYSVIEW_Init+0x7c>)
 800649e:	785a      	ldrb	r2, [r3, #1]
 80064a0:	4b14      	ldr	r3, [pc, #80]	@ (80064f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80064a2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80064a4:	4b13      	ldr	r3, [pc, #76]	@ (80064f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80064a6:	7e1b      	ldrb	r3, [r3, #24]
 80064a8:	4618      	mov	r0, r3
 80064aa:	2300      	movs	r3, #0
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	2308      	movs	r3, #8
 80064b0:	4a11      	ldr	r2, [pc, #68]	@ (80064f8 <SEGGER_SYSVIEW_Init+0x80>)
 80064b2:	490f      	ldr	r1, [pc, #60]	@ (80064f0 <SEGGER_SYSVIEW_Init+0x78>)
 80064b4:	f7ff fd0a 	bl	8005ecc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80064b8:	4b0e      	ldr	r3, [pc, #56]	@ (80064f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80064be:	4b0f      	ldr	r3, [pc, #60]	@ (80064fc <SEGGER_SYSVIEW_Init+0x84>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a0c      	ldr	r2, [pc, #48]	@ (80064f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80064c4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80064c6:	4a0b      	ldr	r2, [pc, #44]	@ (80064f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80064cc:	4a09      	ldr	r2, [pc, #36]	@ (80064f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80064d2:	4a08      	ldr	r2, [pc, #32]	@ (80064f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80064d8:	4a06      	ldr	r2, [pc, #24]	@ (80064f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80064de:	4b05      	ldr	r3, [pc, #20]	@ (80064f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80064e4:	bf00      	nop
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	2000bf9c 	.word	0x2000bf9c
 80064f0:	08007554 	.word	0x08007554
 80064f4:	2000c3a4 	.word	0x2000c3a4
 80064f8:	2000c39c 	.word	0x2000c39c
 80064fc:	e0001004 	.word	0xe0001004

08006500 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006508:	4a04      	ldr	r2, [pc, #16]	@ (800651c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6113      	str	r3, [r2, #16]
}
 800650e:	bf00      	nop
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	2000c3a4 	.word	0x2000c3a4

08006520 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006528:	f3ef 8311 	mrs	r3, BASEPRI
 800652c:	f04f 0120 	mov.w	r1, #32
 8006530:	f381 8811 	msr	BASEPRI, r1
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	4808      	ldr	r0, [pc, #32]	@ (8006558 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006538:	f7ff fd44 	bl	8005fc4 <_PreparePacket>
 800653c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	68b9      	ldr	r1, [r7, #8]
 8006542:	68b8      	ldr	r0, [r7, #8]
 8006544:	f7ff fe2a 	bl	800619c <_SendPacket>
  RECORD_END();
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f383 8811 	msr	BASEPRI, r3
}
 800654e:	bf00      	nop
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	2000c3d4 	.word	0x2000c3d4

0800655c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006566:	f3ef 8311 	mrs	r3, BASEPRI
 800656a:	f04f 0120 	mov.w	r1, #32
 800656e:	f381 8811 	msr	BASEPRI, r1
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	4816      	ldr	r0, [pc, #88]	@ (80065d0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006576:	f7ff fd25 	bl	8005fc4 <_PreparePacket>
 800657a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	61fb      	str	r3, [r7, #28]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	61bb      	str	r3, [r7, #24]
 8006588:	e00b      	b.n	80065a2 <SEGGER_SYSVIEW_RecordU32+0x46>
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	b2da      	uxtb	r2, r3
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	1c59      	adds	r1, r3, #1
 8006592:	61f9      	str	r1, [r7, #28]
 8006594:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006598:	b2d2      	uxtb	r2, r2
 800659a:	701a      	strb	r2, [r3, #0]
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	09db      	lsrs	r3, r3, #7
 80065a0:	61bb      	str	r3, [r7, #24]
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80065a6:	d8f0      	bhi.n	800658a <SEGGER_SYSVIEW_RecordU32+0x2e>
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	61fa      	str	r2, [r7, #28]
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	b2d2      	uxtb	r2, r2
 80065b2:	701a      	strb	r2, [r3, #0]
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	68f9      	ldr	r1, [r7, #12]
 80065bc:	6938      	ldr	r0, [r7, #16]
 80065be:	f7ff fded 	bl	800619c <_SendPacket>
  RECORD_END();
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f383 8811 	msr	BASEPRI, r3
}
 80065c8:	bf00      	nop
 80065ca:	3720      	adds	r7, #32
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	2000c3d4 	.word	0x2000c3d4

080065d4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b08c      	sub	sp, #48	@ 0x30
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80065e0:	f3ef 8311 	mrs	r3, BASEPRI
 80065e4:	f04f 0120 	mov.w	r1, #32
 80065e8:	f381 8811 	msr	BASEPRI, r1
 80065ec:	61fb      	str	r3, [r7, #28]
 80065ee:	4825      	ldr	r0, [pc, #148]	@ (8006684 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80065f0:	f7ff fce8 	bl	8005fc4 <_PreparePacket>
 80065f4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006602:	e00b      	b.n	800661c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006606:	b2da      	uxtb	r2, r3
 8006608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800660a:	1c59      	adds	r1, r3, #1
 800660c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800660e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	701a      	strb	r2, [r3, #0]
 8006616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006618:	09db      	lsrs	r3, r3, #7
 800661a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800661c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006620:	d8f0      	bhi.n	8006604 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006624:	1c5a      	adds	r2, r3, #1
 8006626:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006628:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	701a      	strb	r2, [r3, #0]
 800662e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006630:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	627b      	str	r3, [r7, #36]	@ 0x24
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	623b      	str	r3, [r7, #32]
 800663a:	e00b      	b.n	8006654 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	b2da      	uxtb	r2, r3
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	1c59      	adds	r1, r3, #1
 8006644:	6279      	str	r1, [r7, #36]	@ 0x24
 8006646:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	09db      	lsrs	r3, r3, #7
 8006652:	623b      	str	r3, [r7, #32]
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	2b7f      	cmp	r3, #127	@ 0x7f
 8006658:	d8f0      	bhi.n	800663c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006660:	6a3a      	ldr	r2, [r7, #32]
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	701a      	strb	r2, [r3, #0]
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	6979      	ldr	r1, [r7, #20]
 800666e:	69b8      	ldr	r0, [r7, #24]
 8006670:	f7ff fd94 	bl	800619c <_SendPacket>
  RECORD_END();
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	f383 8811 	msr	BASEPRI, r3
}
 800667a:	bf00      	nop
 800667c:	3730      	adds	r7, #48	@ 0x30
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	2000c3d4 	.word	0x2000c3d4

08006688 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006688:	b580      	push	{r7, lr}
 800668a:	b08c      	sub	sp, #48	@ 0x30
 800668c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800668e:	4b58      	ldr	r3, [pc, #352]	@ (80067f0 <SEGGER_SYSVIEW_Start+0x168>)
 8006690:	2201      	movs	r2, #1
 8006692:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006694:	f3ef 8311 	mrs	r3, BASEPRI
 8006698:	f04f 0120 	mov.w	r1, #32
 800669c:	f381 8811 	msr	BASEPRI, r1
 80066a0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80066a2:	4b53      	ldr	r3, [pc, #332]	@ (80067f0 <SEGGER_SYSVIEW_Start+0x168>)
 80066a4:	785b      	ldrb	r3, [r3, #1]
 80066a6:	220a      	movs	r2, #10
 80066a8:	4952      	ldr	r1, [pc, #328]	@ (80067f4 <SEGGER_SYSVIEW_Start+0x16c>)
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7f9 fdc8 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80066b6:	200a      	movs	r0, #10
 80066b8:	f7ff ff32 	bl	8006520 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80066bc:	f3ef 8311 	mrs	r3, BASEPRI
 80066c0:	f04f 0120 	mov.w	r1, #32
 80066c4:	f381 8811 	msr	BASEPRI, r1
 80066c8:	60bb      	str	r3, [r7, #8]
 80066ca:	484b      	ldr	r0, [pc, #300]	@ (80067f8 <SEGGER_SYSVIEW_Start+0x170>)
 80066cc:	f7ff fc7a 	bl	8005fc4 <_PreparePacket>
 80066d0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066da:	4b45      	ldr	r3, [pc, #276]	@ (80067f0 <SEGGER_SYSVIEW_Start+0x168>)
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066e0:	e00b      	b.n	80066fa <SEGGER_SYSVIEW_Start+0x72>
 80066e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e8:	1c59      	adds	r1, r3, #1
 80066ea:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80066ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	701a      	strb	r2, [r3, #0]
 80066f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f6:	09db      	lsrs	r3, r3, #7
 80066f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80066fe:	d8f0      	bhi.n	80066e2 <SEGGER_SYSVIEW_Start+0x5a>
 8006700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006706:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]
 800670c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800670e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	627b      	str	r3, [r7, #36]	@ 0x24
 8006714:	4b36      	ldr	r3, [pc, #216]	@ (80067f0 <SEGGER_SYSVIEW_Start+0x168>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	623b      	str	r3, [r7, #32]
 800671a:	e00b      	b.n	8006734 <SEGGER_SYSVIEW_Start+0xac>
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	b2da      	uxtb	r2, r3
 8006720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006722:	1c59      	adds	r1, r3, #1
 8006724:	6279      	str	r1, [r7, #36]	@ 0x24
 8006726:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	701a      	strb	r2, [r3, #0]
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	09db      	lsrs	r3, r3, #7
 8006732:	623b      	str	r3, [r7, #32]
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	2b7f      	cmp	r3, #127	@ 0x7f
 8006738:	d8f0      	bhi.n	800671c <SEGGER_SYSVIEW_Start+0x94>
 800673a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006740:	6a3a      	ldr	r2, [r7, #32]
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	61fb      	str	r3, [r7, #28]
 800674e:	4b28      	ldr	r3, [pc, #160]	@ (80067f0 <SEGGER_SYSVIEW_Start+0x168>)
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	61bb      	str	r3, [r7, #24]
 8006754:	e00b      	b.n	800676e <SEGGER_SYSVIEW_Start+0xe6>
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	b2da      	uxtb	r2, r3
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	1c59      	adds	r1, r3, #1
 800675e:	61f9      	str	r1, [r7, #28]
 8006760:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006764:	b2d2      	uxtb	r2, r2
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	09db      	lsrs	r3, r3, #7
 800676c:	61bb      	str	r3, [r7, #24]
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	2b7f      	cmp	r3, #127	@ 0x7f
 8006772:	d8f0      	bhi.n	8006756 <SEGGER_SYSVIEW_Start+0xce>
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	61fa      	str	r2, [r7, #28]
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	b2d2      	uxtb	r2, r2
 800677e:	701a      	strb	r2, [r3, #0]
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	617b      	str	r3, [r7, #20]
 8006788:	2300      	movs	r3, #0
 800678a:	613b      	str	r3, [r7, #16]
 800678c:	e00b      	b.n	80067a6 <SEGGER_SYSVIEW_Start+0x11e>
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	b2da      	uxtb	r2, r3
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	1c59      	adds	r1, r3, #1
 8006796:	6179      	str	r1, [r7, #20]
 8006798:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800679c:	b2d2      	uxtb	r2, r2
 800679e:	701a      	strb	r2, [r3, #0]
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	09db      	lsrs	r3, r3, #7
 80067a4:	613b      	str	r3, [r7, #16]
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80067aa:	d8f0      	bhi.n	800678e <SEGGER_SYSVIEW_Start+0x106>
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	1c5a      	adds	r2, r3, #1
 80067b0:	617a      	str	r2, [r7, #20]
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	701a      	strb	r2, [r3, #0]
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80067bc:	2218      	movs	r2, #24
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7ff fceb 	bl	800619c <_SendPacket>
      RECORD_END();
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80067cc:	4b08      	ldr	r3, [pc, #32]	@ (80067f0 <SEGGER_SYSVIEW_Start+0x168>)
 80067ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80067d4:	4b06      	ldr	r3, [pc, #24]	@ (80067f0 <SEGGER_SYSVIEW_Start+0x168>)
 80067d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80067da:	f000 f9eb 	bl	8006bb4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80067de:	f000 f9b1 	bl	8006b44 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80067e2:	f000 fd21 	bl	8007228 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80067e6:	bf00      	nop
 80067e8:	3730      	adds	r7, #48	@ 0x30
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	2000c3a4 	.word	0x2000c3a4
 80067f4:	08007594 	.word	0x08007594
 80067f8:	2000c3d4 	.word	0x2000c3d4

080067fc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006802:	f3ef 8311 	mrs	r3, BASEPRI
 8006806:	f04f 0120 	mov.w	r1, #32
 800680a:	f381 8811 	msr	BASEPRI, r1
 800680e:	607b      	str	r3, [r7, #4]
 8006810:	480b      	ldr	r0, [pc, #44]	@ (8006840 <SEGGER_SYSVIEW_Stop+0x44>)
 8006812:	f7ff fbd7 	bl	8005fc4 <_PreparePacket>
 8006816:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006818:	4b0a      	ldr	r3, [pc, #40]	@ (8006844 <SEGGER_SYSVIEW_Stop+0x48>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d007      	beq.n	8006830 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006820:	220b      	movs	r2, #11
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	6838      	ldr	r0, [r7, #0]
 8006826:	f7ff fcb9 	bl	800619c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800682a:	4b06      	ldr	r3, [pc, #24]	@ (8006844 <SEGGER_SYSVIEW_Stop+0x48>)
 800682c:	2200      	movs	r2, #0
 800682e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f383 8811 	msr	BASEPRI, r3
}
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	2000c3d4 	.word	0x2000c3d4
 8006844:	2000c3a4 	.word	0x2000c3a4

08006848 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006848:	b580      	push	{r7, lr}
 800684a:	b08c      	sub	sp, #48	@ 0x30
 800684c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800684e:	f3ef 8311 	mrs	r3, BASEPRI
 8006852:	f04f 0120 	mov.w	r1, #32
 8006856:	f381 8811 	msr	BASEPRI, r1
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	4845      	ldr	r0, [pc, #276]	@ (8006974 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800685e:	f7ff fbb1 	bl	8005fc4 <_PreparePacket>
 8006862:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800686c:	4b42      	ldr	r3, [pc, #264]	@ (8006978 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006872:	e00b      	b.n	800688c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006876:	b2da      	uxtb	r2, r3
 8006878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687a:	1c59      	adds	r1, r3, #1
 800687c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800687e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006882:	b2d2      	uxtb	r2, r2
 8006884:	701a      	strb	r2, [r3, #0]
 8006886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006888:	09db      	lsrs	r3, r3, #7
 800688a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800688c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006890:	d8f0      	bhi.n	8006874 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006898:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800689a:	b2d2      	uxtb	r2, r2
 800689c:	701a      	strb	r2, [r3, #0]
 800689e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80068a6:	4b34      	ldr	r3, [pc, #208]	@ (8006978 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	623b      	str	r3, [r7, #32]
 80068ac:	e00b      	b.n	80068c6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	1c59      	adds	r1, r3, #1
 80068b6:	6279      	str	r1, [r7, #36]	@ 0x24
 80068b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	701a      	strb	r2, [r3, #0]
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	09db      	lsrs	r3, r3, #7
 80068c4:	623b      	str	r3, [r7, #32]
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80068ca:	d8f0      	bhi.n	80068ae <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80068cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80068d2:	6a3a      	ldr	r2, [r7, #32]
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	701a      	strb	r2, [r3, #0]
 80068d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	61fb      	str	r3, [r7, #28]
 80068e0:	4b25      	ldr	r3, [pc, #148]	@ (8006978 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	61bb      	str	r3, [r7, #24]
 80068e6:	e00b      	b.n	8006900 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	1c59      	adds	r1, r3, #1
 80068f0:	61f9      	str	r1, [r7, #28]
 80068f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	09db      	lsrs	r3, r3, #7
 80068fe:	61bb      	str	r3, [r7, #24]
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	2b7f      	cmp	r3, #127	@ 0x7f
 8006904:	d8f0      	bhi.n	80068e8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	61fa      	str	r2, [r7, #28]
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	b2d2      	uxtb	r2, r2
 8006910:	701a      	strb	r2, [r3, #0]
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	617b      	str	r3, [r7, #20]
 800691a:	2300      	movs	r3, #0
 800691c:	613b      	str	r3, [r7, #16]
 800691e:	e00b      	b.n	8006938 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	b2da      	uxtb	r2, r3
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	1c59      	adds	r1, r3, #1
 8006928:	6179      	str	r1, [r7, #20]
 800692a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800692e:	b2d2      	uxtb	r2, r2
 8006930:	701a      	strb	r2, [r3, #0]
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	09db      	lsrs	r3, r3, #7
 8006936:	613b      	str	r3, [r7, #16]
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	2b7f      	cmp	r3, #127	@ 0x7f
 800693c:	d8f0      	bhi.n	8006920 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	617a      	str	r2, [r7, #20]
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	b2d2      	uxtb	r2, r2
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800694e:	2218      	movs	r2, #24
 8006950:	6879      	ldr	r1, [r7, #4]
 8006952:	68b8      	ldr	r0, [r7, #8]
 8006954:	f7ff fc22 	bl	800619c <_SendPacket>
  RECORD_END();
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800695e:	4b06      	ldr	r3, [pc, #24]	@ (8006978 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006962:	2b00      	cmp	r3, #0
 8006964:	d002      	beq.n	800696c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006966:	4b04      	ldr	r3, [pc, #16]	@ (8006978 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696a:	4798      	blx	r3
  }
}
 800696c:	bf00      	nop
 800696e:	3730      	adds	r7, #48	@ 0x30
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	2000c3d4 	.word	0x2000c3d4
 8006978:	2000c3a4 	.word	0x2000c3a4

0800697c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800697c:	b580      	push	{r7, lr}
 800697e:	b092      	sub	sp, #72	@ 0x48
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006984:	f3ef 8311 	mrs	r3, BASEPRI
 8006988:	f04f 0120 	mov.w	r1, #32
 800698c:	f381 8811 	msr	BASEPRI, r1
 8006990:	617b      	str	r3, [r7, #20]
 8006992:	486a      	ldr	r0, [pc, #424]	@ (8006b3c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006994:	f7ff fb16 	bl	8005fc4 <_PreparePacket>
 8006998:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	4b66      	ldr	r3, [pc, #408]	@ (8006b40 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80069ae:	e00b      	b.n	80069c8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80069b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069b6:	1c59      	adds	r1, r3, #1
 80069b8:	6479      	str	r1, [r7, #68]	@ 0x44
 80069ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069be:	b2d2      	uxtb	r2, r2
 80069c0:	701a      	strb	r2, [r3, #0]
 80069c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069c4:	09db      	lsrs	r3, r3, #7
 80069c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80069c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80069cc:	d8f0      	bhi.n	80069b0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80069ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80069d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069d6:	b2d2      	uxtb	r2, r2
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069e8:	e00b      	b.n	8006a02 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80069ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069f0:	1c59      	adds	r1, r3, #1
 80069f2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80069f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	701a      	strb	r2, [r3, #0]
 80069fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fe:	09db      	lsrs	r3, r3, #7
 8006a00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a04:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a06:	d8f0      	bhi.n	80069ea <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006a08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006a0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a10:	b2d2      	uxtb	r2, r2
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a16:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	4619      	mov	r1, r3
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f7ff fa9f 	bl	8005f64 <_EncodeStr>
 8006a26:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006a28:	2209      	movs	r2, #9
 8006a2a:	68f9      	ldr	r1, [r7, #12]
 8006a2c:	6938      	ldr	r0, [r7, #16]
 8006a2e:	f7ff fbb5 	bl	800619c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	4b40      	ldr	r3, [pc, #256]	@ (8006b40 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a46:	e00b      	b.n	8006a60 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a4e:	1c59      	adds	r1, r3, #1
 8006a50:	6379      	str	r1, [r7, #52]	@ 0x34
 8006a52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5c:	09db      	lsrs	r3, r3, #7
 8006a5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a62:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a64:	d8f0      	bhi.n	8006a48 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	637a      	str	r2, [r7, #52]	@ 0x34
 8006a6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	701a      	strb	r2, [r3, #0]
 8006a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a80:	e00b      	b.n	8006a9a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a88:	1c59      	adds	r1, r3, #1
 8006a8a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006a8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	701a      	strb	r2, [r3, #0]
 8006a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a96:	09db      	lsrs	r3, r3, #7
 8006a98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a9e:	d8f0      	bhi.n	8006a82 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006aa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006aa8:	b2d2      	uxtb	r2, r2
 8006aaa:	701a      	strb	r2, [r3, #0]
 8006aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	623b      	str	r3, [r7, #32]
 8006aba:	e00b      	b.n	8006ad4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac2:	1c59      	adds	r1, r3, #1
 8006ac4:	6279      	str	r1, [r7, #36]	@ 0x24
 8006ac6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	09db      	lsrs	r3, r3, #7
 8006ad2:	623b      	str	r3, [r7, #32]
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ad8:	d8f0      	bhi.n	8006abc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ae0:	6a3a      	ldr	r2, [r7, #32]
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	61fb      	str	r3, [r7, #28]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	61bb      	str	r3, [r7, #24]
 8006af4:	e00b      	b.n	8006b0e <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	1c59      	adds	r1, r3, #1
 8006afe:	61f9      	str	r1, [r7, #28]
 8006b00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b04:	b2d2      	uxtb	r2, r2
 8006b06:	701a      	strb	r2, [r3, #0]
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	09db      	lsrs	r3, r3, #7
 8006b0c:	61bb      	str	r3, [r7, #24]
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b12:	d8f0      	bhi.n	8006af6 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	61fa      	str	r2, [r7, #28]
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006b24:	2215      	movs	r2, #21
 8006b26:	68f9      	ldr	r1, [r7, #12]
 8006b28:	6938      	ldr	r0, [r7, #16]
 8006b2a:	f7ff fb37 	bl	800619c <_SendPacket>
  RECORD_END();
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f383 8811 	msr	BASEPRI, r3
}
 8006b34:	bf00      	nop
 8006b36:	3748      	adds	r7, #72	@ 0x48
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	2000c3d4 	.word	0x2000c3d4
 8006b40:	2000c3a4 	.word	0x2000c3a4

08006b44 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006b48:	4b07      	ldr	r3, [pc, #28]	@ (8006b68 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d008      	beq.n	8006b62 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006b50:	4b05      	ldr	r3, [pc, #20]	@ (8006b68 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006b5a:	4b03      	ldr	r3, [pc, #12]	@ (8006b68 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	4798      	blx	r3
  }
}
 8006b62:	bf00      	nop
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	2000c3a4 	.word	0x2000c3a4

08006b6c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b74:	f3ef 8311 	mrs	r3, BASEPRI
 8006b78:	f04f 0120 	mov.w	r1, #32
 8006b7c:	f381 8811 	msr	BASEPRI, r1
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	480b      	ldr	r0, [pc, #44]	@ (8006bb0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006b84:	f7ff fa1e 	bl	8005fc4 <_PreparePacket>
 8006b88:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b8a:	2280      	movs	r2, #128	@ 0x80
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	6938      	ldr	r0, [r7, #16]
 8006b90:	f7ff f9e8 	bl	8005f64 <_EncodeStr>
 8006b94:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006b96:	220e      	movs	r2, #14
 8006b98:	68f9      	ldr	r1, [r7, #12]
 8006b9a:	6938      	ldr	r0, [r7, #16]
 8006b9c:	f7ff fafe 	bl	800619c <_SendPacket>
  RECORD_END();
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f383 8811 	msr	BASEPRI, r3
}
 8006ba6:	bf00      	nop
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	2000c3d4 	.word	0x2000c3d4

08006bb4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006bb4:	b590      	push	{r4, r7, lr}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006bba:	4b15      	ldr	r3, [pc, #84]	@ (8006c10 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d01a      	beq.n	8006bf8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006bc2:	4b13      	ldr	r3, [pc, #76]	@ (8006c10 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d015      	beq.n	8006bf8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006bcc:	4b10      	ldr	r3, [pc, #64]	@ (8006c10 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4798      	blx	r3
 8006bd4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006bd8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006bda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bde:	f04f 0200 	mov.w	r2, #0
 8006be2:	f04f 0300 	mov.w	r3, #0
 8006be6:	000a      	movs	r2, r1
 8006be8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006bea:	4613      	mov	r3, r2
 8006bec:	461a      	mov	r2, r3
 8006bee:	4621      	mov	r1, r4
 8006bf0:	200d      	movs	r0, #13
 8006bf2:	f7ff fcef 	bl	80065d4 <SEGGER_SYSVIEW_RecordU32x2>
 8006bf6:	e006      	b.n	8006c06 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006bf8:	4b06      	ldr	r3, [pc, #24]	@ (8006c14 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	200c      	movs	r0, #12
 8006c00:	f7ff fcac 	bl	800655c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006c04:	bf00      	nop
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd90      	pop	{r4, r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	2000c3a4 	.word	0x2000c3a4
 8006c14:	e0001004 	.word	0xe0001004

08006c18 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c1e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c22:	f04f 0120 	mov.w	r1, #32
 8006c26:	f381 8811 	msr	BASEPRI, r1
 8006c2a:	60fb      	str	r3, [r7, #12]
 8006c2c:	4819      	ldr	r0, [pc, #100]	@ (8006c94 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006c2e:	f7ff f9c9 	bl	8005fc4 <_PreparePacket>
 8006c32:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006c38:	4b17      	ldr	r3, [pc, #92]	@ (8006c98 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c40:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	e00b      	b.n	8006c64 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	1c59      	adds	r1, r3, #1
 8006c54:	6179      	str	r1, [r7, #20]
 8006c56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	09db      	lsrs	r3, r3, #7
 8006c62:	613b      	str	r3, [r7, #16]
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c68:	d8f0      	bhi.n	8006c4c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	617a      	str	r2, [r7, #20]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	b2d2      	uxtb	r2, r2
 8006c74:	701a      	strb	r2, [r3, #0]
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	68b8      	ldr	r0, [r7, #8]
 8006c80:	f7ff fa8c 	bl	800619c <_SendPacket>
  RECORD_END();
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f383 8811 	msr	BASEPRI, r3
}
 8006c8a:	bf00      	nop
 8006c8c:	3718      	adds	r7, #24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	2000c3d4 	.word	0x2000c3d4
 8006c98:	e000ed04 	.word	0xe000ed04

08006c9c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ca2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ca6:	f04f 0120 	mov.w	r1, #32
 8006caa:	f381 8811 	msr	BASEPRI, r1
 8006cae:	607b      	str	r3, [r7, #4]
 8006cb0:	4807      	ldr	r0, [pc, #28]	@ (8006cd0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006cb2:	f7ff f987 	bl	8005fc4 <_PreparePacket>
 8006cb6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006cb8:	2203      	movs	r2, #3
 8006cba:	6839      	ldr	r1, [r7, #0]
 8006cbc:	6838      	ldr	r0, [r7, #0]
 8006cbe:	f7ff fa6d 	bl	800619c <_SendPacket>
  RECORD_END();
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f383 8811 	msr	BASEPRI, r3
}
 8006cc8:	bf00      	nop
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	2000c3d4 	.word	0x2000c3d4

08006cd4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006cda:	f3ef 8311 	mrs	r3, BASEPRI
 8006cde:	f04f 0120 	mov.w	r1, #32
 8006ce2:	f381 8811 	msr	BASEPRI, r1
 8006ce6:	607b      	str	r3, [r7, #4]
 8006ce8:	4807      	ldr	r0, [pc, #28]	@ (8006d08 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006cea:	f7ff f96b 	bl	8005fc4 <_PreparePacket>
 8006cee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006cf0:	2212      	movs	r2, #18
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6838      	ldr	r0, [r7, #0]
 8006cf6:	f7ff fa51 	bl	800619c <_SendPacket>
  RECORD_END();
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f383 8811 	msr	BASEPRI, r3
}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	2000c3d4 	.word	0x2000c3d4

08006d0c <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d14:	f3ef 8311 	mrs	r3, BASEPRI
 8006d18:	f04f 0120 	mov.w	r1, #32
 8006d1c:	f381 8811 	msr	BASEPRI, r1
 8006d20:	617b      	str	r3, [r7, #20]
 8006d22:	4817      	ldr	r0, [pc, #92]	@ (8006d80 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006d24:	f7ff f94e 	bl	8005fc4 <_PreparePacket>
 8006d28:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	61fb      	str	r3, [r7, #28]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	61bb      	str	r3, [r7, #24]
 8006d36:	e00b      	b.n	8006d50 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	1c59      	adds	r1, r3, #1
 8006d40:	61f9      	str	r1, [r7, #28]
 8006d42:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	09db      	lsrs	r3, r3, #7
 8006d4e:	61bb      	str	r3, [r7, #24]
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d54:	d8f0      	bhi.n	8006d38 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	61fa      	str	r2, [r7, #28]
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	701a      	strb	r2, [r3, #0]
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006d66:	221c      	movs	r2, #28
 8006d68:	68f9      	ldr	r1, [r7, #12]
 8006d6a:	6938      	ldr	r0, [r7, #16]
 8006d6c:	f7ff fa16 	bl	800619c <_SendPacket>
  RECORD_END();
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f383 8811 	msr	BASEPRI, r3
}
 8006d76:	bf00      	nop
 8006d78:	3720      	adds	r7, #32
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	2000c3d4 	.word	0x2000c3d4

08006d84 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b08a      	sub	sp, #40	@ 0x28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d8e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d92:	f04f 0120 	mov.w	r1, #32
 8006d96:	f381 8811 	msr	BASEPRI, r1
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	4824      	ldr	r0, [pc, #144]	@ (8006e30 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8006d9e:	f7ff f911 	bl	8005fc4 <_PreparePacket>
 8006da2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	623b      	str	r3, [r7, #32]
 8006db0:	e00b      	b.n	8006dca <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db8:	1c59      	adds	r1, r3, #1
 8006dba:	6279      	str	r1, [r7, #36]	@ 0x24
 8006dbc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	701a      	strb	r2, [r3, #0]
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	09db      	lsrs	r3, r3, #7
 8006dc8:	623b      	str	r3, [r7, #32]
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dce:	d8f0      	bhi.n	8006db2 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd2:	1c5a      	adds	r2, r3, #1
 8006dd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006dd6:	6a3a      	ldr	r2, [r7, #32]
 8006dd8:	b2d2      	uxtb	r2, r2
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dde:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	61fb      	str	r3, [r7, #28]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	61bb      	str	r3, [r7, #24]
 8006de8:	e00b      	b.n	8006e02 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	1c59      	adds	r1, r3, #1
 8006df2:	61f9      	str	r1, [r7, #28]
 8006df4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006df8:	b2d2      	uxtb	r2, r2
 8006dfa:	701a      	strb	r2, [r3, #0]
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	09db      	lsrs	r3, r3, #7
 8006e00:	61bb      	str	r3, [r7, #24]
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e06:	d8f0      	bhi.n	8006dea <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	1c5a      	adds	r2, r3, #1
 8006e0c:	61fa      	str	r2, [r7, #28]
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	b2d2      	uxtb	r2, r2
 8006e12:	701a      	strb	r2, [r3, #0]
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006e18:	221c      	movs	r2, #28
 8006e1a:	68f9      	ldr	r1, [r7, #12]
 8006e1c:	6938      	ldr	r0, [r7, #16]
 8006e1e:	f7ff f9bd 	bl	800619c <_SendPacket>
  RECORD_END();
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f383 8811 	msr	BASEPRI, r3
}
 8006e28:	bf00      	nop
 8006e2a:	3728      	adds	r7, #40	@ 0x28
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	2000c3d4 	.word	0x2000c3d4

08006e34 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e3a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e3e:	f04f 0120 	mov.w	r1, #32
 8006e42:	f381 8811 	msr	BASEPRI, r1
 8006e46:	607b      	str	r3, [r7, #4]
 8006e48:	4807      	ldr	r0, [pc, #28]	@ (8006e68 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006e4a:	f7ff f8bb 	bl	8005fc4 <_PreparePacket>
 8006e4e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006e50:	2211      	movs	r2, #17
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6838      	ldr	r0, [r7, #0]
 8006e56:	f7ff f9a1 	bl	800619c <_SendPacket>
  RECORD_END();
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f383 8811 	msr	BASEPRI, r3
}
 8006e60:	bf00      	nop
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	2000c3d4 	.word	0x2000c3d4

08006e6c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b088      	sub	sp, #32
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e74:	f3ef 8311 	mrs	r3, BASEPRI
 8006e78:	f04f 0120 	mov.w	r1, #32
 8006e7c:	f381 8811 	msr	BASEPRI, r1
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	4819      	ldr	r0, [pc, #100]	@ (8006ee8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006e84:	f7ff f89e 	bl	8005fc4 <_PreparePacket>
 8006e88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e8e:	4b17      	ldr	r3, [pc, #92]	@ (8006eec <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	61fb      	str	r3, [r7, #28]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	61bb      	str	r3, [r7, #24]
 8006ea0:	e00b      	b.n	8006eba <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	1c59      	adds	r1, r3, #1
 8006eaa:	61f9      	str	r1, [r7, #28]
 8006eac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006eb0:	b2d2      	uxtb	r2, r2
 8006eb2:	701a      	strb	r2, [r3, #0]
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	09db      	lsrs	r3, r3, #7
 8006eb8:	61bb      	str	r3, [r7, #24]
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ebe:	d8f0      	bhi.n	8006ea2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	61fa      	str	r2, [r7, #28]
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	b2d2      	uxtb	r2, r2
 8006eca:	701a      	strb	r2, [r3, #0]
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006ed0:	2208      	movs	r2, #8
 8006ed2:	68f9      	ldr	r1, [r7, #12]
 8006ed4:	6938      	ldr	r0, [r7, #16]
 8006ed6:	f7ff f961 	bl	800619c <_SendPacket>
  RECORD_END();
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f383 8811 	msr	BASEPRI, r3
}
 8006ee0:	bf00      	nop
 8006ee2:	3720      	adds	r7, #32
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	2000c3d4 	.word	0x2000c3d4
 8006eec:	2000c3a4 	.word	0x2000c3a4

08006ef0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b088      	sub	sp, #32
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ef8:	f3ef 8311 	mrs	r3, BASEPRI
 8006efc:	f04f 0120 	mov.w	r1, #32
 8006f00:	f381 8811 	msr	BASEPRI, r1
 8006f04:	617b      	str	r3, [r7, #20]
 8006f06:	4819      	ldr	r0, [pc, #100]	@ (8006f6c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006f08:	f7ff f85c 	bl	8005fc4 <_PreparePacket>
 8006f0c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f12:	4b17      	ldr	r3, [pc, #92]	@ (8006f70 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	61fb      	str	r3, [r7, #28]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	61bb      	str	r3, [r7, #24]
 8006f24:	e00b      	b.n	8006f3e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	1c59      	adds	r1, r3, #1
 8006f2e:	61f9      	str	r1, [r7, #28]
 8006f30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f34:	b2d2      	uxtb	r2, r2
 8006f36:	701a      	strb	r2, [r3, #0]
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	09db      	lsrs	r3, r3, #7
 8006f3c:	61bb      	str	r3, [r7, #24]
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f42:	d8f0      	bhi.n	8006f26 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	61fa      	str	r2, [r7, #28]
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	b2d2      	uxtb	r2, r2
 8006f4e:	701a      	strb	r2, [r3, #0]
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006f54:	2204      	movs	r2, #4
 8006f56:	68f9      	ldr	r1, [r7, #12]
 8006f58:	6938      	ldr	r0, [r7, #16]
 8006f5a:	f7ff f91f 	bl	800619c <_SendPacket>
  RECORD_END();
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f383 8811 	msr	BASEPRI, r3
}
 8006f64:	bf00      	nop
 8006f66:	3720      	adds	r7, #32
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	2000c3d4 	.word	0x2000c3d4
 8006f70:	2000c3a4 	.word	0x2000c3a4

08006f74 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f7c:	f3ef 8311 	mrs	r3, BASEPRI
 8006f80:	f04f 0120 	mov.w	r1, #32
 8006f84:	f381 8811 	msr	BASEPRI, r1
 8006f88:	617b      	str	r3, [r7, #20]
 8006f8a:	4819      	ldr	r0, [pc, #100]	@ (8006ff0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006f8c:	f7ff f81a 	bl	8005fc4 <_PreparePacket>
 8006f90:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f96:	4b17      	ldr	r3, [pc, #92]	@ (8006ff4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	61fb      	str	r3, [r7, #28]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	61bb      	str	r3, [r7, #24]
 8006fa8:	e00b      	b.n	8006fc2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	1c59      	adds	r1, r3, #1
 8006fb2:	61f9      	str	r1, [r7, #28]
 8006fb4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fb8:	b2d2      	uxtb	r2, r2
 8006fba:	701a      	strb	r2, [r3, #0]
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	09db      	lsrs	r3, r3, #7
 8006fc0:	61bb      	str	r3, [r7, #24]
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fc6:	d8f0      	bhi.n	8006faa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	61fa      	str	r2, [r7, #28]
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	701a      	strb	r2, [r3, #0]
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006fd8:	2206      	movs	r2, #6
 8006fda:	68f9      	ldr	r1, [r7, #12]
 8006fdc:	6938      	ldr	r0, [r7, #16]
 8006fde:	f7ff f8dd 	bl	800619c <_SendPacket>
  RECORD_END();
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f383 8811 	msr	BASEPRI, r3
}
 8006fe8:	bf00      	nop
 8006fea:	3720      	adds	r7, #32
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	2000c3d4 	.word	0x2000c3d4
 8006ff4:	2000c3a4 	.word	0x2000c3a4

08006ff8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08a      	sub	sp, #40	@ 0x28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007002:	f3ef 8311 	mrs	r3, BASEPRI
 8007006:	f04f 0120 	mov.w	r1, #32
 800700a:	f381 8811 	msr	BASEPRI, r1
 800700e:	617b      	str	r3, [r7, #20]
 8007010:	4827      	ldr	r0, [pc, #156]	@ (80070b0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007012:	f7fe ffd7 	bl	8005fc4 <_PreparePacket>
 8007016:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800701c:	4b25      	ldr	r3, [pc, #148]	@ (80070b4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	627b      	str	r3, [r7, #36]	@ 0x24
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	623b      	str	r3, [r7, #32]
 800702e:	e00b      	b.n	8007048 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	b2da      	uxtb	r2, r3
 8007034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007036:	1c59      	adds	r1, r3, #1
 8007038:	6279      	str	r1, [r7, #36]	@ 0x24
 800703a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	09db      	lsrs	r3, r3, #7
 8007046:	623b      	str	r3, [r7, #32]
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	2b7f      	cmp	r3, #127	@ 0x7f
 800704c:	d8f0      	bhi.n	8007030 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	627a      	str	r2, [r7, #36]	@ 0x24
 8007054:	6a3a      	ldr	r2, [r7, #32]
 8007056:	b2d2      	uxtb	r2, r2
 8007058:	701a      	strb	r2, [r3, #0]
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	61fb      	str	r3, [r7, #28]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	61bb      	str	r3, [r7, #24]
 8007066:	e00b      	b.n	8007080 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	b2da      	uxtb	r2, r3
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	1c59      	adds	r1, r3, #1
 8007070:	61f9      	str	r1, [r7, #28]
 8007072:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007076:	b2d2      	uxtb	r2, r2
 8007078:	701a      	strb	r2, [r3, #0]
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	09db      	lsrs	r3, r3, #7
 800707e:	61bb      	str	r3, [r7, #24]
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	2b7f      	cmp	r3, #127	@ 0x7f
 8007084:	d8f0      	bhi.n	8007068 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	61fa      	str	r2, [r7, #28]
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	701a      	strb	r2, [r3, #0]
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007096:	2207      	movs	r2, #7
 8007098:	68f9      	ldr	r1, [r7, #12]
 800709a:	6938      	ldr	r0, [r7, #16]
 800709c:	f7ff f87e 	bl	800619c <_SendPacket>
  RECORD_END();
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f383 8811 	msr	BASEPRI, r3
}
 80070a6:	bf00      	nop
 80070a8:	3728      	adds	r7, #40	@ 0x28
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	2000c3d4 	.word	0x2000c3d4
 80070b4:	2000c3a4 	.word	0x2000c3a4

080070b8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80070c0:	4b04      	ldr	r3, [pc, #16]	@ (80070d4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	1ad3      	subs	r3, r2, r3
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	2000c3a4 	.word	0x2000c3a4

080070d8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80070d8:	b580      	push	{r7, lr}
 80070da:	b08c      	sub	sp, #48	@ 0x30
 80070dc:	af00      	add	r7, sp, #0
 80070de:	4603      	mov	r3, r0
 80070e0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80070e2:	4b40      	ldr	r3, [pc, #256]	@ (80071e4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d077      	beq.n	80071da <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80070ea:	4b3e      	ldr	r3, [pc, #248]	@ (80071e4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80070f0:	2300      	movs	r3, #0
 80070f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070f4:	e008      	b.n	8007108 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80070f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80070fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d007      	beq.n	8007112 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007104:	3301      	adds	r3, #1
 8007106:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800710c:	429a      	cmp	r2, r3
 800710e:	d3f2      	bcc.n	80070f6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007110:	e000      	b.n	8007114 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007112:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007116:	2b00      	cmp	r3, #0
 8007118:	d055      	beq.n	80071c6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800711a:	f3ef 8311 	mrs	r3, BASEPRI
 800711e:	f04f 0120 	mov.w	r1, #32
 8007122:	f381 8811 	msr	BASEPRI, r1
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	482f      	ldr	r0, [pc, #188]	@ (80071e8 <SEGGER_SYSVIEW_SendModule+0x110>)
 800712a:	f7fe ff4b 	bl	8005fc4 <_PreparePacket>
 800712e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	627b      	str	r3, [r7, #36]	@ 0x24
 8007138:	79fb      	ldrb	r3, [r7, #7]
 800713a:	623b      	str	r3, [r7, #32]
 800713c:	e00b      	b.n	8007156 <SEGGER_SYSVIEW_SendModule+0x7e>
 800713e:	6a3b      	ldr	r3, [r7, #32]
 8007140:	b2da      	uxtb	r2, r3
 8007142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007144:	1c59      	adds	r1, r3, #1
 8007146:	6279      	str	r1, [r7, #36]	@ 0x24
 8007148:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800714c:	b2d2      	uxtb	r2, r2
 800714e:	701a      	strb	r2, [r3, #0]
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	09db      	lsrs	r3, r3, #7
 8007154:	623b      	str	r3, [r7, #32]
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	2b7f      	cmp	r3, #127	@ 0x7f
 800715a:	d8f0      	bhi.n	800713e <SEGGER_SYSVIEW_SendModule+0x66>
 800715c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715e:	1c5a      	adds	r2, r3, #1
 8007160:	627a      	str	r2, [r7, #36]	@ 0x24
 8007162:	6a3a      	ldr	r2, [r7, #32]
 8007164:	b2d2      	uxtb	r2, r2
 8007166:	701a      	strb	r2, [r3, #0]
 8007168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	61fb      	str	r3, [r7, #28]
 8007170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	61bb      	str	r3, [r7, #24]
 8007176:	e00b      	b.n	8007190 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	b2da      	uxtb	r2, r3
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	1c59      	adds	r1, r3, #1
 8007180:	61f9      	str	r1, [r7, #28]
 8007182:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007186:	b2d2      	uxtb	r2, r2
 8007188:	701a      	strb	r2, [r3, #0]
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	09db      	lsrs	r3, r3, #7
 800718e:	61bb      	str	r3, [r7, #24]
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	2b7f      	cmp	r3, #127	@ 0x7f
 8007194:	d8f0      	bhi.n	8007178 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	61fa      	str	r2, [r7, #28]
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2280      	movs	r2, #128	@ 0x80
 80071ac:	4619      	mov	r1, r3
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f7fe fed8 	bl	8005f64 <_EncodeStr>
 80071b4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80071b6:	2216      	movs	r2, #22
 80071b8:	68f9      	ldr	r1, [r7, #12]
 80071ba:	6938      	ldr	r0, [r7, #16]
 80071bc:	f7fe ffee 	bl	800619c <_SendPacket>
      RECORD_END();
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80071c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d006      	beq.n	80071da <SEGGER_SYSVIEW_SendModule+0x102>
 80071cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d002      	beq.n	80071da <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80071d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	4798      	blx	r3
    }
  }
}
 80071da:	bf00      	nop
 80071dc:	3730      	adds	r7, #48	@ 0x30
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	2000c3cc 	.word	0x2000c3cc
 80071e8:	2000c3d4 	.word	0x2000c3d4

080071ec <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80071f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007224 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00f      	beq.n	800721a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80071fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007224 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1f2      	bne.n	8007200 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800721a:	bf00      	nop
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	2000c3cc 	.word	0x2000c3cc

08007228 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800722e:	f3ef 8311 	mrs	r3, BASEPRI
 8007232:	f04f 0120 	mov.w	r1, #32
 8007236:	f381 8811 	msr	BASEPRI, r1
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	4817      	ldr	r0, [pc, #92]	@ (800729c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800723e:	f7fe fec1 	bl	8005fc4 <_PreparePacket>
 8007242:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	4b14      	ldr	r3, [pc, #80]	@ (80072a0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	613b      	str	r3, [r7, #16]
 8007252:	e00b      	b.n	800726c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	b2da      	uxtb	r2, r3
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	1c59      	adds	r1, r3, #1
 800725c:	6179      	str	r1, [r7, #20]
 800725e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007262:	b2d2      	uxtb	r2, r2
 8007264:	701a      	strb	r2, [r3, #0]
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	09db      	lsrs	r3, r3, #7
 800726a:	613b      	str	r3, [r7, #16]
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007270:	d8f0      	bhi.n	8007254 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	1c5a      	adds	r2, r3, #1
 8007276:	617a      	str	r2, [r7, #20]
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	b2d2      	uxtb	r2, r2
 800727c:	701a      	strb	r2, [r3, #0]
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007282:	221b      	movs	r2, #27
 8007284:	6879      	ldr	r1, [r7, #4]
 8007286:	68b8      	ldr	r0, [r7, #8]
 8007288:	f7fe ff88 	bl	800619c <_SendPacket>
  RECORD_END();
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f383 8811 	msr	BASEPRI, r3
}
 8007292:	bf00      	nop
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	2000c3d4 	.word	0x2000c3d4
 80072a0:	2000c3d0 	.word	0x2000c3d0

080072a4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08a      	sub	sp, #40	@ 0x28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072ac:	f3ef 8311 	mrs	r3, BASEPRI
 80072b0:	f04f 0120 	mov.w	r1, #32
 80072b4:	f381 8811 	msr	BASEPRI, r1
 80072b8:	617b      	str	r3, [r7, #20]
 80072ba:	4827      	ldr	r0, [pc, #156]	@ (8007358 <SEGGER_SYSVIEW_Warn+0xb4>)
 80072bc:	f7fe fe82 	bl	8005fc4 <_PreparePacket>
 80072c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072c2:	2280      	movs	r2, #128	@ 0x80
 80072c4:	6879      	ldr	r1, [r7, #4]
 80072c6:	6938      	ldr	r0, [r7, #16]
 80072c8:	f7fe fe4c 	bl	8005f64 <_EncodeStr>
 80072cc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80072d2:	2301      	movs	r3, #1
 80072d4:	623b      	str	r3, [r7, #32]
 80072d6:	e00b      	b.n	80072f0 <SEGGER_SYSVIEW_Warn+0x4c>
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072de:	1c59      	adds	r1, r3, #1
 80072e0:	6279      	str	r1, [r7, #36]	@ 0x24
 80072e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072e6:	b2d2      	uxtb	r2, r2
 80072e8:	701a      	strb	r2, [r3, #0]
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	09db      	lsrs	r3, r3, #7
 80072ee:	623b      	str	r3, [r7, #32]
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80072f4:	d8f0      	bhi.n	80072d8 <SEGGER_SYSVIEW_Warn+0x34>
 80072f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f8:	1c5a      	adds	r2, r3, #1
 80072fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80072fc:	6a3a      	ldr	r2, [r7, #32]
 80072fe:	b2d2      	uxtb	r2, r2
 8007300:	701a      	strb	r2, [r3, #0]
 8007302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007304:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	61fb      	str	r3, [r7, #28]
 800730a:	2300      	movs	r3, #0
 800730c:	61bb      	str	r3, [r7, #24]
 800730e:	e00b      	b.n	8007328 <SEGGER_SYSVIEW_Warn+0x84>
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	b2da      	uxtb	r2, r3
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	1c59      	adds	r1, r3, #1
 8007318:	61f9      	str	r1, [r7, #28]
 800731a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800731e:	b2d2      	uxtb	r2, r2
 8007320:	701a      	strb	r2, [r3, #0]
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	09db      	lsrs	r3, r3, #7
 8007326:	61bb      	str	r3, [r7, #24]
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	2b7f      	cmp	r3, #127	@ 0x7f
 800732c:	d8f0      	bhi.n	8007310 <SEGGER_SYSVIEW_Warn+0x6c>
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	61fa      	str	r2, [r7, #28]
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	b2d2      	uxtb	r2, r2
 8007338:	701a      	strb	r2, [r3, #0]
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800733e:	221a      	movs	r2, #26
 8007340:	68f9      	ldr	r1, [r7, #12]
 8007342:	6938      	ldr	r0, [r7, #16]
 8007344:	f7fe ff2a 	bl	800619c <_SendPacket>
  RECORD_END();
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f383 8811 	msr	BASEPRI, r3
}
 800734e:	bf00      	nop
 8007350:	3728      	adds	r7, #40	@ 0x28
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	2000c3d4 	.word	0x2000c3d4

0800735c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007360:	4b13      	ldr	r3, [pc, #76]	@ (80073b0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007362:	7e1b      	ldrb	r3, [r3, #24]
 8007364:	4619      	mov	r1, r3
 8007366:	4a13      	ldr	r2, [pc, #76]	@ (80073b4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007368:	460b      	mov	r3, r1
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	440b      	add	r3, r1
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	4413      	add	r3, r2
 8007372:	336c      	adds	r3, #108	@ 0x6c
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	4b0e      	ldr	r3, [pc, #56]	@ (80073b0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007378:	7e1b      	ldrb	r3, [r3, #24]
 800737a:	4618      	mov	r0, r3
 800737c:	490d      	ldr	r1, [pc, #52]	@ (80073b4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800737e:	4603      	mov	r3, r0
 8007380:	005b      	lsls	r3, r3, #1
 8007382:	4403      	add	r3, r0
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	440b      	add	r3, r1
 8007388:	3370      	adds	r3, #112	@ 0x70
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	429a      	cmp	r2, r3
 800738e:	d00b      	beq.n	80073a8 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007390:	4b07      	ldr	r3, [pc, #28]	@ (80073b0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007392:	789b      	ldrb	r3, [r3, #2]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d107      	bne.n	80073a8 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007398:	4b05      	ldr	r3, [pc, #20]	@ (80073b0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800739a:	2201      	movs	r2, #1
 800739c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800739e:	f7fe fe1d 	bl	8005fdc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80073a2:	4b03      	ldr	r3, [pc, #12]	@ (80073b0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80073a8:	4b01      	ldr	r3, [pc, #4]	@ (80073b0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	2000c3a4 	.word	0x2000c3a4
 80073b4:	2000bae4 	.word	0x2000bae4

080073b8 <memcmp>:
 80073b8:	b510      	push	{r4, lr}
 80073ba:	3901      	subs	r1, #1
 80073bc:	4402      	add	r2, r0
 80073be:	4290      	cmp	r0, r2
 80073c0:	d101      	bne.n	80073c6 <memcmp+0xe>
 80073c2:	2000      	movs	r0, #0
 80073c4:	e005      	b.n	80073d2 <memcmp+0x1a>
 80073c6:	7803      	ldrb	r3, [r0, #0]
 80073c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80073cc:	42a3      	cmp	r3, r4
 80073ce:	d001      	beq.n	80073d4 <memcmp+0x1c>
 80073d0:	1b18      	subs	r0, r3, r4
 80073d2:	bd10      	pop	{r4, pc}
 80073d4:	3001      	adds	r0, #1
 80073d6:	e7f2      	b.n	80073be <memcmp+0x6>

080073d8 <memset>:
 80073d8:	4402      	add	r2, r0
 80073da:	4603      	mov	r3, r0
 80073dc:	4293      	cmp	r3, r2
 80073de:	d100      	bne.n	80073e2 <memset+0xa>
 80073e0:	4770      	bx	lr
 80073e2:	f803 1b01 	strb.w	r1, [r3], #1
 80073e6:	e7f9      	b.n	80073dc <memset+0x4>

080073e8 <__libc_init_array>:
 80073e8:	b570      	push	{r4, r5, r6, lr}
 80073ea:	4d0d      	ldr	r5, [pc, #52]	@ (8007420 <__libc_init_array+0x38>)
 80073ec:	4c0d      	ldr	r4, [pc, #52]	@ (8007424 <__libc_init_array+0x3c>)
 80073ee:	1b64      	subs	r4, r4, r5
 80073f0:	10a4      	asrs	r4, r4, #2
 80073f2:	2600      	movs	r6, #0
 80073f4:	42a6      	cmp	r6, r4
 80073f6:	d109      	bne.n	800740c <__libc_init_array+0x24>
 80073f8:	4d0b      	ldr	r5, [pc, #44]	@ (8007428 <__libc_init_array+0x40>)
 80073fa:	4c0c      	ldr	r4, [pc, #48]	@ (800742c <__libc_init_array+0x44>)
 80073fc:	f000 f826 	bl	800744c <_init>
 8007400:	1b64      	subs	r4, r4, r5
 8007402:	10a4      	asrs	r4, r4, #2
 8007404:	2600      	movs	r6, #0
 8007406:	42a6      	cmp	r6, r4
 8007408:	d105      	bne.n	8007416 <__libc_init_array+0x2e>
 800740a:	bd70      	pop	{r4, r5, r6, pc}
 800740c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007410:	4798      	blx	r3
 8007412:	3601      	adds	r6, #1
 8007414:	e7ee      	b.n	80073f4 <__libc_init_array+0xc>
 8007416:	f855 3b04 	ldr.w	r3, [r5], #4
 800741a:	4798      	blx	r3
 800741c:	3601      	adds	r6, #1
 800741e:	e7f2      	b.n	8007406 <__libc_init_array+0x1e>
 8007420:	080075a8 	.word	0x080075a8
 8007424:	080075a8 	.word	0x080075a8
 8007428:	080075a8 	.word	0x080075a8
 800742c:	080075ac 	.word	0x080075ac

08007430 <memcpy>:
 8007430:	440a      	add	r2, r1
 8007432:	4291      	cmp	r1, r2
 8007434:	f100 33ff 	add.w	r3, r0, #4294967295
 8007438:	d100      	bne.n	800743c <memcpy+0xc>
 800743a:	4770      	bx	lr
 800743c:	b510      	push	{r4, lr}
 800743e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007442:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007446:	4291      	cmp	r1, r2
 8007448:	d1f9      	bne.n	800743e <memcpy+0xe>
 800744a:	bd10      	pop	{r4, pc}

0800744c <_init>:
 800744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744e:	bf00      	nop
 8007450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007452:	bc08      	pop	{r3}
 8007454:	469e      	mov	lr, r3
 8007456:	4770      	bx	lr

08007458 <_fini>:
 8007458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745a:	bf00      	nop
 800745c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800745e:	bc08      	pop	{r3}
 8007460:	469e      	mov	lr, r3
 8007462:	4770      	bx	lr
