
013_Mutex_using_BinarySema.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08006be0  08006be0  00007be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ce8  08006ce8  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  08006ce8  08006ce8  00007ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cf0  08006cf0  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cf0  08006cf0  00007cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006cf4  08006cf4  00007cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08006cf8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bce4  20000064  08006d5c  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000bd48  08006d5c  00008d48  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e75  00000000  00000000  00008092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d7e  00000000  00000000  0001cf07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  0001fc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e75  00000000  00000000  00020f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b0a8  00000000  00000000  00021d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001839c  00000000  00000000  0004ce1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b875  00000000  00000000  000651b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00170a2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052c0  00000000  00000000  00170a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  00175d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000064 	.word	0x20000064
 800021c:	00000000 	.word	0x00000000
 8000220:	08006bc8 	.word	0x08006bc8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000068 	.word	0x20000068
 800023c:	08006bc8 	.word	0x08006bc8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 fbe6 	bl	8000db6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f85d 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 f8e7 	bl	80007c0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 f8b5 	bl	8000760 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  sprintf(usr_msg,"Demo of Mutual exclusion using binary semaphore\r\n");
 80005f6:	4924      	ldr	r1, [pc, #144]	@ (8000688 <main+0xa8>)
 80005f8:	4824      	ldr	r0, [pc, #144]	@ (800068c <main+0xac>)
 80005fa:	f005 fe45 	bl	8006288 <siprintf>
  	printmsg(usr_msg);
 80005fe:	4823      	ldr	r0, [pc, #140]	@ (800068c <main+0xac>)
 8000600:	f000 f9e2 	bl	80009c8 <printmsg>

  	//Creating a binary semaphore
  	vSemaphoreCreateBinary(xBinarySemaphore);
 8000604:	2203      	movs	r2, #3
 8000606:	2100      	movs	r1, #0
 8000608:	2001      	movs	r0, #1
 800060a:	f003 f927 	bl	800385c <xQueueGenericCreate>
 800060e:	4603      	mov	r3, r0
 8000610:	4a1f      	ldr	r2, [pc, #124]	@ (8000690 <main+0xb0>)
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <main+0xb0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d006      	beq.n	800062a <main+0x4a>
 800061c:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <main+0xb0>)
 800061e:	6818      	ldr	r0, [r3, #0]
 8000620:	2300      	movs	r3, #0
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	f003 f991 	bl	800394c <xQueueGenericSend>

  	 if(xBinarySemaphore != NULL)
 800062a:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <main+0xb0>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d01f      	beq.n	8000672 <main+0x92>
  	 {
  			/* Create one of the two tasks. */
  			xTaskCreate(	vTask1,		/* Pointer to the function that implements the task. */
 8000632:	2300      	movs	r3, #0
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	2301      	movs	r3, #1
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000640:	4914      	ldr	r1, [pc, #80]	@ (8000694 <main+0xb4>)
 8000642:	4815      	ldr	r0, [pc, #84]	@ (8000698 <main+0xb8>)
 8000644:	f003 fde9 	bl	800421a <xTaskCreate>
  							NULL,		/* We are not using the task parameter. */
  							1,			/* This task will run at priority 1. */
  							NULL );		/* We are not using the task handle. */

  			/* Create the other task in exactly the same way. */
  			xTaskCreate( vTask2, "Task 2", 500, NULL, 1, NULL );
 8000648:	2300      	movs	r3, #0
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	2301      	movs	r3, #1
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2300      	movs	r3, #0
 8000652:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000656:	4911      	ldr	r1, [pc, #68]	@ (800069c <main+0xbc>)
 8000658:	4811      	ldr	r0, [pc, #68]	@ (80006a0 <main+0xc0>)
 800065a:	f003 fdde 	bl	800421a <xTaskCreate>

  			//makes sema available for the first time
  			xSemaphoreGive(xBinarySemaphore);
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <main+0xb0>)
 8000660:	6818      	ldr	r0, [r3, #0]
 8000662:	2300      	movs	r3, #0
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	f003 f970 	bl	800394c <xQueueGenericSend>

  			/* Start the scheduler so our tasks start executing. */
  			vTaskStartScheduler();
 800066c:	f003 ffa6 	bl	80045bc <vTaskStartScheduler>
 8000670:	e007      	b.n	8000682 <main+0xa2>
  	 }else
  	 {
  		 sprintf(usr_msg,"binary semaphore creation failed\r\n");
 8000672:	490c      	ldr	r1, [pc, #48]	@ (80006a4 <main+0xc4>)
 8000674:	4805      	ldr	r0, [pc, #20]	@ (800068c <main+0xac>)
 8000676:	f005 fe07 	bl	8006288 <siprintf>
  		 printmsg(usr_msg);
 800067a:	4804      	ldr	r0, [pc, #16]	@ (800068c <main+0xac>)
 800067c:	f000 f9a4 	bl	80009c8 <printmsg>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000680:	bf00      	nop
 8000682:	bf00      	nop
 8000684:	e7fd      	b.n	8000682 <main+0xa2>
 8000686:	bf00      	nop
 8000688:	08006be0 	.word	0x08006be0
 800068c:	20000108 	.word	0x20000108
 8000690:	20000204 	.word	0x20000204
 8000694:	08006c14 	.word	0x08006c14
 8000698:	080009f5 	.word	0x080009f5
 800069c:	08006c1c 	.word	0x08006c1c
 80006a0:	08000a29 	.word	0x08000a29
 80006a4:	08006c24 	.word	0x08006c24

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	@ 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2234      	movs	r2, #52	@ 0x34
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f005 fe06 	bl	80062c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	4b22      	ldr	r3, [pc, #136]	@ (8000758 <SystemClock_Config+0xb0>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	4a21      	ldr	r2, [pc, #132]	@ (8000758 <SystemClock_Config+0xb0>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <SystemClock_Config+0xb0>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e4:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <SystemClock_Config+0xb4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006ec:	4a1b      	ldr	r2, [pc, #108]	@ (800075c <SystemClock_Config+0xb4>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b19      	ldr	r3, [pc, #100]	@ (800075c <SystemClock_Config+0xb4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070c:	2300      	movs	r3, #0
 800070e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4618      	mov	r0, r3
 8000716:	f000 fe23 	bl	8001360 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000720:	f000 f9ae 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000730:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800073a:	f107 0308 	add.w	r3, r7, #8
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f001 f8bb 	bl	80018bc <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800074c:	f000 f998 	bl	8000a80 <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	3750      	adds	r7, #80	@ 0x50
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000764:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_USART3_UART_Init+0x58>)
 8000766:	4a15      	ldr	r2, [pc, #84]	@ (80007bc <MX_USART3_UART_Init+0x5c>)
 8000768:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800076a:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <MX_USART3_UART_Init+0x58>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_USART3_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <MX_USART3_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_USART3_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <MX_USART3_UART_Init+0x58>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	@ (80007b8 <MX_USART3_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_USART3_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000796:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <MX_USART3_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <MX_USART3_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <MX_USART3_UART_Init+0x58>)
 80007a4:	f002 f9dc 	bl	8002b60 <HAL_UART_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007ae:	f000 f967 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000080 	.word	0x20000080
 80007bc:	40004800 	.word	0x40004800

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	@ 0x30
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b77      	ldr	r3, [pc, #476]	@ (80009b4 <MX_GPIO_Init+0x1f4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a76      	ldr	r2, [pc, #472]	@ (80009b4 <MX_GPIO_Init+0x1f4>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b74      	ldr	r3, [pc, #464]	@ (80009b4 <MX_GPIO_Init+0x1f4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	4b71      	ldr	r3, [pc, #452]	@ (80009b4 <MX_GPIO_Init+0x1f4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a70      	ldr	r2, [pc, #448]	@ (80009b4 <MX_GPIO_Init+0x1f4>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b6e      	ldr	r3, [pc, #440]	@ (80009b4 <MX_GPIO_Init+0x1f4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b6b      	ldr	r3, [pc, #428]	@ (80009b4 <MX_GPIO_Init+0x1f4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a6a      	ldr	r2, [pc, #424]	@ (80009b4 <MX_GPIO_Init+0x1f4>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b68      	ldr	r3, [pc, #416]	@ (80009b4 <MX_GPIO_Init+0x1f4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	4b65      	ldr	r3, [pc, #404]	@ (80009b4 <MX_GPIO_Init+0x1f4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a64      	ldr	r2, [pc, #400]	@ (80009b4 <MX_GPIO_Init+0x1f4>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b62      	ldr	r3, [pc, #392]	@ (80009b4 <MX_GPIO_Init+0x1f4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	4b5f      	ldr	r3, [pc, #380]	@ (80009b4 <MX_GPIO_Init+0x1f4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a5e      	ldr	r2, [pc, #376]	@ (80009b4 <MX_GPIO_Init+0x1f4>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b5c      	ldr	r3, [pc, #368]	@ (80009b4 <MX_GPIO_Init+0x1f4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084e:	4b59      	ldr	r3, [pc, #356]	@ (80009b4 <MX_GPIO_Init+0x1f4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a58      	ldr	r2, [pc, #352]	@ (80009b4 <MX_GPIO_Init+0x1f4>)
 8000854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b56      	ldr	r3, [pc, #344]	@ (80009b4 <MX_GPIO_Init+0x1f4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f244 0181 	movw	r1, #16513	@ 0x4081
 800086c:	4852      	ldr	r0, [pc, #328]	@ (80009b8 <MX_GPIO_Init+0x1f8>)
 800086e:	f000 fd5d 	bl	800132c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2140      	movs	r1, #64	@ 0x40
 8000876:	4851      	ldr	r0, [pc, #324]	@ (80009bc <MX_GPIO_Init+0x1fc>)
 8000878:	f000 fd58 	bl	800132c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800087c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000882:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	484b      	ldr	r0, [pc, #300]	@ (80009c0 <MX_GPIO_Init+0x200>)
 8000894:	f000 fb9e 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000898:	2332      	movs	r3, #50	@ 0x32
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a8:	230b      	movs	r3, #11
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	4843      	ldr	r0, [pc, #268]	@ (80009c0 <MX_GPIO_Init+0x200>)
 80008b4:	f000 fb8e 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008b8:	2386      	movs	r3, #134	@ 0x86
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c8:	230b      	movs	r3, #11
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	483c      	ldr	r0, [pc, #240]	@ (80009c4 <MX_GPIO_Init+0x204>)
 80008d4:	f000 fb7e 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008d8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4831      	ldr	r0, [pc, #196]	@ (80009b8 <MX_GPIO_Init+0x1f8>)
 80008f2:	f000 fb6f 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000908:	230b      	movs	r3, #11
 800090a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4829      	ldr	r0, [pc, #164]	@ (80009b8 <MX_GPIO_Init+0x1f8>)
 8000914:	f000 fb5e 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000918:	2340      	movs	r3, #64	@ 0x40
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4823      	ldr	r0, [pc, #140]	@ (80009bc <MX_GPIO_Init+0x1fc>)
 8000930:	f000 fb50 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000934:	2380      	movs	r3, #128	@ 0x80
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	481d      	ldr	r0, [pc, #116]	@ (80009bc <MX_GPIO_Init+0x1fc>)
 8000948:	f000 fb44 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800094c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800095e:	230a      	movs	r3, #10
 8000960:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4816      	ldr	r0, [pc, #88]	@ (80009c4 <MX_GPIO_Init+0x204>)
 800096a:	f000 fb33 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800096e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4810      	ldr	r0, [pc, #64]	@ (80009c4 <MX_GPIO_Init+0x204>)
 8000984:	f000 fb26 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000988:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800099a:	230b      	movs	r3, #11
 800099c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	@ (80009bc <MX_GPIO_Init+0x1fc>)
 80009a6:	f000 fb15 	bl	8000fd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009aa:	bf00      	nop
 80009ac:	3730      	adds	r7, #48	@ 0x30
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020400 	.word	0x40020400
 80009bc:	40021800 	.word	0x40021800
 80009c0:	40020800 	.word	0x40020800
 80009c4:	40020000 	.word	0x40020000

080009c8 <printmsg>:

/* USER CODE BEGIN 4 */
void printmsg(char *msg)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff fc35 	bl	8000240 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b29a      	uxth	r2, r3
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	4803      	ldr	r0, [pc, #12]	@ (80009f0 <printmsg+0x28>)
 80009e2:	f002 f90b 	bl	8002bfc <HAL_UART_Transmit>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000080 	.word	0x20000080

080009f4 <vTask1>:

void vTask1( void *pvParameters )
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	const char *pcTaskName = "Task 1 is running\r\n";
 80009fc:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <vTask1+0x28>)
 80009fe:	60fb      	str	r3, [r7, #12]

		//before printing , lets own the semaphore or take the semaphore */
		//xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );

		/* Print out the name of this task. */
		sprintf( usr_msg,"%s",pcTaskName);
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	4907      	ldr	r1, [pc, #28]	@ (8000a20 <vTask1+0x2c>)
 8000a04:	4807      	ldr	r0, [pc, #28]	@ (8000a24 <vTask1+0x30>)
 8000a06:	f005 fc3f 	bl	8006288 <siprintf>
		printmsg(usr_msg);
 8000a0a:	4806      	ldr	r0, [pc, #24]	@ (8000a24 <vTask1+0x30>)
 8000a0c:	f7ff ffdc 	bl	80009c8 <printmsg>

		//give the semaphore here. give operation increases the bin sema value back to 1
		//xSemaphoreGive(xBinarySemaphore);

		/*Now this task will be blocked for 500ticks */
		vTaskDelay( pdMS_TO_TICKS(500) );
 8000a10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a14:	f003 fd50 	bl	80044b8 <vTaskDelay>
		sprintf( usr_msg,"%s",pcTaskName);
 8000a18:	bf00      	nop
 8000a1a:	e7f1      	b.n	8000a00 <vTask1+0xc>
 8000a1c:	08006c48 	.word	0x08006c48
 8000a20:	08006c5c 	.word	0x08006c5c
 8000a24:	20000108 	.word	0x20000108

08000a28 <vTask2>:
	}
}
/*-----------------------------------------------------------*/

void vTask2( void *pvParameters )
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

	const char *pcTaskName = "Task 2 is running\r\n";
 8000a30:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <vTask2+0x28>)
 8000a32:	60fb      	str	r3, [r7, #12]

		//before printing , lets own the semaphore or take the semaphore */
		//xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );

		/* Print out the name of this task. */
		sprintf( usr_msg,"%s",pcTaskName);
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	4907      	ldr	r1, [pc, #28]	@ (8000a54 <vTask2+0x2c>)
 8000a38:	4807      	ldr	r0, [pc, #28]	@ (8000a58 <vTask2+0x30>)
 8000a3a:	f005 fc25 	bl	8006288 <siprintf>
		printmsg(usr_msg);
 8000a3e:	4806      	ldr	r0, [pc, #24]	@ (8000a58 <vTask2+0x30>)
 8000a40:	f7ff ffc2 	bl	80009c8 <printmsg>

		//give the semaphore here. give operation increases the bin sema value back to 1
		//xSemaphoreGive(xBinarySemaphore);

		/*Now this task will be blocked for 500ticks */
		vTaskDelay( pdMS_TO_TICKS(500));
 8000a44:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a48:	f003 fd36 	bl	80044b8 <vTaskDelay>
		sprintf( usr_msg,"%s",pcTaskName);
 8000a4c:	bf00      	nop
 8000a4e:	e7f1      	b.n	8000a34 <vTask2+0xc>
 8000a50:	08006c60 	.word	0x08006c60
 8000a54:	08006c5c 	.word	0x08006c5c
 8000a58:	20000108 	.word	0x20000108

08000a5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a04      	ldr	r2, [pc, #16]	@ (8000a7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d101      	bne.n	8000a72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a6e:	f000 f9af 	bl	8000dd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40001000 	.word	0x40001000

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <Error_Handler+0x8>

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <HAL_MspInit+0x44>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad0 <HAL_MspInit+0x44>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <HAL_MspInit+0x44>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <HAL_MspInit+0x44>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	4a08      	ldr	r2, [pc, #32]	@ (8000ad0 <HAL_MspInit+0x44>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_MspInit+0x44>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800

08000ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b0ae      	sub	sp, #184	@ 0xb8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2290      	movs	r2, #144	@ 0x90
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f005 fbe7 	bl	80062c8 <memset>
  if(huart->Instance==USART3)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a22      	ldr	r2, [pc, #136]	@ (8000b88 <HAL_UART_MspInit+0xb4>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d13c      	bne.n	8000b7e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b08:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 f928 	bl	8001d68 <HAL_RCCEx_PeriphCLKConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b1e:	f7ff ffaf 	bl	8000a80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b22:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <HAL_UART_MspInit+0xb8>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	4a19      	ldr	r2, [pc, #100]	@ (8000b8c <HAL_UART_MspInit+0xb8>)
 8000b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2e:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <HAL_UART_MspInit+0xb8>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3a:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <HAL_UART_MspInit+0xb8>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a13      	ldr	r2, [pc, #76]	@ (8000b8c <HAL_UART_MspInit+0xb8>)
 8000b40:	f043 0308 	orr.w	r3, r3, #8
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <HAL_UART_MspInit+0xb8>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b52:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b72:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <HAL_UART_MspInit+0xbc>)
 8000b7a:	f000 fa2b 	bl	8000fd4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000b7e:	bf00      	nop
 8000b80:	37b8      	adds	r7, #184	@ 0xb8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40004800 	.word	0x40004800
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020c00 	.word	0x40020c00

08000b94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08e      	sub	sp, #56	@ 0x38
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ba4:	4b33      	ldr	r3, [pc, #204]	@ (8000c74 <HAL_InitTick+0xe0>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba8:	4a32      	ldr	r2, [pc, #200]	@ (8000c74 <HAL_InitTick+0xe0>)
 8000baa:	f043 0310 	orr.w	r3, r3, #16
 8000bae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb0:	4b30      	ldr	r3, [pc, #192]	@ (8000c74 <HAL_InitTick+0xe0>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb4:	f003 0310 	and.w	r3, r3, #16
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bbc:	f107 0210 	add.w	r2, r7, #16
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f001 f89c 	bl	8001d04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bcc:	6a3b      	ldr	r3, [r7, #32]
 8000bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d103      	bne.n	8000bde <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bd6:	f001 f86d 	bl	8001cb4 <HAL_RCC_GetPCLK1Freq>
 8000bda:	6378      	str	r0, [r7, #52]	@ 0x34
 8000bdc:	e004      	b.n	8000be8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bde:	f001 f869 	bl	8001cb4 <HAL_RCC_GetPCLK1Freq>
 8000be2:	4603      	mov	r3, r0
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bea:	4a23      	ldr	r2, [pc, #140]	@ (8000c78 <HAL_InitTick+0xe4>)
 8000bec:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf0:	0c9b      	lsrs	r3, r3, #18
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <HAL_InitTick+0xe8>)
 8000bf8:	4a21      	ldr	r2, [pc, #132]	@ (8000c80 <HAL_InitTick+0xec>)
 8000bfa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <HAL_InitTick+0xe8>)
 8000bfe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c02:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c04:	4a1d      	ldr	r2, [pc, #116]	@ (8000c7c <HAL_InitTick+0xe8>)
 8000c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c08:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <HAL_InitTick+0xe8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <HAL_InitTick+0xe8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c16:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <HAL_InitTick+0xe8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c1c:	4817      	ldr	r0, [pc, #92]	@ (8000c7c <HAL_InitTick+0xe8>)
 8000c1e:	f001 fccb 	bl	80025b8 <HAL_TIM_Base_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d11b      	bne.n	8000c68 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c30:	4812      	ldr	r0, [pc, #72]	@ (8000c7c <HAL_InitTick+0xe8>)
 8000c32:	f001 fd23 	bl	800267c <HAL_TIM_Base_Start_IT>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d111      	bne.n	8000c68 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c44:	2036      	movs	r0, #54	@ 0x36
 8000c46:	f000 f9b7 	bl	8000fb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b0f      	cmp	r3, #15
 8000c4e:	d808      	bhi.n	8000c62 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c50:	2200      	movs	r2, #0
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	2036      	movs	r0, #54	@ 0x36
 8000c56:	f000 f993 	bl	8000f80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <HAL_InitTick+0xf0>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	e002      	b.n	8000c68 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3738      	adds	r7, #56	@ 0x38
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	431bde83 	.word	0x431bde83
 8000c7c:	20000208 	.word	0x20000208
 8000c80:	40001000 	.word	0x40001000
 8000c84:	20000004 	.word	0x20000004

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <NMI_Handler+0x4>

08000c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <MemManage_Handler+0x4>

08000ca0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <UsageFault_Handler+0x4>

08000cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cc4:	4802      	ldr	r0, [pc, #8]	@ (8000cd0 <TIM6_DAC_IRQHandler+0x10>)
 8000cc6:	f001 fd51 	bl	800276c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000208 	.word	0x20000208

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	@ (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	@ (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f005 fae8 	bl	80062d8 <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	@ (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20080000 	.word	0x20080000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	20000254 	.word	0x20000254
 8000d3c:	2000bd48 	.word	0x2000bd48

08000d40 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <SystemInit+0x20>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d4a:	4a05      	ldr	r2, [pc, #20]	@ (8000d60 <SystemInit+0x20>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d68:	f7ff ffea 	bl	8000d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d6c:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d6e:	490d      	ldr	r1, [pc, #52]	@ (8000da4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d70:	4a0d      	ldr	r2, [pc, #52]	@ (8000da8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d84:	4c0a      	ldr	r4, [pc, #40]	@ (8000db0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d92:	f005 faa7 	bl	80062e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d96:	f7ff fc23 	bl	80005e0 <main>
  bx  lr    
 8000d9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d9c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000da8:	08006cf8 	.word	0x08006cf8
  ldr r2, =_sbss
 8000dac:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000db0:	2000bd48 	.word	0x2000bd48

08000db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC_IRQHandler>

08000db6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dba:	2003      	movs	r0, #3
 8000dbc:	f000 f8d5 	bl	8000f6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc0:	200f      	movs	r0, #15
 8000dc2:	f7ff fee7 	bl	8000b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc6:	f7ff fe61 	bl	8000a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000008 	.word	0x20000008
 8000df4:	20000258 	.word	0x20000258

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	@ (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000258 	.word	0x20000258

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <__NVIC_SetPriorityGrouping+0x40>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	@ (8000e50 <__NVIC_SetPriorityGrouping+0x40>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00
 8000e54:	05fa0000 	.word	0x05fa0000

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	db0b      	blt.n	8000e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 021f 	and.w	r2, r3, #31
 8000e8c:	4907      	ldr	r1, [pc, #28]	@ (8000eac <__NVIC_EnableIRQ+0x38>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	2001      	movs	r0, #1
 8000e96:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	@ (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	@ (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	@ 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	@ 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ff4c 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f92:	f7ff ff61 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000f96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	68b9      	ldr	r1, [r7, #8]
 8000f9c:	6978      	ldr	r0, [r7, #20]
 8000f9e:	f7ff ffb1 	bl	8000f04 <NVIC_EncodePriority>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff80 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000fb0:	bf00      	nop
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff54 	bl	8000e74 <__NVIC_EnableIRQ>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	@ 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	e175      	b.n	80012e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	429a      	cmp	r2, r3
 800100e:	f040 8164 	bne.w	80012da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	2b01      	cmp	r3, #1
 800101c:	d005      	beq.n	800102a <HAL_GPIO_Init+0x56>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d130      	bne.n	800108c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	091b      	lsrs	r3, r3, #4
 8001076:	f003 0201 	and.w	r2, r3, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b03      	cmp	r3, #3
 8001096:	d017      	beq.n	80010c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d123      	bne.n	800111c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	08da      	lsrs	r2, r3, #3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3208      	adds	r2, #8
 80010dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	69b9      	ldr	r1, [r7, #24]
 8001118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0203 	and.w	r2, r3, #3
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 80be 	beq.w	80012da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	4b66      	ldr	r3, [pc, #408]	@ (80012f8 <HAL_GPIO_Init+0x324>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	4a65      	ldr	r2, [pc, #404]	@ (80012f8 <HAL_GPIO_Init+0x324>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001168:	6453      	str	r3, [r2, #68]	@ 0x44
 800116a:	4b63      	ldr	r3, [pc, #396]	@ (80012f8 <HAL_GPIO_Init+0x324>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001176:	4a61      	ldr	r2, [pc, #388]	@ (80012fc <HAL_GPIO_Init+0x328>)
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a58      	ldr	r2, [pc, #352]	@ (8001300 <HAL_GPIO_Init+0x32c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d037      	beq.n	8001212 <HAL_GPIO_Init+0x23e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a57      	ldr	r2, [pc, #348]	@ (8001304 <HAL_GPIO_Init+0x330>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d031      	beq.n	800120e <HAL_GPIO_Init+0x23a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a56      	ldr	r2, [pc, #344]	@ (8001308 <HAL_GPIO_Init+0x334>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d02b      	beq.n	800120a <HAL_GPIO_Init+0x236>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a55      	ldr	r2, [pc, #340]	@ (800130c <HAL_GPIO_Init+0x338>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d025      	beq.n	8001206 <HAL_GPIO_Init+0x232>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a54      	ldr	r2, [pc, #336]	@ (8001310 <HAL_GPIO_Init+0x33c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d01f      	beq.n	8001202 <HAL_GPIO_Init+0x22e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a53      	ldr	r2, [pc, #332]	@ (8001314 <HAL_GPIO_Init+0x340>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d019      	beq.n	80011fe <HAL_GPIO_Init+0x22a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a52      	ldr	r2, [pc, #328]	@ (8001318 <HAL_GPIO_Init+0x344>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d013      	beq.n	80011fa <HAL_GPIO_Init+0x226>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a51      	ldr	r2, [pc, #324]	@ (800131c <HAL_GPIO_Init+0x348>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d00d      	beq.n	80011f6 <HAL_GPIO_Init+0x222>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a50      	ldr	r2, [pc, #320]	@ (8001320 <HAL_GPIO_Init+0x34c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d007      	beq.n	80011f2 <HAL_GPIO_Init+0x21e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001324 <HAL_GPIO_Init+0x350>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d101      	bne.n	80011ee <HAL_GPIO_Init+0x21a>
 80011ea:	2309      	movs	r3, #9
 80011ec:	e012      	b.n	8001214 <HAL_GPIO_Init+0x240>
 80011ee:	230a      	movs	r3, #10
 80011f0:	e010      	b.n	8001214 <HAL_GPIO_Init+0x240>
 80011f2:	2308      	movs	r3, #8
 80011f4:	e00e      	b.n	8001214 <HAL_GPIO_Init+0x240>
 80011f6:	2307      	movs	r3, #7
 80011f8:	e00c      	b.n	8001214 <HAL_GPIO_Init+0x240>
 80011fa:	2306      	movs	r3, #6
 80011fc:	e00a      	b.n	8001214 <HAL_GPIO_Init+0x240>
 80011fe:	2305      	movs	r3, #5
 8001200:	e008      	b.n	8001214 <HAL_GPIO_Init+0x240>
 8001202:	2304      	movs	r3, #4
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x240>
 8001206:	2303      	movs	r3, #3
 8001208:	e004      	b.n	8001214 <HAL_GPIO_Init+0x240>
 800120a:	2302      	movs	r3, #2
 800120c:	e002      	b.n	8001214 <HAL_GPIO_Init+0x240>
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <HAL_GPIO_Init+0x240>
 8001212:	2300      	movs	r3, #0
 8001214:	69fa      	ldr	r2, [r7, #28]
 8001216:	f002 0203 	and.w	r2, r2, #3
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	4093      	lsls	r3, r2
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001224:	4935      	ldr	r1, [pc, #212]	@ (80012fc <HAL_GPIO_Init+0x328>)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3302      	adds	r3, #2
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001232:	4b3d      	ldr	r3, [pc, #244]	@ (8001328 <HAL_GPIO_Init+0x354>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001256:	4a34      	ldr	r2, [pc, #208]	@ (8001328 <HAL_GPIO_Init+0x354>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800125c:	4b32      	ldr	r3, [pc, #200]	@ (8001328 <HAL_GPIO_Init+0x354>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001280:	4a29      	ldr	r2, [pc, #164]	@ (8001328 <HAL_GPIO_Init+0x354>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001286:	4b28      	ldr	r3, [pc, #160]	@ (8001328 <HAL_GPIO_Init+0x354>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001328 <HAL_GPIO_Init+0x354>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <HAL_GPIO_Init+0x354>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012d4:	4a14      	ldr	r2, [pc, #80]	@ (8001328 <HAL_GPIO_Init+0x354>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3301      	adds	r3, #1
 80012de:	61fb      	str	r3, [r7, #28]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	2b0f      	cmp	r3, #15
 80012e4:	f67f ae86 	bls.w	8000ff4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3724      	adds	r7, #36	@ 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40013800 	.word	0x40013800
 8001300:	40020000 	.word	0x40020000
 8001304:	40020400 	.word	0x40020400
 8001308:	40020800 	.word	0x40020800
 800130c:	40020c00 	.word	0x40020c00
 8001310:	40021000 	.word	0x40021000
 8001314:	40021400 	.word	0x40021400
 8001318:	40021800 	.word	0x40021800
 800131c:	40021c00 	.word	0x40021c00
 8001320:	40022000 	.word	0x40022000
 8001324:	40022400 	.word	0x40022400
 8001328:	40013c00 	.word	0x40013c00

0800132c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
 8001338:	4613      	mov	r3, r2
 800133a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800133c:	787b      	ldrb	r3, [r7, #1]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001348:	e003      	b.n	8001352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800134a:	887b      	ldrh	r3, [r7, #2]
 800134c:	041a      	lsls	r2, r3, #16
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	619a      	str	r2, [r3, #24]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001368:	2300      	movs	r3, #0
 800136a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e29b      	b.n	80018ae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8087 	beq.w	8001492 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001384:	4b96      	ldr	r3, [pc, #600]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 030c 	and.w	r3, r3, #12
 800138c:	2b04      	cmp	r3, #4
 800138e:	d00c      	beq.n	80013aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001390:	4b93      	ldr	r3, [pc, #588]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f003 030c 	and.w	r3, r3, #12
 8001398:	2b08      	cmp	r3, #8
 800139a:	d112      	bne.n	80013c2 <HAL_RCC_OscConfig+0x62>
 800139c:	4b90      	ldr	r3, [pc, #576]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013a8:	d10b      	bne.n	80013c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013aa:	4b8d      	ldr	r3, [pc, #564]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d06c      	beq.n	8001490 <HAL_RCC_OscConfig+0x130>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d168      	bne.n	8001490 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e275      	b.n	80018ae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x7a>
 80013cc:	4b84      	ldr	r3, [pc, #528]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a83      	ldr	r2, [pc, #524]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 80013d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	e02e      	b.n	8001438 <HAL_RCC_OscConfig+0xd8>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x9c>
 80013e2:	4b7f      	ldr	r3, [pc, #508]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a7e      	ldr	r2, [pc, #504]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 80013e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b7c      	ldr	r3, [pc, #496]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a7b      	ldr	r2, [pc, #492]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 80013f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e01d      	b.n	8001438 <HAL_RCC_OscConfig+0xd8>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0xc0>
 8001406:	4b76      	ldr	r3, [pc, #472]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a75      	ldr	r2, [pc, #468]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 800140c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	4b73      	ldr	r3, [pc, #460]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a72      	ldr	r2, [pc, #456]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 8001418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e00b      	b.n	8001438 <HAL_RCC_OscConfig+0xd8>
 8001420:	4b6f      	ldr	r3, [pc, #444]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a6e      	ldr	r2, [pc, #440]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 8001426:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b6c      	ldr	r3, [pc, #432]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a6b      	ldr	r2, [pc, #428]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 8001432:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d013      	beq.n	8001468 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fcda 	bl	8000df8 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff fcd6 	bl	8000df8 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	@ 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e229      	b.n	80018ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	4b61      	ldr	r3, [pc, #388]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0xe8>
 8001466:	e014      	b.n	8001492 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001468:	f7ff fcc6 	bl	8000df8 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fcc2 	bl	8000df8 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	@ 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e215      	b.n	80018ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	4b57      	ldr	r3, [pc, #348]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x110>
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d069      	beq.n	8001572 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800149e:	4b50      	ldr	r3, [pc, #320]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00b      	beq.n	80014c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014aa:	4b4d      	ldr	r3, [pc, #308]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d11c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x190>
 80014b6:	4b4a      	ldr	r3, [pc, #296]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d116      	bne.n	80014f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c2:	4b47      	ldr	r3, [pc, #284]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <HAL_RCC_OscConfig+0x17a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d001      	beq.n	80014da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e1e9      	b.n	80018ae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014da:	4b41      	ldr	r3, [pc, #260]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	493d      	ldr	r1, [pc, #244]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ee:	e040      	b.n	8001572 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d023      	beq.n	8001540 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f8:	4b39      	ldr	r3, [pc, #228]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a38      	ldr	r2, [pc, #224]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001504:	f7ff fc78 	bl	8000df8 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800150c:	f7ff fc74 	bl	8000df8 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e1c7      	b.n	80018ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151e:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152a:	4b2d      	ldr	r3, [pc, #180]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4929      	ldr	r1, [pc, #164]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]
 800153e:	e018      	b.n	8001572 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001540:	4b27      	ldr	r3, [pc, #156]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a26      	ldr	r2, [pc, #152]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154c:	f7ff fc54 	bl	8000df8 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001554:	f7ff fc50 	bl	8000df8 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e1a3      	b.n	80018ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001566:	4b1e      	ldr	r3, [pc, #120]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	2b00      	cmp	r3, #0
 800157c:	d038      	beq.n	80015f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d019      	beq.n	80015ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001586:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 8001588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800158a:	4a15      	ldr	r2, [pc, #84]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001592:	f7ff fc31 	bl	8000df8 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159a:	f7ff fc2d 	bl	8000df8 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e180      	b.n	80018ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 80015ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x23a>
 80015b8:	e01a      	b.n	80015f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ba:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 80015bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015be:	4a08      	ldr	r2, [pc, #32]	@ (80015e0 <HAL_RCC_OscConfig+0x280>)
 80015c0:	f023 0301 	bic.w	r3, r3, #1
 80015c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c6:	f7ff fc17 	bl	8000df8 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015cc:	e00a      	b.n	80015e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ce:	f7ff fc13 	bl	8000df8 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d903      	bls.n	80015e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e166      	b.n	80018ae <HAL_RCC_OscConfig+0x54e>
 80015e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e4:	4b92      	ldr	r3, [pc, #584]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 80015e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1ee      	bne.n	80015ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 80a4 	beq.w	8001746 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015fe:	4b8c      	ldr	r3, [pc, #560]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10d      	bne.n	8001626 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	4b89      	ldr	r3, [pc, #548]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	4a88      	ldr	r2, [pc, #544]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001614:	6413      	str	r3, [r2, #64]	@ 0x40
 8001616:	4b86      	ldr	r3, [pc, #536]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001622:	2301      	movs	r3, #1
 8001624:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001626:	4b83      	ldr	r3, [pc, #524]	@ (8001834 <HAL_RCC_OscConfig+0x4d4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162e:	2b00      	cmp	r3, #0
 8001630:	d118      	bne.n	8001664 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001632:	4b80      	ldr	r3, [pc, #512]	@ (8001834 <HAL_RCC_OscConfig+0x4d4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a7f      	ldr	r2, [pc, #508]	@ (8001834 <HAL_RCC_OscConfig+0x4d4>)
 8001638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800163c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163e:	f7ff fbdb 	bl	8000df8 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001646:	f7ff fbd7 	bl	8000df8 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b64      	cmp	r3, #100	@ 0x64
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e12a      	b.n	80018ae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001658:	4b76      	ldr	r3, [pc, #472]	@ (8001834 <HAL_RCC_OscConfig+0x4d4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d106      	bne.n	800167a <HAL_RCC_OscConfig+0x31a>
 800166c:	4b70      	ldr	r3, [pc, #448]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 800166e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001670:	4a6f      	ldr	r2, [pc, #444]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6713      	str	r3, [r2, #112]	@ 0x70
 8001678:	e02d      	b.n	80016d6 <HAL_RCC_OscConfig+0x376>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10c      	bne.n	800169c <HAL_RCC_OscConfig+0x33c>
 8001682:	4b6b      	ldr	r3, [pc, #428]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 8001684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001686:	4a6a      	ldr	r2, [pc, #424]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 8001688:	f023 0301 	bic.w	r3, r3, #1
 800168c:	6713      	str	r3, [r2, #112]	@ 0x70
 800168e:	4b68      	ldr	r3, [pc, #416]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001692:	4a67      	ldr	r2, [pc, #412]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 8001694:	f023 0304 	bic.w	r3, r3, #4
 8001698:	6713      	str	r3, [r2, #112]	@ 0x70
 800169a:	e01c      	b.n	80016d6 <HAL_RCC_OscConfig+0x376>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b05      	cmp	r3, #5
 80016a2:	d10c      	bne.n	80016be <HAL_RCC_OscConfig+0x35e>
 80016a4:	4b62      	ldr	r3, [pc, #392]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 80016a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a8:	4a61      	ldr	r2, [pc, #388]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b0:	4b5f      	ldr	r3, [pc, #380]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 80016b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b4:	4a5e      	ldr	r2, [pc, #376]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80016bc:	e00b      	b.n	80016d6 <HAL_RCC_OscConfig+0x376>
 80016be:	4b5c      	ldr	r3, [pc, #368]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 80016c4:	f023 0301 	bic.w	r3, r3, #1
 80016c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ca:	4b59      	ldr	r3, [pc, #356]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ce:	4a58      	ldr	r2, [pc, #352]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 80016d0:	f023 0304 	bic.w	r3, r3, #4
 80016d4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d015      	beq.n	800170a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016de:	f7ff fb8b 	bl	8000df8 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e6:	f7ff fb87 	bl	8000df8 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e0d8      	b.n	80018ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 80016fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0ee      	beq.n	80016e6 <HAL_RCC_OscConfig+0x386>
 8001708:	e014      	b.n	8001734 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170a:	f7ff fb75 	bl	8000df8 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001710:	e00a      	b.n	8001728 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001712:	f7ff fb71 	bl	8000df8 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001720:	4293      	cmp	r3, r2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e0c2      	b.n	80018ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001728:	4b41      	ldr	r3, [pc, #260]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 800172a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1ee      	bne.n	8001712 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001734:	7dfb      	ldrb	r3, [r7, #23]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d105      	bne.n	8001746 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800173a:	4b3d      	ldr	r3, [pc, #244]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	4a3c      	ldr	r2, [pc, #240]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 8001740:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001744:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 80ae 	beq.w	80018ac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001750:	4b37      	ldr	r3, [pc, #220]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b08      	cmp	r3, #8
 800175a:	d06d      	beq.n	8001838 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d14b      	bne.n	80017fc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001764:	4b32      	ldr	r3, [pc, #200]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a31      	ldr	r2, [pc, #196]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 800176a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800176e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff fb42 	bl	8000df8 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff fb3e 	bl	8000df8 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e091      	b.n	80018ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178a:	4b29      	ldr	r3, [pc, #164]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69da      	ldr	r2, [r3, #28]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a4:	019b      	lsls	r3, r3, #6
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	3b01      	subs	r3, #1
 80017b0:	041b      	lsls	r3, r3, #16
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b8:	061b      	lsls	r3, r3, #24
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c0:	071b      	lsls	r3, r3, #28
 80017c2:	491b      	ldr	r1, [pc, #108]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c8:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a18      	ldr	r2, [pc, #96]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 80017ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff fb10 	bl	8000df8 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff fb0c 	bl	8000df8 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e05f      	b.n	80018ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x47c>
 80017fa:	e057      	b.n	80018ac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0b      	ldr	r2, [pc, #44]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 8001802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff faf6 	bl	8000df8 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001810:	f7ff faf2 	bl	8000df8 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e045      	b.n	80018ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001822:	4b03      	ldr	r3, [pc, #12]	@ (8001830 <HAL_RCC_OscConfig+0x4d0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x4b0>
 800182e:	e03d      	b.n	80018ac <HAL_RCC_OscConfig+0x54c>
 8001830:	40023800 	.word	0x40023800
 8001834:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001838:	4b1f      	ldr	r3, [pc, #124]	@ (80018b8 <HAL_RCC_OscConfig+0x558>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d030      	beq.n	80018a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001850:	429a      	cmp	r2, r3
 8001852:	d129      	bne.n	80018a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185e:	429a      	cmp	r2, r3
 8001860:	d122      	bne.n	80018a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001868:	4013      	ands	r3, r2
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800186e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001870:	4293      	cmp	r3, r2
 8001872:	d119      	bne.n	80018a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187e:	085b      	lsrs	r3, r3, #1
 8001880:	3b01      	subs	r3, #1
 8001882:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d10f      	bne.n	80018a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001892:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001894:	429a      	cmp	r2, r3
 8001896:	d107      	bne.n	80018a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800

080018bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0d0      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 030f 	and.w	r3, r3, #15
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d910      	bls.n	8001904 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b67      	ldr	r3, [pc, #412]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 020f 	bic.w	r2, r3, #15
 80018ea:	4965      	ldr	r1, [pc, #404]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f2:	4b63      	ldr	r3, [pc, #396]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0b8      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d020      	beq.n	8001952 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800191c:	4b59      	ldr	r3, [pc, #356]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	4a58      	ldr	r2, [pc, #352]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 8001922:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001926:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001934:	4b53      	ldr	r3, [pc, #332]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	4a52      	ldr	r2, [pc, #328]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 800193a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800193e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001940:	4b50      	ldr	r3, [pc, #320]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	494d      	ldr	r1, [pc, #308]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 800194e:	4313      	orrs	r3, r2
 8001950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d040      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d107      	bne.n	8001976 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	4b47      	ldr	r3, [pc, #284]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d115      	bne.n	800199e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e07f      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d107      	bne.n	800198e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197e:	4b41      	ldr	r3, [pc, #260]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e073      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e06b      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800199e:	4b39      	ldr	r3, [pc, #228]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f023 0203 	bic.w	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4936      	ldr	r1, [pc, #216]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019b0:	f7ff fa22 	bl	8000df8 <HAL_GetTick>
 80019b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b8:	f7ff fa1e 	bl	8000df8 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e053      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 020c 	and.w	r2, r3, #12
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	429a      	cmp	r2, r3
 80019de:	d1eb      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019e0:	4b27      	ldr	r3, [pc, #156]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d210      	bcs.n	8001a10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b24      	ldr	r3, [pc, #144]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 020f 	bic.w	r2, r3, #15
 80019f6:	4922      	ldr	r1, [pc, #136]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fe:	4b20      	ldr	r3, [pc, #128]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e032      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d008      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a1c:	4b19      	ldr	r3, [pc, #100]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	4916      	ldr	r1, [pc, #88]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d009      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a3a:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	490e      	ldr	r1, [pc, #56]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a4e:	f000 f821 	bl	8001a94 <HAL_RCC_GetSysClockFreq>
 8001a52:	4602      	mov	r2, r0
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	490a      	ldr	r1, [pc, #40]	@ (8001a88 <HAL_RCC_ClockConfig+0x1cc>)
 8001a60:	5ccb      	ldrb	r3, [r1, r3]
 8001a62:	fa22 f303 	lsr.w	r3, r2, r3
 8001a66:	4a09      	ldr	r2, [pc, #36]	@ (8001a8c <HAL_RCC_ClockConfig+0x1d0>)
 8001a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a6a:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <HAL_RCC_ClockConfig+0x1d4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff f890 	bl	8000b94 <HAL_InitTick>

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023c00 	.word	0x40023c00
 8001a84:	40023800 	.word	0x40023800
 8001a88:	08006c9c 	.word	0x08006c9c
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	20000004 	.word	0x20000004

08001a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a98:	b094      	sub	sp, #80	@ 0x50
 8001a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aac:	4b79      	ldr	r3, [pc, #484]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d00d      	beq.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	f200 80e1 	bhi.w	8001c80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d003      	beq.n	8001ace <HAL_RCC_GetSysClockFreq+0x3a>
 8001ac6:	e0db      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ac8:	4b73      	ldr	r3, [pc, #460]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001acc:	e0db      	b.n	8001c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ace:	4b72      	ldr	r3, [pc, #456]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ad2:	e0d8      	b.n	8001c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ad4:	4b6f      	ldr	r3, [pc, #444]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001adc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ade:	4b6d      	ldr	r3, [pc, #436]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d063      	beq.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aea:	4b6a      	ldr	r3, [pc, #424]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	099b      	lsrs	r3, r3, #6
 8001af0:	2200      	movs	r2, #0
 8001af2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001af4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001afc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001afe:	2300      	movs	r3, #0
 8001b00:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b06:	4622      	mov	r2, r4
 8001b08:	462b      	mov	r3, r5
 8001b0a:	f04f 0000 	mov.w	r0, #0
 8001b0e:	f04f 0100 	mov.w	r1, #0
 8001b12:	0159      	lsls	r1, r3, #5
 8001b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b18:	0150      	lsls	r0, r2, #5
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4621      	mov	r1, r4
 8001b20:	1a51      	subs	r1, r2, r1
 8001b22:	6139      	str	r1, [r7, #16]
 8001b24:	4629      	mov	r1, r5
 8001b26:	eb63 0301 	sbc.w	r3, r3, r1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b38:	4659      	mov	r1, fp
 8001b3a:	018b      	lsls	r3, r1, #6
 8001b3c:	4651      	mov	r1, sl
 8001b3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b42:	4651      	mov	r1, sl
 8001b44:	018a      	lsls	r2, r1, #6
 8001b46:	4651      	mov	r1, sl
 8001b48:	ebb2 0801 	subs.w	r8, r2, r1
 8001b4c:	4659      	mov	r1, fp
 8001b4e:	eb63 0901 	sbc.w	r9, r3, r1
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b66:	4690      	mov	r8, r2
 8001b68:	4699      	mov	r9, r3
 8001b6a:	4623      	mov	r3, r4
 8001b6c:	eb18 0303 	adds.w	r3, r8, r3
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	462b      	mov	r3, r5
 8001b74:	eb49 0303 	adc.w	r3, r9, r3
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b86:	4629      	mov	r1, r5
 8001b88:	028b      	lsls	r3, r1, #10
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b90:	4621      	mov	r1, r4
 8001b92:	028a      	lsls	r2, r1, #10
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ba0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ba4:	f7fe fba4 	bl	80002f0 <__aeabi_uldivmod>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4613      	mov	r3, r2
 8001bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bb0:	e058      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb2:	4b38      	ldr	r3, [pc, #224]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	099b      	lsrs	r3, r3, #6
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bc2:	623b      	str	r3, [r7, #32]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bcc:	4642      	mov	r2, r8
 8001bce:	464b      	mov	r3, r9
 8001bd0:	f04f 0000 	mov.w	r0, #0
 8001bd4:	f04f 0100 	mov.w	r1, #0
 8001bd8:	0159      	lsls	r1, r3, #5
 8001bda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bde:	0150      	lsls	r0, r2, #5
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4641      	mov	r1, r8
 8001be6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bea:	4649      	mov	r1, r9
 8001bec:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c04:	ebb2 040a 	subs.w	r4, r2, sl
 8001c08:	eb63 050b 	sbc.w	r5, r3, fp
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	00eb      	lsls	r3, r5, #3
 8001c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c1a:	00e2      	lsls	r2, r4, #3
 8001c1c:	4614      	mov	r4, r2
 8001c1e:	461d      	mov	r5, r3
 8001c20:	4643      	mov	r3, r8
 8001c22:	18e3      	adds	r3, r4, r3
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	464b      	mov	r3, r9
 8001c28:	eb45 0303 	adc.w	r3, r5, r3
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	028b      	lsls	r3, r1, #10
 8001c3e:	4621      	mov	r1, r4
 8001c40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c44:	4621      	mov	r1, r4
 8001c46:	028a      	lsls	r2, r1, #10
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	61fa      	str	r2, [r7, #28]
 8001c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c58:	f7fe fb4a 	bl	80002f0 <__aeabi_uldivmod>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4613      	mov	r3, r2
 8001c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	0c1b      	lsrs	r3, r3, #16
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	3301      	adds	r3, #1
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c7e:	e002      	b.n	8001c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c80:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3750      	adds	r7, #80	@ 0x50
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800
 8001c98:	00f42400 	.word	0x00f42400

08001c9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca0:	4b03      	ldr	r3, [pc, #12]	@ (8001cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000000 	.word	0x20000000

08001cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cb8:	f7ff fff0 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	0a9b      	lsrs	r3, r3, #10
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	4903      	ldr	r1, [pc, #12]	@ (8001cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cca:	5ccb      	ldrb	r3, [r1, r3]
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	08006cac 	.word	0x08006cac

08001cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ce0:	f7ff ffdc 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4b05      	ldr	r3, [pc, #20]	@ (8001cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	0b5b      	lsrs	r3, r3, #13
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	4903      	ldr	r1, [pc, #12]	@ (8001d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cf2:	5ccb      	ldrb	r3, [r1, r3]
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	08006cac 	.word	0x08006cac

08001d04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	220f      	movs	r2, #15
 8001d12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d14:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <HAL_RCC_GetClockConfig+0x5c>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0203 	and.w	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d20:	4b0f      	ldr	r3, [pc, #60]	@ (8001d60 <HAL_RCC_GetClockConfig+0x5c>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d38:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <HAL_RCC_GetClockConfig+0x5c>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	08db      	lsrs	r3, r3, #3
 8001d3e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d46:	4b07      	ldr	r3, [pc, #28]	@ (8001d64 <HAL_RCC_GetClockConfig+0x60>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 020f 	and.w	r2, r3, #15
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	601a      	str	r2, [r3, #0]
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40023c00 	.word	0x40023c00

08001d68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d012      	beq.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d90:	4b69      	ldr	r3, [pc, #420]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4a68      	ldr	r2, [pc, #416]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d96:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001d9a:	6093      	str	r3, [r2, #8]
 8001d9c:	4b66      	ldr	r3, [pc, #408]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da4:	4964      	ldr	r1, [pc, #400]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001db2:	2301      	movs	r3, #1
 8001db4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d017      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dc2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dc8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dd0:	4959      	ldr	r1, [pc, #356]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ddc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001de0:	d101      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001de2:	2301      	movs	r3, #1
 8001de4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001dee:	2301      	movs	r3, #1
 8001df0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d017      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001dfe:	4b4e      	ldr	r3, [pc, #312]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e04:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0c:	494a      	ldr	r1, [pc, #296]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0320 	and.w	r3, r3, #32
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 808b 	beq.w	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	4a39      	ldr	r2, [pc, #228]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e58:	4b37      	ldr	r3, [pc, #220]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e64:	4b35      	ldr	r3, [pc, #212]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a34      	ldr	r2, [pc, #208]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e70:	f7fe ffc2 	bl	8000df8 <HAL_GetTick>
 8001e74:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e78:	f7fe ffbe 	bl	8000df8 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b64      	cmp	r3, #100	@ 0x64
 8001e84:	d901      	bls.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e38f      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e8a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e96:	4b28      	ldr	r3, [pc, #160]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e9e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d035      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d02e      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001eb4:	4b20      	ldr	r3, [pc, #128]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ebc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eca:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ece:	4a1a      	ldr	r2, [pc, #104]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ed4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001ed6:	4a18      	ldr	r2, [pc, #96]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001edc:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d114      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7fe ff86 	bl	8000df8 <HAL_GetTick>
 8001eec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eee:	e00a      	b.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef0:	f7fe ff82 	bl	8000df8 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e351      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f06:	4b0c      	ldr	r3, [pc, #48]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0ee      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f1e:	d111      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001f20:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f2c:	4b04      	ldr	r3, [pc, #16]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f2e:	400b      	ands	r3, r1
 8001f30:	4901      	ldr	r1, [pc, #4]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	608b      	str	r3, [r1, #8]
 8001f36:	e00b      	b.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40007000 	.word	0x40007000
 8001f40:	0ffffcff 	.word	0x0ffffcff
 8001f44:	4bac      	ldr	r3, [pc, #688]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4aab      	ldr	r2, [pc, #684]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f4a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001f4e:	6093      	str	r3, [r2, #8]
 8001f50:	4ba9      	ldr	r3, [pc, #676]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f5c:	49a6      	ldr	r1, [pc, #664]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d010      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f6e:	4ba2      	ldr	r3, [pc, #648]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f74:	4aa0      	ldr	r2, [pc, #640]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f7a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f7e:	4b9e      	ldr	r3, [pc, #632]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f80:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f88:	499b      	ldr	r1, [pc, #620]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00a      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f9c:	4b96      	ldr	r3, [pc, #600]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001faa:	4993      	ldr	r1, [pc, #588]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fbe:	4b8e      	ldr	r3, [pc, #568]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fcc:	498a      	ldr	r1, [pc, #552]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fe0:	4b85      	ldr	r3, [pc, #532]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fee:	4982      	ldr	r1, [pc, #520]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002002:	4b7d      	ldr	r3, [pc, #500]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002008:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002010:	4979      	ldr	r1, [pc, #484]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002024:	4b74      	ldr	r3, [pc, #464]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202a:	f023 0203 	bic.w	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002032:	4971      	ldr	r1, [pc, #452]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002046:	4b6c      	ldr	r3, [pc, #432]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204c:	f023 020c 	bic.w	r2, r3, #12
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002054:	4968      	ldr	r1, [pc, #416]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002068:	4b63      	ldr	r3, [pc, #396]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002076:	4960      	ldr	r1, [pc, #384]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800208a:	4b5b      	ldr	r3, [pc, #364]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002090:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002098:	4957      	ldr	r1, [pc, #348]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020ac:	4b52      	ldr	r3, [pc, #328]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ba:	494f      	ldr	r1, [pc, #316]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80020ce:	4b4a      	ldr	r3, [pc, #296]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020dc:	4946      	ldr	r1, [pc, #280]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80020f0:	4b41      	ldr	r3, [pc, #260]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fe:	493e      	ldr	r1, [pc, #248]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002112:	4b39      	ldr	r3, [pc, #228]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002118:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002120:	4935      	ldr	r1, [pc, #212]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002134:	4b30      	ldr	r3, [pc, #192]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800213a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002142:	492d      	ldr	r1, [pc, #180]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d011      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002156:	4b28      	ldr	r3, [pc, #160]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002164:	4924      	ldr	r1, [pc, #144]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002170:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002174:	d101      	bne.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002176:	2301      	movs	r3, #1
 8002178:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002186:	2301      	movs	r3, #1
 8002188:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00a      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002196:	4b18      	ldr	r3, [pc, #96]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800219c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021a4:	4914      	ldr	r1, [pc, #80]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00b      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021b8:	4b0f      	ldr	r3, [pc, #60]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021be:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021c8:	490b      	ldr	r1, [pc, #44]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00f      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80021dc:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021ec:	4902      	ldr	r1, [pc, #8]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80021f4:	e002      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00b      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002208:	4b8a      	ldr	r3, [pc, #552]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800220a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800220e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002218:	4986      	ldr	r1, [pc, #536]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00b      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800222c:	4b81      	ldr	r3, [pc, #516]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800222e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002232:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800223c:	497d      	ldr	r1, [pc, #500]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d006      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 80d6 	beq.w	8002404 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002258:	4b76      	ldr	r3, [pc, #472]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a75      	ldr	r2, [pc, #468]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800225e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002262:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002264:	f7fe fdc8 	bl	8000df8 <HAL_GetTick>
 8002268:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800226c:	f7fe fdc4 	bl	8000df8 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	@ 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e195      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800227e:	4b6d      	ldr	r3, [pc, #436]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d021      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800229a:	2b00      	cmp	r3, #0
 800229c:	d11d      	bne.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800229e:	4b65      	ldr	r3, [pc, #404]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022a4:	0c1b      	lsrs	r3, r3, #16
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022ac:	4b61      	ldr	r3, [pc, #388]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022b2:	0e1b      	lsrs	r3, r3, #24
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	019a      	lsls	r2, r3, #6
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	041b      	lsls	r3, r3, #16
 80022c4:	431a      	orrs	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	061b      	lsls	r3, r3, #24
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	071b      	lsls	r3, r3, #28
 80022d2:	4958      	ldr	r1, [pc, #352]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022ee:	d00a      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d02e      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002300:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002304:	d129      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002306:	4b4b      	ldr	r3, [pc, #300]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002308:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800230c:	0c1b      	lsrs	r3, r3, #16
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002314:	4b47      	ldr	r3, [pc, #284]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800231a:	0f1b      	lsrs	r3, r3, #28
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	019a      	lsls	r2, r3, #6
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	041b      	lsls	r3, r3, #16
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	061b      	lsls	r3, r3, #24
 8002334:	431a      	orrs	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	071b      	lsls	r3, r3, #28
 800233a:	493e      	ldr	r1, [pc, #248]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002342:	4b3c      	ldr	r3, [pc, #240]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002344:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002348:	f023 021f 	bic.w	r2, r3, #31
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002350:	3b01      	subs	r3, #1
 8002352:	4938      	ldr	r1, [pc, #224]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d01d      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002366:	4b33      	ldr	r3, [pc, #204]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002368:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800236c:	0e1b      	lsrs	r3, r3, #24
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002374:	4b2f      	ldr	r3, [pc, #188]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800237a:	0f1b      	lsrs	r3, r3, #28
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	019a      	lsls	r2, r3, #6
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	041b      	lsls	r3, r3, #16
 800238e:	431a      	orrs	r2, r3
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	061b      	lsls	r3, r3, #24
 8002394:	431a      	orrs	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	071b      	lsls	r3, r3, #28
 800239a:	4926      	ldr	r1, [pc, #152]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d011      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	019a      	lsls	r2, r3, #6
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	041b      	lsls	r3, r3, #16
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	061b      	lsls	r3, r3, #24
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	071b      	lsls	r3, r3, #28
 80023ca:	491a      	ldr	r1, [pc, #104]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80023d2:	4b18      	ldr	r3, [pc, #96]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a17      	ldr	r2, [pc, #92]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023de:	f7fe fd0b 	bl	8000df8 <HAL_GetTick>
 80023e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023e4:	e008      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023e6:	f7fe fd07 	bl	8000df8 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b64      	cmp	r3, #100	@ 0x64
 80023f2:	d901      	bls.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e0d8      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	2b01      	cmp	r3, #1
 8002408:	f040 80ce 	bne.w	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800240c:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a08      	ldr	r2, [pc, #32]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002412:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002416:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002418:	f7fe fcee 	bl	8000df8 <HAL_GetTick>
 800241c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800241e:	e00b      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002420:	f7fe fcea 	bl	8000df8 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	@ 0x64
 800242c:	d904      	bls.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e0bb      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002438:	4b5e      	ldr	r3, [pc, #376]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002440:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002444:	d0ec      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002462:	2b00      	cmp	r3, #0
 8002464:	d02e      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246a:	2b00      	cmp	r3, #0
 800246c:	d12a      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800246e:	4b51      	ldr	r3, [pc, #324]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002474:	0c1b      	lsrs	r3, r3, #16
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800247c:	4b4d      	ldr	r3, [pc, #308]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002482:	0f1b      	lsrs	r3, r3, #28
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	019a      	lsls	r2, r3, #6
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	041b      	lsls	r3, r3, #16
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	061b      	lsls	r3, r3, #24
 800249c:	431a      	orrs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	071b      	lsls	r3, r3, #28
 80024a2:	4944      	ldr	r1, [pc, #272]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024aa:	4b42      	ldr	r3, [pc, #264]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024b0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	3b01      	subs	r3, #1
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	493d      	ldr	r1, [pc, #244]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d022      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024d8:	d11d      	bne.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024da:	4b36      	ldr	r3, [pc, #216]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e0:	0e1b      	lsrs	r3, r3, #24
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024e8:	4b32      	ldr	r3, [pc, #200]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ee:	0f1b      	lsrs	r3, r3, #28
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	019a      	lsls	r2, r3, #6
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	041b      	lsls	r3, r3, #16
 8002502:	431a      	orrs	r2, r3
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	061b      	lsls	r3, r3, #24
 8002508:	431a      	orrs	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	071b      	lsls	r3, r3, #28
 800250e:	4929      	ldr	r1, [pc, #164]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d028      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002522:	4b24      	ldr	r3, [pc, #144]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002528:	0e1b      	lsrs	r3, r3, #24
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002530:	4b20      	ldr	r3, [pc, #128]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002536:	0c1b      	lsrs	r3, r3, #16
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	019a      	lsls	r2, r3, #6
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	041b      	lsls	r3, r3, #16
 8002548:	431a      	orrs	r2, r3
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	061b      	lsls	r3, r3, #24
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	071b      	lsls	r3, r3, #28
 8002556:	4917      	ldr	r1, [pc, #92]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800255e:	4b15      	ldr	r3, [pc, #84]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002560:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002564:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	4911      	ldr	r1, [pc, #68]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002574:	4b0f      	ldr	r3, [pc, #60]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0e      	ldr	r2, [pc, #56]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800257a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800257e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002580:	f7fe fc3a 	bl	8000df8 <HAL_GetTick>
 8002584:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002586:	e008      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002588:	f7fe fc36 	bl	8000df8 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	@ 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e007      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800259a:	4b06      	ldr	r3, [pc, #24]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025a6:	d1ef      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3720      	adds	r7, #32
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40023800 	.word	0x40023800

080025b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e049      	b.n	800265e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f841 	bl	8002666 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3304      	adds	r3, #4
 80025f4:	4619      	mov	r1, r3
 80025f6:	4610      	mov	r0, r2
 80025f8:	f000 f9e8 	bl	80029cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b01      	cmp	r3, #1
 800268e:	d001      	beq.n	8002694 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e054      	b.n	800273e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a26      	ldr	r2, [pc, #152]	@ (800274c <HAL_TIM_Base_Start_IT+0xd0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d022      	beq.n	80026fc <HAL_TIM_Base_Start_IT+0x80>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026be:	d01d      	beq.n	80026fc <HAL_TIM_Base_Start_IT+0x80>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a22      	ldr	r2, [pc, #136]	@ (8002750 <HAL_TIM_Base_Start_IT+0xd4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d018      	beq.n	80026fc <HAL_TIM_Base_Start_IT+0x80>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a21      	ldr	r2, [pc, #132]	@ (8002754 <HAL_TIM_Base_Start_IT+0xd8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d013      	beq.n	80026fc <HAL_TIM_Base_Start_IT+0x80>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002758 <HAL_TIM_Base_Start_IT+0xdc>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00e      	beq.n	80026fc <HAL_TIM_Base_Start_IT+0x80>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a1e      	ldr	r2, [pc, #120]	@ (800275c <HAL_TIM_Base_Start_IT+0xe0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d009      	beq.n	80026fc <HAL_TIM_Base_Start_IT+0x80>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002760 <HAL_TIM_Base_Start_IT+0xe4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d004      	beq.n	80026fc <HAL_TIM_Base_Start_IT+0x80>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002764 <HAL_TIM_Base_Start_IT+0xe8>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d115      	bne.n	8002728 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	4b19      	ldr	r3, [pc, #100]	@ (8002768 <HAL_TIM_Base_Start_IT+0xec>)
 8002704:	4013      	ands	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2b06      	cmp	r3, #6
 800270c:	d015      	beq.n	800273a <HAL_TIM_Base_Start_IT+0xbe>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002714:	d011      	beq.n	800273a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0201 	orr.w	r2, r2, #1
 8002724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002726:	e008      	b.n	800273a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	e000      	b.n	800273c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40010000 	.word	0x40010000
 8002750:	40000400 	.word	0x40000400
 8002754:	40000800 	.word	0x40000800
 8002758:	40000c00 	.word	0x40000c00
 800275c:	40010400 	.word	0x40010400
 8002760:	40014000 	.word	0x40014000
 8002764:	40001800 	.word	0x40001800
 8002768:	00010007 	.word	0x00010007

0800276c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d020      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d01b      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0202 	mvn.w	r2, #2
 80027a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f8e9 	bl	800298e <HAL_TIM_IC_CaptureCallback>
 80027bc:	e005      	b.n	80027ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f8db 	bl	800297a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f8ec 	bl	80029a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d020      	beq.n	800281c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01b      	beq.n	800281c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0204 	mvn.w	r2, #4
 80027ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2202      	movs	r2, #2
 80027f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f8c3 	bl	800298e <HAL_TIM_IC_CaptureCallback>
 8002808:	e005      	b.n	8002816 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f8b5 	bl	800297a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f8c6 	bl	80029a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d020      	beq.n	8002868 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01b      	beq.n	8002868 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0208 	mvn.w	r2, #8
 8002838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2204      	movs	r2, #4
 800283e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f89d 	bl	800298e <HAL_TIM_IC_CaptureCallback>
 8002854:	e005      	b.n	8002862 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f88f 	bl	800297a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f8a0 	bl	80029a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b00      	cmp	r3, #0
 8002870:	d020      	beq.n	80028b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b00      	cmp	r3, #0
 800287a:	d01b      	beq.n	80028b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0210 	mvn.w	r2, #16
 8002884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2208      	movs	r2, #8
 800288a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f877 	bl	800298e <HAL_TIM_IC_CaptureCallback>
 80028a0:	e005      	b.n	80028ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f869 	bl	800297a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f87a 	bl	80029a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00c      	beq.n	80028d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d007      	beq.n	80028d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f06f 0201 	mvn.w	r2, #1
 80028d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7fe f8c2 	bl	8000a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d104      	bne.n	80028ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00c      	beq.n	8002906 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80028fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f919 	bl	8002b38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00c      	beq.n	800292a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002916:	2b00      	cmp	r3, #0
 8002918:	d007      	beq.n	800292a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f911 	bl	8002b4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00c      	beq.n	800294e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d007      	beq.n	800294e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f834 	bl	80029b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00c      	beq.n	8002972 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f06f 0220 	mvn.w	r2, #32
 800296a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f8d9 	bl	8002b24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a46      	ldr	r2, [pc, #280]	@ (8002af8 <TIM_Base_SetConfig+0x12c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d013      	beq.n	8002a0c <TIM_Base_SetConfig+0x40>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029ea:	d00f      	beq.n	8002a0c <TIM_Base_SetConfig+0x40>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a43      	ldr	r2, [pc, #268]	@ (8002afc <TIM_Base_SetConfig+0x130>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d00b      	beq.n	8002a0c <TIM_Base_SetConfig+0x40>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a42      	ldr	r2, [pc, #264]	@ (8002b00 <TIM_Base_SetConfig+0x134>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d007      	beq.n	8002a0c <TIM_Base_SetConfig+0x40>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a41      	ldr	r2, [pc, #260]	@ (8002b04 <TIM_Base_SetConfig+0x138>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d003      	beq.n	8002a0c <TIM_Base_SetConfig+0x40>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a40      	ldr	r2, [pc, #256]	@ (8002b08 <TIM_Base_SetConfig+0x13c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d108      	bne.n	8002a1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a35      	ldr	r2, [pc, #212]	@ (8002af8 <TIM_Base_SetConfig+0x12c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d02b      	beq.n	8002a7e <TIM_Base_SetConfig+0xb2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a2c:	d027      	beq.n	8002a7e <TIM_Base_SetConfig+0xb2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a32      	ldr	r2, [pc, #200]	@ (8002afc <TIM_Base_SetConfig+0x130>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d023      	beq.n	8002a7e <TIM_Base_SetConfig+0xb2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a31      	ldr	r2, [pc, #196]	@ (8002b00 <TIM_Base_SetConfig+0x134>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01f      	beq.n	8002a7e <TIM_Base_SetConfig+0xb2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a30      	ldr	r2, [pc, #192]	@ (8002b04 <TIM_Base_SetConfig+0x138>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01b      	beq.n	8002a7e <TIM_Base_SetConfig+0xb2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a2f      	ldr	r2, [pc, #188]	@ (8002b08 <TIM_Base_SetConfig+0x13c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d017      	beq.n	8002a7e <TIM_Base_SetConfig+0xb2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a2e      	ldr	r2, [pc, #184]	@ (8002b0c <TIM_Base_SetConfig+0x140>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <TIM_Base_SetConfig+0xb2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a2d      	ldr	r2, [pc, #180]	@ (8002b10 <TIM_Base_SetConfig+0x144>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00f      	beq.n	8002a7e <TIM_Base_SetConfig+0xb2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a2c      	ldr	r2, [pc, #176]	@ (8002b14 <TIM_Base_SetConfig+0x148>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00b      	beq.n	8002a7e <TIM_Base_SetConfig+0xb2>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a2b      	ldr	r2, [pc, #172]	@ (8002b18 <TIM_Base_SetConfig+0x14c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d007      	beq.n	8002a7e <TIM_Base_SetConfig+0xb2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a2a      	ldr	r2, [pc, #168]	@ (8002b1c <TIM_Base_SetConfig+0x150>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d003      	beq.n	8002a7e <TIM_Base_SetConfig+0xb2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a29      	ldr	r2, [pc, #164]	@ (8002b20 <TIM_Base_SetConfig+0x154>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d108      	bne.n	8002a90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a10      	ldr	r2, [pc, #64]	@ (8002af8 <TIM_Base_SetConfig+0x12c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d003      	beq.n	8002ac4 <TIM_Base_SetConfig+0xf8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a12      	ldr	r2, [pc, #72]	@ (8002b08 <TIM_Base_SetConfig+0x13c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d103      	bne.n	8002acc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d105      	bne.n	8002aea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f023 0201 	bic.w	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	611a      	str	r2, [r3, #16]
  }
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40010000 	.word	0x40010000
 8002afc:	40000400 	.word	0x40000400
 8002b00:	40000800 	.word	0x40000800
 8002b04:	40000c00 	.word	0x40000c00
 8002b08:	40010400 	.word	0x40010400
 8002b0c:	40014000 	.word	0x40014000
 8002b10:	40014400 	.word	0x40014400
 8002b14:	40014800 	.word	0x40014800
 8002b18:	40001800 	.word	0x40001800
 8002b1c:	40001c00 	.word	0x40001c00
 8002b20:	40002000 	.word	0x40002000

08002b24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e040      	b.n	8002bf4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fd ffa6 	bl	8000ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2224      	movs	r2, #36	@ 0x24
 8002b8c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0201 	bic.w	r2, r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 fb16 	bl	80031d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f8af 	bl	8002d10 <UART_SetConfig>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e01b      	b.n	8002bf4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fb95 	bl	800331c <UART_CheckIdleState>
 8002bf2:	4603      	mov	r3, r0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	@ 0x28
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d177      	bne.n	8002d04 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_UART_Transmit+0x24>
 8002c1a:	88fb      	ldrh	r3, [r7, #6]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e070      	b.n	8002d06 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2221      	movs	r2, #33	@ 0x21
 8002c30:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c32:	f7fe f8e1 	bl	8000df8 <HAL_GetTick>
 8002c36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	88fa      	ldrh	r2, [r7, #6]
 8002c3c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	88fa      	ldrh	r2, [r7, #6]
 8002c44:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c50:	d108      	bne.n	8002c64 <HAL_UART_Transmit+0x68>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d104      	bne.n	8002c64 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	e003      	b.n	8002c6c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c6c:	e02f      	b.n	8002cce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2200      	movs	r2, #0
 8002c76:	2180      	movs	r1, #128	@ 0x80
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 fbf7 	bl	800346c <UART_WaitOnFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d004      	beq.n	8002c8e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e03b      	b.n	8002d06 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10b      	bne.n	8002cac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ca2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	e007      	b.n	8002cbc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	781a      	ldrb	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1c9      	bne.n	8002c6e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2140      	movs	r1, #64	@ 0x40
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fbc1 	bl	800346c <UART_WaitOnFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d004      	beq.n	8002cfa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e005      	b.n	8002d06 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e000      	b.n	8002d06 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002d04:	2302      	movs	r3, #2
  }
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3720      	adds	r7, #32
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	4ba6      	ldr	r3, [pc, #664]	@ (8002fd4 <UART_SetConfig+0x2c4>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	6979      	ldr	r1, [r7, #20]
 8002d44:	430b      	orrs	r3, r1
 8002d46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a94      	ldr	r2, [pc, #592]	@ (8002fd8 <UART_SetConfig+0x2c8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d120      	bne.n	8002dce <UART_SetConfig+0xbe>
 8002d8c:	4b93      	ldr	r3, [pc, #588]	@ (8002fdc <UART_SetConfig+0x2cc>)
 8002d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d816      	bhi.n	8002dc8 <UART_SetConfig+0xb8>
 8002d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002da0 <UART_SetConfig+0x90>)
 8002d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da0:	08002db1 	.word	0x08002db1
 8002da4:	08002dbd 	.word	0x08002dbd
 8002da8:	08002db7 	.word	0x08002db7
 8002dac:	08002dc3 	.word	0x08002dc3
 8002db0:	2301      	movs	r3, #1
 8002db2:	77fb      	strb	r3, [r7, #31]
 8002db4:	e150      	b.n	8003058 <UART_SetConfig+0x348>
 8002db6:	2302      	movs	r3, #2
 8002db8:	77fb      	strb	r3, [r7, #31]
 8002dba:	e14d      	b.n	8003058 <UART_SetConfig+0x348>
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	77fb      	strb	r3, [r7, #31]
 8002dc0:	e14a      	b.n	8003058 <UART_SetConfig+0x348>
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	77fb      	strb	r3, [r7, #31]
 8002dc6:	e147      	b.n	8003058 <UART_SetConfig+0x348>
 8002dc8:	2310      	movs	r3, #16
 8002dca:	77fb      	strb	r3, [r7, #31]
 8002dcc:	e144      	b.n	8003058 <UART_SetConfig+0x348>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a83      	ldr	r2, [pc, #524]	@ (8002fe0 <UART_SetConfig+0x2d0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d132      	bne.n	8002e3e <UART_SetConfig+0x12e>
 8002dd8:	4b80      	ldr	r3, [pc, #512]	@ (8002fdc <UART_SetConfig+0x2cc>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	2b0c      	cmp	r3, #12
 8002de4:	d828      	bhi.n	8002e38 <UART_SetConfig+0x128>
 8002de6:	a201      	add	r2, pc, #4	@ (adr r2, 8002dec <UART_SetConfig+0xdc>)
 8002de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dec:	08002e21 	.word	0x08002e21
 8002df0:	08002e39 	.word	0x08002e39
 8002df4:	08002e39 	.word	0x08002e39
 8002df8:	08002e39 	.word	0x08002e39
 8002dfc:	08002e2d 	.word	0x08002e2d
 8002e00:	08002e39 	.word	0x08002e39
 8002e04:	08002e39 	.word	0x08002e39
 8002e08:	08002e39 	.word	0x08002e39
 8002e0c:	08002e27 	.word	0x08002e27
 8002e10:	08002e39 	.word	0x08002e39
 8002e14:	08002e39 	.word	0x08002e39
 8002e18:	08002e39 	.word	0x08002e39
 8002e1c:	08002e33 	.word	0x08002e33
 8002e20:	2300      	movs	r3, #0
 8002e22:	77fb      	strb	r3, [r7, #31]
 8002e24:	e118      	b.n	8003058 <UART_SetConfig+0x348>
 8002e26:	2302      	movs	r3, #2
 8002e28:	77fb      	strb	r3, [r7, #31]
 8002e2a:	e115      	b.n	8003058 <UART_SetConfig+0x348>
 8002e2c:	2304      	movs	r3, #4
 8002e2e:	77fb      	strb	r3, [r7, #31]
 8002e30:	e112      	b.n	8003058 <UART_SetConfig+0x348>
 8002e32:	2308      	movs	r3, #8
 8002e34:	77fb      	strb	r3, [r7, #31]
 8002e36:	e10f      	b.n	8003058 <UART_SetConfig+0x348>
 8002e38:	2310      	movs	r3, #16
 8002e3a:	77fb      	strb	r3, [r7, #31]
 8002e3c:	e10c      	b.n	8003058 <UART_SetConfig+0x348>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a68      	ldr	r2, [pc, #416]	@ (8002fe4 <UART_SetConfig+0x2d4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d120      	bne.n	8002e8a <UART_SetConfig+0x17a>
 8002e48:	4b64      	ldr	r3, [pc, #400]	@ (8002fdc <UART_SetConfig+0x2cc>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e52:	2b30      	cmp	r3, #48	@ 0x30
 8002e54:	d013      	beq.n	8002e7e <UART_SetConfig+0x16e>
 8002e56:	2b30      	cmp	r3, #48	@ 0x30
 8002e58:	d814      	bhi.n	8002e84 <UART_SetConfig+0x174>
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d009      	beq.n	8002e72 <UART_SetConfig+0x162>
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	d810      	bhi.n	8002e84 <UART_SetConfig+0x174>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <UART_SetConfig+0x15c>
 8002e66:	2b10      	cmp	r3, #16
 8002e68:	d006      	beq.n	8002e78 <UART_SetConfig+0x168>
 8002e6a:	e00b      	b.n	8002e84 <UART_SetConfig+0x174>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	77fb      	strb	r3, [r7, #31]
 8002e70:	e0f2      	b.n	8003058 <UART_SetConfig+0x348>
 8002e72:	2302      	movs	r3, #2
 8002e74:	77fb      	strb	r3, [r7, #31]
 8002e76:	e0ef      	b.n	8003058 <UART_SetConfig+0x348>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	77fb      	strb	r3, [r7, #31]
 8002e7c:	e0ec      	b.n	8003058 <UART_SetConfig+0x348>
 8002e7e:	2308      	movs	r3, #8
 8002e80:	77fb      	strb	r3, [r7, #31]
 8002e82:	e0e9      	b.n	8003058 <UART_SetConfig+0x348>
 8002e84:	2310      	movs	r3, #16
 8002e86:	77fb      	strb	r3, [r7, #31]
 8002e88:	e0e6      	b.n	8003058 <UART_SetConfig+0x348>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a56      	ldr	r2, [pc, #344]	@ (8002fe8 <UART_SetConfig+0x2d8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d120      	bne.n	8002ed6 <UART_SetConfig+0x1c6>
 8002e94:	4b51      	ldr	r3, [pc, #324]	@ (8002fdc <UART_SetConfig+0x2cc>)
 8002e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002e9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ea0:	d013      	beq.n	8002eca <UART_SetConfig+0x1ba>
 8002ea2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ea4:	d814      	bhi.n	8002ed0 <UART_SetConfig+0x1c0>
 8002ea6:	2b80      	cmp	r3, #128	@ 0x80
 8002ea8:	d009      	beq.n	8002ebe <UART_SetConfig+0x1ae>
 8002eaa:	2b80      	cmp	r3, #128	@ 0x80
 8002eac:	d810      	bhi.n	8002ed0 <UART_SetConfig+0x1c0>
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <UART_SetConfig+0x1a8>
 8002eb2:	2b40      	cmp	r3, #64	@ 0x40
 8002eb4:	d006      	beq.n	8002ec4 <UART_SetConfig+0x1b4>
 8002eb6:	e00b      	b.n	8002ed0 <UART_SetConfig+0x1c0>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	77fb      	strb	r3, [r7, #31]
 8002ebc:	e0cc      	b.n	8003058 <UART_SetConfig+0x348>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	77fb      	strb	r3, [r7, #31]
 8002ec2:	e0c9      	b.n	8003058 <UART_SetConfig+0x348>
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	77fb      	strb	r3, [r7, #31]
 8002ec8:	e0c6      	b.n	8003058 <UART_SetConfig+0x348>
 8002eca:	2308      	movs	r3, #8
 8002ecc:	77fb      	strb	r3, [r7, #31]
 8002ece:	e0c3      	b.n	8003058 <UART_SetConfig+0x348>
 8002ed0:	2310      	movs	r3, #16
 8002ed2:	77fb      	strb	r3, [r7, #31]
 8002ed4:	e0c0      	b.n	8003058 <UART_SetConfig+0x348>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a44      	ldr	r2, [pc, #272]	@ (8002fec <UART_SetConfig+0x2dc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d125      	bne.n	8002f2c <UART_SetConfig+0x21c>
 8002ee0:	4b3e      	ldr	r3, [pc, #248]	@ (8002fdc <UART_SetConfig+0x2cc>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002eee:	d017      	beq.n	8002f20 <UART_SetConfig+0x210>
 8002ef0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ef4:	d817      	bhi.n	8002f26 <UART_SetConfig+0x216>
 8002ef6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002efa:	d00b      	beq.n	8002f14 <UART_SetConfig+0x204>
 8002efc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f00:	d811      	bhi.n	8002f26 <UART_SetConfig+0x216>
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <UART_SetConfig+0x1fe>
 8002f06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f0a:	d006      	beq.n	8002f1a <UART_SetConfig+0x20a>
 8002f0c:	e00b      	b.n	8002f26 <UART_SetConfig+0x216>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	77fb      	strb	r3, [r7, #31]
 8002f12:	e0a1      	b.n	8003058 <UART_SetConfig+0x348>
 8002f14:	2302      	movs	r3, #2
 8002f16:	77fb      	strb	r3, [r7, #31]
 8002f18:	e09e      	b.n	8003058 <UART_SetConfig+0x348>
 8002f1a:	2304      	movs	r3, #4
 8002f1c:	77fb      	strb	r3, [r7, #31]
 8002f1e:	e09b      	b.n	8003058 <UART_SetConfig+0x348>
 8002f20:	2308      	movs	r3, #8
 8002f22:	77fb      	strb	r3, [r7, #31]
 8002f24:	e098      	b.n	8003058 <UART_SetConfig+0x348>
 8002f26:	2310      	movs	r3, #16
 8002f28:	77fb      	strb	r3, [r7, #31]
 8002f2a:	e095      	b.n	8003058 <UART_SetConfig+0x348>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a2f      	ldr	r2, [pc, #188]	@ (8002ff0 <UART_SetConfig+0x2e0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d125      	bne.n	8002f82 <UART_SetConfig+0x272>
 8002f36:	4b29      	ldr	r3, [pc, #164]	@ (8002fdc <UART_SetConfig+0x2cc>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f44:	d017      	beq.n	8002f76 <UART_SetConfig+0x266>
 8002f46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f4a:	d817      	bhi.n	8002f7c <UART_SetConfig+0x26c>
 8002f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f50:	d00b      	beq.n	8002f6a <UART_SetConfig+0x25a>
 8002f52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f56:	d811      	bhi.n	8002f7c <UART_SetConfig+0x26c>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <UART_SetConfig+0x254>
 8002f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f60:	d006      	beq.n	8002f70 <UART_SetConfig+0x260>
 8002f62:	e00b      	b.n	8002f7c <UART_SetConfig+0x26c>
 8002f64:	2301      	movs	r3, #1
 8002f66:	77fb      	strb	r3, [r7, #31]
 8002f68:	e076      	b.n	8003058 <UART_SetConfig+0x348>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	77fb      	strb	r3, [r7, #31]
 8002f6e:	e073      	b.n	8003058 <UART_SetConfig+0x348>
 8002f70:	2304      	movs	r3, #4
 8002f72:	77fb      	strb	r3, [r7, #31]
 8002f74:	e070      	b.n	8003058 <UART_SetConfig+0x348>
 8002f76:	2308      	movs	r3, #8
 8002f78:	77fb      	strb	r3, [r7, #31]
 8002f7a:	e06d      	b.n	8003058 <UART_SetConfig+0x348>
 8002f7c:	2310      	movs	r3, #16
 8002f7e:	77fb      	strb	r3, [r7, #31]
 8002f80:	e06a      	b.n	8003058 <UART_SetConfig+0x348>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff4 <UART_SetConfig+0x2e4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d138      	bne.n	8002ffe <UART_SetConfig+0x2ee>
 8002f8c:	4b13      	ldr	r3, [pc, #76]	@ (8002fdc <UART_SetConfig+0x2cc>)
 8002f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f92:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002f96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f9a:	d017      	beq.n	8002fcc <UART_SetConfig+0x2bc>
 8002f9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002fa0:	d82a      	bhi.n	8002ff8 <UART_SetConfig+0x2e8>
 8002fa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fa6:	d00b      	beq.n	8002fc0 <UART_SetConfig+0x2b0>
 8002fa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fac:	d824      	bhi.n	8002ff8 <UART_SetConfig+0x2e8>
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <UART_SetConfig+0x2aa>
 8002fb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fb6:	d006      	beq.n	8002fc6 <UART_SetConfig+0x2b6>
 8002fb8:	e01e      	b.n	8002ff8 <UART_SetConfig+0x2e8>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	77fb      	strb	r3, [r7, #31]
 8002fbe:	e04b      	b.n	8003058 <UART_SetConfig+0x348>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	77fb      	strb	r3, [r7, #31]
 8002fc4:	e048      	b.n	8003058 <UART_SetConfig+0x348>
 8002fc6:	2304      	movs	r3, #4
 8002fc8:	77fb      	strb	r3, [r7, #31]
 8002fca:	e045      	b.n	8003058 <UART_SetConfig+0x348>
 8002fcc:	2308      	movs	r3, #8
 8002fce:	77fb      	strb	r3, [r7, #31]
 8002fd0:	e042      	b.n	8003058 <UART_SetConfig+0x348>
 8002fd2:	bf00      	nop
 8002fd4:	efff69f3 	.word	0xefff69f3
 8002fd8:	40011000 	.word	0x40011000
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	40004400 	.word	0x40004400
 8002fe4:	40004800 	.word	0x40004800
 8002fe8:	40004c00 	.word	0x40004c00
 8002fec:	40005000 	.word	0x40005000
 8002ff0:	40011400 	.word	0x40011400
 8002ff4:	40007800 	.word	0x40007800
 8002ff8:	2310      	movs	r3, #16
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e02c      	b.n	8003058 <UART_SetConfig+0x348>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a72      	ldr	r2, [pc, #456]	@ (80031cc <UART_SetConfig+0x4bc>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d125      	bne.n	8003054 <UART_SetConfig+0x344>
 8003008:	4b71      	ldr	r3, [pc, #452]	@ (80031d0 <UART_SetConfig+0x4c0>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800300e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003012:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003016:	d017      	beq.n	8003048 <UART_SetConfig+0x338>
 8003018:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800301c:	d817      	bhi.n	800304e <UART_SetConfig+0x33e>
 800301e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003022:	d00b      	beq.n	800303c <UART_SetConfig+0x32c>
 8003024:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003028:	d811      	bhi.n	800304e <UART_SetConfig+0x33e>
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <UART_SetConfig+0x326>
 800302e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003032:	d006      	beq.n	8003042 <UART_SetConfig+0x332>
 8003034:	e00b      	b.n	800304e <UART_SetConfig+0x33e>
 8003036:	2300      	movs	r3, #0
 8003038:	77fb      	strb	r3, [r7, #31]
 800303a:	e00d      	b.n	8003058 <UART_SetConfig+0x348>
 800303c:	2302      	movs	r3, #2
 800303e:	77fb      	strb	r3, [r7, #31]
 8003040:	e00a      	b.n	8003058 <UART_SetConfig+0x348>
 8003042:	2304      	movs	r3, #4
 8003044:	77fb      	strb	r3, [r7, #31]
 8003046:	e007      	b.n	8003058 <UART_SetConfig+0x348>
 8003048:	2308      	movs	r3, #8
 800304a:	77fb      	strb	r3, [r7, #31]
 800304c:	e004      	b.n	8003058 <UART_SetConfig+0x348>
 800304e:	2310      	movs	r3, #16
 8003050:	77fb      	strb	r3, [r7, #31]
 8003052:	e001      	b.n	8003058 <UART_SetConfig+0x348>
 8003054:	2310      	movs	r3, #16
 8003056:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003060:	d15b      	bne.n	800311a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003062:	7ffb      	ldrb	r3, [r7, #31]
 8003064:	2b08      	cmp	r3, #8
 8003066:	d828      	bhi.n	80030ba <UART_SetConfig+0x3aa>
 8003068:	a201      	add	r2, pc, #4	@ (adr r2, 8003070 <UART_SetConfig+0x360>)
 800306a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306e:	bf00      	nop
 8003070:	08003095 	.word	0x08003095
 8003074:	0800309d 	.word	0x0800309d
 8003078:	080030a5 	.word	0x080030a5
 800307c:	080030bb 	.word	0x080030bb
 8003080:	080030ab 	.word	0x080030ab
 8003084:	080030bb 	.word	0x080030bb
 8003088:	080030bb 	.word	0x080030bb
 800308c:	080030bb 	.word	0x080030bb
 8003090:	080030b3 	.word	0x080030b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003094:	f7fe fe0e 	bl	8001cb4 <HAL_RCC_GetPCLK1Freq>
 8003098:	61b8      	str	r0, [r7, #24]
        break;
 800309a:	e013      	b.n	80030c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800309c:	f7fe fe1e 	bl	8001cdc <HAL_RCC_GetPCLK2Freq>
 80030a0:	61b8      	str	r0, [r7, #24]
        break;
 80030a2:	e00f      	b.n	80030c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030a4:	4b4b      	ldr	r3, [pc, #300]	@ (80031d4 <UART_SetConfig+0x4c4>)
 80030a6:	61bb      	str	r3, [r7, #24]
        break;
 80030a8:	e00c      	b.n	80030c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030aa:	f7fe fcf3 	bl	8001a94 <HAL_RCC_GetSysClockFreq>
 80030ae:	61b8      	str	r0, [r7, #24]
        break;
 80030b0:	e008      	b.n	80030c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030b6:	61bb      	str	r3, [r7, #24]
        break;
 80030b8:	e004      	b.n	80030c4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	77bb      	strb	r3, [r7, #30]
        break;
 80030c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d074      	beq.n	80031b4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	005a      	lsls	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	085b      	lsrs	r3, r3, #1
 80030d4:	441a      	add	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	fbb2 f3f3 	udiv	r3, r2, r3
 80030de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	2b0f      	cmp	r3, #15
 80030e4:	d916      	bls.n	8003114 <UART_SetConfig+0x404>
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ec:	d212      	bcs.n	8003114 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	f023 030f 	bic.w	r3, r3, #15
 80030f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	085b      	lsrs	r3, r3, #1
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	b29a      	uxth	r2, r3
 8003104:	89fb      	ldrh	r3, [r7, #14]
 8003106:	4313      	orrs	r3, r2
 8003108:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	89fa      	ldrh	r2, [r7, #14]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	e04f      	b.n	80031b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	77bb      	strb	r3, [r7, #30]
 8003118:	e04c      	b.n	80031b4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800311a:	7ffb      	ldrb	r3, [r7, #31]
 800311c:	2b08      	cmp	r3, #8
 800311e:	d828      	bhi.n	8003172 <UART_SetConfig+0x462>
 8003120:	a201      	add	r2, pc, #4	@ (adr r2, 8003128 <UART_SetConfig+0x418>)
 8003122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003126:	bf00      	nop
 8003128:	0800314d 	.word	0x0800314d
 800312c:	08003155 	.word	0x08003155
 8003130:	0800315d 	.word	0x0800315d
 8003134:	08003173 	.word	0x08003173
 8003138:	08003163 	.word	0x08003163
 800313c:	08003173 	.word	0x08003173
 8003140:	08003173 	.word	0x08003173
 8003144:	08003173 	.word	0x08003173
 8003148:	0800316b 	.word	0x0800316b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800314c:	f7fe fdb2 	bl	8001cb4 <HAL_RCC_GetPCLK1Freq>
 8003150:	61b8      	str	r0, [r7, #24]
        break;
 8003152:	e013      	b.n	800317c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003154:	f7fe fdc2 	bl	8001cdc <HAL_RCC_GetPCLK2Freq>
 8003158:	61b8      	str	r0, [r7, #24]
        break;
 800315a:	e00f      	b.n	800317c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800315c:	4b1d      	ldr	r3, [pc, #116]	@ (80031d4 <UART_SetConfig+0x4c4>)
 800315e:	61bb      	str	r3, [r7, #24]
        break;
 8003160:	e00c      	b.n	800317c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003162:	f7fe fc97 	bl	8001a94 <HAL_RCC_GetSysClockFreq>
 8003166:	61b8      	str	r0, [r7, #24]
        break;
 8003168:	e008      	b.n	800317c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800316a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800316e:	61bb      	str	r3, [r7, #24]
        break;
 8003170:	e004      	b.n	800317c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	77bb      	strb	r3, [r7, #30]
        break;
 800317a:	bf00      	nop
    }

    if (pclk != 0U)
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d018      	beq.n	80031b4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	085a      	lsrs	r2, r3, #1
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	441a      	add	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	fbb2 f3f3 	udiv	r3, r2, r3
 8003194:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b0f      	cmp	r3, #15
 800319a:	d909      	bls.n	80031b0 <UART_SetConfig+0x4a0>
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a2:	d205      	bcs.n	80031b0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60da      	str	r2, [r3, #12]
 80031ae:	e001      	b.n	80031b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80031c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40007c00 	.word	0x40007c00
 80031d0:	40023800 	.word	0x40023800
 80031d4:	00f42400 	.word	0x00f42400

080031d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00a      	beq.n	8003202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01a      	beq.n	80032ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032d6:	d10a      	bne.n	80032ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	605a      	str	r2, [r3, #4]
  }
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b098      	sub	sp, #96	@ 0x60
 8003320:	af02      	add	r7, sp, #8
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800332c:	f7fd fd64 	bl	8000df8 <HAL_GetTick>
 8003330:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b08      	cmp	r3, #8
 800333e:	d12e      	bne.n	800339e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003340:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003348:	2200      	movs	r2, #0
 800334a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f88c 	bl	800346c <UART_WaitOnFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d021      	beq.n	800339e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003362:	e853 3f00 	ldrex	r3, [r3]
 8003366:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800336e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003378:	647b      	str	r3, [r7, #68]	@ 0x44
 800337a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800337e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003380:	e841 2300 	strex	r3, r2, [r1]
 8003384:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e6      	bne.n	800335a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e062      	b.n	8003464 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d149      	bne.n	8003440 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033b4:	2200      	movs	r2, #0
 80033b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f856 	bl	800346c <UART_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d03c      	beq.n	8003440 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	e853 3f00 	ldrex	r3, [r3]
 80033d2:	623b      	str	r3, [r7, #32]
   return(result);
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80033e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033ec:	e841 2300 	strex	r3, r2, [r1]
 80033f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1e6      	bne.n	80033c6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3308      	adds	r3, #8
 80033fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	e853 3f00 	ldrex	r3, [r3]
 8003406:	60fb      	str	r3, [r7, #12]
   return(result);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0301 	bic.w	r3, r3, #1
 800340e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3308      	adds	r3, #8
 8003416:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003418:	61fa      	str	r2, [r7, #28]
 800341a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341c:	69b9      	ldr	r1, [r7, #24]
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	e841 2300 	strex	r3, r2, [r1]
 8003424:	617b      	str	r3, [r7, #20]
   return(result);
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e5      	bne.n	80033f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e011      	b.n	8003464 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2220      	movs	r2, #32
 800344a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3758      	adds	r7, #88	@ 0x58
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	4613      	mov	r3, r2
 800347a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800347c:	e04f      	b.n	800351e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003484:	d04b      	beq.n	800351e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003486:	f7fd fcb7 	bl	8000df8 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	429a      	cmp	r2, r3
 8003494:	d302      	bcc.n	800349c <UART_WaitOnFlagUntilTimeout+0x30>
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e04e      	b.n	800353e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d037      	beq.n	800351e <UART_WaitOnFlagUntilTimeout+0xb2>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b80      	cmp	r3, #128	@ 0x80
 80034b2:	d034      	beq.n	800351e <UART_WaitOnFlagUntilTimeout+0xb2>
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b40      	cmp	r3, #64	@ 0x40
 80034b8:	d031      	beq.n	800351e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d110      	bne.n	80034ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2208      	movs	r2, #8
 80034ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f838 	bl	8003546 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2208      	movs	r2, #8
 80034da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e029      	b.n	800353e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034f8:	d111      	bne.n	800351e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003502:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 f81e 	bl	8003546 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2220      	movs	r2, #32
 800350e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e00f      	b.n	800353e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4013      	ands	r3, r2
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	429a      	cmp	r2, r3
 800352c:	bf0c      	ite	eq
 800352e:	2301      	moveq	r3, #1
 8003530:	2300      	movne	r3, #0
 8003532:	b2db      	uxtb	r3, r3
 8003534:	461a      	mov	r2, r3
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	429a      	cmp	r2, r3
 800353a:	d0a0      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003546:	b480      	push	{r7}
 8003548:	b095      	sub	sp, #84	@ 0x54
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003556:	e853 3f00 	ldrex	r3, [r3]
 800355a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800355c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800356c:	643b      	str	r3, [r7, #64]	@ 0x40
 800356e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003570:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003572:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003574:	e841 2300 	strex	r3, r2, [r1]
 8003578:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800357a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e6      	bne.n	800354e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3308      	adds	r3, #8
 8003586:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	e853 3f00 	ldrex	r3, [r3]
 800358e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3308      	adds	r3, #8
 800359e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035a8:	e841 2300 	strex	r3, r2, [r1]
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e5      	bne.n	8003580 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d118      	bne.n	80035ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	e853 3f00 	ldrex	r3, [r3]
 80035c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f023 0310 	bic.w	r3, r3, #16
 80035d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035de:	6979      	ldr	r1, [r7, #20]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	e841 2300 	strex	r3, r2, [r1]
 80035e6:	613b      	str	r3, [r7, #16]
   return(result);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1e6      	bne.n	80035bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003602:	bf00      	nop
 8003604:	3754      	adds	r7, #84	@ 0x54
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f103 0208 	add.w	r2, r3, #8
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f04f 32ff 	mov.w	r2, #4294967295
 8003626:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f103 0208 	add.w	r2, r3, #8
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f103 0208 	add.w	r2, r3, #8
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367e:	d103      	bne.n	8003688 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	e00c      	b.n	80036a2 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3308      	adds	r3, #8
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	e002      	b.n	8003696 <vListInsert+0x2e>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d2f6      	bcs.n	8003690 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80036ce:	bf00      	nop
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6892      	ldr	r2, [r2, #8]
 80036f0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6852      	ldr	r2, [r2, #4]
 80036fa:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	429a      	cmp	r2, r3
 8003704:	d103      	bne.n	800370e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	1e5a      	subs	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800373a:	2301      	movs	r3, #1
 800373c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10d      	bne.n	8003764 <xQueueGenericReset+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8003748:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800374c:	b672      	cpsid	i
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	b662      	cpsie	i
 800375c:	60fb      	str	r3, [r7, #12]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800375e:	bf00      	nop
 8003760:	bf00      	nop
 8003762:	e7fd      	b.n	8003760 <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d05d      	beq.n	8003826 <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800376e:	2b00      	cmp	r3, #0
 8003770:	d059      	beq.n	8003826 <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377a:	2100      	movs	r1, #0
 800377c:	fba3 2302 	umull	r2, r3, r3, r2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d000      	beq.n	8003786 <xQueueGenericReset+0x56>
 8003784:	2101      	movs	r1, #1
 8003786:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003788:	2b00      	cmp	r3, #0
 800378a:	d14c      	bne.n	8003826 <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 800378c:	f002 f9fa 	bl	8005b84 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003798:	6939      	ldr	r1, [r7, #16]
 800379a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	441a      	add	r2, r3
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	2200      	movs	r2, #0
 80037aa:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037bc:	3b01      	subs	r3, #1
 80037be:	6939      	ldr	r1, [r7, #16]
 80037c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80037c2:	fb01 f303 	mul.w	r3, r1, r3
 80037c6:	441a      	add	r2, r3
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	22ff      	movs	r2, #255	@ 0xff
 80037d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	22ff      	movs	r2, #255	@ 0xff
 80037d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d114      	bne.n	800380c <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01a      	beq.n	8003820 <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	3310      	adds	r3, #16
 80037ee:	4618      	mov	r0, r3
 80037f0:	f001 fa4c 	bl	8004c8c <xTaskRemoveFromEventList>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d012      	beq.n	8003820 <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80037fa:	4b17      	ldr	r3, [pc, #92]	@ (8003858 <xQueueGenericReset+0x128>)
 80037fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	e009      	b.n	8003820 <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	3310      	adds	r3, #16
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff fefc 	bl	800360e <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	3324      	adds	r3, #36	@ 0x24
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fef7 	bl	800360e <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003820:	f002 f9e6 	bl	8005bf0 <vPortExitCritical>
 8003824:	e001      	b.n	800382a <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10d      	bne.n	800384c <xQueueGenericReset+0x11c>
    __asm volatile
 8003830:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003834:	b672      	cpsid	i
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	b662      	cpsie	i
 8003844:	60bb      	str	r3, [r7, #8]
}
 8003846:	bf00      	nop
 8003848:	bf00      	nop
 800384a:	e7fd      	b.n	8003848 <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 800384c:	697b      	ldr	r3, [r7, #20]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	e000ed04 	.word	0xe000ed04

0800385c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	@ 0x28
 8003860:	af02      	add	r7, sp, #8
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	4613      	mov	r3, r2
 8003868:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d02e      	beq.n	80038d2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003874:	2100      	movs	r1, #0
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	fba3 2302 	umull	r2, r3, r3, r2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d000      	beq.n	8003884 <xQueueGenericCreate+0x28>
 8003882:	2101      	movs	r1, #1
 8003884:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003886:	2b00      	cmp	r3, #0
 8003888:	d123      	bne.n	80038d2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003892:	f113 0f55 	cmn.w	r3, #85	@ 0x55
 8003896:	d81c      	bhi.n	80038d2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	fb02 f303 	mul.w	r3, r2, r3
 80038a0:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	3354      	adds	r3, #84	@ 0x54
 80038a6:	4618      	mov	r0, r3
 80038a8:	f002 fa5a 	bl	8005d60 <pvPortMalloc>
 80038ac:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d01f      	beq.n	80038f4 <xQueueGenericCreate+0x98>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	3354      	adds	r3, #84	@ 0x54
 80038bc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038be:	79fa      	ldrb	r2, [r7, #7]
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	4613      	mov	r3, r2
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	68b9      	ldr	r1, [r7, #8]
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f817 	bl	80038fe <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80038d0:	e010      	b.n	80038f4 <xQueueGenericCreate+0x98>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10d      	bne.n	80038f4 <xQueueGenericCreate+0x98>
    __asm volatile
 80038d8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80038dc:	b672      	cpsid	i
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	b662      	cpsie	i
 80038ec:	613b      	str	r3, [r7, #16]
}
 80038ee:	bf00      	nop
 80038f0:	bf00      	nop
 80038f2:	e7fd      	b.n	80038f0 <xQueueGenericCreate+0x94>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 80038f4:	69fb      	ldr	r3, [r7, #28]
    }
 80038f6:	4618      	mov	r0, r3
 80038f8:	3720      	adds	r7, #32
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d103      	bne.n	800391a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	e002      	b.n	8003920 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800392c:	2101      	movs	r1, #1
 800392e:	69b8      	ldr	r0, [r7, #24]
 8003930:	f7ff fefe 	bl	8003730 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
    {
        pxNewQueue->pxQueueSetContainer = NULL;
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2200      	movs	r2, #0
 8003940:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08e      	sub	sp, #56	@ 0x38
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800395a:	2300      	movs	r3, #0
 800395c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8003962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10d      	bne.n	8003984 <xQueueGenericSend+0x38>
    __asm volatile
 8003968:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800396c:	b672      	cpsid	i
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	b662      	cpsie	i
 800397c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800397e:	bf00      	nop
 8003980:	bf00      	nop
 8003982:	e7fd      	b.n	8003980 <xQueueGenericSend+0x34>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d103      	bne.n	8003992 <xQueueGenericSend+0x46>
 800398a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <xQueueGenericSend+0x4a>
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <xQueueGenericSend+0x4c>
 8003996:	2300      	movs	r3, #0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10d      	bne.n	80039b8 <xQueueGenericSend+0x6c>
    __asm volatile
 800399c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80039a0:	b672      	cpsid	i
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	b662      	cpsie	i
 80039b0:	623b      	str	r3, [r7, #32]
}
 80039b2:	bf00      	nop
 80039b4:	bf00      	nop
 80039b6:	e7fd      	b.n	80039b4 <xQueueGenericSend+0x68>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d103      	bne.n	80039c6 <xQueueGenericSend+0x7a>
 80039be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <xQueueGenericSend+0x7e>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <xQueueGenericSend+0x80>
 80039ca:	2300      	movs	r3, #0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10d      	bne.n	80039ec <xQueueGenericSend+0xa0>
    __asm volatile
 80039d0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80039d4:	b672      	cpsid	i
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	b662      	cpsie	i
 80039e4:	61fb      	str	r3, [r7, #28]
}
 80039e6:	bf00      	nop
 80039e8:	bf00      	nop
 80039ea:	e7fd      	b.n	80039e8 <xQueueGenericSend+0x9c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039ec:	f001 fb6a 	bl	80050c4 <xTaskGetSchedulerState>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d102      	bne.n	80039fc <xQueueGenericSend+0xb0>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <xQueueGenericSend+0xb4>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <xQueueGenericSend+0xb6>
 8003a00:	2300      	movs	r3, #0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10d      	bne.n	8003a22 <xQueueGenericSend+0xd6>
    __asm volatile
 8003a06:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003a0a:	b672      	cpsid	i
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	b662      	cpsie	i
 8003a1a:	61bb      	str	r3, [r7, #24]
}
 8003a1c:	bf00      	nop
 8003a1e:	bf00      	nop
 8003a20:	e7fd      	b.n	8003a1e <xQueueGenericSend+0xd2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003a22:	f002 f8af 	bl	8005b84 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <xQueueGenericSend+0xec>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d145      	bne.n	8003ac4 <xQueueGenericSend+0x178>
            {
                traceQUEUE_SEND( pxQueue );

                #if ( configUSE_QUEUE_SETS == 1 )
                {
                    const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	68b9      	ldr	r1, [r7, #8]
 8003a42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a44:	f000 f990 	bl	8003d68 <prvCopyDataToQueue>
 8003a48:	62b8      	str	r0, [r7, #40]	@ 0x28

                    if( pxQueue->pxQueueSetContainer != NULL )
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d014      	beq.n	8003a7c <xQueueGenericSend+0x130>
                    {
                        if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d102      	bne.n	8003a5e <xQueueGenericSend+0x112>
 8003a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d12e      	bne.n	8003abc <xQueueGenericSend+0x170>
                            /* Do not notify the queue set as an existing item
                             * was overwritten in the queue so the number of items
                             * in the queue has not changed. */
                            mtCOVERAGE_TEST_MARKER();
                        }
                        else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8003a5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a60:	f000 fb26 	bl	80040b0 <prvNotifyQueueSetContainer>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d028      	beq.n	8003abc <xQueueGenericSend+0x170>
                        {
                            /* The queue is a member of a queue set, and posting
                             * to the queue set caused a higher priority task to
                             * unblock. A context switch is required. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b94 <xQueueGenericSend+0x248>)
 8003a6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	e01f      	b.n	8003abc <xQueueGenericSend+0x170>
                    }
                    else
                    {
                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d010      	beq.n	8003aa6 <xQueueGenericSend+0x15a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a86:	3324      	adds	r3, #36	@ 0x24
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f001 f8ff 	bl	8004c8c <xTaskRemoveFromEventList>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d013      	beq.n	8003abc <xQueueGenericSend+0x170>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to
                                 * do this from within the critical section - the
                                 * kernel takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003a94:	4b3f      	ldr	r3, [pc, #252]	@ (8003b94 <xQueueGenericSend+0x248>)
 8003a96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	e00a      	b.n	8003abc <xQueueGenericSend+0x170>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d007      	beq.n	8003abc <xQueueGenericSend+0x170>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes
                             * and the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003aac:	4b39      	ldr	r3, [pc, #228]	@ (8003b94 <xQueueGenericSend+0x248>)
 8003aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003abc:	f002 f898 	bl	8005bf0 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e063      	b.n	8003b8c <xQueueGenericSend+0x240>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d103      	bne.n	8003ad2 <xQueueGenericSend+0x186>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003aca:	f002 f891 	bl	8005bf0 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e05c      	b.n	8003b8c <xQueueGenericSend+0x240>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d106      	bne.n	8003ae6 <xQueueGenericSend+0x19a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003ad8:	f107 0310 	add.w	r3, r7, #16
 8003adc:	4618      	mov	r0, r3
 8003ade:	f001 f9b1 	bl	8004e44 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003ae6:	f002 f883 	bl	8005bf0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003aea:	f000 fdaf 	bl	800464c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003aee:	f002 f849 	bl	8005b84 <vPortEnterCritical>
 8003af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003af8:	b25b      	sxtb	r3, r3
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afe:	d103      	bne.n	8003b08 <xQueueGenericSend+0x1bc>
 8003b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b0e:	b25b      	sxtb	r3, r3
 8003b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b14:	d103      	bne.n	8003b1e <xQueueGenericSend+0x1d2>
 8003b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b1e:	f002 f867 	bl	8005bf0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b22:	1d3a      	adds	r2, r7, #4
 8003b24:	f107 0310 	add.w	r3, r7, #16
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f001 f9a0 	bl	8004e70 <xTaskCheckForTimeOut>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d124      	bne.n	8003b80 <xQueueGenericSend+0x234>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b38:	f000 fa1b 	bl	8003f72 <prvIsQueueFull>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d018      	beq.n	8003b74 <xQueueGenericSend+0x228>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b44:	3310      	adds	r3, #16
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	4611      	mov	r1, r2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f001 f82e 	bl	8004bac <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003b50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b52:	f000 f999 	bl	8003e88 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003b56:	f000 fd87 	bl	8004668 <xTaskResumeAll>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f47f af60 	bne.w	8003a22 <xQueueGenericSend+0xd6>
                {
                    taskYIELD_WITHIN_API();
 8003b62:	4b0c      	ldr	r3, [pc, #48]	@ (8003b94 <xQueueGenericSend+0x248>)
 8003b64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	e756      	b.n	8003a22 <xQueueGenericSend+0xd6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003b74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b76:	f000 f987 	bl	8003e88 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003b7a:	f000 fd75 	bl	8004668 <xTaskResumeAll>
 8003b7e:	e750      	b.n	8003a22 <xQueueGenericSend+0xd6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003b80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b82:	f000 f981 	bl	8003e88 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003b86:	f000 fd6f 	bl	8004668 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8003b8a:	2300      	movs	r3, #0
        }
    }
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3738      	adds	r7, #56	@ 0x38
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	e000ed04 	.word	0xe000ed04

08003b98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08c      	sub	sp, #48	@ 0x30
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10d      	bne.n	8003bce <xQueueReceive+0x36>
    __asm volatile
 8003bb2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003bb6:	b672      	cpsid	i
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	b662      	cpsie	i
 8003bc6:	623b      	str	r3, [r7, #32]
}
 8003bc8:	bf00      	nop
 8003bca:	bf00      	nop
 8003bcc:	e7fd      	b.n	8003bca <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d103      	bne.n	8003bdc <xQueueReceive+0x44>
 8003bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <xQueueReceive+0x48>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <xQueueReceive+0x4a>
 8003be0:	2300      	movs	r3, #0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10d      	bne.n	8003c02 <xQueueReceive+0x6a>
    __asm volatile
 8003be6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003bea:	b672      	cpsid	i
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	b662      	cpsie	i
 8003bfa:	61fb      	str	r3, [r7, #28]
}
 8003bfc:	bf00      	nop
 8003bfe:	bf00      	nop
 8003c00:	e7fd      	b.n	8003bfe <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c02:	f001 fa5f 	bl	80050c4 <xTaskGetSchedulerState>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d102      	bne.n	8003c12 <xQueueReceive+0x7a>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <xQueueReceive+0x7e>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <xQueueReceive+0x80>
 8003c16:	2300      	movs	r3, #0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10d      	bne.n	8003c38 <xQueueReceive+0xa0>
    __asm volatile
 8003c1c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003c20:	b672      	cpsid	i
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	b662      	cpsie	i
 8003c30:	61bb      	str	r3, [r7, #24]
}
 8003c32:	bf00      	nop
 8003c34:	bf00      	nop
 8003c36:	e7fd      	b.n	8003c34 <xQueueReceive+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003c38:	f001 ffa4 	bl	8005b84 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c40:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01f      	beq.n	8003c88 <xQueueReceive+0xf0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c4c:	f000 f8f6 	bl	8003e3c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8003c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c52:	1e5a      	subs	r2, r3, #1
 8003c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c56:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00f      	beq.n	8003c80 <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c62:	3310      	adds	r3, #16
 8003c64:	4618      	mov	r0, r3
 8003c66:	f001 f811 	bl	8004c8c <xTaskRemoveFromEventList>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003c70:	4b3c      	ldr	r3, [pc, #240]	@ (8003d64 <xQueueReceive+0x1cc>)
 8003c72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003c80:	f001 ffb6 	bl	8005bf0 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e069      	b.n	8003d5c <xQueueReceive+0x1c4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d103      	bne.n	8003c96 <xQueueReceive+0xfe>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003c8e:	f001 ffaf 	bl	8005bf0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8003c92:	2300      	movs	r3, #0
 8003c94:	e062      	b.n	8003d5c <xQueueReceive+0x1c4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d106      	bne.n	8003caa <xQueueReceive+0x112>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003c9c:	f107 0310 	add.w	r3, r7, #16
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f001 f8cf 	bl	8004e44 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003caa:	f001 ffa1 	bl	8005bf0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003cae:	f000 fccd 	bl	800464c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003cb2:	f001 ff67 	bl	8005b84 <vPortEnterCritical>
 8003cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cbc:	b25b      	sxtb	r3, r3
 8003cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc2:	d103      	bne.n	8003ccc <xQueueReceive+0x134>
 8003cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cd2:	b25b      	sxtb	r3, r3
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd8:	d103      	bne.n	8003ce2 <xQueueReceive+0x14a>
 8003cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ce2:	f001 ff85 	bl	8005bf0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ce6:	1d3a      	adds	r2, r7, #4
 8003ce8:	f107 0310 	add.w	r3, r7, #16
 8003cec:	4611      	mov	r1, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f001 f8be 	bl	8004e70 <xTaskCheckForTimeOut>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d123      	bne.n	8003d42 <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cfc:	f000 f923 	bl	8003f46 <prvIsQueueEmpty>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d017      	beq.n	8003d36 <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d08:	3324      	adds	r3, #36	@ 0x24
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 ff4c 	bl	8004bac <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003d14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d16:	f000 f8b7 	bl	8003e88 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003d1a:	f000 fca5 	bl	8004668 <xTaskResumeAll>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d189      	bne.n	8003c38 <xQueueReceive+0xa0>
                {
                    taskYIELD_WITHIN_API();
 8003d24:	4b0f      	ldr	r3, [pc, #60]	@ (8003d64 <xQueueReceive+0x1cc>)
 8003d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	e780      	b.n	8003c38 <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003d36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d38:	f000 f8a6 	bl	8003e88 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003d3c:	f000 fc94 	bl	8004668 <xTaskResumeAll>
 8003d40:	e77a      	b.n	8003c38 <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003d42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d44:	f000 f8a0 	bl	8003e88 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003d48:	f000 fc8e 	bl	8004668 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d4e:	f000 f8fa 	bl	8003f46 <prvIsQueueEmpty>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f43f af6f 	beq.w	8003c38 <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8003d5a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3730      	adds	r7, #48	@ 0x30
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	e000ed04 	.word	0xe000ed04

08003d68 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10d      	bne.n	8003da2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d14d      	bne.n	8003e2a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f001 f9b4 	bl	8005100 <xTaskPriorityDisinherit>
 8003d98:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	e043      	b.n	8003e2a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d119      	bne.n	8003ddc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6858      	ldr	r0, [r3, #4]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db0:	461a      	mov	r2, r3
 8003db2:	68b9      	ldr	r1, [r7, #8]
 8003db4:	f002 fabc 	bl	8006330 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc0:	441a      	add	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d32b      	bcc.n	8003e2a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	605a      	str	r2, [r3, #4]
 8003dda:	e026      	b.n	8003e2a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	68d8      	ldr	r0, [r3, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	461a      	mov	r2, r3
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	f002 faa2 	bl	8006330 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df4:	425b      	negs	r3, r3
 8003df6:	441a      	add	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d207      	bcs.n	8003e18 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	425b      	negs	r3, r3
 8003e12:	441a      	add	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d105      	bne.n	8003e2a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8003e32:	697b      	ldr	r3, [r7, #20]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d018      	beq.n	8003e80 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	441a      	add	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d303      	bcc.n	8003e70 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68d9      	ldr	r1, [r3, #12]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e78:	461a      	mov	r2, r3
 8003e7a:	6838      	ldr	r0, [r7, #0]
 8003e7c:	f002 fa58 	bl	8006330 <memcpy>
    }
}
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003e90:	f001 fe78 	bl	8005b84 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e9a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e9c:	e01e      	b.n	8003edc <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d008      	beq.n	8003eb8 <prvUnlockQueue+0x30>
                {
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f902 	bl	80040b0 <prvNotifyQueueSetContainer>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d010      	beq.n	8003ed4 <prvUnlockQueue+0x4c>
                    {
                        /* The queue is a member of a queue set, and posting to
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
 8003eb2:	f001 f849 	bl	8004f48 <vTaskMissedYield>
 8003eb6:	e00d      	b.n	8003ed4 <prvUnlockQueue+0x4c>
                else
                {
                    /* Tasks that are removed from the event list will get
                     * added to the pending ready list as the scheduler is still
                     * suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d012      	beq.n	8003ee6 <prvUnlockQueue+0x5e>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3324      	adds	r3, #36	@ 0x24
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fee1 	bl	8004c8c <xTaskRemoveFromEventList>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <prvUnlockQueue+0x4c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            vTaskMissedYield();
 8003ed0:	f001 f83a 	bl	8004f48 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	dcdc      	bgt.n	8003e9e <prvUnlockQueue+0x16>
 8003ee4:	e000      	b.n	8003ee8 <prvUnlockQueue+0x60>
                        break;
 8003ee6:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	22ff      	movs	r2, #255	@ 0xff
 8003eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003ef0:	f001 fe7e 	bl	8005bf0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003ef4:	f001 fe46 	bl	8005b84 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003efe:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f00:	e011      	b.n	8003f26 <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d012      	beq.n	8003f30 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3310      	adds	r3, #16
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 febc 	bl	8004c8c <xTaskRemoveFromEventList>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 8003f1a:	f001 f815 	bl	8004f48 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003f1e:	7bbb      	ldrb	r3, [r7, #14]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	dce9      	bgt.n	8003f02 <prvUnlockQueue+0x7a>
 8003f2e:	e000      	b.n	8003f32 <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8003f30:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	22ff      	movs	r2, #255	@ 0xff
 8003f36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8003f3a:	f001 fe59 	bl	8005bf0 <vPortExitCritical>
}
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b084      	sub	sp, #16
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003f4e:	f001 fe19 	bl	8005b84 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d102      	bne.n	8003f60 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	e001      	b.n	8003f64 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003f60:	2300      	movs	r3, #0
 8003f62:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003f64:	f001 fe44 	bl	8005bf0 <vPortExitCritical>

    return xReturn;
 8003f68:	68fb      	ldr	r3, [r7, #12]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003f7a:	f001 fe03 	bl	8005b84 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d102      	bne.n	8003f90 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	e001      	b.n	8003f94 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003f94:	f001 fe2c 	bl	8005bf0 <vPortExitCritical>

    return xReturn;
 8003f98:	68fb      	ldr	r3, [r7, #12]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10d      	bne.n	8003fd4 <vQueueAddToRegistry+0x30>
    __asm volatile
 8003fb8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003fbc:	b672      	cpsid	i
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	b662      	cpsie	i
 8003fcc:	60fb      	str	r3, [r7, #12]
}
 8003fce:	bf00      	nop
 8003fd0:	bf00      	nop
 8003fd2:	e7fd      	b.n	8003fd0 <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d024      	beq.n	8004024 <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
 8003fde:	e01e      	b.n	800401e <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003fe0:	4a18      	ldr	r2, [pc, #96]	@ (8004044 <vQueueAddToRegistry+0xa0>)
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d105      	bne.n	8003ffc <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4a13      	ldr	r2, [pc, #76]	@ (8004044 <vQueueAddToRegistry+0xa0>)
 8003ff6:	4413      	add	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
                    break;
 8003ffa:	e013      	b.n	8004024 <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10a      	bne.n	8004018 <vQueueAddToRegistry+0x74>
 8004002:	4a10      	ldr	r2, [pc, #64]	@ (8004044 <vQueueAddToRegistry+0xa0>)
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d104      	bne.n	8004018 <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	4a0c      	ldr	r2, [pc, #48]	@ (8004044 <vQueueAddToRegistry+0xa0>)
 8004014:	4413      	add	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	3301      	adds	r3, #1
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b07      	cmp	r3, #7
 8004022:	d9dd      	bls.n	8003fe0 <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8004036:	bf00      	nop
 8004038:	371c      	adds	r7, #28
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	2000025c 	.word	0x2000025c

08004048 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004058:	f001 fd94 	bl	8005b84 <vPortEnterCritical>
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004062:	b25b      	sxtb	r3, r3
 8004064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004068:	d103      	bne.n	8004072 <vQueueWaitForMessageRestricted+0x2a>
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004078:	b25b      	sxtb	r3, r3
 800407a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407e:	d103      	bne.n	8004088 <vQueueWaitForMessageRestricted+0x40>
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004088:	f001 fdb2 	bl	8005bf0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004090:	2b00      	cmp	r3, #0
 8004092:	d106      	bne.n	80040a2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	3324      	adds	r3, #36	@ 0x24
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fdad 	bl	8004bfc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80040a2:	6978      	ldr	r0, [r7, #20]
 80040a4:	f7ff fef0 	bl	8003e88 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 80040a8:	bf00      	nop
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08a      	sub	sp, #40	@ 0x28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040bc:	623b      	str	r3, [r7, #32]
        BaseType_t xReturn = pdFALSE;
 80040be:	2300      	movs	r3, #0
 80040c0:	627b      	str	r3, [r7, #36]	@ 0x24
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10d      	bne.n	80040e4 <prvNotifyQueueSetContainer+0x34>
    __asm volatile
 80040c8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80040cc:	b672      	cpsid	i
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	b662      	cpsie	i
 80040dc:	617b      	str	r3, [r7, #20]
}
 80040de:	bf00      	nop
 80040e0:	bf00      	nop
 80040e2:	e7fd      	b.n	80040e0 <prvNotifyQueueSetContainer+0x30>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d30d      	bcc.n	800410c <prvNotifyQueueSetContainer+0x5c>
    __asm volatile
 80040f0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80040f4:	b672      	cpsid	i
 80040f6:	f383 8811 	msr	BASEPRI, r3
 80040fa:	f3bf 8f6f 	isb	sy
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	b662      	cpsie	i
 8004104:	613b      	str	r3, [r7, #16]
}
 8004106:	bf00      	nop
 8004108:	bf00      	nop
 800410a:	e7fd      	b.n	8004108 <prvNotifyQueueSetContainer+0x58>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004114:	429a      	cmp	r2, r3
 8004116:	d23f      	bcs.n	8004198 <prvNotifyQueueSetContainer+0xe8>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800411e:	77fb      	strb	r3, [r7, #31]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8004120:	1d3b      	adds	r3, r7, #4
 8004122:	2200      	movs	r2, #0
 8004124:	4619      	mov	r1, r3
 8004126:	6a38      	ldr	r0, [r7, #32]
 8004128:	f7ff fe1e 	bl	8003d68 <prvCopyDataToQueue>
 800412c:	6278      	str	r0, [r7, #36]	@ 0x24

            if( cTxLock == queueUNLOCKED )
 800412e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004136:	d10e      	bne.n	8004156 <prvNotifyQueueSetContainer+0xa6>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	2b00      	cmp	r3, #0
 800413e:	d02b      	beq.n	8004198 <prvNotifyQueueSetContainer+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	3324      	adds	r3, #36	@ 0x24
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fda1 	bl	8004c8c <xTaskRemoveFromEventList>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d023      	beq.n	8004198 <prvNotifyQueueSetContainer+0xe8>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8004150:	2301      	movs	r3, #1
 8004152:	627b      	str	r3, [r7, #36]	@ 0x24
 8004154:	e020      	b.n	8004198 <prvNotifyQueueSetContainer+0xe8>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
 8004156:	f000 fba1 	bl	800489c <uxTaskGetNumberOfTasks>
 800415a:	61b8      	str	r0, [r7, #24]
 800415c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	429a      	cmp	r2, r3
 8004164:	d918      	bls.n	8004198 <prvNotifyQueueSetContainer+0xe8>
 8004166:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800416a:	2b7f      	cmp	r3, #127	@ 0x7f
 800416c:	d10d      	bne.n	800418a <prvNotifyQueueSetContainer+0xda>
    __asm volatile
 800416e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004172:	b672      	cpsid	i
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	b662      	cpsie	i
 8004182:	60fb      	str	r3, [r7, #12]
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	e7fd      	b.n	8004186 <prvNotifyQueueSetContainer+0xd6>
 800418a:	7ffb      	ldrb	r3, [r7, #31]
 800418c:	3301      	adds	r3, #1
 800418e:	b2db      	uxtb	r3, r3
 8004190:	b25a      	sxtb	r2, r3
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800419a:	4618      	mov	r0, r3
 800419c:	3728      	adds	r7, #40	@ 0x28
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b08a      	sub	sp, #40	@ 0x28
 80041a6:	af04      	add	r7, sp, #16
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 fdd3 	bl	8005d60 <pvPortMalloc>
 80041ba:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d013      	beq.n	80041ea <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80041c2:	2058      	movs	r0, #88	@ 0x58
 80041c4:	f001 fdcc 	bl	8005d60 <pvPortMalloc>
 80041c8:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80041d0:	2258      	movs	r2, #88	@ 0x58
 80041d2:	2100      	movs	r1, #0
 80041d4:	6978      	ldr	r0, [r7, #20]
 80041d6:	f002 f877 	bl	80062c8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	631a      	str	r2, [r3, #48]	@ 0x30
 80041e0:	e005      	b.n	80041ee <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80041e2:	6938      	ldr	r0, [r7, #16]
 80041e4:	f001 fefa 	bl	8005fdc <vPortFree>
 80041e8:	e001      	b.n	80041ee <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00d      	beq.n	8004210 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041f4:	2300      	movs	r3, #0
 80041f6:	9303      	str	r3, [sp, #12]
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	9302      	str	r3, [sp, #8]
 80041fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fe:	9301      	str	r3, [sp, #4]
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	68b9      	ldr	r1, [r7, #8]
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 f828 	bl	8004260 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8004210:	697b      	ldr	r3, [r7, #20]
    }
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800421a:	b580      	push	{r7, lr}
 800421c:	b088      	sub	sp, #32
 800421e:	af02      	add	r7, sp, #8
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	607a      	str	r2, [r7, #4]
 8004226:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8004228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	68b9      	ldr	r1, [r7, #8]
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f7ff ffb3 	bl	80041a2 <prvCreateTask>
 800423c:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8004244:	6938      	ldr	r0, [r7, #16]
 8004246:	f000 f89f 	bl	8004388 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800424a:	2301      	movs	r3, #1
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	e002      	b.n	8004256 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004250:	f04f 33ff 	mov.w	r3, #4294967295
 8004254:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8004256:	697b      	ldr	r3, [r7, #20]
    }
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800426e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004270:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	461a      	mov	r2, r3
 8004278:	21a5      	movs	r1, #165	@ 0xa5
 800427a:	f002 f825 	bl	80062c8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800427e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004280:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004288:	440b      	add	r3, r1
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	f023 0307 	bic.w	r3, r3, #7
 8004296:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00d      	beq.n	80042be <prvInitialiseNewTask+0x5e>
    __asm volatile
 80042a2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80042a6:	b672      	cpsid	i
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	b662      	cpsie	i
 80042b6:	617b      	str	r3, [r7, #20]
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	e7fd      	b.n	80042ba <prvInitialiseNewTask+0x5a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d01e      	beq.n	8004302 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042c4:	2300      	movs	r3, #0
 80042c6:	61fb      	str	r3, [r7, #28]
 80042c8:	e012      	b.n	80042f0 <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	4413      	add	r3, r2
 80042d0:	7819      	ldrb	r1, [r3, #0]
 80042d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	4413      	add	r3, r2
 80042d8:	3334      	adds	r3, #52	@ 0x34
 80042da:	460a      	mov	r2, r1
 80042dc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	4413      	add	r3, r2
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d006      	beq.n	80042f8 <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	3301      	adds	r3, #1
 80042ee:	61fb      	str	r3, [r7, #28]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	2b09      	cmp	r3, #9
 80042f4:	d9e9      	bls.n	80042ca <prvInitialiseNewTask+0x6a>
 80042f6:	e000      	b.n	80042fa <prvInitialiseNewTask+0x9a>
            {
                break;
 80042f8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80042fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004304:	2b04      	cmp	r3, #4
 8004306:	d90d      	bls.n	8004324 <prvInitialiseNewTask+0xc4>
    __asm volatile
 8004308:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800430c:	b672      	cpsid	i
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	b662      	cpsie	i
 800431c:	613b      	str	r3, [r7, #16]
}
 800431e:	bf00      	nop
 8004320:	bf00      	nop
 8004322:	e7fd      	b.n	8004320 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004326:	2b04      	cmp	r3, #4
 8004328:	d901      	bls.n	800432e <prvInitialiseNewTask+0xce>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800432a:	2304      	movs	r3, #4
 800432c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800432e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004330:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004332:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004336:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004338:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800433a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433c:	3304      	adds	r3, #4
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff f985 	bl	800364e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004346:	3318      	adds	r3, #24
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff f980 	bl	800364e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800434e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004352:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8004354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004356:	f1c3 0205 	rsb	r2, r3, #5
 800435a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800435e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004360:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004362:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	68f9      	ldr	r1, [r7, #12]
 8004368:	69b8      	ldr	r0, [r7, #24]
 800436a:	f001 faab 	bl	80058c4 <pxPortInitialiseStack>
 800436e:	4602      	mov	r2, r0
 8004370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004372:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8004374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <prvInitialiseNewTask+0x120>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800437a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800437e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004380:	bf00      	nop
 8004382:	3720      	adds	r7, #32
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8004390:	f001 fbf8 	bl	8005b84 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8004394:	4b41      	ldr	r3, [pc, #260]	@ (800449c <prvAddNewTaskToReadyList+0x114>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	4a40      	ldr	r2, [pc, #256]	@ (800449c <prvAddNewTaskToReadyList+0x114>)
 800439c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800439e:	4b40      	ldr	r3, [pc, #256]	@ (80044a0 <prvAddNewTaskToReadyList+0x118>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d109      	bne.n	80043ba <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80043a6:	4a3e      	ldr	r2, [pc, #248]	@ (80044a0 <prvAddNewTaskToReadyList+0x118>)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043ac:	4b3b      	ldr	r3, [pc, #236]	@ (800449c <prvAddNewTaskToReadyList+0x114>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d110      	bne.n	80043d6 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80043b4:	f000 fdec 	bl	8004f90 <prvInitialiseTaskLists>
 80043b8:	e00d      	b.n	80043d6 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80043ba:	4b3a      	ldr	r3, [pc, #232]	@ (80044a4 <prvAddNewTaskToReadyList+0x11c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043c2:	4b37      	ldr	r3, [pc, #220]	@ (80044a0 <prvAddNewTaskToReadyList+0x118>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d802      	bhi.n	80043d6 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80043d0:	4a33      	ldr	r2, [pc, #204]	@ (80044a0 <prvAddNewTaskToReadyList+0x118>)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80043d6:	4b34      	ldr	r3, [pc, #208]	@ (80044a8 <prvAddNewTaskToReadyList+0x120>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3301      	adds	r3, #1
 80043dc:	4a32      	ldr	r2, [pc, #200]	@ (80044a8 <prvAddNewTaskToReadyList+0x120>)
 80043de:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80043e0:	4b31      	ldr	r3, [pc, #196]	@ (80044a8 <prvAddNewTaskToReadyList+0x120>)
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	2201      	movs	r2, #1
 80043ee:	409a      	lsls	r2, r3
 80043f0:	4b2e      	ldr	r3, [pc, #184]	@ (80044ac <prvAddNewTaskToReadyList+0x124>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	4a2d      	ldr	r2, [pc, #180]	@ (80044ac <prvAddNewTaskToReadyList+0x124>)
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043fe:	492c      	ldr	r1, [pc, #176]	@ (80044b0 <prvAddNewTaskToReadyList+0x128>)
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	3304      	adds	r3, #4
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	609a      	str	r2, [r3, #8]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689a      	ldr	r2, [r3, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	60da      	str	r2, [r3, #12]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	3204      	adds	r2, #4
 8004426:	605a      	str	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	1d1a      	adds	r2, r3, #4
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	609a      	str	r2, [r3, #8]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4a1c      	ldr	r2, [pc, #112]	@ (80044b0 <prvAddNewTaskToReadyList+0x128>)
 800443e:	441a      	add	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	615a      	str	r2, [r3, #20]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004448:	4919      	ldr	r1, [pc, #100]	@ (80044b0 <prvAddNewTaskToReadyList+0x128>)
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	440b      	add	r3, r1
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800445a:	1c59      	adds	r1, r3, #1
 800445c:	4814      	ldr	r0, [pc, #80]	@ (80044b0 <prvAddNewTaskToReadyList+0x128>)
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4403      	add	r3, r0
 8004468:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800446a:	f001 fbc1 	bl	8005bf0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800446e:	4b0d      	ldr	r3, [pc, #52]	@ (80044a4 <prvAddNewTaskToReadyList+0x11c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00e      	beq.n	8004494 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8004476:	4b0a      	ldr	r3, [pc, #40]	@ (80044a0 <prvAddNewTaskToReadyList+0x118>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	429a      	cmp	r2, r3
 8004482:	d207      	bcs.n	8004494 <prvAddNewTaskToReadyList+0x10c>
 8004484:	4b0b      	ldr	r3, [pc, #44]	@ (80044b4 <prvAddNewTaskToReadyList+0x12c>)
 8004486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004494:	bf00      	nop
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20000374 	.word	0x20000374
 80044a0:	2000029c 	.word	0x2000029c
 80044a4:	20000380 	.word	0x20000380
 80044a8:	20000390 	.word	0x20000390
 80044ac:	2000037c 	.word	0x2000037c
 80044b0:	200002a0 	.word	0x200002a0
 80044b4:	e000ed04 	.word	0xe000ed04

080044b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d01a      	beq.n	8004500 <vTaskDelay+0x48>
        {
            vTaskSuspendAll();
 80044ca:	f000 f8bf 	bl	800464c <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 80044ce:	4b14      	ldr	r3, [pc, #80]	@ (8004520 <vTaskDelay+0x68>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d00d      	beq.n	80044f2 <vTaskDelay+0x3a>
    __asm volatile
 80044d6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80044da:	b672      	cpsid	i
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	b662      	cpsie	i
 80044ea:	60bb      	str	r3, [r7, #8]
}
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
 80044f0:	e7fd      	b.n	80044ee <vTaskDelay+0x36>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044f2:	2100      	movs	r1, #0
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 feaf 	bl	8005258 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80044fa:	f000 f8b5 	bl	8004668 <xTaskResumeAll>
 80044fe:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d107      	bne.n	8004516 <vTaskDelay+0x5e>
        {
            taskYIELD_WITHIN_API();
 8004506:	4b07      	ldr	r3, [pc, #28]	@ (8004524 <vTaskDelay+0x6c>)
 8004508:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	2000039c 	.word	0x2000039c
 8004524:	e000ed04 	.word	0xe000ed04

08004528 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	@ 0x28
 800452c:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800452e:	2301      	movs	r3, #1
 8004530:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8004532:	2300      	movs	r3, #0
 8004534:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	e011      	b.n	8004560 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800453c:	4a1c      	ldr	r2, [pc, #112]	@ (80045b0 <prvCreateIdleTasks+0x88>)
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	4413      	add	r3, r2
 8004542:	7819      	ldrb	r1, [r3, #0]
 8004544:	1d3a      	adds	r2, r7, #4
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	4413      	add	r3, r2
 800454a:	460a      	mov	r2, r1
 800454c:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800454e:	1d3a      	adds	r2, r7, #4
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	4413      	add	r3, r2
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d006      	beq.n	8004568 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	3301      	adds	r3, #1
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2b09      	cmp	r3, #9
 8004564:	ddea      	ble.n	800453c <prvCreateIdleTasks+0x14>
 8004566:	e000      	b.n	800456a <prvCreateIdleTasks+0x42>
        {
            break;
 8004568:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800456a:	2300      	movs	r3, #0
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	e015      	b.n	800459c <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8004570:	4b10      	ldr	r3, [pc, #64]	@ (80045b4 <prvCreateIdleTasks+0x8c>)
 8004572:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4a0f      	ldr	r2, [pc, #60]	@ (80045b8 <prvCreateIdleTasks+0x90>)
 800457a:	4413      	add	r3, r2
 800457c:	1d39      	adds	r1, r7, #4
 800457e:	9301      	str	r3, [sp, #4]
 8004580:	2300      	movs	r3, #0
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	2300      	movs	r3, #0
 8004586:	2282      	movs	r2, #130	@ 0x82
 8004588:	6938      	ldr	r0, [r7, #16]
 800458a:	f7ff fe46 	bl	800421a <xTaskCreate>
 800458e:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d006      	beq.n	80045a4 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	3301      	adds	r3, #1
 800459a:	61bb      	str	r3, [r7, #24]
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	dde6      	ble.n	8004570 <prvCreateIdleTasks+0x48>
 80045a2:	e000      	b.n	80045a6 <prvCreateIdleTasks+0x7e>
        {
            break;
 80045a4:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80045a6:	69fb      	ldr	r3, [r7, #28]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3720      	adds	r7, #32
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	08006c74 	.word	0x08006c74
 80045b4:	08004f61 	.word	0x08004f61
 80045b8:	20000398 	.word	0x20000398

080045bc <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80045c2:	f7ff ffb1 	bl	8004528 <prvCreateIdleTasks>
 80045c6:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d102      	bne.n	80045d4 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80045ce:	f000 fec5 	bl	800535c <xTimerCreateTimerTask>
 80045d2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d118      	bne.n	800460c <vTaskStartScheduler+0x50>
    __asm volatile
 80045da:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80045de:	b672      	cpsid	i
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	b662      	cpsie	i
 80045ee:	60bb      	str	r3, [r7, #8]
}
 80045f0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80045f2:	4b12      	ldr	r3, [pc, #72]	@ (800463c <vTaskStartScheduler+0x80>)
 80045f4:	f04f 32ff 	mov.w	r2, #4294967295
 80045f8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80045fa:	4b11      	ldr	r3, [pc, #68]	@ (8004640 <vTaskStartScheduler+0x84>)
 80045fc:	2201      	movs	r2, #1
 80045fe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004600:	4b10      	ldr	r3, [pc, #64]	@ (8004644 <vTaskStartScheduler+0x88>)
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8004606:	f001 f9ed 	bl	80059e4 <xPortStartScheduler>
 800460a:	e011      	b.n	8004630 <vTaskStartScheduler+0x74>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004612:	d10d      	bne.n	8004630 <vTaskStartScheduler+0x74>
    __asm volatile
 8004614:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004618:	b672      	cpsid	i
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	b662      	cpsie	i
 8004628:	607b      	str	r3, [r7, #4]
}
 800462a:	bf00      	nop
 800462c:	bf00      	nop
 800462e:	e7fd      	b.n	800462c <vTaskStartScheduler+0x70>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004630:	4b05      	ldr	r3, [pc, #20]	@ (8004648 <vTaskStartScheduler+0x8c>)
 8004632:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	20000394 	.word	0x20000394
 8004640:	20000380 	.word	0x20000380
 8004644:	20000378 	.word	0x20000378
 8004648:	2000000c 	.word	0x2000000c

0800464c <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8004650:	4b04      	ldr	r3, [pc, #16]	@ (8004664 <vTaskSuspendAll+0x18>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3301      	adds	r3, #1
 8004656:	4a03      	ldr	r2, [pc, #12]	@ (8004664 <vTaskSuspendAll+0x18>)
 8004658:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800465a:	bf00      	nop
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	2000039c 	.word	0x2000039c

08004668 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800466e:	2300      	movs	r3, #0
 8004670:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004672:	2300      	movs	r3, #0
 8004674:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8004676:	f001 fa85 	bl	8005b84 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800467a:	2300      	movs	r3, #0
 800467c:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800467e:	4b76      	ldr	r3, [pc, #472]	@ (8004858 <xTaskResumeAll+0x1f0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10d      	bne.n	80046a2 <xTaskResumeAll+0x3a>
    __asm volatile
 8004686:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800468a:	b672      	cpsid	i
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	b662      	cpsie	i
 800469a:	603b      	str	r3, [r7, #0]
}
 800469c:	bf00      	nop
 800469e:	bf00      	nop
 80046a0:	e7fd      	b.n	800469e <xTaskResumeAll+0x36>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80046a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004858 <xTaskResumeAll+0x1f0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	4a6b      	ldr	r2, [pc, #428]	@ (8004858 <xTaskResumeAll+0x1f0>)
 80046aa:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80046ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004858 <xTaskResumeAll+0x1f0>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f040 80ca 	bne.w	800484a <xTaskResumeAll+0x1e2>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046b6:	4b69      	ldr	r3, [pc, #420]	@ (800485c <xTaskResumeAll+0x1f4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 80c5 	beq.w	800484a <xTaskResumeAll+0x1e2>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046c0:	e08e      	b.n	80047e0 <xTaskResumeAll+0x178>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80046c2:	4b67      	ldr	r3, [pc, #412]	@ (8004860 <xTaskResumeAll+0x1f8>)
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	6a12      	ldr	r2, [r2, #32]
 80046d8:	609a      	str	r2, [r3, #8]
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	69d2      	ldr	r2, [r2, #28]
 80046e2:	605a      	str	r2, [r3, #4]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	3318      	adds	r3, #24
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d103      	bne.n	80046f8 <xTaskResumeAll+0x90>
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	6a1a      	ldr	r2, [r3, #32]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	605a      	str	r2, [r3, #4]
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	2200      	movs	r2, #0
 80046fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	1e5a      	subs	r2, r3, #1
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	69fa      	ldr	r2, [r7, #28]
 8004714:	68d2      	ldr	r2, [r2, #12]
 8004716:	609a      	str	r2, [r3, #8]
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	69fa      	ldr	r2, [r7, #28]
 800471e:	6892      	ldr	r2, [r2, #8]
 8004720:	605a      	str	r2, [r3, #4]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	3304      	adds	r3, #4
 800472a:	429a      	cmp	r2, r3
 800472c:	d103      	bne.n	8004736 <xTaskResumeAll+0xce>
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	2200      	movs	r2, #0
 800473a:	615a      	str	r2, [r3, #20]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	1e5a      	subs	r2, r3, #1
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474a:	2201      	movs	r2, #1
 800474c:	409a      	lsls	r2, r3
 800474e:	4b45      	ldr	r3, [pc, #276]	@ (8004864 <xTaskResumeAll+0x1fc>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4313      	orrs	r3, r2
 8004754:	4a43      	ldr	r2, [pc, #268]	@ (8004864 <xTaskResumeAll+0x1fc>)
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800475c:	4942      	ldr	r1, [pc, #264]	@ (8004868 <xTaskResumeAll+0x200>)
 800475e:	4613      	mov	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	440b      	add	r3, r1
 8004768:	3304      	adds	r3, #4
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	607b      	str	r3, [r7, #4]
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	609a      	str	r2, [r3, #8]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	60da      	str	r2, [r3, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	3204      	adds	r2, #4
 8004784:	605a      	str	r2, [r3, #4]
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	1d1a      	adds	r2, r3, #4
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	609a      	str	r2, [r3, #8]
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4a33      	ldr	r2, [pc, #204]	@ (8004868 <xTaskResumeAll+0x200>)
 800479c:	441a      	add	r2, r3
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	615a      	str	r2, [r3, #20]
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a6:	4930      	ldr	r1, [pc, #192]	@ (8004868 <xTaskResumeAll+0x200>)
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80047b8:	1c59      	adds	r1, r3, #1
 80047ba:	482b      	ldr	r0, [pc, #172]	@ (8004868 <xTaskResumeAll+0x200>)
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4403      	add	r3, r0
 80047c6:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047cc:	4b27      	ldr	r3, [pc, #156]	@ (800486c <xTaskResumeAll+0x204>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d904      	bls.n	80047e0 <xTaskResumeAll+0x178>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80047d6:	4a26      	ldr	r2, [pc, #152]	@ (8004870 <xTaskResumeAll+0x208>)
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	2101      	movs	r1, #1
 80047dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004860 <xTaskResumeAll+0x1f8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f47f af6c 	bne.w	80046c2 <xTaskResumeAll+0x5a>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <xTaskResumeAll+0x18c>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80047f0:	f000 fc4c 	bl	800508c <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004874 <xTaskResumeAll+0x20c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d012      	beq.n	8004826 <xTaskResumeAll+0x1be>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8004800:	f000 f858 	bl	80048b4 <xTaskIncrementTick>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d004      	beq.n	8004814 <xTaskResumeAll+0x1ac>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800480a:	4a19      	ldr	r2, [pc, #100]	@ (8004870 <xTaskResumeAll+0x208>)
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	2101      	movs	r1, #1
 8004810:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	3b01      	subs	r3, #1
 8004818:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1ef      	bne.n	8004800 <xTaskResumeAll+0x198>

                            xPendedTicks = 0;
 8004820:	4b14      	ldr	r3, [pc, #80]	@ (8004874 <xTaskResumeAll+0x20c>)
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8004826:	4a12      	ldr	r2, [pc, #72]	@ (8004870 <xTaskResumeAll+0x208>)
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00b      	beq.n	800484a <xTaskResumeAll+0x1e2>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004832:	2301      	movs	r3, #1
 8004834:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8004836:	4b0d      	ldr	r3, [pc, #52]	@ (800486c <xTaskResumeAll+0x204>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4b0f      	ldr	r3, [pc, #60]	@ (8004878 <xTaskResumeAll+0x210>)
 800483c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800484a:	f001 f9d1 	bl	8005bf0 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 800484e:	69bb      	ldr	r3, [r7, #24]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3720      	adds	r7, #32
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	2000039c 	.word	0x2000039c
 800485c:	20000374 	.word	0x20000374
 8004860:	20000334 	.word	0x20000334
 8004864:	2000037c 	.word	0x2000037c
 8004868:	200002a0 	.word	0x200002a0
 800486c:	2000029c 	.word	0x2000029c
 8004870:	20000388 	.word	0x20000388
 8004874:	20000384 	.word	0x20000384
 8004878:	e000ed04 	.word	0xe000ed04

0800487c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004882:	4b05      	ldr	r3, [pc, #20]	@ (8004898 <xTaskGetTickCount+0x1c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8004888:	687b      	ldr	r3, [r7, #4]
}
 800488a:	4618      	mov	r0, r3
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20000378 	.word	0x20000378

0800489c <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 80048a0:	4b03      	ldr	r3, [pc, #12]	@ (80048b0 <uxTaskGetNumberOfTasks+0x14>)
 80048a2:	681b      	ldr	r3, [r3, #0]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	20000374 	.word	0x20000374

080048b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08a      	sub	sp, #40	@ 0x28
 80048b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80048ba:	2300      	movs	r3, #0
 80048bc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80048be:	4b80      	ldr	r3, [pc, #512]	@ (8004ac0 <xTaskIncrementTick+0x20c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f040 80f1 	bne.w	8004aaa <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048c8:	4b7e      	ldr	r3, [pc, #504]	@ (8004ac4 <xTaskIncrementTick+0x210>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3301      	adds	r3, #1
 80048ce:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80048d0:	4a7c      	ldr	r2, [pc, #496]	@ (8004ac4 <xTaskIncrementTick+0x210>)
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d123      	bne.n	8004924 <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 80048dc:	4b7a      	ldr	r3, [pc, #488]	@ (8004ac8 <xTaskIncrementTick+0x214>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00d      	beq.n	8004902 <xTaskIncrementTick+0x4e>
    __asm volatile
 80048e6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80048ea:	b672      	cpsid	i
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	b662      	cpsie	i
 80048fa:	607b      	str	r3, [r7, #4]
}
 80048fc:	bf00      	nop
 80048fe:	bf00      	nop
 8004900:	e7fd      	b.n	80048fe <xTaskIncrementTick+0x4a>
 8004902:	4b71      	ldr	r3, [pc, #452]	@ (8004ac8 <xTaskIncrementTick+0x214>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	61fb      	str	r3, [r7, #28]
 8004908:	4b70      	ldr	r3, [pc, #448]	@ (8004acc <xTaskIncrementTick+0x218>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a6e      	ldr	r2, [pc, #440]	@ (8004ac8 <xTaskIncrementTick+0x214>)
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	4a6e      	ldr	r2, [pc, #440]	@ (8004acc <xTaskIncrementTick+0x218>)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	4b6e      	ldr	r3, [pc, #440]	@ (8004ad0 <xTaskIncrementTick+0x21c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3301      	adds	r3, #1
 800491c:	4a6c      	ldr	r2, [pc, #432]	@ (8004ad0 <xTaskIncrementTick+0x21c>)
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	f000 fbb4 	bl	800508c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004924:	4b6b      	ldr	r3, [pc, #428]	@ (8004ad4 <xTaskIncrementTick+0x220>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6a3a      	ldr	r2, [r7, #32]
 800492a:	429a      	cmp	r2, r3
 800492c:	f0c0 80a8 	bcc.w	8004a80 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004930:	4b65      	ldr	r3, [pc, #404]	@ (8004ac8 <xTaskIncrementTick+0x214>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d104      	bne.n	8004944 <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800493a:	4b66      	ldr	r3, [pc, #408]	@ (8004ad4 <xTaskIncrementTick+0x220>)
 800493c:	f04f 32ff 	mov.w	r2, #4294967295
 8004940:	601a      	str	r2, [r3, #0]
                    break;
 8004942:	e09d      	b.n	8004a80 <xTaskIncrementTick+0x1cc>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004944:	4b60      	ldr	r3, [pc, #384]	@ (8004ac8 <xTaskIncrementTick+0x214>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004954:	6a3a      	ldr	r2, [r7, #32]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	429a      	cmp	r2, r3
 800495a:	d203      	bcs.n	8004964 <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800495c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ad4 <xTaskIncrementTick+0x220>)
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	6013      	str	r3, [r2, #0]
                        break;
 8004962:	e08d      	b.n	8004a80 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	68d2      	ldr	r2, [r2, #12]
 8004972:	609a      	str	r2, [r3, #8]
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	6892      	ldr	r2, [r2, #8]
 800497c:	605a      	str	r2, [r3, #4]
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	3304      	adds	r3, #4
 8004986:	429a      	cmp	r2, r3
 8004988:	d103      	bne.n	8004992 <xTaskIncrementTick+0xde>
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2200      	movs	r2, #0
 8004996:	615a      	str	r2, [r3, #20]
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	1e5a      	subs	r2, r3, #1
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d01e      	beq.n	80049e8 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	6a12      	ldr	r2, [r2, #32]
 80049b8:	609a      	str	r2, [r3, #8]
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	69d2      	ldr	r2, [r2, #28]
 80049c2:	605a      	str	r2, [r3, #4]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	3318      	adds	r3, #24
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d103      	bne.n	80049d8 <xTaskIncrementTick+0x124>
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	6a1a      	ldr	r2, [r3, #32]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	605a      	str	r2, [r3, #4]
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	2200      	movs	r2, #0
 80049dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	1e5a      	subs	r2, r3, #1
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ec:	2201      	movs	r2, #1
 80049ee:	409a      	lsls	r2, r3
 80049f0:	4b39      	ldr	r3, [pc, #228]	@ (8004ad8 <xTaskIncrementTick+0x224>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	4a38      	ldr	r2, [pc, #224]	@ (8004ad8 <xTaskIncrementTick+0x224>)
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049fe:	4937      	ldr	r1, [pc, #220]	@ (8004adc <xTaskIncrementTick+0x228>)
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	60bb      	str	r3, [r7, #8]
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	609a      	str	r2, [r3, #8]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	60da      	str	r2, [r3, #12]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	3204      	adds	r2, #4
 8004a26:	605a      	str	r2, [r3, #4]
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	1d1a      	adds	r2, r3, #4
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	609a      	str	r2, [r3, #8]
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a34:	4613      	mov	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4a27      	ldr	r2, [pc, #156]	@ (8004adc <xTaskIncrementTick+0x228>)
 8004a3e:	441a      	add	r2, r3
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	615a      	str	r2, [r3, #20]
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a48:	4924      	ldr	r1, [pc, #144]	@ (8004adc <xTaskIncrementTick+0x228>)
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a5a:	1c59      	adds	r1, r3, #1
 8004a5c:	481f      	ldr	r0, [pc, #124]	@ (8004adc <xTaskIncrementTick+0x228>)
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4403      	add	r3, r0
 8004a68:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ae0 <xTaskIncrementTick+0x22c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a74:	429a      	cmp	r2, r3
 8004a76:	f67f af5b 	bls.w	8004930 <xTaskIncrementTick+0x7c>
                            {
                                xSwitchRequired = pdTRUE;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a7e:	e757      	b.n	8004930 <xTaskIncrementTick+0x7c>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8004a80:	4b17      	ldr	r3, [pc, #92]	@ (8004ae0 <xTaskIncrementTick+0x22c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a86:	4915      	ldr	r1, [pc, #84]	@ (8004adc <xTaskIncrementTick+0x228>)
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d901      	bls.n	8004a9c <xTaskIncrementTick+0x1e8>
                {
                    xSwitchRequired = pdTRUE;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8004a9c:	4b11      	ldr	r3, [pc, #68]	@ (8004ae4 <xTaskIncrementTick+0x230>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <xTaskIncrementTick+0x200>
                {
                    xSwitchRequired = pdTRUE;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aa8:	e004      	b.n	8004ab4 <xTaskIncrementTick+0x200>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8004aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae8 <xTaskIncrementTick+0x234>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ae8 <xTaskIncrementTick+0x234>)
 8004ab2:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3728      	adds	r7, #40	@ 0x28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	2000039c 	.word	0x2000039c
 8004ac4:	20000378 	.word	0x20000378
 8004ac8:	2000032c 	.word	0x2000032c
 8004acc:	20000330 	.word	0x20000330
 8004ad0:	2000038c 	.word	0x2000038c
 8004ad4:	20000394 	.word	0x20000394
 8004ad8:	2000037c 	.word	0x2000037c
 8004adc:	200002a0 	.word	0x200002a0
 8004ae0:	2000029c 	.word	0x2000029c
 8004ae4:	20000388 	.word	0x20000388
 8004ae8:	20000384 	.word	0x20000384

08004aec <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8004af2:	4b29      	ldr	r3, [pc, #164]	@ (8004b98 <vTaskSwitchContext+0xac>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004afa:	4b28      	ldr	r3, [pc, #160]	@ (8004b9c <vTaskSwitchContext+0xb0>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8004b00:	e043      	b.n	8004b8a <vTaskSwitchContext+0x9e>
            xYieldPendings[ 0 ] = pdFALSE;
 8004b02:	4b26      	ldr	r3, [pc, #152]	@ (8004b9c <vTaskSwitchContext+0xb0>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b08:	4b25      	ldr	r3, [pc, #148]	@ (8004ba0 <vTaskSwitchContext+0xb4>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	fab3 f383 	clz	r3, r3
 8004b14:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8004b16:	7afb      	ldrb	r3, [r7, #11]
 8004b18:	f1c3 031f 	rsb	r3, r3, #31
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	4921      	ldr	r1, [pc, #132]	@ (8004ba4 <vTaskSwitchContext+0xb8>)
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10d      	bne.n	8004b4e <vTaskSwitchContext+0x62>
    __asm volatile
 8004b32:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004b36:	b672      	cpsid	i
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	b662      	cpsie	i
 8004b46:	607b      	str	r3, [r7, #4]
}
 8004b48:	bf00      	nop
 8004b4a:	bf00      	nop
 8004b4c:	e7fd      	b.n	8004b4a <vTaskSwitchContext+0x5e>
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4a12      	ldr	r2, [pc, #72]	@ (8004ba4 <vTaskSwitchContext+0xb8>)
 8004b5a:	4413      	add	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	605a      	str	r2, [r3, #4]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	3308      	adds	r3, #8
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d103      	bne.n	8004b7c <vTaskSwitchContext+0x90>
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	605a      	str	r2, [r3, #4]
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	4a09      	ldr	r2, [pc, #36]	@ (8004ba8 <vTaskSwitchContext+0xbc>)
 8004b84:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8004b86:	4b08      	ldr	r3, [pc, #32]	@ (8004ba8 <vTaskSwitchContext+0xbc>)
 8004b88:	681b      	ldr	r3, [r3, #0]
    }
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	2000039c 	.word	0x2000039c
 8004b9c:	20000388 	.word	0x20000388
 8004ba0:	2000037c 	.word	0x2000037c
 8004ba4:	200002a0 	.word	0x200002a0
 8004ba8:	2000029c 	.word	0x2000029c

08004bac <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10d      	bne.n	8004bd8 <vTaskPlaceOnEventList+0x2c>
    __asm volatile
 8004bbc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004bc0:	b672      	cpsid	i
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	b662      	cpsie	i
 8004bd0:	60fb      	str	r3, [r7, #12]
}
 8004bd2:	bf00      	nop
 8004bd4:	bf00      	nop
 8004bd6:	e7fd      	b.n	8004bd4 <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bd8:	4b07      	ldr	r3, [pc, #28]	@ (8004bf8 <vTaskPlaceOnEventList+0x4c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3318      	adds	r3, #24
 8004bde:	4619      	mov	r1, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7fe fd41 	bl	8003668 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004be6:	2101      	movs	r1, #1
 8004be8:	6838      	ldr	r0, [r7, #0]
 8004bea:	f000 fb35 	bl	8005258 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8004bee:	bf00      	nop
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	2000029c 	.word	0x2000029c

08004bfc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10d      	bne.n	8004c2a <vTaskPlaceOnEventListRestricted+0x2e>
    __asm volatile
 8004c0e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004c12:	b672      	cpsid	i
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	b662      	cpsie	i
 8004c22:	613b      	str	r3, [r7, #16]
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	e7fd      	b.n	8004c26 <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	4b15      	ldr	r3, [pc, #84]	@ (8004c88 <vTaskPlaceOnEventListRestricted+0x8c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	61da      	str	r2, [r3, #28]
 8004c38:	4b13      	ldr	r3, [pc, #76]	@ (8004c88 <vTaskPlaceOnEventListRestricted+0x8c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	6892      	ldr	r2, [r2, #8]
 8004c40:	621a      	str	r2, [r3, #32]
 8004c42:	4b11      	ldr	r3, [pc, #68]	@ (8004c88 <vTaskPlaceOnEventListRestricted+0x8c>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	3218      	adds	r2, #24
 8004c4c:	605a      	str	r2, [r3, #4]
 8004c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c88 <vTaskPlaceOnEventListRestricted+0x8c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f103 0218 	add.w	r2, r3, #24
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	609a      	str	r2, [r3, #8]
 8004c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c88 <vTaskPlaceOnEventListRestricted+0x8c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 8004c72:	f04f 33ff 	mov.w	r3, #4294967295
 8004c76:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	68b8      	ldr	r0, [r7, #8]
 8004c7c:	f000 faec 	bl	8005258 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8004c80:	bf00      	nop
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	2000029c 	.word	0x2000029c

08004c8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b08b      	sub	sp, #44	@ 0x2c
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10d      	bne.n	8004cbe <xTaskRemoveFromEventList+0x32>
    __asm volatile
 8004ca2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004ca6:	b672      	cpsid	i
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	b662      	cpsie	i
 8004cb6:	60fb      	str	r3, [r7, #12]
}
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop
 8004cbc:	e7fd      	b.n	8004cba <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc2:	61fb      	str	r3, [r7, #28]
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	6a3a      	ldr	r2, [r7, #32]
 8004cca:	6a12      	ldr	r2, [r2, #32]
 8004ccc:	609a      	str	r2, [r3, #8]
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	6a3a      	ldr	r2, [r7, #32]
 8004cd4:	69d2      	ldr	r2, [r2, #28]
 8004cd6:	605a      	str	r2, [r3, #4]
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	3318      	adds	r3, #24
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d103      	bne.n	8004cec <xTaskRemoveFromEventList+0x60>
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	6a1a      	ldr	r2, [r3, #32]
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	605a      	str	r2, [r3, #4]
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	1e5a      	subs	r2, r3, #1
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004cfc:	4b4b      	ldr	r3, [pc, #300]	@ (8004e2c <xTaskRemoveFromEventList+0x1a0>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d160      	bne.n	8004dc6 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	6a3a      	ldr	r2, [r7, #32]
 8004d10:	68d2      	ldr	r2, [r2, #12]
 8004d12:	609a      	str	r2, [r3, #8]
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	6a3a      	ldr	r2, [r7, #32]
 8004d1a:	6892      	ldr	r2, [r2, #8]
 8004d1c:	605a      	str	r2, [r3, #4]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	3304      	adds	r3, #4
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d103      	bne.n	8004d32 <xTaskRemoveFromEventList+0xa6>
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	605a      	str	r2, [r3, #4]
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	2200      	movs	r2, #0
 8004d36:	615a      	str	r2, [r3, #20]
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	1e5a      	subs	r2, r3, #1
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d46:	2201      	movs	r2, #1
 8004d48:	409a      	lsls	r2, r3
 8004d4a:	4b39      	ldr	r3, [pc, #228]	@ (8004e30 <xTaskRemoveFromEventList+0x1a4>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	4a37      	ldr	r2, [pc, #220]	@ (8004e30 <xTaskRemoveFromEventList+0x1a4>)
 8004d52:	6013      	str	r3, [r2, #0]
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d58:	4936      	ldr	r1, [pc, #216]	@ (8004e34 <xTaskRemoveFromEventList+0x1a8>)
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	440b      	add	r3, r1
 8004d64:	3304      	adds	r3, #4
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	609a      	str	r2, [r3, #8]
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	60da      	str	r2, [r3, #12]
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	6a3a      	ldr	r2, [r7, #32]
 8004d7e:	3204      	adds	r2, #4
 8004d80:	605a      	str	r2, [r3, #4]
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	1d1a      	adds	r2, r3, #4
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	609a      	str	r2, [r3, #8]
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d8e:	4613      	mov	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4a27      	ldr	r2, [pc, #156]	@ (8004e34 <xTaskRemoveFromEventList+0x1a8>)
 8004d98:	441a      	add	r2, r3
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	615a      	str	r2, [r3, #20]
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da2:	4924      	ldr	r1, [pc, #144]	@ (8004e34 <xTaskRemoveFromEventList+0x1a8>)
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6a3a      	ldr	r2, [r7, #32]
 8004db2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004db4:	1c59      	adds	r1, r3, #1
 8004db6:	481f      	ldr	r0, [pc, #124]	@ (8004e34 <xTaskRemoveFromEventList+0x1a8>)
 8004db8:	4613      	mov	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4403      	add	r3, r0
 8004dc2:	6019      	str	r1, [r3, #0]
 8004dc4:	e01b      	b.n	8004dfe <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8004e38 <xTaskRemoveFromEventList+0x1ac>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	61bb      	str	r3, [r7, #24]
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	61da      	str	r2, [r3, #28]
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	621a      	str	r2, [r3, #32]
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	6a3a      	ldr	r2, [r7, #32]
 8004de0:	3218      	adds	r2, #24
 8004de2:	605a      	str	r2, [r3, #4]
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	f103 0218 	add.w	r2, r3, #24
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	609a      	str	r2, [r3, #8]
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	4a11      	ldr	r2, [pc, #68]	@ (8004e38 <xTaskRemoveFromEventList+0x1ac>)
 8004df2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004df4:	4b10      	ldr	r3, [pc, #64]	@ (8004e38 <xTaskRemoveFromEventList+0x1ac>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	4a0f      	ldr	r2, [pc, #60]	@ (8004e38 <xTaskRemoveFromEventList+0x1ac>)
 8004dfc:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e02:	4b0e      	ldr	r3, [pc, #56]	@ (8004e3c <xTaskRemoveFromEventList+0x1b0>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d905      	bls.n	8004e18 <xTaskRemoveFromEventList+0x18c>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004e10:	4b0b      	ldr	r3, [pc, #44]	@ (8004e40 <xTaskRemoveFromEventList+0x1b4>)
 8004e12:	2201      	movs	r2, #1
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	e001      	b.n	8004e1c <xTaskRemoveFromEventList+0x190>
        }
        else
        {
            xReturn = pdFALSE;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	372c      	adds	r7, #44	@ 0x2c
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	2000039c 	.word	0x2000039c
 8004e30:	2000037c 	.word	0x2000037c
 8004e34:	200002a0 	.word	0x200002a0
 8004e38:	20000334 	.word	0x20000334
 8004e3c:	2000029c 	.word	0x2000029c
 8004e40:	20000388 	.word	0x20000388

08004e44 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e4c:	4b06      	ldr	r3, [pc, #24]	@ (8004e68 <vTaskInternalSetTimeOutState+0x24>)
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004e54:	4b05      	ldr	r3, [pc, #20]	@ (8004e6c <vTaskInternalSetTimeOutState+0x28>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	2000038c 	.word	0x2000038c
 8004e6c:	20000378 	.word	0x20000378

08004e70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10d      	bne.n	8004e9c <xTaskCheckForTimeOut+0x2c>
    __asm volatile
 8004e80:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004e84:	b672      	cpsid	i
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	b662      	cpsie	i
 8004e94:	613b      	str	r3, [r7, #16]
}
 8004e96:	bf00      	nop
 8004e98:	bf00      	nop
 8004e9a:	e7fd      	b.n	8004e98 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10d      	bne.n	8004ebe <xTaskCheckForTimeOut+0x4e>
    __asm volatile
 8004ea2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004ea6:	b672      	cpsid	i
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	b662      	cpsie	i
 8004eb6:	60fb      	str	r3, [r7, #12]
}
 8004eb8:	bf00      	nop
 8004eba:	bf00      	nop
 8004ebc:	e7fd      	b.n	8004eba <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 8004ebe:	f000 fe61 	bl	8005b84 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8004f40 <xTaskCheckForTimeOut+0xd0>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eda:	d102      	bne.n	8004ee2 <xTaskCheckForTimeOut+0x72>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004edc:	2300      	movs	r3, #0
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	e026      	b.n	8004f30 <xTaskCheckForTimeOut+0xc0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	4b17      	ldr	r3, [pc, #92]	@ (8004f44 <xTaskCheckForTimeOut+0xd4>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d00a      	beq.n	8004f04 <xTaskCheckForTimeOut+0x94>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d305      	bcc.n	8004f04 <xTaskCheckForTimeOut+0x94>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	e015      	b.n	8004f30 <xTaskCheckForTimeOut+0xc0>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d20b      	bcs.n	8004f26 <xTaskCheckForTimeOut+0xb6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	1ad2      	subs	r2, r2, r3
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff ff92 	bl	8004e44 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	e004      	b.n	8004f30 <xTaskCheckForTimeOut+0xc0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004f30:	f000 fe5e 	bl	8005bf0 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8004f34:	69fb      	ldr	r3, [r7, #28]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3720      	adds	r7, #32
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000378 	.word	0x20000378
 8004f44:	2000038c 	.word	0x2000038c

08004f48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8004f4c:	4b03      	ldr	r3, [pc, #12]	@ (8004f5c <vTaskMissedYield+0x14>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8004f52:	bf00      	nop
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	20000388 	.word	0x20000388

08004f60 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004f68:	f000 f852 	bl	8005010 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8004f6c:	4b06      	ldr	r3, [pc, #24]	@ (8004f88 <prvIdleTask+0x28>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d9f9      	bls.n	8004f68 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004f74:	4b05      	ldr	r3, [pc, #20]	@ (8004f8c <prvIdleTask+0x2c>)
 8004f76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004f84:	e7f0      	b.n	8004f68 <prvIdleTask+0x8>
 8004f86:	bf00      	nop
 8004f88:	200002a0 	.word	0x200002a0
 8004f8c:	e000ed04 	.word	0xe000ed04

08004f90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f96:	2300      	movs	r3, #0
 8004f98:	607b      	str	r3, [r7, #4]
 8004f9a:	e00c      	b.n	8004fb6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4a12      	ldr	r2, [pc, #72]	@ (8004ff0 <prvInitialiseTaskLists+0x60>)
 8004fa8:	4413      	add	r3, r2
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fe fb2f 	bl	800360e <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	607b      	str	r3, [r7, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d9ef      	bls.n	8004f9c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004fbc:	480d      	ldr	r0, [pc, #52]	@ (8004ff4 <prvInitialiseTaskLists+0x64>)
 8004fbe:	f7fe fb26 	bl	800360e <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004fc2:	480d      	ldr	r0, [pc, #52]	@ (8004ff8 <prvInitialiseTaskLists+0x68>)
 8004fc4:	f7fe fb23 	bl	800360e <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004fc8:	480c      	ldr	r0, [pc, #48]	@ (8004ffc <prvInitialiseTaskLists+0x6c>)
 8004fca:	f7fe fb20 	bl	800360e <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004fce:	480c      	ldr	r0, [pc, #48]	@ (8005000 <prvInitialiseTaskLists+0x70>)
 8004fd0:	f7fe fb1d 	bl	800360e <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004fd4:	480b      	ldr	r0, [pc, #44]	@ (8005004 <prvInitialiseTaskLists+0x74>)
 8004fd6:	f7fe fb1a 	bl	800360e <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004fda:	4b0b      	ldr	r3, [pc, #44]	@ (8005008 <prvInitialiseTaskLists+0x78>)
 8004fdc:	4a05      	ldr	r2, [pc, #20]	@ (8004ff4 <prvInitialiseTaskLists+0x64>)
 8004fde:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800500c <prvInitialiseTaskLists+0x7c>)
 8004fe2:	4a05      	ldr	r2, [pc, #20]	@ (8004ff8 <prvInitialiseTaskLists+0x68>)
 8004fe4:	601a      	str	r2, [r3, #0]
}
 8004fe6:	bf00      	nop
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	200002a0 	.word	0x200002a0
 8004ff4:	20000304 	.word	0x20000304
 8004ff8:	20000318 	.word	0x20000318
 8004ffc:	20000334 	.word	0x20000334
 8005000:	20000348 	.word	0x20000348
 8005004:	20000360 	.word	0x20000360
 8005008:	2000032c 	.word	0x2000032c
 800500c:	20000330 	.word	0x20000330

08005010 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005016:	e019      	b.n	800504c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8005018:	f000 fdb4 	bl	8005b84 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800501c:	4b10      	ldr	r3, [pc, #64]	@ (8005060 <prvCheckTasksWaitingTermination+0x50>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3304      	adds	r3, #4
 8005028:	4618      	mov	r0, r3
 800502a:	f7fe fb56 	bl	80036da <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800502e:	4b0d      	ldr	r3, [pc, #52]	@ (8005064 <prvCheckTasksWaitingTermination+0x54>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3b01      	subs	r3, #1
 8005034:	4a0b      	ldr	r2, [pc, #44]	@ (8005064 <prvCheckTasksWaitingTermination+0x54>)
 8005036:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8005038:	4b0b      	ldr	r3, [pc, #44]	@ (8005068 <prvCheckTasksWaitingTermination+0x58>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3b01      	subs	r3, #1
 800503e:	4a0a      	ldr	r2, [pc, #40]	@ (8005068 <prvCheckTasksWaitingTermination+0x58>)
 8005040:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8005042:	f000 fdd5 	bl	8005bf0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f810 	bl	800506c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800504c:	4b06      	ldr	r3, [pc, #24]	@ (8005068 <prvCheckTasksWaitingTermination+0x58>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e1      	bne.n	8005018 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005054:	bf00      	nop
 8005056:	bf00      	nop
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000348 	.word	0x20000348
 8005064:	20000374 	.word	0x20000374
 8005068:	2000035c 	.word	0x2000035c

0800506c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005078:	4618      	mov	r0, r3
 800507a:	f000 ffaf 	bl	8005fdc <vPortFree>
            vPortFree( pxTCB );
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 ffac 	bl	8005fdc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005084:	bf00      	nop
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005090:	4b0a      	ldr	r3, [pc, #40]	@ (80050bc <prvResetNextTaskUnblockTime+0x30>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d104      	bne.n	80050a4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800509a:	4b09      	ldr	r3, [pc, #36]	@ (80050c0 <prvResetNextTaskUnblockTime+0x34>)
 800509c:	f04f 32ff 	mov.w	r2, #4294967295
 80050a0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80050a2:	e005      	b.n	80050b0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80050a4:	4b05      	ldr	r3, [pc, #20]	@ (80050bc <prvResetNextTaskUnblockTime+0x30>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a04      	ldr	r2, [pc, #16]	@ (80050c0 <prvResetNextTaskUnblockTime+0x34>)
 80050ae:	6013      	str	r3, [r2, #0]
}
 80050b0:	bf00      	nop
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	2000032c 	.word	0x2000032c
 80050c0:	20000394 	.word	0x20000394

080050c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80050ca:	4b0b      	ldr	r3, [pc, #44]	@ (80050f8 <xTaskGetSchedulerState+0x34>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d102      	bne.n	80050d8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80050d2:	2301      	movs	r3, #1
 80050d4:	607b      	str	r3, [r7, #4]
 80050d6:	e008      	b.n	80050ea <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80050d8:	4b08      	ldr	r3, [pc, #32]	@ (80050fc <xTaskGetSchedulerState+0x38>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d102      	bne.n	80050e6 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80050e0:	2302      	movs	r3, #2
 80050e2:	607b      	str	r3, [r7, #4]
 80050e4:	e001      	b.n	80050ea <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80050e6:	2300      	movs	r3, #0
 80050e8:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 80050ea:	687b      	ldr	r3, [r7, #4]
    }
 80050ec:	4618      	mov	r0, r3
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	20000380 	.word	0x20000380
 80050fc:	2000039c 	.word	0x2000039c

08005100 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800510c:	2300      	movs	r3, #0
 800510e:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 8094 	beq.w	8005240 <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005118:	4b4c      	ldr	r3, [pc, #304]	@ (800524c <xTaskPriorityDisinherit+0x14c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	429a      	cmp	r2, r3
 8005120:	d00d      	beq.n	800513e <xTaskPriorityDisinherit+0x3e>
    __asm volatile
 8005122:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005126:	b672      	cpsid	i
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	b662      	cpsie	i
 8005136:	613b      	str	r3, [r7, #16]
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	e7fd      	b.n	800513a <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10d      	bne.n	8005162 <xTaskPriorityDisinherit+0x62>
    __asm volatile
 8005146:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800514a:	b672      	cpsid	i
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	b662      	cpsie	i
 800515a:	60fb      	str	r3, [r7, #12]
}
 800515c:	bf00      	nop
 800515e:	bf00      	nop
 8005160:	e7fd      	b.n	800515e <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005166:	1e5a      	subs	r2, r3, #1
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005174:	429a      	cmp	r2, r3
 8005176:	d063      	beq.n	8005240 <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800517c:	2b00      	cmp	r3, #0
 800517e:	d15f      	bne.n	8005240 <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	3304      	adds	r3, #4
 8005184:	4618      	mov	r0, r3
 8005186:	f7fe faa8 	bl	80036da <uxListRemove>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10a      	bne.n	80051a6 <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005194:	2201      	movs	r2, #1
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	43da      	mvns	r2, r3
 800519c:	4b2c      	ldr	r3, [pc, #176]	@ (8005250 <xTaskPriorityDisinherit+0x150>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4013      	ands	r3, r2
 80051a2:	4a2b      	ldr	r2, [pc, #172]	@ (8005250 <xTaskPriorityDisinherit+0x150>)
 80051a4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b2:	f1c3 0205 	rsb	r2, r3, #5
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051be:	2201      	movs	r2, #1
 80051c0:	409a      	lsls	r2, r3
 80051c2:	4b23      	ldr	r3, [pc, #140]	@ (8005250 <xTaskPriorityDisinherit+0x150>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	4a21      	ldr	r2, [pc, #132]	@ (8005250 <xTaskPriorityDisinherit+0x150>)
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051d0:	4920      	ldr	r1, [pc, #128]	@ (8005254 <xTaskPriorityDisinherit+0x154>)
 80051d2:	4613      	mov	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	440b      	add	r3, r1
 80051dc:	3304      	adds	r3, #4
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	609a      	str	r2, [r3, #8]
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	60da      	str	r2, [r3, #12]
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	3204      	adds	r2, #4
 80051f8:	605a      	str	r2, [r3, #4]
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	1d1a      	adds	r2, r3, #4
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	609a      	str	r2, [r3, #8]
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005206:	4613      	mov	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4a11      	ldr	r2, [pc, #68]	@ (8005254 <xTaskPriorityDisinherit+0x154>)
 8005210:	441a      	add	r2, r3
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	615a      	str	r2, [r3, #20]
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800521a:	490e      	ldr	r1, [pc, #56]	@ (8005254 <xTaskPriorityDisinherit+0x154>)
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	440b      	add	r3, r1
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800522c:	1c59      	adds	r1, r3, #1
 800522e:	4809      	ldr	r0, [pc, #36]	@ (8005254 <xTaskPriorityDisinherit+0x154>)
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4403      	add	r3, r0
 800523a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800523c:	2301      	movs	r3, #1
 800523e:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8005240:	69fb      	ldr	r3, [r7, #28]
    }
 8005242:	4618      	mov	r0, r3
 8005244:	3720      	adds	r7, #32
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	2000029c 	.word	0x2000029c
 8005250:	2000037c 	.word	0x2000037c
 8005254:	200002a0 	.word	0x200002a0

08005258 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005262:	4b37      	ldr	r3, [pc, #220]	@ (8005340 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8005268:	4b36      	ldr	r3, [pc, #216]	@ (8005344 <prvAddCurrentTaskToDelayedList+0xec>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800526e:	4b36      	ldr	r3, [pc, #216]	@ (8005348 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005274:	4b35      	ldr	r3, [pc, #212]	@ (800534c <prvAddCurrentTaskToDelayedList+0xf4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3304      	adds	r3, #4
 800527a:	4618      	mov	r0, r3
 800527c:	f7fe fa2d 	bl	80036da <uxListRemove>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10b      	bne.n	800529e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005286:	4b31      	ldr	r3, [pc, #196]	@ (800534c <prvAddCurrentTaskToDelayedList+0xf4>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528c:	2201      	movs	r2, #1
 800528e:	fa02 f303 	lsl.w	r3, r2, r3
 8005292:	43da      	mvns	r2, r3
 8005294:	4b2e      	ldr	r3, [pc, #184]	@ (8005350 <prvAddCurrentTaskToDelayedList+0xf8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4013      	ands	r3, r2
 800529a:	4a2d      	ldr	r2, [pc, #180]	@ (8005350 <prvAddCurrentTaskToDelayedList+0xf8>)
 800529c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a4:	d124      	bne.n	80052f0 <prvAddCurrentTaskToDelayedList+0x98>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d021      	beq.n	80052f0 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052ac:	4b29      	ldr	r3, [pc, #164]	@ (8005354 <prvAddCurrentTaskToDelayedList+0xfc>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	613b      	str	r3, [r7, #16]
 80052b2:	4b26      	ldr	r3, [pc, #152]	@ (800534c <prvAddCurrentTaskToDelayedList+0xf4>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	609a      	str	r2, [r3, #8]
 80052ba:	4b24      	ldr	r3, [pc, #144]	@ (800534c <prvAddCurrentTaskToDelayedList+0xf4>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	6892      	ldr	r2, [r2, #8]
 80052c2:	60da      	str	r2, [r3, #12]
 80052c4:	4b21      	ldr	r3, [pc, #132]	@ (800534c <prvAddCurrentTaskToDelayedList+0xf4>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	3204      	adds	r2, #4
 80052ce:	605a      	str	r2, [r3, #4]
 80052d0:	4b1e      	ldr	r3, [pc, #120]	@ (800534c <prvAddCurrentTaskToDelayedList+0xf4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	1d1a      	adds	r2, r3, #4
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	609a      	str	r2, [r3, #8]
 80052da:	4b1c      	ldr	r3, [pc, #112]	@ (800534c <prvAddCurrentTaskToDelayedList+0xf4>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1d      	ldr	r2, [pc, #116]	@ (8005354 <prvAddCurrentTaskToDelayedList+0xfc>)
 80052e0:	615a      	str	r2, [r3, #20]
 80052e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005354 <prvAddCurrentTaskToDelayedList+0xfc>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3301      	adds	r3, #1
 80052e8:	4a1a      	ldr	r2, [pc, #104]	@ (8005354 <prvAddCurrentTaskToDelayedList+0xfc>)
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80052ee:	e022      	b.n	8005336 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4413      	add	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052f8:	4b14      	ldr	r3, [pc, #80]	@ (800534c <prvAddCurrentTaskToDelayedList+0xf4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	429a      	cmp	r2, r3
 8005306:	d207      	bcs.n	8005318 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8005308:	4b10      	ldr	r3, [pc, #64]	@ (800534c <prvAddCurrentTaskToDelayedList+0xf4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3304      	adds	r3, #4
 800530e:	4619      	mov	r1, r3
 8005310:	6978      	ldr	r0, [r7, #20]
 8005312:	f7fe f9a9 	bl	8003668 <vListInsert>
}
 8005316:	e00e      	b.n	8005336 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8005318:	4b0c      	ldr	r3, [pc, #48]	@ (800534c <prvAddCurrentTaskToDelayedList+0xf4>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3304      	adds	r3, #4
 800531e:	4619      	mov	r1, r3
 8005320:	69b8      	ldr	r0, [r7, #24]
 8005322:	f7fe f9a1 	bl	8003668 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8005326:	4b0c      	ldr	r3, [pc, #48]	@ (8005358 <prvAddCurrentTaskToDelayedList+0x100>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	429a      	cmp	r2, r3
 800532e:	d202      	bcs.n	8005336 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8005330:	4a09      	ldr	r2, [pc, #36]	@ (8005358 <prvAddCurrentTaskToDelayedList+0x100>)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6013      	str	r3, [r2, #0]
}
 8005336:	bf00      	nop
 8005338:	3720      	adds	r7, #32
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20000378 	.word	0x20000378
 8005344:	2000032c 	.word	0x2000032c
 8005348:	20000330 	.word	0x20000330
 800534c:	2000029c 	.word	0x2000029c
 8005350:	2000037c 	.word	0x2000037c
 8005354:	20000360 	.word	0x20000360
 8005358:	20000394 	.word	0x20000394

0800535c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005362:	2300      	movs	r3, #0
 8005364:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005366:	f000 fa77 	bl	8005858 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800536a:	4b13      	ldr	r3, [pc, #76]	@ (80053b8 <xTimerCreateTimerTask+0x5c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00b      	beq.n	800538a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8005372:	4b12      	ldr	r3, [pc, #72]	@ (80053bc <xTimerCreateTimerTask+0x60>)
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	2304      	movs	r3, #4
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	2300      	movs	r3, #0
 800537c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005380:	490f      	ldr	r1, [pc, #60]	@ (80053c0 <xTimerCreateTimerTask+0x64>)
 8005382:	4810      	ldr	r0, [pc, #64]	@ (80053c4 <xTimerCreateTimerTask+0x68>)
 8005384:	f7fe ff49 	bl	800421a <xTaskCreate>
 8005388:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10d      	bne.n	80053ac <xTimerCreateTimerTask+0x50>
    __asm volatile
 8005390:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005394:	b672      	cpsid	i
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	b662      	cpsie	i
 80053a4:	603b      	str	r3, [r7, #0]
}
 80053a6:	bf00      	nop
 80053a8:	bf00      	nop
 80053aa:	e7fd      	b.n	80053a8 <xTimerCreateTimerTask+0x4c>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 80053ac:	687b      	ldr	r3, [r7, #4]
    }
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	200003d0 	.word	0x200003d0
 80053bc:	200003d4 	.word	0x200003d4
 80053c0:	08006c8c 	.word	0x08006c8c
 80053c4:	0800546d 	.word	0x0800546d

080053c8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80053d4:	e008      	b.n	80053e8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	4413      	add	r3, r2
 80053de:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	699a      	ldr	r2, [r3, #24]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	18d1      	adds	r1, r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f8df 	bl	80055b8 <prvInsertTimerInActiveList>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1ea      	bne.n	80053d6 <prvReloadTimer+0xe>
        }
    }
 8005400:	bf00      	nop
 8005402:	bf00      	nop
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005416:	4b14      	ldr	r3, [pc, #80]	@ (8005468 <prvProcessExpiredTimer+0x5c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3304      	adds	r3, #4
 8005424:	4618      	mov	r0, r3
 8005426:	f7fe f958 	bl	80036da <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f7ff ffc3 	bl	80053c8 <prvReloadTimer>
 8005442:	e008      	b.n	8005456 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800544a:	f023 0301 	bic.w	r3, r3, #1
 800544e:	b2da      	uxtb	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	4798      	blx	r3
    }
 800545e:	bf00      	nop
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	200003c8 	.word	0x200003c8

0800546c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005474:	f107 0308 	add.w	r3, r7, #8
 8005478:	4618      	mov	r0, r3
 800547a:	f000 f859 	bl	8005530 <prvGetNextExpireTime>
 800547e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4619      	mov	r1, r3
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f805 	bl	8005494 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800548a:	f000 f8d7 	bl	800563c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800548e:	bf00      	nop
 8005490:	e7f0      	b.n	8005474 <prvTimerTask+0x8>
	...

08005494 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800549e:	f7ff f8d5 	bl	800464c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054a2:	f107 0308 	add.w	r3, r7, #8
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 f866 	bl	8005578 <prvSampleTimeNow>
 80054ac:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d130      	bne.n	8005516 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10a      	bne.n	80054d0 <prvProcessTimerOrBlockTask+0x3c>
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d806      	bhi.n	80054d0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80054c2:	f7ff f8d1 	bl	8004668 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80054c6:	68f9      	ldr	r1, [r7, #12]
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff ff9f 	bl	800540c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80054ce:	e024      	b.n	800551a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d008      	beq.n	80054e8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80054d6:	4b13      	ldr	r3, [pc, #76]	@ (8005524 <prvProcessTimerOrBlockTask+0x90>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <prvProcessTimerOrBlockTask+0x50>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e000      	b.n	80054e6 <prvProcessTimerOrBlockTask+0x52>
 80054e4:	2300      	movs	r3, #0
 80054e6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80054e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005528 <prvProcessTimerOrBlockTask+0x94>)
 80054ea:	6818      	ldr	r0, [r3, #0]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	4619      	mov	r1, r3
 80054f6:	f7fe fda7 	bl	8004048 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80054fa:	f7ff f8b5 	bl	8004668 <xTaskResumeAll>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10a      	bne.n	800551a <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8005504:	4b09      	ldr	r3, [pc, #36]	@ (800552c <prvProcessTimerOrBlockTask+0x98>)
 8005506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	f3bf 8f6f 	isb	sy
    }
 8005514:	e001      	b.n	800551a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005516:	f7ff f8a7 	bl	8004668 <xTaskResumeAll>
    }
 800551a:	bf00      	nop
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	200003cc 	.word	0x200003cc
 8005528:	200003d0 	.word	0x200003d0
 800552c:	e000ed04 	.word	0xe000ed04

08005530 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005538:	4b0e      	ldr	r3, [pc, #56]	@ (8005574 <prvGetNextExpireTime+0x44>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <prvGetNextExpireTime+0x16>
 8005542:	2201      	movs	r2, #1
 8005544:	e000      	b.n	8005548 <prvGetNextExpireTime+0x18>
 8005546:	2200      	movs	r2, #0
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d105      	bne.n	8005560 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005554:	4b07      	ldr	r3, [pc, #28]	@ (8005574 <prvGetNextExpireTime+0x44>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	e001      	b.n	8005564 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005564:	68fb      	ldr	r3, [r7, #12]
    }
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	200003c8 	.word	0x200003c8

08005578 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8005580:	f7ff f97c 	bl	800487c <xTaskGetTickCount>
 8005584:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005586:	4b0b      	ldr	r3, [pc, #44]	@ (80055b4 <prvSampleTimeNow+0x3c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	429a      	cmp	r2, r3
 800558e:	d205      	bcs.n	800559c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005590:	f000 f93c 	bl	800580c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	e002      	b.n	80055a2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80055a2:	4a04      	ldr	r2, [pc, #16]	@ (80055b4 <prvSampleTimeNow+0x3c>)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80055a8:	68fb      	ldr	r3, [r7, #12]
    }
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	200003d8 	.word	0x200003d8

080055b8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80055c6:	2300      	movs	r3, #0
 80055c8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d812      	bhi.n	8005604 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	1ad2      	subs	r2, r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d302      	bcc.n	80055f2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80055ec:	2301      	movs	r3, #1
 80055ee:	617b      	str	r3, [r7, #20]
 80055f0:	e01b      	b.n	800562a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80055f2:	4b10      	ldr	r3, [pc, #64]	@ (8005634 <prvInsertTimerInActiveList+0x7c>)
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3304      	adds	r3, #4
 80055fa:	4619      	mov	r1, r3
 80055fc:	4610      	mov	r0, r2
 80055fe:	f7fe f833 	bl	8003668 <vListInsert>
 8005602:	e012      	b.n	800562a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	429a      	cmp	r2, r3
 800560a:	d206      	bcs.n	800561a <prvInsertTimerInActiveList+0x62>
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d302      	bcc.n	800561a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005614:	2301      	movs	r3, #1
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	e007      	b.n	800562a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800561a:	4b07      	ldr	r3, [pc, #28]	@ (8005638 <prvInsertTimerInActiveList+0x80>)
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3304      	adds	r3, #4
 8005622:	4619      	mov	r1, r3
 8005624:	4610      	mov	r0, r2
 8005626:	f7fe f81f 	bl	8003668 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800562a:	697b      	ldr	r3, [r7, #20]
    }
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	200003cc 	.word	0x200003cc
 8005638:	200003c8 	.word	0x200003c8

0800563c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800563c:	b580      	push	{r7, lr}
 800563e:	b08a      	sub	sp, #40	@ 0x28
 8005640:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8005642:	1d3b      	adds	r3, r7, #4
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	605a      	str	r2, [r3, #4]
 800564a:	609a      	str	r2, [r3, #8]
 800564c:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800564e:	e0cb      	b.n	80057e8 <prvProcessReceivedCommands+0x1ac>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	da1b      	bge.n	800568e <prvProcessReceivedCommands+0x52>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005656:	1d3b      	adds	r3, r7, #4
 8005658:	3304      	adds	r3, #4
 800565a:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800565c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10d      	bne.n	800567e <prvProcessReceivedCommands+0x42>
    __asm volatile
 8005662:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005666:	b672      	cpsid	i
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	b662      	cpsie	i
 8005676:	61bb      	str	r3, [r7, #24]
}
 8005678:	bf00      	nop
 800567a:	bf00      	nop
 800567c:	e7fd      	b.n	800567a <prvProcessReceivedCommands+0x3e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800567e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005684:	6850      	ldr	r0, [r2, #4]
 8005686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005688:	6892      	ldr	r2, [r2, #8]
 800568a:	4611      	mov	r1, r2
 800568c:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	f2c0 80a9 	blt.w	80057e8 <prvProcessReceivedCommands+0x1ac>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d004      	beq.n	80056ac <prvProcessReceivedCommands+0x70>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	3304      	adds	r3, #4
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fe f817 	bl	80036da <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056ac:	463b      	mov	r3, r7
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff ff62 	bl	8005578 <prvSampleTimeNow>
 80056b4:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	2b08      	cmp	r3, #8
 80056bc:	f200 8091 	bhi.w	80057e2 <prvProcessReceivedCommands+0x1a6>
 80056c0:	a201      	add	r2, pc, #4	@ (adr r2, 80056c8 <prvProcessReceivedCommands+0x8c>)
 80056c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c6:	bf00      	nop
 80056c8:	080056ed 	.word	0x080056ed
 80056cc:	080056ed 	.word	0x080056ed
 80056d0:	08005755 	.word	0x08005755
 80056d4:	08005769 	.word	0x08005769
 80056d8:	080057b9 	.word	0x080057b9
 80056dc:	080056ed 	.word	0x080056ed
 80056e0:	080056ed 	.word	0x080056ed
 80056e4:	08005755 	.word	0x08005755
 80056e8:	08005769 	.word	0x08005769
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	18d1      	adds	r1, r2, r3
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	6a38      	ldr	r0, [r7, #32]
 800570c:	f7ff ff54 	bl	80055b8 <prvInsertTimerInActiveList>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d067      	beq.n	80057e6 <prvProcessReceivedCommands+0x1aa>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	d009      	beq.n	8005738 <prvProcessReceivedCommands+0xfc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	4413      	add	r3, r2
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	4619      	mov	r1, r3
 8005730:	6a38      	ldr	r0, [r7, #32]
 8005732:	f7ff fe49 	bl	80053c8 <prvReloadTimer>
 8005736:	e008      	b.n	800574a <prvProcessReceivedCommands+0x10e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800573e:	f023 0301 	bic.w	r3, r3, #1
 8005742:	b2da      	uxtb	r2, r3
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	6a38      	ldr	r0, [r7, #32]
 8005750:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005752:	e048      	b.n	80057e6 <prvProcessReceivedCommands+0x1aa>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800575a:	f023 0301 	bic.w	r3, r3, #1
 800575e:	b2da      	uxtb	r2, r3
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8005766:	e03f      	b.n	80057e8 <prvProcessReceivedCommands+0x1ac>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	b2da      	uxtb	r2, r3
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10d      	bne.n	80057a4 <prvProcessReceivedCommands+0x168>
    __asm volatile
 8005788:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800578c:	b672      	cpsid	i
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	b662      	cpsie	i
 800579c:	617b      	str	r3, [r7, #20]
}
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
 80057a2:	e7fd      	b.n	80057a0 <prvProcessReceivedCommands+0x164>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	699a      	ldr	r2, [r3, #24]
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	18d1      	adds	r1, r2, r3
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	6a38      	ldr	r0, [r7, #32]
 80057b2:	f7ff ff01 	bl	80055b8 <prvInsertTimerInActiveList>
                        break;
 80057b6:	e017      	b.n	80057e8 <prvProcessReceivedCommands+0x1ac>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d103      	bne.n	80057ce <prvProcessReceivedCommands+0x192>
                            {
                                vPortFree( pxTimer );
 80057c6:	6a38      	ldr	r0, [r7, #32]
 80057c8:	f000 fc08 	bl	8005fdc <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80057cc:	e00c      	b.n	80057e8 <prvProcessReceivedCommands+0x1ac>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057d4:	f023 0301 	bic.w	r3, r3, #1
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80057e0:	e002      	b.n	80057e8 <prvProcessReceivedCommands+0x1ac>

                    default:
                        /* Don't expect to get here. */
                        break;
 80057e2:	bf00      	nop
 80057e4:	e000      	b.n	80057e8 <prvProcessReceivedCommands+0x1ac>
                        break;
 80057e6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80057e8:	4b07      	ldr	r3, [pc, #28]	@ (8005808 <prvProcessReceivedCommands+0x1cc>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	1d39      	adds	r1, r7, #4
 80057ee:	2200      	movs	r2, #0
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fe f9d1 	bl	8003b98 <xQueueReceive>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f47f af29 	bne.w	8005650 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 80057fe:	bf00      	nop
 8005800:	bf00      	nop
 8005802:	3728      	adds	r7, #40	@ 0x28
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	200003d0 	.word	0x200003d0

0800580c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005812:	e009      	b.n	8005828 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005814:	4b0e      	ldr	r3, [pc, #56]	@ (8005850 <prvSwitchTimerLists+0x44>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800581e:	f04f 31ff 	mov.w	r1, #4294967295
 8005822:	6838      	ldr	r0, [r7, #0]
 8005824:	f7ff fdf2 	bl	800540c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005828:	4b09      	ldr	r3, [pc, #36]	@ (8005850 <prvSwitchTimerLists+0x44>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1f0      	bne.n	8005814 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005832:	4b07      	ldr	r3, [pc, #28]	@ (8005850 <prvSwitchTimerLists+0x44>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005838:	4b06      	ldr	r3, [pc, #24]	@ (8005854 <prvSwitchTimerLists+0x48>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a04      	ldr	r2, [pc, #16]	@ (8005850 <prvSwitchTimerLists+0x44>)
 800583e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005840:	4a04      	ldr	r2, [pc, #16]	@ (8005854 <prvSwitchTimerLists+0x48>)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6013      	str	r3, [r2, #0]
    }
 8005846:	bf00      	nop
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	200003c8 	.word	0x200003c8
 8005854:	200003cc 	.word	0x200003cc

08005858 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800585c:	f000 f992 	bl	8005b84 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005860:	4b12      	ldr	r3, [pc, #72]	@ (80058ac <prvCheckForValidListAndQueue+0x54>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d11d      	bne.n	80058a4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005868:	4811      	ldr	r0, [pc, #68]	@ (80058b0 <prvCheckForValidListAndQueue+0x58>)
 800586a:	f7fd fed0 	bl	800360e <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800586e:	4811      	ldr	r0, [pc, #68]	@ (80058b4 <prvCheckForValidListAndQueue+0x5c>)
 8005870:	f7fd fecd 	bl	800360e <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005874:	4b10      	ldr	r3, [pc, #64]	@ (80058b8 <prvCheckForValidListAndQueue+0x60>)
 8005876:	4a0e      	ldr	r2, [pc, #56]	@ (80058b0 <prvCheckForValidListAndQueue+0x58>)
 8005878:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800587a:	4b10      	ldr	r3, [pc, #64]	@ (80058bc <prvCheckForValidListAndQueue+0x64>)
 800587c:	4a0d      	ldr	r2, [pc, #52]	@ (80058b4 <prvCheckForValidListAndQueue+0x5c>)
 800587e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8005880:	2200      	movs	r2, #0
 8005882:	2110      	movs	r1, #16
 8005884:	2005      	movs	r0, #5
 8005886:	f7fd ffe9 	bl	800385c <xQueueGenericCreate>
 800588a:	4603      	mov	r3, r0
 800588c:	4a07      	ldr	r2, [pc, #28]	@ (80058ac <prvCheckForValidListAndQueue+0x54>)
 800588e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8005890:	4b06      	ldr	r3, [pc, #24]	@ (80058ac <prvCheckForValidListAndQueue+0x54>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005898:	4b04      	ldr	r3, [pc, #16]	@ (80058ac <prvCheckForValidListAndQueue+0x54>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4908      	ldr	r1, [pc, #32]	@ (80058c0 <prvCheckForValidListAndQueue+0x68>)
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fe fb80 	bl	8003fa4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80058a4:	f000 f9a4 	bl	8005bf0 <vPortExitCritical>
    }
 80058a8:	bf00      	nop
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	200003d0 	.word	0x200003d0
 80058b0:	200003a0 	.word	0x200003a0
 80058b4:	200003b4 	.word	0x200003b4
 80058b8:	200003c8 	.word	0x200003c8
 80058bc:	200003cc 	.word	0x200003cc
 80058c0:	08006c94 	.word	0x08006c94

080058c4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	3b04      	subs	r3, #4
 80058d4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80058dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3b04      	subs	r3, #4
 80058e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f023 0201 	bic.w	r2, r3, #1
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3b04      	subs	r3, #4
 80058f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80058f4:	4a0c      	ldr	r2, [pc, #48]	@ (8005928 <pxPortInitialiseStack+0x64>)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	3b14      	subs	r3, #20
 80058fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3b04      	subs	r3, #4
 800590a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f06f 0202 	mvn.w	r2, #2
 8005912:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	3b20      	subs	r3, #32
 8005918:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800591a:	68fb      	ldr	r3, [r7, #12]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	0800592d 	.word	0x0800592d

0800592c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005932:	2300      	movs	r3, #0
 8005934:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005936:	4b15      	ldr	r3, [pc, #84]	@ (800598c <prvTaskExitError+0x60>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593e:	d00d      	beq.n	800595c <prvTaskExitError+0x30>
    __asm volatile
 8005940:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005944:	b672      	cpsid	i
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	b662      	cpsie	i
 8005954:	60fb      	str	r3, [r7, #12]
}
 8005956:	bf00      	nop
 8005958:	bf00      	nop
 800595a:	e7fd      	b.n	8005958 <prvTaskExitError+0x2c>
    __asm volatile
 800595c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005960:	b672      	cpsid	i
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	b662      	cpsie	i
 8005970:	60bb      	str	r3, [r7, #8]
}
 8005972:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005974:	bf00      	nop
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0fc      	beq.n	8005976 <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800597c:	bf00      	nop
 800597e:	bf00      	nop
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	20000010 	.word	0x20000010

08005990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005990:	4b07      	ldr	r3, [pc, #28]	@ (80059b0 <pxCurrentTCBConst2>)
 8005992:	6819      	ldr	r1, [r3, #0]
 8005994:	6808      	ldr	r0, [r1, #0]
 8005996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599a:	f380 8809 	msr	PSP, r0
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f04f 0000 	mov.w	r0, #0
 80059a6:	f380 8811 	msr	BASEPRI, r0
 80059aa:	4770      	bx	lr
 80059ac:	f3af 8000 	nop.w

080059b0 <pxCurrentTCBConst2>:
 80059b0:	2000029c 	.word	0x2000029c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop

080059b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80059b8:	4808      	ldr	r0, [pc, #32]	@ (80059dc <prvPortStartFirstTask+0x24>)
 80059ba:	6800      	ldr	r0, [r0, #0]
 80059bc:	6800      	ldr	r0, [r0, #0]
 80059be:	f380 8808 	msr	MSP, r0
 80059c2:	f04f 0000 	mov.w	r0, #0
 80059c6:	f380 8814 	msr	CONTROL, r0
 80059ca:	b662      	cpsie	i
 80059cc:	b661      	cpsie	f
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	df00      	svc	0
 80059d8:	bf00      	nop
 80059da:	0000      	.short	0x0000
 80059dc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80059e0:	bf00      	nop
 80059e2:	bf00      	nop

080059e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08a      	sub	sp, #40	@ 0x28
 80059e8:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80059ea:	4b5c      	ldr	r3, [pc, #368]	@ (8005b5c <xPortStartScheduler+0x178>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	332c      	adds	r3, #44	@ 0x2c
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a5a      	ldr	r2, [pc, #360]	@ (8005b60 <xPortStartScheduler+0x17c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00d      	beq.n	8005a18 <xPortStartScheduler+0x34>
    __asm volatile
 80059fc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005a00:	b672      	cpsid	i
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	b662      	cpsie	i
 8005a10:	61fb      	str	r3, [r7, #28]
}
 8005a12:	bf00      	nop
 8005a14:	bf00      	nop
 8005a16:	e7fd      	b.n	8005a14 <xPortStartScheduler+0x30>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8005a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1a:	3338      	adds	r3, #56	@ 0x38
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a51      	ldr	r2, [pc, #324]	@ (8005b64 <xPortStartScheduler+0x180>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00d      	beq.n	8005a40 <xPortStartScheduler+0x5c>
    __asm volatile
 8005a24:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005a28:	b672      	cpsid	i
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	b662      	cpsie	i
 8005a38:	61bb      	str	r3, [r7, #24]
}
 8005a3a:	bf00      	nop
 8005a3c:	bf00      	nop
 8005a3e:	e7fd      	b.n	8005a3c <xPortStartScheduler+0x58>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8005a40:	2300      	movs	r3, #0
 8005a42:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a44:	4b48      	ldr	r3, [pc, #288]	@ (8005b68 <xPortStartScheduler+0x184>)
 8005a46:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	22ff      	movs	r2, #255	@ 0xff
 8005a54:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	4b40      	ldr	r3, [pc, #256]	@ (8005b6c <xPortStartScheduler+0x188>)
 8005a6a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8005a6c:	4b3f      	ldr	r3, [pc, #252]	@ (8005b6c <xPortStartScheduler+0x188>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10d      	bne.n	8005a90 <xPortStartScheduler+0xac>
    __asm volatile
 8005a74:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005a78:	b672      	cpsid	i
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	b662      	cpsie	i
 8005a88:	617b      	str	r3, [r7, #20]
}
 8005a8a:	bf00      	nop
 8005a8c:	bf00      	nop
 8005a8e:	e7fd      	b.n	8005a8c <xPortStartScheduler+0xa8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	43db      	mvns	r3, r3
 8005a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d015      	beq.n	8005aca <xPortStartScheduler+0xe6>
    __asm volatile
 8005a9e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005aa2:	b672      	cpsid	i
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	b662      	cpsie	i
 8005ab2:	613b      	str	r3, [r7, #16]
}
 8005ab4:	bf00      	nop
 8005ab6:	bf00      	nop
 8005ab8:	e7fd      	b.n	8005ab6 <xPortStartScheduler+0xd2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	3301      	adds	r3, #1
 8005abe:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ac0:	79fb      	ldrb	r3, [r7, #7]
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad2:	2b80      	cmp	r3, #128	@ 0x80
 8005ad4:	d0f1      	beq.n	8005aba <xPortStartScheduler+0xd6>
        }

        if( ulImplementedPrioBits == 8 )
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d103      	bne.n	8005ae4 <xPortStartScheduler+0x100>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8005adc:	4b24      	ldr	r3, [pc, #144]	@ (8005b70 <xPortStartScheduler+0x18c>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	e004      	b.n	8005aee <xPortStartScheduler+0x10a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f1c3 0307 	rsb	r3, r3, #7
 8005aea:	4a21      	ldr	r2, [pc, #132]	@ (8005b70 <xPortStartScheduler+0x18c>)
 8005aec:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005aee:	4b20      	ldr	r3, [pc, #128]	@ (8005b70 <xPortStartScheduler+0x18c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	4a1e      	ldr	r2, [pc, #120]	@ (8005b70 <xPortStartScheduler+0x18c>)
 8005af6:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005af8:	4b1d      	ldr	r3, [pc, #116]	@ (8005b70 <xPortStartScheduler+0x18c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b00:	4a1b      	ldr	r2, [pc, #108]	@ (8005b70 <xPortStartScheduler+0x18c>)
 8005b02:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005b0c:	4b19      	ldr	r3, [pc, #100]	@ (8005b74 <xPortStartScheduler+0x190>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a18      	ldr	r2, [pc, #96]	@ (8005b74 <xPortStartScheduler+0x190>)
 8005b12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b16:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005b18:	4b16      	ldr	r3, [pc, #88]	@ (8005b74 <xPortStartScheduler+0x190>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a15      	ldr	r2, [pc, #84]	@ (8005b74 <xPortStartScheduler+0x190>)
 8005b1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b22:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8005b24:	4b14      	ldr	r3, [pc, #80]	@ (8005b78 <xPortStartScheduler+0x194>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005b2a:	f000 f8e9 	bl	8005d00 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005b2e:	4b13      	ldr	r3, [pc, #76]	@ (8005b7c <xPortStartScheduler+0x198>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005b34:	f000 f908 	bl	8005d48 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b38:	4b11      	ldr	r3, [pc, #68]	@ (8005b80 <xPortStartScheduler+0x19c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a10      	ldr	r2, [pc, #64]	@ (8005b80 <xPortStartScheduler+0x19c>)
 8005b3e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005b42:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005b44:	f7ff ff38 	bl	80059b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005b48:	f7fe ffd0 	bl	8004aec <vTaskSwitchContext>
    prvTaskExitError();
 8005b4c:	f7ff feee 	bl	800592c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3728      	adds	r7, #40	@ 0x28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	e000ed08 	.word	0xe000ed08
 8005b60:	08005991 	.word	0x08005991
 8005b64:	08005c51 	.word	0x08005c51
 8005b68:	e000e400 	.word	0xe000e400
 8005b6c:	200003dc 	.word	0x200003dc
 8005b70:	200003e0 	.word	0x200003e0
 8005b74:	e000ed20 	.word	0xe000ed20
 8005b78:	e000ed1c 	.word	0xe000ed1c
 8005b7c:	20000010 	.word	0x20000010
 8005b80:	e000ef34 	.word	0xe000ef34

08005b84 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
    __asm volatile
 8005b8a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005b8e:	b672      	cpsid	i
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	b662      	cpsie	i
 8005b9e:	607b      	str	r3, [r7, #4]
}
 8005ba0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005ba2:	4b11      	ldr	r3, [pc, #68]	@ (8005be8 <vPortEnterCritical+0x64>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	4a0f      	ldr	r2, [pc, #60]	@ (8005be8 <vPortEnterCritical+0x64>)
 8005baa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005bac:	4b0e      	ldr	r3, [pc, #56]	@ (8005be8 <vPortEnterCritical+0x64>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d112      	bne.n	8005bda <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8005bec <vPortEnterCritical+0x68>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00d      	beq.n	8005bda <vPortEnterCritical+0x56>
    __asm volatile
 8005bbe:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005bc2:	b672      	cpsid	i
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	b662      	cpsie	i
 8005bd2:	603b      	str	r3, [r7, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	bf00      	nop
 8005bd8:	e7fd      	b.n	8005bd6 <vPortEnterCritical+0x52>
    }
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	20000010 	.word	0x20000010
 8005bec:	e000ed04 	.word	0xe000ed04

08005bf0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005bf6:	4b13      	ldr	r3, [pc, #76]	@ (8005c44 <vPortExitCritical+0x54>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10d      	bne.n	8005c1a <vPortExitCritical+0x2a>
    __asm volatile
 8005bfe:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005c02:	b672      	cpsid	i
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	b662      	cpsie	i
 8005c12:	607b      	str	r3, [r7, #4]
}
 8005c14:	bf00      	nop
 8005c16:	bf00      	nop
 8005c18:	e7fd      	b.n	8005c16 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8005c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c44 <vPortExitCritical+0x54>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	4a08      	ldr	r2, [pc, #32]	@ (8005c44 <vPortExitCritical+0x54>)
 8005c22:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005c24:	4b07      	ldr	r3, [pc, #28]	@ (8005c44 <vPortExitCritical+0x54>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d105      	bne.n	8005c38 <vPortExitCritical+0x48>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8005c36:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	20000010 	.word	0x20000010
	...

08005c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005c50:	f3ef 8009 	mrs	r0, PSP
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	4b15      	ldr	r3, [pc, #84]	@ (8005cb0 <pxCurrentTCBConst>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	f01e 0f10 	tst.w	lr, #16
 8005c60:	bf08      	it	eq
 8005c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6a:	6010      	str	r0, [r2, #0]
 8005c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c70:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8005c74:	b672      	cpsid	i
 8005c76:	f380 8811 	msr	BASEPRI, r0
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	b662      	cpsie	i
 8005c84:	f7fe ff32 	bl	8004aec <vTaskSwitchContext>
 8005c88:	f04f 0000 	mov.w	r0, #0
 8005c8c:	f380 8811 	msr	BASEPRI, r0
 8005c90:	bc09      	pop	{r0, r3}
 8005c92:	6819      	ldr	r1, [r3, #0]
 8005c94:	6808      	ldr	r0, [r1, #0]
 8005c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c9a:	f01e 0f10 	tst.w	lr, #16
 8005c9e:	bf08      	it	eq
 8005ca0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ca4:	f380 8809 	msr	PSP, r0
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop

08005cb0 <pxCurrentTCBConst>:
 8005cb0:	2000029c 	.word	0x2000029c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop

08005cb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
    __asm volatile
 8005cbe:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005cc2:	b672      	cpsid	i
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	b662      	cpsie	i
 8005cd2:	607b      	str	r3, [r7, #4]
}
 8005cd4:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005cd6:	f7fe fded 	bl	80048b4 <xTaskIncrementTick>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <SysTick_Handler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ce0:	4b06      	ldr	r3, [pc, #24]	@ (8005cfc <SysTick_Handler+0x44>)
 8005ce2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	2300      	movs	r3, #0
 8005cea:	603b      	str	r3, [r7, #0]
    __asm volatile
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	f383 8811 	msr	BASEPRI, r3
}
 8005cf2:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8005cf4:	bf00      	nop
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	e000ed04 	.word	0xe000ed04

08005d00 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005d00:	b480      	push	{r7}
 8005d02:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d04:	4b0b      	ldr	r3, [pc, #44]	@ (8005d34 <vPortSetupTimerInterrupt+0x34>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d38 <vPortSetupTimerInterrupt+0x38>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d10:	4b0a      	ldr	r3, [pc, #40]	@ (8005d3c <vPortSetupTimerInterrupt+0x3c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a0a      	ldr	r2, [pc, #40]	@ (8005d40 <vPortSetupTimerInterrupt+0x40>)
 8005d16:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1a:	099b      	lsrs	r3, r3, #6
 8005d1c:	4a09      	ldr	r2, [pc, #36]	@ (8005d44 <vPortSetupTimerInterrupt+0x44>)
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d22:	4b04      	ldr	r3, [pc, #16]	@ (8005d34 <vPortSetupTimerInterrupt+0x34>)
 8005d24:	2207      	movs	r2, #7
 8005d26:	601a      	str	r2, [r3, #0]
}
 8005d28:	bf00      	nop
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	e000e010 	.word	0xe000e010
 8005d38:	e000e018 	.word	0xe000e018
 8005d3c:	20000000 	.word	0x20000000
 8005d40:	10624dd3 	.word	0x10624dd3
 8005d44:	e000e014 	.word	0xe000e014

08005d48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005d48:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005d58 <vPortEnableVFP+0x10>
 8005d4c:	6801      	ldr	r1, [r0, #0]
 8005d4e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005d52:	6001      	str	r1, [r0, #0]
 8005d54:	4770      	bx	lr
 8005d56:	0000      	.short	0x0000
 8005d58:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8005d5c:	bf00      	nop
 8005d5e:	bf00      	nop

08005d60 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08e      	sub	sp, #56	@ 0x38
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d022      	beq.n	8005db8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8005d72:	2308      	movs	r3, #8
 8005d74:	43db      	mvns	r3, r3
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d81b      	bhi.n	8005db4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8005d7c:	2208      	movs	r2, #8
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4413      	add	r3, r2
 8005d82:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d014      	beq.n	8005db8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	f1c3 0308 	rsb	r3, r3, #8
 8005d98:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8005d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9c:	43db      	mvns	r3, r3
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d804      	bhi.n	8005dae <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da8:	4413      	add	r3, r2
 8005daa:	607b      	str	r3, [r7, #4]
 8005dac:	e004      	b.n	8005db8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	607b      	str	r3, [r7, #4]
 8005db2:	e001      	b.n	8005db8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8005db4:	2300      	movs	r3, #0
 8005db6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8005db8:	f7fe fc48 	bl	800464c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005dbc:	4b80      	ldr	r3, [pc, #512]	@ (8005fc0 <pvPortMalloc+0x260>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8005dc4:	f000 f98a 	bl	80060dc <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f2c0 80de 	blt.w	8005f8c <pvPortMalloc+0x22c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 80da 	beq.w	8005f8c <pvPortMalloc+0x22c>
 8005dd8:	4b7a      	ldr	r3, [pc, #488]	@ (8005fc4 <pvPortMalloc+0x264>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	f200 80d4 	bhi.w	8005f8c <pvPortMalloc+0x22c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005de4:	4b78      	ldr	r3, [pc, #480]	@ (8005fc8 <pvPortMalloc+0x268>)
 8005de6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8005de8:	4b77      	ldr	r3, [pc, #476]	@ (8005fc8 <pvPortMalloc+0x268>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8005dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df0:	4a76      	ldr	r2, [pc, #472]	@ (8005fcc <pvPortMalloc+0x26c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d305      	bcc.n	8005e02 <pvPortMalloc+0xa2>
 8005df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df8:	4a75      	ldr	r2, [pc, #468]	@ (8005fd0 <pvPortMalloc+0x270>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d801      	bhi.n	8005e02 <pvPortMalloc+0xa2>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e000      	b.n	8005e04 <pvPortMalloc+0xa4>
 8005e02:	2300      	movs	r3, #0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d12d      	bne.n	8005e64 <pvPortMalloc+0x104>
    __asm volatile
 8005e08:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005e0c:	b672      	cpsid	i
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	b662      	cpsie	i
 8005e1c:	623b      	str	r3, [r7, #32]
}
 8005e1e:	bf00      	nop
 8005e20:	bf00      	nop
 8005e22:	e7fd      	b.n	8005e20 <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8005e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e26:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8005e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e30:	4a66      	ldr	r2, [pc, #408]	@ (8005fcc <pvPortMalloc+0x26c>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d305      	bcc.n	8005e42 <pvPortMalloc+0xe2>
 8005e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e38:	4a65      	ldr	r2, [pc, #404]	@ (8005fd0 <pvPortMalloc+0x270>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d801      	bhi.n	8005e42 <pvPortMalloc+0xe2>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e000      	b.n	8005e44 <pvPortMalloc+0xe4>
 8005e42:	2300      	movs	r3, #0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10d      	bne.n	8005e64 <pvPortMalloc+0x104>
    __asm volatile
 8005e48:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005e4c:	b672      	cpsid	i
 8005e4e:	f383 8811 	msr	BASEPRI, r3
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	b662      	cpsie	i
 8005e5c:	61fb      	str	r3, [r7, #28]
}
 8005e5e:	bf00      	nop
 8005e60:	bf00      	nop
 8005e62:	e7fd      	b.n	8005e60 <pvPortMalloc+0x100>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8005e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d903      	bls.n	8005e76 <pvPortMalloc+0x116>
 8005e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1d6      	bne.n	8005e24 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005e76:	4b52      	ldr	r3, [pc, #328]	@ (8005fc0 <pvPortMalloc+0x260>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	f000 8085 	beq.w	8005f8c <pvPortMalloc+0x22c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8005e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2208      	movs	r2, #8
 8005e88:	4413      	add	r3, r2
 8005e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8005e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8e:	4a4f      	ldr	r2, [pc, #316]	@ (8005fcc <pvPortMalloc+0x26c>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d305      	bcc.n	8005ea0 <pvPortMalloc+0x140>
 8005e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e96:	4a4e      	ldr	r2, [pc, #312]	@ (8005fd0 <pvPortMalloc+0x270>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d801      	bhi.n	8005ea0 <pvPortMalloc+0x140>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e000      	b.n	8005ea2 <pvPortMalloc+0x142>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10d      	bne.n	8005ec2 <pvPortMalloc+0x162>
    __asm volatile
 8005ea6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005eaa:	b672      	cpsid	i
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	b662      	cpsie	i
 8005eba:	61bb      	str	r3, [r7, #24]
}
 8005ebc:	bf00      	nop
 8005ebe:	bf00      	nop
 8005ec0:	e7fd      	b.n	8005ebe <pvPortMalloc+0x15e>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8005eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d90d      	bls.n	8005ef0 <pvPortMalloc+0x190>
    __asm volatile
 8005ed4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005ed8:	b672      	cpsid	i
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	b662      	cpsie	i
 8005ee8:	617b      	str	r3, [r7, #20]
}
 8005eea:	bf00      	nop
 8005eec:	bf00      	nop
 8005eee:	e7fd      	b.n	8005eec <pvPortMalloc+0x18c>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	1ad2      	subs	r2, r2, r3
 8005ef8:	2308      	movs	r3, #8
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d926      	bls.n	8005f4e <pvPortMalloc+0x1ee>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4413      	add	r3, r2
 8005f06:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00d      	beq.n	8005f2e <pvPortMalloc+0x1ce>
    __asm volatile
 8005f12:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005f16:	b672      	cpsid	i
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	b662      	cpsie	i
 8005f26:	613b      	str	r3, [r7, #16]
}
 8005f28:	bf00      	nop
 8005f2a:	bf00      	nop
 8005f2c:	e7fd      	b.n	8005f2a <pvPortMalloc+0x1ca>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	1ad2      	subs	r2, r2, r3
 8005f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f38:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8005f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f46:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8005f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f4c:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8005fc4 <pvPortMalloc+0x264>)
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	4a1a      	ldr	r2, [pc, #104]	@ (8005fc4 <pvPortMalloc+0x264>)
 8005f5a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f5c:	4b19      	ldr	r3, [pc, #100]	@ (8005fc4 <pvPortMalloc+0x264>)
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	4b1c      	ldr	r3, [pc, #112]	@ (8005fd4 <pvPortMalloc+0x274>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d203      	bcs.n	8005f70 <pvPortMalloc+0x210>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f68:	4b16      	ldr	r3, [pc, #88]	@ (8005fc4 <pvPortMalloc+0x264>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a19      	ldr	r2, [pc, #100]	@ (8005fd4 <pvPortMalloc+0x274>)
 8005f6e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f7a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f7e:	2200      	movs	r2, #0
 8005f80:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005f82:	4b15      	ldr	r3, [pc, #84]	@ (8005fd8 <pvPortMalloc+0x278>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3301      	adds	r3, #1
 8005f88:	4a13      	ldr	r2, [pc, #76]	@ (8005fd8 <pvPortMalloc+0x278>)
 8005f8a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005f8c:	f7fe fb6c 	bl	8004668 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00d      	beq.n	8005fb6 <pvPortMalloc+0x256>
    __asm volatile
 8005f9a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005f9e:	b672      	cpsid	i
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	b662      	cpsie	i
 8005fae:	60fb      	str	r3, [r7, #12]
}
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
 8005fb4:	e7fd      	b.n	8005fb2 <pvPortMalloc+0x252>
    return pvReturn;
 8005fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3738      	adds	r7, #56	@ 0x38
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	2000bbec 	.word	0x2000bbec
 8005fc4:	2000bbf0 	.word	0x2000bbf0
 8005fc8:	2000bbe4 	.word	0x2000bbe4
 8005fcc:	200003e4 	.word	0x200003e4
 8005fd0:	2000bbe3 	.word	0x2000bbe3
 8005fd4:	2000bbf4 	.word	0x2000bbf4
 8005fd8:	2000bbf8 	.word	0x2000bbf8

08005fdc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b088      	sub	sp, #32
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d06a      	beq.n	80060c4 <vPortFree+0xe8>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005fee:	2308      	movs	r3, #8
 8005ff0:	425b      	negs	r3, r3
 8005ff2:	69fa      	ldr	r2, [r7, #28]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	4a33      	ldr	r2, [pc, #204]	@ (80060cc <vPortFree+0xf0>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d305      	bcc.n	8006010 <vPortFree+0x34>
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	4a32      	ldr	r2, [pc, #200]	@ (80060d0 <vPortFree+0xf4>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d801      	bhi.n	8006010 <vPortFree+0x34>
 800600c:	2301      	movs	r3, #1
 800600e:	e000      	b.n	8006012 <vPortFree+0x36>
 8006010:	2300      	movs	r3, #0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10d      	bne.n	8006032 <vPortFree+0x56>
    __asm volatile
 8006016:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800601a:	b672      	cpsid	i
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	b662      	cpsie	i
 800602a:	617b      	str	r3, [r7, #20]
}
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	e7fd      	b.n	800602e <vPortFree+0x52>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	db0d      	blt.n	8006056 <vPortFree+0x7a>
    __asm volatile
 800603a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800603e:	b672      	cpsid	i
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	b662      	cpsie	i
 800604e:	613b      	str	r3, [r7, #16]
}
 8006050:	bf00      	nop
 8006052:	bf00      	nop
 8006054:	e7fd      	b.n	8006052 <vPortFree+0x76>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00d      	beq.n	800607a <vPortFree+0x9e>
    __asm volatile
 800605e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006062:	b672      	cpsid	i
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	b662      	cpsie	i
 8006072:	60fb      	str	r3, [r7, #12]
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop
 8006078:	e7fd      	b.n	8006076 <vPortFree+0x9a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	0fdb      	lsrs	r3, r3, #31
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d01c      	beq.n	80060c4 <vPortFree+0xe8>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d118      	bne.n	80060c4 <vPortFree+0xe8>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800609e:	f7fe fad5 	bl	800464c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	4b0b      	ldr	r3, [pc, #44]	@ (80060d4 <vPortFree+0xf8>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4413      	add	r3, r2
 80060ac:	4a09      	ldr	r2, [pc, #36]	@ (80060d4 <vPortFree+0xf8>)
 80060ae:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060b0:	69b8      	ldr	r0, [r7, #24]
 80060b2:	f000 f86d 	bl	8006190 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80060b6:	4b08      	ldr	r3, [pc, #32]	@ (80060d8 <vPortFree+0xfc>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3301      	adds	r3, #1
 80060bc:	4a06      	ldr	r2, [pc, #24]	@ (80060d8 <vPortFree+0xfc>)
 80060be:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80060c0:	f7fe fad2 	bl	8004668 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80060c4:	bf00      	nop
 80060c6:	3720      	adds	r7, #32
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	200003e4 	.word	0x200003e4
 80060d0:	2000bbe3 	.word	0x2000bbe3
 80060d4:	2000bbf0 	.word	0x2000bbf0
 80060d8:	2000bbfc 	.word	0x2000bbfc

080060dc <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060e2:	f44f 4338 	mov.w	r3, #47104	@ 0xb800
 80060e6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80060e8:	4b24      	ldr	r3, [pc, #144]	@ (800617c <prvHeapInit+0xa0>)
 80060ea:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f003 0307 	and.w	r3, r3, #7
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00c      	beq.n	8006110 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3307      	adds	r3, #7
 80060fa:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f023 0307 	bic.w	r3, r3, #7
 8006102:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	4a1c      	ldr	r2, [pc, #112]	@ (800617c <prvHeapInit+0xa0>)
 800610c:	4413      	add	r3, r2
 800610e:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4a1b      	ldr	r2, [pc, #108]	@ (8006180 <prvHeapInit+0xa4>)
 8006114:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006116:	4b1a      	ldr	r3, [pc, #104]	@ (8006180 <prvHeapInit+0xa4>)
 8006118:	2200      	movs	r2, #0
 800611a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	4413      	add	r3, r2
 8006122:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8006124:	2208      	movs	r2, #8
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	1a9b      	subs	r3, r3, r2
 800612a:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f023 0307 	bic.w	r3, r3, #7
 8006132:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a13      	ldr	r2, [pc, #76]	@ (8006184 <prvHeapInit+0xa8>)
 8006138:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800613a:	4b12      	ldr	r3, [pc, #72]	@ (8006184 <prvHeapInit+0xa8>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2200      	movs	r2, #0
 8006140:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8006142:	4b10      	ldr	r3, [pc, #64]	@ (8006184 <prvHeapInit+0xa8>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2200      	movs	r2, #0
 8006148:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	1ad2      	subs	r2, r2, r3
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8006158:	4b0a      	ldr	r3, [pc, #40]	@ (8006184 <prvHeapInit+0xa8>)
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	4a08      	ldr	r2, [pc, #32]	@ (8006188 <prvHeapInit+0xac>)
 8006166:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	4a07      	ldr	r2, [pc, #28]	@ (800618c <prvHeapInit+0xb0>)
 800616e:	6013      	str	r3, [r2, #0]
}
 8006170:	bf00      	nop
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	200003e4 	.word	0x200003e4
 8006180:	2000bbe4 	.word	0x2000bbe4
 8006184:	2000bbec 	.word	0x2000bbec
 8006188:	2000bbf4 	.word	0x2000bbf4
 800618c:	2000bbf0 	.word	0x2000bbf0

08006190 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006198:	4b37      	ldr	r3, [pc, #220]	@ (8006278 <prvInsertBlockIntoFreeList+0xe8>)
 800619a:	617b      	str	r3, [r7, #20]
 800619c:	e002      	b.n	80061a4 <prvInsertBlockIntoFreeList+0x14>
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d8f7      	bhi.n	800619e <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	4a31      	ldr	r2, [pc, #196]	@ (8006278 <prvInsertBlockIntoFreeList+0xe8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d01a      	beq.n	80061ec <prvInsertBlockIntoFreeList+0x5c>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	4a30      	ldr	r2, [pc, #192]	@ (800627c <prvInsertBlockIntoFreeList+0xec>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d305      	bcc.n	80061ca <prvInsertBlockIntoFreeList+0x3a>
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	4a2f      	ldr	r2, [pc, #188]	@ (8006280 <prvInsertBlockIntoFreeList+0xf0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d801      	bhi.n	80061ca <prvInsertBlockIntoFreeList+0x3a>
 80061c6:	2301      	movs	r3, #1
 80061c8:	e000      	b.n	80061cc <prvInsertBlockIntoFreeList+0x3c>
 80061ca:	2300      	movs	r3, #0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10d      	bne.n	80061ec <prvInsertBlockIntoFreeList+0x5c>
    __asm volatile
 80061d0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80061d4:	b672      	cpsid	i
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	b662      	cpsie	i
 80061e4:	60fb      	str	r3, [r7, #12]
}
 80061e6:	bf00      	nop
 80061e8:	bf00      	nop
 80061ea:	e7fd      	b.n	80061e8 <prvInsertBlockIntoFreeList+0x58>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	4413      	add	r3, r2
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d108      	bne.n	8006210 <prvInsertBlockIntoFreeList+0x80>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	441a      	add	r2, r3
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	441a      	add	r2, r3
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	429a      	cmp	r2, r3
 8006222:	d118      	bne.n	8006256 <prvInsertBlockIntoFreeList+0xc6>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	4b16      	ldr	r3, [pc, #88]	@ (8006284 <prvInsertBlockIntoFreeList+0xf4>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	429a      	cmp	r2, r3
 800622e:	d00d      	beq.n	800624c <prvInsertBlockIntoFreeList+0xbc>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	441a      	add	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	e008      	b.n	800625e <prvInsertBlockIntoFreeList+0xce>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800624c:	4b0d      	ldr	r3, [pc, #52]	@ (8006284 <prvInsertBlockIntoFreeList+0xf4>)
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	e003      	b.n	800625e <prvInsertBlockIntoFreeList+0xce>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	429a      	cmp	r2, r3
 8006264:	d002      	beq.n	800626c <prvInsertBlockIntoFreeList+0xdc>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800626c:	bf00      	nop
 800626e:	371c      	adds	r7, #28
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	2000bbe4 	.word	0x2000bbe4
 800627c:	200003e4 	.word	0x200003e4
 8006280:	2000bbe3 	.word	0x2000bbe3
 8006284:	2000bbec 	.word	0x2000bbec

08006288 <siprintf>:
 8006288:	b40e      	push	{r1, r2, r3}
 800628a:	b500      	push	{lr}
 800628c:	b09c      	sub	sp, #112	@ 0x70
 800628e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006290:	9002      	str	r0, [sp, #8]
 8006292:	9006      	str	r0, [sp, #24]
 8006294:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006298:	4809      	ldr	r0, [pc, #36]	@ (80062c0 <siprintf+0x38>)
 800629a:	9107      	str	r1, [sp, #28]
 800629c:	9104      	str	r1, [sp, #16]
 800629e:	4909      	ldr	r1, [pc, #36]	@ (80062c4 <siprintf+0x3c>)
 80062a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80062a4:	9105      	str	r1, [sp, #20]
 80062a6:	6800      	ldr	r0, [r0, #0]
 80062a8:	9301      	str	r3, [sp, #4]
 80062aa:	a902      	add	r1, sp, #8
 80062ac:	f000 f9a2 	bl	80065f4 <_svfiprintf_r>
 80062b0:	9b02      	ldr	r3, [sp, #8]
 80062b2:	2200      	movs	r2, #0
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	b01c      	add	sp, #112	@ 0x70
 80062b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80062bc:	b003      	add	sp, #12
 80062be:	4770      	bx	lr
 80062c0:	20000014 	.word	0x20000014
 80062c4:	ffff0208 	.word	0xffff0208

080062c8 <memset>:
 80062c8:	4402      	add	r2, r0
 80062ca:	4603      	mov	r3, r0
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d100      	bne.n	80062d2 <memset+0xa>
 80062d0:	4770      	bx	lr
 80062d2:	f803 1b01 	strb.w	r1, [r3], #1
 80062d6:	e7f9      	b.n	80062cc <memset+0x4>

080062d8 <__errno>:
 80062d8:	4b01      	ldr	r3, [pc, #4]	@ (80062e0 <__errno+0x8>)
 80062da:	6818      	ldr	r0, [r3, #0]
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	20000014 	.word	0x20000014

080062e4 <__libc_init_array>:
 80062e4:	b570      	push	{r4, r5, r6, lr}
 80062e6:	4d0d      	ldr	r5, [pc, #52]	@ (800631c <__libc_init_array+0x38>)
 80062e8:	4c0d      	ldr	r4, [pc, #52]	@ (8006320 <__libc_init_array+0x3c>)
 80062ea:	1b64      	subs	r4, r4, r5
 80062ec:	10a4      	asrs	r4, r4, #2
 80062ee:	2600      	movs	r6, #0
 80062f0:	42a6      	cmp	r6, r4
 80062f2:	d109      	bne.n	8006308 <__libc_init_array+0x24>
 80062f4:	4d0b      	ldr	r5, [pc, #44]	@ (8006324 <__libc_init_array+0x40>)
 80062f6:	4c0c      	ldr	r4, [pc, #48]	@ (8006328 <__libc_init_array+0x44>)
 80062f8:	f000 fc66 	bl	8006bc8 <_init>
 80062fc:	1b64      	subs	r4, r4, r5
 80062fe:	10a4      	asrs	r4, r4, #2
 8006300:	2600      	movs	r6, #0
 8006302:	42a6      	cmp	r6, r4
 8006304:	d105      	bne.n	8006312 <__libc_init_array+0x2e>
 8006306:	bd70      	pop	{r4, r5, r6, pc}
 8006308:	f855 3b04 	ldr.w	r3, [r5], #4
 800630c:	4798      	blx	r3
 800630e:	3601      	adds	r6, #1
 8006310:	e7ee      	b.n	80062f0 <__libc_init_array+0xc>
 8006312:	f855 3b04 	ldr.w	r3, [r5], #4
 8006316:	4798      	blx	r3
 8006318:	3601      	adds	r6, #1
 800631a:	e7f2      	b.n	8006302 <__libc_init_array+0x1e>
 800631c:	08006cf0 	.word	0x08006cf0
 8006320:	08006cf0 	.word	0x08006cf0
 8006324:	08006cf0 	.word	0x08006cf0
 8006328:	08006cf4 	.word	0x08006cf4

0800632c <__retarget_lock_acquire_recursive>:
 800632c:	4770      	bx	lr

0800632e <__retarget_lock_release_recursive>:
 800632e:	4770      	bx	lr

08006330 <memcpy>:
 8006330:	440a      	add	r2, r1
 8006332:	4291      	cmp	r1, r2
 8006334:	f100 33ff 	add.w	r3, r0, #4294967295
 8006338:	d100      	bne.n	800633c <memcpy+0xc>
 800633a:	4770      	bx	lr
 800633c:	b510      	push	{r4, lr}
 800633e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006342:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006346:	4291      	cmp	r1, r2
 8006348:	d1f9      	bne.n	800633e <memcpy+0xe>
 800634a:	bd10      	pop	{r4, pc}

0800634c <_free_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4605      	mov	r5, r0
 8006350:	2900      	cmp	r1, #0
 8006352:	d041      	beq.n	80063d8 <_free_r+0x8c>
 8006354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006358:	1f0c      	subs	r4, r1, #4
 800635a:	2b00      	cmp	r3, #0
 800635c:	bfb8      	it	lt
 800635e:	18e4      	addlt	r4, r4, r3
 8006360:	f000 f8e0 	bl	8006524 <__malloc_lock>
 8006364:	4a1d      	ldr	r2, [pc, #116]	@ (80063dc <_free_r+0x90>)
 8006366:	6813      	ldr	r3, [r2, #0]
 8006368:	b933      	cbnz	r3, 8006378 <_free_r+0x2c>
 800636a:	6063      	str	r3, [r4, #4]
 800636c:	6014      	str	r4, [r2, #0]
 800636e:	4628      	mov	r0, r5
 8006370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006374:	f000 b8dc 	b.w	8006530 <__malloc_unlock>
 8006378:	42a3      	cmp	r3, r4
 800637a:	d908      	bls.n	800638e <_free_r+0x42>
 800637c:	6820      	ldr	r0, [r4, #0]
 800637e:	1821      	adds	r1, r4, r0
 8006380:	428b      	cmp	r3, r1
 8006382:	bf01      	itttt	eq
 8006384:	6819      	ldreq	r1, [r3, #0]
 8006386:	685b      	ldreq	r3, [r3, #4]
 8006388:	1809      	addeq	r1, r1, r0
 800638a:	6021      	streq	r1, [r4, #0]
 800638c:	e7ed      	b.n	800636a <_free_r+0x1e>
 800638e:	461a      	mov	r2, r3
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	b10b      	cbz	r3, 8006398 <_free_r+0x4c>
 8006394:	42a3      	cmp	r3, r4
 8006396:	d9fa      	bls.n	800638e <_free_r+0x42>
 8006398:	6811      	ldr	r1, [r2, #0]
 800639a:	1850      	adds	r0, r2, r1
 800639c:	42a0      	cmp	r0, r4
 800639e:	d10b      	bne.n	80063b8 <_free_r+0x6c>
 80063a0:	6820      	ldr	r0, [r4, #0]
 80063a2:	4401      	add	r1, r0
 80063a4:	1850      	adds	r0, r2, r1
 80063a6:	4283      	cmp	r3, r0
 80063a8:	6011      	str	r1, [r2, #0]
 80063aa:	d1e0      	bne.n	800636e <_free_r+0x22>
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	6053      	str	r3, [r2, #4]
 80063b2:	4408      	add	r0, r1
 80063b4:	6010      	str	r0, [r2, #0]
 80063b6:	e7da      	b.n	800636e <_free_r+0x22>
 80063b8:	d902      	bls.n	80063c0 <_free_r+0x74>
 80063ba:	230c      	movs	r3, #12
 80063bc:	602b      	str	r3, [r5, #0]
 80063be:	e7d6      	b.n	800636e <_free_r+0x22>
 80063c0:	6820      	ldr	r0, [r4, #0]
 80063c2:	1821      	adds	r1, r4, r0
 80063c4:	428b      	cmp	r3, r1
 80063c6:	bf04      	itt	eq
 80063c8:	6819      	ldreq	r1, [r3, #0]
 80063ca:	685b      	ldreq	r3, [r3, #4]
 80063cc:	6063      	str	r3, [r4, #4]
 80063ce:	bf04      	itt	eq
 80063d0:	1809      	addeq	r1, r1, r0
 80063d2:	6021      	streq	r1, [r4, #0]
 80063d4:	6054      	str	r4, [r2, #4]
 80063d6:	e7ca      	b.n	800636e <_free_r+0x22>
 80063d8:	bd38      	pop	{r3, r4, r5, pc}
 80063da:	bf00      	nop
 80063dc:	2000bd44 	.word	0x2000bd44

080063e0 <sbrk_aligned>:
 80063e0:	b570      	push	{r4, r5, r6, lr}
 80063e2:	4e0f      	ldr	r6, [pc, #60]	@ (8006420 <sbrk_aligned+0x40>)
 80063e4:	460c      	mov	r4, r1
 80063e6:	6831      	ldr	r1, [r6, #0]
 80063e8:	4605      	mov	r5, r0
 80063ea:	b911      	cbnz	r1, 80063f2 <sbrk_aligned+0x12>
 80063ec:	f000 fba6 	bl	8006b3c <_sbrk_r>
 80063f0:	6030      	str	r0, [r6, #0]
 80063f2:	4621      	mov	r1, r4
 80063f4:	4628      	mov	r0, r5
 80063f6:	f000 fba1 	bl	8006b3c <_sbrk_r>
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	d103      	bne.n	8006406 <sbrk_aligned+0x26>
 80063fe:	f04f 34ff 	mov.w	r4, #4294967295
 8006402:	4620      	mov	r0, r4
 8006404:	bd70      	pop	{r4, r5, r6, pc}
 8006406:	1cc4      	adds	r4, r0, #3
 8006408:	f024 0403 	bic.w	r4, r4, #3
 800640c:	42a0      	cmp	r0, r4
 800640e:	d0f8      	beq.n	8006402 <sbrk_aligned+0x22>
 8006410:	1a21      	subs	r1, r4, r0
 8006412:	4628      	mov	r0, r5
 8006414:	f000 fb92 	bl	8006b3c <_sbrk_r>
 8006418:	3001      	adds	r0, #1
 800641a:	d1f2      	bne.n	8006402 <sbrk_aligned+0x22>
 800641c:	e7ef      	b.n	80063fe <sbrk_aligned+0x1e>
 800641e:	bf00      	nop
 8006420:	2000bd40 	.word	0x2000bd40

08006424 <_malloc_r>:
 8006424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006428:	1ccd      	adds	r5, r1, #3
 800642a:	f025 0503 	bic.w	r5, r5, #3
 800642e:	3508      	adds	r5, #8
 8006430:	2d0c      	cmp	r5, #12
 8006432:	bf38      	it	cc
 8006434:	250c      	movcc	r5, #12
 8006436:	2d00      	cmp	r5, #0
 8006438:	4606      	mov	r6, r0
 800643a:	db01      	blt.n	8006440 <_malloc_r+0x1c>
 800643c:	42a9      	cmp	r1, r5
 800643e:	d904      	bls.n	800644a <_malloc_r+0x26>
 8006440:	230c      	movs	r3, #12
 8006442:	6033      	str	r3, [r6, #0]
 8006444:	2000      	movs	r0, #0
 8006446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800644a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006520 <_malloc_r+0xfc>
 800644e:	f000 f869 	bl	8006524 <__malloc_lock>
 8006452:	f8d8 3000 	ldr.w	r3, [r8]
 8006456:	461c      	mov	r4, r3
 8006458:	bb44      	cbnz	r4, 80064ac <_malloc_r+0x88>
 800645a:	4629      	mov	r1, r5
 800645c:	4630      	mov	r0, r6
 800645e:	f7ff ffbf 	bl	80063e0 <sbrk_aligned>
 8006462:	1c43      	adds	r3, r0, #1
 8006464:	4604      	mov	r4, r0
 8006466:	d158      	bne.n	800651a <_malloc_r+0xf6>
 8006468:	f8d8 4000 	ldr.w	r4, [r8]
 800646c:	4627      	mov	r7, r4
 800646e:	2f00      	cmp	r7, #0
 8006470:	d143      	bne.n	80064fa <_malloc_r+0xd6>
 8006472:	2c00      	cmp	r4, #0
 8006474:	d04b      	beq.n	800650e <_malloc_r+0xea>
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	4639      	mov	r1, r7
 800647a:	4630      	mov	r0, r6
 800647c:	eb04 0903 	add.w	r9, r4, r3
 8006480:	f000 fb5c 	bl	8006b3c <_sbrk_r>
 8006484:	4581      	cmp	r9, r0
 8006486:	d142      	bne.n	800650e <_malloc_r+0xea>
 8006488:	6821      	ldr	r1, [r4, #0]
 800648a:	1a6d      	subs	r5, r5, r1
 800648c:	4629      	mov	r1, r5
 800648e:	4630      	mov	r0, r6
 8006490:	f7ff ffa6 	bl	80063e0 <sbrk_aligned>
 8006494:	3001      	adds	r0, #1
 8006496:	d03a      	beq.n	800650e <_malloc_r+0xea>
 8006498:	6823      	ldr	r3, [r4, #0]
 800649a:	442b      	add	r3, r5
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	f8d8 3000 	ldr.w	r3, [r8]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	bb62      	cbnz	r2, 8006500 <_malloc_r+0xdc>
 80064a6:	f8c8 7000 	str.w	r7, [r8]
 80064aa:	e00f      	b.n	80064cc <_malloc_r+0xa8>
 80064ac:	6822      	ldr	r2, [r4, #0]
 80064ae:	1b52      	subs	r2, r2, r5
 80064b0:	d420      	bmi.n	80064f4 <_malloc_r+0xd0>
 80064b2:	2a0b      	cmp	r2, #11
 80064b4:	d917      	bls.n	80064e6 <_malloc_r+0xc2>
 80064b6:	1961      	adds	r1, r4, r5
 80064b8:	42a3      	cmp	r3, r4
 80064ba:	6025      	str	r5, [r4, #0]
 80064bc:	bf18      	it	ne
 80064be:	6059      	strne	r1, [r3, #4]
 80064c0:	6863      	ldr	r3, [r4, #4]
 80064c2:	bf08      	it	eq
 80064c4:	f8c8 1000 	streq.w	r1, [r8]
 80064c8:	5162      	str	r2, [r4, r5]
 80064ca:	604b      	str	r3, [r1, #4]
 80064cc:	4630      	mov	r0, r6
 80064ce:	f000 f82f 	bl	8006530 <__malloc_unlock>
 80064d2:	f104 000b 	add.w	r0, r4, #11
 80064d6:	1d23      	adds	r3, r4, #4
 80064d8:	f020 0007 	bic.w	r0, r0, #7
 80064dc:	1ac2      	subs	r2, r0, r3
 80064de:	bf1c      	itt	ne
 80064e0:	1a1b      	subne	r3, r3, r0
 80064e2:	50a3      	strne	r3, [r4, r2]
 80064e4:	e7af      	b.n	8006446 <_malloc_r+0x22>
 80064e6:	6862      	ldr	r2, [r4, #4]
 80064e8:	42a3      	cmp	r3, r4
 80064ea:	bf0c      	ite	eq
 80064ec:	f8c8 2000 	streq.w	r2, [r8]
 80064f0:	605a      	strne	r2, [r3, #4]
 80064f2:	e7eb      	b.n	80064cc <_malloc_r+0xa8>
 80064f4:	4623      	mov	r3, r4
 80064f6:	6864      	ldr	r4, [r4, #4]
 80064f8:	e7ae      	b.n	8006458 <_malloc_r+0x34>
 80064fa:	463c      	mov	r4, r7
 80064fc:	687f      	ldr	r7, [r7, #4]
 80064fe:	e7b6      	b.n	800646e <_malloc_r+0x4a>
 8006500:	461a      	mov	r2, r3
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	42a3      	cmp	r3, r4
 8006506:	d1fb      	bne.n	8006500 <_malloc_r+0xdc>
 8006508:	2300      	movs	r3, #0
 800650a:	6053      	str	r3, [r2, #4]
 800650c:	e7de      	b.n	80064cc <_malloc_r+0xa8>
 800650e:	230c      	movs	r3, #12
 8006510:	6033      	str	r3, [r6, #0]
 8006512:	4630      	mov	r0, r6
 8006514:	f000 f80c 	bl	8006530 <__malloc_unlock>
 8006518:	e794      	b.n	8006444 <_malloc_r+0x20>
 800651a:	6005      	str	r5, [r0, #0]
 800651c:	e7d6      	b.n	80064cc <_malloc_r+0xa8>
 800651e:	bf00      	nop
 8006520:	2000bd44 	.word	0x2000bd44

08006524 <__malloc_lock>:
 8006524:	4801      	ldr	r0, [pc, #4]	@ (800652c <__malloc_lock+0x8>)
 8006526:	f7ff bf01 	b.w	800632c <__retarget_lock_acquire_recursive>
 800652a:	bf00      	nop
 800652c:	2000bd3c 	.word	0x2000bd3c

08006530 <__malloc_unlock>:
 8006530:	4801      	ldr	r0, [pc, #4]	@ (8006538 <__malloc_unlock+0x8>)
 8006532:	f7ff befc 	b.w	800632e <__retarget_lock_release_recursive>
 8006536:	bf00      	nop
 8006538:	2000bd3c 	.word	0x2000bd3c

0800653c <__ssputs_r>:
 800653c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006540:	688e      	ldr	r6, [r1, #8]
 8006542:	461f      	mov	r7, r3
 8006544:	42be      	cmp	r6, r7
 8006546:	680b      	ldr	r3, [r1, #0]
 8006548:	4682      	mov	sl, r0
 800654a:	460c      	mov	r4, r1
 800654c:	4690      	mov	r8, r2
 800654e:	d82d      	bhi.n	80065ac <__ssputs_r+0x70>
 8006550:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006554:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006558:	d026      	beq.n	80065a8 <__ssputs_r+0x6c>
 800655a:	6965      	ldr	r5, [r4, #20]
 800655c:	6909      	ldr	r1, [r1, #16]
 800655e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006562:	eba3 0901 	sub.w	r9, r3, r1
 8006566:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800656a:	1c7b      	adds	r3, r7, #1
 800656c:	444b      	add	r3, r9
 800656e:	106d      	asrs	r5, r5, #1
 8006570:	429d      	cmp	r5, r3
 8006572:	bf38      	it	cc
 8006574:	461d      	movcc	r5, r3
 8006576:	0553      	lsls	r3, r2, #21
 8006578:	d527      	bpl.n	80065ca <__ssputs_r+0x8e>
 800657a:	4629      	mov	r1, r5
 800657c:	f7ff ff52 	bl	8006424 <_malloc_r>
 8006580:	4606      	mov	r6, r0
 8006582:	b360      	cbz	r0, 80065de <__ssputs_r+0xa2>
 8006584:	6921      	ldr	r1, [r4, #16]
 8006586:	464a      	mov	r2, r9
 8006588:	f7ff fed2 	bl	8006330 <memcpy>
 800658c:	89a3      	ldrh	r3, [r4, #12]
 800658e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006596:	81a3      	strh	r3, [r4, #12]
 8006598:	6126      	str	r6, [r4, #16]
 800659a:	6165      	str	r5, [r4, #20]
 800659c:	444e      	add	r6, r9
 800659e:	eba5 0509 	sub.w	r5, r5, r9
 80065a2:	6026      	str	r6, [r4, #0]
 80065a4:	60a5      	str	r5, [r4, #8]
 80065a6:	463e      	mov	r6, r7
 80065a8:	42be      	cmp	r6, r7
 80065aa:	d900      	bls.n	80065ae <__ssputs_r+0x72>
 80065ac:	463e      	mov	r6, r7
 80065ae:	6820      	ldr	r0, [r4, #0]
 80065b0:	4632      	mov	r2, r6
 80065b2:	4641      	mov	r1, r8
 80065b4:	f000 faa8 	bl	8006b08 <memmove>
 80065b8:	68a3      	ldr	r3, [r4, #8]
 80065ba:	1b9b      	subs	r3, r3, r6
 80065bc:	60a3      	str	r3, [r4, #8]
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	4433      	add	r3, r6
 80065c2:	6023      	str	r3, [r4, #0]
 80065c4:	2000      	movs	r0, #0
 80065c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ca:	462a      	mov	r2, r5
 80065cc:	f000 fac6 	bl	8006b5c <_realloc_r>
 80065d0:	4606      	mov	r6, r0
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d1e0      	bne.n	8006598 <__ssputs_r+0x5c>
 80065d6:	6921      	ldr	r1, [r4, #16]
 80065d8:	4650      	mov	r0, sl
 80065da:	f7ff feb7 	bl	800634c <_free_r>
 80065de:	230c      	movs	r3, #12
 80065e0:	f8ca 3000 	str.w	r3, [sl]
 80065e4:	89a3      	ldrh	r3, [r4, #12]
 80065e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065ea:	81a3      	strh	r3, [r4, #12]
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295
 80065f0:	e7e9      	b.n	80065c6 <__ssputs_r+0x8a>
	...

080065f4 <_svfiprintf_r>:
 80065f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f8:	4698      	mov	r8, r3
 80065fa:	898b      	ldrh	r3, [r1, #12]
 80065fc:	061b      	lsls	r3, r3, #24
 80065fe:	b09d      	sub	sp, #116	@ 0x74
 8006600:	4607      	mov	r7, r0
 8006602:	460d      	mov	r5, r1
 8006604:	4614      	mov	r4, r2
 8006606:	d510      	bpl.n	800662a <_svfiprintf_r+0x36>
 8006608:	690b      	ldr	r3, [r1, #16]
 800660a:	b973      	cbnz	r3, 800662a <_svfiprintf_r+0x36>
 800660c:	2140      	movs	r1, #64	@ 0x40
 800660e:	f7ff ff09 	bl	8006424 <_malloc_r>
 8006612:	6028      	str	r0, [r5, #0]
 8006614:	6128      	str	r0, [r5, #16]
 8006616:	b930      	cbnz	r0, 8006626 <_svfiprintf_r+0x32>
 8006618:	230c      	movs	r3, #12
 800661a:	603b      	str	r3, [r7, #0]
 800661c:	f04f 30ff 	mov.w	r0, #4294967295
 8006620:	b01d      	add	sp, #116	@ 0x74
 8006622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006626:	2340      	movs	r3, #64	@ 0x40
 8006628:	616b      	str	r3, [r5, #20]
 800662a:	2300      	movs	r3, #0
 800662c:	9309      	str	r3, [sp, #36]	@ 0x24
 800662e:	2320      	movs	r3, #32
 8006630:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006634:	f8cd 800c 	str.w	r8, [sp, #12]
 8006638:	2330      	movs	r3, #48	@ 0x30
 800663a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80067d8 <_svfiprintf_r+0x1e4>
 800663e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006642:	f04f 0901 	mov.w	r9, #1
 8006646:	4623      	mov	r3, r4
 8006648:	469a      	mov	sl, r3
 800664a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800664e:	b10a      	cbz	r2, 8006654 <_svfiprintf_r+0x60>
 8006650:	2a25      	cmp	r2, #37	@ 0x25
 8006652:	d1f9      	bne.n	8006648 <_svfiprintf_r+0x54>
 8006654:	ebba 0b04 	subs.w	fp, sl, r4
 8006658:	d00b      	beq.n	8006672 <_svfiprintf_r+0x7e>
 800665a:	465b      	mov	r3, fp
 800665c:	4622      	mov	r2, r4
 800665e:	4629      	mov	r1, r5
 8006660:	4638      	mov	r0, r7
 8006662:	f7ff ff6b 	bl	800653c <__ssputs_r>
 8006666:	3001      	adds	r0, #1
 8006668:	f000 80a7 	beq.w	80067ba <_svfiprintf_r+0x1c6>
 800666c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800666e:	445a      	add	r2, fp
 8006670:	9209      	str	r2, [sp, #36]	@ 0x24
 8006672:	f89a 3000 	ldrb.w	r3, [sl]
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 809f 	beq.w	80067ba <_svfiprintf_r+0x1c6>
 800667c:	2300      	movs	r3, #0
 800667e:	f04f 32ff 	mov.w	r2, #4294967295
 8006682:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006686:	f10a 0a01 	add.w	sl, sl, #1
 800668a:	9304      	str	r3, [sp, #16]
 800668c:	9307      	str	r3, [sp, #28]
 800668e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006692:	931a      	str	r3, [sp, #104]	@ 0x68
 8006694:	4654      	mov	r4, sl
 8006696:	2205      	movs	r2, #5
 8006698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800669c:	484e      	ldr	r0, [pc, #312]	@ (80067d8 <_svfiprintf_r+0x1e4>)
 800669e:	f7f9 fdd7 	bl	8000250 <memchr>
 80066a2:	9a04      	ldr	r2, [sp, #16]
 80066a4:	b9d8      	cbnz	r0, 80066de <_svfiprintf_r+0xea>
 80066a6:	06d0      	lsls	r0, r2, #27
 80066a8:	bf44      	itt	mi
 80066aa:	2320      	movmi	r3, #32
 80066ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066b0:	0711      	lsls	r1, r2, #28
 80066b2:	bf44      	itt	mi
 80066b4:	232b      	movmi	r3, #43	@ 0x2b
 80066b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066ba:	f89a 3000 	ldrb.w	r3, [sl]
 80066be:	2b2a      	cmp	r3, #42	@ 0x2a
 80066c0:	d015      	beq.n	80066ee <_svfiprintf_r+0xfa>
 80066c2:	9a07      	ldr	r2, [sp, #28]
 80066c4:	4654      	mov	r4, sl
 80066c6:	2000      	movs	r0, #0
 80066c8:	f04f 0c0a 	mov.w	ip, #10
 80066cc:	4621      	mov	r1, r4
 80066ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066d2:	3b30      	subs	r3, #48	@ 0x30
 80066d4:	2b09      	cmp	r3, #9
 80066d6:	d94b      	bls.n	8006770 <_svfiprintf_r+0x17c>
 80066d8:	b1b0      	cbz	r0, 8006708 <_svfiprintf_r+0x114>
 80066da:	9207      	str	r2, [sp, #28]
 80066dc:	e014      	b.n	8006708 <_svfiprintf_r+0x114>
 80066de:	eba0 0308 	sub.w	r3, r0, r8
 80066e2:	fa09 f303 	lsl.w	r3, r9, r3
 80066e6:	4313      	orrs	r3, r2
 80066e8:	9304      	str	r3, [sp, #16]
 80066ea:	46a2      	mov	sl, r4
 80066ec:	e7d2      	b.n	8006694 <_svfiprintf_r+0xa0>
 80066ee:	9b03      	ldr	r3, [sp, #12]
 80066f0:	1d19      	adds	r1, r3, #4
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	9103      	str	r1, [sp, #12]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	bfbb      	ittet	lt
 80066fa:	425b      	neglt	r3, r3
 80066fc:	f042 0202 	orrlt.w	r2, r2, #2
 8006700:	9307      	strge	r3, [sp, #28]
 8006702:	9307      	strlt	r3, [sp, #28]
 8006704:	bfb8      	it	lt
 8006706:	9204      	strlt	r2, [sp, #16]
 8006708:	7823      	ldrb	r3, [r4, #0]
 800670a:	2b2e      	cmp	r3, #46	@ 0x2e
 800670c:	d10a      	bne.n	8006724 <_svfiprintf_r+0x130>
 800670e:	7863      	ldrb	r3, [r4, #1]
 8006710:	2b2a      	cmp	r3, #42	@ 0x2a
 8006712:	d132      	bne.n	800677a <_svfiprintf_r+0x186>
 8006714:	9b03      	ldr	r3, [sp, #12]
 8006716:	1d1a      	adds	r2, r3, #4
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	9203      	str	r2, [sp, #12]
 800671c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006720:	3402      	adds	r4, #2
 8006722:	9305      	str	r3, [sp, #20]
 8006724:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80067e8 <_svfiprintf_r+0x1f4>
 8006728:	7821      	ldrb	r1, [r4, #0]
 800672a:	2203      	movs	r2, #3
 800672c:	4650      	mov	r0, sl
 800672e:	f7f9 fd8f 	bl	8000250 <memchr>
 8006732:	b138      	cbz	r0, 8006744 <_svfiprintf_r+0x150>
 8006734:	9b04      	ldr	r3, [sp, #16]
 8006736:	eba0 000a 	sub.w	r0, r0, sl
 800673a:	2240      	movs	r2, #64	@ 0x40
 800673c:	4082      	lsls	r2, r0
 800673e:	4313      	orrs	r3, r2
 8006740:	3401      	adds	r4, #1
 8006742:	9304      	str	r3, [sp, #16]
 8006744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006748:	4824      	ldr	r0, [pc, #144]	@ (80067dc <_svfiprintf_r+0x1e8>)
 800674a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800674e:	2206      	movs	r2, #6
 8006750:	f7f9 fd7e 	bl	8000250 <memchr>
 8006754:	2800      	cmp	r0, #0
 8006756:	d036      	beq.n	80067c6 <_svfiprintf_r+0x1d2>
 8006758:	4b21      	ldr	r3, [pc, #132]	@ (80067e0 <_svfiprintf_r+0x1ec>)
 800675a:	bb1b      	cbnz	r3, 80067a4 <_svfiprintf_r+0x1b0>
 800675c:	9b03      	ldr	r3, [sp, #12]
 800675e:	3307      	adds	r3, #7
 8006760:	f023 0307 	bic.w	r3, r3, #7
 8006764:	3308      	adds	r3, #8
 8006766:	9303      	str	r3, [sp, #12]
 8006768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800676a:	4433      	add	r3, r6
 800676c:	9309      	str	r3, [sp, #36]	@ 0x24
 800676e:	e76a      	b.n	8006646 <_svfiprintf_r+0x52>
 8006770:	fb0c 3202 	mla	r2, ip, r2, r3
 8006774:	460c      	mov	r4, r1
 8006776:	2001      	movs	r0, #1
 8006778:	e7a8      	b.n	80066cc <_svfiprintf_r+0xd8>
 800677a:	2300      	movs	r3, #0
 800677c:	3401      	adds	r4, #1
 800677e:	9305      	str	r3, [sp, #20]
 8006780:	4619      	mov	r1, r3
 8006782:	f04f 0c0a 	mov.w	ip, #10
 8006786:	4620      	mov	r0, r4
 8006788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800678c:	3a30      	subs	r2, #48	@ 0x30
 800678e:	2a09      	cmp	r2, #9
 8006790:	d903      	bls.n	800679a <_svfiprintf_r+0x1a6>
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0c6      	beq.n	8006724 <_svfiprintf_r+0x130>
 8006796:	9105      	str	r1, [sp, #20]
 8006798:	e7c4      	b.n	8006724 <_svfiprintf_r+0x130>
 800679a:	fb0c 2101 	mla	r1, ip, r1, r2
 800679e:	4604      	mov	r4, r0
 80067a0:	2301      	movs	r3, #1
 80067a2:	e7f0      	b.n	8006786 <_svfiprintf_r+0x192>
 80067a4:	ab03      	add	r3, sp, #12
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	462a      	mov	r2, r5
 80067aa:	4b0e      	ldr	r3, [pc, #56]	@ (80067e4 <_svfiprintf_r+0x1f0>)
 80067ac:	a904      	add	r1, sp, #16
 80067ae:	4638      	mov	r0, r7
 80067b0:	f3af 8000 	nop.w
 80067b4:	1c42      	adds	r2, r0, #1
 80067b6:	4606      	mov	r6, r0
 80067b8:	d1d6      	bne.n	8006768 <_svfiprintf_r+0x174>
 80067ba:	89ab      	ldrh	r3, [r5, #12]
 80067bc:	065b      	lsls	r3, r3, #25
 80067be:	f53f af2d 	bmi.w	800661c <_svfiprintf_r+0x28>
 80067c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067c4:	e72c      	b.n	8006620 <_svfiprintf_r+0x2c>
 80067c6:	ab03      	add	r3, sp, #12
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	462a      	mov	r2, r5
 80067cc:	4b05      	ldr	r3, [pc, #20]	@ (80067e4 <_svfiprintf_r+0x1f0>)
 80067ce:	a904      	add	r1, sp, #16
 80067d0:	4638      	mov	r0, r7
 80067d2:	f000 f879 	bl	80068c8 <_printf_i>
 80067d6:	e7ed      	b.n	80067b4 <_svfiprintf_r+0x1c0>
 80067d8:	08006cb4 	.word	0x08006cb4
 80067dc:	08006cbe 	.word	0x08006cbe
 80067e0:	00000000 	.word	0x00000000
 80067e4:	0800653d 	.word	0x0800653d
 80067e8:	08006cba 	.word	0x08006cba

080067ec <_printf_common>:
 80067ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067f0:	4616      	mov	r6, r2
 80067f2:	4698      	mov	r8, r3
 80067f4:	688a      	ldr	r2, [r1, #8]
 80067f6:	690b      	ldr	r3, [r1, #16]
 80067f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067fc:	4293      	cmp	r3, r2
 80067fe:	bfb8      	it	lt
 8006800:	4613      	movlt	r3, r2
 8006802:	6033      	str	r3, [r6, #0]
 8006804:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006808:	4607      	mov	r7, r0
 800680a:	460c      	mov	r4, r1
 800680c:	b10a      	cbz	r2, 8006812 <_printf_common+0x26>
 800680e:	3301      	adds	r3, #1
 8006810:	6033      	str	r3, [r6, #0]
 8006812:	6823      	ldr	r3, [r4, #0]
 8006814:	0699      	lsls	r1, r3, #26
 8006816:	bf42      	ittt	mi
 8006818:	6833      	ldrmi	r3, [r6, #0]
 800681a:	3302      	addmi	r3, #2
 800681c:	6033      	strmi	r3, [r6, #0]
 800681e:	6825      	ldr	r5, [r4, #0]
 8006820:	f015 0506 	ands.w	r5, r5, #6
 8006824:	d106      	bne.n	8006834 <_printf_common+0x48>
 8006826:	f104 0a19 	add.w	sl, r4, #25
 800682a:	68e3      	ldr	r3, [r4, #12]
 800682c:	6832      	ldr	r2, [r6, #0]
 800682e:	1a9b      	subs	r3, r3, r2
 8006830:	42ab      	cmp	r3, r5
 8006832:	dc26      	bgt.n	8006882 <_printf_common+0x96>
 8006834:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006838:	6822      	ldr	r2, [r4, #0]
 800683a:	3b00      	subs	r3, #0
 800683c:	bf18      	it	ne
 800683e:	2301      	movne	r3, #1
 8006840:	0692      	lsls	r2, r2, #26
 8006842:	d42b      	bmi.n	800689c <_printf_common+0xb0>
 8006844:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006848:	4641      	mov	r1, r8
 800684a:	4638      	mov	r0, r7
 800684c:	47c8      	blx	r9
 800684e:	3001      	adds	r0, #1
 8006850:	d01e      	beq.n	8006890 <_printf_common+0xa4>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	6922      	ldr	r2, [r4, #16]
 8006856:	f003 0306 	and.w	r3, r3, #6
 800685a:	2b04      	cmp	r3, #4
 800685c:	bf02      	ittt	eq
 800685e:	68e5      	ldreq	r5, [r4, #12]
 8006860:	6833      	ldreq	r3, [r6, #0]
 8006862:	1aed      	subeq	r5, r5, r3
 8006864:	68a3      	ldr	r3, [r4, #8]
 8006866:	bf0c      	ite	eq
 8006868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800686c:	2500      	movne	r5, #0
 800686e:	4293      	cmp	r3, r2
 8006870:	bfc4      	itt	gt
 8006872:	1a9b      	subgt	r3, r3, r2
 8006874:	18ed      	addgt	r5, r5, r3
 8006876:	2600      	movs	r6, #0
 8006878:	341a      	adds	r4, #26
 800687a:	42b5      	cmp	r5, r6
 800687c:	d11a      	bne.n	80068b4 <_printf_common+0xc8>
 800687e:	2000      	movs	r0, #0
 8006880:	e008      	b.n	8006894 <_printf_common+0xa8>
 8006882:	2301      	movs	r3, #1
 8006884:	4652      	mov	r2, sl
 8006886:	4641      	mov	r1, r8
 8006888:	4638      	mov	r0, r7
 800688a:	47c8      	blx	r9
 800688c:	3001      	adds	r0, #1
 800688e:	d103      	bne.n	8006898 <_printf_common+0xac>
 8006890:	f04f 30ff 	mov.w	r0, #4294967295
 8006894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006898:	3501      	adds	r5, #1
 800689a:	e7c6      	b.n	800682a <_printf_common+0x3e>
 800689c:	18e1      	adds	r1, r4, r3
 800689e:	1c5a      	adds	r2, r3, #1
 80068a0:	2030      	movs	r0, #48	@ 0x30
 80068a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068a6:	4422      	add	r2, r4
 80068a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068b0:	3302      	adds	r3, #2
 80068b2:	e7c7      	b.n	8006844 <_printf_common+0x58>
 80068b4:	2301      	movs	r3, #1
 80068b6:	4622      	mov	r2, r4
 80068b8:	4641      	mov	r1, r8
 80068ba:	4638      	mov	r0, r7
 80068bc:	47c8      	blx	r9
 80068be:	3001      	adds	r0, #1
 80068c0:	d0e6      	beq.n	8006890 <_printf_common+0xa4>
 80068c2:	3601      	adds	r6, #1
 80068c4:	e7d9      	b.n	800687a <_printf_common+0x8e>
	...

080068c8 <_printf_i>:
 80068c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068cc:	7e0f      	ldrb	r7, [r1, #24]
 80068ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068d0:	2f78      	cmp	r7, #120	@ 0x78
 80068d2:	4691      	mov	r9, r2
 80068d4:	4680      	mov	r8, r0
 80068d6:	460c      	mov	r4, r1
 80068d8:	469a      	mov	sl, r3
 80068da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068de:	d807      	bhi.n	80068f0 <_printf_i+0x28>
 80068e0:	2f62      	cmp	r7, #98	@ 0x62
 80068e2:	d80a      	bhi.n	80068fa <_printf_i+0x32>
 80068e4:	2f00      	cmp	r7, #0
 80068e6:	f000 80d2 	beq.w	8006a8e <_printf_i+0x1c6>
 80068ea:	2f58      	cmp	r7, #88	@ 0x58
 80068ec:	f000 80b9 	beq.w	8006a62 <_printf_i+0x19a>
 80068f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068f8:	e03a      	b.n	8006970 <_printf_i+0xa8>
 80068fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068fe:	2b15      	cmp	r3, #21
 8006900:	d8f6      	bhi.n	80068f0 <_printf_i+0x28>
 8006902:	a101      	add	r1, pc, #4	@ (adr r1, 8006908 <_printf_i+0x40>)
 8006904:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006908:	08006961 	.word	0x08006961
 800690c:	08006975 	.word	0x08006975
 8006910:	080068f1 	.word	0x080068f1
 8006914:	080068f1 	.word	0x080068f1
 8006918:	080068f1 	.word	0x080068f1
 800691c:	080068f1 	.word	0x080068f1
 8006920:	08006975 	.word	0x08006975
 8006924:	080068f1 	.word	0x080068f1
 8006928:	080068f1 	.word	0x080068f1
 800692c:	080068f1 	.word	0x080068f1
 8006930:	080068f1 	.word	0x080068f1
 8006934:	08006a75 	.word	0x08006a75
 8006938:	0800699f 	.word	0x0800699f
 800693c:	08006a2f 	.word	0x08006a2f
 8006940:	080068f1 	.word	0x080068f1
 8006944:	080068f1 	.word	0x080068f1
 8006948:	08006a97 	.word	0x08006a97
 800694c:	080068f1 	.word	0x080068f1
 8006950:	0800699f 	.word	0x0800699f
 8006954:	080068f1 	.word	0x080068f1
 8006958:	080068f1 	.word	0x080068f1
 800695c:	08006a37 	.word	0x08006a37
 8006960:	6833      	ldr	r3, [r6, #0]
 8006962:	1d1a      	adds	r2, r3, #4
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6032      	str	r2, [r6, #0]
 8006968:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800696c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006970:	2301      	movs	r3, #1
 8006972:	e09d      	b.n	8006ab0 <_printf_i+0x1e8>
 8006974:	6833      	ldr	r3, [r6, #0]
 8006976:	6820      	ldr	r0, [r4, #0]
 8006978:	1d19      	adds	r1, r3, #4
 800697a:	6031      	str	r1, [r6, #0]
 800697c:	0606      	lsls	r6, r0, #24
 800697e:	d501      	bpl.n	8006984 <_printf_i+0xbc>
 8006980:	681d      	ldr	r5, [r3, #0]
 8006982:	e003      	b.n	800698c <_printf_i+0xc4>
 8006984:	0645      	lsls	r5, r0, #25
 8006986:	d5fb      	bpl.n	8006980 <_printf_i+0xb8>
 8006988:	f9b3 5000 	ldrsh.w	r5, [r3]
 800698c:	2d00      	cmp	r5, #0
 800698e:	da03      	bge.n	8006998 <_printf_i+0xd0>
 8006990:	232d      	movs	r3, #45	@ 0x2d
 8006992:	426d      	negs	r5, r5
 8006994:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006998:	4859      	ldr	r0, [pc, #356]	@ (8006b00 <_printf_i+0x238>)
 800699a:	230a      	movs	r3, #10
 800699c:	e011      	b.n	80069c2 <_printf_i+0xfa>
 800699e:	6821      	ldr	r1, [r4, #0]
 80069a0:	6833      	ldr	r3, [r6, #0]
 80069a2:	0608      	lsls	r0, r1, #24
 80069a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80069a8:	d402      	bmi.n	80069b0 <_printf_i+0xe8>
 80069aa:	0649      	lsls	r1, r1, #25
 80069ac:	bf48      	it	mi
 80069ae:	b2ad      	uxthmi	r5, r5
 80069b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80069b2:	4853      	ldr	r0, [pc, #332]	@ (8006b00 <_printf_i+0x238>)
 80069b4:	6033      	str	r3, [r6, #0]
 80069b6:	bf14      	ite	ne
 80069b8:	230a      	movne	r3, #10
 80069ba:	2308      	moveq	r3, #8
 80069bc:	2100      	movs	r1, #0
 80069be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069c2:	6866      	ldr	r6, [r4, #4]
 80069c4:	60a6      	str	r6, [r4, #8]
 80069c6:	2e00      	cmp	r6, #0
 80069c8:	bfa2      	ittt	ge
 80069ca:	6821      	ldrge	r1, [r4, #0]
 80069cc:	f021 0104 	bicge.w	r1, r1, #4
 80069d0:	6021      	strge	r1, [r4, #0]
 80069d2:	b90d      	cbnz	r5, 80069d8 <_printf_i+0x110>
 80069d4:	2e00      	cmp	r6, #0
 80069d6:	d04b      	beq.n	8006a70 <_printf_i+0x1a8>
 80069d8:	4616      	mov	r6, r2
 80069da:	fbb5 f1f3 	udiv	r1, r5, r3
 80069de:	fb03 5711 	mls	r7, r3, r1, r5
 80069e2:	5dc7      	ldrb	r7, [r0, r7]
 80069e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069e8:	462f      	mov	r7, r5
 80069ea:	42bb      	cmp	r3, r7
 80069ec:	460d      	mov	r5, r1
 80069ee:	d9f4      	bls.n	80069da <_printf_i+0x112>
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d10b      	bne.n	8006a0c <_printf_i+0x144>
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	07df      	lsls	r7, r3, #31
 80069f8:	d508      	bpl.n	8006a0c <_printf_i+0x144>
 80069fa:	6923      	ldr	r3, [r4, #16]
 80069fc:	6861      	ldr	r1, [r4, #4]
 80069fe:	4299      	cmp	r1, r3
 8006a00:	bfde      	ittt	le
 8006a02:	2330      	movle	r3, #48	@ 0x30
 8006a04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a0c:	1b92      	subs	r2, r2, r6
 8006a0e:	6122      	str	r2, [r4, #16]
 8006a10:	f8cd a000 	str.w	sl, [sp]
 8006a14:	464b      	mov	r3, r9
 8006a16:	aa03      	add	r2, sp, #12
 8006a18:	4621      	mov	r1, r4
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	f7ff fee6 	bl	80067ec <_printf_common>
 8006a20:	3001      	adds	r0, #1
 8006a22:	d14a      	bne.n	8006aba <_printf_i+0x1f2>
 8006a24:	f04f 30ff 	mov.w	r0, #4294967295
 8006a28:	b004      	add	sp, #16
 8006a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	f043 0320 	orr.w	r3, r3, #32
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	4833      	ldr	r0, [pc, #204]	@ (8006b04 <_printf_i+0x23c>)
 8006a38:	2778      	movs	r7, #120	@ 0x78
 8006a3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	6831      	ldr	r1, [r6, #0]
 8006a42:	061f      	lsls	r7, r3, #24
 8006a44:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a48:	d402      	bmi.n	8006a50 <_printf_i+0x188>
 8006a4a:	065f      	lsls	r7, r3, #25
 8006a4c:	bf48      	it	mi
 8006a4e:	b2ad      	uxthmi	r5, r5
 8006a50:	6031      	str	r1, [r6, #0]
 8006a52:	07d9      	lsls	r1, r3, #31
 8006a54:	bf44      	itt	mi
 8006a56:	f043 0320 	orrmi.w	r3, r3, #32
 8006a5a:	6023      	strmi	r3, [r4, #0]
 8006a5c:	b11d      	cbz	r5, 8006a66 <_printf_i+0x19e>
 8006a5e:	2310      	movs	r3, #16
 8006a60:	e7ac      	b.n	80069bc <_printf_i+0xf4>
 8006a62:	4827      	ldr	r0, [pc, #156]	@ (8006b00 <_printf_i+0x238>)
 8006a64:	e7e9      	b.n	8006a3a <_printf_i+0x172>
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	f023 0320 	bic.w	r3, r3, #32
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	e7f6      	b.n	8006a5e <_printf_i+0x196>
 8006a70:	4616      	mov	r6, r2
 8006a72:	e7bd      	b.n	80069f0 <_printf_i+0x128>
 8006a74:	6833      	ldr	r3, [r6, #0]
 8006a76:	6825      	ldr	r5, [r4, #0]
 8006a78:	6961      	ldr	r1, [r4, #20]
 8006a7a:	1d18      	adds	r0, r3, #4
 8006a7c:	6030      	str	r0, [r6, #0]
 8006a7e:	062e      	lsls	r6, r5, #24
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	d501      	bpl.n	8006a88 <_printf_i+0x1c0>
 8006a84:	6019      	str	r1, [r3, #0]
 8006a86:	e002      	b.n	8006a8e <_printf_i+0x1c6>
 8006a88:	0668      	lsls	r0, r5, #25
 8006a8a:	d5fb      	bpl.n	8006a84 <_printf_i+0x1bc>
 8006a8c:	8019      	strh	r1, [r3, #0]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	6123      	str	r3, [r4, #16]
 8006a92:	4616      	mov	r6, r2
 8006a94:	e7bc      	b.n	8006a10 <_printf_i+0x148>
 8006a96:	6833      	ldr	r3, [r6, #0]
 8006a98:	1d1a      	adds	r2, r3, #4
 8006a9a:	6032      	str	r2, [r6, #0]
 8006a9c:	681e      	ldr	r6, [r3, #0]
 8006a9e:	6862      	ldr	r2, [r4, #4]
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	f7f9 fbd4 	bl	8000250 <memchr>
 8006aa8:	b108      	cbz	r0, 8006aae <_printf_i+0x1e6>
 8006aaa:	1b80      	subs	r0, r0, r6
 8006aac:	6060      	str	r0, [r4, #4]
 8006aae:	6863      	ldr	r3, [r4, #4]
 8006ab0:	6123      	str	r3, [r4, #16]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ab8:	e7aa      	b.n	8006a10 <_printf_i+0x148>
 8006aba:	6923      	ldr	r3, [r4, #16]
 8006abc:	4632      	mov	r2, r6
 8006abe:	4649      	mov	r1, r9
 8006ac0:	4640      	mov	r0, r8
 8006ac2:	47d0      	blx	sl
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	d0ad      	beq.n	8006a24 <_printf_i+0x15c>
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	079b      	lsls	r3, r3, #30
 8006acc:	d413      	bmi.n	8006af6 <_printf_i+0x22e>
 8006ace:	68e0      	ldr	r0, [r4, #12]
 8006ad0:	9b03      	ldr	r3, [sp, #12]
 8006ad2:	4298      	cmp	r0, r3
 8006ad4:	bfb8      	it	lt
 8006ad6:	4618      	movlt	r0, r3
 8006ad8:	e7a6      	b.n	8006a28 <_printf_i+0x160>
 8006ada:	2301      	movs	r3, #1
 8006adc:	4632      	mov	r2, r6
 8006ade:	4649      	mov	r1, r9
 8006ae0:	4640      	mov	r0, r8
 8006ae2:	47d0      	blx	sl
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	d09d      	beq.n	8006a24 <_printf_i+0x15c>
 8006ae8:	3501      	adds	r5, #1
 8006aea:	68e3      	ldr	r3, [r4, #12]
 8006aec:	9903      	ldr	r1, [sp, #12]
 8006aee:	1a5b      	subs	r3, r3, r1
 8006af0:	42ab      	cmp	r3, r5
 8006af2:	dcf2      	bgt.n	8006ada <_printf_i+0x212>
 8006af4:	e7eb      	b.n	8006ace <_printf_i+0x206>
 8006af6:	2500      	movs	r5, #0
 8006af8:	f104 0619 	add.w	r6, r4, #25
 8006afc:	e7f5      	b.n	8006aea <_printf_i+0x222>
 8006afe:	bf00      	nop
 8006b00:	08006cc5 	.word	0x08006cc5
 8006b04:	08006cd6 	.word	0x08006cd6

08006b08 <memmove>:
 8006b08:	4288      	cmp	r0, r1
 8006b0a:	b510      	push	{r4, lr}
 8006b0c:	eb01 0402 	add.w	r4, r1, r2
 8006b10:	d902      	bls.n	8006b18 <memmove+0x10>
 8006b12:	4284      	cmp	r4, r0
 8006b14:	4623      	mov	r3, r4
 8006b16:	d807      	bhi.n	8006b28 <memmove+0x20>
 8006b18:	1e43      	subs	r3, r0, #1
 8006b1a:	42a1      	cmp	r1, r4
 8006b1c:	d008      	beq.n	8006b30 <memmove+0x28>
 8006b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b26:	e7f8      	b.n	8006b1a <memmove+0x12>
 8006b28:	4402      	add	r2, r0
 8006b2a:	4601      	mov	r1, r0
 8006b2c:	428a      	cmp	r2, r1
 8006b2e:	d100      	bne.n	8006b32 <memmove+0x2a>
 8006b30:	bd10      	pop	{r4, pc}
 8006b32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b3a:	e7f7      	b.n	8006b2c <memmove+0x24>

08006b3c <_sbrk_r>:
 8006b3c:	b538      	push	{r3, r4, r5, lr}
 8006b3e:	4d06      	ldr	r5, [pc, #24]	@ (8006b58 <_sbrk_r+0x1c>)
 8006b40:	2300      	movs	r3, #0
 8006b42:	4604      	mov	r4, r0
 8006b44:	4608      	mov	r0, r1
 8006b46:	602b      	str	r3, [r5, #0]
 8006b48:	f7fa f8c4 	bl	8000cd4 <_sbrk>
 8006b4c:	1c43      	adds	r3, r0, #1
 8006b4e:	d102      	bne.n	8006b56 <_sbrk_r+0x1a>
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	b103      	cbz	r3, 8006b56 <_sbrk_r+0x1a>
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	bd38      	pop	{r3, r4, r5, pc}
 8006b58:	2000bd38 	.word	0x2000bd38

08006b5c <_realloc_r>:
 8006b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b60:	4680      	mov	r8, r0
 8006b62:	4615      	mov	r5, r2
 8006b64:	460c      	mov	r4, r1
 8006b66:	b921      	cbnz	r1, 8006b72 <_realloc_r+0x16>
 8006b68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	f7ff bc59 	b.w	8006424 <_malloc_r>
 8006b72:	b92a      	cbnz	r2, 8006b80 <_realloc_r+0x24>
 8006b74:	f7ff fbea 	bl	800634c <_free_r>
 8006b78:	2400      	movs	r4, #0
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b80:	f000 f81a 	bl	8006bb8 <_malloc_usable_size_r>
 8006b84:	4285      	cmp	r5, r0
 8006b86:	4606      	mov	r6, r0
 8006b88:	d802      	bhi.n	8006b90 <_realloc_r+0x34>
 8006b8a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006b8e:	d8f4      	bhi.n	8006b7a <_realloc_r+0x1e>
 8006b90:	4629      	mov	r1, r5
 8006b92:	4640      	mov	r0, r8
 8006b94:	f7ff fc46 	bl	8006424 <_malloc_r>
 8006b98:	4607      	mov	r7, r0
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	d0ec      	beq.n	8006b78 <_realloc_r+0x1c>
 8006b9e:	42b5      	cmp	r5, r6
 8006ba0:	462a      	mov	r2, r5
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	bf28      	it	cs
 8006ba6:	4632      	movcs	r2, r6
 8006ba8:	f7ff fbc2 	bl	8006330 <memcpy>
 8006bac:	4621      	mov	r1, r4
 8006bae:	4640      	mov	r0, r8
 8006bb0:	f7ff fbcc 	bl	800634c <_free_r>
 8006bb4:	463c      	mov	r4, r7
 8006bb6:	e7e0      	b.n	8006b7a <_realloc_r+0x1e>

08006bb8 <_malloc_usable_size_r>:
 8006bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bbc:	1f18      	subs	r0, r3, #4
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bfbc      	itt	lt
 8006bc2:	580b      	ldrlt	r3, [r1, r0]
 8006bc4:	18c0      	addlt	r0, r0, r3
 8006bc6:	4770      	bx	lr

08006bc8 <_init>:
 8006bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bca:	bf00      	nop
 8006bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bce:	bc08      	pop	{r3}
 8006bd0:	469e      	mov	lr, r3
 8006bd2:	4770      	bx	lr

08006bd4 <_fini>:
 8006bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd6:	bf00      	nop
 8006bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bda:	bc08      	pop	{r3}
 8006bdc:	469e      	mov	lr, r3
 8006bde:	4770      	bx	lr
