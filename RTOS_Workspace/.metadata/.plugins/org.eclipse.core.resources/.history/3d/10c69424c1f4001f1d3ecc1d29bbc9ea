/*
 * task_handler.c
 *
 *  Created on: Feb 25, 2025
 *      Author: solom
 */
#include "main.h"
#include "string.h"

int extract_command(command_t *cmd);
void process_command (command_t *cmd);

const char* msg_invalid = "!!!!!! Invalid Option !!!!!!\n";

void menu_task_handler(void* parameters)
{
	uint32_t cmd_addr;

	command_t cmd;

	int option;

	const char* msg_menu = "=================================\n"
						   "|			MENU				|\n"
						   "=================================\n"
								"Led effect  	-------> 0\n"
								"Date and Time  -------> 1\n"
								"Exit  			-------> 2\n"
								"Enter your choice here : ";
	while (1)
	{
		xQueueSend(xQueuePrint,&msg_menu,portMAX_DELAY);

		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);

		cmd = (command_t*)cmd_addr;

		if (cmd->Len == 1)
		{
			option = cmd->payload[0] - 48;

			switch(option)
			{
			case 0:
				curr_state = sLedEffect;
				xTaskNotify(led_task_handle,0,eNoAction);
				break;

			case 1:
				curr_state = sRtcMenu;
				xTaskNotify(rtc_task_handle,0,eNoAction);

			case 2: /* Implement exit */
				break;

			default:
				xQueueSend(xQueuePrint,&msg_invalid,portMAX_DELAY);
				continue;
			}

		}
		else
		{
			// invalid entry
			xQueueSend(xQueuePrint,&msg_invalid,portMAX_DELAY);
		}

		//Wait to run again when some other task notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
	}

}

void led_task_handler(void* parameters)
{
	uint32_t cmd_addr;
		command_t *cmd;
		const char* msg_led = "========================\n"
							  "|      LED Effect     |\n"
							  "========================\n"
							  "(none,e1,e2,e3,e4)\n"
							  "Enter your choice here : ";

		while(1){
			/* Wait for notification (Notify wait) */
			xTaskNotifyWait(0,0,NULL,portMAX_DELAY);

			/* Print LED menu */
			xQueueSend(xQueuePrint,&msg_led,portMAX_DELAY);

			/* wait for LED command (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);

			if(cmd->Len <= 4)
			{
				if(! strcmp((char*)cmd->payload,"none"))
					led_effect_stop();
				else if (! strcmp((char*)cmd->payload,"e1"))
					led_effect(1);
				else if (! strcmp((char*)cmd->payload,"e2"))
					led_effect(2);
				else if (! strcmp((char*)cmd->payload,"e3"))
					led_effect(3);
				else if (! strcmp((char*)cmd->payload,"e4"))
					led_effect(4);
				else
					/* print invalid message */
					xQueueSend(xQueuePrint,&msg_invalid,portMAX_DELAY);
			}else
				/* print invalid message */
				xQueueSend(xQueuePrint,&msg_invalid,portMAX_DELAY);

			/* update state variable */
			curr_state = sMainMenu;

			/* Notify menu task */
			xTaskNotify(menu_task_handle,0,eNoAction);

		}
}

void rtc_task_handler(void* parameters)
{
	while(1)
	{

	}

}

void print_task_handler(void* parameters)
{
	while (1)
	{

	}

}

void command_task_handler(void* parameters)
{
	BaseType_t ret;
	command_t cmd;
	while(1)
	{

		/* Implement Notify wait */
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);

		/* process the user data (command) stored in input data queue */
		if (ret == pdTRUE)
		{
			process_command(&cmd);
		}



		/* notify the command to relevant task */
	}
}


void process_command (command_t *cmd)
{
	extract_command(cmd);

	switch(curr_state)
	{
	case sMainMenu:
		/* Notify menu task with command */
		xTaskNotify(menu_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
		break;
	case sLedEffect :
		/* Notify Led task with command */
		xTaskNotify(led_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
	case sRtcMenu:
	case sRtcTimeConfig:
	case sRtcDateConfig:
	case sRtcReport:
		/* Notify RTC task with comand */
		xTaskNotify(rtc_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
		break;
	}

}

int extract_command(command_t *cmd)
{
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(xQueueInputData);
	if(! status) return -1;
	uint8_t i=0;

	do
	{
		status = xQueueReceive(xQueueInputData, &item, 0);
		if (status == pdTRUE) cmd->payload[i++] = item;

	}while(item != '\n');

	cmd->payload[i-1] = '/0';
	cmd->Len = i-1;

	return 0;
}
