
003_LED_Block_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074c0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  080076c0  080076c0  000086c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007860  08007860  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007860  08007860  00008860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007868  08007868  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007868  08007868  00008868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800786c  0800786c  0000886c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08007870  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c490  2000001c  0800788c  0000901c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c4ac  0800788c  000094ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160c6  00000000  00000000  0000904a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000310e  00000000  00000000  0001f110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  00022220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ffb  00000000  00000000  000236e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c0b8  00000000  00000000  000246e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001977f  00000000  00000000  0005079b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116dee  00000000  00000000  00069f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00180d08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056d4  00000000  00000000  00180d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ee  00000000  00000000  00186420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000001c 	.word	0x2000001c
 800021c:	00000000 	.word	0x00000000
 8000220:	080076a8 	.word	0x080076a8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000020 	.word	0x20000020
 800023c:	080076a8 	.word	0x080076a8

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	2000bad8 	.word	0x2000bad8

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b96a 	b.w	80005c0 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	460c      	mov	r4, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14e      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000310:	4694      	mov	ip, r2
 8000312:	458c      	cmp	ip, r1
 8000314:	4686      	mov	lr, r0
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	d962      	bls.n	80003e2 <__udivmoddi4+0xde>
 800031c:	b14a      	cbz	r2, 8000332 <__udivmoddi4+0x2e>
 800031e:	f1c2 0320 	rsb	r3, r2, #32
 8000322:	4091      	lsls	r1, r2
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	fa0c fc02 	lsl.w	ip, ip, r2
 800032c:	4319      	orrs	r1, r3
 800032e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f f68c 	uxth.w	r6, ip
 800033a:	fbb1 f4f7 	udiv	r4, r1, r7
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb07 1114 	mls	r1, r7, r4, r1
 8000346:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034a:	fb04 f106 	mul.w	r1, r4, r6
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f104 30ff 	add.w	r0, r4, #4294967295
 800035a:	f080 8112 	bcs.w	8000582 <__udivmoddi4+0x27e>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 810f 	bls.w	8000582 <__udivmoddi4+0x27e>
 8000364:	3c02      	subs	r4, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	fa1f f38e 	uxth.w	r3, lr
 800036e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000372:	fb07 1110 	mls	r1, r7, r0, r1
 8000376:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037a:	fb00 f606 	mul.w	r6, r0, r6
 800037e:	429e      	cmp	r6, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x94>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f100 31ff 	add.w	r1, r0, #4294967295
 800038a:	f080 80fc 	bcs.w	8000586 <__udivmoddi4+0x282>
 800038e:	429e      	cmp	r6, r3
 8000390:	f240 80f9 	bls.w	8000586 <__udivmoddi4+0x282>
 8000394:	4463      	add	r3, ip
 8000396:	3802      	subs	r0, #2
 8000398:	1b9b      	subs	r3, r3, r6
 800039a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa6>
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xba>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb4>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa6>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x150>
 80003c6:	42a3      	cmp	r3, r4
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xcc>
 80003ca:	4290      	cmp	r0, r2
 80003cc:	f0c0 80f0 	bcc.w	80005b0 <__udivmoddi4+0x2ac>
 80003d0:	1a86      	subs	r6, r0, r2
 80003d2:	eb64 0303 	sbc.w	r3, r4, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	2d00      	cmp	r5, #0
 80003da:	d0e6      	beq.n	80003aa <__udivmoddi4+0xa6>
 80003dc:	e9c5 6300 	strd	r6, r3, [r5]
 80003e0:	e7e3      	b.n	80003aa <__udivmoddi4+0xa6>
 80003e2:	2a00      	cmp	r2, #0
 80003e4:	f040 8090 	bne.w	8000508 <__udivmoddi4+0x204>
 80003e8:	eba1 040c 	sub.w	r4, r1, ip
 80003ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f0:	fa1f f78c 	uxth.w	r7, ip
 80003f4:	2101      	movs	r1, #1
 80003f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000402:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000406:	fb07 f006 	mul.w	r0, r7, r6
 800040a:	4298      	cmp	r0, r3
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x11c>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 34ff 	add.w	r4, r6, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0x11a>
 8000418:	4298      	cmp	r0, r3
 800041a:	f200 80cd 	bhi.w	80005b8 <__udivmoddi4+0x2b4>
 800041e:	4626      	mov	r6, r4
 8000420:	1a1c      	subs	r4, r3, r0
 8000422:	fa1f f38e 	uxth.w	r3, lr
 8000426:	fbb4 f0f8 	udiv	r0, r4, r8
 800042a:	fb08 4410 	mls	r4, r8, r0, r4
 800042e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000432:	fb00 f707 	mul.w	r7, r0, r7
 8000436:	429f      	cmp	r7, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x148>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x146>
 8000444:	429f      	cmp	r7, r3
 8000446:	f200 80b0 	bhi.w	80005aa <__udivmoddi4+0x2a6>
 800044a:	4620      	mov	r0, r4
 800044c:	1bdb      	subs	r3, r3, r7
 800044e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x9c>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa20 fc06 	lsr.w	ip, r0, r6
 8000464:	fa04 f301 	lsl.w	r3, r4, r1
 8000468:	ea43 030c 	orr.w	r3, r3, ip
 800046c:	40f4      	lsrs	r4, r6
 800046e:	fa00 f801 	lsl.w	r8, r0, r1
 8000472:	0c38      	lsrs	r0, r7, #16
 8000474:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000478:	fbb4 fef0 	udiv	lr, r4, r0
 800047c:	fa1f fc87 	uxth.w	ip, r7
 8000480:	fb00 441e 	mls	r4, r0, lr, r4
 8000484:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000488:	fb0e f90c 	mul.w	r9, lr, ip
 800048c:	45a1      	cmp	r9, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d90a      	bls.n	80004aa <__udivmoddi4+0x1a6>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049a:	f080 8084 	bcs.w	80005a6 <__udivmoddi4+0x2a2>
 800049e:	45a1      	cmp	r9, r4
 80004a0:	f240 8081 	bls.w	80005a6 <__udivmoddi4+0x2a2>
 80004a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a8:	443c      	add	r4, r7
 80004aa:	eba4 0409 	sub.w	r4, r4, r9
 80004ae:	fa1f f983 	uxth.w	r9, r3
 80004b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004be:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x1d2>
 80004c6:	193c      	adds	r4, r7, r4
 80004c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004cc:	d267      	bcs.n	800059e <__udivmoddi4+0x29a>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d965      	bls.n	800059e <__udivmoddi4+0x29a>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004da:	fba0 9302 	umull	r9, r3, r0, r2
 80004de:	eba4 040c 	sub.w	r4, r4, ip
 80004e2:	429c      	cmp	r4, r3
 80004e4:	46ce      	mov	lr, r9
 80004e6:	469c      	mov	ip, r3
 80004e8:	d351      	bcc.n	800058e <__udivmoddi4+0x28a>
 80004ea:	d04e      	beq.n	800058a <__udivmoddi4+0x286>
 80004ec:	b155      	cbz	r5, 8000504 <__udivmoddi4+0x200>
 80004ee:	ebb8 030e 	subs.w	r3, r8, lr
 80004f2:	eb64 040c 	sbc.w	r4, r4, ip
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431e      	orrs	r6, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	e9c5 6400 	strd	r6, r4, [r5]
 8000504:	2100      	movs	r1, #0
 8000506:	e750      	b.n	80003aa <__udivmoddi4+0xa6>
 8000508:	f1c2 0320 	rsb	r3, r2, #32
 800050c:	fa20 f103 	lsr.w	r1, r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa24 f303 	lsr.w	r3, r4, r3
 8000518:	4094      	lsls	r4, r2
 800051a:	430c      	orrs	r4, r1
 800051c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000520:	fa00 fe02 	lsl.w	lr, r0, r2
 8000524:	fa1f f78c 	uxth.w	r7, ip
 8000528:	fbb3 f0f8 	udiv	r0, r3, r8
 800052c:	fb08 3110 	mls	r1, r8, r0, r3
 8000530:	0c23      	lsrs	r3, r4, #16
 8000532:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000536:	fb00 f107 	mul.w	r1, r0, r7
 800053a:	4299      	cmp	r1, r3
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x24c>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 36ff 	add.w	r6, r0, #4294967295
 8000546:	d22c      	bcs.n	80005a2 <__udivmoddi4+0x29e>
 8000548:	4299      	cmp	r1, r3
 800054a:	d92a      	bls.n	80005a2 <__udivmoddi4+0x29e>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1a5b      	subs	r3, r3, r1
 8000552:	b2a4      	uxth	r4, r4
 8000554:	fbb3 f1f8 	udiv	r1, r3, r8
 8000558:	fb08 3311 	mls	r3, r8, r1, r3
 800055c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000560:	fb01 f307 	mul.w	r3, r1, r7
 8000564:	42a3      	cmp	r3, r4
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x276>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000570:	d213      	bcs.n	800059a <__udivmoddi4+0x296>
 8000572:	42a3      	cmp	r3, r4
 8000574:	d911      	bls.n	800059a <__udivmoddi4+0x296>
 8000576:	3902      	subs	r1, #2
 8000578:	4464      	add	r4, ip
 800057a:	1ae4      	subs	r4, r4, r3
 800057c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000580:	e739      	b.n	80003f6 <__udivmoddi4+0xf2>
 8000582:	4604      	mov	r4, r0
 8000584:	e6f0      	b.n	8000368 <__udivmoddi4+0x64>
 8000586:	4608      	mov	r0, r1
 8000588:	e706      	b.n	8000398 <__udivmoddi4+0x94>
 800058a:	45c8      	cmp	r8, r9
 800058c:	d2ae      	bcs.n	80004ec <__udivmoddi4+0x1e8>
 800058e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000592:	eb63 0c07 	sbc.w	ip, r3, r7
 8000596:	3801      	subs	r0, #1
 8000598:	e7a8      	b.n	80004ec <__udivmoddi4+0x1e8>
 800059a:	4631      	mov	r1, r6
 800059c:	e7ed      	b.n	800057a <__udivmoddi4+0x276>
 800059e:	4603      	mov	r3, r0
 80005a0:	e799      	b.n	80004d6 <__udivmoddi4+0x1d2>
 80005a2:	4630      	mov	r0, r6
 80005a4:	e7d4      	b.n	8000550 <__udivmoddi4+0x24c>
 80005a6:	46d6      	mov	lr, sl
 80005a8:	e77f      	b.n	80004aa <__udivmoddi4+0x1a6>
 80005aa:	4463      	add	r3, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e74d      	b.n	800044c <__udivmoddi4+0x148>
 80005b0:	4606      	mov	r6, r0
 80005b2:	4623      	mov	r3, r4
 80005b4:	4608      	mov	r0, r1
 80005b6:	e70f      	b.n	80003d8 <__udivmoddi4+0xd4>
 80005b8:	3e02      	subs	r6, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	e730      	b.n	8000420 <__udivmoddi4+0x11c>
 80005be:	bf00      	nop

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fb24 	bl	8000c16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f849 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f8b1 	bl	8000738 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	/* Enable the CYcle counting */
	DWT_CTRL |= (1 << 0);
 80005d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000644 <main+0x80>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a1a      	ldr	r2, [pc, #104]	@ (8000644 <main+0x80>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6013      	str	r3, [r2, #0]

	SEGGER_UART_init(250000);
 80005e2:	4819      	ldr	r0, [pc, #100]	@ (8000648 <main+0x84>)
 80005e4:	f004 fdca 	bl	800517c <SEGGER_UART_init>

	SEGGER_SYSVIEW_Conf();
 80005e8:	f004 fbf2 	bl	8004dd0 <SEGGER_SYSVIEW_Conf>
	//SEGGER_SYSVIEW_Start();


	status = xTaskCreate(led_green_handler, "LED_Green_Task", 200, NULL, 2, &task1_handle);
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2302      	movs	r3, #2
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	22c8      	movs	r2, #200	@ 0xc8
 80005fa:	4914      	ldr	r1, [pc, #80]	@ (800064c <main+0x88>)
 80005fc:	4814      	ldr	r0, [pc, #80]	@ (8000650 <main+0x8c>)
 80005fe:	f002 faab 	bl	8002b58 <xTaskCreate>
 8000602:	60f8      	str	r0, [r7, #12]

	configASSERT(status = pdPASS);
 8000604:	2301      	movs	r3, #1
 8000606:	60fb      	str	r3, [r7, #12]

	status = xTaskCreate(led_red_handler, "LED_Red_Task", 200, NULL, 2, &task2_handle);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	2302      	movs	r3, #2
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	22c8      	movs	r2, #200	@ 0xc8
 8000614:	490f      	ldr	r1, [pc, #60]	@ (8000654 <main+0x90>)
 8000616:	4810      	ldr	r0, [pc, #64]	@ (8000658 <main+0x94>)
 8000618:	f002 fa9e 	bl	8002b58 <xTaskCreate>
 800061c:	60f8      	str	r0, [r7, #12]

	configASSERT(status = pdPASS);
 800061e:	2301      	movs	r3, #1
 8000620:	60fb      	str	r3, [r7, #12]

	status = xTaskCreate(led_blue_handler, "LED_Blue_Task", 200, NULL, 2, &task3_handle);
 8000622:	463b      	mov	r3, r7
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2302      	movs	r3, #2
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2300      	movs	r3, #0
 800062c:	22c8      	movs	r2, #200	@ 0xc8
 800062e:	490b      	ldr	r1, [pc, #44]	@ (800065c <main+0x98>)
 8000630:	480b      	ldr	r0, [pc, #44]	@ (8000660 <main+0x9c>)
 8000632:	f002 fa91 	bl	8002b58 <xTaskCreate>
 8000636:	60f8      	str	r0, [r7, #12]

	configASSERT(status = pdPASS);
 8000638:	2301      	movs	r3, #1
 800063a:	60fb      	str	r3, [r7, #12]

	//STart the FreeRTOS Scheduler
	vTaskStartScheduler();
 800063c:	f002 fc82 	bl	8002f44 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <main+0x7c>
 8000644:	e0001000 	.word	0xe0001000
 8000648:	0003d090 	.word	0x0003d090
 800064c:	080076c0 	.word	0x080076c0
 8000650:	08000965 	.word	0x08000965
 8000654:	080076d0 	.word	0x080076d0
 8000658:	08000991 	.word	0x08000991
 800065c:	080076e0 	.word	0x080076e0
 8000660:	080009bd 	.word	0x080009bd

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	@ 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2234      	movs	r2, #52	@ 0x34
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f006 ffde 	bl	8007634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	4b29      	ldr	r3, [pc, #164]	@ (8000730 <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	4a28      	ldr	r2, [pc, #160]	@ (8000730 <SystemClock_Config+0xcc>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	@ 0x40
 8000694:	4b26      	ldr	r3, [pc, #152]	@ (8000730 <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006a0:	4b24      	ldr	r3, [pc, #144]	@ (8000734 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a8:	4a22      	ldr	r2, [pc, #136]	@ (8000734 <SystemClock_Config+0xd0>)
 80006aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b20      	ldr	r3, [pc, #128]	@ (8000734 <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d4:	23a8      	movs	r3, #168	@ 0xa8
 80006d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fd83 	bl	80011f4 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f4:	f000 f98a 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000704:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2105      	movs	r1, #5
 8000716:	4618      	mov	r0, r3
 8000718:	f001 f81a 	bl	8001750 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000722:	f000 f973 	bl	8000a0c <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	@ 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	@ 0x30
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b7f      	ldr	r3, [pc, #508]	@ (800094c <MX_GPIO_Init+0x214>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a7e      	ldr	r2, [pc, #504]	@ (800094c <MX_GPIO_Init+0x214>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b7c      	ldr	r3, [pc, #496]	@ (800094c <MX_GPIO_Init+0x214>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	4b79      	ldr	r3, [pc, #484]	@ (800094c <MX_GPIO_Init+0x214>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a78      	ldr	r2, [pc, #480]	@ (800094c <MX_GPIO_Init+0x214>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b76      	ldr	r3, [pc, #472]	@ (800094c <MX_GPIO_Init+0x214>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b73      	ldr	r3, [pc, #460]	@ (800094c <MX_GPIO_Init+0x214>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a72      	ldr	r2, [pc, #456]	@ (800094c <MX_GPIO_Init+0x214>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b70      	ldr	r3, [pc, #448]	@ (800094c <MX_GPIO_Init+0x214>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	4b6d      	ldr	r3, [pc, #436]	@ (800094c <MX_GPIO_Init+0x214>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a6c      	ldr	r2, [pc, #432]	@ (800094c <MX_GPIO_Init+0x214>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b6a      	ldr	r3, [pc, #424]	@ (800094c <MX_GPIO_Init+0x214>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	4b67      	ldr	r3, [pc, #412]	@ (800094c <MX_GPIO_Init+0x214>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a66      	ldr	r2, [pc, #408]	@ (800094c <MX_GPIO_Init+0x214>)
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b64      	ldr	r3, [pc, #400]	@ (800094c <MX_GPIO_Init+0x214>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0308 	and.w	r3, r3, #8
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007c6:	4b61      	ldr	r3, [pc, #388]	@ (800094c <MX_GPIO_Init+0x214>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a60      	ldr	r2, [pc, #384]	@ (800094c <MX_GPIO_Init+0x214>)
 80007cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b5e      	ldr	r3, [pc, #376]	@ (800094c <MX_GPIO_Init+0x214>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80007e4:	485a      	ldr	r0, [pc, #360]	@ (8000950 <MX_GPIO_Init+0x218>)
 80007e6:	f000 fcd1 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2140      	movs	r1, #64	@ 0x40
 80007ee:	4859      	ldr	r0, [pc, #356]	@ (8000954 <MX_GPIO_Init+0x21c>)
 80007f0:	f000 fccc 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4619      	mov	r1, r3
 800080a:	4853      	ldr	r0, [pc, #332]	@ (8000958 <MX_GPIO_Init+0x220>)
 800080c:	f000 fb12 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000810:	2332      	movs	r3, #50	@ 0x32
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000820:	230b      	movs	r3, #11
 8000822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	484b      	ldr	r0, [pc, #300]	@ (8000958 <MX_GPIO_Init+0x220>)
 800082c:	f000 fb02 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000830:	2386      	movs	r3, #134	@ 0x86
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000840:	230b      	movs	r3, #11
 8000842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	4844      	ldr	r0, [pc, #272]	@ (800095c <MX_GPIO_Init+0x224>)
 800084c:	f000 faf2 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000850:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4839      	ldr	r0, [pc, #228]	@ (8000950 <MX_GPIO_Init+0x218>)
 800086a:	f000 fae3 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800086e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000880:	230b      	movs	r3, #11
 8000882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4831      	ldr	r0, [pc, #196]	@ (8000950 <MX_GPIO_Init+0x218>)
 800088c:	f000 fad2 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000890:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008a2:	2307      	movs	r3, #7
 80008a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	482c      	ldr	r0, [pc, #176]	@ (8000960 <MX_GPIO_Init+0x228>)
 80008ae:	f000 fac1 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008b2:	2340      	movs	r3, #64	@ 0x40
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4822      	ldr	r0, [pc, #136]	@ (8000954 <MX_GPIO_Init+0x21c>)
 80008ca:	f000 fab3 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ce:	2380      	movs	r3, #128	@ 0x80
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	481c      	ldr	r0, [pc, #112]	@ (8000954 <MX_GPIO_Init+0x21c>)
 80008e2:	f000 faa7 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008e6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008f8:	230a      	movs	r3, #10
 80008fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4816      	ldr	r0, [pc, #88]	@ (800095c <MX_GPIO_Init+0x224>)
 8000904:	f000 fa96 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000908:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	480f      	ldr	r0, [pc, #60]	@ (800095c <MX_GPIO_Init+0x224>)
 800091e:	f000 fa89 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000922:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000934:	230b      	movs	r3, #11
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4805      	ldr	r0, [pc, #20]	@ (8000954 <MX_GPIO_Init+0x21c>)
 8000940:	f000 fa78 	bl	8000e34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000944:	bf00      	nop
 8000946:	3730      	adds	r7, #48	@ 0x30
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40020400 	.word	0x40020400
 8000954:	40021800 	.word	0x40021800
 8000958:	40020800 	.word	0x40020800
 800095c:	40020000 	.word	0x40020000
 8000960:	40020c00 	.word	0x40020c00

08000964 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 800096c:	2101      	movs	r1, #1
 800096e:	4806      	ldr	r0, [pc, #24]	@ (8000988 <led_green_handler+0x24>)
 8000970:	f000 fc25 	bl	80011be <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000974:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000978:	f002 fa60 	bl	8002e3c <vTaskDelay>
		//HAL_Delay(1000);
		SEGGER_SYSVIEW_PrintfTarget("Toggle Green LED");
 800097c:	4803      	ldr	r0, [pc, #12]	@ (800098c <led_green_handler+0x28>)
 800097e:	f006 fdab 	bl	80074d8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000982:	bf00      	nop
 8000984:	e7f2      	b.n	800096c <led_green_handler+0x8>
 8000986:	bf00      	nop
 8000988:	40020400 	.word	0x40020400
 800098c:	080076f0 	.word	0x080076f0

08000990 <led_red_handler>:
	}

}

static void led_red_handler(void* parameters)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000998:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800099c:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <led_red_handler+0x24>)
 800099e:	f000 fc0e 	bl	80011be <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(400));
 80009a2:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80009a6:	f002 fa49 	bl	8002e3c <vTaskDelay>
		//HAL_Delay(400);
		SEGGER_SYSVIEW_PrintfTarget("Toggle Red LED");
 80009aa:	4803      	ldr	r0, [pc, #12]	@ (80009b8 <led_red_handler+0x28>)
 80009ac:	f006 fd94 	bl	80074d8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 80009b0:	bf00      	nop
 80009b2:	e7f1      	b.n	8000998 <led_red_handler+0x8>
 80009b4:	40020400 	.word	0x40020400
 80009b8:	08007704 	.word	0x08007704

080009bc <led_blue_handler>:
	}
}

static void led_blue_handler(void* parameters)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 80009c4:	2180      	movs	r1, #128	@ 0x80
 80009c6:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <led_blue_handler+0x24>)
 80009c8:	f000 fbf9 	bl	80011be <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(800));
 80009cc:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80009d0:	f002 fa34 	bl	8002e3c <vTaskDelay>
		//HAL_Delay(800);
		SEGGER_SYSVIEW_PrintfTarget("Toggle Blue LED");
 80009d4:	4803      	ldr	r0, [pc, #12]	@ (80009e4 <led_blue_handler+0x28>)
 80009d6:	f006 fd7f 	bl	80074d8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 80009da:	bf00      	nop
 80009dc:	e7f2      	b.n	80009c4 <led_blue_handler+0x8>
 80009de:	bf00      	nop
 80009e0:	40020400 	.word	0x40020400
 80009e4:	08007714 	.word	0x08007714

080009e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a04      	ldr	r2, [pc, #16]	@ (8000a08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d101      	bne.n	80009fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009fa:	f000 f919 	bl	8000c30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40001000 	.word	0x40001000

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <Error_Handler+0x8>

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <HAL_MspInit+0x44>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	4a0e      	ldr	r2, [pc, #56]	@ (8000a5c <HAL_MspInit+0x44>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <HAL_MspInit+0x44>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <HAL_MspInit+0x44>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3a:	4a08      	ldr	r2, [pc, #32]	@ (8000a5c <HAL_MspInit+0x44>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_MspInit+0x44>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	@ 0x38
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a70:	4b33      	ldr	r3, [pc, #204]	@ (8000b40 <HAL_InitTick+0xe0>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a74:	4a32      	ldr	r2, [pc, #200]	@ (8000b40 <HAL_InitTick+0xe0>)
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7c:	4b30      	ldr	r3, [pc, #192]	@ (8000b40 <HAL_InitTick+0xe0>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	f003 0310 	and.w	r3, r3, #16
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a88:	f107 0210 	add.w	r2, r7, #16
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 f86c 	bl	8001b70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a98:	6a3b      	ldr	r3, [r7, #32]
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d103      	bne.n	8000aaa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aa2:	f001 f851 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8000aa6:	6378      	str	r0, [r7, #52]	@ 0x34
 8000aa8:	e004      	b.n	8000ab4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000aaa:	f001 f84d 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ab6:	4a23      	ldr	r2, [pc, #140]	@ (8000b44 <HAL_InitTick+0xe4>)
 8000ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8000abc:	0c9b      	lsrs	r3, r3, #18
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000ac4:	4a21      	ldr	r2, [pc, #132]	@ (8000b4c <HAL_InitTick+0xec>)
 8000ac6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000aca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ace:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ad4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ae8:	4817      	ldr	r0, [pc, #92]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000aea:	f001 f873 	bl	8001bd4 <HAL_TIM_Base_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000af4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d11b      	bne.n	8000b34 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000afc:	4812      	ldr	r0, [pc, #72]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000afe:	f001 f8cb 	bl	8001c98 <HAL_TIM_Base_Start_IT>
 8000b02:	4603      	mov	r3, r0
 8000b04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d111      	bne.n	8000b34 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b10:	2036      	movs	r0, #54	@ 0x36
 8000b12:	f000 f981 	bl	8000e18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d808      	bhi.n	8000b2e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	2036      	movs	r0, #54	@ 0x36
 8000b22:	f000 f95d 	bl	8000de0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <HAL_InitTick+0xf0>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	e002      	b.n	8000b34 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3738      	adds	r7, #56	@ 0x38
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800
 8000b44:	431bde83 	.word	0x431bde83
 8000b48:	20000038 	.word	0x20000038
 8000b4c:	40001000 	.word	0x40001000
 8000b50:	20000004 	.word	0x20000004

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <NMI_Handler+0x4>

08000b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b90:	4802      	ldr	r0, [pc, #8]	@ (8000b9c <TIM6_DAC_IRQHandler+0x10>)
 8000b92:	f001 f8f9 	bl	8001d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000038 	.word	0x20000038

08000ba0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <SystemInit+0x20>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000baa:	4a05      	ldr	r2, [pc, #20]	@ (8000bc0 <SystemInit+0x20>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bfc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bc8:	f7ff ffea 	bl	8000ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bcc:	480c      	ldr	r0, [pc, #48]	@ (8000c00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bce:	490d      	ldr	r1, [pc, #52]	@ (8000c04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be4:	4c0a      	ldr	r4, [pc, #40]	@ (8000c10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f006 fd27 	bl	8007644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf6:	f7ff fce5 	bl	80005c4 <main>
  bx  lr    
 8000bfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bfc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c08:	08007870 	.word	0x08007870
  ldr r2, =_sbss
 8000c0c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c10:	2000c4ac 	.word	0x2000c4ac

08000c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC_IRQHandler>

08000c16 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1a:	2003      	movs	r0, #3
 8000c1c:	f000 f8d5 	bl	8000dca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c20:	200f      	movs	r0, #15
 8000c22:	f7ff ff1d 	bl	8000a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c26:	f7ff fef7 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000084 	.word	0x20000084

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000084 	.word	0x20000084

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00
 8000cb4:	05fa0000 	.word	0x05fa0000

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	@ (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	@ (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	@ (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	@ 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	@ 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ff4c 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df2:	f7ff ff61 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000df6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	6978      	ldr	r0, [r7, #20]
 8000dfe:	f7ff ffb1 	bl	8000d64 <NVIC_EncodePriority>
 8000e02:	4602      	mov	r2, r0
 8000e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ff80 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e10:	bf00      	nop
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff54 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	@ 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	e175      	b.n	8001140 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e54:	2201      	movs	r2, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	f040 8164 	bne.w	800113a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d005      	beq.n	8000e8a <HAL_GPIO_Init+0x56>
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d130      	bne.n	8000eec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	091b      	lsrs	r3, r3, #4
 8000ed6:	f003 0201 	and.w	r2, r3, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d017      	beq.n	8000f28 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d123      	bne.n	8000f7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	08da      	lsrs	r2, r3, #3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3208      	adds	r2, #8
 8000f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	08da      	lsrs	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3208      	adds	r2, #8
 8000f76:	69b9      	ldr	r1, [r7, #24]
 8000f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0203 	and.w	r2, r3, #3
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 80be 	beq.w	800113a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	4b66      	ldr	r3, [pc, #408]	@ (8001158 <HAL_GPIO_Init+0x324>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	4a65      	ldr	r2, [pc, #404]	@ (8001158 <HAL_GPIO_Init+0x324>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fca:	4b63      	ldr	r3, [pc, #396]	@ (8001158 <HAL_GPIO_Init+0x324>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fd6:	4a61      	ldr	r2, [pc, #388]	@ (800115c <HAL_GPIO_Init+0x328>)
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	3302      	adds	r3, #2
 8000fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	220f      	movs	r2, #15
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a58      	ldr	r2, [pc, #352]	@ (8001160 <HAL_GPIO_Init+0x32c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d037      	beq.n	8001072 <HAL_GPIO_Init+0x23e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a57      	ldr	r2, [pc, #348]	@ (8001164 <HAL_GPIO_Init+0x330>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d031      	beq.n	800106e <HAL_GPIO_Init+0x23a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a56      	ldr	r2, [pc, #344]	@ (8001168 <HAL_GPIO_Init+0x334>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d02b      	beq.n	800106a <HAL_GPIO_Init+0x236>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a55      	ldr	r2, [pc, #340]	@ (800116c <HAL_GPIO_Init+0x338>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d025      	beq.n	8001066 <HAL_GPIO_Init+0x232>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a54      	ldr	r2, [pc, #336]	@ (8001170 <HAL_GPIO_Init+0x33c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d01f      	beq.n	8001062 <HAL_GPIO_Init+0x22e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a53      	ldr	r2, [pc, #332]	@ (8001174 <HAL_GPIO_Init+0x340>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d019      	beq.n	800105e <HAL_GPIO_Init+0x22a>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a52      	ldr	r2, [pc, #328]	@ (8001178 <HAL_GPIO_Init+0x344>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d013      	beq.n	800105a <HAL_GPIO_Init+0x226>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a51      	ldr	r2, [pc, #324]	@ (800117c <HAL_GPIO_Init+0x348>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d00d      	beq.n	8001056 <HAL_GPIO_Init+0x222>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a50      	ldr	r2, [pc, #320]	@ (8001180 <HAL_GPIO_Init+0x34c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d007      	beq.n	8001052 <HAL_GPIO_Init+0x21e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4f      	ldr	r2, [pc, #316]	@ (8001184 <HAL_GPIO_Init+0x350>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d101      	bne.n	800104e <HAL_GPIO_Init+0x21a>
 800104a:	2309      	movs	r3, #9
 800104c:	e012      	b.n	8001074 <HAL_GPIO_Init+0x240>
 800104e:	230a      	movs	r3, #10
 8001050:	e010      	b.n	8001074 <HAL_GPIO_Init+0x240>
 8001052:	2308      	movs	r3, #8
 8001054:	e00e      	b.n	8001074 <HAL_GPIO_Init+0x240>
 8001056:	2307      	movs	r3, #7
 8001058:	e00c      	b.n	8001074 <HAL_GPIO_Init+0x240>
 800105a:	2306      	movs	r3, #6
 800105c:	e00a      	b.n	8001074 <HAL_GPIO_Init+0x240>
 800105e:	2305      	movs	r3, #5
 8001060:	e008      	b.n	8001074 <HAL_GPIO_Init+0x240>
 8001062:	2304      	movs	r3, #4
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x240>
 8001066:	2303      	movs	r3, #3
 8001068:	e004      	b.n	8001074 <HAL_GPIO_Init+0x240>
 800106a:	2302      	movs	r3, #2
 800106c:	e002      	b.n	8001074 <HAL_GPIO_Init+0x240>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <HAL_GPIO_Init+0x240>
 8001072:	2300      	movs	r3, #0
 8001074:	69fa      	ldr	r2, [r7, #28]
 8001076:	f002 0203 	and.w	r2, r2, #3
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	4093      	lsls	r3, r2
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001084:	4935      	ldr	r1, [pc, #212]	@ (800115c <HAL_GPIO_Init+0x328>)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001092:	4b3d      	ldr	r3, [pc, #244]	@ (8001188 <HAL_GPIO_Init+0x354>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010b6:	4a34      	ldr	r2, [pc, #208]	@ (8001188 <HAL_GPIO_Init+0x354>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010bc:	4b32      	ldr	r3, [pc, #200]	@ (8001188 <HAL_GPIO_Init+0x354>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e0:	4a29      	ldr	r2, [pc, #164]	@ (8001188 <HAL_GPIO_Init+0x354>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010e6:	4b28      	ldr	r3, [pc, #160]	@ (8001188 <HAL_GPIO_Init+0x354>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800110a:	4a1f      	ldr	r2, [pc, #124]	@ (8001188 <HAL_GPIO_Init+0x354>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001110:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <HAL_GPIO_Init+0x354>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001134:	4a14      	ldr	r2, [pc, #80]	@ (8001188 <HAL_GPIO_Init+0x354>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3301      	adds	r3, #1
 800113e:	61fb      	str	r3, [r7, #28]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	f67f ae86 	bls.w	8000e54 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3724      	adds	r7, #36	@ 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40013800 	.word	0x40013800
 8001160:	40020000 	.word	0x40020000
 8001164:	40020400 	.word	0x40020400
 8001168:	40020800 	.word	0x40020800
 800116c:	40020c00 	.word	0x40020c00
 8001170:	40021000 	.word	0x40021000
 8001174:	40021400 	.word	0x40021400
 8001178:	40021800 	.word	0x40021800
 800117c:	40021c00 	.word	0x40021c00
 8001180:	40022000 	.word	0x40022000
 8001184:	40022400 	.word	0x40022400
 8001188:	40013c00 	.word	0x40013c00

0800118c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
 8001198:	4613      	mov	r3, r2
 800119a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800119c:	787b      	ldrb	r3, [r7, #1]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011a8:	e003      	b.n	80011b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	041a      	lsls	r2, r3, #16
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	619a      	str	r2, [r3, #24]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011be:	b480      	push	{r7}
 80011c0:	b085      	sub	sp, #20
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	460b      	mov	r3, r1
 80011c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011d0:	887a      	ldrh	r2, [r7, #2]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4013      	ands	r3, r2
 80011d6:	041a      	lsls	r2, r3, #16
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	43d9      	mvns	r1, r3
 80011dc:	887b      	ldrh	r3, [r7, #2]
 80011de:	400b      	ands	r3, r1
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	619a      	str	r2, [r3, #24]
}
 80011e6:	bf00      	nop
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80011fc:	2300      	movs	r3, #0
 80011fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e29b      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 8087 	beq.w	8001326 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001218:	4b96      	ldr	r3, [pc, #600]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 030c 	and.w	r3, r3, #12
 8001220:	2b04      	cmp	r3, #4
 8001222:	d00c      	beq.n	800123e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001224:	4b93      	ldr	r3, [pc, #588]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 030c 	and.w	r3, r3, #12
 800122c:	2b08      	cmp	r3, #8
 800122e:	d112      	bne.n	8001256 <HAL_RCC_OscConfig+0x62>
 8001230:	4b90      	ldr	r3, [pc, #576]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001238:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800123c:	d10b      	bne.n	8001256 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123e:	4b8d      	ldr	r3, [pc, #564]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d06c      	beq.n	8001324 <HAL_RCC_OscConfig+0x130>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d168      	bne.n	8001324 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e275      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800125e:	d106      	bne.n	800126e <HAL_RCC_OscConfig+0x7a>
 8001260:	4b84      	ldr	r3, [pc, #528]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a83      	ldr	r2, [pc, #524]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 8001266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	e02e      	b.n	80012cc <HAL_RCC_OscConfig+0xd8>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10c      	bne.n	8001290 <HAL_RCC_OscConfig+0x9c>
 8001276:	4b7f      	ldr	r3, [pc, #508]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a7e      	ldr	r2, [pc, #504]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 800127c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4b7c      	ldr	r3, [pc, #496]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a7b      	ldr	r2, [pc, #492]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 8001288:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	e01d      	b.n	80012cc <HAL_RCC_OscConfig+0xd8>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001298:	d10c      	bne.n	80012b4 <HAL_RCC_OscConfig+0xc0>
 800129a:	4b76      	ldr	r3, [pc, #472]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a75      	ldr	r2, [pc, #468]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 80012a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	4b73      	ldr	r3, [pc, #460]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a72      	ldr	r2, [pc, #456]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 80012ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e00b      	b.n	80012cc <HAL_RCC_OscConfig+0xd8>
 80012b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a6e      	ldr	r2, [pc, #440]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 80012ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a6b      	ldr	r2, [pc, #428]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 80012c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d013      	beq.n	80012fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d4:	f7ff fcc0 	bl	8000c58 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fcbc 	bl	8000c58 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	@ 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e229      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	4b61      	ldr	r3, [pc, #388]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0xe8>
 80012fa:	e014      	b.n	8001326 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7ff fcac 	bl	8000c58 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fca8 	bl	8000c58 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	@ 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e215      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001316:	4b57      	ldr	r3, [pc, #348]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0x110>
 8001322:	e000      	b.n	8001326 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d069      	beq.n	8001406 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001332:	4b50      	ldr	r3, [pc, #320]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00b      	beq.n	8001356 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800133e:	4b4d      	ldr	r3, [pc, #308]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b08      	cmp	r3, #8
 8001348:	d11c      	bne.n	8001384 <HAL_RCC_OscConfig+0x190>
 800134a:	4b4a      	ldr	r3, [pc, #296]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d116      	bne.n	8001384 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001356:	4b47      	ldr	r3, [pc, #284]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <HAL_RCC_OscConfig+0x17a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d001      	beq.n	800136e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e1e9      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136e:	4b41      	ldr	r3, [pc, #260]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	493d      	ldr	r1, [pc, #244]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001382:	e040      	b.n	8001406 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d023      	beq.n	80013d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800138c:	4b39      	ldr	r3, [pc, #228]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a38      	ldr	r2, [pc, #224]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001398:	f7ff fc5e 	bl	8000c58 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a0:	f7ff fc5a 	bl	8000c58 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e1c7      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b2:	4b30      	ldr	r3, [pc, #192]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013be:	4b2d      	ldr	r3, [pc, #180]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	4929      	ldr	r1, [pc, #164]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	600b      	str	r3, [r1, #0]
 80013d2:	e018      	b.n	8001406 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d4:	4b27      	ldr	r3, [pc, #156]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a26      	ldr	r2, [pc, #152]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 80013da:	f023 0301 	bic.w	r3, r3, #1
 80013de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fc3a 	bl	8000c58 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e8:	f7ff fc36 	bl	8000c58 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e1a3      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d038      	beq.n	8001484 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d019      	beq.n	800144e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141a:	4b16      	ldr	r3, [pc, #88]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 800141c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800141e:	4a15      	ldr	r2, [pc, #84]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001426:	f7ff fc17 	bl	8000c58 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800142e:	f7ff fc13 	bl	8000c58 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e180      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001440:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 8001442:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f0      	beq.n	800142e <HAL_RCC_OscConfig+0x23a>
 800144c:	e01a      	b.n	8001484 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 8001450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001452:	4a08      	ldr	r2, [pc, #32]	@ (8001474 <HAL_RCC_OscConfig+0x280>)
 8001454:	f023 0301 	bic.w	r3, r3, #1
 8001458:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145a:	f7ff fbfd 	bl	8000c58 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	e00a      	b.n	8001478 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001462:	f7ff fbf9 	bl	8000c58 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d903      	bls.n	8001478 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e166      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
 8001474:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	4b92      	ldr	r3, [pc, #584]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 800147a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1ee      	bne.n	8001462 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80a4 	beq.w	80015da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001492:	4b8c      	ldr	r3, [pc, #560]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10d      	bne.n	80014ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	4b89      	ldr	r3, [pc, #548]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	4a88      	ldr	r2, [pc, #544]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014aa:	4b86      	ldr	r3, [pc, #536]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b6:	2301      	movs	r3, #1
 80014b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ba:	4b83      	ldr	r3, [pc, #524]	@ (80016c8 <HAL_RCC_OscConfig+0x4d4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d118      	bne.n	80014f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80014c6:	4b80      	ldr	r3, [pc, #512]	@ (80016c8 <HAL_RCC_OscConfig+0x4d4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a7f      	ldr	r2, [pc, #508]	@ (80016c8 <HAL_RCC_OscConfig+0x4d4>)
 80014cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fbc1 	bl	8000c58 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014da:	f7ff fbbd 	bl	8000c58 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b64      	cmp	r3, #100	@ 0x64
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e12a      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ec:	4b76      	ldr	r3, [pc, #472]	@ (80016c8 <HAL_RCC_OscConfig+0x4d4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d106      	bne.n	800150e <HAL_RCC_OscConfig+0x31a>
 8001500:	4b70      	ldr	r3, [pc, #448]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001504:	4a6f      	ldr	r2, [pc, #444]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6713      	str	r3, [r2, #112]	@ 0x70
 800150c:	e02d      	b.n	800156a <HAL_RCC_OscConfig+0x376>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10c      	bne.n	8001530 <HAL_RCC_OscConfig+0x33c>
 8001516:	4b6b      	ldr	r3, [pc, #428]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800151a:	4a6a      	ldr	r2, [pc, #424]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	6713      	str	r3, [r2, #112]	@ 0x70
 8001522:	4b68      	ldr	r3, [pc, #416]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001526:	4a67      	ldr	r2, [pc, #412]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001528:	f023 0304 	bic.w	r3, r3, #4
 800152c:	6713      	str	r3, [r2, #112]	@ 0x70
 800152e:	e01c      	b.n	800156a <HAL_RCC_OscConfig+0x376>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b05      	cmp	r3, #5
 8001536:	d10c      	bne.n	8001552 <HAL_RCC_OscConfig+0x35e>
 8001538:	4b62      	ldr	r3, [pc, #392]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 800153a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800153c:	4a61      	ldr	r2, [pc, #388]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 800153e:	f043 0304 	orr.w	r3, r3, #4
 8001542:	6713      	str	r3, [r2, #112]	@ 0x70
 8001544:	4b5f      	ldr	r3, [pc, #380]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001548:	4a5e      	ldr	r2, [pc, #376]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001550:	e00b      	b.n	800156a <HAL_RCC_OscConfig+0x376>
 8001552:	4b5c      	ldr	r3, [pc, #368]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001556:	4a5b      	ldr	r2, [pc, #364]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001558:	f023 0301 	bic.w	r3, r3, #1
 800155c:	6713      	str	r3, [r2, #112]	@ 0x70
 800155e:	4b59      	ldr	r3, [pc, #356]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001562:	4a58      	ldr	r2, [pc, #352]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001564:	f023 0304 	bic.w	r3, r3, #4
 8001568:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d015      	beq.n	800159e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001572:	f7ff fb71 	bl	8000c58 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001578:	e00a      	b.n	8001590 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157a:	f7ff fb6d 	bl	8000c58 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001588:	4293      	cmp	r3, r2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e0d8      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001590:	4b4c      	ldr	r3, [pc, #304]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0ee      	beq.n	800157a <HAL_RCC_OscConfig+0x386>
 800159c:	e014      	b.n	80015c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159e:	f7ff fb5b 	bl	8000c58 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a4:	e00a      	b.n	80015bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f7ff fb57 	bl	8000c58 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e0c2      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015bc:	4b41      	ldr	r3, [pc, #260]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1ee      	bne.n	80015a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d105      	bne.n	80015da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ce:	4b3d      	ldr	r3, [pc, #244]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	4a3c      	ldr	r2, [pc, #240]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 80015d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015d8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 80ae 	beq.w	8001740 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e4:	4b37      	ldr	r3, [pc, #220]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 030c 	and.w	r3, r3, #12
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d06d      	beq.n	80016cc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d14b      	bne.n	8001690 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f8:	4b32      	ldr	r3, [pc, #200]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a31      	ldr	r2, [pc, #196]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 80015fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001604:	f7ff fb28 	bl	8000c58 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff fb24 	bl	8000c58 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e091      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	4b29      	ldr	r3, [pc, #164]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001638:	019b      	lsls	r3, r3, #6
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	3b01      	subs	r3, #1
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164c:	061b      	lsls	r3, r3, #24
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001654:	071b      	lsls	r3, r3, #28
 8001656:	491b      	ldr	r1, [pc, #108]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165c:	4b19      	ldr	r3, [pc, #100]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a18      	ldr	r2, [pc, #96]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001662:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff faf6 	bl	8000c58 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001670:	f7ff faf2 	bl	8000c58 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e05f      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001682:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x47c>
 800168e:	e057      	b.n	8001740 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0b      	ldr	r2, [pc, #44]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800169a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169c:	f7ff fadc 	bl	8000c58 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a4:	f7ff fad8 	bl	8000c58 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e045      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b6:	4b03      	ldr	r3, [pc, #12]	@ (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x4b0>
 80016c2:	e03d      	b.n	8001740 <HAL_RCC_OscConfig+0x54c>
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80016cc:	4b1f      	ldr	r3, [pc, #124]	@ (800174c <HAL_RCC_OscConfig+0x558>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d030      	beq.n	800173c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d129      	bne.n	800173c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d122      	bne.n	800173c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016fc:	4013      	ands	r3, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001702:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001704:	4293      	cmp	r3, r2
 8001706:	d119      	bne.n	800173c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001712:	085b      	lsrs	r3, r3, #1
 8001714:	3b01      	subs	r3, #1
 8001716:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001718:	429a      	cmp	r2, r3
 800171a:	d10f      	bne.n	800173c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001726:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d107      	bne.n	800173c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d001      	beq.n	8001740 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800

08001750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0d0      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001768:	4b6a      	ldr	r3, [pc, #424]	@ (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 030f 	and.w	r3, r3, #15
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d910      	bls.n	8001798 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001776:	4b67      	ldr	r3, [pc, #412]	@ (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 020f 	bic.w	r2, r3, #15
 800177e:	4965      	ldr	r1, [pc, #404]	@ (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001786:	4b63      	ldr	r3, [pc, #396]	@ (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0b8      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d020      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b0:	4b59      	ldr	r3, [pc, #356]	@ (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a58      	ldr	r2, [pc, #352]	@ (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c8:	4b53      	ldr	r3, [pc, #332]	@ (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a52      	ldr	r2, [pc, #328]	@ (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d4:	4b50      	ldr	r3, [pc, #320]	@ (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	494d      	ldr	r1, [pc, #308]	@ (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d040      	beq.n	8001874 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	4b47      	ldr	r3, [pc, #284]	@ (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d115      	bne.n	8001832 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e07f      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001812:	4b41      	ldr	r3, [pc, #260]	@ (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d109      	bne.n	8001832 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e073      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001822:	4b3d      	ldr	r3, [pc, #244]	@ (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e06b      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001832:	4b39      	ldr	r3, [pc, #228]	@ (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f023 0203 	bic.w	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4936      	ldr	r1, [pc, #216]	@ (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 8001840:	4313      	orrs	r3, r2
 8001842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001844:	f7ff fa08 	bl	8000c58 <HAL_GetTick>
 8001848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	e00a      	b.n	8001862 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184c:	f7ff fa04 	bl	8000c58 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e053      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	4b2d      	ldr	r3, [pc, #180]	@ (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 020c 	and.w	r2, r3, #12
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	429a      	cmp	r2, r3
 8001872:	d1eb      	bne.n	800184c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001874:	4b27      	ldr	r3, [pc, #156]	@ (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d210      	bcs.n	80018a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b24      	ldr	r3, [pc, #144]	@ (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 020f 	bic.w	r2, r3, #15
 800188a:	4922      	ldr	r1, [pc, #136]	@ (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b20      	ldr	r3, [pc, #128]	@ (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e032      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b0:	4b19      	ldr	r3, [pc, #100]	@ (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	4916      	ldr	r1, [pc, #88]	@ (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018ce:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	490e      	ldr	r1, [pc, #56]	@ (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018e2:	f000 f821 	bl	8001928 <HAL_RCC_GetSysClockFreq>
 80018e6:	4602      	mov	r2, r0
 80018e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	490a      	ldr	r1, [pc, #40]	@ (800191c <HAL_RCC_ClockConfig+0x1cc>)
 80018f4:	5ccb      	ldrb	r3, [r1, r3]
 80018f6:	fa22 f303 	lsr.w	r3, r2, r3
 80018fa:	4a09      	ldr	r2, [pc, #36]	@ (8001920 <HAL_RCC_ClockConfig+0x1d0>)
 80018fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018fe:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <HAL_RCC_ClockConfig+0x1d4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f8ac 	bl	8000a60 <HAL_InitTick>

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023c00 	.word	0x40023c00
 8001918:	40023800 	.word	0x40023800
 800191c:	0800780c 	.word	0x0800780c
 8001920:	20000000 	.word	0x20000000
 8001924:	20000004 	.word	0x20000004

08001928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800192c:	b094      	sub	sp, #80	@ 0x50
 800192e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	647b      	str	r3, [r7, #68]	@ 0x44
 8001934:	2300      	movs	r3, #0
 8001936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001938:	2300      	movs	r3, #0
 800193a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001940:	4b79      	ldr	r3, [pc, #484]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d00d      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x40>
 800194c:	2b08      	cmp	r3, #8
 800194e:	f200 80e1 	bhi.w	8001b14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x34>
 8001956:	2b04      	cmp	r3, #4
 8001958:	d003      	beq.n	8001962 <HAL_RCC_GetSysClockFreq+0x3a>
 800195a:	e0db      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800195c:	4b73      	ldr	r3, [pc, #460]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x204>)
 800195e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001960:	e0db      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001962:	4b72      	ldr	r3, [pc, #456]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x204>)
 8001964:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001966:	e0d8      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001968:	4b6f      	ldr	r3, [pc, #444]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x200>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001970:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001972:	4b6d      	ldr	r3, [pc, #436]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d063      	beq.n	8001a46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	099b      	lsrs	r3, r3, #6
 8001984:	2200      	movs	r2, #0
 8001986:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001988:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800198a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800198c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001990:	633b      	str	r3, [r7, #48]	@ 0x30
 8001992:	2300      	movs	r3, #0
 8001994:	637b      	str	r3, [r7, #52]	@ 0x34
 8001996:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800199a:	4622      	mov	r2, r4
 800199c:	462b      	mov	r3, r5
 800199e:	f04f 0000 	mov.w	r0, #0
 80019a2:	f04f 0100 	mov.w	r1, #0
 80019a6:	0159      	lsls	r1, r3, #5
 80019a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ac:	0150      	lsls	r0, r2, #5
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4621      	mov	r1, r4
 80019b4:	1a51      	subs	r1, r2, r1
 80019b6:	6139      	str	r1, [r7, #16]
 80019b8:	4629      	mov	r1, r5
 80019ba:	eb63 0301 	sbc.w	r3, r3, r1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019cc:	4659      	mov	r1, fp
 80019ce:	018b      	lsls	r3, r1, #6
 80019d0:	4651      	mov	r1, sl
 80019d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019d6:	4651      	mov	r1, sl
 80019d8:	018a      	lsls	r2, r1, #6
 80019da:	4651      	mov	r1, sl
 80019dc:	ebb2 0801 	subs.w	r8, r2, r1
 80019e0:	4659      	mov	r1, fp
 80019e2:	eb63 0901 	sbc.w	r9, r3, r1
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019fa:	4690      	mov	r8, r2
 80019fc:	4699      	mov	r9, r3
 80019fe:	4623      	mov	r3, r4
 8001a00:	eb18 0303 	adds.w	r3, r8, r3
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	462b      	mov	r3, r5
 8001a08:	eb49 0303 	adc.w	r3, r9, r3
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	028b      	lsls	r3, r1, #10
 8001a1e:	4621      	mov	r1, r4
 8001a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a24:	4621      	mov	r1, r4
 8001a26:	028a      	lsls	r2, r1, #10
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a2e:	2200      	movs	r2, #0
 8001a30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a38:	f7fe fc4c 	bl	80002d4 <__aeabi_uldivmod>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4613      	mov	r3, r2
 8001a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a44:	e058      	b.n	8001af8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a46:	4b38      	ldr	r3, [pc, #224]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	099b      	lsrs	r3, r3, #6
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	4611      	mov	r1, r2
 8001a52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a56:	623b      	str	r3, [r7, #32]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a60:	4642      	mov	r2, r8
 8001a62:	464b      	mov	r3, r9
 8001a64:	f04f 0000 	mov.w	r0, #0
 8001a68:	f04f 0100 	mov.w	r1, #0
 8001a6c:	0159      	lsls	r1, r3, #5
 8001a6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a72:	0150      	lsls	r0, r2, #5
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4641      	mov	r1, r8
 8001a7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a7e:	4649      	mov	r1, r9
 8001a80:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a98:	ebb2 040a 	subs.w	r4, r2, sl
 8001a9c:	eb63 050b 	sbc.w	r5, r3, fp
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	00eb      	lsls	r3, r5, #3
 8001aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aae:	00e2      	lsls	r2, r4, #3
 8001ab0:	4614      	mov	r4, r2
 8001ab2:	461d      	mov	r5, r3
 8001ab4:	4643      	mov	r3, r8
 8001ab6:	18e3      	adds	r3, r4, r3
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	464b      	mov	r3, r9
 8001abc:	eb45 0303 	adc.w	r3, r5, r3
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ace:	4629      	mov	r1, r5
 8001ad0:	028b      	lsls	r3, r1, #10
 8001ad2:	4621      	mov	r1, r4
 8001ad4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ad8:	4621      	mov	r1, r4
 8001ada:	028a      	lsls	r2, r1, #10
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61bb      	str	r3, [r7, #24]
 8001ae6:	61fa      	str	r2, [r7, #28]
 8001ae8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aec:	f7fe fbf2 	bl	80002d4 <__aeabi_uldivmod>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4613      	mov	r3, r2
 8001af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001af8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	0c1b      	lsrs	r3, r3, #16
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	3301      	adds	r3, #1
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b12:	e002      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b14:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3750      	adds	r7, #80	@ 0x50
 8001b20:	46bd      	mov	sp, r7
 8001b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	00f42400 	.word	0x00f42400

08001b30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b34:	4b03      	ldr	r3, [pc, #12]	@ (8001b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000000 	.word	0x20000000

08001b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b4c:	f7ff fff0 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0a9b      	lsrs	r3, r3, #10
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	4903      	ldr	r1, [pc, #12]	@ (8001b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b5e:	5ccb      	ldrb	r3, [r1, r3]
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	0800781c 	.word	0x0800781c

08001b70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	220f      	movs	r2, #15
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <HAL_RCC_GetClockConfig+0x5c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 0203 	and.w	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <HAL_RCC_GetClockConfig+0x5c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b98:	4b0c      	ldr	r3, [pc, #48]	@ (8001bcc <HAL_RCC_GetClockConfig+0x5c>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ba4:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <HAL_RCC_GetClockConfig+0x5c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	08db      	lsrs	r3, r3, #3
 8001baa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bb2:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <HAL_RCC_GetClockConfig+0x60>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 020f 	and.w	r2, r3, #15
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	601a      	str	r2, [r3, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40023c00 	.word	0x40023c00

08001bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e049      	b.n	8001c7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f841 	bl	8001c82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3304      	adds	r3, #4
 8001c10:	4619      	mov	r1, r3
 8001c12:	4610      	mov	r0, r2
 8001c14:	f000 f9e8 	bl	8001fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d001      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e054      	b.n	8001d5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a26      	ldr	r2, [pc, #152]	@ (8001d68 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d022      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cda:	d01d      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a22      	ldr	r2, [pc, #136]	@ (8001d6c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d018      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a21      	ldr	r2, [pc, #132]	@ (8001d70 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d013      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8001d74 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00e      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8001d78 <HAL_TIM_Base_Start_IT+0xe0>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d009      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1c      	ldr	r2, [pc, #112]	@ (8001d7c <HAL_TIM_Base_Start_IT+0xe4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d004      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x80>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a1b      	ldr	r2, [pc, #108]	@ (8001d80 <HAL_TIM_Base_Start_IT+0xe8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d115      	bne.n	8001d44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <HAL_TIM_Base_Start_IT+0xec>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d015      	beq.n	8001d56 <HAL_TIM_Base_Start_IT+0xbe>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d30:	d011      	beq.n	8001d56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 0201 	orr.w	r2, r2, #1
 8001d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d42:	e008      	b.n	8001d56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	e000      	b.n	8001d58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	40000400 	.word	0x40000400
 8001d70:	40000800 	.word	0x40000800
 8001d74:	40000c00 	.word	0x40000c00
 8001d78:	40010400 	.word	0x40010400
 8001d7c:	40014000 	.word	0x40014000
 8001d80:	40001800 	.word	0x40001800
 8001d84:	00010007 	.word	0x00010007

08001d88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d020      	beq.n	8001dec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01b      	beq.n	8001dec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0202 	mvn.w	r2, #2
 8001dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f8e9 	bl	8001faa <HAL_TIM_IC_CaptureCallback>
 8001dd8:	e005      	b.n	8001de6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f8db 	bl	8001f96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f8ec 	bl	8001fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d020      	beq.n	8001e38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d01b      	beq.n	8001e38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0204 	mvn.w	r2, #4
 8001e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f8c3 	bl	8001faa <HAL_TIM_IC_CaptureCallback>
 8001e24:	e005      	b.n	8001e32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f8b5 	bl	8001f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f8c6 	bl	8001fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d020      	beq.n	8001e84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01b      	beq.n	8001e84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0208 	mvn.w	r2, #8
 8001e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2204      	movs	r2, #4
 8001e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f89d 	bl	8001faa <HAL_TIM_IC_CaptureCallback>
 8001e70:	e005      	b.n	8001e7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f88f 	bl	8001f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f8a0 	bl	8001fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d020      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f003 0310 	and.w	r3, r3, #16
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01b      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0210 	mvn.w	r2, #16
 8001ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f877 	bl	8001faa <HAL_TIM_IC_CaptureCallback>
 8001ebc:	e005      	b.n	8001eca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f869 	bl	8001f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f87a 	bl	8001fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00c      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0201 	mvn.w	r2, #1
 8001eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe fd7a 	bl	80009e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d104      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00c      	beq.n	8001f22 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d007      	beq.n	8001f22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f919 	bl	8002154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00c      	beq.n	8001f46 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d007      	beq.n	8001f46 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f911 	bl	8002168 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00c      	beq.n	8001f6a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d007      	beq.n	8001f6a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f834 	bl	8001fd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00c      	beq.n	8001f8e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 0320 	and.w	r3, r3, #32
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d007      	beq.n	8001f8e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f06f 0220 	mvn.w	r2, #32
 8001f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f8d9 	bl	8002140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a46      	ldr	r2, [pc, #280]	@ (8002114 <TIM_Base_SetConfig+0x12c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d013      	beq.n	8002028 <TIM_Base_SetConfig+0x40>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002006:	d00f      	beq.n	8002028 <TIM_Base_SetConfig+0x40>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a43      	ldr	r2, [pc, #268]	@ (8002118 <TIM_Base_SetConfig+0x130>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d00b      	beq.n	8002028 <TIM_Base_SetConfig+0x40>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a42      	ldr	r2, [pc, #264]	@ (800211c <TIM_Base_SetConfig+0x134>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d007      	beq.n	8002028 <TIM_Base_SetConfig+0x40>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a41      	ldr	r2, [pc, #260]	@ (8002120 <TIM_Base_SetConfig+0x138>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d003      	beq.n	8002028 <TIM_Base_SetConfig+0x40>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a40      	ldr	r2, [pc, #256]	@ (8002124 <TIM_Base_SetConfig+0x13c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d108      	bne.n	800203a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800202e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a35      	ldr	r2, [pc, #212]	@ (8002114 <TIM_Base_SetConfig+0x12c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d02b      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002048:	d027      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a32      	ldr	r2, [pc, #200]	@ (8002118 <TIM_Base_SetConfig+0x130>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d023      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a31      	ldr	r2, [pc, #196]	@ (800211c <TIM_Base_SetConfig+0x134>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d01f      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a30      	ldr	r2, [pc, #192]	@ (8002120 <TIM_Base_SetConfig+0x138>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d01b      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a2f      	ldr	r2, [pc, #188]	@ (8002124 <TIM_Base_SetConfig+0x13c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d017      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a2e      	ldr	r2, [pc, #184]	@ (8002128 <TIM_Base_SetConfig+0x140>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a2d      	ldr	r2, [pc, #180]	@ (800212c <TIM_Base_SetConfig+0x144>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00f      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a2c      	ldr	r2, [pc, #176]	@ (8002130 <TIM_Base_SetConfig+0x148>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00b      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a2b      	ldr	r2, [pc, #172]	@ (8002134 <TIM_Base_SetConfig+0x14c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d007      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a2a      	ldr	r2, [pc, #168]	@ (8002138 <TIM_Base_SetConfig+0x150>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d003      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a29      	ldr	r2, [pc, #164]	@ (800213c <TIM_Base_SetConfig+0x154>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d108      	bne.n	80020ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a10      	ldr	r2, [pc, #64]	@ (8002114 <TIM_Base_SetConfig+0x12c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d003      	beq.n	80020e0 <TIM_Base_SetConfig+0xf8>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a12      	ldr	r2, [pc, #72]	@ (8002124 <TIM_Base_SetConfig+0x13c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d103      	bne.n	80020e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d105      	bne.n	8002106 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f023 0201 	bic.w	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	611a      	str	r2, [r3, #16]
  }
}
 8002106:	bf00      	nop
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40010000 	.word	0x40010000
 8002118:	40000400 	.word	0x40000400
 800211c:	40000800 	.word	0x40000800
 8002120:	40000c00 	.word	0x40000c00
 8002124:	40010400 	.word	0x40010400
 8002128:	40014000 	.word	0x40014000
 800212c:	40014400 	.word	0x40014400
 8002130:	40014800 	.word	0x40014800
 8002134:	40001800 	.word	0x40001800
 8002138:	40001c00 	.word	0x40001c00
 800213c:	40002000 	.word	0x40002000

08002140 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f103 0208 	add.w	r2, r3, #8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f103 0208 	add.w	r2, r3, #8
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f103 0208 	add.w	r2, r3, #8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80021b0:	f240 1019 	movw	r0, #281	@ 0x119
 80021b4:	f004 fec4 	bl	8006f40 <SEGGER_SYSVIEW_RecordEndCall>
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80021ce:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80021d2:	f004 feb5 	bl	8006f40 <SEGGER_SYSVIEW_RecordEndCall>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f4:	d103      	bne.n	80021fe <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	e00c      	b.n	8002218 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3308      	adds	r3, #8
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	e002      	b.n	800220c <vListInsert+0x2e>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	429a      	cmp	r2, r3
 8002216:	d2f6      	bcs.n	8002206 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002244:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002248:	f004 fe7a 	bl	8006f40 <SEGGER_SYSVIEW_RecordEndCall>
}
 800224c:	bf00      	nop
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6892      	ldr	r2, [r2, #8]
 800226a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6852      	ldr	r2, [r2, #4]
 8002274:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d103      	bne.n	8002288 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	1e5a      	subs	r2, r3, #1
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4619      	mov	r1, r3
 800229e:	f240 101d 	movw	r0, #285	@ 0x11d
 80022a2:	f004 fe89 	bl	8006fb8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80022be:	2301      	movs	r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10d      	bne.n	80022e8 <xQueueGenericReset+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80022cc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80022d0:	b672      	cpsid	i
 80022d2:	f383 8811 	msr	BASEPRI, r3
 80022d6:	f3bf 8f6f 	isb	sy
 80022da:	f3bf 8f4f 	dsb	sy
 80022de:	b662      	cpsie	i
 80022e0:	60fb      	str	r3, [r7, #12]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80022e2:	bf00      	nop
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d05d      	beq.n	80023aa <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d059      	beq.n	80023aa <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022fe:	2100      	movs	r1, #0
 8002300:	fba3 2302 	umull	r2, r3, r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d000      	beq.n	800230a <xQueueGenericReset+0x56>
 8002308:	2101      	movs	r1, #1
 800230a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800230c:	2b00      	cmp	r3, #0
 800230e:	d14c      	bne.n	80023aa <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 8002310:	f002 f980 	bl	8004614 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800231c:	6939      	ldr	r1, [r7, #16]
 800231e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	441a      	add	r2, r3
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	2200      	movs	r2, #0
 800232e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002340:	3b01      	subs	r3, #1
 8002342:	6939      	ldr	r1, [r7, #16]
 8002344:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	441a      	add	r2, r3
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	22ff      	movs	r2, #255	@ 0xff
 8002354:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	22ff      	movs	r2, #255	@ 0xff
 800235c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d114      	bne.n	8002390 <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d01a      	beq.n	80023a4 <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	3310      	adds	r3, #16
 8002372:	4618      	mov	r0, r3
 8002374:	f001 f9a4 	bl	80036c0 <xTaskRemoveFromEventList>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d012      	beq.n	80023a4 <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800237e:	4b19      	ldr	r3, [pc, #100]	@ (80023e4 <xQueueGenericReset+0x130>)
 8002380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	f3bf 8f4f 	dsb	sy
 800238a:	f3bf 8f6f 	isb	sy
 800238e:	e009      	b.n	80023a4 <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	3310      	adds	r3, #16
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fef1 	bl	800217c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	3324      	adds	r3, #36	@ 0x24
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff feec 	bl	800217c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80023a4:	f002 f96c 	bl	8004680 <vPortExitCritical>
 80023a8:	e001      	b.n	80023ae <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10d      	bne.n	80023d0 <xQueueGenericReset+0x11c>
    __asm volatile
 80023b4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80023b8:	b672      	cpsid	i
 80023ba:	f383 8811 	msr	BASEPRI, r3
 80023be:	f3bf 8f6f 	isb	sy
 80023c2:	f3bf 8f4f 	dsb	sy
 80023c6:	b662      	cpsie	i
 80023c8:	60bb      	str	r3, [r7, #8]
}
 80023ca:	bf00      	nop
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	4619      	mov	r1, r3
 80023d4:	2096      	movs	r0, #150	@ 0x96
 80023d6:	f004 fdef 	bl	8006fb8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80023da:	697b      	ldr	r3, [r7, #20]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	e000ed04 	.word	0xe000ed04

080023e8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	@ 0x28
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	4613      	mov	r3, r2
 80023f4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d02e      	beq.n	800245e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002400:	2100      	movs	r1, #0
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	fba3 2302 	umull	r2, r3, r3, r2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d000      	beq.n	8002410 <xQueueGenericCreate+0x28>
 800240e:	2101      	movs	r1, #1
 8002410:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002412:	2b00      	cmp	r3, #0
 8002414:	d123      	bne.n	800245e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800241e:	f113 0f55 	cmn.w	r3, #85	@ 0x55
 8002422:	d81c      	bhi.n	800245e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	fb02 f303 	mul.w	r3, r2, r3
 800242c:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	3354      	adds	r3, #84	@ 0x54
 8002432:	4618      	mov	r0, r3
 8002434:	f002 fa2a 	bl	800488c <pvPortMalloc>
 8002438:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01f      	beq.n	8002480 <xQueueGenericCreate+0x98>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	3354      	adds	r3, #84	@ 0x54
 8002448:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800244a:	79fa      	ldrb	r2, [r7, #7]
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	4613      	mov	r3, r2
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f820 	bl	800249c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800245c:	e010      	b.n	8002480 <xQueueGenericCreate+0x98>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10d      	bne.n	8002480 <xQueueGenericCreate+0x98>
    __asm volatile
 8002464:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002468:	b672      	cpsid	i
 800246a:	f383 8811 	msr	BASEPRI, r3
 800246e:	f3bf 8f6f 	isb	sy
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	b662      	cpsie	i
 8002478:	613b      	str	r3, [r7, #16]
}
 800247a:	bf00      	nop
 800247c:	bf00      	nop
 800247e:	e7fd      	b.n	800247c <xQueueGenericCreate+0x94>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	4618      	mov	r0, r3
 8002484:	f004 ff32 	bl	80072ec <SEGGER_SYSVIEW_ShrinkId>
 8002488:	4603      	mov	r3, r0
 800248a:	4619      	mov	r1, r3
 800248c:	2098      	movs	r0, #152	@ 0x98
 800248e:	f004 fd93 	bl	8006fb8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8002492:	69fb      	ldr	r3, [r7, #28]
    }
 8002494:	4618      	mov	r0, r3
 8002496:	3720      	adds	r7, #32
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d103      	bne.n	80024b8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e002      	b.n	80024be <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024ca:	2101      	movs	r1, #1
 80024cc:	69b8      	ldr	r0, [r7, #24]
 80024ce:	f7ff fef1 	bl	80022b4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
    {
        pxNewQueue->pxQueueSetContainer = NULL;
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2200      	movs	r2, #0
 80024de:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80024e0:	bf00      	nop
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08c      	sub	sp, #48	@ 0x30
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80024fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10d      	bne.n	800251e <xQueueReceive+0x36>
    __asm volatile
 8002502:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002506:	b672      	cpsid	i
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	b662      	cpsie	i
 8002516:	623b      	str	r3, [r7, #32]
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	e7fd      	b.n	800251a <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d103      	bne.n	800252c <xQueueReceive+0x44>
 8002524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <xQueueReceive+0x48>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <xQueueReceive+0x4a>
 8002530:	2300      	movs	r3, #0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10d      	bne.n	8002552 <xQueueReceive+0x6a>
    __asm volatile
 8002536:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800253a:	b672      	cpsid	i
 800253c:	f383 8811 	msr	BASEPRI, r3
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	b662      	cpsie	i
 800254a:	61fb      	str	r3, [r7, #28]
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	e7fd      	b.n	800254e <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002552:	f001 fadd 	bl	8003b10 <xTaskGetSchedulerState>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <xQueueReceive+0x7a>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <xQueueReceive+0x7e>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <xQueueReceive+0x80>
 8002566:	2300      	movs	r3, #0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10d      	bne.n	8002588 <xQueueReceive+0xa0>
    __asm volatile
 800256c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002570:	b672      	cpsid	i
 8002572:	f383 8811 	msr	BASEPRI, r3
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	b662      	cpsie	i
 8002580:	61bb      	str	r3, [r7, #24]
}
 8002582:	bf00      	nop
 8002584:	bf00      	nop
 8002586:	e7fd      	b.n	8002584 <xQueueReceive+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002588:	f002 f844 	bl	8004614 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800258c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800258e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002594:	2b00      	cmp	r3, #0
 8002596:	d023      	beq.n	80025e0 <xQueueReceive+0xf8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800259c:	f000 f902 	bl	80027a4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80025a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a2:	1e5a      	subs	r2, r3, #1
 80025a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00f      	beq.n	80025d0 <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b2:	3310      	adds	r3, #16
 80025b4:	4618      	mov	r0, r3
 80025b6:	f001 f883 	bl	80036c0 <xTaskRemoveFromEventList>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d007      	beq.n	80025d0 <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80025c0:	4b42      	ldr	r3, [pc, #264]	@ (80026cc <xQueueReceive+0x1e4>)
 80025c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80025d0:	f002 f856 	bl	8004680 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 80025d4:	2101      	movs	r1, #1
 80025d6:	20a4      	movs	r0, #164	@ 0xa4
 80025d8:	f004 fcee 	bl	8006fb8 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80025dc:	2301      	movs	r3, #1
 80025de:	e071      	b.n	80026c4 <xQueueReceive+0x1dc>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d107      	bne.n	80025f6 <xQueueReceive+0x10e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80025e6:	f002 f84b 	bl	8004680 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80025ea:	2100      	movs	r1, #0
 80025ec:	20a4      	movs	r0, #164	@ 0xa4
 80025ee:	f004 fce3 	bl	8006fb8 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e066      	b.n	80026c4 <xQueueReceive+0x1dc>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d106      	bne.n	800260a <xQueueReceive+0x122>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025fc:	f107 0310 	add.w	r3, r7, #16
 8002600:	4618      	mov	r0, r3
 8002602:	f001 f93f 	bl	8003884 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002606:	2301      	movs	r3, #1
 8002608:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800260a:	f002 f839 	bl	8004680 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800260e:	f000 fcf7 	bl	8003000 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002612:	f001 ffff 	bl	8004614 <vPortEnterCritical>
 8002616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002618:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800261c:	b25b      	sxtb	r3, r3
 800261e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002622:	d103      	bne.n	800262c <xQueueReceive+0x144>
 8002624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800262c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800262e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002632:	b25b      	sxtb	r3, r3
 8002634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002638:	d103      	bne.n	8002642 <xQueueReceive+0x15a>
 800263a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002642:	f002 f81d 	bl	8004680 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002646:	1d3a      	adds	r2, r7, #4
 8002648:	f107 0310 	add.w	r3, r7, #16
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f001 f930 	bl	80038b4 <xTaskCheckForTimeOut>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d123      	bne.n	80026a2 <xQueueReceive+0x1ba>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800265a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800265c:	f000 f927 	bl	80028ae <prvIsQueueEmpty>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d017      	beq.n	8002696 <xQueueReceive+0x1ae>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002668:	3324      	adds	r3, #36	@ 0x24
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4611      	mov	r1, r2
 800266e:	4618      	mov	r0, r3
 8002670:	f000 ffb0 	bl	80035d4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002674:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002676:	f000 f8bb 	bl	80027f0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800267a:	f000 fccf 	bl	800301c <xTaskResumeAll>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d181      	bne.n	8002588 <xQueueReceive+0xa0>
                {
                    taskYIELD_WITHIN_API();
 8002684:	4b11      	ldr	r3, [pc, #68]	@ (80026cc <xQueueReceive+0x1e4>)
 8002686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	f3bf 8f4f 	dsb	sy
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	e778      	b.n	8002588 <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002696:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002698:	f000 f8aa 	bl	80027f0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800269c:	f000 fcbe 	bl	800301c <xTaskResumeAll>
 80026a0:	e772      	b.n	8002588 <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80026a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026a4:	f000 f8a4 	bl	80027f0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80026a8:	f000 fcb8 	bl	800301c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026ae:	f000 f8fe 	bl	80028ae <prvIsQueueEmpty>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f43f af67 	beq.w	8002588 <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80026ba:	2100      	movs	r1, #0
 80026bc:	20a4      	movs	r0, #164	@ 0xa4
 80026be:	f004 fc7b 	bl	8006fb8 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80026c2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3730      	adds	r7, #48	@ 0x30
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	e000ed04 	.word	0xe000ed04

080026d0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10d      	bne.n	800270a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d14d      	bne.n	8002792 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f001 fa2a 	bl	8003b54 <xTaskPriorityDisinherit>
 8002700:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	e043      	b.n	8002792 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d119      	bne.n	8002744 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6858      	ldr	r0, [r3, #4]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002718:	461a      	mov	r2, r3
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	f004 ffb6 	bl	800768c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	441a      	add	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	429a      	cmp	r2, r3
 8002738:	d32b      	bcc.n	8002792 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	e026      	b.n	8002792 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	68d8      	ldr	r0, [r3, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274c:	461a      	mov	r2, r3
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	f004 ff9c 	bl	800768c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275c:	425b      	negs	r3, r3
 800275e:	441a      	add	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d207      	bcs.n	8002780 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	425b      	negs	r3, r3
 800277a:	441a      	add	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d105      	bne.n	8002792 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	3b01      	subs	r3, #1
 8002790:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800279a:	697b      	ldr	r3, [r7, #20]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d018      	beq.n	80027e8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	441a      	add	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d303      	bcc.n	80027d8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68d9      	ldr	r1, [r3, #12]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	461a      	mov	r2, r3
 80027e2:	6838      	ldr	r0, [r7, #0]
 80027e4:	f004 ff52 	bl	800768c <memcpy>
    }
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80027f8:	f001 ff0c 	bl	8004614 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002802:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002804:	e01e      	b.n	8002844 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800280a:	2b00      	cmp	r3, #0
 800280c:	d008      	beq.n	8002820 <prvUnlockQueue+0x30>
                {
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f8ed 	bl	80029ee <prvNotifyQueueSetContainer>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d010      	beq.n	800283c <prvUnlockQueue+0x4c>
                    {
                        /* The queue is a member of a queue set, and posting to
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
 800281a:	f001 f8bb 	bl	8003994 <vTaskMissedYield>
 800281e:	e00d      	b.n	800283c <prvUnlockQueue+0x4c>
                else
                {
                    /* Tasks that are removed from the event list will get
                     * added to the pending ready list as the scheduler is still
                     * suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	2b00      	cmp	r3, #0
 8002826:	d012      	beq.n	800284e <prvUnlockQueue+0x5e>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3324      	adds	r3, #36	@ 0x24
 800282c:	4618      	mov	r0, r3
 800282e:	f000 ff47 	bl	80036c0 <xTaskRemoveFromEventList>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <prvUnlockQueue+0x4c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            vTaskMissedYield();
 8002838:	f001 f8ac 	bl	8003994 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	3b01      	subs	r3, #1
 8002840:	b2db      	uxtb	r3, r3
 8002842:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002848:	2b00      	cmp	r3, #0
 800284a:	dcdc      	bgt.n	8002806 <prvUnlockQueue+0x16>
 800284c:	e000      	b.n	8002850 <prvUnlockQueue+0x60>
                        break;
 800284e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	22ff      	movs	r2, #255	@ 0xff
 8002854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002858:	f001 ff12 	bl	8004680 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800285c:	f001 feda 	bl	8004614 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002866:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002868:	e011      	b.n	800288e <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d012      	beq.n	8002898 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3310      	adds	r3, #16
 8002876:	4618      	mov	r0, r3
 8002878:	f000 ff22 	bl	80036c0 <xTaskRemoveFromEventList>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 8002882:	f001 f887 	bl	8003994 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002886:	7bbb      	ldrb	r3, [r7, #14]
 8002888:	3b01      	subs	r3, #1
 800288a:	b2db      	uxtb	r3, r3
 800288c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800288e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002892:	2b00      	cmp	r3, #0
 8002894:	dce9      	bgt.n	800286a <prvUnlockQueue+0x7a>
 8002896:	e000      	b.n	800289a <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8002898:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	22ff      	movs	r2, #255	@ 0xff
 800289e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80028a2:	f001 feed 	bl	8004680 <vPortExitCritical>
}
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b084      	sub	sp, #16
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80028b6:	f001 fead 	bl	8004614 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d102      	bne.n	80028c8 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80028c2:	2301      	movs	r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	e001      	b.n	80028cc <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80028cc:	f001 fed8 	bl	8004680 <vPortExitCritical>

    return xReturn;
 80028d0:	68fb      	ldr	r3, [r7, #12]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10d      	bne.n	800290c <vQueueAddToRegistry+0x30>
    __asm volatile
 80028f0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80028f4:	b672      	cpsid	i
 80028f6:	f383 8811 	msr	BASEPRI, r3
 80028fa:	f3bf 8f6f 	isb	sy
 80028fe:	f3bf 8f4f 	dsb	sy
 8002902:	b662      	cpsie	i
 8002904:	60fb      	str	r3, [r7, #12]
}
 8002906:	bf00      	nop
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d024      	beq.n	800295c <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	e01e      	b.n	8002956 <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002918:	4a18      	ldr	r2, [pc, #96]	@ (800297c <vQueueAddToRegistry+0xa0>)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	429a      	cmp	r2, r3
 8002926:	d105      	bne.n	8002934 <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4a13      	ldr	r2, [pc, #76]	@ (800297c <vQueueAddToRegistry+0xa0>)
 800292e:	4413      	add	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
                    break;
 8002932:	e013      	b.n	800295c <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10a      	bne.n	8002950 <vQueueAddToRegistry+0x74>
 800293a:	4a10      	ldr	r2, [pc, #64]	@ (800297c <vQueueAddToRegistry+0xa0>)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d104      	bne.n	8002950 <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4a0c      	ldr	r2, [pc, #48]	@ (800297c <vQueueAddToRegistry+0xa0>)
 800294c:	4413      	add	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	3301      	adds	r3, #1
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2b07      	cmp	r3, #7
 800295a:	d9dd      	bls.n	8002918 <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d005      	beq.n	800296e <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 800296e:	20b6      	movs	r0, #182	@ 0xb6
 8002970:	f004 fae6 	bl	8006f40 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002974:	bf00      	nop
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	20000088 	.word	0x20000088

08002980 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002990:	f001 fe40 	bl	8004614 <vPortEnterCritical>
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800299a:	b25b      	sxtb	r3, r3
 800299c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a0:	d103      	bne.n	80029aa <vQueueWaitForMessageRestricted+0x2a>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029b0:	b25b      	sxtb	r3, r3
 80029b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b6:	d103      	bne.n	80029c0 <vQueueWaitForMessageRestricted+0x40>
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029c0:	f001 fe5e 	bl	8004680 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d106      	bne.n	80029da <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	3324      	adds	r3, #36	@ 0x24
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68b9      	ldr	r1, [r7, #8]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 fe27 	bl	8003628 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80029da:	6978      	ldr	r0, [r7, #20]
 80029dc:	f7ff ff08 	bl	80027f0 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 80029e0:	20b9      	movs	r0, #185	@ 0xb9
 80029e2:	f004 faad 	bl	8006f40 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80029e6:	bf00      	nop
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b08a      	sub	sp, #40	@ 0x28
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029fa:	623b      	str	r3, [r7, #32]
        BaseType_t xReturn = pdFALSE;
 80029fc:	2300      	movs	r3, #0
 80029fe:	627b      	str	r3, [r7, #36]	@ 0x24
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10d      	bne.n	8002a22 <prvNotifyQueueSetContainer+0x34>
    __asm volatile
 8002a06:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002a0a:	b672      	cpsid	i
 8002a0c:	f383 8811 	msr	BASEPRI, r3
 8002a10:	f3bf 8f6f 	isb	sy
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	b662      	cpsie	i
 8002a1a:	617b      	str	r3, [r7, #20]
}
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
 8002a20:	e7fd      	b.n	8002a1e <prvNotifyQueueSetContainer+0x30>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d30d      	bcc.n	8002a4a <prvNotifyQueueSetContainer+0x5c>
    __asm volatile
 8002a2e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002a32:	b672      	cpsid	i
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	b662      	cpsie	i
 8002a42:	613b      	str	r3, [r7, #16]
}
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	e7fd      	b.n	8002a46 <prvNotifyQueueSetContainer+0x58>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d23f      	bcs.n	8002ad6 <prvNotifyQueueSetContainer+0xe8>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a5c:	77fb      	strb	r3, [r7, #31]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	2200      	movs	r2, #0
 8002a62:	4619      	mov	r1, r3
 8002a64:	6a38      	ldr	r0, [r7, #32]
 8002a66:	f7ff fe33 	bl	80026d0 <prvCopyDataToQueue>
 8002a6a:	6278      	str	r0, [r7, #36]	@ 0x24

            if( cTxLock == queueUNLOCKED )
 8002a6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a74:	d10e      	bne.n	8002a94 <prvNotifyQueueSetContainer+0xa6>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d02b      	beq.n	8002ad6 <prvNotifyQueueSetContainer+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	3324      	adds	r3, #36	@ 0x24
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fe1c 	bl	80036c0 <xTaskRemoveFromEventList>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d023      	beq.n	8002ad6 <prvNotifyQueueSetContainer+0xe8>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a92:	e020      	b.n	8002ad6 <prvNotifyQueueSetContainer+0xe8>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
 8002a94:	f000 fbfe 	bl	8003294 <uxTaskGetNumberOfTasks>
 8002a98:	61b8      	str	r0, [r7, #24]
 8002a9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d918      	bls.n	8002ad6 <prvNotifyQueueSetContainer+0xe8>
 8002aa4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002aa8:	2b7f      	cmp	r3, #127	@ 0x7f
 8002aaa:	d10d      	bne.n	8002ac8 <prvNotifyQueueSetContainer+0xda>
    __asm volatile
 8002aac:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002ab0:	b672      	cpsid	i
 8002ab2:	f383 8811 	msr	BASEPRI, r3
 8002ab6:	f3bf 8f6f 	isb	sy
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	b662      	cpsie	i
 8002ac0:	60fb      	str	r3, [r7, #12]
}
 8002ac2:	bf00      	nop
 8002ac4:	bf00      	nop
 8002ac6:	e7fd      	b.n	8002ac4 <prvNotifyQueueSetContainer+0xd6>
 8002ac8:	7ffb      	ldrb	r3, [r7, #31]
 8002aca:	3301      	adds	r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	b25a      	sxtb	r2, r3
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3728      	adds	r7, #40	@ 0x28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	@ 0x28
 8002ae4:	af04      	add	r7, sp, #16
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f001 feca 	bl	800488c <pvPortMalloc>
 8002af8:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d013      	beq.n	8002b28 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002b00:	2058      	movs	r0, #88	@ 0x58
 8002b02:	f001 fec3 	bl	800488c <pvPortMalloc>
 8002b06:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d008      	beq.n	8002b20 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002b0e:	2258      	movs	r2, #88	@ 0x58
 8002b10:	2100      	movs	r1, #0
 8002b12:	6978      	ldr	r0, [r7, #20]
 8002b14:	f004 fd8e 	bl	8007634 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b1e:	e005      	b.n	8002b2c <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002b20:	6938      	ldr	r0, [r7, #16]
 8002b22:	f001 fff1 	bl	8004b08 <vPortFree>
 8002b26:	e001      	b.n	8002b2c <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00d      	beq.n	8002b4e <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b32:	2300      	movs	r3, #0
 8002b34:	9303      	str	r3, [sp, #12]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	9302      	str	r3, [sp, #8]
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f82d 	bl	8002ba8 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002b4e:	697b      	ldr	r3, [r7, #20]
    }
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	9301      	str	r3, [sp, #4]
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	68b9      	ldr	r1, [r7, #8]
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f7ff ffb3 	bl	8002ae0 <prvCreateTask>
 8002b7a:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002b82:	6938      	ldr	r0, [r7, #16]
 8002b84:	f000 f8a4 	bl	8002cd0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	e002      	b.n	8002b94 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b92:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	4619      	mov	r1, r3
 8002b98:	20c2      	movs	r0, #194	@ 0xc2
 8002b9a:	f004 fa0d 	bl	8006fb8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002b9e:	697b      	ldr	r3, [r7, #20]
    }
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	21a5      	movs	r1, #165	@ 0xa5
 8002bc2:	f004 fd37 	bl	8007634 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002bd0:	440b      	add	r3, r1
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	f023 0307 	bic.w	r3, r3, #7
 8002bde:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00d      	beq.n	8002c06 <prvInitialiseNewTask+0x5e>
    __asm volatile
 8002bea:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002bee:	b672      	cpsid	i
 8002bf0:	f383 8811 	msr	BASEPRI, r3
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	b662      	cpsie	i
 8002bfe:	617b      	str	r3, [r7, #20]
}
 8002c00:	bf00      	nop
 8002c02:	bf00      	nop
 8002c04:	e7fd      	b.n	8002c02 <prvInitialiseNewTask+0x5a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d01e      	beq.n	8002c4a <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61fb      	str	r3, [r7, #28]
 8002c10:	e012      	b.n	8002c38 <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	4413      	add	r3, r2
 8002c18:	7819      	ldrb	r1, [r3, #0]
 8002c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	4413      	add	r3, r2
 8002c20:	3334      	adds	r3, #52	@ 0x34
 8002c22:	460a      	mov	r2, r1
 8002c24:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d006      	beq.n	8002c40 <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3301      	adds	r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2b09      	cmp	r3, #9
 8002c3c:	d9e9      	bls.n	8002c12 <prvInitialiseNewTask+0x6a>
 8002c3e:	e000      	b.n	8002c42 <prvInitialiseNewTask+0x9a>
            {
                break;
 8002c40:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d90d      	bls.n	8002c6c <prvInitialiseNewTask+0xc4>
    __asm volatile
 8002c50:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002c54:	b672      	cpsid	i
 8002c56:	f383 8811 	msr	BASEPRI, r3
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	b662      	cpsie	i
 8002c64:	613b      	str	r3, [r7, #16]
}
 8002c66:	bf00      	nop
 8002c68:	bf00      	nop
 8002c6a:	e7fd      	b.n	8002c68 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d901      	bls.n	8002c76 <prvInitialiseNewTask+0xce>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c72:	2304      	movs	r3, #4
 8002c74:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c80:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c84:	3304      	adds	r3, #4
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff fa9a 	bl	80021c0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c8e:	3318      	adds	r3, #24
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fa95 	bl	80021c0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c9a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9e:	f1c3 0205 	rsb	r2, r3, #5
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002caa:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	68f9      	ldr	r1, [r7, #12]
 8002cb0:	69b8      	ldr	r0, [r7, #24]
 8002cb2:	f001 fb4b 	bl	800434c <pxPortInitialiseStack>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cba:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <prvInitialiseNewTask+0x120>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cc6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cc8:	bf00      	nop
 8002cca:	3720      	adds	r7, #32
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002cd0:	b5b0      	push	{r4, r5, r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002cd8:	f001 fc9c 	bl	8004614 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002cdc:	4b50      	ldr	r3, [pc, #320]	@ (8002e20 <prvAddNewTaskToReadyList+0x150>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	4a4f      	ldr	r2, [pc, #316]	@ (8002e20 <prvAddNewTaskToReadyList+0x150>)
 8002ce4:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002ce6:	4b4f      	ldr	r3, [pc, #316]	@ (8002e24 <prvAddNewTaskToReadyList+0x154>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d109      	bne.n	8002d02 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002cee:	4a4d      	ldr	r2, [pc, #308]	@ (8002e24 <prvAddNewTaskToReadyList+0x154>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cf4:	4b4a      	ldr	r3, [pc, #296]	@ (8002e20 <prvAddNewTaskToReadyList+0x150>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d110      	bne.n	8002d1e <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002cfc:	f000 fe6e 	bl	80039dc <prvInitialiseTaskLists>
 8002d00:	e00d      	b.n	8002d1e <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002d02:	4b49      	ldr	r3, [pc, #292]	@ (8002e28 <prvAddNewTaskToReadyList+0x158>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d109      	bne.n	8002d1e <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d0a:	4b46      	ldr	r3, [pc, #280]	@ (8002e24 <prvAddNewTaskToReadyList+0x154>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d802      	bhi.n	8002d1e <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002d18:	4a42      	ldr	r2, [pc, #264]	@ (8002e24 <prvAddNewTaskToReadyList+0x154>)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002d1e:	4b43      	ldr	r3, [pc, #268]	@ (8002e2c <prvAddNewTaskToReadyList+0x15c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3301      	adds	r3, #1
 8002d24:	4a41      	ldr	r2, [pc, #260]	@ (8002e2c <prvAddNewTaskToReadyList+0x15c>)
 8002d26:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d28:	4b40      	ldr	r3, [pc, #256]	@ (8002e2c <prvAddNewTaskToReadyList+0x15c>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d016      	beq.n	8002d64 <prvAddNewTaskToReadyList+0x94>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f004 f9b1 	bl	80070a0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4e:	461d      	mov	r5, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	461c      	mov	r4, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	1ae3      	subs	r3, r4, r3
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	462b      	mov	r3, r5
 8002d60:	f002 f8d8 	bl	8004f14 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f004 fa1e 	bl	80071a8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d70:	2201      	movs	r2, #1
 8002d72:	409a      	lsls	r2, r3
 8002d74:	4b2e      	ldr	r3, [pc, #184]	@ (8002e30 <prvAddNewTaskToReadyList+0x160>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	4a2d      	ldr	r2, [pc, #180]	@ (8002e30 <prvAddNewTaskToReadyList+0x160>)
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d82:	492c      	ldr	r1, [pc, #176]	@ (8002e34 <prvAddNewTaskToReadyList+0x164>)
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3304      	adds	r3, #4
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	3204      	adds	r2, #4
 8002daa:	605a      	str	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	1d1a      	adds	r2, r3, #4
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e34 <prvAddNewTaskToReadyList+0x164>)
 8002dc2:	441a      	add	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	615a      	str	r2, [r3, #20]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dcc:	4919      	ldr	r1, [pc, #100]	@ (8002e34 <prvAddNewTaskToReadyList+0x164>)
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002dde:	1c59      	adds	r1, r3, #1
 8002de0:	4814      	ldr	r0, [pc, #80]	@ (8002e34 <prvAddNewTaskToReadyList+0x164>)
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4403      	add	r3, r0
 8002dec:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002dee:	f001 fc47 	bl	8004680 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002df2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e28 <prvAddNewTaskToReadyList+0x158>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00e      	beq.n	8002e18 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002e24 <prvAddNewTaskToReadyList+0x154>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d207      	bcs.n	8002e18 <prvAddNewTaskToReadyList+0x148>
 8002e08:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <prvAddNewTaskToReadyList+0x168>)
 8002e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e20:	200001a0 	.word	0x200001a0
 8002e24:	200000c8 	.word	0x200000c8
 8002e28:	200001ac 	.word	0x200001ac
 8002e2c:	200001bc 	.word	0x200001bc
 8002e30:	200001a8 	.word	0x200001a8
 8002e34:	200000cc 	.word	0x200000cc
 8002e38:	e000ed04 	.word	0xe000ed04

08002e3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d01a      	beq.n	8002e84 <vTaskDelay+0x48>
        {
            vTaskSuspendAll();
 8002e4e:	f000 f8d7 	bl	8003000 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8002e52:	4b15      	ldr	r3, [pc, #84]	@ (8002ea8 <vTaskDelay+0x6c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d00d      	beq.n	8002e76 <vTaskDelay+0x3a>
    __asm volatile
 8002e5a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002e5e:	b672      	cpsid	i
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	b662      	cpsie	i
 8002e6e:	60bb      	str	r3, [r7, #8]
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	e7fd      	b.n	8002e72 <vTaskDelay+0x36>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e76:	2100      	movs	r1, #0
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 ff1f 	bl	8003cbc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002e7e:	f000 f8cd 	bl	800301c <xTaskResumeAll>
 8002e82:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d107      	bne.n	8002e9a <vTaskDelay+0x5e>
        {
            taskYIELD_WITHIN_API();
 8002e8a:	4b08      	ldr	r3, [pc, #32]	@ (8002eac <vTaskDelay+0x70>)
 8002e8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8002e9a:	20c5      	movs	r0, #197	@ 0xc5
 8002e9c:	f004 f850 	bl	8006f40 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	200001c8 	.word	0x200001c8
 8002eac:	e000ed04 	.word	0xe000ed04

08002eb0 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	@ 0x28
 8002eb4:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	e011      	b.n	8002ee8 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8002f38 <prvCreateIdleTasks+0x88>)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	4413      	add	r3, r2
 8002eca:	7819      	ldrb	r1, [r3, #0]
 8002ecc:	1d3a      	adds	r2, r7, #4
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	460a      	mov	r2, r1
 8002ed4:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002ed6:	1d3a      	adds	r2, r7, #4
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	4413      	add	r3, r2
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d006      	beq.n	8002ef0 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2b09      	cmp	r3, #9
 8002eec:	ddea      	ble.n	8002ec4 <prvCreateIdleTasks+0x14>
 8002eee:	e000      	b.n	8002ef2 <prvCreateIdleTasks+0x42>
        {
            break;
 8002ef0:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	e015      	b.n	8002f24 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002ef8:	4b10      	ldr	r3, [pc, #64]	@ (8002f3c <prvCreateIdleTasks+0x8c>)
 8002efa:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4a0f      	ldr	r2, [pc, #60]	@ (8002f40 <prvCreateIdleTasks+0x90>)
 8002f02:	4413      	add	r3, r2
 8002f04:	1d39      	adds	r1, r7, #4
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	2282      	movs	r2, #130	@ 0x82
 8002f10:	6938      	ldr	r0, [r7, #16]
 8002f12:	f7ff fe21 	bl	8002b58 <xTaskCreate>
 8002f16:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d006      	beq.n	8002f2c <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	3301      	adds	r3, #1
 8002f22:	61bb      	str	r3, [r7, #24]
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	dde6      	ble.n	8002ef8 <prvCreateIdleTasks+0x48>
 8002f2a:	e000      	b.n	8002f2e <prvCreateIdleTasks+0x7e>
        {
            break;
 8002f2c:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3720      	adds	r7, #32
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	08007724 	.word	0x08007724
 8002f3c:	080039ad 	.word	0x080039ad
 8002f40:	200001c4 	.word	0x200001c4

08002f44 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002f4a:	f7ff ffb1 	bl	8002eb0 <prvCreateIdleTasks>
 8002f4e:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d102      	bne.n	8002f5c <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8002f56:	f000 ff3f 	bl	8003dd8 <xTimerCreateTimerTask>
 8002f5a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d126      	bne.n	8002fb0 <vTaskStartScheduler+0x6c>
    __asm volatile
 8002f62:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002f66:	b672      	cpsid	i
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	b662      	cpsie	i
 8002f76:	60bb      	str	r3, [r7, #8]
}
 8002f78:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe8 <vTaskStartScheduler+0xa4>)
 8002f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f80:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f82:	4b1a      	ldr	r3, [pc, #104]	@ (8002fec <vTaskStartScheduler+0xa8>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f88:	4b19      	ldr	r3, [pc, #100]	@ (8002ff0 <vTaskStartScheduler+0xac>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002f8e:	4b19      	ldr	r3, [pc, #100]	@ (8002ff4 <vTaskStartScheduler+0xb0>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	4b19      	ldr	r3, [pc, #100]	@ (8002ff8 <vTaskStartScheduler+0xb4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d102      	bne.n	8002fa0 <vTaskStartScheduler+0x5c>
 8002f9a:	f004 f865 	bl	8007068 <SEGGER_SYSVIEW_OnIdle>
 8002f9e:	e004      	b.n	8002faa <vTaskStartScheduler+0x66>
 8002fa0:	4b15      	ldr	r3, [pc, #84]	@ (8002ff8 <vTaskStartScheduler+0xb4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f004 f8bd 	bl	8007124 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002faa:	f001 fa63 	bl	8004474 <xPortStartScheduler>
 8002fae:	e011      	b.n	8002fd4 <vTaskStartScheduler+0x90>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb6:	d10d      	bne.n	8002fd4 <vTaskStartScheduler+0x90>
    __asm volatile
 8002fb8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002fbc:	b672      	cpsid	i
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	b662      	cpsie	i
 8002fcc:	607b      	str	r3, [r7, #4]
}
 8002fce:	bf00      	nop
 8002fd0:	bf00      	nop
 8002fd2:	e7fd      	b.n	8002fd0 <vTaskStartScheduler+0x8c>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002fd4:	4b09      	ldr	r3, [pc, #36]	@ (8002ffc <vTaskStartScheduler+0xb8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002fd8:	20cd      	movs	r0, #205	@ 0xcd
 8002fda:	f003 ffb1 	bl	8006f40 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002fde:	bf00      	nop
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	200001c0 	.word	0x200001c0
 8002fec:	200001ac 	.word	0x200001ac
 8002ff0:	200001a4 	.word	0x200001a4
 8002ff4:	200001c4 	.word	0x200001c4
 8002ff8:	200000c8 	.word	0x200000c8
 8002ffc:	2000000c 	.word	0x2000000c

08003000 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003004:	4b04      	ldr	r3, [pc, #16]	@ (8003018 <vTaskSuspendAll+0x18>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3301      	adds	r3, #1
 800300a:	4a03      	ldr	r2, [pc, #12]	@ (8003018 <vTaskSuspendAll+0x18>)
 800300c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 800300e:	20cf      	movs	r0, #207	@ 0xcf
 8003010:	f003 ff96 	bl	8006f40 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}
 8003018:	200001c8 	.word	0x200001c8

0800301c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003026:	2300      	movs	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800302a:	f001 faf3 	bl	8004614 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8003032:	4b7b      	ldr	r3, [pc, #492]	@ (8003220 <xTaskResumeAll+0x204>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10d      	bne.n	8003056 <xTaskResumeAll+0x3a>
    __asm volatile
 800303a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800303e:	b672      	cpsid	i
 8003040:	f383 8811 	msr	BASEPRI, r3
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	b662      	cpsie	i
 800304e:	603b      	str	r3, [r7, #0]
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	e7fd      	b.n	8003052 <xTaskResumeAll+0x36>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003056:	4b72      	ldr	r3, [pc, #456]	@ (8003220 <xTaskResumeAll+0x204>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3b01      	subs	r3, #1
 800305c:	4a70      	ldr	r2, [pc, #448]	@ (8003220 <xTaskResumeAll+0x204>)
 800305e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003060:	4b6f      	ldr	r3, [pc, #444]	@ (8003220 <xTaskResumeAll+0x204>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	f040 80ce 	bne.w	8003206 <xTaskResumeAll+0x1ea>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800306a:	4b6e      	ldr	r3, [pc, #440]	@ (8003224 <xTaskResumeAll+0x208>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 80c9 	beq.w	8003206 <xTaskResumeAll+0x1ea>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003074:	e092      	b.n	800319c <xTaskResumeAll+0x180>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003076:	4b6c      	ldr	r3, [pc, #432]	@ (8003228 <xTaskResumeAll+0x20c>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	6a12      	ldr	r2, [r2, #32]
 800308c:	609a      	str	r2, [r3, #8]
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	69d2      	ldr	r2, [r2, #28]
 8003096:	605a      	str	r2, [r3, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	3318      	adds	r3, #24
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d103      	bne.n	80030ac <xTaskResumeAll+0x90>
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	6a1a      	ldr	r2, [r3, #32]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	2200      	movs	r2, #0
 80030b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	1e5a      	subs	r2, r3, #1
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	68d2      	ldr	r2, [r2, #12]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	6892      	ldr	r2, [r2, #8]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3304      	adds	r3, #4
 80030de:	429a      	cmp	r2, r3
 80030e0:	d103      	bne.n	80030ea <xTaskResumeAll+0xce>
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	2200      	movs	r2, #0
 80030ee:	615a      	str	r2, [r3, #20]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	1e5a      	subs	r2, r3, #1
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f004 f853 	bl	80071a8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003106:	2201      	movs	r2, #1
 8003108:	409a      	lsls	r2, r3
 800310a:	4b48      	ldr	r3, [pc, #288]	@ (800322c <xTaskResumeAll+0x210>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4313      	orrs	r3, r2
 8003110:	4a46      	ldr	r2, [pc, #280]	@ (800322c <xTaskResumeAll+0x210>)
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003118:	4945      	ldr	r1, [pc, #276]	@ (8003230 <xTaskResumeAll+0x214>)
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	3304      	adds	r3, #4
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	60da      	str	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	3204      	adds	r2, #4
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	1d1a      	adds	r2, r3, #4
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	609a      	str	r2, [r3, #8]
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4a36      	ldr	r2, [pc, #216]	@ (8003230 <xTaskResumeAll+0x214>)
 8003158:	441a      	add	r2, r3
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	615a      	str	r2, [r3, #20]
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003162:	4933      	ldr	r1, [pc, #204]	@ (8003230 <xTaskResumeAll+0x214>)
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	69fa      	ldr	r2, [r7, #28]
 8003172:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003174:	1c59      	adds	r1, r3, #1
 8003176:	482e      	ldr	r0, [pc, #184]	@ (8003230 <xTaskResumeAll+0x214>)
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4403      	add	r3, r0
 8003182:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003188:	4b2a      	ldr	r3, [pc, #168]	@ (8003234 <xTaskResumeAll+0x218>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318e:	429a      	cmp	r2, r3
 8003190:	d904      	bls.n	800319c <xTaskResumeAll+0x180>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003192:	4a29      	ldr	r2, [pc, #164]	@ (8003238 <xTaskResumeAll+0x21c>)
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	2101      	movs	r1, #1
 8003198:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800319c:	4b22      	ldr	r3, [pc, #136]	@ (8003228 <xTaskResumeAll+0x20c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f47f af68 	bne.w	8003076 <xTaskResumeAll+0x5a>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <xTaskResumeAll+0x194>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80031ac:	f000 fc94 	bl	8003ad8 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80031b0:	4b22      	ldr	r3, [pc, #136]	@ (800323c <xTaskResumeAll+0x220>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d012      	beq.n	80031e2 <xTaskResumeAll+0x1c6>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80031bc:	f000 f878 	bl	80032b0 <xTaskIncrementTick>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d004      	beq.n	80031d0 <xTaskResumeAll+0x1b4>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80031c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003238 <xTaskResumeAll+0x21c>)
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	2101      	movs	r1, #1
 80031cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1ef      	bne.n	80031bc <xTaskResumeAll+0x1a0>

                            xPendedTicks = 0;
 80031dc:	4b17      	ldr	r3, [pc, #92]	@ (800323c <xTaskResumeAll+0x220>)
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80031e2:	4a15      	ldr	r2, [pc, #84]	@ (8003238 <xTaskResumeAll+0x21c>)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00b      	beq.n	8003206 <xTaskResumeAll+0x1ea>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80031ee:	2301      	movs	r3, #1
 80031f0:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80031f2:	4b10      	ldr	r3, [pc, #64]	@ (8003234 <xTaskResumeAll+0x218>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4b12      	ldr	r3, [pc, #72]	@ (8003240 <xTaskResumeAll+0x224>)
 80031f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003206:	f001 fa3b 	bl	8004680 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	4619      	mov	r1, r3
 800320e:	20d0      	movs	r0, #208	@ 0xd0
 8003210:	f003 fed2 	bl	8006fb8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8003214:	69bb      	ldr	r3, [r7, #24]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3720      	adds	r7, #32
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	200001c8 	.word	0x200001c8
 8003224:	200001a0 	.word	0x200001a0
 8003228:	20000160 	.word	0x20000160
 800322c:	200001a8 	.word	0x200001a8
 8003230:	200000cc 	.word	0x200000cc
 8003234:	200000c8 	.word	0x200000c8
 8003238:	200001b4 	.word	0x200001b4
 800323c:	200001b0 	.word	0x200001b0
 8003240:	e000ed04 	.word	0xe000ed04

08003244 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800324a:	4b06      	ldr	r3, [pc, #24]	@ (8003264 <xTaskGetTickCount+0x20>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	20d1      	movs	r0, #209	@ 0xd1
 8003254:	f003 feb0 	bl	8006fb8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003258:	687b      	ldr	r3, [r7, #4]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	200001a4 	.word	0x200001a4

08003268 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800326e:	f001 fac7 	bl	8004800 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003272:	2300      	movs	r3, #0
 8003274:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003276:	4b06      	ldr	r3, [pc, #24]	@ (8003290 <xTaskGetTickCountFromISR+0x28>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 800327c:	6839      	ldr	r1, [r7, #0]
 800327e:	20d2      	movs	r0, #210	@ 0xd2
 8003280:	f003 fe9a 	bl	8006fb8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003284:	683b      	ldr	r3, [r7, #0]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	200001a4 	.word	0x200001a4

08003294 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
    traceENTER_uxTaskGetNumberOfTasks();

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );
 8003298:	4b04      	ldr	r3, [pc, #16]	@ (80032ac <uxTaskGetNumberOfTasks+0x18>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4619      	mov	r1, r3
 800329e:	20d3      	movs	r0, #211	@ 0xd3
 80032a0:	f003 fe8a 	bl	8006fb8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxCurrentNumberOfTasks;
 80032a4:	4b01      	ldr	r3, [pc, #4]	@ (80032ac <uxTaskGetNumberOfTasks+0x18>)
 80032a6:	681b      	ldr	r3, [r3, #0]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	200001a0 	.word	0x200001a0

080032b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	@ 0x28
 80032b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80032b6:	2300      	movs	r3, #0
 80032b8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80032ba:	4b84      	ldr	r3, [pc, #528]	@ (80034cc <xTaskIncrementTick+0x21c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f040 80f5 	bne.w	80034ae <xTaskIncrementTick+0x1fe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032c4:	4b82      	ldr	r3, [pc, #520]	@ (80034d0 <xTaskIncrementTick+0x220>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3301      	adds	r3, #1
 80032ca:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80032cc:	4a80      	ldr	r2, [pc, #512]	@ (80034d0 <xTaskIncrementTick+0x220>)
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d123      	bne.n	8003320 <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 80032d8:	4b7e      	ldr	r3, [pc, #504]	@ (80034d4 <xTaskIncrementTick+0x224>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00d      	beq.n	80032fe <xTaskIncrementTick+0x4e>
    __asm volatile
 80032e2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80032e6:	b672      	cpsid	i
 80032e8:	f383 8811 	msr	BASEPRI, r3
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	b662      	cpsie	i
 80032f6:	607b      	str	r3, [r7, #4]
}
 80032f8:	bf00      	nop
 80032fa:	bf00      	nop
 80032fc:	e7fd      	b.n	80032fa <xTaskIncrementTick+0x4a>
 80032fe:	4b75      	ldr	r3, [pc, #468]	@ (80034d4 <xTaskIncrementTick+0x224>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	4b74      	ldr	r3, [pc, #464]	@ (80034d8 <xTaskIncrementTick+0x228>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a72      	ldr	r2, [pc, #456]	@ (80034d4 <xTaskIncrementTick+0x224>)
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	4a72      	ldr	r2, [pc, #456]	@ (80034d8 <xTaskIncrementTick+0x228>)
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4b72      	ldr	r3, [pc, #456]	@ (80034dc <xTaskIncrementTick+0x22c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3301      	adds	r3, #1
 8003318:	4a70      	ldr	r2, [pc, #448]	@ (80034dc <xTaskIncrementTick+0x22c>)
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	f000 fbdc 	bl	8003ad8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003320:	4b6f      	ldr	r3, [pc, #444]	@ (80034e0 <xTaskIncrementTick+0x230>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6a3a      	ldr	r2, [r7, #32]
 8003326:	429a      	cmp	r2, r3
 8003328:	f0c0 80ac 	bcc.w	8003484 <xTaskIncrementTick+0x1d4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800332c:	4b69      	ldr	r3, [pc, #420]	@ (80034d4 <xTaskIncrementTick+0x224>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d104      	bne.n	8003340 <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003336:	4b6a      	ldr	r3, [pc, #424]	@ (80034e0 <xTaskIncrementTick+0x230>)
 8003338:	f04f 32ff 	mov.w	r2, #4294967295
 800333c:	601a      	str	r2, [r3, #0]
                    break;
 800333e:	e0a1      	b.n	8003484 <xTaskIncrementTick+0x1d4>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003340:	4b64      	ldr	r3, [pc, #400]	@ (80034d4 <xTaskIncrementTick+0x224>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003350:	6a3a      	ldr	r2, [r7, #32]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	429a      	cmp	r2, r3
 8003356:	d203      	bcs.n	8003360 <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003358:	4a61      	ldr	r2, [pc, #388]	@ (80034e0 <xTaskIncrementTick+0x230>)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	6013      	str	r3, [r2, #0]
                        break;
 800335e:	e091      	b.n	8003484 <xTaskIncrementTick+0x1d4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	68d2      	ldr	r2, [r2, #12]
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	6892      	ldr	r2, [r2, #8]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	3304      	adds	r3, #4
 8003382:	429a      	cmp	r2, r3
 8003384:	d103      	bne.n	800338e <xTaskIncrementTick+0xde>
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2200      	movs	r2, #0
 8003392:	615a      	str	r2, [r3, #20]
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	1e5a      	subs	r2, r3, #1
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d01e      	beq.n	80033e4 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	6a12      	ldr	r2, [r2, #32]
 80033b4:	609a      	str	r2, [r3, #8]
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	69d2      	ldr	r2, [r2, #28]
 80033be:	605a      	str	r2, [r3, #4]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	3318      	adds	r3, #24
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d103      	bne.n	80033d4 <xTaskIncrementTick+0x124>
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	6a1a      	ldr	r2, [r3, #32]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	605a      	str	r2, [r3, #4]
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	2200      	movs	r2, #0
 80033d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	1e5a      	subs	r2, r3, #1
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f003 fede 	bl	80071a8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f0:	2201      	movs	r2, #1
 80033f2:	409a      	lsls	r2, r3
 80033f4:	4b3b      	ldr	r3, [pc, #236]	@ (80034e4 <xTaskIncrementTick+0x234>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	4a3a      	ldr	r2, [pc, #232]	@ (80034e4 <xTaskIncrementTick+0x234>)
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003402:	4939      	ldr	r1, [pc, #228]	@ (80034e8 <xTaskIncrementTick+0x238>)
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	3304      	adds	r3, #4
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	609a      	str	r2, [r3, #8]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	3204      	adds	r2, #4
 800342a:	605a      	str	r2, [r3, #4]
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	1d1a      	adds	r2, r3, #4
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4a29      	ldr	r2, [pc, #164]	@ (80034e8 <xTaskIncrementTick+0x238>)
 8003442:	441a      	add	r2, r3
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	615a      	str	r2, [r3, #20]
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800344c:	4926      	ldr	r1, [pc, #152]	@ (80034e8 <xTaskIncrementTick+0x238>)
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800345e:	1c59      	adds	r1, r3, #1
 8003460:	4821      	ldr	r0, [pc, #132]	@ (80034e8 <xTaskIncrementTick+0x238>)
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4403      	add	r3, r0
 800346c:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003472:	4b1e      	ldr	r3, [pc, #120]	@ (80034ec <xTaskIncrementTick+0x23c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003478:	429a      	cmp	r2, r3
 800347a:	f67f af57 	bls.w	800332c <xTaskIncrementTick+0x7c>
                            {
                                xSwitchRequired = pdTRUE;
 800347e:	2301      	movs	r3, #1
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003482:	e753      	b.n	800332c <xTaskIncrementTick+0x7c>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8003484:	4b19      	ldr	r3, [pc, #100]	@ (80034ec <xTaskIncrementTick+0x23c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800348a:	4917      	ldr	r1, [pc, #92]	@ (80034e8 <xTaskIncrementTick+0x238>)
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d901      	bls.n	80034a0 <xTaskIncrementTick+0x1f0>
                {
                    xSwitchRequired = pdTRUE;
 800349c:	2301      	movs	r3, #1
 800349e:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80034a0:	4b13      	ldr	r3, [pc, #76]	@ (80034f0 <xTaskIncrementTick+0x240>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d007      	beq.n	80034b8 <xTaskIncrementTick+0x208>
                {
                    xSwitchRequired = pdTRUE;
 80034a8:	2301      	movs	r3, #1
 80034aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ac:	e004      	b.n	80034b8 <xTaskIncrementTick+0x208>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80034ae:	4b11      	ldr	r3, [pc, #68]	@ (80034f4 <xTaskIncrementTick+0x244>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3301      	adds	r3, #1
 80034b4:	4a0f      	ldr	r2, [pc, #60]	@ (80034f4 <xTaskIncrementTick+0x244>)
 80034b6:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80034b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ba:	4619      	mov	r1, r3
 80034bc:	20db      	movs	r0, #219	@ 0xdb
 80034be:	f003 fd7b 	bl	8006fb8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3728      	adds	r7, #40	@ 0x28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	200001c8 	.word	0x200001c8
 80034d0:	200001a4 	.word	0x200001a4
 80034d4:	20000158 	.word	0x20000158
 80034d8:	2000015c 	.word	0x2000015c
 80034dc:	200001b8 	.word	0x200001b8
 80034e0:	200001c0 	.word	0x200001c0
 80034e4:	200001a8 	.word	0x200001a8
 80034e8:	200000cc 	.word	0x200000cc
 80034ec:	200000c8 	.word	0x200000c8
 80034f0:	200001b4 	.word	0x200001b4
 80034f4:	200001b0 	.word	0x200001b0

080034f8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80034fe:	4b2f      	ldr	r3, [pc, #188]	@ (80035bc <vTaskSwitchContext+0xc4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003506:	4b2e      	ldr	r3, [pc, #184]	@ (80035c0 <vTaskSwitchContext+0xc8>)
 8003508:	2201      	movs	r2, #1
 800350a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 800350c:	e051      	b.n	80035b2 <vTaskSwitchContext+0xba>
            xYieldPendings[ 0 ] = pdFALSE;
 800350e:	4b2c      	ldr	r3, [pc, #176]	@ (80035c0 <vTaskSwitchContext+0xc8>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003514:	4b2b      	ldr	r3, [pc, #172]	@ (80035c4 <vTaskSwitchContext+0xcc>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	fab3 f383 	clz	r3, r3
 8003520:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8003522:	7afb      	ldrb	r3, [r7, #11]
 8003524:	f1c3 031f 	rsb	r3, r3, #31
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	4927      	ldr	r1, [pc, #156]	@ (80035c8 <vTaskSwitchContext+0xd0>)
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10d      	bne.n	800355a <vTaskSwitchContext+0x62>
    __asm volatile
 800353e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003542:	b672      	cpsid	i
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	b662      	cpsie	i
 8003552:	607b      	str	r3, [r7, #4]
}
 8003554:	bf00      	nop
 8003556:	bf00      	nop
 8003558:	e7fd      	b.n	8003556 <vTaskSwitchContext+0x5e>
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4a18      	ldr	r2, [pc, #96]	@ (80035c8 <vTaskSwitchContext+0xd0>)
 8003566:	4413      	add	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	605a      	str	r2, [r3, #4]
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	3308      	adds	r3, #8
 800357c:	429a      	cmp	r2, r3
 800357e:	d103      	bne.n	8003588 <vTaskSwitchContext+0x90>
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	605a      	str	r2, [r3, #4]
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	4a0f      	ldr	r2, [pc, #60]	@ (80035cc <vTaskSwitchContext+0xd4>)
 8003590:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8003592:	4b0f      	ldr	r3, [pc, #60]	@ (80035d0 <vTaskSwitchContext+0xd8>)
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	4b0d      	ldr	r3, [pc, #52]	@ (80035cc <vTaskSwitchContext+0xd4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d102      	bne.n	80035a4 <vTaskSwitchContext+0xac>
 800359e:	f003 fd63 	bl	8007068 <SEGGER_SYSVIEW_OnIdle>
 80035a2:	e004      	b.n	80035ae <vTaskSwitchContext+0xb6>
 80035a4:	4b09      	ldr	r3, [pc, #36]	@ (80035cc <vTaskSwitchContext+0xd4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f003 fdbb 	bl	8007124 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80035ae:	4b07      	ldr	r3, [pc, #28]	@ (80035cc <vTaskSwitchContext+0xd4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
    }
 80035b2:	bf00      	nop
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	200001c8 	.word	0x200001c8
 80035c0:	200001b4 	.word	0x200001b4
 80035c4:	200001a8 	.word	0x200001a8
 80035c8:	200000cc 	.word	0x200000cc
 80035cc:	200000c8 	.word	0x200000c8
 80035d0:	200001c4 	.word	0x200001c4

080035d4 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10d      	bne.n	8003600 <vTaskPlaceOnEventList+0x2c>
    __asm volatile
 80035e4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80035e8:	b672      	cpsid	i
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	b662      	cpsie	i
 80035f8:	60fb      	str	r3, [r7, #12]
}
 80035fa:	bf00      	nop
 80035fc:	bf00      	nop
 80035fe:	e7fd      	b.n	80035fc <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003600:	4b08      	ldr	r3, [pc, #32]	@ (8003624 <vTaskPlaceOnEventList+0x50>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3318      	adds	r3, #24
 8003606:	4619      	mov	r1, r3
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7fe fde8 	bl	80021de <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800360e:	2101      	movs	r1, #1
 8003610:	6838      	ldr	r0, [r7, #0]
 8003612:	f000 fb53 	bl	8003cbc <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8003616:	20e1      	movs	r0, #225	@ 0xe1
 8003618:	f003 fc92 	bl	8006f40 <SEGGER_SYSVIEW_RecordEndCall>
}
 800361c:	bf00      	nop
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	200000c8 	.word	0x200000c8

08003628 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10d      	bne.n	8003656 <vTaskPlaceOnEventListRestricted+0x2e>
    __asm volatile
 800363a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800363e:	b672      	cpsid	i
 8003640:	f383 8811 	msr	BASEPRI, r3
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	b662      	cpsie	i
 800364e:	613b      	str	r3, [r7, #16]
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	e7fd      	b.n	8003652 <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <vTaskPlaceOnEventListRestricted+0x94>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	61da      	str	r2, [r3, #28]
 8003664:	4b15      	ldr	r3, [pc, #84]	@ (80036bc <vTaskPlaceOnEventListRestricted+0x94>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	6892      	ldr	r2, [r2, #8]
 800366c:	621a      	str	r2, [r3, #32]
 800366e:	4b13      	ldr	r3, [pc, #76]	@ (80036bc <vTaskPlaceOnEventListRestricted+0x94>)
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	3218      	adds	r2, #24
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	4b10      	ldr	r3, [pc, #64]	@ (80036bc <vTaskPlaceOnEventListRestricted+0x94>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f103 0218 	add.w	r2, r3, #24
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	4b0d      	ldr	r3, [pc, #52]	@ (80036bc <vTaskPlaceOnEventListRestricted+0x94>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	629a      	str	r2, [r3, #40]	@ 0x28
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 800369e:	f04f 33ff 	mov.w	r3, #4294967295
 80036a2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	68b8      	ldr	r0, [r7, #8]
 80036a8:	f000 fb08 	bl	8003cbc <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 80036ac:	20e3      	movs	r0, #227	@ 0xe3
 80036ae:	f003 fc47 	bl	8006f40 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80036b2:	bf00      	nop
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	200000c8 	.word	0x200000c8

080036c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	@ 0x28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10d      	bne.n	80036f2 <xTaskRemoveFromEventList+0x32>
    __asm volatile
 80036d6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80036da:	b672      	cpsid	i
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	b662      	cpsie	i
 80036ea:	60fb      	str	r3, [r7, #12]
}
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	e7fd      	b.n	80036ee <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	6a3a      	ldr	r2, [r7, #32]
 80036fe:	6a12      	ldr	r2, [r2, #32]
 8003700:	609a      	str	r2, [r3, #8]
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	6a3a      	ldr	r2, [r7, #32]
 8003708:	69d2      	ldr	r2, [r2, #28]
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	3318      	adds	r3, #24
 8003714:	429a      	cmp	r2, r3
 8003716:	d103      	bne.n	8003720 <xTaskRemoveFromEventList+0x60>
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	6a1a      	ldr	r2, [r3, #32]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	605a      	str	r2, [r3, #4]
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	2200      	movs	r2, #0
 8003724:	629a      	str	r2, [r3, #40]	@ 0x28
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	1e5a      	subs	r2, r3, #1
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003730:	4b4e      	ldr	r3, [pc, #312]	@ (800386c <xTaskRemoveFromEventList+0x1ac>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d164      	bne.n	8003802 <xTaskRemoveFromEventList+0x142>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	6a3a      	ldr	r2, [r7, #32]
 8003744:	68d2      	ldr	r2, [r2, #12]
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	6a3a      	ldr	r2, [r7, #32]
 800374e:	6892      	ldr	r2, [r2, #8]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	3304      	adds	r3, #4
 800375a:	429a      	cmp	r2, r3
 800375c:	d103      	bne.n	8003766 <xTaskRemoveFromEventList+0xa6>
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	2200      	movs	r2, #0
 800376a:	615a      	str	r2, [r3, #20]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	1e5a      	subs	r2, r3, #1
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	4618      	mov	r0, r3
 800377a:	f003 fd15 	bl	80071a8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003782:	2201      	movs	r2, #1
 8003784:	409a      	lsls	r2, r3
 8003786:	4b3a      	ldr	r3, [pc, #232]	@ (8003870 <xTaskRemoveFromEventList+0x1b0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4313      	orrs	r3, r2
 800378c:	4a38      	ldr	r2, [pc, #224]	@ (8003870 <xTaskRemoveFromEventList+0x1b0>)
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003794:	4937      	ldr	r1, [pc, #220]	@ (8003874 <xTaskRemoveFromEventList+0x1b4>)
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	3304      	adds	r3, #4
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	60da      	str	r2, [r3, #12]
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	6a3a      	ldr	r2, [r7, #32]
 80037ba:	3204      	adds	r2, #4
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	1d1a      	adds	r2, r3, #4
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	609a      	str	r2, [r3, #8]
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4a28      	ldr	r2, [pc, #160]	@ (8003874 <xTaskRemoveFromEventList+0x1b4>)
 80037d4:	441a      	add	r2, r3
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	615a      	str	r2, [r3, #20]
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037de:	4925      	ldr	r1, [pc, #148]	@ (8003874 <xTaskRemoveFromEventList+0x1b4>)
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6a3a      	ldr	r2, [r7, #32]
 80037ee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80037f0:	1c59      	adds	r1, r3, #1
 80037f2:	4820      	ldr	r0, [pc, #128]	@ (8003874 <xTaskRemoveFromEventList+0x1b4>)
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4403      	add	r3, r0
 80037fe:	6019      	str	r1, [r3, #0]
 8003800:	e01b      	b.n	800383a <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003802:	4b1d      	ldr	r3, [pc, #116]	@ (8003878 <xTaskRemoveFromEventList+0x1b8>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	61da      	str	r2, [r3, #28]
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	621a      	str	r2, [r3, #32]
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	6a3a      	ldr	r2, [r7, #32]
 800381c:	3218      	adds	r2, #24
 800381e:	605a      	str	r2, [r3, #4]
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	f103 0218 	add.w	r2, r3, #24
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	609a      	str	r2, [r3, #8]
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	4a12      	ldr	r2, [pc, #72]	@ (8003878 <xTaskRemoveFromEventList+0x1b8>)
 800382e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003830:	4b11      	ldr	r3, [pc, #68]	@ (8003878 <xTaskRemoveFromEventList+0x1b8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3301      	adds	r3, #1
 8003836:	4a10      	ldr	r2, [pc, #64]	@ (8003878 <xTaskRemoveFromEventList+0x1b8>)
 8003838:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800383e:	4b0f      	ldr	r3, [pc, #60]	@ (800387c <xTaskRemoveFromEventList+0x1bc>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003844:	429a      	cmp	r2, r3
 8003846:	d905      	bls.n	8003854 <xTaskRemoveFromEventList+0x194>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003848:	2301      	movs	r3, #1
 800384a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 800384c:	4b0c      	ldr	r3, [pc, #48]	@ (8003880 <xTaskRemoveFromEventList+0x1c0>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e001      	b.n	8003858 <xTaskRemoveFromEventList+0x198>
        }
        else
        {
            xReturn = pdFALSE;
 8003854:	2300      	movs	r3, #0
 8003856:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8003858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385a:	4619      	mov	r1, r3
 800385c:	20e4      	movs	r0, #228	@ 0xe4
 800385e:	f003 fbab 	bl	8006fb8 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003864:	4618      	mov	r0, r3
 8003866:	3728      	adds	r7, #40	@ 0x28
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	200001c8 	.word	0x200001c8
 8003870:	200001a8 	.word	0x200001a8
 8003874:	200000cc 	.word	0x200000cc
 8003878:	20000160 	.word	0x20000160
 800387c:	200000c8 	.word	0x200000c8
 8003880:	200001b4 	.word	0x200001b4

08003884 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800388c:	4b07      	ldr	r3, [pc, #28]	@ (80038ac <vTaskInternalSetTimeOutState+0x28>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003894:	4b06      	ldr	r3, [pc, #24]	@ (80038b0 <vTaskInternalSetTimeOutState+0x2c>)
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 800389c:	20e7      	movs	r0, #231	@ 0xe7
 800389e:	f003 fb4f 	bl	8006f40 <SEGGER_SYSVIEW_RecordEndCall>
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	200001b8 	.word	0x200001b8
 80038b0:	200001a4 	.word	0x200001a4

080038b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10d      	bne.n	80038e0 <xTaskCheckForTimeOut+0x2c>
    __asm volatile
 80038c4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80038c8:	b672      	cpsid	i
 80038ca:	f383 8811 	msr	BASEPRI, r3
 80038ce:	f3bf 8f6f 	isb	sy
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	b662      	cpsie	i
 80038d8:	613b      	str	r3, [r7, #16]
}
 80038da:	bf00      	nop
 80038dc:	bf00      	nop
 80038de:	e7fd      	b.n	80038dc <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10d      	bne.n	8003902 <xTaskCheckForTimeOut+0x4e>
    __asm volatile
 80038e6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80038ea:	b672      	cpsid	i
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	b662      	cpsie	i
 80038fa:	60fb      	str	r3, [r7, #12]
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	e7fd      	b.n	80038fe <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 8003902:	f000 fe87 	bl	8004614 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003906:	4b21      	ldr	r3, [pc, #132]	@ (800398c <xTaskCheckForTimeOut+0xd8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391e:	d102      	bne.n	8003926 <xTaskCheckForTimeOut+0x72>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003920:	2300      	movs	r3, #0
 8003922:	61fb      	str	r3, [r7, #28]
 8003924:	e026      	b.n	8003974 <xTaskCheckForTimeOut+0xc0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	4b19      	ldr	r3, [pc, #100]	@ (8003990 <xTaskCheckForTimeOut+0xdc>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d00a      	beq.n	8003948 <xTaskCheckForTimeOut+0x94>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	429a      	cmp	r2, r3
 800393a:	d305      	bcc.n	8003948 <xTaskCheckForTimeOut+0x94>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800393c:	2301      	movs	r3, #1
 800393e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	e015      	b.n	8003974 <xTaskCheckForTimeOut+0xc0>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	429a      	cmp	r2, r3
 8003950:	d20b      	bcs.n	800396a <xTaskCheckForTimeOut+0xb6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	1ad2      	subs	r2, r2, r3
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff ff90 	bl	8003884 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003964:	2300      	movs	r3, #0
 8003966:	61fb      	str	r3, [r7, #28]
 8003968:	e004      	b.n	8003974 <xTaskCheckForTimeOut+0xc0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003970:	2301      	movs	r3, #1
 8003972:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003974:	f000 fe84 	bl	8004680 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	4619      	mov	r1, r3
 800397c:	20e8      	movs	r0, #232	@ 0xe8
 800397e:	f003 fb1b 	bl	8006fb8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003982:	69fb      	ldr	r3, [r7, #28]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3720      	adds	r7, #32
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	200001a4 	.word	0x200001a4
 8003990:	200001b8 	.word	0x200001b8

08003994 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003998:	4b03      	ldr	r3, [pc, #12]	@ (80039a8 <vTaskMissedYield+0x14>)
 800399a:	2201      	movs	r2, #1
 800399c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 800399e:	20e9      	movs	r0, #233	@ 0xe9
 80039a0:	f003 face 	bl	8006f40 <SEGGER_SYSVIEW_RecordEndCall>
}
 80039a4:	bf00      	nop
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	200001b4 	.word	0x200001b4

080039ac <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80039b4:	f000 f852 	bl	8003a5c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80039b8:	4b06      	ldr	r3, [pc, #24]	@ (80039d4 <prvIdleTask+0x28>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d9f9      	bls.n	80039b4 <prvIdleTask+0x8>
            {
                taskYIELD();
 80039c0:	4b05      	ldr	r3, [pc, #20]	@ (80039d8 <prvIdleTask+0x2c>)
 80039c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80039d0:	e7f0      	b.n	80039b4 <prvIdleTask+0x8>
 80039d2:	bf00      	nop
 80039d4:	200000cc 	.word	0x200000cc
 80039d8:	e000ed04 	.word	0xe000ed04

080039dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039e2:	2300      	movs	r3, #0
 80039e4:	607b      	str	r3, [r7, #4]
 80039e6:	e00c      	b.n	8003a02 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4a12      	ldr	r2, [pc, #72]	@ (8003a3c <prvInitialiseTaskLists+0x60>)
 80039f4:	4413      	add	r3, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe fbc0 	bl	800217c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3301      	adds	r3, #1
 8003a00:	607b      	str	r3, [r7, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d9ef      	bls.n	80039e8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a08:	480d      	ldr	r0, [pc, #52]	@ (8003a40 <prvInitialiseTaskLists+0x64>)
 8003a0a:	f7fe fbb7 	bl	800217c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a0e:	480d      	ldr	r0, [pc, #52]	@ (8003a44 <prvInitialiseTaskLists+0x68>)
 8003a10:	f7fe fbb4 	bl	800217c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a14:	480c      	ldr	r0, [pc, #48]	@ (8003a48 <prvInitialiseTaskLists+0x6c>)
 8003a16:	f7fe fbb1 	bl	800217c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003a1a:	480c      	ldr	r0, [pc, #48]	@ (8003a4c <prvInitialiseTaskLists+0x70>)
 8003a1c:	f7fe fbae 	bl	800217c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003a20:	480b      	ldr	r0, [pc, #44]	@ (8003a50 <prvInitialiseTaskLists+0x74>)
 8003a22:	f7fe fbab 	bl	800217c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a26:	4b0b      	ldr	r3, [pc, #44]	@ (8003a54 <prvInitialiseTaskLists+0x78>)
 8003a28:	4a05      	ldr	r2, [pc, #20]	@ (8003a40 <prvInitialiseTaskLists+0x64>)
 8003a2a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a58 <prvInitialiseTaskLists+0x7c>)
 8003a2e:	4a05      	ldr	r2, [pc, #20]	@ (8003a44 <prvInitialiseTaskLists+0x68>)
 8003a30:	601a      	str	r2, [r3, #0]
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	200000cc 	.word	0x200000cc
 8003a40:	20000130 	.word	0x20000130
 8003a44:	20000144 	.word	0x20000144
 8003a48:	20000160 	.word	0x20000160
 8003a4c:	20000174 	.word	0x20000174
 8003a50:	2000018c 	.word	0x2000018c
 8003a54:	20000158 	.word	0x20000158
 8003a58:	2000015c 	.word	0x2000015c

08003a5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a62:	e019      	b.n	8003a98 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003a64:	f000 fdd6 	bl	8004614 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003a68:	4b10      	ldr	r3, [pc, #64]	@ (8003aac <prvCheckTasksWaitingTermination+0x50>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3304      	adds	r3, #4
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe fbed 	bl	8002254 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab0 <prvCheckTasksWaitingTermination+0x54>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	4a0b      	ldr	r2, [pc, #44]	@ (8003ab0 <prvCheckTasksWaitingTermination+0x54>)
 8003a82:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003a84:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab4 <prvCheckTasksWaitingTermination+0x58>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab4 <prvCheckTasksWaitingTermination+0x58>)
 8003a8c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003a8e:	f000 fdf7 	bl	8004680 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f810 	bl	8003ab8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a98:	4b06      	ldr	r3, [pc, #24]	@ (8003ab4 <prvCheckTasksWaitingTermination+0x58>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e1      	bne.n	8003a64 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000174 	.word	0x20000174
 8003ab0:	200001a0 	.word	0x200001a0
 8003ab4:	20000188 	.word	0x20000188

08003ab8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f001 f81f 	bl	8004b08 <vPortFree>
            vPortFree( pxTCB );
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f001 f81c 	bl	8004b08 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003adc:	4b0a      	ldr	r3, [pc, #40]	@ (8003b08 <prvResetNextTaskUnblockTime+0x30>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d104      	bne.n	8003af0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003ae6:	4b09      	ldr	r3, [pc, #36]	@ (8003b0c <prvResetNextTaskUnblockTime+0x34>)
 8003ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8003aec:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003aee:	e005      	b.n	8003afc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003af0:	4b05      	ldr	r3, [pc, #20]	@ (8003b08 <prvResetNextTaskUnblockTime+0x30>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a04      	ldr	r2, [pc, #16]	@ (8003b0c <prvResetNextTaskUnblockTime+0x34>)
 8003afa:	6013      	str	r3, [r2, #0]
}
 8003afc:	bf00      	nop
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	20000158 	.word	0x20000158
 8003b0c:	200001c0 	.word	0x200001c0

08003b10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8003b16:	4b0d      	ldr	r3, [pc, #52]	@ (8003b4c <xTaskGetSchedulerState+0x3c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d102      	bne.n	8003b24 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	607b      	str	r3, [r7, #4]
 8003b22:	e008      	b.n	8003b36 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003b24:	4b0a      	ldr	r3, [pc, #40]	@ (8003b50 <xTaskGetSchedulerState+0x40>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d102      	bne.n	8003b32 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	e001      	b.n	8003b36 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003b32:	2300      	movs	r3, #0
 8003b34:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	20f5      	movs	r0, #245	@ 0xf5
 8003b3c:	f003 fa3c 	bl	8006fb8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003b40:	687b      	ldr	r3, [r7, #4]
    }
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	200001ac 	.word	0x200001ac
 8003b50:	200001c8 	.word	0x200001c8

08003b54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 8098 	beq.w	8003c9c <xTaskPriorityDisinherit+0x148>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003b6c:	4b50      	ldr	r3, [pc, #320]	@ (8003cb0 <xTaskPriorityDisinherit+0x15c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d00d      	beq.n	8003b92 <xTaskPriorityDisinherit+0x3e>
    __asm volatile
 8003b76:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003b7a:	b672      	cpsid	i
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	b662      	cpsie	i
 8003b8a:	613b      	str	r3, [r7, #16]
}
 8003b8c:	bf00      	nop
 8003b8e:	bf00      	nop
 8003b90:	e7fd      	b.n	8003b8e <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10d      	bne.n	8003bb6 <xTaskPriorityDisinherit+0x62>
    __asm volatile
 8003b9a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003b9e:	b672      	cpsid	i
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	b662      	cpsie	i
 8003bae:	60fb      	str	r3, [r7, #12]
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop
 8003bb4:	e7fd      	b.n	8003bb2 <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bba:	1e5a      	subs	r2, r3, #1
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d067      	beq.n	8003c9c <xTaskPriorityDisinherit+0x148>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d163      	bne.n	8003c9c <xTaskPriorityDisinherit+0x148>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fe fb3b 	bl	8002254 <uxListRemove>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10a      	bne.n	8003bfa <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be8:	2201      	movs	r2, #1
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43da      	mvns	r2, r3
 8003bf0:	4b30      	ldr	r3, [pc, #192]	@ (8003cb4 <xTaskPriorityDisinherit+0x160>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	4a2f      	ldr	r2, [pc, #188]	@ (8003cb4 <xTaskPriorityDisinherit+0x160>)
 8003bf8:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c06:	f1c3 0205 	rsb	r2, r3, #5
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f003 fac9 	bl	80071a8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	409a      	lsls	r2, r3
 8003c1e:	4b25      	ldr	r3, [pc, #148]	@ (8003cb4 <xTaskPriorityDisinherit+0x160>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	4a23      	ldr	r2, [pc, #140]	@ (8003cb4 <xTaskPriorityDisinherit+0x160>)
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c2c:	4922      	ldr	r1, [pc, #136]	@ (8003cb8 <xTaskPriorityDisinherit+0x164>)
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	3304      	adds	r3, #4
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	609a      	str	r2, [r3, #8]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	60da      	str	r2, [r3, #12]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	3204      	adds	r2, #4
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	1d1a      	adds	r2, r3, #4
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	609a      	str	r2, [r3, #8]
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4a13      	ldr	r2, [pc, #76]	@ (8003cb8 <xTaskPriorityDisinherit+0x164>)
 8003c6c:	441a      	add	r2, r3
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	615a      	str	r2, [r3, #20]
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c76:	4910      	ldr	r1, [pc, #64]	@ (8003cb8 <xTaskPriorityDisinherit+0x164>)
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c88:	1c59      	adds	r1, r3, #1
 8003c8a:	480b      	ldr	r0, [pc, #44]	@ (8003cb8 <xTaskPriorityDisinherit+0x164>)
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4403      	add	r3, r0
 8003c96:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	20f7      	movs	r0, #247	@ 0xf7
 8003ca2:	f003 f989 	bl	8006fb8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003ca6:	69fb      	ldr	r3, [r7, #28]
    }
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3720      	adds	r7, #32
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	200000c8 	.word	0x200000c8
 8003cb4:	200001a8 	.word	0x200001a8
 8003cb8:	200000cc 	.word	0x200000cc

08003cbc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003cc6:	4b3d      	ldr	r3, [pc, #244]	@ (8003dbc <prvAddCurrentTaskToDelayedList+0x100>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003ccc:	4b3c      	ldr	r3, [pc, #240]	@ (8003dc0 <prvAddCurrentTaskToDelayedList+0x104>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003cd2:	4b3c      	ldr	r3, [pc, #240]	@ (8003dc4 <prvAddCurrentTaskToDelayedList+0x108>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fe fab8 	bl	8002254 <uxListRemove>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10b      	bne.n	8003d02 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003cea:	4b37      	ldr	r3, [pc, #220]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43da      	mvns	r2, r3
 8003cf8:	4b34      	ldr	r3, [pc, #208]	@ (8003dcc <prvAddCurrentTaskToDelayedList+0x110>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	4a33      	ldr	r2, [pc, #204]	@ (8003dcc <prvAddCurrentTaskToDelayedList+0x110>)
 8003d00:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d124      	bne.n	8003d54 <prvAddCurrentTaskToDelayedList+0x98>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d021      	beq.n	8003d54 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d10:	4b2f      	ldr	r3, [pc, #188]	@ (8003dd0 <prvAddCurrentTaskToDelayedList+0x114>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	4b2c      	ldr	r3, [pc, #176]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	609a      	str	r2, [r3, #8]
 8003d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	6892      	ldr	r2, [r2, #8]
 8003d26:	60da      	str	r2, [r3, #12]
 8003d28:	4b27      	ldr	r3, [pc, #156]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	3204      	adds	r2, #4
 8003d32:	605a      	str	r2, [r3, #4]
 8003d34:	4b24      	ldr	r3, [pc, #144]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	1d1a      	adds	r2, r3, #4
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	609a      	str	r2, [r3, #8]
 8003d3e:	4b22      	ldr	r3, [pc, #136]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a23      	ldr	r2, [pc, #140]	@ (8003dd0 <prvAddCurrentTaskToDelayedList+0x114>)
 8003d44:	615a      	str	r2, [r3, #20]
 8003d46:	4b22      	ldr	r3, [pc, #136]	@ (8003dd0 <prvAddCurrentTaskToDelayedList+0x114>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	4a20      	ldr	r2, [pc, #128]	@ (8003dd0 <prvAddCurrentTaskToDelayedList+0x114>)
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003d52:	e02e      	b.n	8003db2 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4413      	add	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d20d      	bcs.n	8003d88 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003d6c:	4b16      	ldr	r3, [pc, #88]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2104      	movs	r1, #4
 8003d72:	4618      	mov	r0, r3
 8003d74:	f003 fa5a 	bl	800722c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003d78:	4b13      	ldr	r3, [pc, #76]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	4619      	mov	r1, r3
 8003d80:	6978      	ldr	r0, [r7, #20]
 8003d82:	f7fe fa2c 	bl	80021de <vListInsert>
}
 8003d86:	e014      	b.n	8003db2 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8003d88:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2104      	movs	r1, #4
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f003 fa4c 	bl	800722c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003d94:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	69b8      	ldr	r0, [r7, #24]
 8003d9e:	f7fe fa1e 	bl	80021de <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003da2:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd4 <prvAddCurrentTaskToDelayedList+0x118>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d202      	bcs.n	8003db2 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8003dac:	4a09      	ldr	r2, [pc, #36]	@ (8003dd4 <prvAddCurrentTaskToDelayedList+0x118>)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6013      	str	r3, [r2, #0]
}
 8003db2:	bf00      	nop
 8003db4:	3720      	adds	r7, #32
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	200001a4 	.word	0x200001a4
 8003dc0:	20000158 	.word	0x20000158
 8003dc4:	2000015c 	.word	0x2000015c
 8003dc8:	200000c8 	.word	0x200000c8
 8003dcc:	200001a8 	.word	0x200001a8
 8003dd0:	2000018c 	.word	0x2000018c
 8003dd4:	200001c0 	.word	0x200001c0

08003dd8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003de2:	f000 fa7d 	bl	80042e0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003de6:	4b16      	ldr	r3, [pc, #88]	@ (8003e40 <xTimerCreateTimerTask+0x68>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00b      	beq.n	8003e06 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003dee:	4b15      	ldr	r3, [pc, #84]	@ (8003e44 <xTimerCreateTimerTask+0x6c>)
 8003df0:	9301      	str	r3, [sp, #4]
 8003df2:	2304      	movs	r3, #4
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	2300      	movs	r3, #0
 8003df8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003dfc:	4912      	ldr	r1, [pc, #72]	@ (8003e48 <xTimerCreateTimerTask+0x70>)
 8003dfe:	4813      	ldr	r0, [pc, #76]	@ (8003e4c <xTimerCreateTimerTask+0x74>)
 8003e00:	f7fe feaa 	bl	8002b58 <xTaskCreate>
 8003e04:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10d      	bne.n	8003e28 <xTimerCreateTimerTask+0x50>
    __asm volatile
 8003e0c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003e10:	b672      	cpsid	i
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	b662      	cpsie	i
 8003e20:	603b      	str	r3, [r7, #0]
}
 8003e22:	bf00      	nop
 8003e24:	bf00      	nop
 8003e26:	e7fd      	b.n	8003e24 <xTimerCreateTimerTask+0x4c>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8003e30:	f003 f8c2 	bl	8006fb8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003e34:	687b      	ldr	r3, [r7, #4]
    }
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	200001fc 	.word	0x200001fc
 8003e44:	20000200 	.word	0x20000200
 8003e48:	0800773c 	.word	0x0800773c
 8003e4c:	08003ef5 	.word	0x08003ef5

08003e50 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003e5c:	e008      	b.n	8003e70 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	4413      	add	r3, r2
 8003e66:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	699a      	ldr	r2, [r3, #24]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	18d1      	adds	r1, r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f8df 	bl	8004040 <prvInsertTimerInActiveList>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1ea      	bne.n	8003e5e <prvReloadTimer+0xe>
        }
    }
 8003e88:	bf00      	nop
 8003e8a:	bf00      	nop
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e9e:	4b14      	ldr	r3, [pc, #80]	@ (8003ef0 <prvProcessExpiredTimer+0x5c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fe f9d1 	bl	8002254 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f7ff ffc3 	bl	8003e50 <prvReloadTimer>
 8003eca:	e008      	b.n	8003ede <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ed2:	f023 0301 	bic.w	r3, r3, #1
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	4798      	blx	r3
    }
 8003ee6:	bf00      	nop
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	200001f4 	.word	0x200001f4

08003ef4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003efc:	f107 0308 	add.w	r3, r7, #8
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 f859 	bl	8003fb8 <prvGetNextExpireTime>
 8003f06:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f805 	bl	8003f1c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003f12:	f000 f8d7 	bl	80040c4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f16:	bf00      	nop
 8003f18:	e7f0      	b.n	8003efc <prvTimerTask+0x8>
	...

08003f1c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003f26:	f7ff f86b 	bl	8003000 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f2a:	f107 0308 	add.w	r3, r7, #8
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 f866 	bl	8004000 <prvSampleTimeNow>
 8003f34:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d130      	bne.n	8003f9e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10a      	bne.n	8003f58 <prvProcessTimerOrBlockTask+0x3c>
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d806      	bhi.n	8003f58 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003f4a:	f7ff f867 	bl	800301c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f4e:	68f9      	ldr	r1, [r7, #12]
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff ff9f 	bl	8003e94 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003f56:	e024      	b.n	8003fa2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d008      	beq.n	8003f70 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f5e:	4b13      	ldr	r3, [pc, #76]	@ (8003fac <prvProcessTimerOrBlockTask+0x90>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <prvProcessTimerOrBlockTask+0x50>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <prvProcessTimerOrBlockTask+0x52>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f70:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb0 <prvProcessTimerOrBlockTask+0x94>)
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	f7fe fcff 	bl	8002980 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003f82:	f7ff f84b 	bl	800301c <xTaskResumeAll>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8003f8c:	4b09      	ldr	r3, [pc, #36]	@ (8003fb4 <prvProcessTimerOrBlockTask+0x98>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
    }
 8003f9c:	e001      	b.n	8003fa2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003f9e:	f7ff f83d 	bl	800301c <xTaskResumeAll>
    }
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	200001f8 	.word	0x200001f8
 8003fb0:	200001fc 	.word	0x200001fc
 8003fb4:	e000ed04 	.word	0xe000ed04

08003fb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8003ffc <prvGetNextExpireTime+0x44>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <prvGetNextExpireTime+0x16>
 8003fca:	2201      	movs	r2, #1
 8003fcc:	e000      	b.n	8003fd0 <prvGetNextExpireTime+0x18>
 8003fce:	2200      	movs	r2, #0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fdc:	4b07      	ldr	r3, [pc, #28]	@ (8003ffc <prvGetNextExpireTime+0x44>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	e001      	b.n	8003fec <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003fec:	68fb      	ldr	r3, [r7, #12]
    }
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	200001f4 	.word	0x200001f4

08004000 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8004008:	f7ff f91c 	bl	8003244 <xTaskGetTickCount>
 800400c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800400e:	4b0b      	ldr	r3, [pc, #44]	@ (800403c <prvSampleTimeNow+0x3c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	429a      	cmp	r2, r3
 8004016:	d205      	bcs.n	8004024 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004018:	f000 f93c 	bl	8004294 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e002      	b.n	800402a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800402a:	4a04      	ldr	r2, [pc, #16]	@ (800403c <prvSampleTimeNow+0x3c>)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004030:	68fb      	ldr	r3, [r7, #12]
    }
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20000204 	.word	0x20000204

08004040 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	429a      	cmp	r2, r3
 8004064:	d812      	bhi.n	800408c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	1ad2      	subs	r2, r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	429a      	cmp	r2, r3
 8004072:	d302      	bcc.n	800407a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004074:	2301      	movs	r3, #1
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	e01b      	b.n	80040b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800407a:	4b10      	ldr	r3, [pc, #64]	@ (80040bc <prvInsertTimerInActiveList+0x7c>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3304      	adds	r3, #4
 8004082:	4619      	mov	r1, r3
 8004084:	4610      	mov	r0, r2
 8004086:	f7fe f8aa 	bl	80021de <vListInsert>
 800408a:	e012      	b.n	80040b2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d206      	bcs.n	80040a2 <prvInsertTimerInActiveList+0x62>
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d302      	bcc.n	80040a2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800409c:	2301      	movs	r3, #1
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	e007      	b.n	80040b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040a2:	4b07      	ldr	r3, [pc, #28]	@ (80040c0 <prvInsertTimerInActiveList+0x80>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3304      	adds	r3, #4
 80040aa:	4619      	mov	r1, r3
 80040ac:	4610      	mov	r0, r2
 80040ae:	f7fe f896 	bl	80021de <vListInsert>
            }
        }

        return xProcessTimerNow;
 80040b2:	697b      	ldr	r3, [r7, #20]
    }
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	200001f8 	.word	0x200001f8
 80040c0:	200001f4 	.word	0x200001f4

080040c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08a      	sub	sp, #40	@ 0x28
 80040c8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 80040ca:	1d3b      	adds	r3, r7, #4
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	605a      	str	r2, [r3, #4]
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80040d6:	e0cb      	b.n	8004270 <prvProcessReceivedCommands+0x1ac>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	da1b      	bge.n	8004116 <prvProcessReceivedCommands+0x52>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80040de:	1d3b      	adds	r3, r7, #4
 80040e0:	3304      	adds	r3, #4
 80040e2:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 80040e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10d      	bne.n	8004106 <prvProcessReceivedCommands+0x42>
    __asm volatile
 80040ea:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80040ee:	b672      	cpsid	i
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	b662      	cpsie	i
 80040fe:	61bb      	str	r3, [r7, #24]
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	e7fd      	b.n	8004102 <prvProcessReceivedCommands+0x3e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800410c:	6850      	ldr	r0, [r2, #4]
 800410e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004110:	6892      	ldr	r2, [r2, #8]
 8004112:	4611      	mov	r1, r2
 8004114:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	f2c0 80a9 	blt.w	8004270 <prvProcessReceivedCommands+0x1ac>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d004      	beq.n	8004134 <prvProcessReceivedCommands+0x70>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	3304      	adds	r3, #4
 800412e:	4618      	mov	r0, r3
 8004130:	f7fe f890 	bl	8002254 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004134:	463b      	mov	r3, r7
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff ff62 	bl	8004000 <prvSampleTimeNow>
 800413c:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3b01      	subs	r3, #1
 8004142:	2b08      	cmp	r3, #8
 8004144:	f200 8091 	bhi.w	800426a <prvProcessReceivedCommands+0x1a6>
 8004148:	a201      	add	r2, pc, #4	@ (adr r2, 8004150 <prvProcessReceivedCommands+0x8c>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004175 	.word	0x08004175
 8004154:	08004175 	.word	0x08004175
 8004158:	080041dd 	.word	0x080041dd
 800415c:	080041f1 	.word	0x080041f1
 8004160:	08004241 	.word	0x08004241
 8004164:	08004175 	.word	0x08004175
 8004168:	08004175 	.word	0x08004175
 800416c:	080041dd 	.word	0x080041dd
 8004170:	080041f1 	.word	0x080041f1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	b2da      	uxtb	r2, r3
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	18d1      	adds	r1, r2, r3
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	69fa      	ldr	r2, [r7, #28]
 8004192:	6a38      	ldr	r0, [r7, #32]
 8004194:	f7ff ff54 	bl	8004040 <prvInsertTimerInActiveList>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d067      	beq.n	800426e <prvProcessReceivedCommands+0x1aa>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d009      	beq.n	80041c0 <prvProcessReceivedCommands+0xfc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	4413      	add	r3, r2
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	4619      	mov	r1, r3
 80041b8:	6a38      	ldr	r0, [r7, #32]
 80041ba:	f7ff fe49 	bl	8003e50 <prvReloadTimer>
 80041be:	e008      	b.n	80041d2 <prvProcessReceivedCommands+0x10e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	6a38      	ldr	r0, [r7, #32]
 80041d8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80041da:	e048      	b.n	800426e <prvProcessReceivedCommands+0x1aa>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041e2:	f023 0301 	bic.w	r3, r3, #1
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80041ee:	e03f      	b.n	8004270 <prvProcessReceivedCommands+0x1ac>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10d      	bne.n	800422c <prvProcessReceivedCommands+0x168>
    __asm volatile
 8004210:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004214:	b672      	cpsid	i
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	b662      	cpsie	i
 8004224:	617b      	str	r3, [r7, #20]
}
 8004226:	bf00      	nop
 8004228:	bf00      	nop
 800422a:	e7fd      	b.n	8004228 <prvProcessReceivedCommands+0x164>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	699a      	ldr	r2, [r3, #24]
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	18d1      	adds	r1, r2, r3
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	6a38      	ldr	r0, [r7, #32]
 800423a:	f7ff ff01 	bl	8004040 <prvInsertTimerInActiveList>
                        break;
 800423e:	e017      	b.n	8004270 <prvProcessReceivedCommands+0x1ac>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d103      	bne.n	8004256 <prvProcessReceivedCommands+0x192>
                            {
                                vPortFree( pxTimer );
 800424e:	6a38      	ldr	r0, [r7, #32]
 8004250:	f000 fc5a 	bl	8004b08 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004254:	e00c      	b.n	8004270 <prvProcessReceivedCommands+0x1ac>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800425c:	f023 0301 	bic.w	r3, r3, #1
 8004260:	b2da      	uxtb	r2, r3
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004268:	e002      	b.n	8004270 <prvProcessReceivedCommands+0x1ac>

                    default:
                        /* Don't expect to get here. */
                        break;
 800426a:	bf00      	nop
 800426c:	e000      	b.n	8004270 <prvProcessReceivedCommands+0x1ac>
                        break;
 800426e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004270:	4b07      	ldr	r3, [pc, #28]	@ (8004290 <prvProcessReceivedCommands+0x1cc>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	1d39      	adds	r1, r7, #4
 8004276:	2200      	movs	r2, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f7fe f935 	bl	80024e8 <xQueueReceive>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	f47f af29 	bne.w	80040d8 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8004286:	bf00      	nop
 8004288:	bf00      	nop
 800428a:	3728      	adds	r7, #40	@ 0x28
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	200001fc 	.word	0x200001fc

08004294 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800429a:	e009      	b.n	80042b0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800429c:	4b0e      	ldr	r3, [pc, #56]	@ (80042d8 <prvSwitchTimerLists+0x44>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80042a6:	f04f 31ff 	mov.w	r1, #4294967295
 80042aa:	6838      	ldr	r0, [r7, #0]
 80042ac:	f7ff fdf2 	bl	8003e94 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042b0:	4b09      	ldr	r3, [pc, #36]	@ (80042d8 <prvSwitchTimerLists+0x44>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80042ba:	4b07      	ldr	r3, [pc, #28]	@ (80042d8 <prvSwitchTimerLists+0x44>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80042c0:	4b06      	ldr	r3, [pc, #24]	@ (80042dc <prvSwitchTimerLists+0x48>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a04      	ldr	r2, [pc, #16]	@ (80042d8 <prvSwitchTimerLists+0x44>)
 80042c6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80042c8:	4a04      	ldr	r2, [pc, #16]	@ (80042dc <prvSwitchTimerLists+0x48>)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6013      	str	r3, [r2, #0]
    }
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	200001f4 	.word	0x200001f4
 80042dc:	200001f8 	.word	0x200001f8

080042e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80042e4:	f000 f996 	bl	8004614 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80042e8:	4b12      	ldr	r3, [pc, #72]	@ (8004334 <prvCheckForValidListAndQueue+0x54>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d11d      	bne.n	800432c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80042f0:	4811      	ldr	r0, [pc, #68]	@ (8004338 <prvCheckForValidListAndQueue+0x58>)
 80042f2:	f7fd ff43 	bl	800217c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80042f6:	4811      	ldr	r0, [pc, #68]	@ (800433c <prvCheckForValidListAndQueue+0x5c>)
 80042f8:	f7fd ff40 	bl	800217c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80042fc:	4b10      	ldr	r3, [pc, #64]	@ (8004340 <prvCheckForValidListAndQueue+0x60>)
 80042fe:	4a0e      	ldr	r2, [pc, #56]	@ (8004338 <prvCheckForValidListAndQueue+0x58>)
 8004300:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004302:	4b10      	ldr	r3, [pc, #64]	@ (8004344 <prvCheckForValidListAndQueue+0x64>)
 8004304:	4a0d      	ldr	r2, [pc, #52]	@ (800433c <prvCheckForValidListAndQueue+0x5c>)
 8004306:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8004308:	2200      	movs	r2, #0
 800430a:	2110      	movs	r1, #16
 800430c:	2005      	movs	r0, #5
 800430e:	f7fe f86b 	bl	80023e8 <xQueueGenericCreate>
 8004312:	4603      	mov	r3, r0
 8004314:	4a07      	ldr	r2, [pc, #28]	@ (8004334 <prvCheckForValidListAndQueue+0x54>)
 8004316:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004318:	4b06      	ldr	r3, [pc, #24]	@ (8004334 <prvCheckForValidListAndQueue+0x54>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004320:	4b04      	ldr	r3, [pc, #16]	@ (8004334 <prvCheckForValidListAndQueue+0x54>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4908      	ldr	r1, [pc, #32]	@ (8004348 <prvCheckForValidListAndQueue+0x68>)
 8004326:	4618      	mov	r0, r3
 8004328:	f7fe fad8 	bl	80028dc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800432c:	f000 f9a8 	bl	8004680 <vPortExitCritical>
    }
 8004330:	bf00      	nop
 8004332:	bd80      	pop	{r7, pc}
 8004334:	200001fc 	.word	0x200001fc
 8004338:	200001cc 	.word	0x200001cc
 800433c:	200001e0 	.word	0x200001e0
 8004340:	200001f4 	.word	0x200001f4
 8004344:	200001f8 	.word	0x200001f8
 8004348:	08007744 	.word	0x08007744

0800434c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3b04      	subs	r3, #4
 800435c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004364:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3b04      	subs	r3, #4
 800436a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f023 0201 	bic.w	r2, r3, #1
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3b04      	subs	r3, #4
 800437a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800437c:	4a0c      	ldr	r2, [pc, #48]	@ (80043b0 <pxPortInitialiseStack+0x64>)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	3b14      	subs	r3, #20
 8004386:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3b04      	subs	r3, #4
 8004392:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f06f 0202 	mvn.w	r2, #2
 800439a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3b20      	subs	r3, #32
 80043a0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80043a2:	68fb      	ldr	r3, [r7, #12]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	080043b5 	.word	0x080043b5

080043b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80043ba:	2300      	movs	r3, #0
 80043bc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80043be:	4b15      	ldr	r3, [pc, #84]	@ (8004414 <prvTaskExitError+0x60>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c6:	d00d      	beq.n	80043e4 <prvTaskExitError+0x30>
    __asm volatile
 80043c8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80043cc:	b672      	cpsid	i
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	b662      	cpsie	i
 80043dc:	60fb      	str	r3, [r7, #12]
}
 80043de:	bf00      	nop
 80043e0:	bf00      	nop
 80043e2:	e7fd      	b.n	80043e0 <prvTaskExitError+0x2c>
    __asm volatile
 80043e4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80043e8:	b672      	cpsid	i
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	b662      	cpsie	i
 80043f8:	60bb      	str	r3, [r7, #8]
}
 80043fa:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80043fc:	bf00      	nop
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0fc      	beq.n	80043fe <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004404:	bf00      	nop
 8004406:	bf00      	nop
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20000010 	.word	0x20000010
	...

08004420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004420:	4b07      	ldr	r3, [pc, #28]	@ (8004440 <pxCurrentTCBConst2>)
 8004422:	6819      	ldr	r1, [r3, #0]
 8004424:	6808      	ldr	r0, [r1, #0]
 8004426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800442a:	f380 8809 	msr	PSP, r0
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f04f 0000 	mov.w	r0, #0
 8004436:	f380 8811 	msr	BASEPRI, r0
 800443a:	4770      	bx	lr
 800443c:	f3af 8000 	nop.w

08004440 <pxCurrentTCBConst2>:
 8004440:	200000c8 	.word	0x200000c8
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop

08004448 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004448:	4808      	ldr	r0, [pc, #32]	@ (800446c <prvPortStartFirstTask+0x24>)
 800444a:	6800      	ldr	r0, [r0, #0]
 800444c:	6800      	ldr	r0, [r0, #0]
 800444e:	f380 8808 	msr	MSP, r0
 8004452:	f04f 0000 	mov.w	r0, #0
 8004456:	f380 8814 	msr	CONTROL, r0
 800445a:	b662      	cpsie	i
 800445c:	b661      	cpsie	f
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	df00      	svc	0
 8004468:	bf00      	nop
 800446a:	0000      	.short	0x0000
 800446c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004470:	bf00      	nop
 8004472:	bf00      	nop

08004474 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08a      	sub	sp, #40	@ 0x28
 8004478:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800447a:	4b5c      	ldr	r3, [pc, #368]	@ (80045ec <xPortStartScheduler+0x178>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	332c      	adds	r3, #44	@ 0x2c
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a5a      	ldr	r2, [pc, #360]	@ (80045f0 <xPortStartScheduler+0x17c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00d      	beq.n	80044a8 <xPortStartScheduler+0x34>
    __asm volatile
 800448c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004490:	b672      	cpsid	i
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	b662      	cpsie	i
 80044a0:	61fb      	str	r3, [r7, #28]
}
 80044a2:	bf00      	nop
 80044a4:	bf00      	nop
 80044a6:	e7fd      	b.n	80044a4 <xPortStartScheduler+0x30>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80044a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044aa:	3338      	adds	r3, #56	@ 0x38
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a51      	ldr	r2, [pc, #324]	@ (80045f4 <xPortStartScheduler+0x180>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00d      	beq.n	80044d0 <xPortStartScheduler+0x5c>
    __asm volatile
 80044b4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80044b8:	b672      	cpsid	i
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	b662      	cpsie	i
 80044c8:	61bb      	str	r3, [r7, #24]
}
 80044ca:	bf00      	nop
 80044cc:	bf00      	nop
 80044ce:	e7fd      	b.n	80044cc <xPortStartScheduler+0x58>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044d4:	4b48      	ldr	r3, [pc, #288]	@ (80045f8 <xPortStartScheduler+0x184>)
 80044d6:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	22ff      	movs	r2, #255	@ 0xff
 80044e4:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	4b40      	ldr	r3, [pc, #256]	@ (80045fc <xPortStartScheduler+0x188>)
 80044fa:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80044fc:	4b3f      	ldr	r3, [pc, #252]	@ (80045fc <xPortStartScheduler+0x188>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10d      	bne.n	8004520 <xPortStartScheduler+0xac>
    __asm volatile
 8004504:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004508:	b672      	cpsid	i
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	b662      	cpsie	i
 8004518:	617b      	str	r3, [r7, #20]
}
 800451a:	bf00      	nop
 800451c:	bf00      	nop
 800451e:	e7fd      	b.n	800451c <xPortStartScheduler+0xa8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	43db      	mvns	r3, r3
 8004526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d015      	beq.n	800455a <xPortStartScheduler+0xe6>
    __asm volatile
 800452e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004532:	b672      	cpsid	i
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	b662      	cpsie	i
 8004542:	613b      	str	r3, [r7, #16]
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop
 8004548:	e7fd      	b.n	8004546 <xPortStartScheduler+0xd2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	3301      	adds	r3, #1
 800454e:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004550:	79fb      	ldrb	r3, [r7, #7]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	b2db      	uxtb	r3, r3
 8004558:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800455a:	79fb      	ldrb	r3, [r7, #7]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004562:	2b80      	cmp	r3, #128	@ 0x80
 8004564:	d0f1      	beq.n	800454a <xPortStartScheduler+0xd6>
        }

        if( ulImplementedPrioBits == 8 )
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b08      	cmp	r3, #8
 800456a:	d103      	bne.n	8004574 <xPortStartScheduler+0x100>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800456c:	4b24      	ldr	r3, [pc, #144]	@ (8004600 <xPortStartScheduler+0x18c>)
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	e004      	b.n	800457e <xPortStartScheduler+0x10a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f1c3 0307 	rsb	r3, r3, #7
 800457a:	4a21      	ldr	r2, [pc, #132]	@ (8004600 <xPortStartScheduler+0x18c>)
 800457c:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800457e:	4b20      	ldr	r3, [pc, #128]	@ (8004600 <xPortStartScheduler+0x18c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	4a1e      	ldr	r2, [pc, #120]	@ (8004600 <xPortStartScheduler+0x18c>)
 8004586:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004588:	4b1d      	ldr	r3, [pc, #116]	@ (8004600 <xPortStartScheduler+0x18c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004590:	4a1b      	ldr	r2, [pc, #108]	@ (8004600 <xPortStartScheduler+0x18c>)
 8004592:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	b2da      	uxtb	r2, r3
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800459c:	4b19      	ldr	r3, [pc, #100]	@ (8004604 <xPortStartScheduler+0x190>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a18      	ldr	r2, [pc, #96]	@ (8004604 <xPortStartScheduler+0x190>)
 80045a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045a6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80045a8:	4b16      	ldr	r3, [pc, #88]	@ (8004604 <xPortStartScheduler+0x190>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a15      	ldr	r2, [pc, #84]	@ (8004604 <xPortStartScheduler+0x190>)
 80045ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045b2:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80045b4:	4b14      	ldr	r3, [pc, #80]	@ (8004608 <xPortStartScheduler+0x194>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80045ba:	f000 f8f1 	bl	80047a0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80045be:	4b13      	ldr	r3, [pc, #76]	@ (800460c <xPortStartScheduler+0x198>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80045c4:	f000 f910 	bl	80047e8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045c8:	4b11      	ldr	r3, [pc, #68]	@ (8004610 <xPortStartScheduler+0x19c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a10      	ldr	r2, [pc, #64]	@ (8004610 <xPortStartScheduler+0x19c>)
 80045ce:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80045d2:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80045d4:	f7ff ff38 	bl	8004448 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80045d8:	f7fe ff8e 	bl	80034f8 <vTaskSwitchContext>
    prvTaskExitError();
 80045dc:	f7ff feea 	bl	80043b4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3728      	adds	r7, #40	@ 0x28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	e000ed08 	.word	0xe000ed08
 80045f0:	08004421 	.word	0x08004421
 80045f4:	080046e1 	.word	0x080046e1
 80045f8:	e000e400 	.word	0xe000e400
 80045fc:	20000208 	.word	0x20000208
 8004600:	2000020c 	.word	0x2000020c
 8004604:	e000ed20 	.word	0xe000ed20
 8004608:	e000ed1c 	.word	0xe000ed1c
 800460c:	20000010 	.word	0x20000010
 8004610:	e000ef34 	.word	0xe000ef34

08004614 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
    __asm volatile
 800461a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800461e:	b672      	cpsid	i
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	b662      	cpsie	i
 800462e:	607b      	str	r3, [r7, #4]
}
 8004630:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004632:	4b11      	ldr	r3, [pc, #68]	@ (8004678 <vPortEnterCritical+0x64>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3301      	adds	r3, #1
 8004638:	4a0f      	ldr	r2, [pc, #60]	@ (8004678 <vPortEnterCritical+0x64>)
 800463a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800463c:	4b0e      	ldr	r3, [pc, #56]	@ (8004678 <vPortEnterCritical+0x64>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d112      	bne.n	800466a <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004644:	4b0d      	ldr	r3, [pc, #52]	@ (800467c <vPortEnterCritical+0x68>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00d      	beq.n	800466a <vPortEnterCritical+0x56>
    __asm volatile
 800464e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004652:	b672      	cpsid	i
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	b662      	cpsie	i
 8004662:	603b      	str	r3, [r7, #0]
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop
 8004668:	e7fd      	b.n	8004666 <vPortEnterCritical+0x52>
    }
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	20000010 	.word	0x20000010
 800467c:	e000ed04 	.word	0xe000ed04

08004680 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004686:	4b13      	ldr	r3, [pc, #76]	@ (80046d4 <vPortExitCritical+0x54>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10d      	bne.n	80046aa <vPortExitCritical+0x2a>
    __asm volatile
 800468e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004692:	b672      	cpsid	i
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	b662      	cpsie	i
 80046a2:	607b      	str	r3, [r7, #4]
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
 80046a8:	e7fd      	b.n	80046a6 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 80046aa:	4b0a      	ldr	r3, [pc, #40]	@ (80046d4 <vPortExitCritical+0x54>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	4a08      	ldr	r2, [pc, #32]	@ (80046d4 <vPortExitCritical+0x54>)
 80046b2:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80046b4:	4b07      	ldr	r3, [pc, #28]	@ (80046d4 <vPortExitCritical+0x54>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d105      	bne.n	80046c8 <vPortExitCritical+0x48>
 80046bc:	2300      	movs	r3, #0
 80046be:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80046c6:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	20000010 	.word	0x20000010
	...

080046e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80046e0:	f3ef 8009 	mrs	r0, PSP
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	4b15      	ldr	r3, [pc, #84]	@ (8004740 <pxCurrentTCBConst>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	f01e 0f10 	tst.w	lr, #16
 80046f0:	bf08      	it	eq
 80046f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fa:	6010      	str	r0, [r2, #0]
 80046fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004700:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8004704:	b672      	cpsid	i
 8004706:	f380 8811 	msr	BASEPRI, r0
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	b662      	cpsie	i
 8004714:	f7fe fef0 	bl	80034f8 <vTaskSwitchContext>
 8004718:	f04f 0000 	mov.w	r0, #0
 800471c:	f380 8811 	msr	BASEPRI, r0
 8004720:	bc09      	pop	{r0, r3}
 8004722:	6819      	ldr	r1, [r3, #0]
 8004724:	6808      	ldr	r0, [r1, #0]
 8004726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472a:	f01e 0f10 	tst.w	lr, #16
 800472e:	bf08      	it	eq
 8004730:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004734:	f380 8809 	msr	PSP, r0
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop

08004740 <pxCurrentTCBConst>:
 8004740:	200000c8 	.word	0x200000c8
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop

08004748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
    __asm volatile
 800474e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004752:	b672      	cpsid	i
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	b662      	cpsie	i
 8004762:	607b      	str	r3, [r7, #4]
}
 8004764:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004766:	f002 fb71 	bl	8006e4c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800476a:	f7fe fda1 	bl	80032b0 <xTaskIncrementTick>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d006      	beq.n	8004782 <SysTick_Handler+0x3a>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8004774:	f002 fbc8 	bl	8006f08 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004778:	4b08      	ldr	r3, [pc, #32]	@ (800479c <SysTick_Handler+0x54>)
 800477a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	e001      	b.n	8004786 <SysTick_Handler+0x3e>
        }
        else
        {
            traceISR_EXIT();
 8004782:	f002 fba5 	bl	8006ed0 <SEGGER_SYSVIEW_RecordExitISR>
 8004786:	2300      	movs	r3, #0
 8004788:	603b      	str	r3, [r7, #0]
    __asm volatile
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	f383 8811 	msr	BASEPRI, r3
}
 8004790:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004792:	bf00      	nop
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	e000ed04 	.word	0xe000ed04

080047a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047a4:	4b0b      	ldr	r3, [pc, #44]	@ (80047d4 <vPortSetupTimerInterrupt+0x34>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047aa:	4b0b      	ldr	r3, [pc, #44]	@ (80047d8 <vPortSetupTimerInterrupt+0x38>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047b0:	4b0a      	ldr	r3, [pc, #40]	@ (80047dc <vPortSetupTimerInterrupt+0x3c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a0a      	ldr	r2, [pc, #40]	@ (80047e0 <vPortSetupTimerInterrupt+0x40>)
 80047b6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ba:	099b      	lsrs	r3, r3, #6
 80047bc:	4a09      	ldr	r2, [pc, #36]	@ (80047e4 <vPortSetupTimerInterrupt+0x44>)
 80047be:	3b01      	subs	r3, #1
 80047c0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047c2:	4b04      	ldr	r3, [pc, #16]	@ (80047d4 <vPortSetupTimerInterrupt+0x34>)
 80047c4:	2207      	movs	r2, #7
 80047c6:	601a      	str	r2, [r3, #0]
}
 80047c8:	bf00      	nop
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	e000e010 	.word	0xe000e010
 80047d8:	e000e018 	.word	0xe000e018
 80047dc:	20000000 	.word	0x20000000
 80047e0:	10624dd3 	.word	0x10624dd3
 80047e4:	e000e014 	.word	0xe000e014

080047e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80047e8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80047f8 <vPortEnableVFP+0x10>
 80047ec:	6801      	ldr	r1, [r0, #0]
 80047ee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80047f2:	6001      	str	r1, [r0, #0]
 80047f4:	4770      	bx	lr
 80047f6:	0000      	.short	0x0000
 80047f8:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80047fc:	bf00      	nop
 80047fe:	bf00      	nop

08004800 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004806:	f3ef 8305 	mrs	r3, IPSR
 800480a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b0f      	cmp	r3, #15
 8004810:	d917      	bls.n	8004842 <vPortValidateInterruptPriority+0x42>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004812:	4a1a      	ldr	r2, [pc, #104]	@ (800487c <vPortValidateInterruptPriority+0x7c>)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800481c:	4b18      	ldr	r3, [pc, #96]	@ (8004880 <vPortValidateInterruptPriority+0x80>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	7afa      	ldrb	r2, [r7, #11]
 8004822:	429a      	cmp	r2, r3
 8004824:	d20d      	bcs.n	8004842 <vPortValidateInterruptPriority+0x42>
    __asm volatile
 8004826:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800482a:	b672      	cpsid	i
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	b662      	cpsie	i
 800483a:	607b      	str	r3, [r7, #4]
}
 800483c:	bf00      	nop
 800483e:	bf00      	nop
 8004840:	e7fd      	b.n	800483e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004842:	4b10      	ldr	r3, [pc, #64]	@ (8004884 <vPortValidateInterruptPriority+0x84>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800484a:	4b0f      	ldr	r3, [pc, #60]	@ (8004888 <vPortValidateInterruptPriority+0x88>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d90d      	bls.n	800486e <vPortValidateInterruptPriority+0x6e>
    __asm volatile
 8004852:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004856:	b672      	cpsid	i
 8004858:	f383 8811 	msr	BASEPRI, r3
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	b662      	cpsie	i
 8004866:	603b      	str	r3, [r7, #0]
}
 8004868:	bf00      	nop
 800486a:	bf00      	nop
 800486c:	e7fd      	b.n	800486a <vPortValidateInterruptPriority+0x6a>
    }
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	e000e3f0 	.word	0xe000e3f0
 8004880:	20000208 	.word	0x20000208
 8004884:	e000ed0c 	.word	0xe000ed0c
 8004888:	2000020c 	.word	0x2000020c

0800488c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08e      	sub	sp, #56	@ 0x38
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004894:	2300      	movs	r3, #0
 8004896:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d022      	beq.n	80048e4 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800489e:	2308      	movs	r3, #8
 80048a0:	43db      	mvns	r3, r3
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d81b      	bhi.n	80048e0 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80048a8:	2208      	movs	r2, #8
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d014      	beq.n	80048e4 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	f1c3 0308 	rsb	r3, r3, #8
 80048c4:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80048c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c8:	43db      	mvns	r3, r3
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d804      	bhi.n	80048da <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d4:	4413      	add	r3, r2
 80048d6:	607b      	str	r3, [r7, #4]
 80048d8:	e004      	b.n	80048e4 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	607b      	str	r3, [r7, #4]
 80048de:	e001      	b.n	80048e4 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80048e4:	f7fe fb8c 	bl	8003000 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80048e8:	4b80      	ldr	r3, [pc, #512]	@ (8004aec <pvPortMalloc+0x260>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80048f0:	f000 f98a 	bl	8004c08 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f2c0 80de 	blt.w	8004ab8 <pvPortMalloc+0x22c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 80da 	beq.w	8004ab8 <pvPortMalloc+0x22c>
 8004904:	4b7a      	ldr	r3, [pc, #488]	@ (8004af0 <pvPortMalloc+0x264>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	429a      	cmp	r2, r3
 800490c:	f200 80d4 	bhi.w	8004ab8 <pvPortMalloc+0x22c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004910:	4b78      	ldr	r3, [pc, #480]	@ (8004af4 <pvPortMalloc+0x268>)
 8004912:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8004914:	4b77      	ldr	r3, [pc, #476]	@ (8004af4 <pvPortMalloc+0x268>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800491a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800491c:	4a76      	ldr	r2, [pc, #472]	@ (8004af8 <pvPortMalloc+0x26c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d305      	bcc.n	800492e <pvPortMalloc+0xa2>
 8004922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004924:	4a75      	ldr	r2, [pc, #468]	@ (8004afc <pvPortMalloc+0x270>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d801      	bhi.n	800492e <pvPortMalloc+0xa2>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <pvPortMalloc+0xa4>
 800492e:	2300      	movs	r3, #0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d12d      	bne.n	8004990 <pvPortMalloc+0x104>
    __asm volatile
 8004934:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004938:	b672      	cpsid	i
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	b662      	cpsie	i
 8004948:	623b      	str	r3, [r7, #32]
}
 800494a:	bf00      	nop
 800494c:	bf00      	nop
 800494e:	e7fd      	b.n	800494c <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8004950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004952:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8004954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800495a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800495c:	4a66      	ldr	r2, [pc, #408]	@ (8004af8 <pvPortMalloc+0x26c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d305      	bcc.n	800496e <pvPortMalloc+0xe2>
 8004962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004964:	4a65      	ldr	r2, [pc, #404]	@ (8004afc <pvPortMalloc+0x270>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d801      	bhi.n	800496e <pvPortMalloc+0xe2>
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <pvPortMalloc+0xe4>
 800496e:	2300      	movs	r3, #0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10d      	bne.n	8004990 <pvPortMalloc+0x104>
    __asm volatile
 8004974:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004978:	b672      	cpsid	i
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	b662      	cpsie	i
 8004988:	61fb      	str	r3, [r7, #28]
}
 800498a:	bf00      	nop
 800498c:	bf00      	nop
 800498e:	e7fd      	b.n	800498c <pvPortMalloc+0x100>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8004990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	429a      	cmp	r2, r3
 8004998:	d903      	bls.n	80049a2 <pvPortMalloc+0x116>
 800499a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1d6      	bne.n	8004950 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80049a2:	4b52      	ldr	r3, [pc, #328]	@ (8004aec <pvPortMalloc+0x260>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049a8:	429a      	cmp	r2, r3
 80049aa:	f000 8085 	beq.w	8004ab8 <pvPortMalloc+0x22c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80049ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2208      	movs	r2, #8
 80049b4:	4413      	add	r3, r2
 80049b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80049b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ba:	4a4f      	ldr	r2, [pc, #316]	@ (8004af8 <pvPortMalloc+0x26c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d305      	bcc.n	80049cc <pvPortMalloc+0x140>
 80049c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c2:	4a4e      	ldr	r2, [pc, #312]	@ (8004afc <pvPortMalloc+0x270>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d801      	bhi.n	80049cc <pvPortMalloc+0x140>
 80049c8:	2301      	movs	r3, #1
 80049ca:	e000      	b.n	80049ce <pvPortMalloc+0x142>
 80049cc:	2300      	movs	r3, #0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10d      	bne.n	80049ee <pvPortMalloc+0x162>
    __asm volatile
 80049d2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80049d6:	b672      	cpsid	i
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	b662      	cpsie	i
 80049e6:	61bb      	str	r3, [r7, #24]
}
 80049e8:	bf00      	nop
 80049ea:	bf00      	nop
 80049ec:	e7fd      	b.n	80049ea <pvPortMalloc+0x15e>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f4:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80049f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d90d      	bls.n	8004a1c <pvPortMalloc+0x190>
    __asm volatile
 8004a00:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004a04:	b672      	cpsid	i
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	b662      	cpsie	i
 8004a14:	617b      	str	r3, [r7, #20]
}
 8004a16:	bf00      	nop
 8004a18:	bf00      	nop
 8004a1a:	e7fd      	b.n	8004a18 <pvPortMalloc+0x18c>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	1ad2      	subs	r2, r2, r3
 8004a24:	2308      	movs	r3, #8
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d926      	bls.n	8004a7a <pvPortMalloc+0x1ee>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4413      	add	r3, r2
 8004a32:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00d      	beq.n	8004a5a <pvPortMalloc+0x1ce>
    __asm volatile
 8004a3e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004a42:	b672      	cpsid	i
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	b662      	cpsie	i
 8004a52:	613b      	str	r3, [r7, #16]
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop
 8004a58:	e7fd      	b.n	8004a56 <pvPortMalloc+0x1ca>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	1ad2      	subs	r2, r2, r3
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a72:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8004a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a78:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8004af0 <pvPortMalloc+0x264>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	4a1a      	ldr	r2, [pc, #104]	@ (8004af0 <pvPortMalloc+0x264>)
 8004a86:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a88:	4b19      	ldr	r3, [pc, #100]	@ (8004af0 <pvPortMalloc+0x264>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8004b00 <pvPortMalloc+0x274>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d203      	bcs.n	8004a9c <pvPortMalloc+0x210>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a94:	4b16      	ldr	r3, [pc, #88]	@ (8004af0 <pvPortMalloc+0x264>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a19      	ldr	r2, [pc, #100]	@ (8004b00 <pvPortMalloc+0x274>)
 8004a9a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004aae:	4b15      	ldr	r3, [pc, #84]	@ (8004b04 <pvPortMalloc+0x278>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	4a13      	ldr	r2, [pc, #76]	@ (8004b04 <pvPortMalloc+0x278>)
 8004ab6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004ab8:	f7fe fab0 	bl	800301c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00d      	beq.n	8004ae2 <pvPortMalloc+0x256>
    __asm volatile
 8004ac6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004aca:	b672      	cpsid	i
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	b662      	cpsie	i
 8004ada:	60fb      	str	r3, [r7, #12]
}
 8004adc:	bf00      	nop
 8004ade:	bf00      	nop
 8004ae0:	e7fd      	b.n	8004ade <pvPortMalloc+0x252>
    return pvReturn;
 8004ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3738      	adds	r7, #56	@ 0x38
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	2000ba18 	.word	0x2000ba18
 8004af0:	2000ba1c 	.word	0x2000ba1c
 8004af4:	2000ba10 	.word	0x2000ba10
 8004af8:	20000210 	.word	0x20000210
 8004afc:	2000ba0f 	.word	0x2000ba0f
 8004b00:	2000ba20 	.word	0x2000ba20
 8004b04:	2000ba24 	.word	0x2000ba24

08004b08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d06a      	beq.n	8004bf0 <vPortFree+0xe8>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	425b      	negs	r3, r3
 8004b1e:	69fa      	ldr	r2, [r7, #28]
 8004b20:	4413      	add	r3, r2
 8004b22:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	4a33      	ldr	r2, [pc, #204]	@ (8004bf8 <vPortFree+0xf0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d305      	bcc.n	8004b3c <vPortFree+0x34>
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	4a32      	ldr	r2, [pc, #200]	@ (8004bfc <vPortFree+0xf4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d801      	bhi.n	8004b3c <vPortFree+0x34>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <vPortFree+0x36>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10d      	bne.n	8004b5e <vPortFree+0x56>
    __asm volatile
 8004b42:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004b46:	b672      	cpsid	i
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	b662      	cpsie	i
 8004b56:	617b      	str	r3, [r7, #20]
}
 8004b58:	bf00      	nop
 8004b5a:	bf00      	nop
 8004b5c:	e7fd      	b.n	8004b5a <vPortFree+0x52>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	db0d      	blt.n	8004b82 <vPortFree+0x7a>
    __asm volatile
 8004b66:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004b6a:	b672      	cpsid	i
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	b662      	cpsie	i
 8004b7a:	613b      	str	r3, [r7, #16]
}
 8004b7c:	bf00      	nop
 8004b7e:	bf00      	nop
 8004b80:	e7fd      	b.n	8004b7e <vPortFree+0x76>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00d      	beq.n	8004ba6 <vPortFree+0x9e>
    __asm volatile
 8004b8a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004b8e:	b672      	cpsid	i
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	b662      	cpsie	i
 8004b9e:	60fb      	str	r3, [r7, #12]
}
 8004ba0:	bf00      	nop
 8004ba2:	bf00      	nop
 8004ba4:	e7fd      	b.n	8004ba2 <vPortFree+0x9a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	0fdb      	lsrs	r3, r3, #31
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d01c      	beq.n	8004bf0 <vPortFree+0xe8>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d118      	bne.n	8004bf0 <vPortFree+0xe8>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8004bca:	f7fe fa19 	bl	8003000 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c00 <vPortFree+0xf8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	4a09      	ldr	r2, [pc, #36]	@ (8004c00 <vPortFree+0xf8>)
 8004bda:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bdc:	69b8      	ldr	r0, [r7, #24]
 8004bde:	f000 f86d 	bl	8004cbc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004be2:	4b08      	ldr	r3, [pc, #32]	@ (8004c04 <vPortFree+0xfc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3301      	adds	r3, #1
 8004be8:	4a06      	ldr	r2, [pc, #24]	@ (8004c04 <vPortFree+0xfc>)
 8004bea:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004bec:	f7fe fa16 	bl	800301c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004bf0:	bf00      	nop
 8004bf2:	3720      	adds	r7, #32
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	20000210 	.word	0x20000210
 8004bfc:	2000ba0f 	.word	0x2000ba0f
 8004c00:	2000ba1c 	.word	0x2000ba1c
 8004c04:	2000ba28 	.word	0x2000ba28

08004c08 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c0e:	f44f 4338 	mov.w	r3, #47104	@ 0xb800
 8004c12:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004c14:	4b24      	ldr	r3, [pc, #144]	@ (8004ca8 <prvHeapInit+0xa0>)
 8004c16:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00c      	beq.n	8004c3c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	3307      	adds	r3, #7
 8004c26:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0307 	bic.w	r3, r3, #7
 8004c2e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca8 <prvHeapInit+0xa0>)
 8004c38:	4413      	add	r3, r2
 8004c3a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004cac <prvHeapInit+0xa4>)
 8004c40:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004c42:	4b1a      	ldr	r3, [pc, #104]	@ (8004cac <prvHeapInit+0xa4>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8004c50:	2208      	movs	r2, #8
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	1a9b      	subs	r3, r3, r2
 8004c56:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f023 0307 	bic.w	r3, r3, #7
 8004c5e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a13      	ldr	r2, [pc, #76]	@ (8004cb0 <prvHeapInit+0xa8>)
 8004c64:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004c66:	4b12      	ldr	r3, [pc, #72]	@ (8004cb0 <prvHeapInit+0xa8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8004c6e:	4b10      	ldr	r3, [pc, #64]	@ (8004cb0 <prvHeapInit+0xa8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	1ad2      	subs	r2, r2, r3
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004c84:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb0 <prvHeapInit+0xa8>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4a08      	ldr	r2, [pc, #32]	@ (8004cb4 <prvHeapInit+0xac>)
 8004c92:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	4a07      	ldr	r2, [pc, #28]	@ (8004cb8 <prvHeapInit+0xb0>)
 8004c9a:	6013      	str	r3, [r2, #0]
}
 8004c9c:	bf00      	nop
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	20000210 	.word	0x20000210
 8004cac:	2000ba10 	.word	0x2000ba10
 8004cb0:	2000ba18 	.word	0x2000ba18
 8004cb4:	2000ba20 	.word	0x2000ba20
 8004cb8:	2000ba1c 	.word	0x2000ba1c

08004cbc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004cc4:	4b37      	ldr	r3, [pc, #220]	@ (8004da4 <prvInsertBlockIntoFreeList+0xe8>)
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	e002      	b.n	8004cd0 <prvInsertBlockIntoFreeList+0x14>
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d8f7      	bhi.n	8004cca <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	4a31      	ldr	r2, [pc, #196]	@ (8004da4 <prvInsertBlockIntoFreeList+0xe8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d01a      	beq.n	8004d18 <prvInsertBlockIntoFreeList+0x5c>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	4a30      	ldr	r2, [pc, #192]	@ (8004da8 <prvInsertBlockIntoFreeList+0xec>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d305      	bcc.n	8004cf6 <prvInsertBlockIntoFreeList+0x3a>
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	4a2f      	ldr	r2, [pc, #188]	@ (8004dac <prvInsertBlockIntoFreeList+0xf0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d801      	bhi.n	8004cf6 <prvInsertBlockIntoFreeList+0x3a>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <prvInsertBlockIntoFreeList+0x3c>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10d      	bne.n	8004d18 <prvInsertBlockIntoFreeList+0x5c>
    __asm volatile
 8004cfc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004d00:	b672      	cpsid	i
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	b662      	cpsie	i
 8004d10:	60fb      	str	r3, [r7, #12]
}
 8004d12:	bf00      	nop
 8004d14:	bf00      	nop
 8004d16:	e7fd      	b.n	8004d14 <prvInsertBlockIntoFreeList+0x58>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4413      	add	r3, r2
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d108      	bne.n	8004d3c <prvInsertBlockIntoFreeList+0x80>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	441a      	add	r2, r3
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	441a      	add	r2, r3
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d118      	bne.n	8004d82 <prvInsertBlockIntoFreeList+0xc6>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	4b16      	ldr	r3, [pc, #88]	@ (8004db0 <prvInsertBlockIntoFreeList+0xf4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d00d      	beq.n	8004d78 <prvInsertBlockIntoFreeList+0xbc>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	441a      	add	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	e008      	b.n	8004d8a <prvInsertBlockIntoFreeList+0xce>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004d78:	4b0d      	ldr	r3, [pc, #52]	@ (8004db0 <prvInsertBlockIntoFreeList+0xf4>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	e003      	b.n	8004d8a <prvInsertBlockIntoFreeList+0xce>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d002      	beq.n	8004d98 <prvInsertBlockIntoFreeList+0xdc>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d98:	bf00      	nop
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	2000ba10 	.word	0x2000ba10
 8004da8:	20000210 	.word	0x20000210
 8004dac:	2000ba0f 	.word	0x2000ba0f
 8004db0:	2000ba18 	.word	0x2000ba18

08004db4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004db8:	4803      	ldr	r0, [pc, #12]	@ (8004dc8 <_cbSendSystemDesc+0x14>)
 8004dba:	f001 fff1 	bl	8006da0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004dbe:	4803      	ldr	r0, [pc, #12]	@ (8004dcc <_cbSendSystemDesc+0x18>)
 8004dc0:	f001 ffee 	bl	8006da0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004dc4:	bf00      	nop
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	0800774c 	.word	0x0800774c
 8004dcc:	08007788 	.word	0x08007788

08004dd0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004dd4:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004dd6:	6818      	ldr	r0, [r3, #0]
 8004dd8:	4b05      	ldr	r3, [pc, #20]	@ (8004df0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004dda:	6819      	ldr	r1, [r3, #0]
 8004ddc:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <SEGGER_SYSVIEW_Conf+0x24>)
 8004dde:	4a06      	ldr	r2, [pc, #24]	@ (8004df8 <SEGGER_SYSVIEW_Conf+0x28>)
 8004de0:	f001 fc64 	bl	80066ac <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004de4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004de8:	f001 fca4 	bl	8006734 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004dec:	bf00      	nop
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20000000 	.word	0x20000000
 8004df4:	08004db5 	.word	0x08004db5
 8004df8:	08007824 	.word	0x08007824

08004dfc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004e02:	2300      	movs	r3, #0
 8004e04:	607b      	str	r3, [r7, #4]
 8004e06:	e033      	b.n	8004e70 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004e08:	491e      	ldr	r1, [pc, #120]	@ (8004e84 <_cbSendTaskList+0x88>)
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	491a      	ldr	r1, [pc, #104]	@ (8004e84 <_cbSendTaskList+0x88>)
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	3304      	adds	r3, #4
 8004e28:	6819      	ldr	r1, [r3, #0]
 8004e2a:	4c16      	ldr	r4, [pc, #88]	@ (8004e84 <_cbSendTaskList+0x88>)
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4423      	add	r3, r4
 8004e38:	3308      	adds	r3, #8
 8004e3a:	681c      	ldr	r4, [r3, #0]
 8004e3c:	4d11      	ldr	r5, [pc, #68]	@ (8004e84 <_cbSendTaskList+0x88>)
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	442b      	add	r3, r5
 8004e4a:	330c      	adds	r3, #12
 8004e4c:	681d      	ldr	r5, [r3, #0]
 8004e4e:	4e0d      	ldr	r6, [pc, #52]	@ (8004e84 <_cbSendTaskList+0x88>)
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4433      	add	r3, r6
 8004e5c:	3310      	adds	r3, #16
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	462b      	mov	r3, r5
 8004e64:	4622      	mov	r2, r4
 8004e66:	f000 f8bd 	bl	8004fe4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	607b      	str	r3, [r7, #4]
 8004e70:	4b05      	ldr	r3, [pc, #20]	@ (8004e88 <_cbSendTaskList+0x8c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d3c6      	bcc.n	8004e08 <_cbSendTaskList+0xc>
  }
}
 8004e7a:	bf00      	nop
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e84:	2000ba2c 	.word	0x2000ba2c
 8004e88:	2000bacc 	.word	0x2000bacc

08004e8c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004e94:	f7fe f9e8 	bl	8003268 <xTaskGetTickCountFromISR>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	469a      	mov	sl, r3
 8004e9e:	4693      	mov	fp, r2
 8004ea0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004ea4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	f04f 0a00 	mov.w	sl, #0
 8004eb0:	f04f 0b00 	mov.w	fp, #0
 8004eb4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004eb8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004ebc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004ec0:	4652      	mov	r2, sl
 8004ec2:	465b      	mov	r3, fp
 8004ec4:	1a14      	subs	r4, r2, r0
 8004ec6:	eb63 0501 	sbc.w	r5, r3, r1
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	f04f 0300 	mov.w	r3, #0
 8004ed2:	00ab      	lsls	r3, r5, #2
 8004ed4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004ed8:	00a2      	lsls	r2, r4, #2
 8004eda:	4614      	mov	r4, r2
 8004edc:	461d      	mov	r5, r3
 8004ede:	eb14 0800 	adds.w	r8, r4, r0
 8004ee2:	eb45 0901 	adc.w	r9, r5, r1
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ef2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ef6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004efa:	4690      	mov	r8, r2
 8004efc:	4699      	mov	r9, r3
 8004efe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004f02:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004f06:	4610      	mov	r0, r2
 8004f08:	4619      	mov	r1, r3
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004f14 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004f22:	2205      	movs	r2, #5
 8004f24:	492b      	ldr	r1, [pc, #172]	@ (8004fd4 <SYSVIEW_AddTask+0xc0>)
 8004f26:	68b8      	ldr	r0, [r7, #8]
 8004f28:	f002 fb74 	bl	8007614 <memcmp>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d04b      	beq.n	8004fca <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004f32:	4b29      	ldr	r3, [pc, #164]	@ (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b07      	cmp	r3, #7
 8004f38:	d903      	bls.n	8004f42 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004f3a:	4828      	ldr	r0, [pc, #160]	@ (8004fdc <SYSVIEW_AddTask+0xc8>)
 8004f3c:	f002 fae0 	bl	8007500 <SEGGER_SYSVIEW_Warn>
    return;
 8004f40:	e044      	b.n	8004fcc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004f42:	4b25      	ldr	r3, [pc, #148]	@ (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	4926      	ldr	r1, [pc, #152]	@ (8004fe0 <SYSVIEW_AddTask+0xcc>)
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004f56:	4b20      	ldr	r3, [pc, #128]	@ (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	4921      	ldr	r1, [pc, #132]	@ (8004fe0 <SYSVIEW_AddTask+0xcc>)
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	3304      	adds	r3, #4
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	491b      	ldr	r1, [pc, #108]	@ (8004fe0 <SYSVIEW_AddTask+0xcc>)
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004f82:	4b15      	ldr	r3, [pc, #84]	@ (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	4916      	ldr	r1, [pc, #88]	@ (8004fe0 <SYSVIEW_AddTask+0xcc>)
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	330c      	adds	r3, #12
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004f98:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	4910      	ldr	r1, [pc, #64]	@ (8004fe0 <SYSVIEW_AddTask+0xcc>)
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	3310      	adds	r3, #16
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004fae:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	4a08      	ldr	r2, [pc, #32]	@ (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004fb6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f80e 	bl	8004fe4 <SYSVIEW_SendTaskInfo>
 8004fc8:	e000      	b.n	8004fcc <SYSVIEW_AddTask+0xb8>
    return;
 8004fca:	bf00      	nop

}
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	08007798 	.word	0x08007798
 8004fd8:	2000bacc 	.word	0x2000bacc
 8004fdc:	080077a0 	.word	0x080077a0
 8004fe0:	2000ba2c 	.word	0x2000ba2c

08004fe4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	@ 0x28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004ff2:	f107 0310 	add.w	r3, r7, #16
 8004ff6:	2218      	movs	r2, #24
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f002 fb1a 	bl	8007634 <memset>
  TaskInfo.TaskID     = TaskID;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8005010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005012:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005014:	f107 0310 	add.w	r3, r7, #16
 8005018:	4618      	mov	r0, r3
 800501a:	f001 fdc9 	bl	8006bb0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800501e:	bf00      	nop
 8005020:	3728      	adds	r7, #40	@ 0x28
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <__NVIC_EnableIRQ>:
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	4603      	mov	r3, r0
 8005030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005036:	2b00      	cmp	r3, #0
 8005038:	db0b      	blt.n	8005052 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	f003 021f 	and.w	r2, r3, #31
 8005040:	4907      	ldr	r1, [pc, #28]	@ (8005060 <__NVIC_EnableIRQ+0x38>)
 8005042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	2001      	movs	r0, #1
 800504a:	fa00 f202 	lsl.w	r2, r0, r2
 800504e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	e000e100 	.word	0xe000e100

08005064 <__NVIC_SetPriority>:
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	4603      	mov	r3, r0
 800506c:	6039      	str	r1, [r7, #0]
 800506e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005074:	2b00      	cmp	r3, #0
 8005076:	db0a      	blt.n	800508e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	b2da      	uxtb	r2, r3
 800507c:	490c      	ldr	r1, [pc, #48]	@ (80050b0 <__NVIC_SetPriority+0x4c>)
 800507e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005082:	0112      	lsls	r2, r2, #4
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	440b      	add	r3, r1
 8005088:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800508c:	e00a      	b.n	80050a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	b2da      	uxtb	r2, r3
 8005092:	4908      	ldr	r1, [pc, #32]	@ (80050b4 <__NVIC_SetPriority+0x50>)
 8005094:	79fb      	ldrb	r3, [r7, #7]
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	3b04      	subs	r3, #4
 800509c:	0112      	lsls	r2, r2, #4
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	440b      	add	r3, r1
 80050a2:	761a      	strb	r2, [r3, #24]
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	e000e100 	.word	0xe000e100
 80050b4:	e000ed00 	.word	0xe000ed00

080050b8 <_StartSysView>:

} _SVInfo = {0,0,1};



static void _StartSysView(void) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0

  int r;



  r = SEGGER_SYSVIEW_IsStarted();
 80050be:	f002 fa7b 	bl	80075b8 <SEGGER_SYSVIEW_IsStarted>
 80050c2:	6078      	str	r0, [r7, #4]

  if (r == 0) {
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <_StartSysView+0x16>

    SEGGER_SYSVIEW_Start();
 80050ca:	f001 fbf7 	bl	80068bc <SEGGER_SYSVIEW_Start>

  }

}
 80050ce:	bf00      	nop
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <_cbOnUARTRx>:



static void _cbOnUARTRx(U8 Data) {
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	71fb      	strb	r3, [r7, #7]

  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80050e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005114 <_cbOnUARTRx+0x3c>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d806      	bhi.n	80050f8 <_cbOnUARTRx+0x20>

    _SVInfo.NumBytesHelloRcvd++;
 80050ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005114 <_cbOnUARTRx+0x3c>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	3301      	adds	r3, #1
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	4b08      	ldr	r3, [pc, #32]	@ (8005114 <_cbOnUARTRx+0x3c>)
 80050f4:	701a      	strb	r2, [r3, #0]

    goto Done;
 80050f6:	e009      	b.n	800510c <_cbOnUARTRx+0x34>

  }

  _StartSysView();
 80050f8:	f7ff ffde 	bl	80050b8 <_StartSysView>

  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80050fc:	4b05      	ldr	r3, [pc, #20]	@ (8005114 <_cbOnUARTRx+0x3c>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	4618      	mov	r0, r3
 8005102:	1dfb      	adds	r3, r7, #7
 8005104:	2201      	movs	r2, #1
 8005106:	4619      	mov	r1, r3
 8005108:	f000 fb8e 	bl	8005828 <SEGGER_RTT_WriteDownBuffer>

Done:

  return;
 800510c:	bf00      	nop

}
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	20000014 	.word	0x20000014

08005118 <_cbOnUARTTx>:



static int _cbOnUARTTx(U8* pChar) {
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]

  int r;



  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005120:	4b14      	ldr	r3, [pc, #80]	@ (8005174 <_cbOnUARTTx+0x5c>)
 8005122:	785b      	ldrb	r3, [r3, #1]
 8005124:	2b03      	cmp	r3, #3
 8005126:	d80f      	bhi.n	8005148 <_cbOnUARTTx+0x30>

    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005128:	4b12      	ldr	r3, [pc, #72]	@ (8005174 <_cbOnUARTTx+0x5c>)
 800512a:	785b      	ldrb	r3, [r3, #1]
 800512c:	461a      	mov	r2, r3
 800512e:	4b12      	ldr	r3, [pc, #72]	@ (8005178 <_cbOnUARTTx+0x60>)
 8005130:	5c9a      	ldrb	r2, [r3, r2]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	701a      	strb	r2, [r3, #0]

    _SVInfo.NumBytesHelloSent++;
 8005136:	4b0f      	ldr	r3, [pc, #60]	@ (8005174 <_cbOnUARTTx+0x5c>)
 8005138:	785b      	ldrb	r3, [r3, #1]
 800513a:	3301      	adds	r3, #1
 800513c:	b2da      	uxtb	r2, r3
 800513e:	4b0d      	ldr	r3, [pc, #52]	@ (8005174 <_cbOnUARTTx+0x5c>)
 8005140:	705a      	strb	r2, [r3, #1]

    r = 1;
 8005142:	2301      	movs	r3, #1
 8005144:	60fb      	str	r3, [r7, #12]

    goto Done;
 8005146:	e00f      	b.n	8005168 <_cbOnUARTTx+0x50>

  }

  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005148:	4b0a      	ldr	r3, [pc, #40]	@ (8005174 <_cbOnUARTTx+0x5c>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fa0d 	bl	8005570 <SEGGER_RTT_ReadUpBufferNoLock>
 8005156:	4603      	mov	r3, r0
 8005158:	60fb      	str	r3, [r7, #12]

  if (r < 0) {  // Failed to read from up buffer?
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	da02      	bge.n	8005166 <_cbOnUARTTx+0x4e>

    r = 0;
 8005160:	2300      	movs	r3, #0
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	e000      	b.n	8005168 <_cbOnUARTTx+0x50>

  }

Done:
 8005166:	bf00      	nop

  return r;
 8005168:	68fb      	ldr	r3, [r7, #12]

}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	20000014 	.word	0x20000014
 8005178:	0800782c 	.word	0x0800782c

0800517c <SEGGER_UART_init>:



void SEGGER_UART_init(U32 baud)

{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]

HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005184:	4a04      	ldr	r2, [pc, #16]	@ (8005198 <SEGGER_UART_init+0x1c>)
 8005186:	4905      	ldr	r1, [pc, #20]	@ (800519c <SEGGER_UART_init+0x20>)
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f855 	bl	8005238 <HIF_UART_Init>

}
 800518e:	bf00      	nop
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	080050d9 	.word	0x080050d9
 800519c:	08005119 	.word	0x08005119

080051a0 <USART3_IRQHandler>:

*/

void USART3_IRQHandler(void);

void USART3_IRQHandler(void) {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0

  int r;



  UsartStatus = USART_SR;                              // Examine status register
 80051a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005220 <USART3_IRQHandler+0x80>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	60fb      	str	r3, [r7, #12]

  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d011      	beq.n	80051da <USART3_IRQHandler+0x3a>

    v = USART_RDR;                                      // Read data
 80051b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005224 <USART3_IRQHandler+0x84>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	71fb      	strb	r3, [r7, #7]

    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f003 030b 	and.w	r3, r3, #11
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d108      	bne.n	80051da <USART3_IRQHandler+0x3a>

      (void)v;                                         // Avoid warning in BTL

      if (_cbOnRx) {
 80051c8:	4b17      	ldr	r3, [pc, #92]	@ (8005228 <USART3_IRQHandler+0x88>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d004      	beq.n	80051da <USART3_IRQHandler+0x3a>

        _cbOnRx(v);
 80051d0:	4b15      	ldr	r3, [pc, #84]	@ (8005228 <USART3_IRQHandler+0x88>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	79fa      	ldrb	r2, [r7, #7]
 80051d6:	4610      	mov	r0, r2
 80051d8:	4798      	blx	r3

    }

  }

  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d01a      	beq.n	800521a <USART3_IRQHandler+0x7a>

    // Therefore, we need to check if the function pointer is valid.

    //

    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80051e4:	4b11      	ldr	r3, [pc, #68]	@ (800522c <USART3_IRQHandler+0x8c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d015      	beq.n	8005218 <USART3_IRQHandler+0x78>

      return;

    }

    r = _cbOnTx(&v);
 80051ec:	4b0f      	ldr	r3, [pc, #60]	@ (800522c <USART3_IRQHandler+0x8c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	1dfa      	adds	r2, r7, #7
 80051f2:	4610      	mov	r0, r2
 80051f4:	4798      	blx	r3
 80051f6:	60b8      	str	r0, [r7, #8]

    if (r == 0) {                          // No more characters to send ?
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <USART3_IRQHandler+0x6c>

      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80051fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005230 <USART3_IRQHandler+0x90>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a0b      	ldr	r2, [pc, #44]	@ (8005230 <USART3_IRQHandler+0x90>)
 8005204:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	e006      	b.n	800521a <USART3_IRQHandler+0x7a>

    } else {

      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800520c:	4b04      	ldr	r3, [pc, #16]	@ (8005220 <USART3_IRQHandler+0x80>)
 800520e:	681b      	ldr	r3, [r3, #0]

      USART_TDR = v;  // Start transmission by writing to data register
 8005210:	79fa      	ldrb	r2, [r7, #7]
 8005212:	4b08      	ldr	r3, [pc, #32]	@ (8005234 <USART3_IRQHandler+0x94>)
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	e000      	b.n	800521a <USART3_IRQHandler+0x7a>
      return;
 8005218:	bf00      	nop

    }

  }

}
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	4000481c 	.word	0x4000481c
 8005224:	40004824 	.word	0x40004824
 8005228:	2000bad0 	.word	0x2000bad0
 800522c:	2000bad4 	.word	0x2000bad4
 8005230:	40004800 	.word	0x40004800
 8005234:	40004828 	.word	0x40004828

08005238 <HIF_UART_Init>:

*       HIF_UART_Init()

*/

void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]

  //

  // Habilitar reloj de USART3 y puerto D

  RCC_APB1ENR |= (1 << 18);       // Habilitar reloj USART3 (APB1)
 8005244:	4b2e      	ldr	r3, [pc, #184]	@ (8005300 <HIF_UART_Init+0xc8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a2d      	ldr	r2, [pc, #180]	@ (8005300 <HIF_UART_Init+0xc8>)
 800524a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800524e:	6013      	str	r3, [r2, #0]

  RCC_AHB1ENR |= (1 << 3);        // Habilitar reloj GPIO D
 8005250:	4b2c      	ldr	r3, [pc, #176]	@ (8005304 <HIF_UART_Init+0xcc>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a2b      	ldr	r2, [pc, #172]	@ (8005304 <HIF_UART_Init+0xcc>)
 8005256:	f043 0308 	orr.w	r3, r3, #8
 800525a:	6013      	str	r3, [r2, #0]



  // Configurar los pines PD8 y PD9 para función alternativa AF7 (USART3)

  v  = GPIO_AFRH;
 800525c:	4b2a      	ldr	r3, [pc, #168]	@ (8005308 <HIF_UART_Init+0xd0>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	613b      	str	r3, [r7, #16]

  v &= ~((15UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (15UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005268:	613b      	str	r3, [r7, #16]

  v |=  ((7UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (7UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005270:	613b      	str	r3, [r7, #16]

  GPIO_AFRH = v;
 8005272:	4a25      	ldr	r2, [pc, #148]	@ (8005308 <HIF_UART_Init+0xd0>)
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	6013      	str	r3, [r2, #0]

  // Configure USART RX/TX pins for alternate function usage

  //

  v  = GPIO_MODER;
 8005278:	4b24      	ldr	r3, [pc, #144]	@ (800530c <HIF_UART_Init+0xd4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	613b      	str	r3, [r7, #16]

  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8005284:	613b      	str	r3, [r7, #16]

  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 800528c:	613b      	str	r3, [r7, #16]

  GPIO_MODER = v;
 800528e:	4a1f      	ldr	r2, [pc, #124]	@ (800530c <HIF_UART_Init+0xd4>)
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	6013      	str	r3, [r2, #0]

  // Set baudrate

  //

  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	617b      	str	r3, [r7, #20]

  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800529a:	4a1d      	ldr	r2, [pc, #116]	@ (8005310 <HIF_UART_Init+0xd8>)
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a2:	3301      	adds	r3, #1
 80052a4:	617b      	str	r3, [r7, #20]

  Div = Div / 2;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	085b      	lsrs	r3, r3, #1
 80052aa:	617b      	str	r3, [r7, #20]

  if (Div > 0xFFF) {
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052b2:	d302      	bcc.n	80052ba <HIF_UART_Init+0x82>

    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80052b4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80052b8:	617b      	str	r3, [r7, #20]

  }

  if (Div >= 1) {
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d004      	beq.n	80052ca <HIF_UART_Init+0x92>

    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	4a13      	ldr	r2, [pc, #76]	@ (8005314 <HIF_UART_Init+0xdc>)
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	6013      	str	r3, [r2, #0]

  // Initialize USART

  //

  USART_CR1 = 0
 80052ca:	4b13      	ldr	r3, [pc, #76]	@ (8005318 <HIF_UART_Init+0xe0>)
 80052cc:	f248 022d 	movw	r2, #32813	@ 0x802d
 80052d0:	601a      	str	r2, [r3, #0]

            | (1 <<  2)                         // RE     = 1; Receiver enabled

            ;

  USART_CR2 = 0
 80052d2:	4b12      	ldr	r3, [pc, #72]	@ (800531c <HIF_UART_Init+0xe4>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]

            | (0 << 12)                         // STOP = 00b; 1 stop bit

            ;

  USART_CR3 = 0
 80052d8:	4b11      	ldr	r3, [pc, #68]	@ (8005320 <HIF_UART_Init+0xe8>)
 80052da:	2280      	movs	r2, #128	@ 0x80
 80052dc:	601a      	str	r2, [r3, #0]

  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC

  //

  _cbOnRx = cbOnRx;
 80052de:	4a11      	ldr	r2, [pc, #68]	@ (8005324 <HIF_UART_Init+0xec>)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6013      	str	r3, [r2, #0]

  _cbOnTx = cbOnTx;
 80052e4:	4a10      	ldr	r2, [pc, #64]	@ (8005328 <HIF_UART_Init+0xf0>)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	6013      	str	r3, [r2, #0]

  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80052ea:	2106      	movs	r1, #6
 80052ec:	2027      	movs	r0, #39	@ 0x27
 80052ee:	f7ff feb9 	bl	8005064 <__NVIC_SetPriority>

  NVIC_EnableIRQ(USART_IRQn);
 80052f2:	2027      	movs	r0, #39	@ 0x27
 80052f4:	f7ff fe98 	bl	8005028 <__NVIC_EnableIRQ>

}
 80052f8:	bf00      	nop
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40023840 	.word	0x40023840
 8005304:	40023830 	.word	0x40023830
 8005308:	40020c24 	.word	0x40020c24
 800530c:	40020c00 	.word	0x40020c00
 8005310:	0501bd00 	.word	0x0501bd00
 8005314:	4000480c 	.word	0x4000480c
 8005318:	40004800 	.word	0x40004800
 800531c:	40004804 	.word	0x40004804
 8005320:	40004808 	.word	0x40004808
 8005324:	2000bad0 	.word	0x2000bad0
 8005328:	2000bad4 	.word	0x2000bad4

0800532c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005332:	4b26      	ldr	r3, [pc, #152]	@ (80053cc <_DoInit+0xa0>)
 8005334:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005336:	22a8      	movs	r2, #168	@ 0xa8
 8005338:	2100      	movs	r1, #0
 800533a:	6838      	ldr	r0, [r7, #0]
 800533c:	f002 f97a 	bl	8007634 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2203      	movs	r2, #3
 8005344:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2203      	movs	r2, #3
 800534a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	4a20      	ldr	r2, [pc, #128]	@ (80053d0 <_DoInit+0xa4>)
 8005350:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	4a1f      	ldr	r2, [pc, #124]	@ (80053d4 <_DoInit+0xa8>)
 8005356:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800535e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2200      	movs	r2, #0
 8005364:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2200      	movs	r2, #0
 800536a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2200      	movs	r2, #0
 8005370:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	4a16      	ldr	r2, [pc, #88]	@ (80053d0 <_DoInit+0xa4>)
 8005376:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	4a17      	ldr	r2, [pc, #92]	@ (80053d8 <_DoInit+0xac>)
 800537c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2210      	movs	r2, #16
 8005382:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2200      	movs	r2, #0
 8005388:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2200      	movs	r2, #0
 800538e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2200      	movs	r2, #0
 8005394:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005396:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800539a:	2300      	movs	r3, #0
 800539c:	607b      	str	r3, [r7, #4]
 800539e:	e00c      	b.n	80053ba <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f1c3 030f 	rsb	r3, r3, #15
 80053a6:	4a0d      	ldr	r2, [pc, #52]	@ (80053dc <_DoInit+0xb0>)
 80053a8:	5cd1      	ldrb	r1, [r2, r3]
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4413      	add	r3, r2
 80053b0:	460a      	mov	r2, r1
 80053b2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3301      	adds	r3, #1
 80053b8:	607b      	str	r3, [r7, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b0f      	cmp	r3, #15
 80053be:	d9ef      	bls.n	80053a0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80053c0:	f3bf 8f5f 	dmb	sy
}
 80053c4:	bf00      	nop
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	2000bad8 	.word	0x2000bad8
 80053d0:	080077f0 	.word	0x080077f0
 80053d4:	2000bb80 	.word	0x2000bb80
 80053d8:	2000bf80 	.word	0x2000bf80
 80053dc:	08007830 	.word	0x08007830

080053e0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08a      	sub	sp, #40	@ 0x28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80053ec:	2300      	movs	r3, #0
 80053ee:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	429a      	cmp	r2, r3
 8005402:	d905      	bls.n	8005410 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	3b01      	subs	r3, #1
 800540c:	627b      	str	r3, [r7, #36]	@ 0x24
 800540e:	e007      	b.n	8005420 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	69b9      	ldr	r1, [r7, #24]
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	1acb      	subs	r3, r1, r3
 800541a:	4413      	add	r3, r2
 800541c:	3b01      	subs	r3, #1
 800541e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800542a:	4293      	cmp	r3, r2
 800542c:	bf28      	it	cs
 800542e:	4613      	movcs	r3, r2
 8005430:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4293      	cmp	r3, r2
 8005438:	bf28      	it	cs
 800543a:	4613      	movcs	r3, r2
 800543c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	4413      	add	r3, r2
 8005446:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	6978      	ldr	r0, [r7, #20]
 800544e:	f002 f91d 	bl	800768c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005452:	6a3a      	ldr	r2, [r7, #32]
 8005454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005456:	4413      	add	r3, r2
 8005458:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545e:	4413      	add	r3, r2
 8005460:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546e:	4413      	add	r3, r2
 8005470:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	429a      	cmp	r2, r3
 800547a:	d101      	bne.n	8005480 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800547c:	2300      	movs	r3, #0
 800547e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005480:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1b2      	bne.n	80053f6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005490:	6a3b      	ldr	r3, [r7, #32]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3728      	adds	r7, #40	@ 0x28
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800549a:	b580      	push	{r7, lr}
 800549c:	b088      	sub	sp, #32
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d911      	bls.n	80054e2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	4413      	add	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	6938      	ldr	r0, [r7, #16]
 80054ce:	f002 f8dd 	bl	800768c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054d2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	441a      	add	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80054e0:	e01f      	b.n	8005522 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	4413      	add	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	68b9      	ldr	r1, [r7, #8]
 80054f4:	6938      	ldr	r0, [r7, #16]
 80054f6:	f002 f8c9 	bl	800768c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	4413      	add	r3, r2
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4619      	mov	r1, r3
 8005512:	6938      	ldr	r0, [r7, #16]
 8005514:	f002 f8ba 	bl	800768c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005518:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	60da      	str	r2, [r3, #12]
}
 8005522:	bf00      	nop
 8005524:	3720      	adds	r7, #32
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800552a:	b480      	push	{r7}
 800552c:	b087      	sub	sp, #28
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	429a      	cmp	r2, r3
 8005544:	d808      	bhi.n	8005558 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689a      	ldr	r2, [r3, #8]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1ad2      	subs	r2, r2, r3
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	4413      	add	r3, r2
 8005552:	3b01      	subs	r3, #1
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	e004      	b.n	8005562 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	3b01      	subs	r3, #1
 8005560:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005562:	697b      	ldr	r3, [r7, #20]
}
 8005564:	4618      	mov	r0, r3
 8005566:	371c      	adds	r7, #28
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005570:	b580      	push	{r7, lr}
 8005572:	b08c      	sub	sp, #48	@ 0x30
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800557c:	4b3e      	ldr	r3, [pc, #248]	@ (8005678 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800557e:	623b      	str	r3, [r7, #32]
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b53      	cmp	r3, #83	@ 0x53
 8005588:	d001      	beq.n	800558e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800558a:	f7ff fecf 	bl	800532c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	4613      	mov	r3, r2
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	4413      	add	r3, r2
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	4a37      	ldr	r2, [pc, #220]	@ (8005678 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800559c:	4413      	add	r3, r2
 800559e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80055b0:	2300      	movs	r3, #0
 80055b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80055b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d92b      	bls.n	8005614 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4293      	cmp	r3, r2
 80055cc:	bf28      	it	cs
 80055ce:	4613      	movcs	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d8:	4413      	add	r3, r2
 80055da:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	6939      	ldr	r1, [r7, #16]
 80055e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055e2:	f002 f853 	bl	800768c <memcpy>
    NumBytesRead += NumBytesRem;
 80055e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	4413      	add	r3, r2
 80055ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80055ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	4413      	add	r3, r2
 80055f4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80055fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	4413      	add	r3, r2
 8005604:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800560c:	429a      	cmp	r2, r3
 800560e:	d101      	bne.n	8005614 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005610:	2300      	movs	r3, #0
 8005612:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4293      	cmp	r3, r2
 8005622:	bf28      	it	cs
 8005624:	4613      	movcs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d019      	beq.n	8005662 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005634:	4413      	add	r3, r2
 8005636:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	6939      	ldr	r1, [r7, #16]
 800563c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800563e:	f002 f825 	bl	800768c <memcpy>
    NumBytesRead += NumBytesRem;
 8005642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	4413      	add	r3, r2
 8005648:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800564a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	4413      	add	r3, r2
 8005650:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800565a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	4413      	add	r3, r2
 8005660:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800566c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800566e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005670:	4618      	mov	r0, r3
 8005672:	3730      	adds	r7, #48	@ 0x30
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	2000bad8 	.word	0x2000bad8

0800567c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800567c:	b580      	push	{r7, lr}
 800567e:	b08c      	sub	sp, #48	@ 0x30
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005688:	4b3e      	ldr	r3, [pc, #248]	@ (8005784 <SEGGER_RTT_ReadNoLock+0x108>)
 800568a:	623b      	str	r3, [r7, #32]
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b53      	cmp	r3, #83	@ 0x53
 8005694:	d001      	beq.n	800569a <SEGGER_RTT_ReadNoLock+0x1e>
 8005696:	f7ff fe49 	bl	800532c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4613      	mov	r3, r2
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	4413      	add	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	3360      	adds	r3, #96	@ 0x60
 80056a6:	4a37      	ldr	r2, [pc, #220]	@ (8005784 <SEGGER_RTT_ReadNoLock+0x108>)
 80056a8:	4413      	add	r3, r2
 80056aa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80056bc:	2300      	movs	r3, #0
 80056be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80056c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d92b      	bls.n	8005720 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4293      	cmp	r3, r2
 80056d8:	bf28      	it	cs
 80056da:	4613      	movcs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e4:	4413      	add	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	6939      	ldr	r1, [r7, #16]
 80056ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80056ee:	f001 ffcd 	bl	800768c <memcpy>
    NumBytesRead += NumBytesRem;
 80056f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	4413      	add	r3, r2
 80056f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80056fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	4413      	add	r3, r2
 8005700:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800570a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	4413      	add	r3, r2
 8005710:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005718:	429a      	cmp	r2, r3
 800571a:	d101      	bne.n	8005720 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800571c:	2300      	movs	r3, #0
 800571e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4293      	cmp	r3, r2
 800572e:	bf28      	it	cs
 8005730:	4613      	movcs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d019      	beq.n	800576e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005740:	4413      	add	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	6939      	ldr	r1, [r7, #16]
 8005748:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800574a:	f001 ff9f 	bl	800768c <memcpy>
    NumBytesRead += NumBytesRem;
 800574e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	4413      	add	r3, r2
 8005754:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	4413      	add	r3, r2
 800575c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005766:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	4413      	add	r3, r2
 800576c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800576e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005778:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800577a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800577c:	4618      	mov	r0, r3
 800577e:	3730      	adds	r7, #48	@ 0x30
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	2000bad8 	.word	0x2000bad8

08005788 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4613      	mov	r3, r2
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	4413      	add	r3, r2
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	3360      	adds	r3, #96	@ 0x60
 80057a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005824 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80057a6:	4413      	add	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d029      	beq.n	8005806 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d82e      	bhi.n	8005814 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d013      	beq.n	80057e6 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80057be:	e029      	b.n	8005814 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80057c0:	6978      	ldr	r0, [r7, #20]
 80057c2:	f7ff feb2 	bl	800552a <_GetAvailWriteSpace>
 80057c6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d202      	bcs.n	80057d6 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80057d4:	e021      	b.n	800581a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	69b9      	ldr	r1, [r7, #24]
 80057de:	6978      	ldr	r0, [r7, #20]
 80057e0:	f7ff fe5b 	bl	800549a <_WriteNoCheck>
    break;
 80057e4:	e019      	b.n	800581a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80057e6:	6978      	ldr	r0, [r7, #20]
 80057e8:	f7ff fe9f 	bl	800552a <_GetAvailWriteSpace>
 80057ec:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	4293      	cmp	r3, r2
 80057f4:	bf28      	it	cs
 80057f6:	4613      	movcs	r3, r2
 80057f8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	69b9      	ldr	r1, [r7, #24]
 80057fe:	6978      	ldr	r0, [r7, #20]
 8005800:	f7ff fe4b 	bl	800549a <_WriteNoCheck>
    break;
 8005804:	e009      	b.n	800581a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	69b9      	ldr	r1, [r7, #24]
 800580a:	6978      	ldr	r0, [r7, #20]
 800580c:	f7ff fde8 	bl	80053e0 <_WriteBlocking>
 8005810:	61f8      	str	r0, [r7, #28]
    break;
 8005812:	e002      	b.n	800581a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005814:	2300      	movs	r3, #0
 8005816:	61fb      	str	r3, [r7, #28]
    break;
 8005818:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800581a:	69fb      	ldr	r3, [r7, #28]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3720      	adds	r7, #32
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	2000bad8 	.word	0x2000bad8

08005828 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005834:	4b0e      	ldr	r3, [pc, #56]	@ (8005870 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005836:	61fb      	str	r3, [r7, #28]
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b53      	cmp	r3, #83	@ 0x53
 8005840:	d001      	beq.n	8005846 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005842:	f7ff fd73 	bl	800532c <_DoInit>
  SEGGER_RTT_LOCK();
 8005846:	f3ef 8311 	mrs	r3, BASEPRI
 800584a:	f04f 0120 	mov.w	r1, #32
 800584e:	f381 8811 	msr	BASEPRI, r1
 8005852:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	68b9      	ldr	r1, [r7, #8]
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f7ff ff95 	bl	8005788 <SEGGER_RTT_WriteDownBufferNoLock>
 800585e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005866:	697b      	ldr	r3, [r7, #20]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3720      	adds	r7, #32
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	2000bad8 	.word	0x2000bad8

08005874 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005882:	4b3d      	ldr	r3, [pc, #244]	@ (8005978 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005884:	61bb      	str	r3, [r7, #24]
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b53      	cmp	r3, #83	@ 0x53
 800588e:	d001      	beq.n	8005894 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005890:	f7ff fd4c 	bl	800532c <_DoInit>
  SEGGER_RTT_LOCK();
 8005894:	f3ef 8311 	mrs	r3, BASEPRI
 8005898:	f04f 0120 	mov.w	r1, #32
 800589c:	f381 8811 	msr	BASEPRI, r1
 80058a0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80058a2:	4b35      	ldr	r3, [pc, #212]	@ (8005978 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80058a4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80058a6:	2300      	movs	r3, #0
 80058a8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80058aa:	6939      	ldr	r1, [r7, #16]
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	1c5a      	adds	r2, r3, #1
 80058b0:	4613      	mov	r3, r2
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	4413      	add	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	440b      	add	r3, r1
 80058ba:	3304      	adds	r3, #4
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d008      	beq.n	80058d4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	3301      	adds	r3, #1
 80058c6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	69fa      	ldr	r2, [r7, #28]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	dbeb      	blt.n	80058aa <SEGGER_RTT_AllocUpBuffer+0x36>
 80058d2:	e000      	b.n	80058d6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80058d4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	69fa      	ldr	r2, [r7, #28]
 80058dc:	429a      	cmp	r2, r3
 80058de:	da3f      	bge.n	8005960 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80058e0:	6939      	ldr	r1, [r7, #16]
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	4613      	mov	r3, r2
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	4413      	add	r3, r2
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	440b      	add	r3, r1
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80058f4:	6939      	ldr	r1, [r7, #16]
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	4613      	mov	r3, r2
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	4413      	add	r3, r2
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	440b      	add	r3, r1
 8005904:	3304      	adds	r3, #4
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800590a:	6939      	ldr	r1, [r7, #16]
 800590c:	69fa      	ldr	r2, [r7, #28]
 800590e:	4613      	mov	r3, r2
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	4413      	add	r3, r2
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	440b      	add	r3, r1
 8005918:	3320      	adds	r3, #32
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800591e:	6939      	ldr	r1, [r7, #16]
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	4613      	mov	r3, r2
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	4413      	add	r3, r2
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	440b      	add	r3, r1
 800592c:	3328      	adds	r3, #40	@ 0x28
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005932:	6939      	ldr	r1, [r7, #16]
 8005934:	69fa      	ldr	r2, [r7, #28]
 8005936:	4613      	mov	r3, r2
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	4413      	add	r3, r2
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	440b      	add	r3, r1
 8005940:	3324      	adds	r3, #36	@ 0x24
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005946:	6939      	ldr	r1, [r7, #16]
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	4613      	mov	r3, r2
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	4413      	add	r3, r2
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	440b      	add	r3, r1
 8005954:	332c      	adds	r3, #44	@ 0x2c
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800595a:	f3bf 8f5f 	dmb	sy
 800595e:	e002      	b.n	8005966 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005960:	f04f 33ff 	mov.w	r3, #4294967295
 8005964:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800596c:	69fb      	ldr	r3, [r7, #28]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3720      	adds	r7, #32
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	2000bad8 	.word	0x2000bad8

0800597c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800597c:	b580      	push	{r7, lr}
 800597e:	b08a      	sub	sp, #40	@ 0x28
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800598a:	4b21      	ldr	r3, [pc, #132]	@ (8005a10 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800598c:	623b      	str	r3, [r7, #32]
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b53      	cmp	r3, #83	@ 0x53
 8005996:	d001      	beq.n	800599c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005998:	f7ff fcc8 	bl	800532c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800599c:	4b1c      	ldr	r3, [pc, #112]	@ (8005a10 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800599e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d82c      	bhi.n	8005a00 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80059a6:	f3ef 8311 	mrs	r3, BASEPRI
 80059aa:	f04f 0120 	mov.w	r1, #32
 80059ae:	f381 8811 	msr	BASEPRI, r1
 80059b2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4613      	mov	r3, r2
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	4413      	add	r3, r2
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	3360      	adds	r3, #96	@ 0x60
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	4413      	add	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00e      	beq.n	80059ea <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2200      	movs	r2, #0
 80059e2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2200      	movs	r2, #0
 80059e8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059ee:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80059f0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80059fe:	e002      	b.n	8005a06 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005a00:	f04f 33ff 	mov.w	r3, #4294967295
 8005a04:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3728      	adds	r7, #40	@ 0x28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	2000bad8 	.word	0x2000bad8

08005a14 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	60fa      	str	r2, [r7, #12]
 8005a2a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b80      	cmp	r3, #128	@ 0x80
 8005a30:	d90a      	bls.n	8005a48 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005a32:	2380      	movs	r3, #128	@ 0x80
 8005a34:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005a36:	e007      	b.n	8005a48 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	1c53      	adds	r3, r2, #1
 8005a3c:	60bb      	str	r3, [r7, #8]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	1c59      	adds	r1, r3, #1
 8005a42:	60f9      	str	r1, [r7, #12]
 8005a44:	7812      	ldrb	r2, [r2, #0]
 8005a46:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	1e5a      	subs	r2, r3, #1
 8005a4c:	607a      	str	r2, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <_EncodeStr+0x46>
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1ee      	bne.n	8005a38 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005a66:	68fb      	ldr	r3, [r7, #12]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	371c      	adds	r7, #28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3307      	adds	r3, #7
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005a92:	4b34      	ldr	r3, [pc, #208]	@ (8005b64 <_HandleIncomingPacket+0xd8>)
 8005a94:	7e1b      	ldrb	r3, [r3, #24]
 8005a96:	4618      	mov	r0, r3
 8005a98:	1cfb      	adds	r3, r7, #3
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	f7ff fded 	bl	800567c <SEGGER_RTT_ReadNoLock>
 8005aa2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d057      	beq.n	8005b5a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8005aaa:	78fb      	ldrb	r3, [r7, #3]
 8005aac:	2b80      	cmp	r3, #128	@ 0x80
 8005aae:	d031      	beq.n	8005b14 <_HandleIncomingPacket+0x88>
 8005ab0:	2b80      	cmp	r3, #128	@ 0x80
 8005ab2:	dc40      	bgt.n	8005b36 <_HandleIncomingPacket+0xaa>
 8005ab4:	2b07      	cmp	r3, #7
 8005ab6:	dc15      	bgt.n	8005ae4 <_HandleIncomingPacket+0x58>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	dd3c      	ble.n	8005b36 <_HandleIncomingPacket+0xaa>
 8005abc:	3b01      	subs	r3, #1
 8005abe:	2b06      	cmp	r3, #6
 8005ac0:	d839      	bhi.n	8005b36 <_HandleIncomingPacket+0xaa>
 8005ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac8 <_HandleIncomingPacket+0x3c>)
 8005ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac8:	08005aeb 	.word	0x08005aeb
 8005acc:	08005af1 	.word	0x08005af1
 8005ad0:	08005af7 	.word	0x08005af7
 8005ad4:	08005afd 	.word	0x08005afd
 8005ad8:	08005b03 	.word	0x08005b03
 8005adc:	08005b09 	.word	0x08005b09
 8005ae0:	08005b0f 	.word	0x08005b0f
 8005ae4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ae6:	d033      	beq.n	8005b50 <_HandleIncomingPacket+0xc4>
 8005ae8:	e025      	b.n	8005b36 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005aea:	f000 fee7 	bl	80068bc <SEGGER_SYSVIEW_Start>
      break;
 8005aee:	e034      	b.n	8005b5a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005af0:	f000 ff9e 	bl	8006a30 <SEGGER_SYSVIEW_Stop>
      break;
 8005af4:	e031      	b.n	8005b5a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005af6:	f001 f977 	bl	8006de8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005afa:	e02e      	b.n	8005b5a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005afc:	f001 f93c 	bl	8006d78 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005b00:	e02b      	b.n	8005b5a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005b02:	f000 ffbb 	bl	8006a7c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005b06:	e028      	b.n	8005b5a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005b08:	f001 fca8 	bl	800745c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005b0c:	e025      	b.n	8005b5a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005b0e:	f001 fc87 	bl	8007420 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005b12:	e022      	b.n	8005b5a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005b14:	4b13      	ldr	r3, [pc, #76]	@ (8005b64 <_HandleIncomingPacket+0xd8>)
 8005b16:	7e1b      	ldrb	r3, [r3, #24]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	1cfb      	adds	r3, r7, #3
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	4619      	mov	r1, r3
 8005b20:	f7ff fdac 	bl	800567c <SEGGER_RTT_ReadNoLock>
 8005b24:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d013      	beq.n	8005b54 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f001 fbec 	bl	800730c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005b34:	e00e      	b.n	8005b54 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005b36:	78fb      	ldrb	r3, [r7, #3]
 8005b38:	b25b      	sxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	da0c      	bge.n	8005b58 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005b3e:	4b09      	ldr	r3, [pc, #36]	@ (8005b64 <_HandleIncomingPacket+0xd8>)
 8005b40:	7e1b      	ldrb	r3, [r3, #24]
 8005b42:	4618      	mov	r0, r3
 8005b44:	1cfb      	adds	r3, r7, #3
 8005b46:	2201      	movs	r2, #1
 8005b48:	4619      	mov	r1, r3
 8005b4a:	f7ff fd97 	bl	800567c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005b4e:	e003      	b.n	8005b58 <_HandleIncomingPacket+0xcc>
      break;
 8005b50:	bf00      	nop
 8005b52:	e002      	b.n	8005b5a <_HandleIncomingPacket+0xce>
      break;
 8005b54:	bf00      	nop
 8005b56:	e000      	b.n	8005b5a <_HandleIncomingPacket+0xce>
      break;
 8005b58:	bf00      	nop
    }
  }
}
 8005b5a:	bf00      	nop
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	2000c398 	.word	0x2000c398

08005b68 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08c      	sub	sp, #48	@ 0x30
 8005b6c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005b6e:	2301      	movs	r3, #1
 8005b70:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005b72:	1d3b      	adds	r3, r7, #4
 8005b74:	3301      	adds	r3, #1
 8005b76:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b7c:	4b31      	ldr	r3, [pc, #196]	@ (8005c44 <_TrySendOverflowPacket+0xdc>)
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b82:	e00b      	b.n	8005b9c <_TrySendOverflowPacket+0x34>
 8005b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8a:	1c59      	adds	r1, r3, #1
 8005b8c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005b8e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b98:	09db      	lsrs	r3, r3, #7
 8005b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ba0:	d8f0      	bhi.n	8005b84 <_TrySendOverflowPacket+0x1c>
 8005ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ba8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005bb2:	4b25      	ldr	r3, [pc, #148]	@ (8005c48 <_TrySendOverflowPacket+0xe0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005bb8:	4b22      	ldr	r3, [pc, #136]	@ (8005c44 <_TrySendOverflowPacket+0xdc>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	623b      	str	r3, [r7, #32]
 8005bca:	e00b      	b.n	8005be4 <_TrySendOverflowPacket+0x7c>
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd2:	1c59      	adds	r1, r3, #1
 8005bd4:	6279      	str	r1, [r7, #36]	@ 0x24
 8005bd6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	701a      	strb	r2, [r3, #0]
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	09db      	lsrs	r3, r3, #7
 8005be2:	623b      	str	r3, [r7, #32]
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005be8:	d8f0      	bhi.n	8005bcc <_TrySendOverflowPacket+0x64>
 8005bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bf0:	6a3a      	ldr	r2, [r7, #32]
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	701a      	strb	r2, [r3, #0]
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005bfa:	4b12      	ldr	r3, [pc, #72]	@ (8005c44 <_TrySendOverflowPacket+0xdc>)
 8005bfc:	785b      	ldrb	r3, [r3, #1]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	1d3b      	adds	r3, r7, #4
 8005c02:	69fa      	ldr	r2, [r7, #28]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	1d3b      	adds	r3, r7, #4
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	f7fa fb18 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005c10:	4603      	mov	r3, r0
 8005c12:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d009      	beq.n	8005c2e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8005c44 <_TrySendOverflowPacket+0xdc>)
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005c20:	4b08      	ldr	r3, [pc, #32]	@ (8005c44 <_TrySendOverflowPacket+0xdc>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	4b06      	ldr	r3, [pc, #24]	@ (8005c44 <_TrySendOverflowPacket+0xdc>)
 8005c2a:	701a      	strb	r2, [r3, #0]
 8005c2c:	e004      	b.n	8005c38 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005c2e:	4b05      	ldr	r3, [pc, #20]	@ (8005c44 <_TrySendOverflowPacket+0xdc>)
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	3301      	adds	r3, #1
 8005c34:	4a03      	ldr	r2, [pc, #12]	@ (8005c44 <_TrySendOverflowPacket+0xdc>)
 8005c36:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005c38:	693b      	ldr	r3, [r7, #16]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3730      	adds	r7, #48	@ 0x30
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	2000c398 	.word	0x2000c398
 8005c48:	e0001004 	.word	0xe0001004

08005c4c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08a      	sub	sp, #40	@ 0x28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005c58:	4b98      	ldr	r3, [pc, #608]	@ (8005ebc <_SendPacket+0x270>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d010      	beq.n	8005c82 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005c60:	4b96      	ldr	r3, [pc, #600]	@ (8005ebc <_SendPacket+0x270>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 812d 	beq.w	8005ec4 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005c6a:	4b94      	ldr	r3, [pc, #592]	@ (8005ebc <_SendPacket+0x270>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d109      	bne.n	8005c86 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005c72:	f7ff ff79 	bl	8005b68 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005c76:	4b91      	ldr	r3, [pc, #580]	@ (8005ebc <_SendPacket+0x270>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	f040 8124 	bne.w	8005ec8 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005c80:	e001      	b.n	8005c86 <_SendPacket+0x3a>
    goto Send;
 8005c82:	bf00      	nop
 8005c84:	e000      	b.n	8005c88 <_SendPacket+0x3c>
Send:
 8005c86:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b1f      	cmp	r3, #31
 8005c8c:	d809      	bhi.n	8005ca2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005c8e:	4b8b      	ldr	r3, [pc, #556]	@ (8005ebc <_SendPacket+0x270>)
 8005c90:	69da      	ldr	r2, [r3, #28]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	fa22 f303 	lsr.w	r3, r2, r3
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f040 8115 	bne.w	8005ecc <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b17      	cmp	r3, #23
 8005ca6:	d807      	bhi.n	8005cb8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	e0c4      	b.n	8005e42 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cc4:	d912      	bls.n	8005cec <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	09da      	lsrs	r2, r3, #7
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	3a01      	subs	r2, #1
 8005cde:	60fa      	str	r2, [r7, #12]
 8005ce0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	e006      	b.n	8005cfa <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b7e      	cmp	r3, #126	@ 0x7e
 8005cfe:	d807      	bhi.n	8005d10 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	701a      	strb	r2, [r3, #0]
 8005d0e:	e098      	b.n	8005e42 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d16:	d212      	bcs.n	8005d3e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	09da      	lsrs	r2, r3, #7
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	60fb      	str	r3, [r7, #12]
 8005d22:	b2d2      	uxtb	r2, r2
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	3a01      	subs	r2, #1
 8005d30:	60fa      	str	r2, [r7, #12]
 8005d32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	e081      	b.n	8005e42 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d44:	d21d      	bcs.n	8005d82 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	0b9a      	lsrs	r2, r3, #14
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	b2d2      	uxtb	r2, r2
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	09db      	lsrs	r3, r3, #7
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	3a01      	subs	r2, #1
 8005d60:	60fa      	str	r2, [r7, #12]
 8005d62:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	3a01      	subs	r2, #1
 8005d74:	60fa      	str	r2, [r7, #12]
 8005d76:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	e05f      	b.n	8005e42 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d88:	d228      	bcs.n	8005ddc <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	0d5a      	lsrs	r2, r3, #21
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	0b9b      	lsrs	r3, r3, #14
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	3a01      	subs	r2, #1
 8005da4:	60fa      	str	r2, [r7, #12]
 8005da6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	09db      	lsrs	r3, r3, #7
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	3a01      	subs	r2, #1
 8005dba:	60fa      	str	r2, [r7, #12]
 8005dbc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	3a01      	subs	r2, #1
 8005dce:	60fa      	str	r2, [r7, #12]
 8005dd0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	e032      	b.n	8005e42 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	0f1a      	lsrs	r2, r3, #28
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	3b01      	subs	r3, #1
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	0d5b      	lsrs	r3, r3, #21
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	3a01      	subs	r2, #1
 8005df6:	60fa      	str	r2, [r7, #12]
 8005df8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	0b9b      	lsrs	r3, r3, #14
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	3a01      	subs	r2, #1
 8005e0c:	60fa      	str	r2, [r7, #12]
 8005e0e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	09db      	lsrs	r3, r3, #7
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	3a01      	subs	r2, #1
 8005e22:	60fa      	str	r2, [r7, #12]
 8005e24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	3a01      	subs	r2, #1
 8005e36:	60fa      	str	r2, [r7, #12]
 8005e38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e42:	4b1f      	ldr	r3, [pc, #124]	@ (8005ec0 <_SendPacket+0x274>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005e48:	4b1c      	ldr	r3, [pc, #112]	@ (8005ebc <_SendPacket+0x270>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	623b      	str	r3, [r7, #32]
 8005e5a:	e00b      	b.n	8005e74 <_SendPacket+0x228>
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e62:	1c59      	adds	r1, r3, #1
 8005e64:	6279      	str	r1, [r7, #36]	@ 0x24
 8005e66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	09db      	lsrs	r3, r3, #7
 8005e72:	623b      	str	r3, [r7, #32]
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e78:	d8f0      	bhi.n	8005e5c <_SendPacket+0x210>
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e80:	6a3a      	ldr	r2, [r7, #32]
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]
 8005e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e88:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005ebc <_SendPacket+0x270>)
 8005e8c:	785b      	ldrb	r3, [r3, #1]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	461a      	mov	r2, r3
 8005e98:	68f9      	ldr	r1, [r7, #12]
 8005e9a:	f7fa f9d1 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005e9e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005ea6:	4a05      	ldr	r2, [pc, #20]	@ (8005ebc <_SendPacket+0x270>)
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	60d3      	str	r3, [r2, #12]
 8005eac:	e00f      	b.n	8005ece <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005eae:	4b03      	ldr	r3, [pc, #12]	@ (8005ebc <_SendPacket+0x270>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	4b01      	ldr	r3, [pc, #4]	@ (8005ebc <_SendPacket+0x270>)
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	e008      	b.n	8005ece <_SendPacket+0x282>
 8005ebc:	2000c398 	.word	0x2000c398
 8005ec0:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005ec4:	bf00      	nop
 8005ec6:	e002      	b.n	8005ece <_SendPacket+0x282>
      goto SendDone;
 8005ec8:	bf00      	nop
 8005eca:	e000      	b.n	8005ece <_SendPacket+0x282>
      goto SendDone;
 8005ecc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005ece:	4b14      	ldr	r3, [pc, #80]	@ (8005f20 <_SendPacket+0x2d4>)
 8005ed0:	7e1b      	ldrb	r3, [r3, #24]
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	4a13      	ldr	r2, [pc, #76]	@ (8005f24 <_SendPacket+0x2d8>)
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	440b      	add	r3, r1
 8005edc:	00db      	lsls	r3, r3, #3
 8005ede:	4413      	add	r3, r2
 8005ee0:	336c      	adds	r3, #108	@ 0x6c
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8005f20 <_SendPacket+0x2d4>)
 8005ee6:	7e1b      	ldrb	r3, [r3, #24]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	490e      	ldr	r1, [pc, #56]	@ (8005f24 <_SendPacket+0x2d8>)
 8005eec:	4603      	mov	r3, r0
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	4403      	add	r3, r0
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	440b      	add	r3, r1
 8005ef6:	3370      	adds	r3, #112	@ 0x70
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d00b      	beq.n	8005f16 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005efe:	4b08      	ldr	r3, [pc, #32]	@ (8005f20 <_SendPacket+0x2d4>)
 8005f00:	789b      	ldrb	r3, [r3, #2]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d107      	bne.n	8005f16 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005f06:	4b06      	ldr	r3, [pc, #24]	@ (8005f20 <_SendPacket+0x2d4>)
 8005f08:	2201      	movs	r2, #1
 8005f0a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005f0c:	f7ff fdbe 	bl	8005a8c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005f10:	4b03      	ldr	r3, [pc, #12]	@ (8005f20 <_SendPacket+0x2d4>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005f16:	bf00      	nop
 8005f18:	3728      	adds	r7, #40	@ 0x28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	2000c398 	.word	0x2000c398
 8005f24:	2000bad8 	.word	0x2000bad8

08005f28 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08a      	sub	sp, #40	@ 0x28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	2b80      	cmp	r3, #128	@ 0x80
 8005f40:	d80a      	bhi.n	8005f58 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	1c59      	adds	r1, r3, #1
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6051      	str	r1, [r2, #4]
 8005f4c:	78fa      	ldrb	r2, [r7, #3]
 8005f4e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	2b80      	cmp	r3, #128	@ 0x80
 8005f5e:	d15a      	bne.n	8006016 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691a      	ldr	r2, [r3, #16]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	623b      	str	r3, [r7, #32]
 8005f80:	e00b      	b.n	8005f9a <_StoreChar+0x72>
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f88:	1c59      	adds	r1, r3, #1
 8005f8a:	6279      	str	r1, [r7, #36]	@ 0x24
 8005f8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	09db      	lsrs	r3, r3, #7
 8005f98:	623b      	str	r3, [r7, #32]
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f9e:	d8f0      	bhi.n	8005f82 <_StoreChar+0x5a>
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	627a      	str	r2, [r7, #36]	@ 0x24
 8005fa6:	6a3a      	ldr	r2, [r7, #32]
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	701a      	strb	r2, [r3, #0]
 8005fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fae:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	61fb      	str	r3, [r7, #28]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	61bb      	str	r3, [r7, #24]
 8005fb8:	e00b      	b.n	8005fd2 <_StoreChar+0xaa>
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	1c59      	adds	r1, r3, #1
 8005fc2:	61f9      	str	r1, [r7, #28]
 8005fc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fc8:	b2d2      	uxtb	r2, r2
 8005fca:	701a      	strb	r2, [r3, #0]
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	09db      	lsrs	r3, r3, #7
 8005fd0:	61bb      	str	r3, [r7, #24]
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fd6:	d8f0      	bhi.n	8005fba <_StoreChar+0x92>
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	61fa      	str	r2, [r7, #28]
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	b2d2      	uxtb	r2, r2
 8005fe2:	701a      	strb	r2, [r3, #0]
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	221a      	movs	r2, #26
 8005fee:	6939      	ldr	r1, [r7, #16]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7ff fe2b 	bl	8005c4c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7ff fd3a 	bl	8005a74 <_PreparePacket>
 8006000:	4602      	mov	r2, r0
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	611a      	str	r2, [r3, #16]
  }
}
 8006016:	bf00      	nop
 8006018:	3728      	adds	r7, #40	@ 0x28
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006020:	b580      	push	{r7, lr}
 8006022:	b08a      	sub	sp, #40	@ 0x28
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8006032:	2301      	movs	r3, #1
 8006034:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8006036:	2301      	movs	r3, #1
 8006038:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800603a:	e007      	b.n	800604c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800603c:	6a3a      	ldr	r2, [r7, #32]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	fbb2 f3f3 	udiv	r3, r2, r3
 8006044:	623b      	str	r3, [r7, #32]
    Width++;
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	3301      	adds	r3, #1
 800604a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800604c:	6a3a      	ldr	r2, [r7, #32]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	429a      	cmp	r2, r3
 8006052:	d2f3      	bcs.n	800603c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	429a      	cmp	r2, r3
 800605a:	d901      	bls.n	8006060 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d000      	beq.n	800606c <_PrintUnsigned+0x4c>
 800606a:	e01f      	b.n	80060ac <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 800606c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606e:	2b00      	cmp	r3, #0
 8006070:	d01c      	beq.n	80060ac <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d005      	beq.n	8006088 <_PrintUnsigned+0x68>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d102      	bne.n	8006088 <_PrintUnsigned+0x68>
        c = '0';
 8006082:	2330      	movs	r3, #48	@ 0x30
 8006084:	76fb      	strb	r3, [r7, #27]
 8006086:	e001      	b.n	800608c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8006088:	2320      	movs	r3, #32
 800608a:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800608c:	e007      	b.n	800609e <_PrintUnsigned+0x7e>
        FieldWidth--;
 800608e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006090:	3b01      	subs	r3, #1
 8006092:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8006094:	7efb      	ldrb	r3, [r7, #27]
 8006096:	4619      	mov	r1, r3
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f7ff ff45 	bl	8005f28 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800609e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d003      	beq.n	80060ac <_PrintUnsigned+0x8c>
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d3f0      	bcc.n	800608e <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d903      	bls.n	80060ba <_PrintUnsigned+0x9a>
      NumDigits--;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	e009      	b.n	80060ce <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060be:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c2:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d200      	bcs.n	80060ce <_PrintUnsigned+0xae>
        break;
 80060cc:	e005      	b.n	80060da <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 80060ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	fb02 f303 	mul.w	r3, r2, r3
 80060d6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80060d8:	e7e8      	b.n	80060ac <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060de:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e2:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060e8:	fb02 f303 	mul.w	r3, r2, r3
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80060f2:	4a15      	ldr	r2, [pc, #84]	@ (8006148 <_PrintUnsigned+0x128>)
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	4413      	add	r3, r2
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	4619      	mov	r1, r3
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f7ff ff13 	bl	8005f28 <_StoreChar>
    Digit /= Base;
 8006102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	fbb2 f3f3 	udiv	r3, r2, r3
 800610a:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 800610c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e3      	bne.n	80060da <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	d011      	beq.n	8006140 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00e      	beq.n	8006140 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006122:	e006      	b.n	8006132 <_PrintUnsigned+0x112>
        FieldWidth--;
 8006124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006126:	3b01      	subs	r3, #1
 8006128:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 800612a:	2120      	movs	r1, #32
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f7ff fefb 	bl	8005f28 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <_PrintUnsigned+0x120>
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613c:	429a      	cmp	r2, r3
 800613e:	d3f1      	bcc.n	8006124 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8006140:	bf00      	nop
 8006142:	3728      	adds	r7, #40	@ 0x28
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	08007850 	.word	0x08007850

0800614c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800614c:	b580      	push	{r7, lr}
 800614e:	b088      	sub	sp, #32
 8006150:	af02      	add	r7, sp, #8
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	bfb8      	it	lt
 8006160:	425b      	neglt	r3, r3
 8006162:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006164:	2301      	movs	r3, #1
 8006166:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006168:	e007      	b.n	800617a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006172:	613b      	str	r3, [r7, #16]
    Width++;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	3301      	adds	r3, #1
 8006178:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	429a      	cmp	r2, r3
 8006180:	daf3      	bge.n	800616a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	429a      	cmp	r2, r3
 8006188:	d901      	bls.n	800618e <_PrintInt+0x42>
    Width = NumDigits;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00a      	beq.n	80061aa <_PrintInt+0x5e>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	db04      	blt.n	80061a4 <_PrintInt+0x58>
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <_PrintInt+0x5e>
    FieldWidth--;
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80061aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ac:	f003 0302 	and.w	r3, r3, #2
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <_PrintInt+0x6e>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d016      	beq.n	80061e8 <_PrintInt+0x9c>
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d111      	bne.n	80061e8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00e      	beq.n	80061e8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061ca:	e006      	b.n	80061da <_PrintInt+0x8e>
        FieldWidth--;
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80061d2:	2120      	movs	r1, #32
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f7ff fea7 	bl	8005f28 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d003      	beq.n	80061e8 <_PrintInt+0x9c>
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d3f1      	bcc.n	80061cc <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	da07      	bge.n	80061fe <_PrintInt+0xb2>
    v = -v;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	425b      	negs	r3, r3
 80061f2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80061f4:	212d      	movs	r1, #45	@ 0x2d
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f7ff fe96 	bl	8005f28 <_StoreChar>
 80061fc:	e008      	b.n	8006210 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80061fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006208:	212b      	movs	r1, #43	@ 0x2b
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f7ff fe8c 	bl	8005f28 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d019      	beq.n	800624e <_PrintInt+0x102>
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	d114      	bne.n	800624e <_PrintInt+0x102>
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d111      	bne.n	800624e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00e      	beq.n	800624e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006230:	e006      	b.n	8006240 <_PrintInt+0xf4>
        FieldWidth--;
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	3b01      	subs	r3, #1
 8006236:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006238:	2130      	movs	r1, #48	@ 0x30
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f7ff fe74 	bl	8005f28 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <_PrintInt+0x102>
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	429a      	cmp	r2, r3
 800624c:	d3f1      	bcc.n	8006232 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800624e:	68b9      	ldr	r1, [r7, #8]
 8006250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006252:	9301      	str	r3, [sp, #4]
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f7ff fedf 	bl	8006020 <_PrintUnsigned>
}
 8006262:	bf00      	nop
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800626c:	b580      	push	{r7, lr}
 800626e:	b098      	sub	sp, #96	@ 0x60
 8006270:	af02      	add	r7, sp, #8
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006278:	f3ef 8311 	mrs	r3, BASEPRI
 800627c:	f04f 0120 	mov.w	r1, #32
 8006280:	f381 8811 	msr	BASEPRI, r1
 8006284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006286:	48b7      	ldr	r0, [pc, #732]	@ (8006564 <_VPrintTarget+0x2f8>)
 8006288:	f7ff fbf4 	bl	8005a74 <_PreparePacket>
 800628c:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800628e:	4bb5      	ldr	r3, [pc, #724]	@ (8006564 <_VPrintTarget+0x2f8>)
 8006290:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8006292:	2300      	movs	r3, #0
 8006294:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006298:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	3301      	adds	r3, #1
 800629e:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3301      	adds	r3, #1
 80062b0:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80062b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 81a8 	beq.w	800660c <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80062bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80062c0:	2b25      	cmp	r3, #37	@ 0x25
 80062c2:	f040 8195 	bne.w	80065f0 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80062c6:	2300      	movs	r3, #0
 80062c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 80062ca:	2301      	movs	r3, #1
 80062cc:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 80062d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80062da:	3b23      	subs	r3, #35	@ 0x23
 80062dc:	2b0d      	cmp	r3, #13
 80062de:	d83f      	bhi.n	8006360 <_VPrintTarget+0xf4>
 80062e0:	a201      	add	r2, pc, #4	@ (adr r2, 80062e8 <_VPrintTarget+0x7c>)
 80062e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e6:	bf00      	nop
 80062e8:	08006351 	.word	0x08006351
 80062ec:	08006361 	.word	0x08006361
 80062f0:	08006361 	.word	0x08006361
 80062f4:	08006361 	.word	0x08006361
 80062f8:	08006361 	.word	0x08006361
 80062fc:	08006361 	.word	0x08006361
 8006300:	08006361 	.word	0x08006361
 8006304:	08006361 	.word	0x08006361
 8006308:	08006341 	.word	0x08006341
 800630c:	08006361 	.word	0x08006361
 8006310:	08006321 	.word	0x08006321
 8006314:	08006361 	.word	0x08006361
 8006318:	08006361 	.word	0x08006361
 800631c:	08006331 	.word	0x08006331
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006320:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006322:	f043 0301 	orr.w	r3, r3, #1
 8006326:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3301      	adds	r3, #1
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	e01a      	b.n	8006366 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006330:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006332:	f043 0302 	orr.w	r3, r3, #2
 8006336:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3301      	adds	r3, #1
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	e012      	b.n	8006366 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006340:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006342:	f043 0304 	orr.w	r3, r3, #4
 8006346:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3301      	adds	r3, #1
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	e00a      	b.n	8006366 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006350:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006352:	f043 0308 	orr.w	r3, r3, #8
 8006356:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3301      	adds	r3, #1
 800635c:	60fb      	str	r3, [r7, #12]
 800635e:	e002      	b.n	8006366 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006360:	2300      	movs	r3, #0
 8006362:	653b      	str	r3, [r7, #80]	@ 0x50
 8006364:	bf00      	nop
        }
      } while (v);
 8006366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1b0      	bne.n	80062ce <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800636c:	2300      	movs	r3, #0
 800636e:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8006378:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800637c:	2b2f      	cmp	r3, #47	@ 0x2f
 800637e:	d912      	bls.n	80063a6 <_VPrintTarget+0x13a>
 8006380:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006384:	2b39      	cmp	r3, #57	@ 0x39
 8006386:	d80e      	bhi.n	80063a6 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3301      	adds	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800638e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006390:	4613      	mov	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	461a      	mov	r2, r3
 800639a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800639e:	4413      	add	r3, r2
 80063a0:	3b30      	subs	r3, #48	@ 0x30
 80063a2:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 80063a4:	e7e4      	b.n	8006370 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80063a6:	2300      	movs	r3, #0
 80063a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 80063b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80063b8:	d11d      	bne.n	80063f6 <_VPrintTarget+0x18a>
        sFormat++;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3301      	adds	r3, #1
 80063be:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 80063c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80063ce:	d912      	bls.n	80063f6 <_VPrintTarget+0x18a>
 80063d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063d4:	2b39      	cmp	r3, #57	@ 0x39
 80063d6:	d80e      	bhi.n	80063f6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3301      	adds	r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80063de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063e0:	4613      	mov	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	461a      	mov	r2, r3
 80063ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063ee:	4413      	add	r3, r2
 80063f0:	3b30      	subs	r3, #48	@ 0x30
 80063f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 80063f4:	e7e4      	b.n	80063c0 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80063fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006402:	2b6c      	cmp	r3, #108	@ 0x6c
 8006404:	d003      	beq.n	800640e <_VPrintTarget+0x1a2>
 8006406:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800640a:	2b68      	cmp	r3, #104	@ 0x68
 800640c:	d107      	bne.n	800641e <_VPrintTarget+0x1b2>
          c = *sFormat;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3301      	adds	r3, #1
 800641a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800641c:	e7ef      	b.n	80063fe <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800641e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006422:	2b25      	cmp	r3, #37	@ 0x25
 8006424:	f000 80d8 	beq.w	80065d8 <_VPrintTarget+0x36c>
 8006428:	2b25      	cmp	r3, #37	@ 0x25
 800642a:	f2c0 80dc 	blt.w	80065e6 <_VPrintTarget+0x37a>
 800642e:	2b78      	cmp	r3, #120	@ 0x78
 8006430:	f300 80d9 	bgt.w	80065e6 <_VPrintTarget+0x37a>
 8006434:	2b58      	cmp	r3, #88	@ 0x58
 8006436:	f2c0 80d6 	blt.w	80065e6 <_VPrintTarget+0x37a>
 800643a:	3b58      	subs	r3, #88	@ 0x58
 800643c:	2b20      	cmp	r3, #32
 800643e:	f200 80d2 	bhi.w	80065e6 <_VPrintTarget+0x37a>
 8006442:	a201      	add	r2, pc, #4	@ (adr r2, 8006448 <_VPrintTarget+0x1dc>)
 8006444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006448:	0800653f 	.word	0x0800653f
 800644c:	080065e7 	.word	0x080065e7
 8006450:	080065e7 	.word	0x080065e7
 8006454:	080065e7 	.word	0x080065e7
 8006458:	080065e7 	.word	0x080065e7
 800645c:	080065e7 	.word	0x080065e7
 8006460:	080065e7 	.word	0x080065e7
 8006464:	080065e7 	.word	0x080065e7
 8006468:	080065e7 	.word	0x080065e7
 800646c:	080065e7 	.word	0x080065e7
 8006470:	080065e7 	.word	0x080065e7
 8006474:	080064cd 	.word	0x080064cd
 8006478:	080064f3 	.word	0x080064f3
 800647c:	080065e7 	.word	0x080065e7
 8006480:	080065e7 	.word	0x080065e7
 8006484:	080065e7 	.word	0x080065e7
 8006488:	080065e7 	.word	0x080065e7
 800648c:	080065e7 	.word	0x080065e7
 8006490:	080065e7 	.word	0x080065e7
 8006494:	080065e7 	.word	0x080065e7
 8006498:	080065e7 	.word	0x080065e7
 800649c:	080065e7 	.word	0x080065e7
 80064a0:	080065e7 	.word	0x080065e7
 80064a4:	080065e7 	.word	0x080065e7
 80064a8:	080065b3 	.word	0x080065b3
 80064ac:	080065e7 	.word	0x080065e7
 80064b0:	080065e7 	.word	0x080065e7
 80064b4:	08006569 	.word	0x08006569
 80064b8:	080065e7 	.word	0x080065e7
 80064bc:	08006519 	.word	0x08006519
 80064c0:	080065e7 	.word	0x080065e7
 80064c4:	080065e7 	.word	0x080065e7
 80064c8:	0800653f 	.word	0x0800653f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	1d19      	adds	r1, r3, #4
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	6011      	str	r1, [r2, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 80064da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 80064e0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80064e4:	f107 0310 	add.w	r3, r7, #16
 80064e8:	4611      	mov	r1, r2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7ff fd1c 	bl	8005f28 <_StoreChar>
        break;
 80064f0:	e07a      	b.n	80065e8 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	1d19      	adds	r1, r3, #4
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	6011      	str	r1, [r2, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006500:	f107 0010 	add.w	r0, r7, #16
 8006504:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006506:	9301      	str	r3, [sp, #4]
 8006508:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800650e:	220a      	movs	r2, #10
 8006510:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006512:	f7ff fe1b 	bl	800614c <_PrintInt>
        break;
 8006516:	e067      	b.n	80065e8 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	1d19      	adds	r1, r3, #4
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	6011      	str	r1, [r2, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006526:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006528:	f107 0010 	add.w	r0, r7, #16
 800652c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800652e:	9301      	str	r3, [sp, #4]
 8006530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006536:	220a      	movs	r2, #10
 8006538:	f7ff fd72 	bl	8006020 <_PrintUnsigned>
        break;
 800653c:	e054      	b.n	80065e8 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	1d19      	adds	r1, r3, #4
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6011      	str	r1, [r2, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800654c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800654e:	f107 0010 	add.w	r0, r7, #16
 8006552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006554:	9301      	str	r3, [sp, #4]
 8006556:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800655c:	2210      	movs	r2, #16
 800655e:	f7ff fd5f 	bl	8006020 <_PrintUnsigned>
        break;
 8006562:	e041      	b.n	80065e8 <_VPrintTarget+0x37c>
 8006564:	2000c3c8 	.word	0x2000c3c8
      case 's':
        s = va_arg(*pParamList, const char*);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	1d19      	adds	r1, r3, #4
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	6011      	str	r1, [r2, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8006576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <_VPrintTarget+0x314>
          s = "(null)";
 800657c:	4b4a      	ldr	r3, [pc, #296]	@ (80066a8 <_VPrintTarget+0x43c>)
 800657e:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8006580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8006588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800658a:	3301      	adds	r3, #1
 800658c:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 800658e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00b      	beq.n	80065ae <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8006596:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800659a:	f107 0310 	add.w	r3, r7, #16
 800659e:	4611      	mov	r1, r2
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff fcc1 	bl	8005f28 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80065aa:	d9e9      	bls.n	8006580 <_VPrintTarget+0x314>
        break;
 80065ac:	e01c      	b.n	80065e8 <_VPrintTarget+0x37c>
            break;
 80065ae:	bf00      	nop
        break;
 80065b0:	e01a      	b.n	80065e8 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	1d19      	adds	r1, r3, #4
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	6011      	str	r1, [r2, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80065c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80065c2:	f107 0010 	add.w	r0, r7, #16
 80065c6:	2300      	movs	r3, #0
 80065c8:	9301      	str	r3, [sp, #4]
 80065ca:	2308      	movs	r3, #8
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	2308      	movs	r3, #8
 80065d0:	2210      	movs	r2, #16
 80065d2:	f7ff fd25 	bl	8006020 <_PrintUnsigned>
        break;
 80065d6:	e007      	b.n	80065e8 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80065d8:	f107 0310 	add.w	r3, r7, #16
 80065dc:	2125      	movs	r1, #37	@ 0x25
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff fca2 	bl	8005f28 <_StoreChar>
        break;
 80065e4:	e000      	b.n	80065e8 <_VPrintTarget+0x37c>
      default:
        break;
 80065e6:	bf00      	nop
      }
      sFormat++;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3301      	adds	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	e007      	b.n	8006600 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80065f0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80065f4:	f107 0310 	add.w	r3, r7, #16
 80065f8:	4611      	mov	r1, r2
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7ff fc94 	bl	8005f28 <_StoreChar>
    }
  } while (*sFormat);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f47f ae4d 	bne.w	80062a4 <_VPrintTarget+0x38>
 800660a:	e000      	b.n	800660e <_VPrintTarget+0x3a2>
      break;
 800660c:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d041      	beq.n	8006698 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006614:	6a3a      	ldr	r2, [r7, #32]
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	b2d2      	uxtb	r2, r2
 800661a:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006624:	e00b      	b.n	800663e <_VPrintTarget+0x3d2>
 8006626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006628:	b2da      	uxtb	r2, r3
 800662a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800662c:	1c59      	adds	r1, r3, #1
 800662e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006630:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663a:	09db      	lsrs	r3, r3, #7
 800663c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800663e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006640:	2b7f      	cmp	r3, #127	@ 0x7f
 8006642:	d8f0      	bhi.n	8006626 <_VPrintTarget+0x3ba>
 8006644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800664a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	701a      	strb	r2, [r3, #0]
 8006650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006652:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	637b      	str	r3, [r7, #52]	@ 0x34
 8006658:	2300      	movs	r3, #0
 800665a:	633b      	str	r3, [r7, #48]	@ 0x30
 800665c:	e00b      	b.n	8006676 <_VPrintTarget+0x40a>
 800665e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006660:	b2da      	uxtb	r2, r3
 8006662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006664:	1c59      	adds	r1, r3, #1
 8006666:	6379      	str	r1, [r7, #52]	@ 0x34
 8006668:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006672:	09db      	lsrs	r3, r3, #7
 8006674:	633b      	str	r3, [r7, #48]	@ 0x30
 8006676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006678:	2b7f      	cmp	r3, #127	@ 0x7f
 800667a:	d8f0      	bhi.n	800665e <_VPrintTarget+0x3f2>
 800667c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	637a      	str	r2, [r7, #52]	@ 0x34
 8006682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006684:	b2d2      	uxtb	r2, r2
 8006686:	701a      	strb	r2, [r3, #0]
 8006688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800668a:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	6979      	ldr	r1, [r7, #20]
 8006690:	221a      	movs	r2, #26
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff fada 	bl	8005c4c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800669a:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800669e:	bf00      	nop
 80066a0:	3758      	adds	r7, #88	@ 0x58
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	080077fc 	.word	0x080077fc

080066ac <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af02      	add	r7, sp, #8
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80066ba:	2300      	movs	r3, #0
 80066bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80066c0:	4917      	ldr	r1, [pc, #92]	@ (8006720 <SEGGER_SYSVIEW_Init+0x74>)
 80066c2:	4818      	ldr	r0, [pc, #96]	@ (8006724 <SEGGER_SYSVIEW_Init+0x78>)
 80066c4:	f7ff f8d6 	bl	8005874 <SEGGER_RTT_AllocUpBuffer>
 80066c8:	4603      	mov	r3, r0
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	4b16      	ldr	r3, [pc, #88]	@ (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 80066ce:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80066d0:	4b15      	ldr	r3, [pc, #84]	@ (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 80066d2:	785a      	ldrb	r2, [r3, #1]
 80066d4:	4b14      	ldr	r3, [pc, #80]	@ (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 80066d6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80066d8:	4b13      	ldr	r3, [pc, #76]	@ (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 80066da:	7e1b      	ldrb	r3, [r3, #24]
 80066dc:	4618      	mov	r0, r3
 80066de:	2300      	movs	r3, #0
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	2308      	movs	r3, #8
 80066e4:	4a11      	ldr	r2, [pc, #68]	@ (800672c <SEGGER_SYSVIEW_Init+0x80>)
 80066e6:	490f      	ldr	r1, [pc, #60]	@ (8006724 <SEGGER_SYSVIEW_Init+0x78>)
 80066e8:	f7ff f948 	bl	800597c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80066ec:	4b0e      	ldr	r3, [pc, #56]	@ (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80066f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006730 <SEGGER_SYSVIEW_Init+0x84>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 80066f8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80066fa:	4a0b      	ldr	r2, [pc, #44]	@ (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006700:	4a09      	ldr	r2, [pc, #36]	@ (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006706:	4a08      	ldr	r2, [pc, #32]	@ (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800670c:	4a06      	ldr	r2, [pc, #24]	@ (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006712:	4b05      	ldr	r3, [pc, #20]	@ (8006728 <SEGGER_SYSVIEW_Init+0x7c>)
 8006714:	2200      	movs	r2, #0
 8006716:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006718:	bf00      	nop
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	2000bf90 	.word	0x2000bf90
 8006724:	08007804 	.word	0x08007804
 8006728:	2000c398 	.word	0x2000c398
 800672c:	2000c390 	.word	0x2000c390
 8006730:	e0001004 	.word	0xe0001004

08006734 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800673c:	4a04      	ldr	r2, [pc, #16]	@ (8006750 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6113      	str	r3, [r2, #16]
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	2000c398 	.word	0x2000c398

08006754 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800675c:	f3ef 8311 	mrs	r3, BASEPRI
 8006760:	f04f 0120 	mov.w	r1, #32
 8006764:	f381 8811 	msr	BASEPRI, r1
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	4808      	ldr	r0, [pc, #32]	@ (800678c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800676c:	f7ff f982 	bl	8005a74 <_PreparePacket>
 8006770:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	68b9      	ldr	r1, [r7, #8]
 8006776:	68b8      	ldr	r0, [r7, #8]
 8006778:	f7ff fa68 	bl	8005c4c <_SendPacket>
  RECORD_END();
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f383 8811 	msr	BASEPRI, r3
}
 8006782:	bf00      	nop
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	2000c3c8 	.word	0x2000c3c8

08006790 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800679a:	f3ef 8311 	mrs	r3, BASEPRI
 800679e:	f04f 0120 	mov.w	r1, #32
 80067a2:	f381 8811 	msr	BASEPRI, r1
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	4816      	ldr	r0, [pc, #88]	@ (8006804 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80067aa:	f7ff f963 	bl	8005a74 <_PreparePacket>
 80067ae:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	61fb      	str	r3, [r7, #28]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	61bb      	str	r3, [r7, #24]
 80067bc:	e00b      	b.n	80067d6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	1c59      	adds	r1, r3, #1
 80067c6:	61f9      	str	r1, [r7, #28]
 80067c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067cc:	b2d2      	uxtb	r2, r2
 80067ce:	701a      	strb	r2, [r3, #0]
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	09db      	lsrs	r3, r3, #7
 80067d4:	61bb      	str	r3, [r7, #24]
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80067da:	d8f0      	bhi.n	80067be <SEGGER_SYSVIEW_RecordU32+0x2e>
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	61fa      	str	r2, [r7, #28]
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	b2d2      	uxtb	r2, r2
 80067e6:	701a      	strb	r2, [r3, #0]
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	68f9      	ldr	r1, [r7, #12]
 80067f0:	6938      	ldr	r0, [r7, #16]
 80067f2:	f7ff fa2b 	bl	8005c4c <_SendPacket>
  RECORD_END();
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f383 8811 	msr	BASEPRI, r3
}
 80067fc:	bf00      	nop
 80067fe:	3720      	adds	r7, #32
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	2000c3c8 	.word	0x2000c3c8

08006808 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006808:	b580      	push	{r7, lr}
 800680a:	b08c      	sub	sp, #48	@ 0x30
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006814:	f3ef 8311 	mrs	r3, BASEPRI
 8006818:	f04f 0120 	mov.w	r1, #32
 800681c:	f381 8811 	msr	BASEPRI, r1
 8006820:	61fb      	str	r3, [r7, #28]
 8006822:	4825      	ldr	r0, [pc, #148]	@ (80068b8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006824:	f7ff f926 	bl	8005a74 <_PreparePacket>
 8006828:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006836:	e00b      	b.n	8006850 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683a:	b2da      	uxtb	r2, r3
 800683c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800683e:	1c59      	adds	r1, r3, #1
 8006840:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006842:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800684c:	09db      	lsrs	r3, r3, #7
 800684e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006852:	2b7f      	cmp	r3, #127	@ 0x7f
 8006854:	d8f0      	bhi.n	8006838 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800685c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	701a      	strb	r2, [r3, #0]
 8006862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006864:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	627b      	str	r3, [r7, #36]	@ 0x24
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	623b      	str	r3, [r7, #32]
 800686e:	e00b      	b.n	8006888 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	b2da      	uxtb	r2, r3
 8006874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006876:	1c59      	adds	r1, r3, #1
 8006878:	6279      	str	r1, [r7, #36]	@ 0x24
 800687a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800687e:	b2d2      	uxtb	r2, r2
 8006880:	701a      	strb	r2, [r3, #0]
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	09db      	lsrs	r3, r3, #7
 8006886:	623b      	str	r3, [r7, #32]
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	2b7f      	cmp	r3, #127	@ 0x7f
 800688c:	d8f0      	bhi.n	8006870 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	627a      	str	r2, [r7, #36]	@ 0x24
 8006894:	6a3a      	ldr	r2, [r7, #32]
 8006896:	b2d2      	uxtb	r2, r2
 8006898:	701a      	strb	r2, [r3, #0]
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	6979      	ldr	r1, [r7, #20]
 80068a2:	69b8      	ldr	r0, [r7, #24]
 80068a4:	f7ff f9d2 	bl	8005c4c <_SendPacket>
  RECORD_END();
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	f383 8811 	msr	BASEPRI, r3
}
 80068ae:	bf00      	nop
 80068b0:	3730      	adds	r7, #48	@ 0x30
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	2000c3c8 	.word	0x2000c3c8

080068bc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08c      	sub	sp, #48	@ 0x30
 80068c0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80068c2:	4b58      	ldr	r3, [pc, #352]	@ (8006a24 <SEGGER_SYSVIEW_Start+0x168>)
 80068c4:	2201      	movs	r2, #1
 80068c6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80068c8:	f3ef 8311 	mrs	r3, BASEPRI
 80068cc:	f04f 0120 	mov.w	r1, #32
 80068d0:	f381 8811 	msr	BASEPRI, r1
 80068d4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80068d6:	4b53      	ldr	r3, [pc, #332]	@ (8006a24 <SEGGER_SYSVIEW_Start+0x168>)
 80068d8:	785b      	ldrb	r3, [r3, #1]
 80068da:	220a      	movs	r2, #10
 80068dc:	4952      	ldr	r1, [pc, #328]	@ (8006a28 <SEGGER_SYSVIEW_Start+0x16c>)
 80068de:	4618      	mov	r0, r3
 80068e0:	f7f9 fcae 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80068ea:	200a      	movs	r0, #10
 80068ec:	f7ff ff32 	bl	8006754 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80068f0:	f3ef 8311 	mrs	r3, BASEPRI
 80068f4:	f04f 0120 	mov.w	r1, #32
 80068f8:	f381 8811 	msr	BASEPRI, r1
 80068fc:	60bb      	str	r3, [r7, #8]
 80068fe:	484b      	ldr	r0, [pc, #300]	@ (8006a2c <SEGGER_SYSVIEW_Start+0x170>)
 8006900:	f7ff f8b8 	bl	8005a74 <_PreparePacket>
 8006904:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800690e:	4b45      	ldr	r3, [pc, #276]	@ (8006a24 <SEGGER_SYSVIEW_Start+0x168>)
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006914:	e00b      	b.n	800692e <SEGGER_SYSVIEW_Start+0x72>
 8006916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006918:	b2da      	uxtb	r2, r3
 800691a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800691c:	1c59      	adds	r1, r3, #1
 800691e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006920:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692a:	09db      	lsrs	r3, r3, #7
 800692c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800692e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006930:	2b7f      	cmp	r3, #127	@ 0x7f
 8006932:	d8f0      	bhi.n	8006916 <SEGGER_SYSVIEW_Start+0x5a>
 8006934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006936:	1c5a      	adds	r2, r3, #1
 8006938:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800693a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800693c:	b2d2      	uxtb	r2, r2
 800693e:	701a      	strb	r2, [r3, #0]
 8006940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006942:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	627b      	str	r3, [r7, #36]	@ 0x24
 8006948:	4b36      	ldr	r3, [pc, #216]	@ (8006a24 <SEGGER_SYSVIEW_Start+0x168>)
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	623b      	str	r3, [r7, #32]
 800694e:	e00b      	b.n	8006968 <SEGGER_SYSVIEW_Start+0xac>
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	b2da      	uxtb	r2, r3
 8006954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006956:	1c59      	adds	r1, r3, #1
 8006958:	6279      	str	r1, [r7, #36]	@ 0x24
 800695a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	701a      	strb	r2, [r3, #0]
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	09db      	lsrs	r3, r3, #7
 8006966:	623b      	str	r3, [r7, #32]
 8006968:	6a3b      	ldr	r3, [r7, #32]
 800696a:	2b7f      	cmp	r3, #127	@ 0x7f
 800696c:	d8f0      	bhi.n	8006950 <SEGGER_SYSVIEW_Start+0x94>
 800696e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	627a      	str	r2, [r7, #36]	@ 0x24
 8006974:	6a3a      	ldr	r2, [r7, #32]
 8006976:	b2d2      	uxtb	r2, r2
 8006978:	701a      	strb	r2, [r3, #0]
 800697a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	61fb      	str	r3, [r7, #28]
 8006982:	4b28      	ldr	r3, [pc, #160]	@ (8006a24 <SEGGER_SYSVIEW_Start+0x168>)
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	61bb      	str	r3, [r7, #24]
 8006988:	e00b      	b.n	80069a2 <SEGGER_SYSVIEW_Start+0xe6>
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	b2da      	uxtb	r2, r3
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	1c59      	adds	r1, r3, #1
 8006992:	61f9      	str	r1, [r7, #28]
 8006994:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006998:	b2d2      	uxtb	r2, r2
 800699a:	701a      	strb	r2, [r3, #0]
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	09db      	lsrs	r3, r3, #7
 80069a0:	61bb      	str	r3, [r7, #24]
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80069a6:	d8f0      	bhi.n	800698a <SEGGER_SYSVIEW_Start+0xce>
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	1c5a      	adds	r2, r3, #1
 80069ac:	61fa      	str	r2, [r7, #28]
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	b2d2      	uxtb	r2, r2
 80069b2:	701a      	strb	r2, [r3, #0]
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	2300      	movs	r3, #0
 80069be:	613b      	str	r3, [r7, #16]
 80069c0:	e00b      	b.n	80069da <SEGGER_SYSVIEW_Start+0x11e>
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	1c59      	adds	r1, r3, #1
 80069ca:	6179      	str	r1, [r7, #20]
 80069cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069d0:	b2d2      	uxtb	r2, r2
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	09db      	lsrs	r3, r3, #7
 80069d8:	613b      	str	r3, [r7, #16]
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80069de:	d8f0      	bhi.n	80069c2 <SEGGER_SYSVIEW_Start+0x106>
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	1c5a      	adds	r2, r3, #1
 80069e4:	617a      	str	r2, [r7, #20]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	b2d2      	uxtb	r2, r2
 80069ea:	701a      	strb	r2, [r3, #0]
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80069f0:	2218      	movs	r2, #24
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7ff f929 	bl	8005c4c <_SendPacket>
      RECORD_END();
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006a00:	4b08      	ldr	r3, [pc, #32]	@ (8006a24 <SEGGER_SYSVIEW_Start+0x168>)
 8006a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006a08:	4b06      	ldr	r3, [pc, #24]	@ (8006a24 <SEGGER_SYSVIEW_Start+0x168>)
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006a0e:	f000 f9eb 	bl	8006de8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006a12:	f000 f9b1 	bl	8006d78 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006a16:	f000 fd21 	bl	800745c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006a1a:	bf00      	nop
 8006a1c:	3730      	adds	r7, #48	@ 0x30
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	2000c398 	.word	0x2000c398
 8006a28:	08007844 	.word	0x08007844
 8006a2c:	2000c3c8 	.word	0x2000c3c8

08006a30 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a36:	f3ef 8311 	mrs	r3, BASEPRI
 8006a3a:	f04f 0120 	mov.w	r1, #32
 8006a3e:	f381 8811 	msr	BASEPRI, r1
 8006a42:	607b      	str	r3, [r7, #4]
 8006a44:	480b      	ldr	r0, [pc, #44]	@ (8006a74 <SEGGER_SYSVIEW_Stop+0x44>)
 8006a46:	f7ff f815 	bl	8005a74 <_PreparePacket>
 8006a4a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a78 <SEGGER_SYSVIEW_Stop+0x48>)
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d007      	beq.n	8006a64 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006a54:	220b      	movs	r2, #11
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	6838      	ldr	r0, [r7, #0]
 8006a5a:	f7ff f8f7 	bl	8005c4c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006a5e:	4b06      	ldr	r3, [pc, #24]	@ (8006a78 <SEGGER_SYSVIEW_Stop+0x48>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f383 8811 	msr	BASEPRI, r3
}
 8006a6a:	bf00      	nop
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	2000c3c8 	.word	0x2000c3c8
 8006a78:	2000c398 	.word	0x2000c398

08006a7c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08c      	sub	sp, #48	@ 0x30
 8006a80:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a82:	f3ef 8311 	mrs	r3, BASEPRI
 8006a86:	f04f 0120 	mov.w	r1, #32
 8006a8a:	f381 8811 	msr	BASEPRI, r1
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	4845      	ldr	r0, [pc, #276]	@ (8006ba8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006a92:	f7fe ffef 	bl	8005a74 <_PreparePacket>
 8006a96:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006aa0:	4b42      	ldr	r3, [pc, #264]	@ (8006bac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aa6:	e00b      	b.n	8006ac0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aae:	1c59      	adds	r1, r3, #1
 8006ab0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006ab2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	701a      	strb	r2, [r3, #0]
 8006aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006abc:	09db      	lsrs	r3, r3, #7
 8006abe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ac4:	d8f0      	bhi.n	8006aa8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006acc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]
 8006ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ada:	4b34      	ldr	r3, [pc, #208]	@ (8006bac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	623b      	str	r3, [r7, #32]
 8006ae0:	e00b      	b.n	8006afa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	1c59      	adds	r1, r3, #1
 8006aea:	6279      	str	r1, [r7, #36]	@ 0x24
 8006aec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	701a      	strb	r2, [r3, #0]
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	09db      	lsrs	r3, r3, #7
 8006af8:	623b      	str	r3, [r7, #32]
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006afe:	d8f0      	bhi.n	8006ae2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b06:	6a3a      	ldr	r2, [r7, #32]
 8006b08:	b2d2      	uxtb	r2, r2
 8006b0a:	701a      	strb	r2, [r3, #0]
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	61fb      	str	r3, [r7, #28]
 8006b14:	4b25      	ldr	r3, [pc, #148]	@ (8006bac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	61bb      	str	r3, [r7, #24]
 8006b1a:	e00b      	b.n	8006b34 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	1c59      	adds	r1, r3, #1
 8006b24:	61f9      	str	r1, [r7, #28]
 8006b26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	701a      	strb	r2, [r3, #0]
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	09db      	lsrs	r3, r3, #7
 8006b32:	61bb      	str	r3, [r7, #24]
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b38:	d8f0      	bhi.n	8006b1c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	61fa      	str	r2, [r7, #28]
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	617b      	str	r3, [r7, #20]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	613b      	str	r3, [r7, #16]
 8006b52:	e00b      	b.n	8006b6c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	1c59      	adds	r1, r3, #1
 8006b5c:	6179      	str	r1, [r7, #20]
 8006b5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b62:	b2d2      	uxtb	r2, r2
 8006b64:	701a      	strb	r2, [r3, #0]
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	09db      	lsrs	r3, r3, #7
 8006b6a:	613b      	str	r3, [r7, #16]
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b70:	d8f0      	bhi.n	8006b54 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	617a      	str	r2, [r7, #20]
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	b2d2      	uxtb	r2, r2
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006b82:	2218      	movs	r2, #24
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	68b8      	ldr	r0, [r7, #8]
 8006b88:	f7ff f860 	bl	8005c4c <_SendPacket>
  RECORD_END();
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006b92:	4b06      	ldr	r3, [pc, #24]	@ (8006bac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d002      	beq.n	8006ba0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006b9a:	4b04      	ldr	r3, [pc, #16]	@ (8006bac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9e:	4798      	blx	r3
  }
}
 8006ba0:	bf00      	nop
 8006ba2:	3730      	adds	r7, #48	@ 0x30
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	2000c3c8 	.word	0x2000c3c8
 8006bac:	2000c398 	.word	0x2000c398

08006bb0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b092      	sub	sp, #72	@ 0x48
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006bb8:	f3ef 8311 	mrs	r3, BASEPRI
 8006bbc:	f04f 0120 	mov.w	r1, #32
 8006bc0:	f381 8811 	msr	BASEPRI, r1
 8006bc4:	617b      	str	r3, [r7, #20]
 8006bc6:	486a      	ldr	r0, [pc, #424]	@ (8006d70 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006bc8:	f7fe ff54 	bl	8005a74 <_PreparePacket>
 8006bcc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	4b66      	ldr	r3, [pc, #408]	@ (8006d74 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006be2:	e00b      	b.n	8006bfc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006be4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bea:	1c59      	adds	r1, r3, #1
 8006bec:	6479      	str	r1, [r7, #68]	@ 0x44
 8006bee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bf2:	b2d2      	uxtb	r2, r2
 8006bf4:	701a      	strb	r2, [r3, #0]
 8006bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bf8:	09db      	lsrs	r3, r3, #7
 8006bfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c00:	d8f0      	bhi.n	8006be4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c04:	1c5a      	adds	r2, r3, #1
 8006c06:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c0a:	b2d2      	uxtb	r2, r2
 8006c0c:	701a      	strb	r2, [r3, #0]
 8006c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c1c:	e00b      	b.n	8006c36 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c24:	1c59      	adds	r1, r3, #1
 8006c26:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006c28:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	701a      	strb	r2, [r3, #0]
 8006c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c32:	09db      	lsrs	r3, r3, #7
 8006c34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c38:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c3a:	d8f0      	bhi.n	8006c1e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c4a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	2220      	movs	r2, #32
 8006c52:	4619      	mov	r1, r3
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f7fe fedd 	bl	8005a14 <_EncodeStr>
 8006c5a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006c5c:	2209      	movs	r2, #9
 8006c5e:	68f9      	ldr	r1, [r7, #12]
 8006c60:	6938      	ldr	r0, [r7, #16]
 8006c62:	f7fe fff3 	bl	8005c4c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	4b40      	ldr	r3, [pc, #256]	@ (8006d74 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c7a:	e00b      	b.n	8006c94 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c82:	1c59      	adds	r1, r3, #1
 8006c84:	6379      	str	r1, [r7, #52]	@ 0x34
 8006c86:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c90:	09db      	lsrs	r3, r3, #7
 8006c92:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c96:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c98:	d8f0      	bhi.n	8006c7c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ca2:	b2d2      	uxtb	r2, r2
 8006ca4:	701a      	strb	r2, [r3, #0]
 8006ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cb4:	e00b      	b.n	8006cce <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cbc:	1c59      	adds	r1, r3, #1
 8006cbe:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006cc0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cc4:	b2d2      	uxtb	r2, r2
 8006cc6:	701a      	strb	r2, [r3, #0]
 8006cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cca:	09db      	lsrs	r3, r3, #7
 8006ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cd2:	d8f0      	bhi.n	8006cb6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd6:	1c5a      	adds	r2, r3, #1
 8006cd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cdc:	b2d2      	uxtb	r2, r2
 8006cde:	701a      	strb	r2, [r3, #0]
 8006ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	623b      	str	r3, [r7, #32]
 8006cee:	e00b      	b.n	8006d08 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf6:	1c59      	adds	r1, r3, #1
 8006cf8:	6279      	str	r1, [r7, #36]	@ 0x24
 8006cfa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	09db      	lsrs	r3, r3, #7
 8006d06:	623b      	str	r3, [r7, #32]
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d0c:	d8f0      	bhi.n	8006cf0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d14:	6a3a      	ldr	r2, [r7, #32]
 8006d16:	b2d2      	uxtb	r2, r2
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	61fb      	str	r3, [r7, #28]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	61bb      	str	r3, [r7, #24]
 8006d28:	e00b      	b.n	8006d42 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	1c59      	adds	r1, r3, #1
 8006d32:	61f9      	str	r1, [r7, #28]
 8006d34:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d38:	b2d2      	uxtb	r2, r2
 8006d3a:	701a      	strb	r2, [r3, #0]
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	09db      	lsrs	r3, r3, #7
 8006d40:	61bb      	str	r3, [r7, #24]
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d46:	d8f0      	bhi.n	8006d2a <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	61fa      	str	r2, [r7, #28]
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	701a      	strb	r2, [r3, #0]
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006d58:	2215      	movs	r2, #21
 8006d5a:	68f9      	ldr	r1, [r7, #12]
 8006d5c:	6938      	ldr	r0, [r7, #16]
 8006d5e:	f7fe ff75 	bl	8005c4c <_SendPacket>
  RECORD_END();
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f383 8811 	msr	BASEPRI, r3
}
 8006d68:	bf00      	nop
 8006d6a:	3748      	adds	r7, #72	@ 0x48
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	2000c3c8 	.word	0x2000c3c8
 8006d74:	2000c398 	.word	0x2000c398

08006d78 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006d7c:	4b07      	ldr	r3, [pc, #28]	@ (8006d9c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d008      	beq.n	8006d96 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006d84:	4b05      	ldr	r3, [pc, #20]	@ (8006d9c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006d8e:	4b03      	ldr	r3, [pc, #12]	@ (8006d9c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	4798      	blx	r3
  }
}
 8006d96:	bf00      	nop
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	2000c398 	.word	0x2000c398

08006da0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006da8:	f3ef 8311 	mrs	r3, BASEPRI
 8006dac:	f04f 0120 	mov.w	r1, #32
 8006db0:	f381 8811 	msr	BASEPRI, r1
 8006db4:	617b      	str	r3, [r7, #20]
 8006db6:	480b      	ldr	r0, [pc, #44]	@ (8006de4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006db8:	f7fe fe5c 	bl	8005a74 <_PreparePacket>
 8006dbc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dbe:	2280      	movs	r2, #128	@ 0x80
 8006dc0:	6879      	ldr	r1, [r7, #4]
 8006dc2:	6938      	ldr	r0, [r7, #16]
 8006dc4:	f7fe fe26 	bl	8005a14 <_EncodeStr>
 8006dc8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006dca:	220e      	movs	r2, #14
 8006dcc:	68f9      	ldr	r1, [r7, #12]
 8006dce:	6938      	ldr	r0, [r7, #16]
 8006dd0:	f7fe ff3c 	bl	8005c4c <_SendPacket>
  RECORD_END();
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f383 8811 	msr	BASEPRI, r3
}
 8006dda:	bf00      	nop
 8006ddc:	3718      	adds	r7, #24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	2000c3c8 	.word	0x2000c3c8

08006de8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006de8:	b590      	push	{r4, r7, lr}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006dee:	4b15      	ldr	r3, [pc, #84]	@ (8006e44 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d01a      	beq.n	8006e2c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006df6:	4b13      	ldr	r3, [pc, #76]	@ (8006e44 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d015      	beq.n	8006e2c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006e00:	4b10      	ldr	r3, [pc, #64]	@ (8006e44 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4798      	blx	r3
 8006e08:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006e0c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006e0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e12:	f04f 0200 	mov.w	r2, #0
 8006e16:	f04f 0300 	mov.w	r3, #0
 8006e1a:	000a      	movs	r2, r1
 8006e1c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006e1e:	4613      	mov	r3, r2
 8006e20:	461a      	mov	r2, r3
 8006e22:	4621      	mov	r1, r4
 8006e24:	200d      	movs	r0, #13
 8006e26:	f7ff fcef 	bl	8006808 <SEGGER_SYSVIEW_RecordU32x2>
 8006e2a:	e006      	b.n	8006e3a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006e2c:	4b06      	ldr	r3, [pc, #24]	@ (8006e48 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4619      	mov	r1, r3
 8006e32:	200c      	movs	r0, #12
 8006e34:	f7ff fcac 	bl	8006790 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006e38:	bf00      	nop
 8006e3a:	bf00      	nop
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd90      	pop	{r4, r7, pc}
 8006e42:	bf00      	nop
 8006e44:	2000c398 	.word	0x2000c398
 8006e48:	e0001004 	.word	0xe0001004

08006e4c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e52:	f3ef 8311 	mrs	r3, BASEPRI
 8006e56:	f04f 0120 	mov.w	r1, #32
 8006e5a:	f381 8811 	msr	BASEPRI, r1
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	4819      	ldr	r0, [pc, #100]	@ (8006ec8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006e62:	f7fe fe07 	bl	8005a74 <_PreparePacket>
 8006e66:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006e6c:	4b17      	ldr	r3, [pc, #92]	@ (8006ecc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e74:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	613b      	str	r3, [r7, #16]
 8006e7e:	e00b      	b.n	8006e98 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	1c59      	adds	r1, r3, #1
 8006e88:	6179      	str	r1, [r7, #20]
 8006e8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e8e:	b2d2      	uxtb	r2, r2
 8006e90:	701a      	strb	r2, [r3, #0]
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	09db      	lsrs	r3, r3, #7
 8006e96:	613b      	str	r3, [r7, #16]
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e9c:	d8f0      	bhi.n	8006e80 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	617a      	str	r2, [r7, #20]
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	b2d2      	uxtb	r2, r2
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006eae:	2202      	movs	r2, #2
 8006eb0:	6879      	ldr	r1, [r7, #4]
 8006eb2:	68b8      	ldr	r0, [r7, #8]
 8006eb4:	f7fe feca 	bl	8005c4c <_SendPacket>
  RECORD_END();
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f383 8811 	msr	BASEPRI, r3
}
 8006ebe:	bf00      	nop
 8006ec0:	3718      	adds	r7, #24
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	2000c3c8 	.word	0x2000c3c8
 8006ecc:	e000ed04 	.word	0xe000ed04

08006ed0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ed6:	f3ef 8311 	mrs	r3, BASEPRI
 8006eda:	f04f 0120 	mov.w	r1, #32
 8006ede:	f381 8811 	msr	BASEPRI, r1
 8006ee2:	607b      	str	r3, [r7, #4]
 8006ee4:	4807      	ldr	r0, [pc, #28]	@ (8006f04 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006ee6:	f7fe fdc5 	bl	8005a74 <_PreparePacket>
 8006eea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006eec:	2203      	movs	r2, #3
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6838      	ldr	r0, [r7, #0]
 8006ef2:	f7fe feab 	bl	8005c4c <_SendPacket>
  RECORD_END();
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f383 8811 	msr	BASEPRI, r3
}
 8006efc:	bf00      	nop
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	2000c3c8 	.word	0x2000c3c8

08006f08 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f0e:	f3ef 8311 	mrs	r3, BASEPRI
 8006f12:	f04f 0120 	mov.w	r1, #32
 8006f16:	f381 8811 	msr	BASEPRI, r1
 8006f1a:	607b      	str	r3, [r7, #4]
 8006f1c:	4807      	ldr	r0, [pc, #28]	@ (8006f3c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006f1e:	f7fe fda9 	bl	8005a74 <_PreparePacket>
 8006f22:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006f24:	2212      	movs	r2, #18
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	6838      	ldr	r0, [r7, #0]
 8006f2a:	f7fe fe8f 	bl	8005c4c <_SendPacket>
  RECORD_END();
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f383 8811 	msr	BASEPRI, r3
}
 8006f34:	bf00      	nop
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	2000c3c8 	.word	0x2000c3c8

08006f40 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b088      	sub	sp, #32
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f48:	f3ef 8311 	mrs	r3, BASEPRI
 8006f4c:	f04f 0120 	mov.w	r1, #32
 8006f50:	f381 8811 	msr	BASEPRI, r1
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	4817      	ldr	r0, [pc, #92]	@ (8006fb4 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006f58:	f7fe fd8c 	bl	8005a74 <_PreparePacket>
 8006f5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	61fb      	str	r3, [r7, #28]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	61bb      	str	r3, [r7, #24]
 8006f6a:	e00b      	b.n	8006f84 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	1c59      	adds	r1, r3, #1
 8006f74:	61f9      	str	r1, [r7, #28]
 8006f76:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f7a:	b2d2      	uxtb	r2, r2
 8006f7c:	701a      	strb	r2, [r3, #0]
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	09db      	lsrs	r3, r3, #7
 8006f82:	61bb      	str	r3, [r7, #24]
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f88:	d8f0      	bhi.n	8006f6c <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	1c5a      	adds	r2, r3, #1
 8006f8e:	61fa      	str	r2, [r7, #28]
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	701a      	strb	r2, [r3, #0]
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006f9a:	221c      	movs	r2, #28
 8006f9c:	68f9      	ldr	r1, [r7, #12]
 8006f9e:	6938      	ldr	r0, [r7, #16]
 8006fa0:	f7fe fe54 	bl	8005c4c <_SendPacket>
  RECORD_END();
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f383 8811 	msr	BASEPRI, r3
}
 8006faa:	bf00      	nop
 8006fac:	3720      	adds	r7, #32
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	2000c3c8 	.word	0x2000c3c8

08006fb8 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b08a      	sub	sp, #40	@ 0x28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006fc2:	f3ef 8311 	mrs	r3, BASEPRI
 8006fc6:	f04f 0120 	mov.w	r1, #32
 8006fca:	f381 8811 	msr	BASEPRI, r1
 8006fce:	617b      	str	r3, [r7, #20]
 8006fd0:	4824      	ldr	r0, [pc, #144]	@ (8007064 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8006fd2:	f7fe fd4f 	bl	8005a74 <_PreparePacket>
 8006fd6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	623b      	str	r3, [r7, #32]
 8006fe4:	e00b      	b.n	8006ffe <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fec:	1c59      	adds	r1, r3, #1
 8006fee:	6279      	str	r1, [r7, #36]	@ 0x24
 8006ff0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ff4:	b2d2      	uxtb	r2, r2
 8006ff6:	701a      	strb	r2, [r3, #0]
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	09db      	lsrs	r3, r3, #7
 8006ffc:	623b      	str	r3, [r7, #32]
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	2b7f      	cmp	r3, #127	@ 0x7f
 8007002:	d8f0      	bhi.n	8006fe6 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8007004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007006:	1c5a      	adds	r2, r3, #1
 8007008:	627a      	str	r2, [r7, #36]	@ 0x24
 800700a:	6a3a      	ldr	r2, [r7, #32]
 800700c:	b2d2      	uxtb	r2, r2
 800700e:	701a      	strb	r2, [r3, #0]
 8007010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007012:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	61fb      	str	r3, [r7, #28]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	61bb      	str	r3, [r7, #24]
 800701c:	e00b      	b.n	8007036 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	b2da      	uxtb	r2, r3
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	1c59      	adds	r1, r3, #1
 8007026:	61f9      	str	r1, [r7, #28]
 8007028:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800702c:	b2d2      	uxtb	r2, r2
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	09db      	lsrs	r3, r3, #7
 8007034:	61bb      	str	r3, [r7, #24]
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	2b7f      	cmp	r3, #127	@ 0x7f
 800703a:	d8f0      	bhi.n	800701e <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	61fa      	str	r2, [r7, #28]
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	b2d2      	uxtb	r2, r2
 8007046:	701a      	strb	r2, [r3, #0]
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800704c:	221c      	movs	r2, #28
 800704e:	68f9      	ldr	r1, [r7, #12]
 8007050:	6938      	ldr	r0, [r7, #16]
 8007052:	f7fe fdfb 	bl	8005c4c <_SendPacket>
  RECORD_END();
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f383 8811 	msr	BASEPRI, r3
}
 800705c:	bf00      	nop
 800705e:	3728      	adds	r7, #40	@ 0x28
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	2000c3c8 	.word	0x2000c3c8

08007068 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800706e:	f3ef 8311 	mrs	r3, BASEPRI
 8007072:	f04f 0120 	mov.w	r1, #32
 8007076:	f381 8811 	msr	BASEPRI, r1
 800707a:	607b      	str	r3, [r7, #4]
 800707c:	4807      	ldr	r0, [pc, #28]	@ (800709c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800707e:	f7fe fcf9 	bl	8005a74 <_PreparePacket>
 8007082:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007084:	2211      	movs	r2, #17
 8007086:	6839      	ldr	r1, [r7, #0]
 8007088:	6838      	ldr	r0, [r7, #0]
 800708a:	f7fe fddf 	bl	8005c4c <_SendPacket>
  RECORD_END();
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f383 8811 	msr	BASEPRI, r3
}
 8007094:	bf00      	nop
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	2000c3c8 	.word	0x2000c3c8

080070a0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b088      	sub	sp, #32
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80070a8:	f3ef 8311 	mrs	r3, BASEPRI
 80070ac:	f04f 0120 	mov.w	r1, #32
 80070b0:	f381 8811 	msr	BASEPRI, r1
 80070b4:	617b      	str	r3, [r7, #20]
 80070b6:	4819      	ldr	r0, [pc, #100]	@ (800711c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80070b8:	f7fe fcdc 	bl	8005a74 <_PreparePacket>
 80070bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80070c2:	4b17      	ldr	r3, [pc, #92]	@ (8007120 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	61fb      	str	r3, [r7, #28]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	61bb      	str	r3, [r7, #24]
 80070d4:	e00b      	b.n	80070ee <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	1c59      	adds	r1, r3, #1
 80070de:	61f9      	str	r1, [r7, #28]
 80070e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070e4:	b2d2      	uxtb	r2, r2
 80070e6:	701a      	strb	r2, [r3, #0]
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	09db      	lsrs	r3, r3, #7
 80070ec:	61bb      	str	r3, [r7, #24]
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80070f2:	d8f0      	bhi.n	80070d6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	61fa      	str	r2, [r7, #28]
 80070fa:	69ba      	ldr	r2, [r7, #24]
 80070fc:	b2d2      	uxtb	r2, r2
 80070fe:	701a      	strb	r2, [r3, #0]
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007104:	2208      	movs	r2, #8
 8007106:	68f9      	ldr	r1, [r7, #12]
 8007108:	6938      	ldr	r0, [r7, #16]
 800710a:	f7fe fd9f 	bl	8005c4c <_SendPacket>
  RECORD_END();
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f383 8811 	msr	BASEPRI, r3
}
 8007114:	bf00      	nop
 8007116:	3720      	adds	r7, #32
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	2000c3c8 	.word	0x2000c3c8
 8007120:	2000c398 	.word	0x2000c398

08007124 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007124:	b580      	push	{r7, lr}
 8007126:	b088      	sub	sp, #32
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800712c:	f3ef 8311 	mrs	r3, BASEPRI
 8007130:	f04f 0120 	mov.w	r1, #32
 8007134:	f381 8811 	msr	BASEPRI, r1
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	4819      	ldr	r0, [pc, #100]	@ (80071a0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800713c:	f7fe fc9a 	bl	8005a74 <_PreparePacket>
 8007140:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007146:	4b17      	ldr	r3, [pc, #92]	@ (80071a4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	61fb      	str	r3, [r7, #28]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	61bb      	str	r3, [r7, #24]
 8007158:	e00b      	b.n	8007172 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	b2da      	uxtb	r2, r3
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	1c59      	adds	r1, r3, #1
 8007162:	61f9      	str	r1, [r7, #28]
 8007164:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007168:	b2d2      	uxtb	r2, r2
 800716a:	701a      	strb	r2, [r3, #0]
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	09db      	lsrs	r3, r3, #7
 8007170:	61bb      	str	r3, [r7, #24]
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	2b7f      	cmp	r3, #127	@ 0x7f
 8007176:	d8f0      	bhi.n	800715a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	61fa      	str	r2, [r7, #28]
 800717e:	69ba      	ldr	r2, [r7, #24]
 8007180:	b2d2      	uxtb	r2, r2
 8007182:	701a      	strb	r2, [r3, #0]
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007188:	2204      	movs	r2, #4
 800718a:	68f9      	ldr	r1, [r7, #12]
 800718c:	6938      	ldr	r0, [r7, #16]
 800718e:	f7fe fd5d 	bl	8005c4c <_SendPacket>
  RECORD_END();
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f383 8811 	msr	BASEPRI, r3
}
 8007198:	bf00      	nop
 800719a:	3720      	adds	r7, #32
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	2000c3c8 	.word	0x2000c3c8
 80071a4:	2000c398 	.word	0x2000c398

080071a8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b088      	sub	sp, #32
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80071b0:	f3ef 8311 	mrs	r3, BASEPRI
 80071b4:	f04f 0120 	mov.w	r1, #32
 80071b8:	f381 8811 	msr	BASEPRI, r1
 80071bc:	617b      	str	r3, [r7, #20]
 80071be:	4819      	ldr	r0, [pc, #100]	@ (8007224 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80071c0:	f7fe fc58 	bl	8005a74 <_PreparePacket>
 80071c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80071ca:	4b17      	ldr	r3, [pc, #92]	@ (8007228 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	61fb      	str	r3, [r7, #28]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	61bb      	str	r3, [r7, #24]
 80071dc:	e00b      	b.n	80071f6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	1c59      	adds	r1, r3, #1
 80071e6:	61f9      	str	r1, [r7, #28]
 80071e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071ec:	b2d2      	uxtb	r2, r2
 80071ee:	701a      	strb	r2, [r3, #0]
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	09db      	lsrs	r3, r3, #7
 80071f4:	61bb      	str	r3, [r7, #24]
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80071fa:	d8f0      	bhi.n	80071de <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	61fa      	str	r2, [r7, #28]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	701a      	strb	r2, [r3, #0]
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800720c:	2206      	movs	r2, #6
 800720e:	68f9      	ldr	r1, [r7, #12]
 8007210:	6938      	ldr	r0, [r7, #16]
 8007212:	f7fe fd1b 	bl	8005c4c <_SendPacket>
  RECORD_END();
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f383 8811 	msr	BASEPRI, r3
}
 800721c:	bf00      	nop
 800721e:	3720      	adds	r7, #32
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	2000c3c8 	.word	0x2000c3c8
 8007228:	2000c398 	.word	0x2000c398

0800722c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800722c:	b580      	push	{r7, lr}
 800722e:	b08a      	sub	sp, #40	@ 0x28
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007236:	f3ef 8311 	mrs	r3, BASEPRI
 800723a:	f04f 0120 	mov.w	r1, #32
 800723e:	f381 8811 	msr	BASEPRI, r1
 8007242:	617b      	str	r3, [r7, #20]
 8007244:	4827      	ldr	r0, [pc, #156]	@ (80072e4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007246:	f7fe fc15 	bl	8005a74 <_PreparePacket>
 800724a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007250:	4b25      	ldr	r3, [pc, #148]	@ (80072e8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	627b      	str	r3, [r7, #36]	@ 0x24
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	623b      	str	r3, [r7, #32]
 8007262:	e00b      	b.n	800727c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	b2da      	uxtb	r2, r3
 8007268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726a:	1c59      	adds	r1, r3, #1
 800726c:	6279      	str	r1, [r7, #36]	@ 0x24
 800726e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007272:	b2d2      	uxtb	r2, r2
 8007274:	701a      	strb	r2, [r3, #0]
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	09db      	lsrs	r3, r3, #7
 800727a:	623b      	str	r3, [r7, #32]
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007280:	d8f0      	bhi.n	8007264 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007284:	1c5a      	adds	r2, r3, #1
 8007286:	627a      	str	r2, [r7, #36]	@ 0x24
 8007288:	6a3a      	ldr	r2, [r7, #32]
 800728a:	b2d2      	uxtb	r2, r2
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007290:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	61fb      	str	r3, [r7, #28]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	61bb      	str	r3, [r7, #24]
 800729a:	e00b      	b.n	80072b4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	1c59      	adds	r1, r3, #1
 80072a4:	61f9      	str	r1, [r7, #28]
 80072a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072aa:	b2d2      	uxtb	r2, r2
 80072ac:	701a      	strb	r2, [r3, #0]
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	09db      	lsrs	r3, r3, #7
 80072b2:	61bb      	str	r3, [r7, #24]
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80072b8:	d8f0      	bhi.n	800729c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	1c5a      	adds	r2, r3, #1
 80072be:	61fa      	str	r2, [r7, #28]
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	b2d2      	uxtb	r2, r2
 80072c4:	701a      	strb	r2, [r3, #0]
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80072ca:	2207      	movs	r2, #7
 80072cc:	68f9      	ldr	r1, [r7, #12]
 80072ce:	6938      	ldr	r0, [r7, #16]
 80072d0:	f7fe fcbc 	bl	8005c4c <_SendPacket>
  RECORD_END();
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f383 8811 	msr	BASEPRI, r3
}
 80072da:	bf00      	nop
 80072dc:	3728      	adds	r7, #40	@ 0x28
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	2000c3c8 	.word	0x2000c3c8
 80072e8:	2000c398 	.word	0x2000c398

080072ec <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80072f4:	4b04      	ldr	r3, [pc, #16]	@ (8007308 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	1ad3      	subs	r3, r2, r3
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	2000c398 	.word	0x2000c398

0800730c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800730c:	b580      	push	{r7, lr}
 800730e:	b08c      	sub	sp, #48	@ 0x30
 8007310:	af00      	add	r7, sp, #0
 8007312:	4603      	mov	r3, r0
 8007314:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007316:	4b40      	ldr	r3, [pc, #256]	@ (8007418 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d077      	beq.n	800740e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800731e:	4b3e      	ldr	r3, [pc, #248]	@ (8007418 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007324:	2300      	movs	r3, #0
 8007326:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007328:	e008      	b.n	800733c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800732a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007332:	2b00      	cmp	r3, #0
 8007334:	d007      	beq.n	8007346 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007338:	3301      	adds	r3, #1
 800733a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800733c:	79fb      	ldrb	r3, [r7, #7]
 800733e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007340:	429a      	cmp	r2, r3
 8007342:	d3f2      	bcc.n	800732a <SEGGER_SYSVIEW_SendModule+0x1e>
 8007344:	e000      	b.n	8007348 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007346:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734a:	2b00      	cmp	r3, #0
 800734c:	d055      	beq.n	80073fa <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800734e:	f3ef 8311 	mrs	r3, BASEPRI
 8007352:	f04f 0120 	mov.w	r1, #32
 8007356:	f381 8811 	msr	BASEPRI, r1
 800735a:	617b      	str	r3, [r7, #20]
 800735c:	482f      	ldr	r0, [pc, #188]	@ (800741c <SEGGER_SYSVIEW_SendModule+0x110>)
 800735e:	f7fe fb89 	bl	8005a74 <_PreparePacket>
 8007362:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	627b      	str	r3, [r7, #36]	@ 0x24
 800736c:	79fb      	ldrb	r3, [r7, #7]
 800736e:	623b      	str	r3, [r7, #32]
 8007370:	e00b      	b.n	800738a <SEGGER_SYSVIEW_SendModule+0x7e>
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	b2da      	uxtb	r2, r3
 8007376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007378:	1c59      	adds	r1, r3, #1
 800737a:	6279      	str	r1, [r7, #36]	@ 0x24
 800737c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007380:	b2d2      	uxtb	r2, r2
 8007382:	701a      	strb	r2, [r3, #0]
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	09db      	lsrs	r3, r3, #7
 8007388:	623b      	str	r3, [r7, #32]
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	2b7f      	cmp	r3, #127	@ 0x7f
 800738e:	d8f0      	bhi.n	8007372 <SEGGER_SYSVIEW_SendModule+0x66>
 8007390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	627a      	str	r2, [r7, #36]	@ 0x24
 8007396:	6a3a      	ldr	r2, [r7, #32]
 8007398:	b2d2      	uxtb	r2, r2
 800739a:	701a      	strb	r2, [r3, #0]
 800739c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	61fb      	str	r3, [r7, #28]
 80073a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	61bb      	str	r3, [r7, #24]
 80073aa:	e00b      	b.n	80073c4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	1c59      	adds	r1, r3, #1
 80073b4:	61f9      	str	r1, [r7, #28]
 80073b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	701a      	strb	r2, [r3, #0]
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	09db      	lsrs	r3, r3, #7
 80073c2:	61bb      	str	r3, [r7, #24]
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80073c8:	d8f0      	bhi.n	80073ac <SEGGER_SYSVIEW_SendModule+0xa0>
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	61fa      	str	r2, [r7, #28]
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	701a      	strb	r2, [r3, #0]
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80073da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2280      	movs	r2, #128	@ 0x80
 80073e0:	4619      	mov	r1, r3
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f7fe fb16 	bl	8005a14 <_EncodeStr>
 80073e8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80073ea:	2216      	movs	r2, #22
 80073ec:	68f9      	ldr	r1, [r7, #12]
 80073ee:	6938      	ldr	r0, [r7, #16]
 80073f0:	f7fe fc2c 	bl	8005c4c <_SendPacket>
      RECORD_END();
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80073fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d006      	beq.n	800740e <SEGGER_SYSVIEW_SendModule+0x102>
 8007400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d002      	beq.n	800740e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	4798      	blx	r3
    }
  }
}
 800740e:	bf00      	nop
 8007410:	3730      	adds	r7, #48	@ 0x30
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	2000c3c0 	.word	0x2000c3c0
 800741c:	2000c3c8 	.word	0x2000c3c8

08007420 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007426:	4b0c      	ldr	r3, [pc, #48]	@ (8007458 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00f      	beq.n	800744e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800742e:	4b0a      	ldr	r3, [pc, #40]	@ (8007458 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1f2      	bne.n	8007434 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800744e:	bf00      	nop
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	2000c3c0 	.word	0x2000c3c0

0800745c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007462:	f3ef 8311 	mrs	r3, BASEPRI
 8007466:	f04f 0120 	mov.w	r1, #32
 800746a:	f381 8811 	msr	BASEPRI, r1
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	4817      	ldr	r0, [pc, #92]	@ (80074d0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007472:	f7fe faff 	bl	8005a74 <_PreparePacket>
 8007476:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	617b      	str	r3, [r7, #20]
 8007480:	4b14      	ldr	r3, [pc, #80]	@ (80074d4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	613b      	str	r3, [r7, #16]
 8007486:	e00b      	b.n	80074a0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	b2da      	uxtb	r2, r3
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	1c59      	adds	r1, r3, #1
 8007490:	6179      	str	r1, [r7, #20]
 8007492:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	701a      	strb	r2, [r3, #0]
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	09db      	lsrs	r3, r3, #7
 800749e:	613b      	str	r3, [r7, #16]
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80074a4:	d8f0      	bhi.n	8007488 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	617a      	str	r2, [r7, #20]
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	b2d2      	uxtb	r2, r2
 80074b0:	701a      	strb	r2, [r3, #0]
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80074b6:	221b      	movs	r2, #27
 80074b8:	6879      	ldr	r1, [r7, #4]
 80074ba:	68b8      	ldr	r0, [r7, #8]
 80074bc:	f7fe fbc6 	bl	8005c4c <_SendPacket>
  RECORD_END();
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f383 8811 	msr	BASEPRI, r3
}
 80074c6:	bf00      	nop
 80074c8:	3718      	adds	r7, #24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	2000c3c8 	.word	0x2000c3c8
 80074d4:	2000c3c4 	.word	0x2000c3c4

080074d8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80074d8:	b40f      	push	{r0, r1, r2, r3}
 80074da:	b580      	push	{r7, lr}
 80074dc:	b082      	sub	sp, #8
 80074de:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80074e0:	f107 0314 	add.w	r3, r7, #20
 80074e4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80074e6:	1d3b      	adds	r3, r7, #4
 80074e8:	461a      	mov	r2, r3
 80074ea:	2100      	movs	r1, #0
 80074ec:	6938      	ldr	r0, [r7, #16]
 80074ee:	f7fe febd 	bl	800626c <_VPrintTarget>
  va_end(ParamList);
}
 80074f2:	bf00      	nop
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074fc:	b004      	add	sp, #16
 80074fe:	4770      	bx	lr

08007500 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007500:	b580      	push	{r7, lr}
 8007502:	b08a      	sub	sp, #40	@ 0x28
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007508:	f3ef 8311 	mrs	r3, BASEPRI
 800750c:	f04f 0120 	mov.w	r1, #32
 8007510:	f381 8811 	msr	BASEPRI, r1
 8007514:	617b      	str	r3, [r7, #20]
 8007516:	4827      	ldr	r0, [pc, #156]	@ (80075b4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007518:	f7fe faac 	bl	8005a74 <_PreparePacket>
 800751c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800751e:	2280      	movs	r2, #128	@ 0x80
 8007520:	6879      	ldr	r1, [r7, #4]
 8007522:	6938      	ldr	r0, [r7, #16]
 8007524:	f7fe fa76 	bl	8005a14 <_EncodeStr>
 8007528:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	627b      	str	r3, [r7, #36]	@ 0x24
 800752e:	2301      	movs	r3, #1
 8007530:	623b      	str	r3, [r7, #32]
 8007532:	e00b      	b.n	800754c <SEGGER_SYSVIEW_Warn+0x4c>
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	b2da      	uxtb	r2, r3
 8007538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753a:	1c59      	adds	r1, r3, #1
 800753c:	6279      	str	r1, [r7, #36]	@ 0x24
 800753e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007542:	b2d2      	uxtb	r2, r2
 8007544:	701a      	strb	r2, [r3, #0]
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	09db      	lsrs	r3, r3, #7
 800754a:	623b      	str	r3, [r7, #32]
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007550:	d8f0      	bhi.n	8007534 <SEGGER_SYSVIEW_Warn+0x34>
 8007552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	627a      	str	r2, [r7, #36]	@ 0x24
 8007558:	6a3a      	ldr	r2, [r7, #32]
 800755a:	b2d2      	uxtb	r2, r2
 800755c:	701a      	strb	r2, [r3, #0]
 800755e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007560:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	61fb      	str	r3, [r7, #28]
 8007566:	2300      	movs	r3, #0
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	e00b      	b.n	8007584 <SEGGER_SYSVIEW_Warn+0x84>
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	b2da      	uxtb	r2, r3
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	1c59      	adds	r1, r3, #1
 8007574:	61f9      	str	r1, [r7, #28]
 8007576:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800757a:	b2d2      	uxtb	r2, r2
 800757c:	701a      	strb	r2, [r3, #0]
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	09db      	lsrs	r3, r3, #7
 8007582:	61bb      	str	r3, [r7, #24]
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	2b7f      	cmp	r3, #127	@ 0x7f
 8007588:	d8f0      	bhi.n	800756c <SEGGER_SYSVIEW_Warn+0x6c>
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	1c5a      	adds	r2, r3, #1
 800758e:	61fa      	str	r2, [r7, #28]
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	701a      	strb	r2, [r3, #0]
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800759a:	221a      	movs	r2, #26
 800759c:	68f9      	ldr	r1, [r7, #12]
 800759e:	6938      	ldr	r0, [r7, #16]
 80075a0:	f7fe fb54 	bl	8005c4c <_SendPacket>
  RECORD_END();
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f383 8811 	msr	BASEPRI, r3
}
 80075aa:	bf00      	nop
 80075ac:	3728      	adds	r7, #40	@ 0x28
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	2000c3c8 	.word	0x2000c3c8

080075b8 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80075bc:	4b13      	ldr	r3, [pc, #76]	@ (800760c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075be:	7e1b      	ldrb	r3, [r3, #24]
 80075c0:	4619      	mov	r1, r3
 80075c2:	4a13      	ldr	r2, [pc, #76]	@ (8007610 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80075c4:	460b      	mov	r3, r1
 80075c6:	005b      	lsls	r3, r3, #1
 80075c8:	440b      	add	r3, r1
 80075ca:	00db      	lsls	r3, r3, #3
 80075cc:	4413      	add	r3, r2
 80075ce:	336c      	adds	r3, #108	@ 0x6c
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	4b0e      	ldr	r3, [pc, #56]	@ (800760c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075d4:	7e1b      	ldrb	r3, [r3, #24]
 80075d6:	4618      	mov	r0, r3
 80075d8:	490d      	ldr	r1, [pc, #52]	@ (8007610 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80075da:	4603      	mov	r3, r0
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	4403      	add	r3, r0
 80075e0:	00db      	lsls	r3, r3, #3
 80075e2:	440b      	add	r3, r1
 80075e4:	3370      	adds	r3, #112	@ 0x70
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d00b      	beq.n	8007604 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80075ec:	4b07      	ldr	r3, [pc, #28]	@ (800760c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075ee:	789b      	ldrb	r3, [r3, #2]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d107      	bne.n	8007604 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80075f4:	4b05      	ldr	r3, [pc, #20]	@ (800760c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075f6:	2201      	movs	r2, #1
 80075f8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80075fa:	f7fe fa47 	bl	8005a8c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80075fe:	4b03      	ldr	r3, [pc, #12]	@ (800760c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007600:	2200      	movs	r2, #0
 8007602:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007604:	4b01      	ldr	r3, [pc, #4]	@ (800760c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007606:	781b      	ldrb	r3, [r3, #0]
}
 8007608:	4618      	mov	r0, r3
 800760a:	bd80      	pop	{r7, pc}
 800760c:	2000c398 	.word	0x2000c398
 8007610:	2000bad8 	.word	0x2000bad8

08007614 <memcmp>:
 8007614:	b510      	push	{r4, lr}
 8007616:	3901      	subs	r1, #1
 8007618:	4402      	add	r2, r0
 800761a:	4290      	cmp	r0, r2
 800761c:	d101      	bne.n	8007622 <memcmp+0xe>
 800761e:	2000      	movs	r0, #0
 8007620:	e005      	b.n	800762e <memcmp+0x1a>
 8007622:	7803      	ldrb	r3, [r0, #0]
 8007624:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007628:	42a3      	cmp	r3, r4
 800762a:	d001      	beq.n	8007630 <memcmp+0x1c>
 800762c:	1b18      	subs	r0, r3, r4
 800762e:	bd10      	pop	{r4, pc}
 8007630:	3001      	adds	r0, #1
 8007632:	e7f2      	b.n	800761a <memcmp+0x6>

08007634 <memset>:
 8007634:	4402      	add	r2, r0
 8007636:	4603      	mov	r3, r0
 8007638:	4293      	cmp	r3, r2
 800763a:	d100      	bne.n	800763e <memset+0xa>
 800763c:	4770      	bx	lr
 800763e:	f803 1b01 	strb.w	r1, [r3], #1
 8007642:	e7f9      	b.n	8007638 <memset+0x4>

08007644 <__libc_init_array>:
 8007644:	b570      	push	{r4, r5, r6, lr}
 8007646:	4d0d      	ldr	r5, [pc, #52]	@ (800767c <__libc_init_array+0x38>)
 8007648:	4c0d      	ldr	r4, [pc, #52]	@ (8007680 <__libc_init_array+0x3c>)
 800764a:	1b64      	subs	r4, r4, r5
 800764c:	10a4      	asrs	r4, r4, #2
 800764e:	2600      	movs	r6, #0
 8007650:	42a6      	cmp	r6, r4
 8007652:	d109      	bne.n	8007668 <__libc_init_array+0x24>
 8007654:	4d0b      	ldr	r5, [pc, #44]	@ (8007684 <__libc_init_array+0x40>)
 8007656:	4c0c      	ldr	r4, [pc, #48]	@ (8007688 <__libc_init_array+0x44>)
 8007658:	f000 f826 	bl	80076a8 <_init>
 800765c:	1b64      	subs	r4, r4, r5
 800765e:	10a4      	asrs	r4, r4, #2
 8007660:	2600      	movs	r6, #0
 8007662:	42a6      	cmp	r6, r4
 8007664:	d105      	bne.n	8007672 <__libc_init_array+0x2e>
 8007666:	bd70      	pop	{r4, r5, r6, pc}
 8007668:	f855 3b04 	ldr.w	r3, [r5], #4
 800766c:	4798      	blx	r3
 800766e:	3601      	adds	r6, #1
 8007670:	e7ee      	b.n	8007650 <__libc_init_array+0xc>
 8007672:	f855 3b04 	ldr.w	r3, [r5], #4
 8007676:	4798      	blx	r3
 8007678:	3601      	adds	r6, #1
 800767a:	e7f2      	b.n	8007662 <__libc_init_array+0x1e>
 800767c:	08007868 	.word	0x08007868
 8007680:	08007868 	.word	0x08007868
 8007684:	08007868 	.word	0x08007868
 8007688:	0800786c 	.word	0x0800786c

0800768c <memcpy>:
 800768c:	440a      	add	r2, r1
 800768e:	4291      	cmp	r1, r2
 8007690:	f100 33ff 	add.w	r3, r0, #4294967295
 8007694:	d100      	bne.n	8007698 <memcpy+0xc>
 8007696:	4770      	bx	lr
 8007698:	b510      	push	{r4, lr}
 800769a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800769e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076a2:	4291      	cmp	r1, r2
 80076a4:	d1f9      	bne.n	800769a <memcpy+0xe>
 80076a6:	bd10      	pop	{r4, pc}

080076a8 <_init>:
 80076a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076aa:	bf00      	nop
 80076ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ae:	bc08      	pop	{r3}
 80076b0:	469e      	mov	lr, r3
 80076b2:	4770      	bx	lr

080076b4 <_fini>:
 80076b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b6:	bf00      	nop
 80076b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ba:	bc08      	pop	{r3}
 80076bc:	469e      	mov	lr, r3
 80076be:	4770      	bx	lr
