/*
 * task_handler.c
 *
 *  Created on: Feb 25, 2025
 *      Author: solom
 */
#include "main.h"

int extract_command(command_t *cmd);
void process_command (command_t *cmd);

void menu_task_handler(void* parameters)
{
	while (1)
	{

	}

}

void led_task_handler(void* parameters)
{
	while(1)
	{

	}
}

void rtc_task_handler(void* parameters)
{
	while(1)
	{

	}

}

void print_task_handler(void* parameters)
{
	while (1)
	{

	}

}

void command_task_handler(void* parameters)
{
	BaseType_t ret;
	command_t cmd;
	while(1)
	{

		/* Implement Notify wait */
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);

		/* process the user data (command) stored in input data queue */
		if (ret == pdTRUE)
		{
			process_command(&cmd);
		}



		/* notify the command to relevant task */
	}
}


void process_command (command_t *cmd)
{
	extract_command(cmd);

	switch(curr_state)
	{
	case sMainMenu:
		/* Notify menu task with command */
		xTaskNotify(menu_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
		break;
	case sLedEffect :
		/* Notify Led task with command */
		xTaskNotify(led_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
	case sRtcMenu:
	case sRtcTimeConfig:
	case sRtcDateConfig:
	case sRtcReport:
		/* Notify RTC task with comand */
		xTaskNotify(rtc_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
		break;
	}

}

int extract_command(command_t *cmd)
{
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(xQueueInputData);
	if(! status) return -1;
	uint8_t i=0;

	do
	{
		status = xQueueReceive(xQueueInputData, &item, 0);
		if (status == pdTRUE) cmd->payload[i++] = item;

	}while(item != '\n');

	cmd->payload[i-1] = (char *)'/0';
	cmd->Len = i-1;

	return 0;
}
