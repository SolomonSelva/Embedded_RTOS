
006_LED_Task_Suspend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ba0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08007da0  08007da0  00008da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f40  08007f40  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f40  08007f40  00008f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f48  08007f48  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f48  08007f48  00008f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f4c  08007f4c  00008f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08007f50  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c4a4  2000001c  08007f6c  0000901c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c4c0  08007f6c  000094c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016248  00000000  00000000  0000904a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003160  00000000  00000000  0001f292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  000223f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001001  00000000  00000000  000238c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c0b8  00000000  00000000  000248c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197c9  00000000  00000000  00050981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116e83  00000000  00000000  0006a14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00180fcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f4  00000000  00000000  00181010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ee  00000000  00000000  00186704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000001c 	.word	0x2000001c
 800021c:	00000000 	.word	0x00000000
 8000220:	08007d88 	.word	0x08007d88

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000020 	.word	0x20000020
 800023c:	08007d88 	.word	0x08007d88

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	2000baec 	.word	0x2000baec

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b96a 	b.w	80005c0 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	460c      	mov	r4, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14e      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000310:	4694      	mov	ip, r2
 8000312:	458c      	cmp	ip, r1
 8000314:	4686      	mov	lr, r0
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	d962      	bls.n	80003e2 <__udivmoddi4+0xde>
 800031c:	b14a      	cbz	r2, 8000332 <__udivmoddi4+0x2e>
 800031e:	f1c2 0320 	rsb	r3, r2, #32
 8000322:	4091      	lsls	r1, r2
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	fa0c fc02 	lsl.w	ip, ip, r2
 800032c:	4319      	orrs	r1, r3
 800032e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f f68c 	uxth.w	r6, ip
 800033a:	fbb1 f4f7 	udiv	r4, r1, r7
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb07 1114 	mls	r1, r7, r4, r1
 8000346:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034a:	fb04 f106 	mul.w	r1, r4, r6
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f104 30ff 	add.w	r0, r4, #4294967295
 800035a:	f080 8112 	bcs.w	8000582 <__udivmoddi4+0x27e>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 810f 	bls.w	8000582 <__udivmoddi4+0x27e>
 8000364:	3c02      	subs	r4, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	fa1f f38e 	uxth.w	r3, lr
 800036e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000372:	fb07 1110 	mls	r1, r7, r0, r1
 8000376:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037a:	fb00 f606 	mul.w	r6, r0, r6
 800037e:	429e      	cmp	r6, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x94>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f100 31ff 	add.w	r1, r0, #4294967295
 800038a:	f080 80fc 	bcs.w	8000586 <__udivmoddi4+0x282>
 800038e:	429e      	cmp	r6, r3
 8000390:	f240 80f9 	bls.w	8000586 <__udivmoddi4+0x282>
 8000394:	4463      	add	r3, ip
 8000396:	3802      	subs	r0, #2
 8000398:	1b9b      	subs	r3, r3, r6
 800039a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa6>
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xba>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb4>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa6>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x150>
 80003c6:	42a3      	cmp	r3, r4
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xcc>
 80003ca:	4290      	cmp	r0, r2
 80003cc:	f0c0 80f0 	bcc.w	80005b0 <__udivmoddi4+0x2ac>
 80003d0:	1a86      	subs	r6, r0, r2
 80003d2:	eb64 0303 	sbc.w	r3, r4, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	2d00      	cmp	r5, #0
 80003da:	d0e6      	beq.n	80003aa <__udivmoddi4+0xa6>
 80003dc:	e9c5 6300 	strd	r6, r3, [r5]
 80003e0:	e7e3      	b.n	80003aa <__udivmoddi4+0xa6>
 80003e2:	2a00      	cmp	r2, #0
 80003e4:	f040 8090 	bne.w	8000508 <__udivmoddi4+0x204>
 80003e8:	eba1 040c 	sub.w	r4, r1, ip
 80003ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f0:	fa1f f78c 	uxth.w	r7, ip
 80003f4:	2101      	movs	r1, #1
 80003f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000402:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000406:	fb07 f006 	mul.w	r0, r7, r6
 800040a:	4298      	cmp	r0, r3
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x11c>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 34ff 	add.w	r4, r6, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0x11a>
 8000418:	4298      	cmp	r0, r3
 800041a:	f200 80cd 	bhi.w	80005b8 <__udivmoddi4+0x2b4>
 800041e:	4626      	mov	r6, r4
 8000420:	1a1c      	subs	r4, r3, r0
 8000422:	fa1f f38e 	uxth.w	r3, lr
 8000426:	fbb4 f0f8 	udiv	r0, r4, r8
 800042a:	fb08 4410 	mls	r4, r8, r0, r4
 800042e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000432:	fb00 f707 	mul.w	r7, r0, r7
 8000436:	429f      	cmp	r7, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x148>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x146>
 8000444:	429f      	cmp	r7, r3
 8000446:	f200 80b0 	bhi.w	80005aa <__udivmoddi4+0x2a6>
 800044a:	4620      	mov	r0, r4
 800044c:	1bdb      	subs	r3, r3, r7
 800044e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x9c>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa20 fc06 	lsr.w	ip, r0, r6
 8000464:	fa04 f301 	lsl.w	r3, r4, r1
 8000468:	ea43 030c 	orr.w	r3, r3, ip
 800046c:	40f4      	lsrs	r4, r6
 800046e:	fa00 f801 	lsl.w	r8, r0, r1
 8000472:	0c38      	lsrs	r0, r7, #16
 8000474:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000478:	fbb4 fef0 	udiv	lr, r4, r0
 800047c:	fa1f fc87 	uxth.w	ip, r7
 8000480:	fb00 441e 	mls	r4, r0, lr, r4
 8000484:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000488:	fb0e f90c 	mul.w	r9, lr, ip
 800048c:	45a1      	cmp	r9, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d90a      	bls.n	80004aa <__udivmoddi4+0x1a6>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049a:	f080 8084 	bcs.w	80005a6 <__udivmoddi4+0x2a2>
 800049e:	45a1      	cmp	r9, r4
 80004a0:	f240 8081 	bls.w	80005a6 <__udivmoddi4+0x2a2>
 80004a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a8:	443c      	add	r4, r7
 80004aa:	eba4 0409 	sub.w	r4, r4, r9
 80004ae:	fa1f f983 	uxth.w	r9, r3
 80004b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004be:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x1d2>
 80004c6:	193c      	adds	r4, r7, r4
 80004c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004cc:	d267      	bcs.n	800059e <__udivmoddi4+0x29a>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d965      	bls.n	800059e <__udivmoddi4+0x29a>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004da:	fba0 9302 	umull	r9, r3, r0, r2
 80004de:	eba4 040c 	sub.w	r4, r4, ip
 80004e2:	429c      	cmp	r4, r3
 80004e4:	46ce      	mov	lr, r9
 80004e6:	469c      	mov	ip, r3
 80004e8:	d351      	bcc.n	800058e <__udivmoddi4+0x28a>
 80004ea:	d04e      	beq.n	800058a <__udivmoddi4+0x286>
 80004ec:	b155      	cbz	r5, 8000504 <__udivmoddi4+0x200>
 80004ee:	ebb8 030e 	subs.w	r3, r8, lr
 80004f2:	eb64 040c 	sbc.w	r4, r4, ip
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431e      	orrs	r6, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	e9c5 6400 	strd	r6, r4, [r5]
 8000504:	2100      	movs	r1, #0
 8000506:	e750      	b.n	80003aa <__udivmoddi4+0xa6>
 8000508:	f1c2 0320 	rsb	r3, r2, #32
 800050c:	fa20 f103 	lsr.w	r1, r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa24 f303 	lsr.w	r3, r4, r3
 8000518:	4094      	lsls	r4, r2
 800051a:	430c      	orrs	r4, r1
 800051c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000520:	fa00 fe02 	lsl.w	lr, r0, r2
 8000524:	fa1f f78c 	uxth.w	r7, ip
 8000528:	fbb3 f0f8 	udiv	r0, r3, r8
 800052c:	fb08 3110 	mls	r1, r8, r0, r3
 8000530:	0c23      	lsrs	r3, r4, #16
 8000532:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000536:	fb00 f107 	mul.w	r1, r0, r7
 800053a:	4299      	cmp	r1, r3
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x24c>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 36ff 	add.w	r6, r0, #4294967295
 8000546:	d22c      	bcs.n	80005a2 <__udivmoddi4+0x29e>
 8000548:	4299      	cmp	r1, r3
 800054a:	d92a      	bls.n	80005a2 <__udivmoddi4+0x29e>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1a5b      	subs	r3, r3, r1
 8000552:	b2a4      	uxth	r4, r4
 8000554:	fbb3 f1f8 	udiv	r1, r3, r8
 8000558:	fb08 3311 	mls	r3, r8, r1, r3
 800055c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000560:	fb01 f307 	mul.w	r3, r1, r7
 8000564:	42a3      	cmp	r3, r4
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x276>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000570:	d213      	bcs.n	800059a <__udivmoddi4+0x296>
 8000572:	42a3      	cmp	r3, r4
 8000574:	d911      	bls.n	800059a <__udivmoddi4+0x296>
 8000576:	3902      	subs	r1, #2
 8000578:	4464      	add	r4, ip
 800057a:	1ae4      	subs	r4, r4, r3
 800057c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000580:	e739      	b.n	80003f6 <__udivmoddi4+0xf2>
 8000582:	4604      	mov	r4, r0
 8000584:	e6f0      	b.n	8000368 <__udivmoddi4+0x64>
 8000586:	4608      	mov	r0, r1
 8000588:	e706      	b.n	8000398 <__udivmoddi4+0x94>
 800058a:	45c8      	cmp	r8, r9
 800058c:	d2ae      	bcs.n	80004ec <__udivmoddi4+0x1e8>
 800058e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000592:	eb63 0c07 	sbc.w	ip, r3, r7
 8000596:	3801      	subs	r0, #1
 8000598:	e7a8      	b.n	80004ec <__udivmoddi4+0x1e8>
 800059a:	4631      	mov	r1, r6
 800059c:	e7ed      	b.n	800057a <__udivmoddi4+0x276>
 800059e:	4603      	mov	r3, r0
 80005a0:	e799      	b.n	80004d6 <__udivmoddi4+0x1d2>
 80005a2:	4630      	mov	r0, r6
 80005a4:	e7d4      	b.n	8000550 <__udivmoddi4+0x24c>
 80005a6:	46d6      	mov	lr, sl
 80005a8:	e77f      	b.n	80004aa <__udivmoddi4+0x1a6>
 80005aa:	4463      	add	r3, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e74d      	b.n	800044c <__udivmoddi4+0x148>
 80005b0:	4606      	mov	r6, r0
 80005b2:	4623      	mov	r3, r4
 80005b4:	4608      	mov	r0, r1
 80005b6:	e70f      	b.n	80003d8 <__udivmoddi4+0xd4>
 80005b8:	3e02      	subs	r6, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	e730      	b.n	8000420 <__udivmoddi4+0x11c>
 80005be:	bf00      	nop

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005ca:	f000 fbdc 	bl	8000d86 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005ce:	f000 f867 	bl	80006a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005d2:	f000 f8cf 	bl	8000774 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	/* Enable the CYcle counting */
	DWT_CTRL |= (1 << 0);
 80005d6:	4b23      	ldr	r3, [pc, #140]	@ (8000664 <main+0xa0>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a22      	ldr	r2, [pc, #136]	@ (8000664 <main+0xa0>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6013      	str	r3, [r2, #0]

	SEGGER_UART_init(250000);
 80005e2:	4821      	ldr	r0, [pc, #132]	@ (8000668 <main+0xa4>)
 80005e4:	f005 f93a 	bl	800585c <SEGGER_UART_init>

	SEGGER_SYSVIEW_Conf();
 80005e8:	f004 ff62 	bl	80054b0 <SEGGER_SYSVIEW_Conf>
	//SEGGER_SYSVIEW_Start();


	status = xTaskCreate(led_green_handler, "LED_Green_Task", 200, NULL, 3, &ledg_handle);
 80005ec:	4b1f      	ldr	r3, [pc, #124]	@ (800066c <main+0xa8>)
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2303      	movs	r3, #3
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	22c8      	movs	r2, #200	@ 0xc8
 80005f8:	491d      	ldr	r1, [pc, #116]	@ (8000670 <main+0xac>)
 80005fa:	481e      	ldr	r0, [pc, #120]	@ (8000674 <main+0xb0>)
 80005fc:	f002 fba2 	bl	8002d44 <xTaskCreate>
 8000600:	6078      	str	r0, [r7, #4]

	configASSERT(status = pdPASS);
 8000602:	2301      	movs	r3, #1
 8000604:	607b      	str	r3, [r7, #4]

	next_task_handle = ledg_handle;
 8000606:	4b19      	ldr	r3, [pc, #100]	@ (800066c <main+0xa8>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a1b      	ldr	r2, [pc, #108]	@ (8000678 <main+0xb4>)
 800060c:	6013      	str	r3, [r2, #0]

	status = xTaskCreate(led_red_handler, "LED_Red_Task", 200, NULL, 2, &ledr_handle);
 800060e:	4b1b      	ldr	r3, [pc, #108]	@ (800067c <main+0xb8>)
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	2302      	movs	r3, #2
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2300      	movs	r3, #0
 8000618:	22c8      	movs	r2, #200	@ 0xc8
 800061a:	4919      	ldr	r1, [pc, #100]	@ (8000680 <main+0xbc>)
 800061c:	4819      	ldr	r0, [pc, #100]	@ (8000684 <main+0xc0>)
 800061e:	f002 fb91 	bl	8002d44 <xTaskCreate>
 8000622:	6078      	str	r0, [r7, #4]

	configASSERT(status = pdPASS);
 8000624:	2301      	movs	r3, #1
 8000626:	607b      	str	r3, [r7, #4]

	status = xTaskCreate(led_blue_handler, "LED_Blue_Task", 200, NULL, 1, &ledb_handle);
 8000628:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <main+0xc4>)
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2301      	movs	r3, #1
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2300      	movs	r3, #0
 8000632:	22c8      	movs	r2, #200	@ 0xc8
 8000634:	4915      	ldr	r1, [pc, #84]	@ (800068c <main+0xc8>)
 8000636:	4816      	ldr	r0, [pc, #88]	@ (8000690 <main+0xcc>)
 8000638:	f002 fb84 	bl	8002d44 <xTaskCreate>
 800063c:	6078      	str	r0, [r7, #4]

	configASSERT(status = pdPASS);
 800063e:	2301      	movs	r3, #1
 8000640:	607b      	str	r3, [r7, #4]

	status = xTaskCreate(user_button_handler, "Button_Task", 200, NULL, 4, &btn_handle);
 8000642:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <main+0xd0>)
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	2304      	movs	r3, #4
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2300      	movs	r3, #0
 800064c:	22c8      	movs	r2, #200	@ 0xc8
 800064e:	4912      	ldr	r1, [pc, #72]	@ (8000698 <main+0xd4>)
 8000650:	4812      	ldr	r0, [pc, #72]	@ (800069c <main+0xd8>)
 8000652:	f002 fb77 	bl	8002d44 <xTaskCreate>
 8000656:	6078      	str	r0, [r7, #4]

	configASSERT(status = pdPASS);
 8000658:	2301      	movs	r3, #1
 800065a:	607b      	str	r3, [r7, #4]

	//STart the FreeRTOS Scheduler
	vTaskStartScheduler();
 800065c:	f002 fe10 	bl	8003280 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <main+0x9c>
 8000664:	e0001000 	.word	0xe0001000
 8000668:	0003d090 	.word	0x0003d090
 800066c:	20000038 	.word	0x20000038
 8000670:	08007da0 	.word	0x08007da0
 8000674:	08000a81 	.word	0x08000a81
 8000678:	20000048 	.word	0x20000048
 800067c:	2000003c 	.word	0x2000003c
 8000680:	08007db0 	.word	0x08007db0
 8000684:	08000a19 	.word	0x08000a19
 8000688:	20000040 	.word	0x20000040
 800068c:	08007dc0 	.word	0x08007dc0
 8000690:	080009a1 	.word	0x080009a1
 8000694:	20000044 	.word	0x20000044
 8000698:	08007dd0 	.word	0x08007dd0
 800069c:	08000ae9 	.word	0x08000ae9

080006a0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	@ 0x50
 80006a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	2234      	movs	r2, #52	@ 0x34
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f007 fb30 	bl	8007d14 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	4b29      	ldr	r3, [pc, #164]	@ (800076c <SystemClock_Config+0xcc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a28      	ldr	r2, [pc, #160]	@ (800076c <SystemClock_Config+0xcc>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b26      	ldr	r3, [pc, #152]	@ (800076c <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006dc:	4b24      	ldr	r3, [pc, #144]	@ (8000770 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006e4:	4a22      	ldr	r2, [pc, #136]	@ (8000770 <SystemClock_Config+0xd0>)
 80006e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b20      	ldr	r3, [pc, #128]	@ (8000770 <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 800070c:	2308      	movs	r3, #8
 800070e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000710:	23a8      	movs	r3, #168	@ 0xa8
 8000712:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000718:	2302      	movs	r3, #2
 800071a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fe35 	bl	8001394 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000730:	f000 fa24 	bl	8000b7c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000740:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000744:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2105      	movs	r1, #5
 8000752:	4618      	mov	r0, r3
 8000754:	f001 f8cc 	bl	80018f0 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 800075e:	f000 fa0d 	bl	8000b7c <Error_Handler>
	}
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	@ 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08c      	sub	sp, #48	@ 0x30
 8000778:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	4b7f      	ldr	r3, [pc, #508]	@ (8000988 <MX_GPIO_Init+0x214>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a7e      	ldr	r2, [pc, #504]	@ (8000988 <MX_GPIO_Init+0x214>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b7c      	ldr	r3, [pc, #496]	@ (8000988 <MX_GPIO_Init+0x214>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	4b79      	ldr	r3, [pc, #484]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a78      	ldr	r2, [pc, #480]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b76      	ldr	r3, [pc, #472]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b73      	ldr	r3, [pc, #460]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a72      	ldr	r2, [pc, #456]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b70      	ldr	r3, [pc, #448]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b6d      	ldr	r3, [pc, #436]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a6c      	ldr	r2, [pc, #432]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b6a      	ldr	r3, [pc, #424]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	4b67      	ldr	r3, [pc, #412]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a66      	ldr	r2, [pc, #408]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b64      	ldr	r3, [pc, #400]	@ (8000988 <MX_GPIO_Init+0x214>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000802:	4b61      	ldr	r3, [pc, #388]	@ (8000988 <MX_GPIO_Init+0x214>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a60      	ldr	r2, [pc, #384]	@ (8000988 <MX_GPIO_Init+0x214>)
 8000808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b5e      	ldr	r3, [pc, #376]	@ (8000988 <MX_GPIO_Init+0x214>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000820:	485a      	ldr	r0, [pc, #360]	@ (800098c <MX_GPIO_Init+0x218>)
 8000822:	f000 fd83 	bl	800132c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2140      	movs	r1, #64	@ 0x40
 800082a:	4859      	ldr	r0, [pc, #356]	@ (8000990 <MX_GPIO_Init+0x21c>)
 800082c:	f000 fd7e 	bl	800132c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000830:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000834:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000836:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800083a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	4853      	ldr	r0, [pc, #332]	@ (8000994 <MX_GPIO_Init+0x220>)
 8000848:	f000 fbac 	bl	8000fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800084c:	2332      	movs	r3, #50	@ 0x32
 800084e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800085c:	230b      	movs	r3, #11
 800085e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	484b      	ldr	r0, [pc, #300]	@ (8000994 <MX_GPIO_Init+0x220>)
 8000868:	f000 fb9c 	bl	8000fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800086c:	2386      	movs	r3, #134	@ 0x86
 800086e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800087c:	230b      	movs	r3, #11
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4844      	ldr	r0, [pc, #272]	@ (8000998 <MX_GPIO_Init+0x224>)
 8000888:	f000 fb8c 	bl	8000fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800088c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000890:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4839      	ldr	r0, [pc, #228]	@ (800098c <MX_GPIO_Init+0x218>)
 80008a6:	f000 fb7d 	bl	8000fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008bc:	230b      	movs	r3, #11
 80008be:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4831      	ldr	r0, [pc, #196]	@ (800098c <MX_GPIO_Init+0x218>)
 80008c8:	f000 fb6c 	bl	8000fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
	GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008cc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008de:	2307      	movs	r3, #7
 80008e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	482c      	ldr	r0, [pc, #176]	@ (800099c <MX_GPIO_Init+0x228>)
 80008ea:	f000 fb5b 	bl	8000fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ee:	2340      	movs	r3, #64	@ 0x40
 80008f0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4822      	ldr	r0, [pc, #136]	@ (8000990 <MX_GPIO_Init+0x21c>)
 8000906:	f000 fb4d 	bl	8000fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800090a:	2380      	movs	r3, #128	@ 0x80
 800090c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	481c      	ldr	r0, [pc, #112]	@ (8000990 <MX_GPIO_Init+0x21c>)
 800091e:	f000 fb41 	bl	8000fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000922:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000926:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000934:	230a      	movs	r3, #10
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4816      	ldr	r0, [pc, #88]	@ (8000998 <MX_GPIO_Init+0x224>)
 8000940:	f000 fb30 	bl	8000fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000944:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000948:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	480f      	ldr	r0, [pc, #60]	@ (8000998 <MX_GPIO_Init+0x224>)
 800095a:	f000 fb23 	bl	8000fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800095e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000962:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000970:	230b      	movs	r3, #11
 8000972:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_GPIO_Init+0x21c>)
 800097c:	f000 fb12 	bl	8000fa4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000980:	bf00      	nop
 8000982:	3730      	adds	r7, #48	@ 0x30
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	40020400 	.word	0x40020400
 8000990:	40021800 	.word	0x40021800
 8000994:	40020800 	.word	0x40020800
 8000998:	40020000 	.word	0x40020000
 800099c:	40020c00 	.word	0x40020c00

080009a0 <led_blue_handler>:

/* USER CODE BEGIN 4 */

static void led_blue_handler(void* parameters)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af02      	add	r7, sp, #8
 80009a6:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED\n");
 80009a8:	4817      	ldr	r0, [pc, #92]	@ (8000a08 <led_blue_handler+0x68>)
 80009aa:	f007 f905 	bl	8007bb8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80009ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009b2:	4816      	ldr	r0, [pc, #88]	@ (8000a0c <led_blue_handler+0x6c>)
 80009b4:	f000 fcd3 	bl	800135e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL, pdMS_TO_TICKS(1000));
 80009b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	2300      	movs	r3, #0
 80009c0:	2200      	movs	r2, #0
 80009c2:	2100      	movs	r1, #0
 80009c4:	2000      	movs	r0, #0
 80009c6:	f003 fb17 	bl	8003ff8 <xTaskGenericNotifyWait>
 80009ca:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d1ea      	bne.n	80009a8 <led_blue_handler+0x8>
		{
			vTaskSuspendAll();
 80009d2:	f002 fcb3 	bl	800333c <vTaskSuspendAll>
			next_task_handle = btn_handle;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <led_blue_handler+0x70>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a0e      	ldr	r2, [pc, #56]	@ (8000a14 <led_blue_handler+0x74>)
 80009dc:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 80009de:	f002 fcbb 	bl	8003358 <xTaskResumeAll>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009e8:	4808      	ldr	r0, [pc, #32]	@ (8000a0c <led_blue_handler+0x6c>)
 80009ea:	f000 fc9f 	bl	800132c <HAL_GPIO_WritePin>
			vTaskSuspend(NULL);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f002 fb54 	bl	800309c <vTaskSuspend>
			xTaskNotify(next_task_handle,0,eNoAction);
 80009f4:	4b07      	ldr	r3, [pc, #28]	@ (8000a14 <led_blue_handler+0x74>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	2300      	movs	r3, #0
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2300      	movs	r3, #0
 80009fe:	2200      	movs	r2, #0
 8000a00:	2100      	movs	r1, #0
 8000a02:	f003 fb93 	bl	800412c <xTaskGenericNotify>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED\n");
 8000a06:	e7cf      	b.n	80009a8 <led_blue_handler+0x8>
 8000a08:	08007ddc 	.word	0x08007ddc
 8000a0c:	40020400 	.word	0x40020400
 8000a10:	20000044 	.word	0x20000044
 8000a14:	20000048 	.word	0x20000048

08000a18 <led_red_handler>:
		}
	}
}

static void led_red_handler(void* parameters)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED\n");
 8000a20:	4813      	ldr	r0, [pc, #76]	@ (8000a70 <led_red_handler+0x58>)
 8000a22:	f007 f8c9 	bl	8007bb8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a26:	2180      	movs	r1, #128	@ 0x80
 8000a28:	4812      	ldr	r0, [pc, #72]	@ (8000a74 <led_red_handler+0x5c>)
 8000a2a:	f000 fc98 	bl	800135e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL, pdMS_TO_TICKS(1000));
 8000a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	2300      	movs	r3, #0
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f003 fadc 	bl	8003ff8 <xTaskGenericNotifyWait>
 8000a40:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d1eb      	bne.n	8000a20 <led_red_handler+0x8>
		{
			vTaskSuspendAll();
 8000a48:	f002 fc78 	bl	800333c <vTaskSuspendAll>
			next_task_handle = ledb_handle;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <led_red_handler+0x60>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0a      	ldr	r2, [pc, #40]	@ (8000a7c <led_red_handler+0x64>)
 8000a52:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a54:	f002 fc80 	bl	8003358 <xTaskResumeAll>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2180      	movs	r1, #128	@ 0x80
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <led_red_handler+0x5c>)
 8000a5e:	f000 fc65 	bl	800132c <HAL_GPIO_WritePin>
			vTaskSuspend(ledb_handle);
 8000a62:	4b05      	ldr	r3, [pc, #20]	@ (8000a78 <led_red_handler+0x60>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 fb18 	bl	800309c <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED\n");
 8000a6c:	e7d8      	b.n	8000a20 <led_red_handler+0x8>
 8000a6e:	bf00      	nop
 8000a70:	08007df0 	.word	0x08007df0
 8000a74:	40020400 	.word	0x40020400
 8000a78:	20000040 	.word	0x20000040
 8000a7c:	20000048 	.word	0x20000048

08000a80 <led_green_handler>:
		}
	}
}

static void led_green_handler(void* parameters)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED\n");
 8000a88:	4813      	ldr	r0, [pc, #76]	@ (8000ad8 <led_green_handler+0x58>)
 8000a8a:	f007 f895 	bl	8007bb8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000a8e:	2101      	movs	r1, #1
 8000a90:	4812      	ldr	r0, [pc, #72]	@ (8000adc <led_green_handler+0x5c>)
 8000a92:	f000 fc64 	bl	800135e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL, pdMS_TO_TICKS(1000));
 8000a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f003 faa8 	bl	8003ff8 <xTaskGenericNotifyWait>
 8000aa8:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d1eb      	bne.n	8000a88 <led_green_handler+0x8>
		{
			vTaskSuspendAll();
 8000ab0:	f002 fc44 	bl	800333c <vTaskSuspendAll>
			next_task_handle = ledr_handle;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <led_green_handler+0x60>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <led_green_handler+0x64>)
 8000aba:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000abc:	f002 fc4c 	bl	8003358 <xTaskResumeAll>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	4805      	ldr	r0, [pc, #20]	@ (8000adc <led_green_handler+0x5c>)
 8000ac6:	f000 fc31 	bl	800132c <HAL_GPIO_WritePin>
			vTaskSuspend(ledr_handle);
 8000aca:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <led_green_handler+0x60>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 fae4 	bl	800309c <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED\n");
 8000ad4:	e7d8      	b.n	8000a88 <led_green_handler+0x8>
 8000ad6:	bf00      	nop
 8000ad8:	08007ddc 	.word	0x08007ddc
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	2000003c 	.word	0x2000003c
 8000ae4:	20000048 	.word	0x20000048

08000ae8 <user_button_handler>:
		}
	}
}

static void user_button_handler(void* parameters)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af02      	add	r7, sp, #8
 8000aee:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]

	BaseType_t status;

	while(1)
	{
		btn_read = HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin);
 8000af8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000afc:	4814      	ldr	r0, [pc, #80]	@ (8000b50 <user_button_handler+0x68>)
 8000afe:	f000 fbfd 	bl	80012fc <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	73bb      	strb	r3, [r7, #14]

		if (btn_read)
 8000b06:	7bbb      	ldrb	r3, [r7, #14]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d00b      	beq.n	8000b24 <user_button_handler+0x3c>
		{
			if (! prev_read)
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d108      	bne.n	8000b24 <user_button_handler+0x3c>
				xTaskNotify(next_task_handle, 0, eNoAction);
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <user_button_handler+0x6c>)
 8000b14:	6818      	ldr	r0, [r3, #0]
 8000b16:	2300      	movs	r3, #0
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	f003 fb04 	bl	800412c <xTaskGenericNotify>
		}

		prev_read = btn_read;
 8000b24:	7bbb      	ldrb	r3, [r7, #14]
 8000b26:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000b28:	200a      	movs	r0, #10
 8000b2a:	f002 fa7d 	bl	8003028 <vTaskDelay>

		status = xTaskNotifyWait(0,0,NULL, pdMS_TO_TICKS(1000));
 8000b2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	2300      	movs	r3, #0
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f003 fa5c 	bl	8003ff8 <xTaskGenericNotifyWait>
 8000b40:	60b8      	str	r0, [r7, #8]
		if (status == pdTRUE)
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d1d7      	bne.n	8000af8 <user_button_handler+0x10>
		{
			xTaskResumeAll();
 8000b48:	f002 fc06 	bl	8003358 <xTaskResumeAll>
		btn_read = HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin);
 8000b4c:	e7d4      	b.n	8000af8 <user_button_handler+0x10>
 8000b4e:	bf00      	nop
 8000b50:	40020800 	.word	0x40020800
 8000b54:	20000048 	.word	0x20000048

08000b58 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a04      	ldr	r2, [pc, #16]	@ (8000b78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d101      	bne.n	8000b6e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000b6a:	f000 f919 	bl	8000da0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40001000 	.word	0x40001000

08000b7c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <Error_Handler+0x8>

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <HAL_MspInit+0x44>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	4a0e      	ldr	r2, [pc, #56]	@ (8000bcc <HAL_MspInit+0x44>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <HAL_MspInit+0x44>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <HAL_MspInit+0x44>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000baa:	4a08      	ldr	r2, [pc, #32]	@ (8000bcc <HAL_MspInit+0x44>)
 8000bac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_MspInit+0x44>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08e      	sub	sp, #56	@ 0x38
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000be0:	4b33      	ldr	r3, [pc, #204]	@ (8000cb0 <HAL_InitTick+0xe0>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be4:	4a32      	ldr	r2, [pc, #200]	@ (8000cb0 <HAL_InitTick+0xe0>)
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bec:	4b30      	ldr	r3, [pc, #192]	@ (8000cb0 <HAL_InitTick+0xe0>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf0:	f003 0310 	and.w	r3, r3, #16
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bf8:	f107 0210 	add.w	r2, r7, #16
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 f884 	bl	8001d10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c08:	6a3b      	ldr	r3, [r7, #32]
 8000c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d103      	bne.n	8000c1a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c12:	f001 f869 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8000c16:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c18:	e004      	b.n	8000c24 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c1a:	f001 f865 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c26:	4a23      	ldr	r2, [pc, #140]	@ (8000cb4 <HAL_InitTick+0xe4>)
 8000c28:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2c:	0c9b      	lsrs	r3, r3, #18
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c32:	4b21      	ldr	r3, [pc, #132]	@ (8000cb8 <HAL_InitTick+0xe8>)
 8000c34:	4a21      	ldr	r2, [pc, #132]	@ (8000cbc <HAL_InitTick+0xec>)
 8000c36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c38:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb8 <HAL_InitTick+0xe8>)
 8000c3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c3e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c40:	4a1d      	ldr	r2, [pc, #116]	@ (8000cb8 <HAL_InitTick+0xe8>)
 8000c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c44:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c46:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb8 <HAL_InitTick+0xe8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <HAL_InitTick+0xe8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c52:	4b19      	ldr	r3, [pc, #100]	@ (8000cb8 <HAL_InitTick+0xe8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c58:	4817      	ldr	r0, [pc, #92]	@ (8000cb8 <HAL_InitTick+0xe8>)
 8000c5a:	f001 f88b 	bl	8001d74 <HAL_TIM_Base_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d11b      	bne.n	8000ca4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c6c:	4812      	ldr	r0, [pc, #72]	@ (8000cb8 <HAL_InitTick+0xe8>)
 8000c6e:	f001 f8e3 	bl	8001e38 <HAL_TIM_Base_Start_IT>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d111      	bne.n	8000ca4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c80:	2036      	movs	r0, #54	@ 0x36
 8000c82:	f000 f981 	bl	8000f88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d808      	bhi.n	8000c9e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	2036      	movs	r0, #54	@ 0x36
 8000c92:	f000 f95d 	bl	8000f50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c96:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <HAL_InitTick+0xf0>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	e002      	b.n	8000ca4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ca4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3738      	adds	r7, #56	@ 0x38
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	431bde83 	.word	0x431bde83
 8000cb8:	2000004c 	.word	0x2000004c
 8000cbc:	40001000 	.word	0x40001000
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <NMI_Handler+0x4>

08000ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d00:	4802      	ldr	r0, [pc, #8]	@ (8000d0c <TIM6_DAC_IRQHandler+0x10>)
 8000d02:	f001 f911 	bl	8001f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2000004c 	.word	0x2000004c

08000d10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <SystemInit+0x20>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d1a:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <SystemInit+0x20>)
 8000d1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d38:	f7ff ffea 	bl	8000d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d3c:	480c      	ldr	r0, [pc, #48]	@ (8000d70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d3e:	490d      	ldr	r1, [pc, #52]	@ (8000d74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d40:	4a0d      	ldr	r2, [pc, #52]	@ (8000d78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d54:	4c0a      	ldr	r4, [pc, #40]	@ (8000d80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d62:	f006 ffdf 	bl	8007d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d66:	f7ff fc2d 	bl	80005c4 <main>
  bx  lr    
 8000d6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d6c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d74:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d78:	08007f50 	.word	0x08007f50
  ldr r2, =_sbss
 8000d7c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d80:	2000c4c0 	.word	0x2000c4c0

08000d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC_IRQHandler>

08000d86 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8a:	2003      	movs	r0, #3
 8000d8c:	f000 f8d5 	bl	8000f3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d90:	200f      	movs	r0, #15
 8000d92:	f7ff ff1d 	bl	8000bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d96:	f7ff fef7 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	@ (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000098 	.word	0x20000098

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	@ (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000098 	.word	0x20000098

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <__NVIC_SetPriorityGrouping+0x40>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	@ (8000e20 <__NVIC_SetPriorityGrouping+0x40>)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	60d3      	str	r3, [r2, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00
 8000e24:	05fa0000 	.word	0x05fa0000

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db0b      	blt.n	8000e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 021f 	and.w	r2, r3, #31
 8000e5c:	4907      	ldr	r1, [pc, #28]	@ (8000e7c <__NVIC_EnableIRQ+0x38>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	095b      	lsrs	r3, r3, #5
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0a      	blt.n	8000eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	490c      	ldr	r1, [pc, #48]	@ (8000ecc <__NVIC_SetPriority+0x4c>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea8:	e00a      	b.n	8000ec0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4908      	ldr	r1, [pc, #32]	@ (8000ed0 <__NVIC_SetPriority+0x50>)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	3b04      	subs	r3, #4
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	761a      	strb	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	@ 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f1c3 0307 	rsb	r3, r3, #7
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf28      	it	cs
 8000ef2:	2304      	movcs	r3, #4
 8000ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	2b06      	cmp	r3, #6
 8000efc:	d902      	bls.n	8000f04 <NVIC_EncodePriority+0x30>
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3b03      	subs	r3, #3
 8000f02:	e000      	b.n	8000f06 <NVIC_EncodePriority+0x32>
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43da      	mvns	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	43d9      	mvns	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4313      	orrs	r3, r2
         );
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3724      	adds	r7, #36	@ 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ff4c 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f62:	f7ff ff61 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000f66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	68b9      	ldr	r1, [r7, #8]
 8000f6c:	6978      	ldr	r0, [r7, #20]
 8000f6e:	f7ff ffb1 	bl	8000ed4 <NVIC_EncodePriority>
 8000f72:	4602      	mov	r2, r0
 8000f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ff80 	bl	8000e80 <__NVIC_SetPriority>
}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff54 	bl	8000e44 <__NVIC_EnableIRQ>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	@ 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
 8000fc2:	e175      	b.n	80012b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	f040 8164 	bne.w	80012aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d005      	beq.n	8000ffa <HAL_GPIO_Init+0x56>
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d130      	bne.n	800105c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001030:	2201      	movs	r2, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	091b      	lsrs	r3, r3, #4
 8001046:	f003 0201 	and.w	r2, r3, #1
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b03      	cmp	r3, #3
 8001066:	d017      	beq.n	8001098 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d123      	bne.n	80010ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	08da      	lsrs	r2, r3, #3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3208      	adds	r2, #8
 80010ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	220f      	movs	r2, #15
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	691a      	ldr	r2, [r3, #16]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	08da      	lsrs	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3208      	adds	r2, #8
 80010e6:	69b9      	ldr	r1, [r7, #24]
 80010e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2203      	movs	r2, #3
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0203 	and.w	r2, r3, #3
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 80be 	beq.w	80012aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	4b66      	ldr	r3, [pc, #408]	@ (80012c8 <HAL_GPIO_Init+0x324>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001132:	4a65      	ldr	r2, [pc, #404]	@ (80012c8 <HAL_GPIO_Init+0x324>)
 8001134:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001138:	6453      	str	r3, [r2, #68]	@ 0x44
 800113a:	4b63      	ldr	r3, [pc, #396]	@ (80012c8 <HAL_GPIO_Init+0x324>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001146:	4a61      	ldr	r2, [pc, #388]	@ (80012cc <HAL_GPIO_Init+0x328>)
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	220f      	movs	r2, #15
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a58      	ldr	r2, [pc, #352]	@ (80012d0 <HAL_GPIO_Init+0x32c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d037      	beq.n	80011e2 <HAL_GPIO_Init+0x23e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a57      	ldr	r2, [pc, #348]	@ (80012d4 <HAL_GPIO_Init+0x330>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d031      	beq.n	80011de <HAL_GPIO_Init+0x23a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a56      	ldr	r2, [pc, #344]	@ (80012d8 <HAL_GPIO_Init+0x334>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d02b      	beq.n	80011da <HAL_GPIO_Init+0x236>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a55      	ldr	r2, [pc, #340]	@ (80012dc <HAL_GPIO_Init+0x338>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d025      	beq.n	80011d6 <HAL_GPIO_Init+0x232>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a54      	ldr	r2, [pc, #336]	@ (80012e0 <HAL_GPIO_Init+0x33c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d01f      	beq.n	80011d2 <HAL_GPIO_Init+0x22e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a53      	ldr	r2, [pc, #332]	@ (80012e4 <HAL_GPIO_Init+0x340>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d019      	beq.n	80011ce <HAL_GPIO_Init+0x22a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a52      	ldr	r2, [pc, #328]	@ (80012e8 <HAL_GPIO_Init+0x344>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d013      	beq.n	80011ca <HAL_GPIO_Init+0x226>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a51      	ldr	r2, [pc, #324]	@ (80012ec <HAL_GPIO_Init+0x348>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d00d      	beq.n	80011c6 <HAL_GPIO_Init+0x222>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a50      	ldr	r2, [pc, #320]	@ (80012f0 <HAL_GPIO_Init+0x34c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d007      	beq.n	80011c2 <HAL_GPIO_Init+0x21e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4f      	ldr	r2, [pc, #316]	@ (80012f4 <HAL_GPIO_Init+0x350>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d101      	bne.n	80011be <HAL_GPIO_Init+0x21a>
 80011ba:	2309      	movs	r3, #9
 80011bc:	e012      	b.n	80011e4 <HAL_GPIO_Init+0x240>
 80011be:	230a      	movs	r3, #10
 80011c0:	e010      	b.n	80011e4 <HAL_GPIO_Init+0x240>
 80011c2:	2308      	movs	r3, #8
 80011c4:	e00e      	b.n	80011e4 <HAL_GPIO_Init+0x240>
 80011c6:	2307      	movs	r3, #7
 80011c8:	e00c      	b.n	80011e4 <HAL_GPIO_Init+0x240>
 80011ca:	2306      	movs	r3, #6
 80011cc:	e00a      	b.n	80011e4 <HAL_GPIO_Init+0x240>
 80011ce:	2305      	movs	r3, #5
 80011d0:	e008      	b.n	80011e4 <HAL_GPIO_Init+0x240>
 80011d2:	2304      	movs	r3, #4
 80011d4:	e006      	b.n	80011e4 <HAL_GPIO_Init+0x240>
 80011d6:	2303      	movs	r3, #3
 80011d8:	e004      	b.n	80011e4 <HAL_GPIO_Init+0x240>
 80011da:	2302      	movs	r3, #2
 80011dc:	e002      	b.n	80011e4 <HAL_GPIO_Init+0x240>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <HAL_GPIO_Init+0x240>
 80011e2:	2300      	movs	r3, #0
 80011e4:	69fa      	ldr	r2, [r7, #28]
 80011e6:	f002 0203 	and.w	r2, r2, #3
 80011ea:	0092      	lsls	r2, r2, #2
 80011ec:	4093      	lsls	r3, r2
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011f4:	4935      	ldr	r1, [pc, #212]	@ (80012cc <HAL_GPIO_Init+0x328>)
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001202:	4b3d      	ldr	r3, [pc, #244]	@ (80012f8 <HAL_GPIO_Init+0x354>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001226:	4a34      	ldr	r2, [pc, #208]	@ (80012f8 <HAL_GPIO_Init+0x354>)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800122c:	4b32      	ldr	r3, [pc, #200]	@ (80012f8 <HAL_GPIO_Init+0x354>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001250:	4a29      	ldr	r2, [pc, #164]	@ (80012f8 <HAL_GPIO_Init+0x354>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001256:	4b28      	ldr	r3, [pc, #160]	@ (80012f8 <HAL_GPIO_Init+0x354>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800127a:	4a1f      	ldr	r2, [pc, #124]	@ (80012f8 <HAL_GPIO_Init+0x354>)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001280:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <HAL_GPIO_Init+0x354>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a4:	4a14      	ldr	r2, [pc, #80]	@ (80012f8 <HAL_GPIO_Init+0x354>)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3301      	adds	r3, #1
 80012ae:	61fb      	str	r3, [r7, #28]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	2b0f      	cmp	r3, #15
 80012b4:	f67f ae86 	bls.w	8000fc4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	3724      	adds	r7, #36	@ 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40013800 	.word	0x40013800
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40020800 	.word	0x40020800
 80012dc:	40020c00 	.word	0x40020c00
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40021400 	.word	0x40021400
 80012e8:	40021800 	.word	0x40021800
 80012ec:	40021c00 	.word	0x40021c00
 80012f0:	40022000 	.word	0x40022000
 80012f4:	40022400 	.word	0x40022400
 80012f8:	40013c00 	.word	0x40013c00

080012fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	887b      	ldrh	r3, [r7, #2]
 800130e:	4013      	ands	r3, r2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	e001      	b.n	800131e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800131e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
 8001338:	4613      	mov	r3, r2
 800133a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800133c:	787b      	ldrb	r3, [r7, #1]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001348:	e003      	b.n	8001352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800134a:	887b      	ldrh	r3, [r7, #2]
 800134c:	041a      	lsls	r2, r3, #16
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	619a      	str	r2, [r3, #24]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800135e:	b480      	push	{r7}
 8001360:	b085      	sub	sp, #20
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	460b      	mov	r3, r1
 8001368:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001370:	887a      	ldrh	r2, [r7, #2]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4013      	ands	r3, r2
 8001376:	041a      	lsls	r2, r3, #16
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	43d9      	mvns	r1, r3
 800137c:	887b      	ldrh	r3, [r7, #2]
 800137e:	400b      	ands	r3, r1
 8001380:	431a      	orrs	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	619a      	str	r2, [r3, #24]
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e29b      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 8087 	beq.w	80014c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013b8:	4b96      	ldr	r3, [pc, #600]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 030c 	and.w	r3, r3, #12
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	d00c      	beq.n	80013de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c4:	4b93      	ldr	r3, [pc, #588]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 030c 	and.w	r3, r3, #12
 80013cc:	2b08      	cmp	r3, #8
 80013ce:	d112      	bne.n	80013f6 <HAL_RCC_OscConfig+0x62>
 80013d0:	4b90      	ldr	r3, [pc, #576]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013dc:	d10b      	bne.n	80013f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013de:	4b8d      	ldr	r3, [pc, #564]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d06c      	beq.n	80014c4 <HAL_RCC_OscConfig+0x130>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d168      	bne.n	80014c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e275      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013fe:	d106      	bne.n	800140e <HAL_RCC_OscConfig+0x7a>
 8001400:	4b84      	ldr	r3, [pc, #528]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a83      	ldr	r2, [pc, #524]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001406:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	e02e      	b.n	800146c <HAL_RCC_OscConfig+0xd8>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x9c>
 8001416:	4b7f      	ldr	r3, [pc, #508]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a7e      	ldr	r2, [pc, #504]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 800141c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b7c      	ldr	r3, [pc, #496]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a7b      	ldr	r2, [pc, #492]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001428:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e01d      	b.n	800146c <HAL_RCC_OscConfig+0xd8>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001438:	d10c      	bne.n	8001454 <HAL_RCC_OscConfig+0xc0>
 800143a:	4b76      	ldr	r3, [pc, #472]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a75      	ldr	r2, [pc, #468]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001440:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b73      	ldr	r3, [pc, #460]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a72      	ldr	r2, [pc, #456]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 800144c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e00b      	b.n	800146c <HAL_RCC_OscConfig+0xd8>
 8001454:	4b6f      	ldr	r3, [pc, #444]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a6e      	ldr	r2, [pc, #440]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 800145a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b6c      	ldr	r3, [pc, #432]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a6b      	ldr	r2, [pc, #428]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001466:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800146a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d013      	beq.n	800149c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fca8 	bl	8000dc8 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff fca4 	bl	8000dc8 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	@ 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e229      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	4b61      	ldr	r3, [pc, #388]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0xe8>
 800149a:	e014      	b.n	80014c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149c:	f7ff fc94 	bl	8000dc8 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fc90 	bl	8000dc8 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	@ 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e215      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	4b57      	ldr	r3, [pc, #348]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x110>
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d069      	beq.n	80015a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014d2:	4b50      	ldr	r3, [pc, #320]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00b      	beq.n	80014f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014de:	4b4d      	ldr	r3, [pc, #308]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d11c      	bne.n	8001524 <HAL_RCC_OscConfig+0x190>
 80014ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d116      	bne.n	8001524 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f6:	4b47      	ldr	r3, [pc, #284]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <HAL_RCC_OscConfig+0x17a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d001      	beq.n	800150e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e1e9      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150e:	4b41      	ldr	r3, [pc, #260]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	493d      	ldr	r1, [pc, #244]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 800151e:	4313      	orrs	r3, r2
 8001520:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001522:	e040      	b.n	80015a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d023      	beq.n	8001574 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800152c:	4b39      	ldr	r3, [pc, #228]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a38      	ldr	r2, [pc, #224]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001538:	f7ff fc46 	bl	8000dc8 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001540:	f7ff fc42 	bl	8000dc8 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e1c7      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001552:	4b30      	ldr	r3, [pc, #192]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155e:	4b2d      	ldr	r3, [pc, #180]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	4929      	ldr	r1, [pc, #164]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]
 8001572:	e018      	b.n	80015a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001574:	4b27      	ldr	r3, [pc, #156]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a26      	ldr	r2, [pc, #152]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 800157a:	f023 0301 	bic.w	r3, r3, #1
 800157e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fc22 	bl	8000dc8 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001588:	f7ff fc1e 	bl	8000dc8 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e1a3      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159a:	4b1e      	ldr	r3, [pc, #120]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d038      	beq.n	8001624 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d019      	beq.n	80015ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80015bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015be:	4a15      	ldr	r2, [pc, #84]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c6:	f7ff fbff 	bl	8000dc8 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ce:	f7ff fbfb 	bl	8000dc8 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e180      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80015e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x23a>
 80015ec:	e01a      	b.n	8001624 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80015f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015f2:	4a08      	ldr	r2, [pc, #32]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fa:	f7ff fbe5 	bl	8000dc8 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001600:	e00a      	b.n	8001618 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001602:	f7ff fbe1 	bl	8000dc8 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d903      	bls.n	8001618 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e166      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
 8001614:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001618:	4b92      	ldr	r3, [pc, #584]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 800161a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1ee      	bne.n	8001602 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 80a4 	beq.w	800177a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001632:	4b8c      	ldr	r3, [pc, #560]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10d      	bne.n	800165a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	4b89      	ldr	r3, [pc, #548]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	4a88      	ldr	r2, [pc, #544]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	@ 0x40
 800164a:	4b86      	ldr	r3, [pc, #536]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001656:	2301      	movs	r3, #1
 8001658:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800165a:	4b83      	ldr	r3, [pc, #524]	@ (8001868 <HAL_RCC_OscConfig+0x4d4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001662:	2b00      	cmp	r3, #0
 8001664:	d118      	bne.n	8001698 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001666:	4b80      	ldr	r3, [pc, #512]	@ (8001868 <HAL_RCC_OscConfig+0x4d4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a7f      	ldr	r2, [pc, #508]	@ (8001868 <HAL_RCC_OscConfig+0x4d4>)
 800166c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001672:	f7ff fba9 	bl	8000dc8 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167a:	f7ff fba5 	bl	8000dc8 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b64      	cmp	r3, #100	@ 0x64
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e12a      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168c:	4b76      	ldr	r3, [pc, #472]	@ (8001868 <HAL_RCC_OscConfig+0x4d4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d106      	bne.n	80016ae <HAL_RCC_OscConfig+0x31a>
 80016a0:	4b70      	ldr	r3, [pc, #448]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a4:	4a6f      	ldr	r2, [pc, #444]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ac:	e02d      	b.n	800170a <HAL_RCC_OscConfig+0x376>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x33c>
 80016b6:	4b6b      	ldr	r3, [pc, #428]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ba:	4a6a      	ldr	r2, [pc, #424]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c2:	4b68      	ldr	r3, [pc, #416]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c6:	4a67      	ldr	r2, [pc, #412]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016c8:	f023 0304 	bic.w	r3, r3, #4
 80016cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ce:	e01c      	b.n	800170a <HAL_RCC_OscConfig+0x376>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d10c      	bne.n	80016f2 <HAL_RCC_OscConfig+0x35e>
 80016d8:	4b62      	ldr	r3, [pc, #392]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016dc:	4a61      	ldr	r2, [pc, #388]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e4:	4b5f      	ldr	r3, [pc, #380]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016e8:	4a5e      	ldr	r2, [pc, #376]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80016f0:	e00b      	b.n	800170a <HAL_RCC_OscConfig+0x376>
 80016f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016fe:	4b59      	ldr	r3, [pc, #356]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001702:	4a58      	ldr	r2, [pc, #352]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001704:	f023 0304 	bic.w	r3, r3, #4
 8001708:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d015      	beq.n	800173e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001712:	f7ff fb59 	bl	8000dc8 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001718:	e00a      	b.n	8001730 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171a:	f7ff fb55 	bl	8000dc8 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001728:	4293      	cmp	r3, r2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e0d8      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001730:	4b4c      	ldr	r3, [pc, #304]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0ee      	beq.n	800171a <HAL_RCC_OscConfig+0x386>
 800173c:	e014      	b.n	8001768 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173e:	f7ff fb43 	bl	8000dc8 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001744:	e00a      	b.n	800175c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001746:	f7ff fb3f 	bl	8000dc8 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001754:	4293      	cmp	r3, r2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e0c2      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175c:	4b41      	ldr	r3, [pc, #260]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 800175e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1ee      	bne.n	8001746 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d105      	bne.n	800177a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800176e:	4b3d      	ldr	r3, [pc, #244]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	4a3c      	ldr	r2, [pc, #240]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001774:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001778:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80ae 	beq.w	80018e0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001784:	4b37      	ldr	r3, [pc, #220]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b08      	cmp	r3, #8
 800178e:	d06d      	beq.n	800186c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d14b      	bne.n	8001830 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001798:	4b32      	ldr	r3, [pc, #200]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a31      	ldr	r2, [pc, #196]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 800179e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff fb10 	bl	8000dc8 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ac:	f7ff fb0c 	bl	8000dc8 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e091      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017be:	4b29      	ldr	r3, [pc, #164]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69da      	ldr	r2, [r3, #28]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d8:	019b      	lsls	r3, r3, #6
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e0:	085b      	lsrs	r3, r3, #1
 80017e2:	3b01      	subs	r3, #1
 80017e4:	041b      	lsls	r3, r3, #16
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ec:	061b      	lsls	r3, r3, #24
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f4:	071b      	lsls	r3, r3, #28
 80017f6:	491b      	ldr	r1, [pc, #108]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017fc:	4b19      	ldr	r3, [pc, #100]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a18      	ldr	r2, [pc, #96]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001802:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fade 	bl	8000dc8 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001810:	f7ff fada 	bl	8000dc8 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e05f      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001822:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <HAL_RCC_OscConfig+0x47c>
 800182e:	e057      	b.n	80018e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001830:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0b      	ldr	r2, [pc, #44]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001836:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800183a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff fac4 	bl	8000dc8 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff fac0 	bl	8000dc8 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e045      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001856:	4b03      	ldr	r3, [pc, #12]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x4b0>
 8001862:	e03d      	b.n	80018e0 <HAL_RCC_OscConfig+0x54c>
 8001864:	40023800 	.word	0x40023800
 8001868:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800186c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ec <HAL_RCC_OscConfig+0x558>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d030      	beq.n	80018dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d129      	bne.n	80018dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001892:	429a      	cmp	r2, r3
 8001894:	d122      	bne.n	80018dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800189c:	4013      	ands	r3, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d119      	bne.n	80018dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b2:	085b      	lsrs	r3, r3, #1
 80018b4:	3b01      	subs	r3, #1
 80018b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d10f      	bne.n	80018dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d107      	bne.n	80018dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800

080018f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0d0      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001908:	4b6a      	ldr	r3, [pc, #424]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d910      	bls.n	8001938 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b67      	ldr	r3, [pc, #412]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 020f 	bic.w	r2, r3, #15
 800191e:	4965      	ldr	r1, [pc, #404]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	4313      	orrs	r3, r2
 8001924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	4b63      	ldr	r3, [pc, #396]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0b8      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d020      	beq.n	8001986 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001950:	4b59      	ldr	r3, [pc, #356]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	4a58      	ldr	r2, [pc, #352]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001956:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800195a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001968:	4b53      	ldr	r3, [pc, #332]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4a52      	ldr	r2, [pc, #328]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 800196e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001972:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001974:	4b50      	ldr	r3, [pc, #320]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	494d      	ldr	r1, [pc, #308]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d040      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	4b47      	ldr	r3, [pc, #284]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d115      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e07f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b2:	4b41      	ldr	r3, [pc, #260]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e073      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e06b      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d2:	4b39      	ldr	r3, [pc, #228]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f023 0203 	bic.w	r2, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4936      	ldr	r1, [pc, #216]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019e4:	f7ff f9f0 	bl	8000dc8 <HAL_GetTick>
 80019e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ec:	f7ff f9ec 	bl	8000dc8 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e053      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 020c 	and.w	r2, r3, #12
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d1eb      	bne.n	80019ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a14:	4b27      	ldr	r3, [pc, #156]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d210      	bcs.n	8001a44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b24      	ldr	r3, [pc, #144]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 020f 	bic.w	r2, r3, #15
 8001a2a:	4922      	ldr	r1, [pc, #136]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b20      	ldr	r3, [pc, #128]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e032      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a50:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4916      	ldr	r1, [pc, #88]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d009      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a6e:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	490e      	ldr	r1, [pc, #56]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a82:	f000 f821 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 8001a86:	4602      	mov	r2, r0
 8001a88:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	490a      	ldr	r1, [pc, #40]	@ (8001abc <HAL_RCC_ClockConfig+0x1cc>)
 8001a94:	5ccb      	ldrb	r3, [r1, r3]
 8001a96:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1d0>)
 8001a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1d4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f894 	bl	8000bd0 <HAL_InitTick>

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023c00 	.word	0x40023c00
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	08007eec 	.word	0x08007eec
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	20000004 	.word	0x20000004

08001ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001acc:	b094      	sub	sp, #80	@ 0x50
 8001ace:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ad8:	2300      	movs	r3, #0
 8001ada:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ae0:	4b79      	ldr	r3, [pc, #484]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d00d      	beq.n	8001b08 <HAL_RCC_GetSysClockFreq+0x40>
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	f200 80e1 	bhi.w	8001cb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x34>
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d003      	beq.n	8001b02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001afa:	e0db      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001afc:	4b73      	ldr	r3, [pc, #460]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x204>)
 8001afe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b00:	e0db      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b02:	4b72      	ldr	r3, [pc, #456]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x204>)
 8001b04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b06:	e0d8      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b08:	4b6f      	ldr	r3, [pc, #444]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b10:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b12:	4b6d      	ldr	r3, [pc, #436]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d063      	beq.n	8001be6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1e:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	099b      	lsrs	r3, r3, #6
 8001b24:	2200      	movs	r2, #0
 8001b26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b30:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b32:	2300      	movs	r3, #0
 8001b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b3a:	4622      	mov	r2, r4
 8001b3c:	462b      	mov	r3, r5
 8001b3e:	f04f 0000 	mov.w	r0, #0
 8001b42:	f04f 0100 	mov.w	r1, #0
 8001b46:	0159      	lsls	r1, r3, #5
 8001b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b4c:	0150      	lsls	r0, r2, #5
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4621      	mov	r1, r4
 8001b54:	1a51      	subs	r1, r2, r1
 8001b56:	6139      	str	r1, [r7, #16]
 8001b58:	4629      	mov	r1, r5
 8001b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b6c:	4659      	mov	r1, fp
 8001b6e:	018b      	lsls	r3, r1, #6
 8001b70:	4651      	mov	r1, sl
 8001b72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b76:	4651      	mov	r1, sl
 8001b78:	018a      	lsls	r2, r1, #6
 8001b7a:	4651      	mov	r1, sl
 8001b7c:	ebb2 0801 	subs.w	r8, r2, r1
 8001b80:	4659      	mov	r1, fp
 8001b82:	eb63 0901 	sbc.w	r9, r3, r1
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b9a:	4690      	mov	r8, r2
 8001b9c:	4699      	mov	r9, r3
 8001b9e:	4623      	mov	r3, r4
 8001ba0:	eb18 0303 	adds.w	r3, r8, r3
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	462b      	mov	r3, r5
 8001ba8:	eb49 0303 	adc.w	r3, r9, r3
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bba:	4629      	mov	r1, r5
 8001bbc:	028b      	lsls	r3, r1, #10
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	028a      	lsls	r2, r1, #10
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bce:	2200      	movs	r2, #0
 8001bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001bd8:	f7fe fb7c 	bl	80002d4 <__aeabi_uldivmod>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4613      	mov	r3, r2
 8001be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001be4:	e058      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be6:	4b38      	ldr	r3, [pc, #224]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	099b      	lsrs	r3, r3, #6
 8001bec:	2200      	movs	r2, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bf6:	623b      	str	r3, [r7, #32]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c00:	4642      	mov	r2, r8
 8001c02:	464b      	mov	r3, r9
 8001c04:	f04f 0000 	mov.w	r0, #0
 8001c08:	f04f 0100 	mov.w	r1, #0
 8001c0c:	0159      	lsls	r1, r3, #5
 8001c0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c12:	0150      	lsls	r0, r2, #5
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4641      	mov	r1, r8
 8001c1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c1e:	4649      	mov	r1, r9
 8001c20:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c38:	ebb2 040a 	subs.w	r4, r2, sl
 8001c3c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	00eb      	lsls	r3, r5, #3
 8001c4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c4e:	00e2      	lsls	r2, r4, #3
 8001c50:	4614      	mov	r4, r2
 8001c52:	461d      	mov	r5, r3
 8001c54:	4643      	mov	r3, r8
 8001c56:	18e3      	adds	r3, r4, r3
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	464b      	mov	r3, r9
 8001c5c:	eb45 0303 	adc.w	r3, r5, r3
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c6e:	4629      	mov	r1, r5
 8001c70:	028b      	lsls	r3, r1, #10
 8001c72:	4621      	mov	r1, r4
 8001c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c78:	4621      	mov	r1, r4
 8001c7a:	028a      	lsls	r2, r1, #10
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c82:	2200      	movs	r2, #0
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	61fa      	str	r2, [r7, #28]
 8001c88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c8c:	f7fe fb22 	bl	80002d4 <__aeabi_uldivmod>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4613      	mov	r3, r2
 8001c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c98:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	0c1b      	lsrs	r3, r3, #16
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ca8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cb2:	e002      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x204>)
 8001cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3750      	adds	r7, #80	@ 0x50
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	00f42400 	.word	0x00f42400

08001cd0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd4:	4b03      	ldr	r3, [pc, #12]	@ (8001ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000000 	.word	0x20000000

08001ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cec:	f7ff fff0 	bl	8001cd0 <HAL_RCC_GetHCLKFreq>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	0a9b      	lsrs	r3, r3, #10
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	4903      	ldr	r1, [pc, #12]	@ (8001d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cfe:	5ccb      	ldrb	r3, [r1, r3]
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	08007efc 	.word	0x08007efc

08001d10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	220f      	movs	r2, #15
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d20:	4b12      	ldr	r3, [pc, #72]	@ (8001d6c <HAL_RCC_GetClockConfig+0x5c>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0203 	and.w	r2, r3, #3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d6c <HAL_RCC_GetClockConfig+0x5c>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <HAL_RCC_GetClockConfig+0x5c>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d44:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <HAL_RCC_GetClockConfig+0x5c>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	08db      	lsrs	r3, r3, #3
 8001d4a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d52:	4b07      	ldr	r3, [pc, #28]	@ (8001d70 <HAL_RCC_GetClockConfig+0x60>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 020f 	and.w	r2, r3, #15
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	601a      	str	r2, [r3, #0]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40023c00 	.word	0x40023c00

08001d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e049      	b.n	8001e1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f841 	bl	8001e22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3304      	adds	r3, #4
 8001db0:	4619      	mov	r1, r3
 8001db2:	4610      	mov	r0, r2
 8001db4:	f000 f9e8 	bl	8002188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d001      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e054      	b.n	8001efa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a26      	ldr	r2, [pc, #152]	@ (8001f08 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d022      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e7a:	d01d      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a22      	ldr	r2, [pc, #136]	@ (8001f0c <HAL_TIM_Base_Start_IT+0xd4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d018      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a21      	ldr	r2, [pc, #132]	@ (8001f10 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d013      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1f      	ldr	r2, [pc, #124]	@ (8001f14 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00e      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f18 <HAL_TIM_Base_Start_IT+0xe0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d009      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f1c <HAL_TIM_Base_Start_IT+0xe4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d004      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f20 <HAL_TIM_Base_Start_IT+0xe8>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d115      	bne.n	8001ee4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	4b19      	ldr	r3, [pc, #100]	@ (8001f24 <HAL_TIM_Base_Start_IT+0xec>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d015      	beq.n	8001ef6 <HAL_TIM_Base_Start_IT+0xbe>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ed0:	d011      	beq.n	8001ef6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0201 	orr.w	r2, r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee2:	e008      	b.n	8001ef6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	e000      	b.n	8001ef8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40010000 	.word	0x40010000
 8001f0c:	40000400 	.word	0x40000400
 8001f10:	40000800 	.word	0x40000800
 8001f14:	40000c00 	.word	0x40000c00
 8001f18:	40010400 	.word	0x40010400
 8001f1c:	40014000 	.word	0x40014000
 8001f20:	40001800 	.word	0x40001800
 8001f24:	00010007 	.word	0x00010007

08001f28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d020      	beq.n	8001f8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d01b      	beq.n	8001f8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0202 	mvn.w	r2, #2
 8001f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8e9 	bl	800214a <HAL_TIM_IC_CaptureCallback>
 8001f78:	e005      	b.n	8001f86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f8db 	bl	8002136 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f8ec 	bl	800215e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d020      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01b      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0204 	mvn.w	r2, #4
 8001fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2202      	movs	r2, #2
 8001fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f8c3 	bl	800214a <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f8b5 	bl	8002136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f8c6 	bl	800215e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d020      	beq.n	8002024 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01b      	beq.n	8002024 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0208 	mvn.w	r2, #8
 8001ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f89d 	bl	800214a <HAL_TIM_IC_CaptureCallback>
 8002010:	e005      	b.n	800201e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f88f 	bl	8002136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f8a0 	bl	800215e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	d020      	beq.n	8002070 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b00      	cmp	r3, #0
 8002036:	d01b      	beq.n	8002070 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0210 	mvn.w	r2, #16
 8002040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2208      	movs	r2, #8
 8002046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f877 	bl	800214a <HAL_TIM_IC_CaptureCallback>
 800205c:	e005      	b.n	800206a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f869 	bl	8002136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f87a 	bl	800215e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00c      	beq.n	8002094 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d007      	beq.n	8002094 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0201 	mvn.w	r2, #1
 800208c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe fd62 	bl	8000b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800209a:	2b00      	cmp	r3, #0
 800209c:	d104      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00c      	beq.n	80020c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d007      	beq.n	80020c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80020ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f919 	bl	80022f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00c      	beq.n	80020e6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80020de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f911 	bl	8002308 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00c      	beq.n	800210a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d007      	beq.n	800210a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f834 	bl	8002172 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f003 0320 	and.w	r3, r3, #32
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00c      	beq.n	800212e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0320 	and.w	r3, r3, #32
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f06f 0220 	mvn.w	r2, #32
 8002126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f8d9 	bl	80022e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a46      	ldr	r2, [pc, #280]	@ (80022b4 <TIM_Base_SetConfig+0x12c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d013      	beq.n	80021c8 <TIM_Base_SetConfig+0x40>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a6:	d00f      	beq.n	80021c8 <TIM_Base_SetConfig+0x40>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a43      	ldr	r2, [pc, #268]	@ (80022b8 <TIM_Base_SetConfig+0x130>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d00b      	beq.n	80021c8 <TIM_Base_SetConfig+0x40>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a42      	ldr	r2, [pc, #264]	@ (80022bc <TIM_Base_SetConfig+0x134>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d007      	beq.n	80021c8 <TIM_Base_SetConfig+0x40>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a41      	ldr	r2, [pc, #260]	@ (80022c0 <TIM_Base_SetConfig+0x138>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d003      	beq.n	80021c8 <TIM_Base_SetConfig+0x40>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a40      	ldr	r2, [pc, #256]	@ (80022c4 <TIM_Base_SetConfig+0x13c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d108      	bne.n	80021da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a35      	ldr	r2, [pc, #212]	@ (80022b4 <TIM_Base_SetConfig+0x12c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d02b      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021e8:	d027      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a32      	ldr	r2, [pc, #200]	@ (80022b8 <TIM_Base_SetConfig+0x130>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d023      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a31      	ldr	r2, [pc, #196]	@ (80022bc <TIM_Base_SetConfig+0x134>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01f      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a30      	ldr	r2, [pc, #192]	@ (80022c0 <TIM_Base_SetConfig+0x138>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d01b      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a2f      	ldr	r2, [pc, #188]	@ (80022c4 <TIM_Base_SetConfig+0x13c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d017      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a2e      	ldr	r2, [pc, #184]	@ (80022c8 <TIM_Base_SetConfig+0x140>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d013      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a2d      	ldr	r2, [pc, #180]	@ (80022cc <TIM_Base_SetConfig+0x144>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00f      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a2c      	ldr	r2, [pc, #176]	@ (80022d0 <TIM_Base_SetConfig+0x148>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00b      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a2b      	ldr	r2, [pc, #172]	@ (80022d4 <TIM_Base_SetConfig+0x14c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d007      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a2a      	ldr	r2, [pc, #168]	@ (80022d8 <TIM_Base_SetConfig+0x150>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d003      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a29      	ldr	r2, [pc, #164]	@ (80022dc <TIM_Base_SetConfig+0x154>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d108      	bne.n	800224c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a10      	ldr	r2, [pc, #64]	@ (80022b4 <TIM_Base_SetConfig+0x12c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d003      	beq.n	8002280 <TIM_Base_SetConfig+0xf8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a12      	ldr	r2, [pc, #72]	@ (80022c4 <TIM_Base_SetConfig+0x13c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d103      	bne.n	8002288 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b01      	cmp	r3, #1
 8002298:	d105      	bne.n	80022a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f023 0201 	bic.w	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	611a      	str	r2, [r3, #16]
  }
}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40010000 	.word	0x40010000
 80022b8:	40000400 	.word	0x40000400
 80022bc:	40000800 	.word	0x40000800
 80022c0:	40000c00 	.word	0x40000c00
 80022c4:	40010400 	.word	0x40010400
 80022c8:	40014000 	.word	0x40014000
 80022cc:	40014400 	.word	0x40014400
 80022d0:	40014800 	.word	0x40014800
 80022d4:	40001800 	.word	0x40001800
 80022d8:	40001c00 	.word	0x40001c00
 80022dc:	40002000 	.word	0x40002000

080022e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f103 0208 	add.w	r2, r3, #8
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f04f 32ff 	mov.w	r2, #4294967295
 8002334:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f103 0208 	add.w	r2, r3, #8
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f103 0208 	add.w	r2, r3, #8
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002350:	f240 1019 	movw	r0, #281	@ 0x119
 8002354:	f005 f964 	bl	8007620 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 800236e:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002372:	f005 f955 	bl	8007620 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
 80023ba:	f240 101b 	movw	r0, #283	@ 0x11b
 80023be:	f005 f92f 	bl	8007620 <SEGGER_SYSVIEW_RecordEndCall>
}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b084      	sub	sp, #16
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d103      	bne.n	80023ea <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	e00c      	b.n	8002404 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3308      	adds	r3, #8
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	e002      	b.n	80023f8 <vListInsert+0x2e>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	429a      	cmp	r2, r3
 8002402:	d2f6      	bcs.n	80023f2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002430:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002434:	f005 f8f4 	bl	8007620 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002438:	bf00      	nop
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6892      	ldr	r2, [r2, #8]
 8002456:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6852      	ldr	r2, [r2, #4]
 8002460:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	429a      	cmp	r2, r3
 800246a:	d103      	bne.n	8002474 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	1e5a      	subs	r2, r3, #1
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4619      	mov	r1, r3
 800248a:	f240 101d 	movw	r0, #285	@ 0x11d
 800248e:	f005 f903 	bl	8007698 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80024aa:	2301      	movs	r3, #1
 80024ac:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10d      	bne.n	80024d4 <xQueueGenericReset+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80024b8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80024bc:	b672      	cpsid	i
 80024be:	f383 8811 	msr	BASEPRI, r3
 80024c2:	f3bf 8f6f 	isb	sy
 80024c6:	f3bf 8f4f 	dsb	sy
 80024ca:	b662      	cpsie	i
 80024cc:	60fb      	str	r3, [r7, #12]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80024ce:	bf00      	nop
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d05d      	beq.n	8002596 <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d059      	beq.n	8002596 <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ea:	2100      	movs	r1, #0
 80024ec:	fba3 2302 	umull	r2, r3, r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d000      	beq.n	80024f6 <xQueueGenericReset+0x56>
 80024f4:	2101      	movs	r1, #1
 80024f6:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d14c      	bne.n	8002596 <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 80024fc:	f002 fbfa 	bl	8004cf4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002508:	6939      	ldr	r1, [r7, #16]
 800250a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	441a      	add	r2, r3
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2200      	movs	r2, #0
 800251a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252c:	3b01      	subs	r3, #1
 800252e:	6939      	ldr	r1, [r7, #16]
 8002530:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	441a      	add	r2, r3
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	22ff      	movs	r2, #255	@ 0xff
 8002540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	22ff      	movs	r2, #255	@ 0xff
 8002548:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d114      	bne.n	800257c <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01a      	beq.n	8002590 <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	3310      	adds	r3, #16
 800255e:	4618      	mov	r0, r3
 8002560:	f001 fa4c 	bl	80039fc <xTaskRemoveFromEventList>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d012      	beq.n	8002590 <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800256a:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <xQueueGenericReset+0x130>)
 800256c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	f3bf 8f4f 	dsb	sy
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	e009      	b.n	8002590 <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	3310      	adds	r3, #16
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fecb 	bl	800231c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	3324      	adds	r3, #36	@ 0x24
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fec6 	bl	800231c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002590:	f002 fbe6 	bl	8004d60 <vPortExitCritical>
 8002594:	e001      	b.n	800259a <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10d      	bne.n	80025bc <xQueueGenericReset+0x11c>
    __asm volatile
 80025a0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80025a4:	b672      	cpsid	i
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	b662      	cpsie	i
 80025b4:	60bb      	str	r3, [r7, #8]
}
 80025b6:	bf00      	nop
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	4619      	mov	r1, r3
 80025c0:	2096      	movs	r0, #150	@ 0x96
 80025c2:	f005 f869 	bl	8007698 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80025c6:	697b      	ldr	r3, [r7, #20]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	e000ed04 	.word	0xe000ed04

080025d4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	@ 0x28
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	4613      	mov	r3, r2
 80025e0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d02e      	beq.n	800264a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80025ec:	2100      	movs	r1, #0
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	fba3 2302 	umull	r2, r3, r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d000      	beq.n	80025fc <xQueueGenericCreate+0x28>
 80025fa:	2101      	movs	r1, #1
 80025fc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d123      	bne.n	800264a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800260a:	f113 0f55 	cmn.w	r3, #85	@ 0x55
 800260e:	d81c      	bhi.n	800264a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	fb02 f303 	mul.w	r3, r2, r3
 8002618:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	3354      	adds	r3, #84	@ 0x54
 800261e:	4618      	mov	r0, r3
 8002620:	f002 fca4 	bl	8004f6c <pvPortMalloc>
 8002624:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01f      	beq.n	800266c <xQueueGenericCreate+0x98>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	3354      	adds	r3, #84	@ 0x54
 8002634:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002636:	79fa      	ldrb	r2, [r7, #7]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	4613      	mov	r3, r2
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f820 	bl	8002688 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002648:	e010      	b.n	800266c <xQueueGenericCreate+0x98>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10d      	bne.n	800266c <xQueueGenericCreate+0x98>
    __asm volatile
 8002650:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002654:	b672      	cpsid	i
 8002656:	f383 8811 	msr	BASEPRI, r3
 800265a:	f3bf 8f6f 	isb	sy
 800265e:	f3bf 8f4f 	dsb	sy
 8002662:	b662      	cpsie	i
 8002664:	613b      	str	r3, [r7, #16]
}
 8002666:	bf00      	nop
 8002668:	bf00      	nop
 800266a:	e7fd      	b.n	8002668 <xQueueGenericCreate+0x94>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	4618      	mov	r0, r3
 8002670:	f005 f9ac 	bl	80079cc <SEGGER_SYSVIEW_ShrinkId>
 8002674:	4603      	mov	r3, r0
 8002676:	4619      	mov	r1, r3
 8002678:	2098      	movs	r0, #152	@ 0x98
 800267a:	f005 f80d 	bl	8007698 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 800267e:	69fb      	ldr	r3, [r7, #28]
    }
 8002680:	4618      	mov	r0, r3
 8002682:	3720      	adds	r7, #32
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d103      	bne.n	80026a4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	e002      	b.n	80026aa <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026b6:	2101      	movs	r1, #1
 80026b8:	69b8      	ldr	r0, [r7, #24]
 80026ba:	f7ff fef1 	bl	80024a0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
    {
        pxNewQueue->pxQueueSetContainer = NULL;
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2200      	movs	r2, #0
 80026ca:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80026cc:	bf00      	nop
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08c      	sub	sp, #48	@ 0x30
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80026e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10d      	bne.n	800270a <xQueueReceive+0x36>
    __asm volatile
 80026ee:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80026f2:	b672      	cpsid	i
 80026f4:	f383 8811 	msr	BASEPRI, r3
 80026f8:	f3bf 8f6f 	isb	sy
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	b662      	cpsie	i
 8002702:	623b      	str	r3, [r7, #32]
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	e7fd      	b.n	8002706 <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d103      	bne.n	8002718 <xQueueReceive+0x44>
 8002710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <xQueueReceive+0x48>
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <xQueueReceive+0x4a>
 800271c:	2300      	movs	r3, #0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10d      	bne.n	800273e <xQueueReceive+0x6a>
    __asm volatile
 8002722:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002726:	b672      	cpsid	i
 8002728:	f383 8811 	msr	BASEPRI, r3
 800272c:	f3bf 8f6f 	isb	sy
 8002730:	f3bf 8f4f 	dsb	sy
 8002734:	b662      	cpsie	i
 8002736:	61fb      	str	r3, [r7, #28]
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	e7fd      	b.n	800273a <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800273e:	f001 fb85 	bl	8003e4c <xTaskGetSchedulerState>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <xQueueReceive+0x7a>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <xQueueReceive+0x7e>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <xQueueReceive+0x80>
 8002752:	2300      	movs	r3, #0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10d      	bne.n	8002774 <xQueueReceive+0xa0>
    __asm volatile
 8002758:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800275c:	b672      	cpsid	i
 800275e:	f383 8811 	msr	BASEPRI, r3
 8002762:	f3bf 8f6f 	isb	sy
 8002766:	f3bf 8f4f 	dsb	sy
 800276a:	b662      	cpsie	i
 800276c:	61bb      	str	r3, [r7, #24]
}
 800276e:	bf00      	nop
 8002770:	bf00      	nop
 8002772:	e7fd      	b.n	8002770 <xQueueReceive+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002774:	f002 fabe 	bl	8004cf4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800277c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	2b00      	cmp	r3, #0
 8002782:	d023      	beq.n	80027cc <xQueueReceive+0xf8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002788:	f000 f902 	bl	8002990 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	1e5a      	subs	r2, r3, #1
 8002790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002792:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00f      	beq.n	80027bc <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800279c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800279e:	3310      	adds	r3, #16
 80027a0:	4618      	mov	r0, r3
 80027a2:	f001 f92b 	bl	80039fc <xTaskRemoveFromEventList>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80027ac:	4b42      	ldr	r3, [pc, #264]	@ (80028b8 <xQueueReceive+0x1e4>)
 80027ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80027bc:	f002 fad0 	bl	8004d60 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 80027c0:	2101      	movs	r1, #1
 80027c2:	20a4      	movs	r0, #164	@ 0xa4
 80027c4:	f004 ff68 	bl	8007698 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e071      	b.n	80028b0 <xQueueReceive+0x1dc>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d107      	bne.n	80027e2 <xQueueReceive+0x10e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80027d2:	f002 fac5 	bl	8004d60 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80027d6:	2100      	movs	r1, #0
 80027d8:	20a4      	movs	r0, #164	@ 0xa4
 80027da:	f004 ff5d 	bl	8007698 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 80027de:	2300      	movs	r3, #0
 80027e0:	e066      	b.n	80028b0 <xQueueReceive+0x1dc>
                }
                else if( xEntryTimeSet == pdFALSE )
 80027e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d106      	bne.n	80027f6 <xQueueReceive+0x122>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80027e8:	f107 0310 	add.w	r3, r7, #16
 80027ec:	4618      	mov	r0, r3
 80027ee:	f001 f9e7 	bl	8003bc0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80027f2:	2301      	movs	r3, #1
 80027f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80027f6:	f002 fab3 	bl	8004d60 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80027fa:	f000 fd9f 	bl	800333c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027fe:	f002 fa79 	bl	8004cf4 <vPortEnterCritical>
 8002802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002804:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002808:	b25b      	sxtb	r3, r3
 800280a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280e:	d103      	bne.n	8002818 <xQueueReceive+0x144>
 8002810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800281e:	b25b      	sxtb	r3, r3
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d103      	bne.n	800282e <xQueueReceive+0x15a>
 8002826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800282e:	f002 fa97 	bl	8004d60 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002832:	1d3a      	adds	r2, r7, #4
 8002834:	f107 0310 	add.w	r3, r7, #16
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f001 f9d8 	bl	8003bf0 <xTaskCheckForTimeOut>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d123      	bne.n	800288e <xQueueReceive+0x1ba>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002848:	f000 f927 	bl	8002a9a <prvIsQueueEmpty>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d017      	beq.n	8002882 <xQueueReceive+0x1ae>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002854:	3324      	adds	r3, #36	@ 0x24
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f001 f858 	bl	8003910 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002860:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002862:	f000 f8bb 	bl	80029dc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002866:	f000 fd77 	bl	8003358 <xTaskResumeAll>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d181      	bne.n	8002774 <xQueueReceive+0xa0>
                {
                    taskYIELD_WITHIN_API();
 8002870:	4b11      	ldr	r3, [pc, #68]	@ (80028b8 <xQueueReceive+0x1e4>)
 8002872:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	e778      	b.n	8002774 <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002882:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002884:	f000 f8aa 	bl	80029dc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002888:	f000 fd66 	bl	8003358 <xTaskResumeAll>
 800288c:	e772      	b.n	8002774 <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800288e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002890:	f000 f8a4 	bl	80029dc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002894:	f000 fd60 	bl	8003358 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002898:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800289a:	f000 f8fe 	bl	8002a9a <prvIsQueueEmpty>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f43f af67 	beq.w	8002774 <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80028a6:	2100      	movs	r1, #0
 80028a8:	20a4      	movs	r0, #164	@ 0xa4
 80028aa:	f004 fef5 	bl	8007698 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80028ae:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3730      	adds	r7, #48	@ 0x30
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	e000ed04 	.word	0xe000ed04

080028bc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10d      	bne.n	80028f6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d14d      	bne.n	800297e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f001 fad2 	bl	8003e90 <xTaskPriorityDisinherit>
 80028ec:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	e043      	b.n	800297e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d119      	bne.n	8002930 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6858      	ldr	r0, [r3, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002904:	461a      	mov	r2, r3
 8002906:	68b9      	ldr	r1, [r7, #8]
 8002908:	f005 fa30 	bl	8007d6c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	441a      	add	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	429a      	cmp	r2, r3
 8002924:	d32b      	bcc.n	800297e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	e026      	b.n	800297e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	68d8      	ldr	r0, [r3, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	461a      	mov	r2, r3
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	f005 fa16 	bl	8007d6c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	425b      	negs	r3, r3
 800294a:	441a      	add	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d207      	bcs.n	800296c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002964:	425b      	negs	r3, r3
 8002966:	441a      	add	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d105      	bne.n	800297e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	3b01      	subs	r3, #1
 800297c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002986:	697b      	ldr	r3, [r7, #20]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d018      	beq.n	80029d4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	441a      	add	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d303      	bcc.n	80029c4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68d9      	ldr	r1, [r3, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	461a      	mov	r2, r3
 80029ce:	6838      	ldr	r0, [r7, #0]
 80029d0:	f005 f9cc 	bl	8007d6c <memcpy>
    }
}
 80029d4:	bf00      	nop
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80029e4:	f002 f986 	bl	8004cf4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029ee:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80029f0:	e01e      	b.n	8002a30 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <prvUnlockQueue+0x30>
                {
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f8ed 	bl	8002bda <prvNotifyQueueSetContainer>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d010      	beq.n	8002a28 <prvUnlockQueue+0x4c>
                    {
                        /* The queue is a member of a queue set, and posting to
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
 8002a06:	f001 f963 	bl	8003cd0 <vTaskMissedYield>
 8002a0a:	e00d      	b.n	8002a28 <prvUnlockQueue+0x4c>
                else
                {
                    /* Tasks that are removed from the event list will get
                     * added to the pending ready list as the scheduler is still
                     * suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d012      	beq.n	8002a3a <prvUnlockQueue+0x5e>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3324      	adds	r3, #36	@ 0x24
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 ffef 	bl	80039fc <xTaskRemoveFromEventList>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <prvUnlockQueue+0x4c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            vTaskMissedYield();
 8002a24:	f001 f954 	bl	8003cd0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	dcdc      	bgt.n	80029f2 <prvUnlockQueue+0x16>
 8002a38:	e000      	b.n	8002a3c <prvUnlockQueue+0x60>
                        break;
 8002a3a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	22ff      	movs	r2, #255	@ 0xff
 8002a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002a44:	f002 f98c 	bl	8004d60 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002a48:	f002 f954 	bl	8004cf4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a52:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a54:	e011      	b.n	8002a7a <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d012      	beq.n	8002a84 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3310      	adds	r3, #16
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 ffca 	bl	80039fc <xTaskRemoveFromEventList>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 8002a6e:	f001 f92f 	bl	8003cd0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002a72:	7bbb      	ldrb	r3, [r7, #14]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	dce9      	bgt.n	8002a56 <prvUnlockQueue+0x7a>
 8002a82:	e000      	b.n	8002a86 <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8002a84:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	22ff      	movs	r2, #255	@ 0xff
 8002a8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002a8e:	f002 f967 	bl	8004d60 <vPortExitCritical>
}
 8002a92:	bf00      	nop
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002aa2:	f002 f927 	bl	8004cf4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d102      	bne.n	8002ab4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	e001      	b.n	8002ab8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002ab8:	f002 f952 	bl	8004d60 <vPortExitCritical>

    return xReturn;
 8002abc:	68fb      	ldr	r3, [r7, #12]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10d      	bne.n	8002af8 <vQueueAddToRegistry+0x30>
    __asm volatile
 8002adc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002ae0:	b672      	cpsid	i
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	b662      	cpsie	i
 8002af0:	60fb      	str	r3, [r7, #12]
}
 8002af2:	bf00      	nop
 8002af4:	bf00      	nop
 8002af6:	e7fd      	b.n	8002af4 <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d024      	beq.n	8002b48 <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	e01e      	b.n	8002b42 <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002b04:	4a18      	ldr	r2, [pc, #96]	@ (8002b68 <vQueueAddToRegistry+0xa0>)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d105      	bne.n	8002b20 <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4a13      	ldr	r2, [pc, #76]	@ (8002b68 <vQueueAddToRegistry+0xa0>)
 8002b1a:	4413      	add	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
                    break;
 8002b1e:	e013      	b.n	8002b48 <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10a      	bne.n	8002b3c <vQueueAddToRegistry+0x74>
 8002b26:	4a10      	ldr	r2, [pc, #64]	@ (8002b68 <vQueueAddToRegistry+0xa0>)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d104      	bne.n	8002b3c <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4a0c      	ldr	r2, [pc, #48]	@ (8002b68 <vQueueAddToRegistry+0xa0>)
 8002b38:	4413      	add	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b07      	cmp	r3, #7
 8002b46:	d9dd      	bls.n	8002b04 <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8002b5a:	20b6      	movs	r0, #182	@ 0xb6
 8002b5c:	f004 fd60 	bl	8007620 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002b60:	bf00      	nop
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	2000009c 	.word	0x2000009c

08002b6c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002b7c:	f002 f8ba 	bl	8004cf4 <vPortEnterCritical>
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b86:	b25b      	sxtb	r3, r3
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d103      	bne.n	8002b96 <vQueueWaitForMessageRestricted+0x2a>
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b9c:	b25b      	sxtb	r3, r3
 8002b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba2:	d103      	bne.n	8002bac <vQueueWaitForMessageRestricted+0x40>
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bac:	f002 f8d8 	bl	8004d60 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d106      	bne.n	8002bc6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	3324      	adds	r3, #36	@ 0x24
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 fecf 	bl	8003964 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002bc6:	6978      	ldr	r0, [r7, #20]
 8002bc8:	f7ff ff08 	bl	80029dc <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8002bcc:	20b9      	movs	r0, #185	@ 0xb9
 8002bce:	f004 fd27 	bl	8007620 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002bd2:	bf00      	nop
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b08a      	sub	sp, #40	@ 0x28
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002be6:	623b      	str	r3, [r7, #32]
        BaseType_t xReturn = pdFALSE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	627b      	str	r3, [r7, #36]	@ 0x24
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10d      	bne.n	8002c0e <prvNotifyQueueSetContainer+0x34>
    __asm volatile
 8002bf2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002bf6:	b672      	cpsid	i
 8002bf8:	f383 8811 	msr	BASEPRI, r3
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	b662      	cpsie	i
 8002c06:	617b      	str	r3, [r7, #20]
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	e7fd      	b.n	8002c0a <prvNotifyQueueSetContainer+0x30>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d30d      	bcc.n	8002c36 <prvNotifyQueueSetContainer+0x5c>
    __asm volatile
 8002c1a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002c1e:	b672      	cpsid	i
 8002c20:	f383 8811 	msr	BASEPRI, r3
 8002c24:	f3bf 8f6f 	isb	sy
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	b662      	cpsie	i
 8002c2e:	613b      	str	r3, [r7, #16]
}
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
 8002c34:	e7fd      	b.n	8002c32 <prvNotifyQueueSetContainer+0x58>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d23f      	bcs.n	8002cc2 <prvNotifyQueueSetContainer+0xe8>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c48:	77fb      	strb	r3, [r7, #31]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	4619      	mov	r1, r3
 8002c50:	6a38      	ldr	r0, [r7, #32]
 8002c52:	f7ff fe33 	bl	80028bc <prvCopyDataToQueue>
 8002c56:	6278      	str	r0, [r7, #36]	@ 0x24

            if( cTxLock == queueUNLOCKED )
 8002c58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c60:	d10e      	bne.n	8002c80 <prvNotifyQueueSetContainer+0xa6>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d02b      	beq.n	8002cc2 <prvNotifyQueueSetContainer+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	3324      	adds	r3, #36	@ 0x24
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fec4 	bl	80039fc <xTaskRemoveFromEventList>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d023      	beq.n	8002cc2 <prvNotifyQueueSetContainer+0xe8>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c7e:	e020      	b.n	8002cc2 <prvNotifyQueueSetContainer+0xe8>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
 8002c80:	f000 fca6 	bl	80035d0 <uxTaskGetNumberOfTasks>
 8002c84:	61b8      	str	r0, [r7, #24]
 8002c86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d918      	bls.n	8002cc2 <prvNotifyQueueSetContainer+0xe8>
 8002c90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002c94:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c96:	d10d      	bne.n	8002cb4 <prvNotifyQueueSetContainer+0xda>
    __asm volatile
 8002c98:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002c9c:	b672      	cpsid	i
 8002c9e:	f383 8811 	msr	BASEPRI, r3
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	b662      	cpsie	i
 8002cac:	60fb      	str	r3, [r7, #12]
}
 8002cae:	bf00      	nop
 8002cb0:	bf00      	nop
 8002cb2:	e7fd      	b.n	8002cb0 <prvNotifyQueueSetContainer+0xd6>
 8002cb4:	7ffb      	ldrb	r3, [r7, #31]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	b25a      	sxtb	r2, r3
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3728      	adds	r7, #40	@ 0x28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08a      	sub	sp, #40	@ 0x28
 8002cd0:	af04      	add	r7, sp, #16
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f002 f944 	bl	8004f6c <pvPortMalloc>
 8002ce4:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d013      	beq.n	8002d14 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002cec:	2058      	movs	r0, #88	@ 0x58
 8002cee:	f002 f93d 	bl	8004f6c <pvPortMalloc>
 8002cf2:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002cfa:	2258      	movs	r2, #88	@ 0x58
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	6978      	ldr	r0, [r7, #20]
 8002d00:	f005 f808 	bl	8007d14 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d0a:	e005      	b.n	8002d18 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002d0c:	6938      	ldr	r0, [r7, #16]
 8002d0e:	f002 fa6b 	bl	80051e8 <vPortFree>
 8002d12:	e001      	b.n	8002d18 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00d      	beq.n	8002d3a <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d1e:	2300      	movs	r3, #0
 8002d20:	9303      	str	r3, [sp, #12]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	9302      	str	r3, [sp, #8]
 8002d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f82d 	bl	8002d94 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002d3a:	697b      	ldr	r3, [r7, #20]
    }
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	9301      	str	r3, [sp, #4]
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	68b9      	ldr	r1, [r7, #8]
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f7ff ffb3 	bl	8002ccc <prvCreateTask>
 8002d66:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002d6e:	6938      	ldr	r0, [r7, #16]
 8002d70:	f000 f8a4 	bl	8002ebc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d74:	2301      	movs	r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	e002      	b.n	8002d80 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7e:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	4619      	mov	r1, r3
 8002d84:	20c2      	movs	r0, #194	@ 0xc2
 8002d86:	f004 fc87 	bl	8007698 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002d8a:	697b      	ldr	r3, [r7, #20]
    }
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	461a      	mov	r2, r3
 8002dac:	21a5      	movs	r1, #165	@ 0xa5
 8002dae:	f004 ffb1 	bl	8007d14 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002dbc:	440b      	add	r3, r1
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f023 0307 	bic.w	r3, r3, #7
 8002dca:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00d      	beq.n	8002df2 <prvInitialiseNewTask+0x5e>
    __asm volatile
 8002dd6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002dda:	b672      	cpsid	i
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	b662      	cpsie	i
 8002dea:	617b      	str	r3, [r7, #20]
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	e7fd      	b.n	8002dee <prvInitialiseNewTask+0x5a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d01e      	beq.n	8002e36 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	e012      	b.n	8002e24 <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	4413      	add	r3, r2
 8002e04:	7819      	ldrb	r1, [r3, #0]
 8002e06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3334      	adds	r3, #52	@ 0x34
 8002e0e:	460a      	mov	r2, r1
 8002e10:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	4413      	add	r3, r2
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d006      	beq.n	8002e2c <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3301      	adds	r3, #1
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	2b09      	cmp	r3, #9
 8002e28:	d9e9      	bls.n	8002dfe <prvInitialiseNewTask+0x6a>
 8002e2a:	e000      	b.n	8002e2e <prvInitialiseNewTask+0x9a>
            {
                break;
 8002e2c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d90d      	bls.n	8002e58 <prvInitialiseNewTask+0xc4>
    __asm volatile
 8002e3c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002e40:	b672      	cpsid	i
 8002e42:	f383 8811 	msr	BASEPRI, r3
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	b662      	cpsie	i
 8002e50:	613b      	str	r3, [r7, #16]
}
 8002e52:	bf00      	nop
 8002e54:	bf00      	nop
 8002e56:	e7fd      	b.n	8002e54 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d901      	bls.n	8002e62 <prvInitialiseNewTask+0xce>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e5e:	2304      	movs	r3, #4
 8002e60:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e66:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e6c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e70:	3304      	adds	r3, #4
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fa74 	bl	8002360 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7a:	3318      	adds	r3, #24
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fa6f 	bl	8002360 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e86:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8a:	f1c3 0205 	rsb	r2, r3, #5
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e90:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e96:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	68f9      	ldr	r1, [r7, #12]
 8002e9c:	69b8      	ldr	r0, [r7, #24]
 8002e9e:	f001 fdc9 	bl	8004a34 <pxPortInitialiseStack>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea6:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <prvInitialiseNewTask+0x120>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eb2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002eb4:	bf00      	nop
 8002eb6:	3720      	adds	r7, #32
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002ebc:	b5b0      	push	{r4, r5, r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002ec4:	f001 ff16 	bl	8004cf4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002ec8:	4b50      	ldr	r3, [pc, #320]	@ (800300c <prvAddNewTaskToReadyList+0x150>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	4a4f      	ldr	r2, [pc, #316]	@ (800300c <prvAddNewTaskToReadyList+0x150>)
 8002ed0:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002ed2:	4b4f      	ldr	r3, [pc, #316]	@ (8003010 <prvAddNewTaskToReadyList+0x154>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d109      	bne.n	8002eee <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002eda:	4a4d      	ldr	r2, [pc, #308]	@ (8003010 <prvAddNewTaskToReadyList+0x154>)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ee0:	4b4a      	ldr	r3, [pc, #296]	@ (800300c <prvAddNewTaskToReadyList+0x150>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d110      	bne.n	8002f0a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002ee8:	f000 ff16 	bl	8003d18 <prvInitialiseTaskLists>
 8002eec:	e00d      	b.n	8002f0a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002eee:	4b49      	ldr	r3, [pc, #292]	@ (8003014 <prvAddNewTaskToReadyList+0x158>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ef6:	4b46      	ldr	r3, [pc, #280]	@ (8003010 <prvAddNewTaskToReadyList+0x154>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d802      	bhi.n	8002f0a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002f04:	4a42      	ldr	r2, [pc, #264]	@ (8003010 <prvAddNewTaskToReadyList+0x154>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002f0a:	4b43      	ldr	r3, [pc, #268]	@ (8003018 <prvAddNewTaskToReadyList+0x15c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	4a41      	ldr	r2, [pc, #260]	@ (8003018 <prvAddNewTaskToReadyList+0x15c>)
 8002f12:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f14:	4b40      	ldr	r3, [pc, #256]	@ (8003018 <prvAddNewTaskToReadyList+0x15c>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d016      	beq.n	8002f50 <prvAddNewTaskToReadyList+0x94>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f004 fc2b 	bl	8007780 <SEGGER_SYSVIEW_OnTaskCreate>
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3a:	461d      	mov	r5, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	461c      	mov	r4, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	1ae3      	subs	r3, r4, r3
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	462b      	mov	r3, r5
 8002f4c:	f002 fb52 	bl	80055f4 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f004 fc98 	bl	8007888 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	4b2e      	ldr	r3, [pc, #184]	@ (800301c <prvAddNewTaskToReadyList+0x160>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	4a2d      	ldr	r2, [pc, #180]	@ (800301c <prvAddNewTaskToReadyList+0x160>)
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f6e:	492c      	ldr	r1, [pc, #176]	@ (8003020 <prvAddNewTaskToReadyList+0x164>)
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	60da      	str	r2, [r3, #12]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	3204      	adds	r2, #4
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	1d1a      	adds	r2, r3, #4
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	609a      	str	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4a1c      	ldr	r2, [pc, #112]	@ (8003020 <prvAddNewTaskToReadyList+0x164>)
 8002fae:	441a      	add	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	615a      	str	r2, [r3, #20]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb8:	4919      	ldr	r1, [pc, #100]	@ (8003020 <prvAddNewTaskToReadyList+0x164>)
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002fca:	1c59      	adds	r1, r3, #1
 8002fcc:	4814      	ldr	r0, [pc, #80]	@ (8003020 <prvAddNewTaskToReadyList+0x164>)
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4403      	add	r3, r0
 8002fd8:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002fda:	f001 fec1 	bl	8004d60 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002fde:	4b0d      	ldr	r3, [pc, #52]	@ (8003014 <prvAddNewTaskToReadyList+0x158>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00e      	beq.n	8003004 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8003010 <prvAddNewTaskToReadyList+0x154>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d207      	bcs.n	8003004 <prvAddNewTaskToReadyList+0x148>
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8003024 <prvAddNewTaskToReadyList+0x168>)
 8002ff6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bdb0      	pop	{r4, r5, r7, pc}
 800300c:	200001b4 	.word	0x200001b4
 8003010:	200000dc 	.word	0x200000dc
 8003014:	200001c0 	.word	0x200001c0
 8003018:	200001d0 	.word	0x200001d0
 800301c:	200001bc 	.word	0x200001bc
 8003020:	200000e0 	.word	0x200000e0
 8003024:	e000ed04 	.word	0xe000ed04

08003028 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d01a      	beq.n	8003070 <vTaskDelay+0x48>
        {
            vTaskSuspendAll();
 800303a:	f000 f97f 	bl	800333c <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 800303e:	4b15      	ldr	r3, [pc, #84]	@ (8003094 <vTaskDelay+0x6c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d00d      	beq.n	8003062 <vTaskDelay+0x3a>
    __asm volatile
 8003046:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800304a:	b672      	cpsid	i
 800304c:	f383 8811 	msr	BASEPRI, r3
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	b662      	cpsie	i
 800305a:	60bb      	str	r3, [r7, #8]
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	e7fd      	b.n	800305e <vTaskDelay+0x36>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003062:	2100      	movs	r1, #0
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f001 f99d 	bl	80043a4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800306a:	f000 f975 	bl	8003358 <xTaskResumeAll>
 800306e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d107      	bne.n	8003086 <vTaskDelay+0x5e>
        {
            taskYIELD_WITHIN_API();
 8003076:	4b08      	ldr	r3, [pc, #32]	@ (8003098 <vTaskDelay+0x70>)
 8003078:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8003086:	20c5      	movs	r0, #197	@ 0xc5
 8003088:	f004 faca 	bl	8007620 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800308c:	bf00      	nop
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	200001dc 	.word	0x200001dc
 8003098:	e000ed04 	.word	0xe000ed04

0800309c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        traceENTER_vTaskSuspend( xTaskToSuspend );

        taskENTER_CRITICAL();
 80030a4:	f001 fe26 	bl	8004cf4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d102      	bne.n	80030b4 <vTaskSuspend+0x18>
 80030ae:	4b47      	ldr	r3, [pc, #284]	@ (80031cc <vTaskSuspend+0x130>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	e000      	b.n	80030b6 <vTaskSuspend+0x1a>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	3304      	adds	r3, #4
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff f9bf 	bl	8002440 <uxListRemove>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d115      	bne.n	80030f4 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030cc:	4940      	ldr	r1, [pc, #256]	@ (80031d0 <vTaskSuspend+0x134>)
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10a      	bne.n	80030f4 <vTaskSuspend+0x58>
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e2:	2201      	movs	r2, #1
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43da      	mvns	r2, r3
 80030ea:	4b3a      	ldr	r3, [pc, #232]	@ (80031d4 <vTaskSuspend+0x138>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4013      	ands	r3, r2
 80030f0:	4a38      	ldr	r2, [pc, #224]	@ (80031d4 <vTaskSuspend+0x138>)
 80030f2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d004      	beq.n	8003106 <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	3318      	adds	r3, #24
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff f99d 	bl	8002440 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	3304      	adds	r3, #4
 800310a:	4619      	mov	r1, r3
 800310c:	4832      	ldr	r0, [pc, #200]	@ (80031d8 <vTaskSuspend+0x13c>)
 800310e:	f7ff f936 	bl	800237e <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	e010      	b.n	800313a <vTaskSuspend+0x9e>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	4413      	add	r3, r2
 800311e:	3354      	adds	r3, #84	@ 0x54
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d105      	bne.n	8003134 <vTaskSuspend+0x98>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	4413      	add	r3, r2
 800312e:	3354      	adds	r3, #84	@ 0x54
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
                for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	3301      	adds	r3, #1
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b00      	cmp	r3, #0
 800313e:	ddeb      	ble.n	8003118 <vTaskSuspend+0x7c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
        }
        taskEXIT_CRITICAL();
 8003140:	f001 fe0e 	bl	8004d60 <vPortExitCritical>

        #if ( configNUMBER_OF_CORES == 1 )
        {
            UBaseType_t uxCurrentListLength;

            if( xSchedulerRunning != pdFALSE )
 8003144:	4b25      	ldr	r3, [pc, #148]	@ (80031dc <vTaskSuspend+0x140>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <vTaskSuspend+0xbc>
            {
                /* Reset the next expected unblock time in case it referred to the
                 * task that is now in the Suspended state. */
                taskENTER_CRITICAL();
 800314c:	f001 fdd2 	bl	8004cf4 <vPortEnterCritical>
                {
                    prvResetNextTaskUnblockTime();
 8003150:	f000 fe60 	bl	8003e14 <prvResetNextTaskUnblockTime>
                }
                taskEXIT_CRITICAL();
 8003154:	f001 fe04 	bl	8004d60 <vPortExitCritical>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( pxTCB == pxCurrentTCB )
 8003158:	4b1c      	ldr	r3, [pc, #112]	@ (80031cc <vTaskSuspend+0x130>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	429a      	cmp	r2, r3
 8003160:	d12c      	bne.n	80031bc <vTaskSuspend+0x120>
            {
                if( xSchedulerRunning != pdFALSE )
 8003162:	4b1e      	ldr	r3, [pc, #120]	@ (80031dc <vTaskSuspend+0x140>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01a      	beq.n	80031a0 <vTaskSuspend+0x104>
                {
                    /* The current task has just been suspended. */
                    configASSERT( uxSchedulerSuspended == 0 );
 800316a:	4b1d      	ldr	r3, [pc, #116]	@ (80031e0 <vTaskSuspend+0x144>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00d      	beq.n	800318e <vTaskSuspend+0xf2>
    __asm volatile
 8003172:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003176:	b672      	cpsid	i
 8003178:	f383 8811 	msr	BASEPRI, r3
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	b662      	cpsie	i
 8003186:	60bb      	str	r3, [r7, #8]
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	e7fd      	b.n	800318a <vTaskSuspend+0xee>
                    portYIELD_WITHIN_API();
 800318e:	4b15      	ldr	r3, [pc, #84]	@ (80031e4 <vTaskSuspend+0x148>)
 8003190:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	e00d      	b.n	80031bc <vTaskSuspend+0x120>
                     * must be adjusted to point to a different task. */

                    /* Use a temp variable as a distinct sequence point for reading
                     * volatile variables prior to a comparison to ensure compliance
                     * with MISRA C 2012 Rule 13.2. */
                    uxCurrentListLength = listCURRENT_LIST_LENGTH( &xSuspendedTaskList );
 80031a0:	4b0d      	ldr	r3, [pc, #52]	@ (80031d8 <vTaskSuspend+0x13c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60fb      	str	r3, [r7, #12]

                    if( uxCurrentListLength == uxCurrentNumberOfTasks )
 80031a6:	4b10      	ldr	r3, [pc, #64]	@ (80031e8 <vTaskSuspend+0x14c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d103      	bne.n	80031b8 <vTaskSuspend+0x11c>
                    {
                        /* No other tasks are ready, so set pxCurrentTCB back to
                         * NULL so when the next task is created pxCurrentTCB will
                         * be set to point to it no matter what its relative priority
                         * is. */
                        pxCurrentTCB = NULL;
 80031b0:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <vTaskSuspend+0x130>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	e001      	b.n	80031bc <vTaskSuspend+0x120>
                    }
                    else
                    {
                        vTaskSwitchContext();
 80031b8:	f000 fb3c 	bl	8003834 <vTaskSwitchContext>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskSuspend();
 80031bc:	20ca      	movs	r0, #202	@ 0xca
 80031be:	f004 fa2f 	bl	8007620 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80031c2:	bf00      	nop
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	200000dc 	.word	0x200000dc
 80031d0:	200000e0 	.word	0x200000e0
 80031d4:	200001bc 	.word	0x200001bc
 80031d8:	200001a0 	.word	0x200001a0
 80031dc:	200001c0 	.word	0x200001c0
 80031e0:	200001dc 	.word	0x200001dc
 80031e4:	e000ed04 	.word	0xe000ed04
 80031e8:	200001b4 	.word	0x200001b4

080031ec <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	@ 0x28
 80031f0:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80031f2:	2301      	movs	r3, #1
 80031f4:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	e011      	b.n	8003224 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003200:	4a1c      	ldr	r2, [pc, #112]	@ (8003274 <prvCreateIdleTasks+0x88>)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	4413      	add	r3, r2
 8003206:	7819      	ldrb	r1, [r3, #0]
 8003208:	1d3a      	adds	r2, r7, #4
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	4413      	add	r3, r2
 800320e:	460a      	mov	r2, r1
 8003210:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003212:	1d3a      	adds	r2, r7, #4
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	4413      	add	r3, r2
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d006      	beq.n	800322c <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	3301      	adds	r3, #1
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2b09      	cmp	r3, #9
 8003228:	ddea      	ble.n	8003200 <prvCreateIdleTasks+0x14>
 800322a:	e000      	b.n	800322e <prvCreateIdleTasks+0x42>
        {
            break;
 800322c:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800322e:	2300      	movs	r3, #0
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	e015      	b.n	8003260 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8003234:	4b10      	ldr	r3, [pc, #64]	@ (8003278 <prvCreateIdleTasks+0x8c>)
 8003236:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4a0f      	ldr	r2, [pc, #60]	@ (800327c <prvCreateIdleTasks+0x90>)
 800323e:	4413      	add	r3, r2
 8003240:	1d39      	adds	r1, r7, #4
 8003242:	9301      	str	r3, [sp, #4]
 8003244:	2300      	movs	r3, #0
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	2300      	movs	r3, #0
 800324a:	2282      	movs	r2, #130	@ 0x82
 800324c:	6938      	ldr	r0, [r7, #16]
 800324e:	f7ff fd79 	bl	8002d44 <xTaskCreate>
 8003252:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d006      	beq.n	8003268 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	3301      	adds	r3, #1
 800325e:	61bb      	str	r3, [r7, #24]
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2b00      	cmp	r3, #0
 8003264:	dde6      	ble.n	8003234 <prvCreateIdleTasks+0x48>
 8003266:	e000      	b.n	800326a <prvCreateIdleTasks+0x7e>
        {
            break;
 8003268:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800326a:	69fb      	ldr	r3, [r7, #28]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3720      	adds	r7, #32
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	08007e04 	.word	0x08007e04
 8003278:	08003ce9 	.word	0x08003ce9
 800327c:	200001d8 	.word	0x200001d8

08003280 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8003286:	f7ff ffb1 	bl	80031ec <prvCreateIdleTasks>
 800328a:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d102      	bne.n	8003298 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8003292:	f001 f915 	bl	80044c0 <xTimerCreateTimerTask>
 8003296:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d126      	bne.n	80032ec <vTaskStartScheduler+0x6c>
    __asm volatile
 800329e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80032a2:	b672      	cpsid	i
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	b662      	cpsie	i
 80032b2:	60bb      	str	r3, [r7, #8]
}
 80032b4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80032b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003324 <vTaskStartScheduler+0xa4>)
 80032b8:	f04f 32ff 	mov.w	r2, #4294967295
 80032bc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80032be:	4b1a      	ldr	r3, [pc, #104]	@ (8003328 <vTaskStartScheduler+0xa8>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032c4:	4b19      	ldr	r3, [pc, #100]	@ (800332c <vTaskStartScheduler+0xac>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80032ca:	4b19      	ldr	r3, [pc, #100]	@ (8003330 <vTaskStartScheduler+0xb0>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	4b19      	ldr	r3, [pc, #100]	@ (8003334 <vTaskStartScheduler+0xb4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d102      	bne.n	80032dc <vTaskStartScheduler+0x5c>
 80032d6:	f004 fa37 	bl	8007748 <SEGGER_SYSVIEW_OnIdle>
 80032da:	e004      	b.n	80032e6 <vTaskStartScheduler+0x66>
 80032dc:	4b15      	ldr	r3, [pc, #84]	@ (8003334 <vTaskStartScheduler+0xb4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f004 fa8f 	bl	8007804 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80032e6:	f001 fc35 	bl	8004b54 <xPortStartScheduler>
 80032ea:	e011      	b.n	8003310 <vTaskStartScheduler+0x90>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f2:	d10d      	bne.n	8003310 <vTaskStartScheduler+0x90>
    __asm volatile
 80032f4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80032f8:	b672      	cpsid	i
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	b662      	cpsie	i
 8003308:	607b      	str	r3, [r7, #4]
}
 800330a:	bf00      	nop
 800330c:	bf00      	nop
 800330e:	e7fd      	b.n	800330c <vTaskStartScheduler+0x8c>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003310:	4b09      	ldr	r3, [pc, #36]	@ (8003338 <vTaskStartScheduler+0xb8>)
 8003312:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8003314:	20cd      	movs	r0, #205	@ 0xcd
 8003316:	f004 f983 	bl	8007620 <SEGGER_SYSVIEW_RecordEndCall>
}
 800331a:	bf00      	nop
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	200001d4 	.word	0x200001d4
 8003328:	200001c0 	.word	0x200001c0
 800332c:	200001b8 	.word	0x200001b8
 8003330:	200001d8 	.word	0x200001d8
 8003334:	200000dc 	.word	0x200000dc
 8003338:	2000000c 	.word	0x2000000c

0800333c <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003340:	4b04      	ldr	r3, [pc, #16]	@ (8003354 <vTaskSuspendAll+0x18>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	3301      	adds	r3, #1
 8003346:	4a03      	ldr	r2, [pc, #12]	@ (8003354 <vTaskSuspendAll+0x18>)
 8003348:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 800334a:	20cf      	movs	r0, #207	@ 0xcf
 800334c:	f004 f968 	bl	8007620 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003350:	bf00      	nop
 8003352:	bd80      	pop	{r7, pc}
 8003354:	200001dc 	.word	0x200001dc

08003358 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003362:	2300      	movs	r3, #0
 8003364:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8003366:	f001 fcc5 	bl	8004cf4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800336a:	2300      	movs	r3, #0
 800336c:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800336e:	4b7b      	ldr	r3, [pc, #492]	@ (800355c <xTaskResumeAll+0x204>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10d      	bne.n	8003392 <xTaskResumeAll+0x3a>
    __asm volatile
 8003376:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800337a:	b672      	cpsid	i
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	b662      	cpsie	i
 800338a:	603b      	str	r3, [r7, #0]
}
 800338c:	bf00      	nop
 800338e:	bf00      	nop
 8003390:	e7fd      	b.n	800338e <xTaskResumeAll+0x36>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003392:	4b72      	ldr	r3, [pc, #456]	@ (800355c <xTaskResumeAll+0x204>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3b01      	subs	r3, #1
 8003398:	4a70      	ldr	r2, [pc, #448]	@ (800355c <xTaskResumeAll+0x204>)
 800339a:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800339c:	4b6f      	ldr	r3, [pc, #444]	@ (800355c <xTaskResumeAll+0x204>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f040 80ce 	bne.w	8003542 <xTaskResumeAll+0x1ea>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033a6:	4b6e      	ldr	r3, [pc, #440]	@ (8003560 <xTaskResumeAll+0x208>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 80c9 	beq.w	8003542 <xTaskResumeAll+0x1ea>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033b0:	e092      	b.n	80034d8 <xTaskResumeAll+0x180>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80033b2:	4b6c      	ldr	r3, [pc, #432]	@ (8003564 <xTaskResumeAll+0x20c>)
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	69fa      	ldr	r2, [r7, #28]
 80033c6:	6a12      	ldr	r2, [r2, #32]
 80033c8:	609a      	str	r2, [r3, #8]
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	69fa      	ldr	r2, [r7, #28]
 80033d0:	69d2      	ldr	r2, [r2, #28]
 80033d2:	605a      	str	r2, [r3, #4]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	3318      	adds	r3, #24
 80033dc:	429a      	cmp	r2, r3
 80033de:	d103      	bne.n	80033e8 <xTaskResumeAll+0x90>
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	6a1a      	ldr	r2, [r3, #32]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	605a      	str	r2, [r3, #4]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	2200      	movs	r2, #0
 80033ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	1e5a      	subs	r2, r3, #1
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	68d2      	ldr	r2, [r2, #12]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	6892      	ldr	r2, [r2, #8]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3304      	adds	r3, #4
 800341a:	429a      	cmp	r2, r3
 800341c:	d103      	bne.n	8003426 <xTaskResumeAll+0xce>
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	2200      	movs	r2, #0
 800342a:	615a      	str	r2, [r3, #20]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	1e5a      	subs	r2, r3, #1
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	4618      	mov	r0, r3
 800343a:	f004 fa25 	bl	8007888 <SEGGER_SYSVIEW_OnTaskStartReady>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003442:	2201      	movs	r2, #1
 8003444:	409a      	lsls	r2, r3
 8003446:	4b48      	ldr	r3, [pc, #288]	@ (8003568 <xTaskResumeAll+0x210>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4313      	orrs	r3, r2
 800344c:	4a46      	ldr	r2, [pc, #280]	@ (8003568 <xTaskResumeAll+0x210>)
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003454:	4945      	ldr	r1, [pc, #276]	@ (800356c <xTaskResumeAll+0x214>)
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	3304      	adds	r3, #4
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	607b      	str	r3, [r7, #4]
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	60da      	str	r2, [r3, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	3204      	adds	r2, #4
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	1d1a      	adds	r2, r3, #4
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	609a      	str	r2, [r3, #8]
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4a36      	ldr	r2, [pc, #216]	@ (800356c <xTaskResumeAll+0x214>)
 8003494:	441a      	add	r2, r3
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	615a      	str	r2, [r3, #20]
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800349e:	4933      	ldr	r1, [pc, #204]	@ (800356c <xTaskResumeAll+0x214>)
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69fa      	ldr	r2, [r7, #28]
 80034ae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80034b0:	1c59      	adds	r1, r3, #1
 80034b2:	482e      	ldr	r0, [pc, #184]	@ (800356c <xTaskResumeAll+0x214>)
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4403      	add	r3, r0
 80034be:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003570 <xTaskResumeAll+0x218>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d904      	bls.n	80034d8 <xTaskResumeAll+0x180>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80034ce:	4a29      	ldr	r2, [pc, #164]	@ (8003574 <xTaskResumeAll+0x21c>)
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	2101      	movs	r1, #1
 80034d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034d8:	4b22      	ldr	r3, [pc, #136]	@ (8003564 <xTaskResumeAll+0x20c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f47f af68 	bne.w	80033b2 <xTaskResumeAll+0x5a>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <xTaskResumeAll+0x194>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80034e8:	f000 fc94 	bl	8003e14 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80034ec:	4b22      	ldr	r3, [pc, #136]	@ (8003578 <xTaskResumeAll+0x220>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d012      	beq.n	800351e <xTaskResumeAll+0x1c6>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80034f8:	f000 f878 	bl	80035ec <xTaskIncrementTick>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d004      	beq.n	800350c <xTaskResumeAll+0x1b4>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003502:	4a1c      	ldr	r2, [pc, #112]	@ (8003574 <xTaskResumeAll+0x21c>)
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	2101      	movs	r1, #1
 8003508:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	3b01      	subs	r3, #1
 8003510:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1ef      	bne.n	80034f8 <xTaskResumeAll+0x1a0>

                            xPendedTicks = 0;
 8003518:	4b17      	ldr	r3, [pc, #92]	@ (8003578 <xTaskResumeAll+0x220>)
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800351e:	4a15      	ldr	r2, [pc, #84]	@ (8003574 <xTaskResumeAll+0x21c>)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00b      	beq.n	8003542 <xTaskResumeAll+0x1ea>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800352a:	2301      	movs	r3, #1
 800352c:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800352e:	4b10      	ldr	r3, [pc, #64]	@ (8003570 <xTaskResumeAll+0x218>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4b12      	ldr	r3, [pc, #72]	@ (800357c <xTaskResumeAll+0x224>)
 8003534:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003542:	f001 fc0d 	bl	8004d60 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	4619      	mov	r1, r3
 800354a:	20d0      	movs	r0, #208	@ 0xd0
 800354c:	f004 f8a4 	bl	8007698 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8003550:	69bb      	ldr	r3, [r7, #24]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	200001dc 	.word	0x200001dc
 8003560:	200001b4 	.word	0x200001b4
 8003564:	20000174 	.word	0x20000174
 8003568:	200001bc 	.word	0x200001bc
 800356c:	200000e0 	.word	0x200000e0
 8003570:	200000dc 	.word	0x200000dc
 8003574:	200001c8 	.word	0x200001c8
 8003578:	200001c4 	.word	0x200001c4
 800357c:	e000ed04 	.word	0xe000ed04

08003580 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003586:	4b06      	ldr	r3, [pc, #24]	@ (80035a0 <xTaskGetTickCount+0x20>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	20d1      	movs	r0, #209	@ 0xd1
 8003590:	f004 f882 	bl	8007698 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003594:	687b      	ldr	r3, [r7, #4]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	200001b8 	.word	0x200001b8

080035a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035aa:	f001 fc99 	bl	8004ee0 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80035ae:	2300      	movs	r3, #0
 80035b0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80035b2:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <xTaskGetTickCountFromISR+0x28>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 80035b8:	6839      	ldr	r1, [r7, #0]
 80035ba:	20d2      	movs	r0, #210	@ 0xd2
 80035bc:	f004 f86c 	bl	8007698 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80035c0:	683b      	ldr	r3, [r7, #0]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	200001b8 	.word	0x200001b8

080035d0 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
    traceENTER_uxTaskGetNumberOfTasks();

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );
 80035d4:	4b04      	ldr	r3, [pc, #16]	@ (80035e8 <uxTaskGetNumberOfTasks+0x18>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4619      	mov	r1, r3
 80035da:	20d3      	movs	r0, #211	@ 0xd3
 80035dc:	f004 f85c 	bl	8007698 <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxCurrentNumberOfTasks;
 80035e0:	4b01      	ldr	r3, [pc, #4]	@ (80035e8 <uxTaskGetNumberOfTasks+0x18>)
 80035e2:	681b      	ldr	r3, [r3, #0]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200001b4 	.word	0x200001b4

080035ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	@ 0x28
 80035f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80035f6:	4b84      	ldr	r3, [pc, #528]	@ (8003808 <xTaskIncrementTick+0x21c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f040 80f5 	bne.w	80037ea <xTaskIncrementTick+0x1fe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003600:	4b82      	ldr	r3, [pc, #520]	@ (800380c <xTaskIncrementTick+0x220>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3301      	adds	r3, #1
 8003606:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003608:	4a80      	ldr	r2, [pc, #512]	@ (800380c <xTaskIncrementTick+0x220>)
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d123      	bne.n	800365c <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 8003614:	4b7e      	ldr	r3, [pc, #504]	@ (8003810 <xTaskIncrementTick+0x224>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00d      	beq.n	800363a <xTaskIncrementTick+0x4e>
    __asm volatile
 800361e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003622:	b672      	cpsid	i
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	b662      	cpsie	i
 8003632:	607b      	str	r3, [r7, #4]
}
 8003634:	bf00      	nop
 8003636:	bf00      	nop
 8003638:	e7fd      	b.n	8003636 <xTaskIncrementTick+0x4a>
 800363a:	4b75      	ldr	r3, [pc, #468]	@ (8003810 <xTaskIncrementTick+0x224>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	61fb      	str	r3, [r7, #28]
 8003640:	4b74      	ldr	r3, [pc, #464]	@ (8003814 <xTaskIncrementTick+0x228>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a72      	ldr	r2, [pc, #456]	@ (8003810 <xTaskIncrementTick+0x224>)
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	4a72      	ldr	r2, [pc, #456]	@ (8003814 <xTaskIncrementTick+0x228>)
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b72      	ldr	r3, [pc, #456]	@ (8003818 <xTaskIncrementTick+0x22c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3301      	adds	r3, #1
 8003654:	4a70      	ldr	r2, [pc, #448]	@ (8003818 <xTaskIncrementTick+0x22c>)
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	f000 fbdc 	bl	8003e14 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800365c:	4b6f      	ldr	r3, [pc, #444]	@ (800381c <xTaskIncrementTick+0x230>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6a3a      	ldr	r2, [r7, #32]
 8003662:	429a      	cmp	r2, r3
 8003664:	f0c0 80ac 	bcc.w	80037c0 <xTaskIncrementTick+0x1d4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003668:	4b69      	ldr	r3, [pc, #420]	@ (8003810 <xTaskIncrementTick+0x224>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d104      	bne.n	800367c <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003672:	4b6a      	ldr	r3, [pc, #424]	@ (800381c <xTaskIncrementTick+0x230>)
 8003674:	f04f 32ff 	mov.w	r2, #4294967295
 8003678:	601a      	str	r2, [r3, #0]
                    break;
 800367a:	e0a1      	b.n	80037c0 <xTaskIncrementTick+0x1d4>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800367c:	4b64      	ldr	r3, [pc, #400]	@ (8003810 <xTaskIncrementTick+0x224>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800368c:	6a3a      	ldr	r2, [r7, #32]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	429a      	cmp	r2, r3
 8003692:	d203      	bcs.n	800369c <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003694:	4a61      	ldr	r2, [pc, #388]	@ (800381c <xTaskIncrementTick+0x230>)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	6013      	str	r3, [r2, #0]
                        break;
 800369a:	e091      	b.n	80037c0 <xTaskIncrementTick+0x1d4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	68d2      	ldr	r2, [r2, #12]
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	6892      	ldr	r2, [r2, #8]
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	3304      	adds	r3, #4
 80036be:	429a      	cmp	r2, r3
 80036c0:	d103      	bne.n	80036ca <xTaskIncrementTick+0xde>
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	2200      	movs	r2, #0
 80036ce:	615a      	str	r2, [r3, #20]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	1e5a      	subs	r2, r3, #1
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d01e      	beq.n	8003720 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	6a12      	ldr	r2, [r2, #32]
 80036f0:	609a      	str	r2, [r3, #8]
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	69d2      	ldr	r2, [r2, #28]
 80036fa:	605a      	str	r2, [r3, #4]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	3318      	adds	r3, #24
 8003704:	429a      	cmp	r2, r3
 8003706:	d103      	bne.n	8003710 <xTaskIncrementTick+0x124>
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	6a1a      	ldr	r2, [r3, #32]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	605a      	str	r2, [r3, #4]
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2200      	movs	r2, #0
 8003714:	629a      	str	r2, [r3, #40]	@ 0x28
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	1e5a      	subs	r2, r3, #1
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	4618      	mov	r0, r3
 8003724:	f004 f8b0 	bl	8007888 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	2201      	movs	r2, #1
 800372e:	409a      	lsls	r2, r3
 8003730:	4b3b      	ldr	r3, [pc, #236]	@ (8003820 <xTaskIncrementTick+0x234>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4313      	orrs	r3, r2
 8003736:	4a3a      	ldr	r2, [pc, #232]	@ (8003820 <xTaskIncrementTick+0x234>)
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800373e:	4939      	ldr	r1, [pc, #228]	@ (8003824 <xTaskIncrementTick+0x238>)
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	3304      	adds	r3, #4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	609a      	str	r2, [r3, #8]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	3204      	adds	r2, #4
 8003766:	605a      	str	r2, [r3, #4]
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	1d1a      	adds	r2, r3, #4
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	609a      	str	r2, [r3, #8]
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4a29      	ldr	r2, [pc, #164]	@ (8003824 <xTaskIncrementTick+0x238>)
 800377e:	441a      	add	r2, r3
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	615a      	str	r2, [r3, #20]
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003788:	4926      	ldr	r1, [pc, #152]	@ (8003824 <xTaskIncrementTick+0x238>)
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800379a:	1c59      	adds	r1, r3, #1
 800379c:	4821      	ldr	r0, [pc, #132]	@ (8003824 <xTaskIncrementTick+0x238>)
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4403      	add	r3, r0
 80037a8:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003828 <xTaskIncrementTick+0x23c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b4:	429a      	cmp	r2, r3
 80037b6:	f67f af57 	bls.w	8003668 <xTaskIncrementTick+0x7c>
                            {
                                xSwitchRequired = pdTRUE;
 80037ba:	2301      	movs	r3, #1
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037be:	e753      	b.n	8003668 <xTaskIncrementTick+0x7c>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80037c0:	4b19      	ldr	r3, [pc, #100]	@ (8003828 <xTaskIncrementTick+0x23c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c6:	4917      	ldr	r1, [pc, #92]	@ (8003824 <xTaskIncrementTick+0x238>)
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d901      	bls.n	80037dc <xTaskIncrementTick+0x1f0>
                {
                    xSwitchRequired = pdTRUE;
 80037d8:	2301      	movs	r3, #1
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80037dc:	4b13      	ldr	r3, [pc, #76]	@ (800382c <xTaskIncrementTick+0x240>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d007      	beq.n	80037f4 <xTaskIncrementTick+0x208>
                {
                    xSwitchRequired = pdTRUE;
 80037e4:	2301      	movs	r3, #1
 80037e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e8:	e004      	b.n	80037f4 <xTaskIncrementTick+0x208>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80037ea:	4b11      	ldr	r3, [pc, #68]	@ (8003830 <xTaskIncrementTick+0x244>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3301      	adds	r3, #1
 80037f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003830 <xTaskIncrementTick+0x244>)
 80037f2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80037f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f6:	4619      	mov	r1, r3
 80037f8:	20db      	movs	r0, #219	@ 0xdb
 80037fa:	f003 ff4d 	bl	8007698 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003800:	4618      	mov	r0, r3
 8003802:	3728      	adds	r7, #40	@ 0x28
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	200001dc 	.word	0x200001dc
 800380c:	200001b8 	.word	0x200001b8
 8003810:	2000016c 	.word	0x2000016c
 8003814:	20000170 	.word	0x20000170
 8003818:	200001cc 	.word	0x200001cc
 800381c:	200001d4 	.word	0x200001d4
 8003820:	200001bc 	.word	0x200001bc
 8003824:	200000e0 	.word	0x200000e0
 8003828:	200000dc 	.word	0x200000dc
 800382c:	200001c8 	.word	0x200001c8
 8003830:	200001c4 	.word	0x200001c4

08003834 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800383a:	4b2f      	ldr	r3, [pc, #188]	@ (80038f8 <vTaskSwitchContext+0xc4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003842:	4b2e      	ldr	r3, [pc, #184]	@ (80038fc <vTaskSwitchContext+0xc8>)
 8003844:	2201      	movs	r2, #1
 8003846:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003848:	e051      	b.n	80038ee <vTaskSwitchContext+0xba>
            xYieldPendings[ 0 ] = pdFALSE;
 800384a:	4b2c      	ldr	r3, [pc, #176]	@ (80038fc <vTaskSwitchContext+0xc8>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003850:	4b2b      	ldr	r3, [pc, #172]	@ (8003900 <vTaskSwitchContext+0xcc>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	fab3 f383 	clz	r3, r3
 800385c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800385e:	7afb      	ldrb	r3, [r7, #11]
 8003860:	f1c3 031f 	rsb	r3, r3, #31
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	4927      	ldr	r1, [pc, #156]	@ (8003904 <vTaskSwitchContext+0xd0>)
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10d      	bne.n	8003896 <vTaskSwitchContext+0x62>
    __asm volatile
 800387a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800387e:	b672      	cpsid	i
 8003880:	f383 8811 	msr	BASEPRI, r3
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	b662      	cpsie	i
 800388e:	607b      	str	r3, [r7, #4]
}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	e7fd      	b.n	8003892 <vTaskSwitchContext+0x5e>
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4a18      	ldr	r2, [pc, #96]	@ (8003904 <vTaskSwitchContext+0xd0>)
 80038a2:	4413      	add	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	3308      	adds	r3, #8
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d103      	bne.n	80038c4 <vTaskSwitchContext+0x90>
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	605a      	str	r2, [r3, #4]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	4a0f      	ldr	r2, [pc, #60]	@ (8003908 <vTaskSwitchContext+0xd4>)
 80038cc:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 80038ce:	4b0f      	ldr	r3, [pc, #60]	@ (800390c <vTaskSwitchContext+0xd8>)
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003908 <vTaskSwitchContext+0xd4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d102      	bne.n	80038e0 <vTaskSwitchContext+0xac>
 80038da:	f003 ff35 	bl	8007748 <SEGGER_SYSVIEW_OnIdle>
 80038de:	e004      	b.n	80038ea <vTaskSwitchContext+0xb6>
 80038e0:	4b09      	ldr	r3, [pc, #36]	@ (8003908 <vTaskSwitchContext+0xd4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f003 ff8d 	bl	8007804 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80038ea:	4b07      	ldr	r3, [pc, #28]	@ (8003908 <vTaskSwitchContext+0xd4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
    }
 80038ee:	bf00      	nop
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	200001dc 	.word	0x200001dc
 80038fc:	200001c8 	.word	0x200001c8
 8003900:	200001bc 	.word	0x200001bc
 8003904:	200000e0 	.word	0x200000e0
 8003908:	200000dc 	.word	0x200000dc
 800390c:	200001d8 	.word	0x200001d8

08003910 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10d      	bne.n	800393c <vTaskPlaceOnEventList+0x2c>
    __asm volatile
 8003920:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003924:	b672      	cpsid	i
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	b662      	cpsie	i
 8003934:	60fb      	str	r3, [r7, #12]
}
 8003936:	bf00      	nop
 8003938:	bf00      	nop
 800393a:	e7fd      	b.n	8003938 <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800393c:	4b08      	ldr	r3, [pc, #32]	@ (8003960 <vTaskPlaceOnEventList+0x50>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3318      	adds	r3, #24
 8003942:	4619      	mov	r1, r3
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7fe fd40 	bl	80023ca <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800394a:	2101      	movs	r1, #1
 800394c:	6838      	ldr	r0, [r7, #0]
 800394e:	f000 fd29 	bl	80043a4 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8003952:	20e1      	movs	r0, #225	@ 0xe1
 8003954:	f003 fe64 	bl	8007620 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	200000dc 	.word	0x200000dc

08003964 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10d      	bne.n	8003992 <vTaskPlaceOnEventListRestricted+0x2e>
    __asm volatile
 8003976:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800397a:	b672      	cpsid	i
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	b662      	cpsie	i
 800398a:	613b      	str	r3, [r7, #16]
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	e7fd      	b.n	800398e <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	4b17      	ldr	r3, [pc, #92]	@ (80039f8 <vTaskPlaceOnEventListRestricted+0x94>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	61da      	str	r2, [r3, #28]
 80039a0:	4b15      	ldr	r3, [pc, #84]	@ (80039f8 <vTaskPlaceOnEventListRestricted+0x94>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	6892      	ldr	r2, [r2, #8]
 80039a8:	621a      	str	r2, [r3, #32]
 80039aa:	4b13      	ldr	r3, [pc, #76]	@ (80039f8 <vTaskPlaceOnEventListRestricted+0x94>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	3218      	adds	r2, #24
 80039b4:	605a      	str	r2, [r3, #4]
 80039b6:	4b10      	ldr	r3, [pc, #64]	@ (80039f8 <vTaskPlaceOnEventListRestricted+0x94>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f103 0218 	add.w	r2, r3, #24
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	609a      	str	r2, [r3, #8]
 80039c2:	4b0d      	ldr	r3, [pc, #52]	@ (80039f8 <vTaskPlaceOnEventListRestricted+0x94>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 80039da:	f04f 33ff 	mov.w	r3, #4294967295
 80039de:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	68b8      	ldr	r0, [r7, #8]
 80039e4:	f000 fcde 	bl	80043a4 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 80039e8:	20e3      	movs	r0, #227	@ 0xe3
 80039ea:	f003 fe19 	bl	8007620 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80039ee:	bf00      	nop
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	200000dc 	.word	0x200000dc

080039fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	@ 0x28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10d      	bne.n	8003a2e <xTaskRemoveFromEventList+0x32>
    __asm volatile
 8003a12:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003a16:	b672      	cpsid	i
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	b662      	cpsie	i
 8003a26:	60fb      	str	r3, [r7, #12]
}
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	e7fd      	b.n	8003a2a <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	6a3a      	ldr	r2, [r7, #32]
 8003a3a:	6a12      	ldr	r2, [r2, #32]
 8003a3c:	609a      	str	r2, [r3, #8]
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	6a3a      	ldr	r2, [r7, #32]
 8003a44:	69d2      	ldr	r2, [r2, #28]
 8003a46:	605a      	str	r2, [r3, #4]
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	3318      	adds	r3, #24
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d103      	bne.n	8003a5c <xTaskRemoveFromEventList+0x60>
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	6a1a      	ldr	r2, [r3, #32]
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	605a      	str	r2, [r3, #4]
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	1e5a      	subs	r2, r3, #1
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003a6c:	4b4e      	ldr	r3, [pc, #312]	@ (8003ba8 <xTaskRemoveFromEventList+0x1ac>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d164      	bne.n	8003b3e <xTaskRemoveFromEventList+0x142>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	6a3a      	ldr	r2, [r7, #32]
 8003a80:	68d2      	ldr	r2, [r2, #12]
 8003a82:	609a      	str	r2, [r3, #8]
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	6a3a      	ldr	r2, [r7, #32]
 8003a8a:	6892      	ldr	r2, [r2, #8]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	3304      	adds	r3, #4
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d103      	bne.n	8003aa2 <xTaskRemoveFromEventList+0xa6>
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	615a      	str	r2, [r3, #20]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	1e5a      	subs	r2, r3, #1
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f003 fee7 	bl	8007888 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003abe:	2201      	movs	r2, #1
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8003bac <xTaskRemoveFromEventList+0x1b0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	4a38      	ldr	r2, [pc, #224]	@ (8003bac <xTaskRemoveFromEventList+0x1b0>)
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ad0:	4937      	ldr	r1, [pc, #220]	@ (8003bb0 <xTaskRemoveFromEventList+0x1b4>)
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	3304      	adds	r3, #4
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	60da      	str	r2, [r3, #12]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	6a3a      	ldr	r2, [r7, #32]
 8003af6:	3204      	adds	r2, #4
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	1d1a      	adds	r2, r3, #4
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	609a      	str	r2, [r3, #8]
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4a28      	ldr	r2, [pc, #160]	@ (8003bb0 <xTaskRemoveFromEventList+0x1b4>)
 8003b10:	441a      	add	r2, r3
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	615a      	str	r2, [r3, #20]
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b1a:	4925      	ldr	r1, [pc, #148]	@ (8003bb0 <xTaskRemoveFromEventList+0x1b4>)
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6a3a      	ldr	r2, [r7, #32]
 8003b2a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b2c:	1c59      	adds	r1, r3, #1
 8003b2e:	4820      	ldr	r0, [pc, #128]	@ (8003bb0 <xTaskRemoveFromEventList+0x1b4>)
 8003b30:	4613      	mov	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4403      	add	r3, r0
 8003b3a:	6019      	str	r1, [r3, #0]
 8003b3c:	e01b      	b.n	8003b76 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb4 <xTaskRemoveFromEventList+0x1b8>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	61bb      	str	r3, [r7, #24]
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	61da      	str	r2, [r3, #28]
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	621a      	str	r2, [r3, #32]
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	6a3a      	ldr	r2, [r7, #32]
 8003b58:	3218      	adds	r2, #24
 8003b5a:	605a      	str	r2, [r3, #4]
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	f103 0218 	add.w	r2, r3, #24
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	609a      	str	r2, [r3, #8]
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	4a12      	ldr	r2, [pc, #72]	@ (8003bb4 <xTaskRemoveFromEventList+0x1b8>)
 8003b6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b6c:	4b11      	ldr	r3, [pc, #68]	@ (8003bb4 <xTaskRemoveFromEventList+0x1b8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3301      	adds	r3, #1
 8003b72:	4a10      	ldr	r2, [pc, #64]	@ (8003bb4 <xTaskRemoveFromEventList+0x1b8>)
 8003b74:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb8 <xTaskRemoveFromEventList+0x1bc>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d905      	bls.n	8003b90 <xTaskRemoveFromEventList+0x194>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003b84:	2301      	movs	r3, #1
 8003b86:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003b88:	4b0c      	ldr	r3, [pc, #48]	@ (8003bbc <xTaskRemoveFromEventList+0x1c0>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	e001      	b.n	8003b94 <xTaskRemoveFromEventList+0x198>
        }
        else
        {
            xReturn = pdFALSE;
 8003b90:	2300      	movs	r3, #0
 8003b92:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8003b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b96:	4619      	mov	r1, r3
 8003b98:	20e4      	movs	r0, #228	@ 0xe4
 8003b9a:	f003 fd7d 	bl	8007698 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3728      	adds	r7, #40	@ 0x28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	200001dc 	.word	0x200001dc
 8003bac:	200001bc 	.word	0x200001bc
 8003bb0:	200000e0 	.word	0x200000e0
 8003bb4:	20000174 	.word	0x20000174
 8003bb8:	200000dc 	.word	0x200000dc
 8003bbc:	200001c8 	.word	0x200001c8

08003bc0 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003bc8:	4b07      	ldr	r3, [pc, #28]	@ (8003be8 <vTaskInternalSetTimeOutState+0x28>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003bd0:	4b06      	ldr	r3, [pc, #24]	@ (8003bec <vTaskInternalSetTimeOutState+0x2c>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8003bd8:	20e7      	movs	r0, #231	@ 0xe7
 8003bda:	f003 fd21 	bl	8007620 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003bde:	bf00      	nop
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	200001cc 	.word	0x200001cc
 8003bec:	200001b8 	.word	0x200001b8

08003bf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10d      	bne.n	8003c1c <xTaskCheckForTimeOut+0x2c>
    __asm volatile
 8003c00:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003c04:	b672      	cpsid	i
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	b662      	cpsie	i
 8003c14:	613b      	str	r3, [r7, #16]
}
 8003c16:	bf00      	nop
 8003c18:	bf00      	nop
 8003c1a:	e7fd      	b.n	8003c18 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10d      	bne.n	8003c3e <xTaskCheckForTimeOut+0x4e>
    __asm volatile
 8003c22:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003c26:	b672      	cpsid	i
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	b662      	cpsie	i
 8003c36:	60fb      	str	r3, [r7, #12]
}
 8003c38:	bf00      	nop
 8003c3a:	bf00      	nop
 8003c3c:	e7fd      	b.n	8003c3a <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 8003c3e:	f001 f859 	bl	8004cf4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003c42:	4b21      	ldr	r3, [pc, #132]	@ (8003cc8 <xTaskCheckForTimeOut+0xd8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5a:	d102      	bne.n	8003c62 <xTaskCheckForTimeOut+0x72>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61fb      	str	r3, [r7, #28]
 8003c60:	e026      	b.n	8003cb0 <xTaskCheckForTimeOut+0xc0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	4b19      	ldr	r3, [pc, #100]	@ (8003ccc <xTaskCheckForTimeOut+0xdc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d00a      	beq.n	8003c84 <xTaskCheckForTimeOut+0x94>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d305      	bcc.n	8003c84 <xTaskCheckForTimeOut+0x94>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	e015      	b.n	8003cb0 <xTaskCheckForTimeOut+0xc0>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d20b      	bcs.n	8003ca6 <xTaskCheckForTimeOut+0xb6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	1ad2      	subs	r2, r2, r3
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff ff90 	bl	8003bc0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61fb      	str	r3, [r7, #28]
 8003ca4:	e004      	b.n	8003cb0 <xTaskCheckForTimeOut+0xc0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003cac:	2301      	movs	r3, #1
 8003cae:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003cb0:	f001 f856 	bl	8004d60 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	20e8      	movs	r0, #232	@ 0xe8
 8003cba:	f003 fced 	bl	8007698 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003cbe:	69fb      	ldr	r3, [r7, #28]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3720      	adds	r7, #32
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	200001b8 	.word	0x200001b8
 8003ccc:	200001cc 	.word	0x200001cc

08003cd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003cd4:	4b03      	ldr	r3, [pc, #12]	@ (8003ce4 <vTaskMissedYield+0x14>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8003cda:	20e9      	movs	r0, #233	@ 0xe9
 8003cdc:	f003 fca0 	bl	8007620 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003ce0:	bf00      	nop
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	200001c8 	.word	0x200001c8

08003ce8 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003cf0:	f000 f852 	bl	8003d98 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003cf4:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <prvIdleTask+0x28>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d9f9      	bls.n	8003cf0 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003cfc:	4b05      	ldr	r3, [pc, #20]	@ (8003d14 <prvIdleTask+0x2c>)
 8003cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003d0c:	e7f0      	b.n	8003cf0 <prvIdleTask+0x8>
 8003d0e:	bf00      	nop
 8003d10:	200000e0 	.word	0x200000e0
 8003d14:	e000ed04 	.word	0xe000ed04

08003d18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d1e:	2300      	movs	r3, #0
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	e00c      	b.n	8003d3e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4a12      	ldr	r2, [pc, #72]	@ (8003d78 <prvInitialiseTaskLists+0x60>)
 8003d30:	4413      	add	r3, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fe faf2 	bl	800231c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	607b      	str	r3, [r7, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d9ef      	bls.n	8003d24 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003d44:	480d      	ldr	r0, [pc, #52]	@ (8003d7c <prvInitialiseTaskLists+0x64>)
 8003d46:	f7fe fae9 	bl	800231c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003d4a:	480d      	ldr	r0, [pc, #52]	@ (8003d80 <prvInitialiseTaskLists+0x68>)
 8003d4c:	f7fe fae6 	bl	800231c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003d50:	480c      	ldr	r0, [pc, #48]	@ (8003d84 <prvInitialiseTaskLists+0x6c>)
 8003d52:	f7fe fae3 	bl	800231c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003d56:	480c      	ldr	r0, [pc, #48]	@ (8003d88 <prvInitialiseTaskLists+0x70>)
 8003d58:	f7fe fae0 	bl	800231c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003d5c:	480b      	ldr	r0, [pc, #44]	@ (8003d8c <prvInitialiseTaskLists+0x74>)
 8003d5e:	f7fe fadd 	bl	800231c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003d62:	4b0b      	ldr	r3, [pc, #44]	@ (8003d90 <prvInitialiseTaskLists+0x78>)
 8003d64:	4a05      	ldr	r2, [pc, #20]	@ (8003d7c <prvInitialiseTaskLists+0x64>)
 8003d66:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d68:	4b0a      	ldr	r3, [pc, #40]	@ (8003d94 <prvInitialiseTaskLists+0x7c>)
 8003d6a:	4a05      	ldr	r2, [pc, #20]	@ (8003d80 <prvInitialiseTaskLists+0x68>)
 8003d6c:	601a      	str	r2, [r3, #0]
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	200000e0 	.word	0x200000e0
 8003d7c:	20000144 	.word	0x20000144
 8003d80:	20000158 	.word	0x20000158
 8003d84:	20000174 	.word	0x20000174
 8003d88:	20000188 	.word	0x20000188
 8003d8c:	200001a0 	.word	0x200001a0
 8003d90:	2000016c 	.word	0x2000016c
 8003d94:	20000170 	.word	0x20000170

08003d98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d9e:	e019      	b.n	8003dd4 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003da0:	f000 ffa8 	bl	8004cf4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003da4:	4b10      	ldr	r3, [pc, #64]	@ (8003de8 <prvCheckTasksWaitingTermination+0x50>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fe fb45 	bl	8002440 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003db6:	4b0d      	ldr	r3, [pc, #52]	@ (8003dec <prvCheckTasksWaitingTermination+0x54>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8003dec <prvCheckTasksWaitingTermination+0x54>)
 8003dbe:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003df0 <prvCheckTasksWaitingTermination+0x58>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8003df0 <prvCheckTasksWaitingTermination+0x58>)
 8003dc8:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003dca:	f000 ffc9 	bl	8004d60 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f810 	bl	8003df4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dd4:	4b06      	ldr	r3, [pc, #24]	@ (8003df0 <prvCheckTasksWaitingTermination+0x58>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e1      	bne.n	8003da0 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000188 	.word	0x20000188
 8003dec:	200001b4 	.word	0x200001b4
 8003df0:	2000019c 	.word	0x2000019c

08003df4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e00:	4618      	mov	r0, r3
 8003e02:	f001 f9f1 	bl	80051e8 <vPortFree>
            vPortFree( pxTCB );
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f001 f9ee 	bl	80051e8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003e0c:	bf00      	nop
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e18:	4b0a      	ldr	r3, [pc, #40]	@ (8003e44 <prvResetNextTaskUnblockTime+0x30>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d104      	bne.n	8003e2c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003e22:	4b09      	ldr	r3, [pc, #36]	@ (8003e48 <prvResetNextTaskUnblockTime+0x34>)
 8003e24:	f04f 32ff 	mov.w	r2, #4294967295
 8003e28:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003e2a:	e005      	b.n	8003e38 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e2c:	4b05      	ldr	r3, [pc, #20]	@ (8003e44 <prvResetNextTaskUnblockTime+0x30>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a04      	ldr	r2, [pc, #16]	@ (8003e48 <prvResetNextTaskUnblockTime+0x34>)
 8003e36:	6013      	str	r3, [r2, #0]
}
 8003e38:	bf00      	nop
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	2000016c 	.word	0x2000016c
 8003e48:	200001d4 	.word	0x200001d4

08003e4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8003e52:	4b0d      	ldr	r3, [pc, #52]	@ (8003e88 <xTaskGetSchedulerState+0x3c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d102      	bne.n	8003e60 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	e008      	b.n	8003e72 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003e60:	4b0a      	ldr	r3, [pc, #40]	@ (8003e8c <xTaskGetSchedulerState+0x40>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	607b      	str	r3, [r7, #4]
 8003e6c:	e001      	b.n	8003e72 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4619      	mov	r1, r3
 8003e76:	20f5      	movs	r0, #245	@ 0xf5
 8003e78:	f003 fc0e 	bl	8007698 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003e7c:	687b      	ldr	r3, [r7, #4]
    }
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	200001c0 	.word	0x200001c0
 8003e8c:	200001dc 	.word	0x200001dc

08003e90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 8098 	beq.w	8003fd8 <xTaskPriorityDisinherit+0x148>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003ea8:	4b50      	ldr	r3, [pc, #320]	@ (8003fec <xTaskPriorityDisinherit+0x15c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d00d      	beq.n	8003ece <xTaskPriorityDisinherit+0x3e>
    __asm volatile
 8003eb2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003eb6:	b672      	cpsid	i
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	b662      	cpsie	i
 8003ec6:	613b      	str	r3, [r7, #16]
}
 8003ec8:	bf00      	nop
 8003eca:	bf00      	nop
 8003ecc:	e7fd      	b.n	8003eca <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10d      	bne.n	8003ef2 <xTaskPriorityDisinherit+0x62>
    __asm volatile
 8003ed6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003eda:	b672      	cpsid	i
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	b662      	cpsie	i
 8003eea:	60fb      	str	r3, [r7, #12]
}
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	e7fd      	b.n	8003eee <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef6:	1e5a      	subs	r2, r3, #1
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d067      	beq.n	8003fd8 <xTaskPriorityDisinherit+0x148>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d163      	bne.n	8003fd8 <xTaskPriorityDisinherit+0x148>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	3304      	adds	r3, #4
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fe fa93 	bl	8002440 <uxListRemove>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f24:	2201      	movs	r2, #1
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	43da      	mvns	r2, r3
 8003f2c:	4b30      	ldr	r3, [pc, #192]	@ (8003ff0 <xTaskPriorityDisinherit+0x160>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4013      	ands	r3, r2
 8003f32:	4a2f      	ldr	r2, [pc, #188]	@ (8003ff0 <xTaskPriorityDisinherit+0x160>)
 8003f34:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f42:	f1c3 0205 	rsb	r2, r3, #5
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f003 fc9b 	bl	8007888 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f56:	2201      	movs	r2, #1
 8003f58:	409a      	lsls	r2, r3
 8003f5a:	4b25      	ldr	r3, [pc, #148]	@ (8003ff0 <xTaskPriorityDisinherit+0x160>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	4a23      	ldr	r2, [pc, #140]	@ (8003ff0 <xTaskPriorityDisinherit+0x160>)
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f68:	4922      	ldr	r1, [pc, #136]	@ (8003ff4 <xTaskPriorityDisinherit+0x164>)
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	3304      	adds	r3, #4
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	609a      	str	r2, [r3, #8]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	60da      	str	r2, [r3, #12]
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	3204      	adds	r2, #4
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	1d1a      	adds	r2, r3, #4
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	609a      	str	r2, [r3, #8]
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4a13      	ldr	r2, [pc, #76]	@ (8003ff4 <xTaskPriorityDisinherit+0x164>)
 8003fa8:	441a      	add	r2, r3
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	615a      	str	r2, [r3, #20]
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fb2:	4910      	ldr	r1, [pc, #64]	@ (8003ff4 <xTaskPriorityDisinherit+0x164>)
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003fc4:	1c59      	adds	r1, r3, #1
 8003fc6:	480b      	ldr	r0, [pc, #44]	@ (8003ff4 <xTaskPriorityDisinherit+0x164>)
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4403      	add	r3, r0
 8003fd2:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	4619      	mov	r1, r3
 8003fdc:	20f7      	movs	r0, #247	@ 0xf7
 8003fde:	f003 fb5b 	bl	8007698 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003fe2:	69fb      	ldr	r3, [r7, #28]
    }
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	200000dc 	.word	0x200000dc
 8003ff0:	200001bc 	.word	0x200001bc
 8003ff4:	200000e0 	.word	0x200000e0

08003ff8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8004006:	2300      	movs	r3, #0
 8004008:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00d      	beq.n	800402c <xTaskGenericNotifyWait+0x34>
    __asm volatile
 8004010:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004014:	b672      	cpsid	i
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	b662      	cpsie	i
 8004024:	613b      	str	r3, [r7, #16]
}
 8004026:	bf00      	nop
 8004028:	bf00      	nop
 800402a:	e7fd      	b.n	8004028 <xTaskGenericNotifyWait+0x30>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 800402c:	f7ff f986 	bl	800333c <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8004030:	f000 fe60 	bl	8004cf4 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8004034:	4b3b      	ldr	r3, [pc, #236]	@ (8004124 <xTaskGenericNotifyWait+0x12c>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	3354      	adds	r3, #84	@ 0x54
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d018      	beq.n	8004078 <xTaskGenericNotifyWait+0x80>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8004046:	4b37      	ldr	r3, [pc, #220]	@ (8004124 <xTaskGenericNotifyWait+0x12c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	3214      	adds	r2, #20
 800404e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	43d2      	mvns	r2, r2
 8004056:	4011      	ands	r1, r2
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	3214      	adds	r2, #20
 800405c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8004060:	4b30      	ldr	r3, [pc, #192]	@ (8004124 <xTaskGenericNotifyWait+0x12c>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	3354      	adds	r3, #84	@ 0x54
 800406a:	2201      	movs	r2, #1
 800406c:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 800406e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <xTaskGenericNotifyWait+0x80>
                    {
                        xShouldBlock = pdTRUE;
 8004074:	2301      	movs	r3, #1
 8004076:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8004078:	f000 fe72 	bl	8004d60 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d103      	bne.n	800408a <xTaskGenericNotifyWait+0x92>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004082:	2101      	movs	r1, #1
 8004084:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004086:	f000 f98d 	bl	80043a4 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800408a:	f7ff f965 	bl	8003358 <xTaskResumeAll>
 800408e:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d10a      	bne.n	80040ac <xTaskGenericNotifyWait+0xb4>
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d107      	bne.n	80040ac <xTaskGenericNotifyWait+0xb4>
        {
            taskYIELD_WITHIN_API();
 800409c:	4b22      	ldr	r3, [pc, #136]	@ (8004128 <xTaskGenericNotifyWait+0x130>)
 800409e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80040ac:	f000 fe22 	bl	8004cf4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d007      	beq.n	80040c6 <xTaskGenericNotifyWait+0xce>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 80040b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004124 <xTaskGenericNotifyWait+0x12c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	3214      	adds	r2, #20
 80040be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 80040c6:	4b17      	ldr	r3, [pc, #92]	@ (8004124 <xTaskGenericNotifyWait+0x12c>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4413      	add	r3, r2
 80040ce:	3354      	adds	r3, #84	@ 0x54
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d002      	beq.n	80040de <xTaskGenericNotifyWait+0xe6>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80040d8:	2300      	movs	r3, #0
 80040da:	61fb      	str	r3, [r7, #28]
 80040dc:	e00e      	b.n	80040fc <xTaskGenericNotifyWait+0x104>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 80040de:	4b11      	ldr	r3, [pc, #68]	@ (8004124 <xTaskGenericNotifyWait+0x12c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	3214      	adds	r2, #20
 80040e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	43d2      	mvns	r2, r2
 80040ee:	4011      	ands	r1, r2
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	3214      	adds	r2, #20
 80040f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80040f8:	2301      	movs	r3, #1
 80040fa:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 80040fc:	4b09      	ldr	r3, [pc, #36]	@ (8004124 <xTaskGenericNotifyWait+0x12c>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4413      	add	r3, r2
 8004104:	3354      	adds	r3, #84	@ 0x54
 8004106:	2200      	movs	r2, #0
 8004108:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800410a:	f000 fe29 	bl	8004d60 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	4619      	mov	r1, r3
 8004112:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004116:	f003 fabf 	bl	8007698 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800411a:	69fb      	ldr	r3, [r7, #28]
    }
 800411c:	4618      	mov	r0, r3
 800411e:	3720      	adds	r7, #32
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	200000dc 	.word	0x200000dc
 8004128:	e000ed04 	.word	0xe000ed04

0800412c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800412c:	b580      	push	{r7, lr}
 800412e:	b08e      	sub	sp, #56	@ 0x38
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800413a:	2301      	movs	r3, #1
 800413c:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00d      	beq.n	8004160 <xTaskGenericNotify+0x34>
    __asm volatile
 8004144:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004148:	b672      	cpsid	i
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	b662      	cpsie	i
 8004158:	623b      	str	r3, [r7, #32]
}
 800415a:	bf00      	nop
 800415c:	bf00      	nop
 800415e:	e7fd      	b.n	800415c <xTaskGenericNotify+0x30>
        configASSERT( xTaskToNotify );
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10d      	bne.n	8004182 <xTaskGenericNotify+0x56>
    __asm volatile
 8004166:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800416a:	b672      	cpsid	i
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	b662      	cpsie	i
 800417a:	61fb      	str	r3, [r7, #28]
}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	e7fd      	b.n	800417e <xTaskGenericNotify+0x52>
        pxTCB = xTaskToNotify;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 8004186:	f000 fdb5 	bl	8004cf4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800418a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800418c:	2b00      	cmp	r3, #0
 800418e:	d006      	beq.n	800419e <xTaskGenericNotify+0x72>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	3214      	adds	r2, #20
 8004196:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800419a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800419c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800419e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4413      	add	r3, r2
 80041a4:	3354      	adds	r3, #84	@ 0x54
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80041ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	4413      	add	r3, r2
 80041b2:	3354      	adds	r3, #84	@ 0x54
 80041b4:	2202      	movs	r2, #2
 80041b6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d83b      	bhi.n	8004236 <xTaskGenericNotify+0x10a>
 80041be:	a201      	add	r2, pc, #4	@ (adr r2, 80041c4 <xTaskGenericNotify+0x98>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	0800425b 	.word	0x0800425b
 80041c8:	080041d9 	.word	0x080041d9
 80041cc:	080041f5 	.word	0x080041f5
 80041d0:	0800420d 	.word	0x0800420d
 80041d4:	0800421b 	.word	0x0800421b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80041d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	3214      	adds	r2, #20
 80041de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	ea42 0103 	orr.w	r1, r2, r3
 80041e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	3214      	adds	r2, #20
 80041ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80041f2:	e035      	b.n	8004260 <xTaskGenericNotify+0x134>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80041f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	3214      	adds	r2, #20
 80041fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041fe:	1c59      	adds	r1, r3, #1
 8004200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	3214      	adds	r2, #20
 8004206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800420a:	e029      	b.n	8004260 <xTaskGenericNotify+0x134>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800420c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	3214      	adds	r2, #20
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004218:	e022      	b.n	8004260 <xTaskGenericNotify+0x134>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800421a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800421e:	2b02      	cmp	r3, #2
 8004220:	d006      	beq.n	8004230 <xTaskGenericNotify+0x104>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	3214      	adds	r2, #20
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800422e:	e017      	b.n	8004260 <xTaskGenericNotify+0x134>
                        xReturn = pdFAIL;
 8004230:	2300      	movs	r3, #0
 8004232:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8004234:	e014      	b.n	8004260 <xTaskGenericNotify+0x134>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004236:	4b56      	ldr	r3, [pc, #344]	@ (8004390 <xTaskGenericNotify+0x264>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00f      	beq.n	800425e <xTaskGenericNotify+0x132>
    __asm volatile
 800423e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004242:	b672      	cpsid	i
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	b662      	cpsie	i
 8004252:	61bb      	str	r3, [r7, #24]
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop
 8004258:	e7fd      	b.n	8004256 <xTaskGenericNotify+0x12a>
                    break;
 800425a:	bf00      	nop
 800425c:	e000      	b.n	8004260 <xTaskGenericNotify+0x134>

                    break;
 800425e:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004260:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004264:	2b01      	cmp	r3, #1
 8004266:	f040 8085 	bne.w	8004374 <xTaskGenericNotify+0x248>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800426a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004276:	68d2      	ldr	r2, [r2, #12]
 8004278:	609a      	str	r2, [r3, #8]
 800427a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004280:	6892      	ldr	r2, [r2, #8]
 8004282:	605a      	str	r2, [r3, #4]
 8004284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428a:	3304      	adds	r3, #4
 800428c:	429a      	cmp	r2, r3
 800428e:	d103      	bne.n	8004298 <xTaskGenericNotify+0x16c>
 8004290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004296:	605a      	str	r2, [r3, #4]
 8004298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429a:	2200      	movs	r2, #0
 800429c:	615a      	str	r2, [r3, #20]
 800429e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	1e5a      	subs	r2, r3, #1
 80042a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a6:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80042a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042aa:	4618      	mov	r0, r3
 80042ac:	f003 faec 	bl	8007888 <SEGGER_SYSVIEW_OnTaskStartReady>
 80042b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b4:	2201      	movs	r2, #1
 80042b6:	409a      	lsls	r2, r3
 80042b8:	4b36      	ldr	r3, [pc, #216]	@ (8004394 <xTaskGenericNotify+0x268>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4313      	orrs	r3, r2
 80042be:	4a35      	ldr	r2, [pc, #212]	@ (8004394 <xTaskGenericNotify+0x268>)
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042c6:	4934      	ldr	r1, [pc, #208]	@ (8004398 <xTaskGenericNotify+0x26c>)
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	3304      	adds	r3, #4
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80042d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042dc:	609a      	str	r2, [r3, #8]
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e4:	60da      	str	r2, [r3, #12]
 80042e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ec:	3204      	adds	r2, #4
 80042ee:	605a      	str	r2, [r3, #4]
 80042f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f2:	1d1a      	adds	r2, r3, #4
 80042f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f6:	609a      	str	r2, [r3, #8]
 80042f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4a24      	ldr	r2, [pc, #144]	@ (8004398 <xTaskGenericNotify+0x26c>)
 8004306:	441a      	add	r2, r3
 8004308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430a:	615a      	str	r2, [r3, #20]
 800430c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004310:	4921      	ldr	r1, [pc, #132]	@ (8004398 <xTaskGenericNotify+0x26c>)
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004320:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004322:	1c59      	adds	r1, r3, #1
 8004324:	481c      	ldr	r0, [pc, #112]	@ (8004398 <xTaskGenericNotify+0x26c>)
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4403      	add	r3, r0
 8004330:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00d      	beq.n	8004356 <xTaskGenericNotify+0x22a>
    __asm volatile
 800433a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800433e:	b672      	cpsid	i
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	b662      	cpsie	i
 800434e:	617b      	str	r3, [r7, #20]
}
 8004350:	bf00      	nop
 8004352:	bf00      	nop
 8004354:	e7fd      	b.n	8004352 <xTaskGenericNotify+0x226>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8004356:	4b11      	ldr	r3, [pc, #68]	@ (800439c <xTaskGenericNotify+0x270>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800435c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004360:	429a      	cmp	r2, r3
 8004362:	d207      	bcs.n	8004374 <xTaskGenericNotify+0x248>
 8004364:	4b0e      	ldr	r3, [pc, #56]	@ (80043a0 <xTaskGenericNotify+0x274>)
 8004366:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004374:	f000 fcf4 	bl	8004d60 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );
 8004378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800437a:	4619      	mov	r1, r3
 800437c:	f240 1001 	movw	r0, #257	@ 0x101
 8004380:	f003 f98a 	bl	8007698 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8004386:	4618      	mov	r0, r3
 8004388:	3738      	adds	r7, #56	@ 0x38
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	200001b8 	.word	0x200001b8
 8004394:	200001bc 	.word	0x200001bc
 8004398:	200000e0 	.word	0x200000e0
 800439c:	200000dc 	.word	0x200000dc
 80043a0:	e000ed04 	.word	0xe000ed04

080043a4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80043ae:	4b3d      	ldr	r3, [pc, #244]	@ (80044a4 <prvAddCurrentTaskToDelayedList+0x100>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80043b4:	4b3c      	ldr	r3, [pc, #240]	@ (80044a8 <prvAddCurrentTaskToDelayedList+0x104>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80043ba:	4b3c      	ldr	r3, [pc, #240]	@ (80044ac <prvAddCurrentTaskToDelayedList+0x108>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043c0:	4b3b      	ldr	r3, [pc, #236]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x10c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3304      	adds	r3, #4
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fe f83a 	bl	8002440 <uxListRemove>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10b      	bne.n	80043ea <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80043d2:	4b37      	ldr	r3, [pc, #220]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x10c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d8:	2201      	movs	r2, #1
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43da      	mvns	r2, r3
 80043e0:	4b34      	ldr	r3, [pc, #208]	@ (80044b4 <prvAddCurrentTaskToDelayedList+0x110>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4013      	ands	r3, r2
 80043e6:	4a33      	ldr	r2, [pc, #204]	@ (80044b4 <prvAddCurrentTaskToDelayedList+0x110>)
 80043e8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f0:	d124      	bne.n	800443c <prvAddCurrentTaskToDelayedList+0x98>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d021      	beq.n	800443c <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043f8:	4b2f      	ldr	r3, [pc, #188]	@ (80044b8 <prvAddCurrentTaskToDelayedList+0x114>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	4b2c      	ldr	r3, [pc, #176]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	609a      	str	r2, [r3, #8]
 8004406:	4b2a      	ldr	r3, [pc, #168]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	6892      	ldr	r2, [r2, #8]
 800440e:	60da      	str	r2, [r3, #12]
 8004410:	4b27      	ldr	r3, [pc, #156]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	3204      	adds	r2, #4
 800441a:	605a      	str	r2, [r3, #4]
 800441c:	4b24      	ldr	r3, [pc, #144]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x10c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	1d1a      	adds	r2, r3, #4
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	609a      	str	r2, [r3, #8]
 8004426:	4b22      	ldr	r3, [pc, #136]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a23      	ldr	r2, [pc, #140]	@ (80044b8 <prvAddCurrentTaskToDelayedList+0x114>)
 800442c:	615a      	str	r2, [r3, #20]
 800442e:	4b22      	ldr	r3, [pc, #136]	@ (80044b8 <prvAddCurrentTaskToDelayedList+0x114>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3301      	adds	r3, #1
 8004434:	4a20      	ldr	r2, [pc, #128]	@ (80044b8 <prvAddCurrentTaskToDelayedList+0x114>)
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800443a:	e02e      	b.n	800449a <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4413      	add	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004444:	4b1a      	ldr	r3, [pc, #104]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	429a      	cmp	r2, r3
 8004452:	d20d      	bcs.n	8004470 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004454:	4b16      	ldr	r3, [pc, #88]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2104      	movs	r1, #4
 800445a:	4618      	mov	r0, r3
 800445c:	f003 fa56 	bl	800790c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004460:	4b13      	ldr	r3, [pc, #76]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3304      	adds	r3, #4
 8004466:	4619      	mov	r1, r3
 8004468:	6978      	ldr	r0, [r7, #20]
 800446a:	f7fd ffae 	bl	80023ca <vListInsert>
}
 800446e:	e014      	b.n	800449a <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8004470:	4b0f      	ldr	r3, [pc, #60]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2104      	movs	r1, #4
 8004476:	4618      	mov	r0, r3
 8004478:	f003 fa48 	bl	800790c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800447c:	4b0c      	ldr	r3, [pc, #48]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x10c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3304      	adds	r3, #4
 8004482:	4619      	mov	r1, r3
 8004484:	69b8      	ldr	r0, [r7, #24]
 8004486:	f7fd ffa0 	bl	80023ca <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800448a:	4b0c      	ldr	r3, [pc, #48]	@ (80044bc <prvAddCurrentTaskToDelayedList+0x118>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	429a      	cmp	r2, r3
 8004492:	d202      	bcs.n	800449a <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8004494:	4a09      	ldr	r2, [pc, #36]	@ (80044bc <prvAddCurrentTaskToDelayedList+0x118>)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6013      	str	r3, [r2, #0]
}
 800449a:	bf00      	nop
 800449c:	3720      	adds	r7, #32
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	200001b8 	.word	0x200001b8
 80044a8:	2000016c 	.word	0x2000016c
 80044ac:	20000170 	.word	0x20000170
 80044b0:	200000dc 	.word	0x200000dc
 80044b4:	200001bc 	.word	0x200001bc
 80044b8:	200001a0 	.word	0x200001a0
 80044bc:	200001d4 	.word	0x200001d4

080044c0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80044ca:	f000 fa7d 	bl	80049c8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80044ce:	4b16      	ldr	r3, [pc, #88]	@ (8004528 <xTimerCreateTimerTask+0x68>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80044d6:	4b15      	ldr	r3, [pc, #84]	@ (800452c <xTimerCreateTimerTask+0x6c>)
 80044d8:	9301      	str	r3, [sp, #4]
 80044da:	2304      	movs	r3, #4
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	2300      	movs	r3, #0
 80044e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80044e4:	4912      	ldr	r1, [pc, #72]	@ (8004530 <xTimerCreateTimerTask+0x70>)
 80044e6:	4813      	ldr	r0, [pc, #76]	@ (8004534 <xTimerCreateTimerTask+0x74>)
 80044e8:	f7fe fc2c 	bl	8002d44 <xTaskCreate>
 80044ec:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10d      	bne.n	8004510 <xTimerCreateTimerTask+0x50>
    __asm volatile
 80044f4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80044f8:	b672      	cpsid	i
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	b662      	cpsie	i
 8004508:	603b      	str	r3, [r7, #0]
}
 800450a:	bf00      	nop
 800450c:	bf00      	nop
 800450e:	e7fd      	b.n	800450c <xTimerCreateTimerTask+0x4c>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4619      	mov	r1, r3
 8004514:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8004518:	f003 f8be 	bl	8007698 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800451c:	687b      	ldr	r3, [r7, #4]
    }
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	20000210 	.word	0x20000210
 800452c:	20000214 	.word	0x20000214
 8004530:	08007e1c 	.word	0x08007e1c
 8004534:	080045dd 	.word	0x080045dd

08004538 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004544:	e008      	b.n	8004558 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	4413      	add	r3, r2
 800454e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	699a      	ldr	r2, [r3, #24]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	18d1      	adds	r1, r2, r3
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 f8df 	bl	8004728 <prvInsertTimerInActiveList>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1ea      	bne.n	8004546 <prvReloadTimer+0xe>
        }
    }
 8004570:	bf00      	nop
 8004572:	bf00      	nop
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004586:	4b14      	ldr	r3, [pc, #80]	@ (80045d8 <prvProcessExpiredTimer+0x5c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3304      	adds	r3, #4
 8004594:	4618      	mov	r0, r3
 8004596:	f7fd ff53 	bl	8002440 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f7ff ffc3 	bl	8004538 <prvReloadTimer>
 80045b2:	e008      	b.n	80045c6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045ba:	f023 0301 	bic.w	r3, r3, #1
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	4798      	blx	r3
    }
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20000208 	.word	0x20000208

080045dc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045e4:	f107 0308 	add.w	r3, r7, #8
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 f859 	bl	80046a0 <prvGetNextExpireTime>
 80045ee:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4619      	mov	r1, r3
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f805 	bl	8004604 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80045fa:	f000 f8d7 	bl	80047ac <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045fe:	bf00      	nop
 8004600:	e7f0      	b.n	80045e4 <prvTimerTask+0x8>
	...

08004604 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800460e:	f7fe fe95 	bl	800333c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004612:	f107 0308 	add.w	r3, r7, #8
 8004616:	4618      	mov	r0, r3
 8004618:	f000 f866 	bl	80046e8 <prvSampleTimeNow>
 800461c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d130      	bne.n	8004686 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10a      	bne.n	8004640 <prvProcessTimerOrBlockTask+0x3c>
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	429a      	cmp	r2, r3
 8004630:	d806      	bhi.n	8004640 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004632:	f7fe fe91 	bl	8003358 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004636:	68f9      	ldr	r1, [r7, #12]
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7ff ff9f 	bl	800457c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800463e:	e024      	b.n	800468a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d008      	beq.n	8004658 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004646:	4b13      	ldr	r3, [pc, #76]	@ (8004694 <prvProcessTimerOrBlockTask+0x90>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <prvProcessTimerOrBlockTask+0x50>
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <prvProcessTimerOrBlockTask+0x52>
 8004654:	2300      	movs	r3, #0
 8004656:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004658:	4b0f      	ldr	r3, [pc, #60]	@ (8004698 <prvProcessTimerOrBlockTask+0x94>)
 800465a:	6818      	ldr	r0, [r3, #0]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	4619      	mov	r1, r3
 8004666:	f7fe fa81 	bl	8002b6c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800466a:	f7fe fe75 	bl	8003358 <xTaskResumeAll>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10a      	bne.n	800468a <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8004674:	4b09      	ldr	r3, [pc, #36]	@ (800469c <prvProcessTimerOrBlockTask+0x98>)
 8004676:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	f3bf 8f6f 	isb	sy
    }
 8004684:	e001      	b.n	800468a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004686:	f7fe fe67 	bl	8003358 <xTaskResumeAll>
    }
 800468a:	bf00      	nop
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	2000020c 	.word	0x2000020c
 8004698:	20000210 	.word	0x20000210
 800469c:	e000ed04 	.word	0xe000ed04

080046a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046a8:	4b0e      	ldr	r3, [pc, #56]	@ (80046e4 <prvGetNextExpireTime+0x44>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <prvGetNextExpireTime+0x16>
 80046b2:	2201      	movs	r2, #1
 80046b4:	e000      	b.n	80046b8 <prvGetNextExpireTime+0x18>
 80046b6:	2200      	movs	r2, #0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d105      	bne.n	80046d0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046c4:	4b07      	ldr	r3, [pc, #28]	@ (80046e4 <prvGetNextExpireTime+0x44>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	e001      	b.n	80046d4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80046d4:	68fb      	ldr	r3, [r7, #12]
    }
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20000208 	.word	0x20000208

080046e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80046f0:	f7fe ff46 	bl	8003580 <xTaskGetTickCount>
 80046f4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80046f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <prvSampleTimeNow+0x3c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d205      	bcs.n	800470c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004700:	f000 f93c 	bl	800497c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	e002      	b.n	8004712 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004712:	4a04      	ldr	r2, [pc, #16]	@ (8004724 <prvSampleTimeNow+0x3c>)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004718:	68fb      	ldr	r3, [r7, #12]
    }
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000218 	.word	0x20000218

08004728 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	429a      	cmp	r2, r3
 800474c:	d812      	bhi.n	8004774 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	1ad2      	subs	r2, r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	429a      	cmp	r2, r3
 800475a:	d302      	bcc.n	8004762 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800475c:	2301      	movs	r3, #1
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	e01b      	b.n	800479a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004762:	4b10      	ldr	r3, [pc, #64]	@ (80047a4 <prvInsertTimerInActiveList+0x7c>)
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3304      	adds	r3, #4
 800476a:	4619      	mov	r1, r3
 800476c:	4610      	mov	r0, r2
 800476e:	f7fd fe2c 	bl	80023ca <vListInsert>
 8004772:	e012      	b.n	800479a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d206      	bcs.n	800478a <prvInsertTimerInActiveList+0x62>
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d302      	bcc.n	800478a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004784:	2301      	movs	r3, #1
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	e007      	b.n	800479a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800478a:	4b07      	ldr	r3, [pc, #28]	@ (80047a8 <prvInsertTimerInActiveList+0x80>)
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3304      	adds	r3, #4
 8004792:	4619      	mov	r1, r3
 8004794:	4610      	mov	r0, r2
 8004796:	f7fd fe18 	bl	80023ca <vListInsert>
            }
        }

        return xProcessTimerNow;
 800479a:	697b      	ldr	r3, [r7, #20]
    }
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	2000020c 	.word	0x2000020c
 80047a8:	20000208 	.word	0x20000208

080047ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08a      	sub	sp, #40	@ 0x28
 80047b0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 80047b2:	1d3b      	adds	r3, r7, #4
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	605a      	str	r2, [r3, #4]
 80047ba:	609a      	str	r2, [r3, #8]
 80047bc:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80047be:	e0cb      	b.n	8004958 <prvProcessReceivedCommands+0x1ac>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	da1b      	bge.n	80047fe <prvProcessReceivedCommands+0x52>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80047c6:	1d3b      	adds	r3, r7, #4
 80047c8:	3304      	adds	r3, #4
 80047ca:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10d      	bne.n	80047ee <prvProcessReceivedCommands+0x42>
    __asm volatile
 80047d2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80047d6:	b672      	cpsid	i
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	b662      	cpsie	i
 80047e6:	61bb      	str	r3, [r7, #24]
}
 80047e8:	bf00      	nop
 80047ea:	bf00      	nop
 80047ec:	e7fd      	b.n	80047ea <prvProcessReceivedCommands+0x3e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047f4:	6850      	ldr	r0, [r2, #4]
 80047f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047f8:	6892      	ldr	r2, [r2, #8]
 80047fa:	4611      	mov	r1, r2
 80047fc:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	f2c0 80a9 	blt.w	8004958 <prvProcessReceivedCommands+0x1ac>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d004      	beq.n	800481c <prvProcessReceivedCommands+0x70>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	3304      	adds	r3, #4
 8004816:	4618      	mov	r0, r3
 8004818:	f7fd fe12 	bl	8002440 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800481c:	463b      	mov	r3, r7
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff ff62 	bl	80046e8 <prvSampleTimeNow>
 8004824:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3b01      	subs	r3, #1
 800482a:	2b08      	cmp	r3, #8
 800482c:	f200 8091 	bhi.w	8004952 <prvProcessReceivedCommands+0x1a6>
 8004830:	a201      	add	r2, pc, #4	@ (adr r2, 8004838 <prvProcessReceivedCommands+0x8c>)
 8004832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004836:	bf00      	nop
 8004838:	0800485d 	.word	0x0800485d
 800483c:	0800485d 	.word	0x0800485d
 8004840:	080048c5 	.word	0x080048c5
 8004844:	080048d9 	.word	0x080048d9
 8004848:	08004929 	.word	0x08004929
 800484c:	0800485d 	.word	0x0800485d
 8004850:	0800485d 	.word	0x0800485d
 8004854:	080048c5 	.word	0x080048c5
 8004858:	080048d9 	.word	0x080048d9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	b2da      	uxtb	r2, r3
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	18d1      	adds	r1, r2, r3
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	69fa      	ldr	r2, [r7, #28]
 800487a:	6a38      	ldr	r0, [r7, #32]
 800487c:	f7ff ff54 	bl	8004728 <prvInsertTimerInActiveList>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d067      	beq.n	8004956 <prvProcessReceivedCommands+0x1aa>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d009      	beq.n	80048a8 <prvProcessReceivedCommands+0xfc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	4413      	add	r3, r2
 800489c:	69fa      	ldr	r2, [r7, #28]
 800489e:	4619      	mov	r1, r3
 80048a0:	6a38      	ldr	r0, [r7, #32]
 80048a2:	f7ff fe49 	bl	8004538 <prvReloadTimer>
 80048a6:	e008      	b.n	80048ba <prvProcessReceivedCommands+0x10e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048ae:	f023 0301 	bic.w	r3, r3, #1
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	6a38      	ldr	r0, [r7, #32]
 80048c0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80048c2:	e048      	b.n	8004956 <prvProcessReceivedCommands+0x1aa>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048ca:	f023 0301 	bic.w	r3, r3, #1
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80048d6:	e03f      	b.n	8004958 <prvProcessReceivedCommands+0x1ac>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10d      	bne.n	8004914 <prvProcessReceivedCommands+0x168>
    __asm volatile
 80048f8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80048fc:	b672      	cpsid	i
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	b662      	cpsie	i
 800490c:	617b      	str	r3, [r7, #20]
}
 800490e:	bf00      	nop
 8004910:	bf00      	nop
 8004912:	e7fd      	b.n	8004910 <prvProcessReceivedCommands+0x164>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	699a      	ldr	r2, [r3, #24]
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	18d1      	adds	r1, r2, r3
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	69fa      	ldr	r2, [r7, #28]
 8004920:	6a38      	ldr	r0, [r7, #32]
 8004922:	f7ff ff01 	bl	8004728 <prvInsertTimerInActiveList>
                        break;
 8004926:	e017      	b.n	8004958 <prvProcessReceivedCommands+0x1ac>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <prvProcessReceivedCommands+0x192>
                            {
                                vPortFree( pxTimer );
 8004936:	6a38      	ldr	r0, [r7, #32]
 8004938:	f000 fc56 	bl	80051e8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800493c:	e00c      	b.n	8004958 <prvProcessReceivedCommands+0x1ac>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004944:	f023 0301 	bic.w	r3, r3, #1
 8004948:	b2da      	uxtb	r2, r3
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004950:	e002      	b.n	8004958 <prvProcessReceivedCommands+0x1ac>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004952:	bf00      	nop
 8004954:	e000      	b.n	8004958 <prvProcessReceivedCommands+0x1ac>
                        break;
 8004956:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004958:	4b07      	ldr	r3, [pc, #28]	@ (8004978 <prvProcessReceivedCommands+0x1cc>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	1d39      	adds	r1, r7, #4
 800495e:	2200      	movs	r2, #0
 8004960:	4618      	mov	r0, r3
 8004962:	f7fd feb7 	bl	80026d4 <xQueueReceive>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	f47f af29 	bne.w	80047c0 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 800496e:	bf00      	nop
 8004970:	bf00      	nop
 8004972:	3728      	adds	r7, #40	@ 0x28
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	20000210 	.word	0x20000210

0800497c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004982:	e009      	b.n	8004998 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004984:	4b0e      	ldr	r3, [pc, #56]	@ (80049c0 <prvSwitchTimerLists+0x44>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800498e:	f04f 31ff 	mov.w	r1, #4294967295
 8004992:	6838      	ldr	r0, [r7, #0]
 8004994:	f7ff fdf2 	bl	800457c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004998:	4b09      	ldr	r3, [pc, #36]	@ (80049c0 <prvSwitchTimerLists+0x44>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80049a2:	4b07      	ldr	r3, [pc, #28]	@ (80049c0 <prvSwitchTimerLists+0x44>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80049a8:	4b06      	ldr	r3, [pc, #24]	@ (80049c4 <prvSwitchTimerLists+0x48>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a04      	ldr	r2, [pc, #16]	@ (80049c0 <prvSwitchTimerLists+0x44>)
 80049ae:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80049b0:	4a04      	ldr	r2, [pc, #16]	@ (80049c4 <prvSwitchTimerLists+0x48>)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6013      	str	r3, [r2, #0]
    }
 80049b6:	bf00      	nop
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000208 	.word	0x20000208
 80049c4:	2000020c 	.word	0x2000020c

080049c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80049cc:	f000 f992 	bl	8004cf4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80049d0:	4b12      	ldr	r3, [pc, #72]	@ (8004a1c <prvCheckForValidListAndQueue+0x54>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d11d      	bne.n	8004a14 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80049d8:	4811      	ldr	r0, [pc, #68]	@ (8004a20 <prvCheckForValidListAndQueue+0x58>)
 80049da:	f7fd fc9f 	bl	800231c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80049de:	4811      	ldr	r0, [pc, #68]	@ (8004a24 <prvCheckForValidListAndQueue+0x5c>)
 80049e0:	f7fd fc9c 	bl	800231c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80049e4:	4b10      	ldr	r3, [pc, #64]	@ (8004a28 <prvCheckForValidListAndQueue+0x60>)
 80049e6:	4a0e      	ldr	r2, [pc, #56]	@ (8004a20 <prvCheckForValidListAndQueue+0x58>)
 80049e8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80049ea:	4b10      	ldr	r3, [pc, #64]	@ (8004a2c <prvCheckForValidListAndQueue+0x64>)
 80049ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004a24 <prvCheckForValidListAndQueue+0x5c>)
 80049ee:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80049f0:	2200      	movs	r2, #0
 80049f2:	2110      	movs	r1, #16
 80049f4:	2005      	movs	r0, #5
 80049f6:	f7fd fded 	bl	80025d4 <xQueueGenericCreate>
 80049fa:	4603      	mov	r3, r0
 80049fc:	4a07      	ldr	r2, [pc, #28]	@ (8004a1c <prvCheckForValidListAndQueue+0x54>)
 80049fe:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004a00:	4b06      	ldr	r3, [pc, #24]	@ (8004a1c <prvCheckForValidListAndQueue+0x54>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d005      	beq.n	8004a14 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a08:	4b04      	ldr	r3, [pc, #16]	@ (8004a1c <prvCheckForValidListAndQueue+0x54>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4908      	ldr	r1, [pc, #32]	@ (8004a30 <prvCheckForValidListAndQueue+0x68>)
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fe f85a 	bl	8002ac8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004a14:	f000 f9a4 	bl	8004d60 <vPortExitCritical>
    }
 8004a18:	bf00      	nop
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	20000210 	.word	0x20000210
 8004a20:	200001e0 	.word	0x200001e0
 8004a24:	200001f4 	.word	0x200001f4
 8004a28:	20000208 	.word	0x20000208
 8004a2c:	2000020c 	.word	0x2000020c
 8004a30:	08007e24 	.word	0x08007e24

08004a34 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3b04      	subs	r3, #4
 8004a44:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a4c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	3b04      	subs	r3, #4
 8004a52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f023 0201 	bic.w	r2, r3, #1
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3b04      	subs	r3, #4
 8004a62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004a64:	4a0c      	ldr	r2, [pc, #48]	@ (8004a98 <pxPortInitialiseStack+0x64>)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	3b14      	subs	r3, #20
 8004a6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	3b04      	subs	r3, #4
 8004a7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f06f 0202 	mvn.w	r2, #2
 8004a82:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	3b20      	subs	r3, #32
 8004a88:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	08004a9d 	.word	0x08004a9d

08004a9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004aa6:	4b15      	ldr	r3, [pc, #84]	@ (8004afc <prvTaskExitError+0x60>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aae:	d00d      	beq.n	8004acc <prvTaskExitError+0x30>
    __asm volatile
 8004ab0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004ab4:	b672      	cpsid	i
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	b662      	cpsie	i
 8004ac4:	60fb      	str	r3, [r7, #12]
}
 8004ac6:	bf00      	nop
 8004ac8:	bf00      	nop
 8004aca:	e7fd      	b.n	8004ac8 <prvTaskExitError+0x2c>
    __asm volatile
 8004acc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004ad0:	b672      	cpsid	i
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	b662      	cpsie	i
 8004ae0:	60bb      	str	r3, [r7, #8]
}
 8004ae2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004ae4:	bf00      	nop
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0fc      	beq.n	8004ae6 <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004aec:	bf00      	nop
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	20000010 	.word	0x20000010

08004b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004b00:	4b07      	ldr	r3, [pc, #28]	@ (8004b20 <pxCurrentTCBConst2>)
 8004b02:	6819      	ldr	r1, [r3, #0]
 8004b04:	6808      	ldr	r0, [r1, #0]
 8004b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0a:	f380 8809 	msr	PSP, r0
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f04f 0000 	mov.w	r0, #0
 8004b16:	f380 8811 	msr	BASEPRI, r0
 8004b1a:	4770      	bx	lr
 8004b1c:	f3af 8000 	nop.w

08004b20 <pxCurrentTCBConst2>:
 8004b20:	200000dc 	.word	0x200000dc
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004b24:	bf00      	nop
 8004b26:	bf00      	nop

08004b28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004b28:	4808      	ldr	r0, [pc, #32]	@ (8004b4c <prvPortStartFirstTask+0x24>)
 8004b2a:	6800      	ldr	r0, [r0, #0]
 8004b2c:	6800      	ldr	r0, [r0, #0]
 8004b2e:	f380 8808 	msr	MSP, r0
 8004b32:	f04f 0000 	mov.w	r0, #0
 8004b36:	f380 8814 	msr	CONTROL, r0
 8004b3a:	b662      	cpsie	i
 8004b3c:	b661      	cpsie	f
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	df00      	svc	0
 8004b48:	bf00      	nop
 8004b4a:	0000      	.short	0x0000
 8004b4c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop

08004b54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08a      	sub	sp, #40	@ 0x28
 8004b58:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8004b5a:	4b5c      	ldr	r3, [pc, #368]	@ (8004ccc <xPortStartScheduler+0x178>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8004b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b62:	332c      	adds	r3, #44	@ 0x2c
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a5a      	ldr	r2, [pc, #360]	@ (8004cd0 <xPortStartScheduler+0x17c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00d      	beq.n	8004b88 <xPortStartScheduler+0x34>
    __asm volatile
 8004b6c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004b70:	b672      	cpsid	i
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	b662      	cpsie	i
 8004b80:	61fb      	str	r3, [r7, #28]
}
 8004b82:	bf00      	nop
 8004b84:	bf00      	nop
 8004b86:	e7fd      	b.n	8004b84 <xPortStartScheduler+0x30>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8004b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8a:	3338      	adds	r3, #56	@ 0x38
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a51      	ldr	r2, [pc, #324]	@ (8004cd4 <xPortStartScheduler+0x180>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00d      	beq.n	8004bb0 <xPortStartScheduler+0x5c>
    __asm volatile
 8004b94:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004b98:	b672      	cpsid	i
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	b662      	cpsie	i
 8004ba8:	61bb      	str	r3, [r7, #24]
}
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
 8004bae:	e7fd      	b.n	8004bac <xPortStartScheduler+0x58>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bb4:	4b48      	ldr	r3, [pc, #288]	@ (8004cd8 <xPortStartScheduler+0x184>)
 8004bb6:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	22ff      	movs	r2, #255	@ 0xff
 8004bc4:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	4b40      	ldr	r3, [pc, #256]	@ (8004cdc <xPortStartScheduler+0x188>)
 8004bda:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8004bdc:	4b3f      	ldr	r3, [pc, #252]	@ (8004cdc <xPortStartScheduler+0x188>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10d      	bne.n	8004c00 <xPortStartScheduler+0xac>
    __asm volatile
 8004be4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004be8:	b672      	cpsid	i
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	b662      	cpsie	i
 8004bf8:	617b      	str	r3, [r7, #20]
}
 8004bfa:	bf00      	nop
 8004bfc:	bf00      	nop
 8004bfe:	e7fd      	b.n	8004bfc <xPortStartScheduler+0xa8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	43db      	mvns	r3, r3
 8004c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d015      	beq.n	8004c3a <xPortStartScheduler+0xe6>
    __asm volatile
 8004c0e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004c12:	b672      	cpsid	i
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	b662      	cpsie	i
 8004c22:	613b      	str	r3, [r7, #16]
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	e7fd      	b.n	8004c26 <xPortStartScheduler+0xd2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c30:	79fb      	ldrb	r3, [r7, #7]
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c3a:	79fb      	ldrb	r3, [r7, #7]
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c42:	2b80      	cmp	r3, #128	@ 0x80
 8004c44:	d0f1      	beq.n	8004c2a <xPortStartScheduler+0xd6>
        }

        if( ulImplementedPrioBits == 8 )
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d103      	bne.n	8004c54 <xPortStartScheduler+0x100>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8004c4c:	4b24      	ldr	r3, [pc, #144]	@ (8004ce0 <xPortStartScheduler+0x18c>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	e004      	b.n	8004c5e <xPortStartScheduler+0x10a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f1c3 0307 	rsb	r3, r3, #7
 8004c5a:	4a21      	ldr	r2, [pc, #132]	@ (8004ce0 <xPortStartScheduler+0x18c>)
 8004c5c:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c5e:	4b20      	ldr	r3, [pc, #128]	@ (8004ce0 <xPortStartScheduler+0x18c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	4a1e      	ldr	r2, [pc, #120]	@ (8004ce0 <xPortStartScheduler+0x18c>)
 8004c66:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c68:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce0 <xPortStartScheduler+0x18c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c70:	4a1b      	ldr	r2, [pc, #108]	@ (8004ce0 <xPortStartScheduler+0x18c>)
 8004c72:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004c7c:	4b19      	ldr	r3, [pc, #100]	@ (8004ce4 <xPortStartScheduler+0x190>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a18      	ldr	r2, [pc, #96]	@ (8004ce4 <xPortStartScheduler+0x190>)
 8004c82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c86:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004c88:	4b16      	ldr	r3, [pc, #88]	@ (8004ce4 <xPortStartScheduler+0x190>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a15      	ldr	r2, [pc, #84]	@ (8004ce4 <xPortStartScheduler+0x190>)
 8004c8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c92:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8004c94:	4b14      	ldr	r3, [pc, #80]	@ (8004ce8 <xPortStartScheduler+0x194>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004c9a:	f000 f8f1 	bl	8004e80 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004c9e:	4b13      	ldr	r3, [pc, #76]	@ (8004cec <xPortStartScheduler+0x198>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004ca4:	f000 f910 	bl	8004ec8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ca8:	4b11      	ldr	r3, [pc, #68]	@ (8004cf0 <xPortStartScheduler+0x19c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a10      	ldr	r2, [pc, #64]	@ (8004cf0 <xPortStartScheduler+0x19c>)
 8004cae:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004cb2:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004cb4:	f7ff ff38 	bl	8004b28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004cb8:	f7fe fdbc 	bl	8003834 <vTaskSwitchContext>
    prvTaskExitError();
 8004cbc:	f7ff feee 	bl	8004a9c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3728      	adds	r7, #40	@ 0x28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	e000ed08 	.word	0xe000ed08
 8004cd0:	08004b01 	.word	0x08004b01
 8004cd4:	08004dc1 	.word	0x08004dc1
 8004cd8:	e000e400 	.word	0xe000e400
 8004cdc:	2000021c 	.word	0x2000021c
 8004ce0:	20000220 	.word	0x20000220
 8004ce4:	e000ed20 	.word	0xe000ed20
 8004ce8:	e000ed1c 	.word	0xe000ed1c
 8004cec:	20000010 	.word	0x20000010
 8004cf0:	e000ef34 	.word	0xe000ef34

08004cf4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
    __asm volatile
 8004cfa:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004cfe:	b672      	cpsid	i
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	b662      	cpsie	i
 8004d0e:	607b      	str	r3, [r7, #4]
}
 8004d10:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004d12:	4b11      	ldr	r3, [pc, #68]	@ (8004d58 <vPortEnterCritical+0x64>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3301      	adds	r3, #1
 8004d18:	4a0f      	ldr	r2, [pc, #60]	@ (8004d58 <vPortEnterCritical+0x64>)
 8004d1a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d58 <vPortEnterCritical+0x64>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d112      	bne.n	8004d4a <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d24:	4b0d      	ldr	r3, [pc, #52]	@ (8004d5c <vPortEnterCritical+0x68>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00d      	beq.n	8004d4a <vPortEnterCritical+0x56>
    __asm volatile
 8004d2e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004d32:	b672      	cpsid	i
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	b662      	cpsie	i
 8004d42:	603b      	str	r3, [r7, #0]
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop
 8004d48:	e7fd      	b.n	8004d46 <vPortEnterCritical+0x52>
    }
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	20000010 	.word	0x20000010
 8004d5c:	e000ed04 	.word	0xe000ed04

08004d60 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004d66:	4b13      	ldr	r3, [pc, #76]	@ (8004db4 <vPortExitCritical+0x54>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10d      	bne.n	8004d8a <vPortExitCritical+0x2a>
    __asm volatile
 8004d6e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004d72:	b672      	cpsid	i
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	b662      	cpsie	i
 8004d82:	607b      	str	r3, [r7, #4]
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
 8004d88:	e7fd      	b.n	8004d86 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004db4 <vPortExitCritical+0x54>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	4a08      	ldr	r2, [pc, #32]	@ (8004db4 <vPortExitCritical+0x54>)
 8004d92:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004d94:	4b07      	ldr	r3, [pc, #28]	@ (8004db4 <vPortExitCritical+0x54>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d105      	bne.n	8004da8 <vPortExitCritical+0x48>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8004da6:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	20000010 	.word	0x20000010
	...

08004dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004dc0:	f3ef 8009 	mrs	r0, PSP
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	4b15      	ldr	r3, [pc, #84]	@ (8004e20 <pxCurrentTCBConst>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	f01e 0f10 	tst.w	lr, #16
 8004dd0:	bf08      	it	eq
 8004dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dda:	6010      	str	r0, [r2, #0]
 8004ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004de0:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8004de4:	b672      	cpsid	i
 8004de6:	f380 8811 	msr	BASEPRI, r0
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	b662      	cpsie	i
 8004df4:	f7fe fd1e 	bl	8003834 <vTaskSwitchContext>
 8004df8:	f04f 0000 	mov.w	r0, #0
 8004dfc:	f380 8811 	msr	BASEPRI, r0
 8004e00:	bc09      	pop	{r0, r3}
 8004e02:	6819      	ldr	r1, [r3, #0]
 8004e04:	6808      	ldr	r0, [r1, #0]
 8004e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0a:	f01e 0f10 	tst.w	lr, #16
 8004e0e:	bf08      	it	eq
 8004e10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e14:	f380 8809 	msr	PSP, r0
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop

08004e20 <pxCurrentTCBConst>:
 8004e20:	200000dc 	.word	0x200000dc
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop

08004e28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
    __asm volatile
 8004e2e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004e32:	b672      	cpsid	i
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	b662      	cpsie	i
 8004e42:	607b      	str	r3, [r7, #4]
}
 8004e44:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004e46:	f002 fb71 	bl	800752c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004e4a:	f7fe fbcf 	bl	80035ec <xTaskIncrementTick>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d006      	beq.n	8004e62 <SysTick_Handler+0x3a>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8004e54:	f002 fbc8 	bl	80075e8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e58:	4b08      	ldr	r3, [pc, #32]	@ (8004e7c <SysTick_Handler+0x54>)
 8004e5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	e001      	b.n	8004e66 <SysTick_Handler+0x3e>
        }
        else
        {
            traceISR_EXIT();
 8004e62:	f002 fba5 	bl	80075b0 <SEGGER_SYSVIEW_RecordExitISR>
 8004e66:	2300      	movs	r3, #0
 8004e68:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	f383 8811 	msr	BASEPRI, r3
}
 8004e70:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004e72:	bf00      	nop
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	e000ed04 	.word	0xe000ed04

08004e80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e84:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb4 <vPortSetupTimerInterrupt+0x34>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <vPortSetupTimerInterrupt+0x38>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e90:	4b0a      	ldr	r3, [pc, #40]	@ (8004ebc <vPortSetupTimerInterrupt+0x3c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec0 <vPortSetupTimerInterrupt+0x40>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	099b      	lsrs	r3, r3, #6
 8004e9c:	4a09      	ldr	r2, [pc, #36]	@ (8004ec4 <vPortSetupTimerInterrupt+0x44>)
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ea2:	4b04      	ldr	r3, [pc, #16]	@ (8004eb4 <vPortSetupTimerInterrupt+0x34>)
 8004ea4:	2207      	movs	r2, #7
 8004ea6:	601a      	str	r2, [r3, #0]
}
 8004ea8:	bf00      	nop
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	e000e010 	.word	0xe000e010
 8004eb8:	e000e018 	.word	0xe000e018
 8004ebc:	20000000 	.word	0x20000000
 8004ec0:	10624dd3 	.word	0x10624dd3
 8004ec4:	e000e014 	.word	0xe000e014

08004ec8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004ec8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004ed8 <vPortEnableVFP+0x10>
 8004ecc:	6801      	ldr	r1, [r0, #0]
 8004ece:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004ed2:	6001      	str	r1, [r0, #0]
 8004ed4:	4770      	bx	lr
 8004ed6:	0000      	.short	0x0000
 8004ed8:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8004edc:	bf00      	nop
 8004ede:	bf00      	nop

08004ee0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004ee6:	f3ef 8305 	mrs	r3, IPSR
 8004eea:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b0f      	cmp	r3, #15
 8004ef0:	d917      	bls.n	8004f22 <vPortValidateInterruptPriority+0x42>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8004f5c <vPortValidateInterruptPriority+0x7c>)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004efc:	4b18      	ldr	r3, [pc, #96]	@ (8004f60 <vPortValidateInterruptPriority+0x80>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	7afa      	ldrb	r2, [r7, #11]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d20d      	bcs.n	8004f22 <vPortValidateInterruptPriority+0x42>
    __asm volatile
 8004f06:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004f0a:	b672      	cpsid	i
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	b662      	cpsie	i
 8004f1a:	607b      	str	r3, [r7, #4]
}
 8004f1c:	bf00      	nop
 8004f1e:	bf00      	nop
 8004f20:	e7fd      	b.n	8004f1e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f22:	4b10      	ldr	r3, [pc, #64]	@ (8004f64 <vPortValidateInterruptPriority+0x84>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8004f68 <vPortValidateInterruptPriority+0x88>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d90d      	bls.n	8004f4e <vPortValidateInterruptPriority+0x6e>
    __asm volatile
 8004f32:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004f36:	b672      	cpsid	i
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	b662      	cpsie	i
 8004f46:	603b      	str	r3, [r7, #0]
}
 8004f48:	bf00      	nop
 8004f4a:	bf00      	nop
 8004f4c:	e7fd      	b.n	8004f4a <vPortValidateInterruptPriority+0x6a>
    }
 8004f4e:	bf00      	nop
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	e000e3f0 	.word	0xe000e3f0
 8004f60:	2000021c 	.word	0x2000021c
 8004f64:	e000ed0c 	.word	0xe000ed0c
 8004f68:	20000220 	.word	0x20000220

08004f6c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08e      	sub	sp, #56	@ 0x38
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004f74:	2300      	movs	r3, #0
 8004f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d022      	beq.n	8004fc4 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8004f7e:	2308      	movs	r3, #8
 8004f80:	43db      	mvns	r3, r3
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d81b      	bhi.n	8004fc0 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8004f88:	2208      	movs	r2, #8
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d014      	beq.n	8004fc4 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	f1c3 0308 	rsb	r3, r3, #8
 8004fa4:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d804      	bhi.n	8004fba <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb4:	4413      	add	r3, r2
 8004fb6:	607b      	str	r3, [r7, #4]
 8004fb8:	e004      	b.n	8004fc4 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	607b      	str	r3, [r7, #4]
 8004fbe:	e001      	b.n	8004fc4 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8004fc4:	f7fe f9ba 	bl	800333c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004fc8:	4b80      	ldr	r3, [pc, #512]	@ (80051cc <pvPortMalloc+0x260>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8004fd0:	f000 f98a 	bl	80052e8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f2c0 80de 	blt.w	8005198 <pvPortMalloc+0x22c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 80da 	beq.w	8005198 <pvPortMalloc+0x22c>
 8004fe4:	4b7a      	ldr	r3, [pc, #488]	@ (80051d0 <pvPortMalloc+0x264>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	f200 80d4 	bhi.w	8005198 <pvPortMalloc+0x22c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004ff0:	4b78      	ldr	r3, [pc, #480]	@ (80051d4 <pvPortMalloc+0x268>)
 8004ff2:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8004ff4:	4b77      	ldr	r3, [pc, #476]	@ (80051d4 <pvPortMalloc+0x268>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ffc:	4a76      	ldr	r2, [pc, #472]	@ (80051d8 <pvPortMalloc+0x26c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d305      	bcc.n	800500e <pvPortMalloc+0xa2>
 8005002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005004:	4a75      	ldr	r2, [pc, #468]	@ (80051dc <pvPortMalloc+0x270>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d801      	bhi.n	800500e <pvPortMalloc+0xa2>
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <pvPortMalloc+0xa4>
 800500e:	2300      	movs	r3, #0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d12d      	bne.n	8005070 <pvPortMalloc+0x104>
    __asm volatile
 8005014:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005018:	b672      	cpsid	i
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	b662      	cpsie	i
 8005028:	623b      	str	r3, [r7, #32]
}
 800502a:	bf00      	nop
 800502c:	bf00      	nop
 800502e:	e7fd      	b.n	800502c <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8005030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005032:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8005034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800503a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800503c:	4a66      	ldr	r2, [pc, #408]	@ (80051d8 <pvPortMalloc+0x26c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d305      	bcc.n	800504e <pvPortMalloc+0xe2>
 8005042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005044:	4a65      	ldr	r2, [pc, #404]	@ (80051dc <pvPortMalloc+0x270>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d801      	bhi.n	800504e <pvPortMalloc+0xe2>
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <pvPortMalloc+0xe4>
 800504e:	2300      	movs	r3, #0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10d      	bne.n	8005070 <pvPortMalloc+0x104>
    __asm volatile
 8005054:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005058:	b672      	cpsid	i
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	b662      	cpsie	i
 8005068:	61fb      	str	r3, [r7, #28]
}
 800506a:	bf00      	nop
 800506c:	bf00      	nop
 800506e:	e7fd      	b.n	800506c <pvPortMalloc+0x100>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8005070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	429a      	cmp	r2, r3
 8005078:	d903      	bls.n	8005082 <pvPortMalloc+0x116>
 800507a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1d6      	bne.n	8005030 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005082:	4b52      	ldr	r3, [pc, #328]	@ (80051cc <pvPortMalloc+0x260>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005088:	429a      	cmp	r2, r3
 800508a:	f000 8085 	beq.w	8005198 <pvPortMalloc+0x22c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 800508e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2208      	movs	r2, #8
 8005094:	4413      	add	r3, r2
 8005096:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8005098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509a:	4a4f      	ldr	r2, [pc, #316]	@ (80051d8 <pvPortMalloc+0x26c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d305      	bcc.n	80050ac <pvPortMalloc+0x140>
 80050a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a2:	4a4e      	ldr	r2, [pc, #312]	@ (80051dc <pvPortMalloc+0x270>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d801      	bhi.n	80050ac <pvPortMalloc+0x140>
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <pvPortMalloc+0x142>
 80050ac:	2300      	movs	r3, #0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10d      	bne.n	80050ce <pvPortMalloc+0x162>
    __asm volatile
 80050b2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80050b6:	b672      	cpsid	i
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	b662      	cpsie	i
 80050c6:	61bb      	str	r3, [r7, #24]
}
 80050c8:	bf00      	nop
 80050ca:	bf00      	nop
 80050cc:	e7fd      	b.n	80050ca <pvPortMalloc+0x15e>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d4:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80050d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d90d      	bls.n	80050fc <pvPortMalloc+0x190>
    __asm volatile
 80050e0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80050e4:	b672      	cpsid	i
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	b662      	cpsie	i
 80050f4:	617b      	str	r3, [r7, #20]
}
 80050f6:	bf00      	nop
 80050f8:	bf00      	nop
 80050fa:	e7fd      	b.n	80050f8 <pvPortMalloc+0x18c>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	1ad2      	subs	r2, r2, r3
 8005104:	2308      	movs	r3, #8
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	429a      	cmp	r2, r3
 800510a:	d926      	bls.n	800515a <pvPortMalloc+0x1ee>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800510c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4413      	add	r3, r2
 8005112:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00d      	beq.n	800513a <pvPortMalloc+0x1ce>
    __asm volatile
 800511e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005122:	b672      	cpsid	i
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	b662      	cpsie	i
 8005132:	613b      	str	r3, [r7, #16]
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop
 8005138:	e7fd      	b.n	8005136 <pvPortMalloc+0x1ca>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800513a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	1ad2      	subs	r2, r2, r3
 8005142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005144:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800514c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8005154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005158:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800515a:	4b1d      	ldr	r3, [pc, #116]	@ (80051d0 <pvPortMalloc+0x264>)
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	4a1a      	ldr	r2, [pc, #104]	@ (80051d0 <pvPortMalloc+0x264>)
 8005166:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005168:	4b19      	ldr	r3, [pc, #100]	@ (80051d0 <pvPortMalloc+0x264>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	4b1c      	ldr	r3, [pc, #112]	@ (80051e0 <pvPortMalloc+0x274>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	429a      	cmp	r2, r3
 8005172:	d203      	bcs.n	800517c <pvPortMalloc+0x210>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005174:	4b16      	ldr	r3, [pc, #88]	@ (80051d0 <pvPortMalloc+0x264>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a19      	ldr	r2, [pc, #100]	@ (80051e0 <pvPortMalloc+0x274>)
 800517a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800517c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005186:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800518e:	4b15      	ldr	r3, [pc, #84]	@ (80051e4 <pvPortMalloc+0x278>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3301      	adds	r3, #1
 8005194:	4a13      	ldr	r2, [pc, #76]	@ (80051e4 <pvPortMalloc+0x278>)
 8005196:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005198:	f7fe f8de 	bl	8003358 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800519c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00d      	beq.n	80051c2 <pvPortMalloc+0x256>
    __asm volatile
 80051a6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80051aa:	b672      	cpsid	i
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	b662      	cpsie	i
 80051ba:	60fb      	str	r3, [r7, #12]
}
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
 80051c0:	e7fd      	b.n	80051be <pvPortMalloc+0x252>
    return pvReturn;
 80051c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3738      	adds	r7, #56	@ 0x38
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	2000ba2c 	.word	0x2000ba2c
 80051d0:	2000ba30 	.word	0x2000ba30
 80051d4:	2000ba24 	.word	0x2000ba24
 80051d8:	20000224 	.word	0x20000224
 80051dc:	2000ba23 	.word	0x2000ba23
 80051e0:	2000ba34 	.word	0x2000ba34
 80051e4:	2000ba38 	.word	0x2000ba38

080051e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d06a      	beq.n	80052d0 <vPortFree+0xe8>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80051fa:	2308      	movs	r3, #8
 80051fc:	425b      	negs	r3, r3
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	4413      	add	r3, r2
 8005202:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	4a33      	ldr	r2, [pc, #204]	@ (80052d8 <vPortFree+0xf0>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d305      	bcc.n	800521c <vPortFree+0x34>
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	4a32      	ldr	r2, [pc, #200]	@ (80052dc <vPortFree+0xf4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d801      	bhi.n	800521c <vPortFree+0x34>
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <vPortFree+0x36>
 800521c:	2300      	movs	r3, #0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10d      	bne.n	800523e <vPortFree+0x56>
    __asm volatile
 8005222:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005226:	b672      	cpsid	i
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	b662      	cpsie	i
 8005236:	617b      	str	r3, [r7, #20]
}
 8005238:	bf00      	nop
 800523a:	bf00      	nop
 800523c:	e7fd      	b.n	800523a <vPortFree+0x52>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	db0d      	blt.n	8005262 <vPortFree+0x7a>
    __asm volatile
 8005246:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800524a:	b672      	cpsid	i
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	b662      	cpsie	i
 800525a:	613b      	str	r3, [r7, #16]
}
 800525c:	bf00      	nop
 800525e:	bf00      	nop
 8005260:	e7fd      	b.n	800525e <vPortFree+0x76>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00d      	beq.n	8005286 <vPortFree+0x9e>
    __asm volatile
 800526a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800526e:	b672      	cpsid	i
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	b662      	cpsie	i
 800527e:	60fb      	str	r3, [r7, #12]
}
 8005280:	bf00      	nop
 8005282:	bf00      	nop
 8005284:	e7fd      	b.n	8005282 <vPortFree+0x9a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	0fdb      	lsrs	r3, r3, #31
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01c      	beq.n	80052d0 <vPortFree+0xe8>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d118      	bne.n	80052d0 <vPortFree+0xe8>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80052aa:	f7fe f847 	bl	800333c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	4b0b      	ldr	r3, [pc, #44]	@ (80052e0 <vPortFree+0xf8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4413      	add	r3, r2
 80052b8:	4a09      	ldr	r2, [pc, #36]	@ (80052e0 <vPortFree+0xf8>)
 80052ba:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052bc:	69b8      	ldr	r0, [r7, #24]
 80052be:	f000 f86d 	bl	800539c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80052c2:	4b08      	ldr	r3, [pc, #32]	@ (80052e4 <vPortFree+0xfc>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3301      	adds	r3, #1
 80052c8:	4a06      	ldr	r2, [pc, #24]	@ (80052e4 <vPortFree+0xfc>)
 80052ca:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80052cc:	f7fe f844 	bl	8003358 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80052d0:	bf00      	nop
 80052d2:	3720      	adds	r7, #32
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000224 	.word	0x20000224
 80052dc:	2000ba23 	.word	0x2000ba23
 80052e0:	2000ba30 	.word	0x2000ba30
 80052e4:	2000ba3c 	.word	0x2000ba3c

080052e8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052ee:	f44f 4338 	mov.w	r3, #47104	@ 0xb800
 80052f2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80052f4:	4b24      	ldr	r3, [pc, #144]	@ (8005388 <prvHeapInit+0xa0>)
 80052f6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00c      	beq.n	800531c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3307      	adds	r3, #7
 8005306:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0307 	bic.w	r3, r3, #7
 800530e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	4a1c      	ldr	r2, [pc, #112]	@ (8005388 <prvHeapInit+0xa0>)
 8005318:	4413      	add	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4a1b      	ldr	r2, [pc, #108]	@ (800538c <prvHeapInit+0xa4>)
 8005320:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005322:	4b1a      	ldr	r3, [pc, #104]	@ (800538c <prvHeapInit+0xa4>)
 8005324:	2200      	movs	r2, #0
 8005326:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	4413      	add	r3, r2
 800532e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8005330:	2208      	movs	r2, #8
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	1a9b      	subs	r3, r3, r2
 8005336:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f023 0307 	bic.w	r3, r3, #7
 800533e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a13      	ldr	r2, [pc, #76]	@ (8005390 <prvHeapInit+0xa8>)
 8005344:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005346:	4b12      	ldr	r3, [pc, #72]	@ (8005390 <prvHeapInit+0xa8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2200      	movs	r2, #0
 800534c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800534e:	4b10      	ldr	r3, [pc, #64]	@ (8005390 <prvHeapInit+0xa8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	1ad2      	subs	r2, r2, r3
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005364:	4b0a      	ldr	r3, [pc, #40]	@ (8005390 <prvHeapInit+0xa8>)
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	4a08      	ldr	r2, [pc, #32]	@ (8005394 <prvHeapInit+0xac>)
 8005372:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	4a07      	ldr	r2, [pc, #28]	@ (8005398 <prvHeapInit+0xb0>)
 800537a:	6013      	str	r3, [r2, #0]
}
 800537c:	bf00      	nop
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	20000224 	.word	0x20000224
 800538c:	2000ba24 	.word	0x2000ba24
 8005390:	2000ba2c 	.word	0x2000ba2c
 8005394:	2000ba34 	.word	0x2000ba34
 8005398:	2000ba30 	.word	0x2000ba30

0800539c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80053a4:	4b37      	ldr	r3, [pc, #220]	@ (8005484 <prvInsertBlockIntoFreeList+0xe8>)
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	e002      	b.n	80053b0 <prvInsertBlockIntoFreeList+0x14>
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d8f7      	bhi.n	80053aa <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	4a31      	ldr	r2, [pc, #196]	@ (8005484 <prvInsertBlockIntoFreeList+0xe8>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d01a      	beq.n	80053f8 <prvInsertBlockIntoFreeList+0x5c>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	4a30      	ldr	r2, [pc, #192]	@ (8005488 <prvInsertBlockIntoFreeList+0xec>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d305      	bcc.n	80053d6 <prvInsertBlockIntoFreeList+0x3a>
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	4a2f      	ldr	r2, [pc, #188]	@ (800548c <prvInsertBlockIntoFreeList+0xf0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d801      	bhi.n	80053d6 <prvInsertBlockIntoFreeList+0x3a>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <prvInsertBlockIntoFreeList+0x3c>
 80053d6:	2300      	movs	r3, #0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10d      	bne.n	80053f8 <prvInsertBlockIntoFreeList+0x5c>
    __asm volatile
 80053dc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80053e0:	b672      	cpsid	i
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	b662      	cpsie	i
 80053f0:	60fb      	str	r3, [r7, #12]
}
 80053f2:	bf00      	nop
 80053f4:	bf00      	nop
 80053f6:	e7fd      	b.n	80053f4 <prvInsertBlockIntoFreeList+0x58>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4413      	add	r3, r2
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	429a      	cmp	r2, r3
 8005408:	d108      	bne.n	800541c <prvInsertBlockIntoFreeList+0x80>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	441a      	add	r2, r3
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	441a      	add	r2, r3
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d118      	bne.n	8005462 <prvInsertBlockIntoFreeList+0xc6>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	4b16      	ldr	r3, [pc, #88]	@ (8005490 <prvInsertBlockIntoFreeList+0xf4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d00d      	beq.n	8005458 <prvInsertBlockIntoFreeList+0xbc>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	441a      	add	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	e008      	b.n	800546a <prvInsertBlockIntoFreeList+0xce>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005458:	4b0d      	ldr	r3, [pc, #52]	@ (8005490 <prvInsertBlockIntoFreeList+0xf4>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	e003      	b.n	800546a <prvInsertBlockIntoFreeList+0xce>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	429a      	cmp	r2, r3
 8005470:	d002      	beq.n	8005478 <prvInsertBlockIntoFreeList+0xdc>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005478:	bf00      	nop
 800547a:	371c      	adds	r7, #28
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	2000ba24 	.word	0x2000ba24
 8005488:	20000224 	.word	0x20000224
 800548c:	2000ba23 	.word	0x2000ba23
 8005490:	2000ba2c 	.word	0x2000ba2c

08005494 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005498:	4803      	ldr	r0, [pc, #12]	@ (80054a8 <_cbSendSystemDesc+0x14>)
 800549a:	f001 fff1 	bl	8007480 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800549e:	4803      	ldr	r0, [pc, #12]	@ (80054ac <_cbSendSystemDesc+0x18>)
 80054a0:	f001 ffee 	bl	8007480 <SEGGER_SYSVIEW_SendSysDesc>
}
 80054a4:	bf00      	nop
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	08007e2c 	.word	0x08007e2c
 80054ac:	08007e68 	.word	0x08007e68

080054b0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80054b4:	4b06      	ldr	r3, [pc, #24]	@ (80054d0 <SEGGER_SYSVIEW_Conf+0x20>)
 80054b6:	6818      	ldr	r0, [r3, #0]
 80054b8:	4b05      	ldr	r3, [pc, #20]	@ (80054d0 <SEGGER_SYSVIEW_Conf+0x20>)
 80054ba:	6819      	ldr	r1, [r3, #0]
 80054bc:	4b05      	ldr	r3, [pc, #20]	@ (80054d4 <SEGGER_SYSVIEW_Conf+0x24>)
 80054be:	4a06      	ldr	r2, [pc, #24]	@ (80054d8 <SEGGER_SYSVIEW_Conf+0x28>)
 80054c0:	f001 fc64 	bl	8006d8c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80054c4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80054c8:	f001 fca4 	bl	8006e14 <SEGGER_SYSVIEW_SetRAMBase>
}
 80054cc:	bf00      	nop
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	20000000 	.word	0x20000000
 80054d4:	08005495 	.word	0x08005495
 80054d8:	08007f04 	.word	0x08007f04

080054dc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80054dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054de:	b085      	sub	sp, #20
 80054e0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80054e2:	2300      	movs	r3, #0
 80054e4:	607b      	str	r3, [r7, #4]
 80054e6:	e033      	b.n	8005550 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80054e8:	491e      	ldr	r1, [pc, #120]	@ (8005564 <_cbSendTaskList+0x88>)
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	4613      	mov	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	6818      	ldr	r0, [r3, #0]
 80054f8:	491a      	ldr	r1, [pc, #104]	@ (8005564 <_cbSendTaskList+0x88>)
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	3304      	adds	r3, #4
 8005508:	6819      	ldr	r1, [r3, #0]
 800550a:	4c16      	ldr	r4, [pc, #88]	@ (8005564 <_cbSendTaskList+0x88>)
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4423      	add	r3, r4
 8005518:	3308      	adds	r3, #8
 800551a:	681c      	ldr	r4, [r3, #0]
 800551c:	4d11      	ldr	r5, [pc, #68]	@ (8005564 <_cbSendTaskList+0x88>)
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	442b      	add	r3, r5
 800552a:	330c      	adds	r3, #12
 800552c:	681d      	ldr	r5, [r3, #0]
 800552e:	4e0d      	ldr	r6, [pc, #52]	@ (8005564 <_cbSendTaskList+0x88>)
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	4613      	mov	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4433      	add	r3, r6
 800553c:	3310      	adds	r3, #16
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	462b      	mov	r3, r5
 8005544:	4622      	mov	r2, r4
 8005546:	f000 f8bd 	bl	80056c4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3301      	adds	r3, #1
 800554e:	607b      	str	r3, [r7, #4]
 8005550:	4b05      	ldr	r3, [pc, #20]	@ (8005568 <_cbSendTaskList+0x8c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	429a      	cmp	r2, r3
 8005558:	d3c6      	bcc.n	80054e8 <_cbSendTaskList+0xc>
  }
}
 800555a:	bf00      	nop
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005564:	2000ba40 	.word	0x2000ba40
 8005568:	2000bae0 	.word	0x2000bae0

0800556c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800556c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005574:	f7fe f816 	bl	80035a4 <xTaskGetTickCountFromISR>
 8005578:	4603      	mov	r3, r0
 800557a:	2200      	movs	r2, #0
 800557c:	469a      	mov	sl, r3
 800557e:	4693      	mov	fp, r2
 8005580:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005584:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	f04f 0a00 	mov.w	sl, #0
 8005590:	f04f 0b00 	mov.w	fp, #0
 8005594:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005598:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800559c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80055a0:	4652      	mov	r2, sl
 80055a2:	465b      	mov	r3, fp
 80055a4:	1a14      	subs	r4, r2, r0
 80055a6:	eb63 0501 	sbc.w	r5, r3, r1
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	f04f 0300 	mov.w	r3, #0
 80055b2:	00ab      	lsls	r3, r5, #2
 80055b4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80055b8:	00a2      	lsls	r2, r4, #2
 80055ba:	4614      	mov	r4, r2
 80055bc:	461d      	mov	r5, r3
 80055be:	eb14 0800 	adds.w	r8, r4, r0
 80055c2:	eb45 0901 	adc.w	r9, r5, r1
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	f04f 0300 	mov.w	r3, #0
 80055ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055da:	4690      	mov	r8, r2
 80055dc:	4699      	mov	r9, r3
 80055de:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80055e2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80055e6:	4610      	mov	r0, r2
 80055e8:	4619      	mov	r1, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080055f4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005602:	2205      	movs	r2, #5
 8005604:	492b      	ldr	r1, [pc, #172]	@ (80056b4 <SYSVIEW_AddTask+0xc0>)
 8005606:	68b8      	ldr	r0, [r7, #8]
 8005608:	f002 fb74 	bl	8007cf4 <memcmp>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d04b      	beq.n	80056aa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005612:	4b29      	ldr	r3, [pc, #164]	@ (80056b8 <SYSVIEW_AddTask+0xc4>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b07      	cmp	r3, #7
 8005618:	d903      	bls.n	8005622 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800561a:	4828      	ldr	r0, [pc, #160]	@ (80056bc <SYSVIEW_AddTask+0xc8>)
 800561c:	f002 fae0 	bl	8007be0 <SEGGER_SYSVIEW_Warn>
    return;
 8005620:	e044      	b.n	80056ac <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005622:	4b25      	ldr	r3, [pc, #148]	@ (80056b8 <SYSVIEW_AddTask+0xc4>)
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	4926      	ldr	r1, [pc, #152]	@ (80056c0 <SYSVIEW_AddTask+0xcc>)
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005636:	4b20      	ldr	r3, [pc, #128]	@ (80056b8 <SYSVIEW_AddTask+0xc4>)
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	4921      	ldr	r1, [pc, #132]	@ (80056c0 <SYSVIEW_AddTask+0xcc>)
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	3304      	adds	r3, #4
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800564c:	4b1a      	ldr	r3, [pc, #104]	@ (80056b8 <SYSVIEW_AddTask+0xc4>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	491b      	ldr	r1, [pc, #108]	@ (80056c0 <SYSVIEW_AddTask+0xcc>)
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	440b      	add	r3, r1
 800565c:	3308      	adds	r3, #8
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005662:	4b15      	ldr	r3, [pc, #84]	@ (80056b8 <SYSVIEW_AddTask+0xc4>)
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	4916      	ldr	r1, [pc, #88]	@ (80056c0 <SYSVIEW_AddTask+0xcc>)
 8005668:	4613      	mov	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	330c      	adds	r3, #12
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005678:	4b0f      	ldr	r3, [pc, #60]	@ (80056b8 <SYSVIEW_AddTask+0xc4>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	4910      	ldr	r1, [pc, #64]	@ (80056c0 <SYSVIEW_AddTask+0xcc>)
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	440b      	add	r3, r1
 8005688:	3310      	adds	r3, #16
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800568e:	4b0a      	ldr	r3, [pc, #40]	@ (80056b8 <SYSVIEW_AddTask+0xc4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3301      	adds	r3, #1
 8005694:	4a08      	ldr	r2, [pc, #32]	@ (80056b8 <SYSVIEW_AddTask+0xc4>)
 8005696:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 f80e 	bl	80056c4 <SYSVIEW_SendTaskInfo>
 80056a8:	e000      	b.n	80056ac <SYSVIEW_AddTask+0xb8>
    return;
 80056aa:	bf00      	nop

}
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	08007e78 	.word	0x08007e78
 80056b8:	2000bae0 	.word	0x2000bae0
 80056bc:	08007e80 	.word	0x08007e80
 80056c0:	2000ba40 	.word	0x2000ba40

080056c4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08a      	sub	sp, #40	@ 0x28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80056d2:	f107 0310 	add.w	r3, r7, #16
 80056d6:	2218      	movs	r2, #24
 80056d8:	2100      	movs	r1, #0
 80056da:	4618      	mov	r0, r3
 80056dc:	f002 fb1a 	bl	8007d14 <memset>
  TaskInfo.TaskID     = TaskID;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80056f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f2:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80056f4:	f107 0310 	add.w	r3, r7, #16
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 fdc9 	bl	8007290 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80056fe:	bf00      	nop
 8005700:	3728      	adds	r7, #40	@ 0x28
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <__NVIC_EnableIRQ>:
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	4603      	mov	r3, r0
 8005710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005716:	2b00      	cmp	r3, #0
 8005718:	db0b      	blt.n	8005732 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800571a:	79fb      	ldrb	r3, [r7, #7]
 800571c:	f003 021f 	and.w	r2, r3, #31
 8005720:	4907      	ldr	r1, [pc, #28]	@ (8005740 <__NVIC_EnableIRQ+0x38>)
 8005722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	2001      	movs	r0, #1
 800572a:	fa00 f202 	lsl.w	r2, r0, r2
 800572e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	e000e100 	.word	0xe000e100

08005744 <__NVIC_SetPriority>:
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	4603      	mov	r3, r0
 800574c:	6039      	str	r1, [r7, #0]
 800574e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005754:	2b00      	cmp	r3, #0
 8005756:	db0a      	blt.n	800576e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	b2da      	uxtb	r2, r3
 800575c:	490c      	ldr	r1, [pc, #48]	@ (8005790 <__NVIC_SetPriority+0x4c>)
 800575e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005762:	0112      	lsls	r2, r2, #4
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	440b      	add	r3, r1
 8005768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800576c:	e00a      	b.n	8005784 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	b2da      	uxtb	r2, r3
 8005772:	4908      	ldr	r1, [pc, #32]	@ (8005794 <__NVIC_SetPriority+0x50>)
 8005774:	79fb      	ldrb	r3, [r7, #7]
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	3b04      	subs	r3, #4
 800577c:	0112      	lsls	r2, r2, #4
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	440b      	add	r3, r1
 8005782:	761a      	strb	r2, [r3, #24]
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	e000e100 	.word	0xe000e100
 8005794:	e000ed00 	.word	0xe000ed00

08005798 <_StartSysView>:

} _SVInfo = {0,0,1};



static void _StartSysView(void) {
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0

  int r;



  r = SEGGER_SYSVIEW_IsStarted();
 800579e:	f002 fa7b 	bl	8007c98 <SEGGER_SYSVIEW_IsStarted>
 80057a2:	6078      	str	r0, [r7, #4]

  if (r == 0) {
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <_StartSysView+0x16>

    SEGGER_SYSVIEW_Start();
 80057aa:	f001 fbf7 	bl	8006f9c <SEGGER_SYSVIEW_Start>

  }

}
 80057ae:	bf00      	nop
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <_cbOnUARTRx>:



static void _cbOnUARTRx(U8 Data) {
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	4603      	mov	r3, r0
 80057c0:	71fb      	strb	r3, [r7, #7]

  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80057c2:	4b0c      	ldr	r3, [pc, #48]	@ (80057f4 <_cbOnUARTRx+0x3c>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d806      	bhi.n	80057d8 <_cbOnUARTRx+0x20>

    _SVInfo.NumBytesHelloRcvd++;
 80057ca:	4b0a      	ldr	r3, [pc, #40]	@ (80057f4 <_cbOnUARTRx+0x3c>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	3301      	adds	r3, #1
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	4b08      	ldr	r3, [pc, #32]	@ (80057f4 <_cbOnUARTRx+0x3c>)
 80057d4:	701a      	strb	r2, [r3, #0]

    goto Done;
 80057d6:	e009      	b.n	80057ec <_cbOnUARTRx+0x34>

  }

  _StartSysView();
 80057d8:	f7ff ffde 	bl	8005798 <_StartSysView>

  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80057dc:	4b05      	ldr	r3, [pc, #20]	@ (80057f4 <_cbOnUARTRx+0x3c>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	4618      	mov	r0, r3
 80057e2:	1dfb      	adds	r3, r7, #7
 80057e4:	2201      	movs	r2, #1
 80057e6:	4619      	mov	r1, r3
 80057e8:	f000 fb8e 	bl	8005f08 <SEGGER_RTT_WriteDownBuffer>

Done:

  return;
 80057ec:	bf00      	nop

}
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	20000014 	.word	0x20000014

080057f8 <_cbOnUARTTx>:



static int _cbOnUARTTx(U8* pChar) {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]

  int r;



  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005800:	4b14      	ldr	r3, [pc, #80]	@ (8005854 <_cbOnUARTTx+0x5c>)
 8005802:	785b      	ldrb	r3, [r3, #1]
 8005804:	2b03      	cmp	r3, #3
 8005806:	d80f      	bhi.n	8005828 <_cbOnUARTTx+0x30>

    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005808:	4b12      	ldr	r3, [pc, #72]	@ (8005854 <_cbOnUARTTx+0x5c>)
 800580a:	785b      	ldrb	r3, [r3, #1]
 800580c:	461a      	mov	r2, r3
 800580e:	4b12      	ldr	r3, [pc, #72]	@ (8005858 <_cbOnUARTTx+0x60>)
 8005810:	5c9a      	ldrb	r2, [r3, r2]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	701a      	strb	r2, [r3, #0]

    _SVInfo.NumBytesHelloSent++;
 8005816:	4b0f      	ldr	r3, [pc, #60]	@ (8005854 <_cbOnUARTTx+0x5c>)
 8005818:	785b      	ldrb	r3, [r3, #1]
 800581a:	3301      	adds	r3, #1
 800581c:	b2da      	uxtb	r2, r3
 800581e:	4b0d      	ldr	r3, [pc, #52]	@ (8005854 <_cbOnUARTTx+0x5c>)
 8005820:	705a      	strb	r2, [r3, #1]

    r = 1;
 8005822:	2301      	movs	r3, #1
 8005824:	60fb      	str	r3, [r7, #12]

    goto Done;
 8005826:	e00f      	b.n	8005848 <_cbOnUARTTx+0x50>

  }

  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005828:	4b0a      	ldr	r3, [pc, #40]	@ (8005854 <_cbOnUARTTx+0x5c>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	4618      	mov	r0, r3
 8005832:	f000 fa0d 	bl	8005c50 <SEGGER_RTT_ReadUpBufferNoLock>
 8005836:	4603      	mov	r3, r0
 8005838:	60fb      	str	r3, [r7, #12]

  if (r < 0) {  // Failed to read from up buffer?
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	da02      	bge.n	8005846 <_cbOnUARTTx+0x4e>

    r = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	e000      	b.n	8005848 <_cbOnUARTTx+0x50>

  }

Done:
 8005846:	bf00      	nop

  return r;
 8005848:	68fb      	ldr	r3, [r7, #12]

}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	20000014 	.word	0x20000014
 8005858:	08007f0c 	.word	0x08007f0c

0800585c <SEGGER_UART_init>:



void SEGGER_UART_init(U32 baud)

{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]

HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005864:	4a04      	ldr	r2, [pc, #16]	@ (8005878 <SEGGER_UART_init+0x1c>)
 8005866:	4905      	ldr	r1, [pc, #20]	@ (800587c <SEGGER_UART_init+0x20>)
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f855 	bl	8005918 <HIF_UART_Init>

}
 800586e:	bf00      	nop
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	080057b9 	.word	0x080057b9
 800587c:	080057f9 	.word	0x080057f9

08005880 <USART3_IRQHandler>:

*/

void USART3_IRQHandler(void);

void USART3_IRQHandler(void) {
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0

  int r;



  UsartStatus = USART_SR;                              // Examine status register
 8005886:	4b1e      	ldr	r3, [pc, #120]	@ (8005900 <USART3_IRQHandler+0x80>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	60fb      	str	r3, [r7, #12]

  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b00      	cmp	r3, #0
 8005894:	d011      	beq.n	80058ba <USART3_IRQHandler+0x3a>

    v = USART_RDR;                                      // Read data
 8005896:	4b1b      	ldr	r3, [pc, #108]	@ (8005904 <USART3_IRQHandler+0x84>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	71fb      	strb	r3, [r7, #7]

    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f003 030b 	and.w	r3, r3, #11
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d108      	bne.n	80058ba <USART3_IRQHandler+0x3a>

      (void)v;                                         // Avoid warning in BTL

      if (_cbOnRx) {
 80058a8:	4b17      	ldr	r3, [pc, #92]	@ (8005908 <USART3_IRQHandler+0x88>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d004      	beq.n	80058ba <USART3_IRQHandler+0x3a>

        _cbOnRx(v);
 80058b0:	4b15      	ldr	r3, [pc, #84]	@ (8005908 <USART3_IRQHandler+0x88>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	79fa      	ldrb	r2, [r7, #7]
 80058b6:	4610      	mov	r0, r2
 80058b8:	4798      	blx	r3

    }

  }

  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d01a      	beq.n	80058fa <USART3_IRQHandler+0x7a>

    // Therefore, we need to check if the function pointer is valid.

    //

    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80058c4:	4b11      	ldr	r3, [pc, #68]	@ (800590c <USART3_IRQHandler+0x8c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d015      	beq.n	80058f8 <USART3_IRQHandler+0x78>

      return;

    }

    r = _cbOnTx(&v);
 80058cc:	4b0f      	ldr	r3, [pc, #60]	@ (800590c <USART3_IRQHandler+0x8c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	1dfa      	adds	r2, r7, #7
 80058d2:	4610      	mov	r0, r2
 80058d4:	4798      	blx	r3
 80058d6:	60b8      	str	r0, [r7, #8]

    if (r == 0) {                          // No more characters to send ?
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <USART3_IRQHandler+0x6c>

      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80058de:	4b0c      	ldr	r3, [pc, #48]	@ (8005910 <USART3_IRQHandler+0x90>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a0b      	ldr	r2, [pc, #44]	@ (8005910 <USART3_IRQHandler+0x90>)
 80058e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	e006      	b.n	80058fa <USART3_IRQHandler+0x7a>

    } else {

      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80058ec:	4b04      	ldr	r3, [pc, #16]	@ (8005900 <USART3_IRQHandler+0x80>)
 80058ee:	681b      	ldr	r3, [r3, #0]

      USART_TDR = v;  // Start transmission by writing to data register
 80058f0:	79fa      	ldrb	r2, [r7, #7]
 80058f2:	4b08      	ldr	r3, [pc, #32]	@ (8005914 <USART3_IRQHandler+0x94>)
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	e000      	b.n	80058fa <USART3_IRQHandler+0x7a>
      return;
 80058f8:	bf00      	nop

    }

  }

}
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	4000481c 	.word	0x4000481c
 8005904:	40004824 	.word	0x40004824
 8005908:	2000bae4 	.word	0x2000bae4
 800590c:	2000bae8 	.word	0x2000bae8
 8005910:	40004800 	.word	0x40004800
 8005914:	40004828 	.word	0x40004828

08005918 <HIF_UART_Init>:

*       HIF_UART_Init()

*/

void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]

  //

  // Habilitar reloj de USART3 y puerto D

  RCC_APB1ENR |= (1 << 18);       // Habilitar reloj USART3 (APB1)
 8005924:	4b2e      	ldr	r3, [pc, #184]	@ (80059e0 <HIF_UART_Init+0xc8>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a2d      	ldr	r2, [pc, #180]	@ (80059e0 <HIF_UART_Init+0xc8>)
 800592a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800592e:	6013      	str	r3, [r2, #0]

  RCC_AHB1ENR |= (1 << 3);        // Habilitar reloj GPIO D
 8005930:	4b2c      	ldr	r3, [pc, #176]	@ (80059e4 <HIF_UART_Init+0xcc>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a2b      	ldr	r2, [pc, #172]	@ (80059e4 <HIF_UART_Init+0xcc>)
 8005936:	f043 0308 	orr.w	r3, r3, #8
 800593a:	6013      	str	r3, [r2, #0]



  // Configurar los pines PD8 y PD9 para función alternativa AF7 (USART3)

  v  = GPIO_AFRH;
 800593c:	4b2a      	ldr	r3, [pc, #168]	@ (80059e8 <HIF_UART_Init+0xd0>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	613b      	str	r3, [r7, #16]

  v &= ~((15UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (15UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005948:	613b      	str	r3, [r7, #16]

  v |=  ((7UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (7UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005950:	613b      	str	r3, [r7, #16]

  GPIO_AFRH = v;
 8005952:	4a25      	ldr	r2, [pc, #148]	@ (80059e8 <HIF_UART_Init+0xd0>)
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	6013      	str	r3, [r2, #0]

  // Configure USART RX/TX pins for alternate function usage

  //

  v  = GPIO_MODER;
 8005958:	4b24      	ldr	r3, [pc, #144]	@ (80059ec <HIF_UART_Init+0xd4>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	613b      	str	r3, [r7, #16]

  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8005964:	613b      	str	r3, [r7, #16]

  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 800596c:	613b      	str	r3, [r7, #16]

  GPIO_MODER = v;
 800596e:	4a1f      	ldr	r2, [pc, #124]	@ (80059ec <HIF_UART_Init+0xd4>)
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	6013      	str	r3, [r2, #0]

  // Set baudrate

  //

  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	617b      	str	r3, [r7, #20]

  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800597a:	4a1d      	ldr	r2, [pc, #116]	@ (80059f0 <HIF_UART_Init+0xd8>)
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005982:	3301      	adds	r3, #1
 8005984:	617b      	str	r3, [r7, #20]

  Div = Div / 2;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	085b      	lsrs	r3, r3, #1
 800598a:	617b      	str	r3, [r7, #20]

  if (Div > 0xFFF) {
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005992:	d302      	bcc.n	800599a <HIF_UART_Init+0x82>

    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005994:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005998:	617b      	str	r3, [r7, #20]

  }

  if (Div >= 1) {
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d004      	beq.n	80059aa <HIF_UART_Init+0x92>

    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	4a13      	ldr	r2, [pc, #76]	@ (80059f4 <HIF_UART_Init+0xdc>)
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	6013      	str	r3, [r2, #0]

  // Initialize USART

  //

  USART_CR1 = 0
 80059aa:	4b13      	ldr	r3, [pc, #76]	@ (80059f8 <HIF_UART_Init+0xe0>)
 80059ac:	f248 022d 	movw	r2, #32813	@ 0x802d
 80059b0:	601a      	str	r2, [r3, #0]

            | (1 <<  2)                         // RE     = 1; Receiver enabled

            ;

  USART_CR2 = 0
 80059b2:	4b12      	ldr	r3, [pc, #72]	@ (80059fc <HIF_UART_Init+0xe4>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]

            | (0 << 12)                         // STOP = 00b; 1 stop bit

            ;

  USART_CR3 = 0
 80059b8:	4b11      	ldr	r3, [pc, #68]	@ (8005a00 <HIF_UART_Init+0xe8>)
 80059ba:	2280      	movs	r2, #128	@ 0x80
 80059bc:	601a      	str	r2, [r3, #0]

  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC

  //

  _cbOnRx = cbOnRx;
 80059be:	4a11      	ldr	r2, [pc, #68]	@ (8005a04 <HIF_UART_Init+0xec>)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6013      	str	r3, [r2, #0]

  _cbOnTx = cbOnTx;
 80059c4:	4a10      	ldr	r2, [pc, #64]	@ (8005a08 <HIF_UART_Init+0xf0>)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	6013      	str	r3, [r2, #0]

  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80059ca:	2106      	movs	r1, #6
 80059cc:	2027      	movs	r0, #39	@ 0x27
 80059ce:	f7ff feb9 	bl	8005744 <__NVIC_SetPriority>

  NVIC_EnableIRQ(USART_IRQn);
 80059d2:	2027      	movs	r0, #39	@ 0x27
 80059d4:	f7ff fe98 	bl	8005708 <__NVIC_EnableIRQ>

}
 80059d8:	bf00      	nop
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40023840 	.word	0x40023840
 80059e4:	40023830 	.word	0x40023830
 80059e8:	40020c24 	.word	0x40020c24
 80059ec:	40020c00 	.word	0x40020c00
 80059f0:	0501bd00 	.word	0x0501bd00
 80059f4:	4000480c 	.word	0x4000480c
 80059f8:	40004800 	.word	0x40004800
 80059fc:	40004804 	.word	0x40004804
 8005a00:	40004808 	.word	0x40004808
 8005a04:	2000bae4 	.word	0x2000bae4
 8005a08:	2000bae8 	.word	0x2000bae8

08005a0c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005a12:	4b26      	ldr	r3, [pc, #152]	@ (8005aac <_DoInit+0xa0>)
 8005a14:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005a16:	22a8      	movs	r2, #168	@ 0xa8
 8005a18:	2100      	movs	r1, #0
 8005a1a:	6838      	ldr	r0, [r7, #0]
 8005a1c:	f002 f97a 	bl	8007d14 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2203      	movs	r2, #3
 8005a24:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2203      	movs	r2, #3
 8005a2a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	4a20      	ldr	r2, [pc, #128]	@ (8005ab0 <_DoInit+0xa4>)
 8005a30:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	4a1f      	ldr	r2, [pc, #124]	@ (8005ab4 <_DoInit+0xa8>)
 8005a36:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a3e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	2200      	movs	r2, #0
 8005a44:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	4a16      	ldr	r2, [pc, #88]	@ (8005ab0 <_DoInit+0xa4>)
 8005a56:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	4a17      	ldr	r2, [pc, #92]	@ (8005ab8 <_DoInit+0xac>)
 8005a5c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2210      	movs	r2, #16
 8005a62:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2200      	movs	r2, #0
 8005a68:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2200      	movs	r2, #0
 8005a74:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005a76:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	607b      	str	r3, [r7, #4]
 8005a7e:	e00c      	b.n	8005a9a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f1c3 030f 	rsb	r3, r3, #15
 8005a86:	4a0d      	ldr	r2, [pc, #52]	@ (8005abc <_DoInit+0xb0>)
 8005a88:	5cd1      	ldrb	r1, [r2, r3]
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4413      	add	r3, r2
 8005a90:	460a      	mov	r2, r1
 8005a92:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3301      	adds	r3, #1
 8005a98:	607b      	str	r3, [r7, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b0f      	cmp	r3, #15
 8005a9e:	d9ef      	bls.n	8005a80 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005aa0:	f3bf 8f5f 	dmb	sy
}
 8005aa4:	bf00      	nop
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	2000baec 	.word	0x2000baec
 8005ab0:	08007ed0 	.word	0x08007ed0
 8005ab4:	2000bb94 	.word	0x2000bb94
 8005ab8:	2000bf94 	.word	0x2000bf94
 8005abc:	08007f10 	.word	0x08007f10

08005ac0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b08a      	sub	sp, #40	@ 0x28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005acc:	2300      	movs	r3, #0
 8005ace:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d905      	bls.n	8005af0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aee:	e007      	b.n	8005b00 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	69b9      	ldr	r1, [r7, #24]
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	1acb      	subs	r3, r1, r3
 8005afa:	4413      	add	r3, r2
 8005afc:	3b01      	subs	r3, #1
 8005afe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	bf28      	it	cs
 8005b0e:	4613      	movcs	r3, r2
 8005b10:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4293      	cmp	r3, r2
 8005b18:	bf28      	it	cs
 8005b1a:	4613      	movcs	r3, r2
 8005b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	4413      	add	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	6978      	ldr	r0, [r7, #20]
 8005b2e:	f002 f91d 	bl	8007d6c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005b32:	6a3a      	ldr	r2, [r7, #32]
 8005b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b36:	4413      	add	r3, r2
 8005b38:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	4413      	add	r3, r2
 8005b40:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4e:	4413      	add	r3, r2
 8005b50:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	69fa      	ldr	r2, [r7, #28]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d101      	bne.n	8005b60 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b60:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1b2      	bne.n	8005ad6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005b70:	6a3b      	ldr	r3, [r7, #32]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3728      	adds	r7, #40	@ 0x28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b088      	sub	sp, #32
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d911      	bls.n	8005bc2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	68b9      	ldr	r1, [r7, #8]
 8005bac:	6938      	ldr	r0, [r7, #16]
 8005bae:	f002 f8dd 	bl	8007d6c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005bb2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	441a      	add	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005bc0:	e01f      	b.n	8005c02 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	4413      	add	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	6938      	ldr	r0, [r7, #16]
 8005bd6:	f002 f8c9 	bl	8007d6c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	4413      	add	r3, r2
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	6938      	ldr	r0, [r7, #16]
 8005bf4:	f002 f8ba 	bl	8007d6c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005bf8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	60da      	str	r2, [r3, #12]
}
 8005c02:	bf00      	nop
 8005c04:	3720      	adds	r7, #32
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005c0a:	b480      	push	{r7}
 8005c0c:	b087      	sub	sp, #28
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d808      	bhi.n	8005c38 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	1ad2      	subs	r2, r2, r3
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4413      	add	r3, r2
 8005c32:	3b01      	subs	r3, #1
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	e004      	b.n	8005c42 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005c42:	697b      	ldr	r3, [r7, #20]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08c      	sub	sp, #48	@ 0x30
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005c5c:	4b3e      	ldr	r3, [pc, #248]	@ (8005d58 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005c5e:	623b      	str	r3, [r7, #32]
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b53      	cmp	r3, #83	@ 0x53
 8005c68:	d001      	beq.n	8005c6e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005c6a:	f7ff fecf 	bl	8005a0c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	4613      	mov	r3, r2
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	4413      	add	r3, r2
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	4a37      	ldr	r2, [pc, #220]	@ (8005d58 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005c7c:	4413      	add	r3, r2
 8005c7e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005c90:	2300      	movs	r3, #0
 8005c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005c94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d92b      	bls.n	8005cf4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4293      	cmp	r3, r2
 8005cac:	bf28      	it	cs
 8005cae:	4613      	movcs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb8:	4413      	add	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	6939      	ldr	r1, [r7, #16]
 8005cc0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005cc2:	f002 f853 	bl	8007d6c <memcpy>
    NumBytesRead += NumBytesRem;
 8005cc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	4413      	add	r3, r2
 8005ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005cde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d101      	bne.n	8005cf4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4293      	cmp	r3, r2
 8005d02:	bf28      	it	cs
 8005d04:	4613      	movcs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d019      	beq.n	8005d42 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d14:	4413      	add	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	6939      	ldr	r1, [r7, #16]
 8005d1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d1e:	f002 f825 	bl	8007d6c <memcpy>
    NumBytesRead += NumBytesRem;
 8005d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	4413      	add	r3, r2
 8005d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	4413      	add	r3, r2
 8005d30:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005d3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	4413      	add	r3, r2
 8005d40:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d4c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3730      	adds	r7, #48	@ 0x30
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	2000baec 	.word	0x2000baec

08005d5c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08c      	sub	sp, #48	@ 0x30
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005d68:	4b3e      	ldr	r3, [pc, #248]	@ (8005e64 <SEGGER_RTT_ReadNoLock+0x108>)
 8005d6a:	623b      	str	r3, [r7, #32]
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b53      	cmp	r3, #83	@ 0x53
 8005d74:	d001      	beq.n	8005d7a <SEGGER_RTT_ReadNoLock+0x1e>
 8005d76:	f7ff fe49 	bl	8005a0c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	4413      	add	r3, r2
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	3360      	adds	r3, #96	@ 0x60
 8005d86:	4a37      	ldr	r2, [pc, #220]	@ (8005e64 <SEGGER_RTT_ReadNoLock+0x108>)
 8005d88:	4413      	add	r3, r2
 8005d8a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005da0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d92b      	bls.n	8005e00 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4293      	cmp	r3, r2
 8005db8:	bf28      	it	cs
 8005dba:	4613      	movcs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc4:	4413      	add	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	6939      	ldr	r1, [r7, #16]
 8005dcc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005dce:	f001 ffcd 	bl	8007d6c <memcpy>
    NumBytesRead += NumBytesRem;
 8005dd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	4413      	add	r3, r2
 8005de0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005dea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	4413      	add	r3, r2
 8005df0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d101      	bne.n	8005e00 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	bf28      	it	cs
 8005e10:	4613      	movcs	r3, r2
 8005e12:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d019      	beq.n	8005e4e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e20:	4413      	add	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	6939      	ldr	r1, [r7, #16]
 8005e28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e2a:	f001 ff9f 	bl	8007d6c <memcpy>
    NumBytesRead += NumBytesRem;
 8005e2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	4413      	add	r3, r2
 8005e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005e46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e58:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3730      	adds	r7, #48	@ 0x30
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	2000baec 	.word	0x2000baec

08005e68 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b088      	sub	sp, #32
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	4413      	add	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	3360      	adds	r3, #96	@ 0x60
 8005e84:	4a1f      	ldr	r2, [pc, #124]	@ (8005f04 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005e86:	4413      	add	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d029      	beq.n	8005ee6 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d82e      	bhi.n	8005ef4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d013      	beq.n	8005ec6 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005e9e:	e029      	b.n	8005ef4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005ea0:	6978      	ldr	r0, [r7, #20]
 8005ea2:	f7ff feb2 	bl	8005c0a <_GetAvailWriteSpace>
 8005ea6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d202      	bcs.n	8005eb6 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005eb4:	e021      	b.n	8005efa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	69b9      	ldr	r1, [r7, #24]
 8005ebe:	6978      	ldr	r0, [r7, #20]
 8005ec0:	f7ff fe5b 	bl	8005b7a <_WriteNoCheck>
    break;
 8005ec4:	e019      	b.n	8005efa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005ec6:	6978      	ldr	r0, [r7, #20]
 8005ec8:	f7ff fe9f 	bl	8005c0a <_GetAvailWriteSpace>
 8005ecc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	bf28      	it	cs
 8005ed6:	4613      	movcs	r3, r2
 8005ed8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005eda:	69fa      	ldr	r2, [r7, #28]
 8005edc:	69b9      	ldr	r1, [r7, #24]
 8005ede:	6978      	ldr	r0, [r7, #20]
 8005ee0:	f7ff fe4b 	bl	8005b7a <_WriteNoCheck>
    break;
 8005ee4:	e009      	b.n	8005efa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	69b9      	ldr	r1, [r7, #24]
 8005eea:	6978      	ldr	r0, [r7, #20]
 8005eec:	f7ff fde8 	bl	8005ac0 <_WriteBlocking>
 8005ef0:	61f8      	str	r0, [r7, #28]
    break;
 8005ef2:	e002      	b.n	8005efa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	61fb      	str	r3, [r7, #28]
    break;
 8005ef8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005efa:	69fb      	ldr	r3, [r7, #28]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3720      	adds	r7, #32
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	2000baec 	.word	0x2000baec

08005f08 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b088      	sub	sp, #32
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005f14:	4b0e      	ldr	r3, [pc, #56]	@ (8005f50 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005f16:	61fb      	str	r3, [r7, #28]
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b53      	cmp	r3, #83	@ 0x53
 8005f20:	d001      	beq.n	8005f26 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005f22:	f7ff fd73 	bl	8005a0c <_DoInit>
  SEGGER_RTT_LOCK();
 8005f26:	f3ef 8311 	mrs	r3, BASEPRI
 8005f2a:	f04f 0120 	mov.w	r1, #32
 8005f2e:	f381 8811 	msr	BASEPRI, r1
 8005f32:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	68b9      	ldr	r1, [r7, #8]
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f7ff ff95 	bl	8005e68 <SEGGER_RTT_WriteDownBufferNoLock>
 8005f3e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005f46:	697b      	ldr	r3, [r7, #20]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3720      	adds	r7, #32
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	2000baec 	.word	0x2000baec

08005f54 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005f62:	4b3d      	ldr	r3, [pc, #244]	@ (8006058 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005f64:	61bb      	str	r3, [r7, #24]
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b53      	cmp	r3, #83	@ 0x53
 8005f6e:	d001      	beq.n	8005f74 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005f70:	f7ff fd4c 	bl	8005a0c <_DoInit>
  SEGGER_RTT_LOCK();
 8005f74:	f3ef 8311 	mrs	r3, BASEPRI
 8005f78:	f04f 0120 	mov.w	r1, #32
 8005f7c:	f381 8811 	msr	BASEPRI, r1
 8005f80:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005f82:	4b35      	ldr	r3, [pc, #212]	@ (8006058 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005f84:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005f86:	2300      	movs	r3, #0
 8005f88:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005f8a:	6939      	ldr	r1, [r7, #16]
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	4613      	mov	r3, r2
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	4413      	add	r3, r2
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	440b      	add	r3, r1
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d008      	beq.n	8005fb4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	69fa      	ldr	r2, [r7, #28]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	dbeb      	blt.n	8005f8a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005fb2:	e000      	b.n	8005fb6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005fb4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	da3f      	bge.n	8006040 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005fc0:	6939      	ldr	r1, [r7, #16]
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	005b      	lsls	r3, r3, #1
 8005fca:	4413      	add	r3, r2
 8005fcc:	00db      	lsls	r3, r3, #3
 8005fce:	440b      	add	r3, r1
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005fd4:	6939      	ldr	r1, [r7, #16]
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	4613      	mov	r3, r2
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	4413      	add	r3, r2
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	440b      	add	r3, r1
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005fea:	6939      	ldr	r1, [r7, #16]
 8005fec:	69fa      	ldr	r2, [r7, #28]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	4413      	add	r3, r2
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	440b      	add	r3, r1
 8005ff8:	3320      	adds	r3, #32
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005ffe:	6939      	ldr	r1, [r7, #16]
 8006000:	69fa      	ldr	r2, [r7, #28]
 8006002:	4613      	mov	r3, r2
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	4413      	add	r3, r2
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	440b      	add	r3, r1
 800600c:	3328      	adds	r3, #40	@ 0x28
 800600e:	2200      	movs	r2, #0
 8006010:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8006012:	6939      	ldr	r1, [r7, #16]
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	4613      	mov	r3, r2
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	4413      	add	r3, r2
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	440b      	add	r3, r1
 8006020:	3324      	adds	r3, #36	@ 0x24
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006026:	6939      	ldr	r1, [r7, #16]
 8006028:	69fa      	ldr	r2, [r7, #28]
 800602a:	4613      	mov	r3, r2
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	4413      	add	r3, r2
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	440b      	add	r3, r1
 8006034:	332c      	adds	r3, #44	@ 0x2c
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800603a:	f3bf 8f5f 	dmb	sy
 800603e:	e002      	b.n	8006046 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8006040:	f04f 33ff 	mov.w	r3, #4294967295
 8006044:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800604c:	69fb      	ldr	r3, [r7, #28]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3720      	adds	r7, #32
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	2000baec 	.word	0x2000baec

0800605c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800605c:	b580      	push	{r7, lr}
 800605e:	b08a      	sub	sp, #40	@ 0x28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800606a:	4b21      	ldr	r3, [pc, #132]	@ (80060f0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800606c:	623b      	str	r3, [r7, #32]
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b53      	cmp	r3, #83	@ 0x53
 8006076:	d001      	beq.n	800607c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006078:	f7ff fcc8 	bl	8005a0c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800607c:	4b1c      	ldr	r3, [pc, #112]	@ (80060f0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800607e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2b02      	cmp	r3, #2
 8006084:	d82c      	bhi.n	80060e0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8006086:	f3ef 8311 	mrs	r3, BASEPRI
 800608a:	f04f 0120 	mov.w	r1, #32
 800608e:	f381 8811 	msr	BASEPRI, r1
 8006092:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4613      	mov	r3, r2
 8006098:	005b      	lsls	r3, r3, #1
 800609a:	4413      	add	r3, r2
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	3360      	adds	r3, #96	@ 0x60
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	4413      	add	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00e      	beq.n	80060ca <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2200      	movs	r2, #0
 80060c2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2200      	movs	r2, #0
 80060c8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ce:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80060d0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80060da:	2300      	movs	r3, #0
 80060dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80060de:	e002      	b.n	80060e6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80060e0:	f04f 33ff 	mov.w	r3, #4294967295
 80060e4:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80060e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3728      	adds	r7, #40	@ 0x28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	2000baec 	.word	0x2000baec

080060f4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	60fa      	str	r2, [r7, #12]
 800610a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b80      	cmp	r3, #128	@ 0x80
 8006110:	d90a      	bls.n	8006128 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8006112:	2380      	movs	r3, #128	@ 0x80
 8006114:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8006116:	e007      	b.n	8006128 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	1c53      	adds	r3, r2, #1
 800611c:	60bb      	str	r3, [r7, #8]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	1c59      	adds	r1, r3, #1
 8006122:	60f9      	str	r1, [r7, #12]
 8006124:	7812      	ldrb	r2, [r2, #0]
 8006126:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	1e5a      	subs	r2, r3, #1
 800612c:	607a      	str	r2, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <_EncodeStr+0x46>
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1ee      	bne.n	8006118 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	b2da      	uxtb	r2, r3
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8006146:	68fb      	ldr	r3, [r7, #12]
}
 8006148:	4618      	mov	r0, r3
 800614a:	371c      	adds	r7, #28
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3307      	adds	r3, #7
}
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006172:	4b34      	ldr	r3, [pc, #208]	@ (8006244 <_HandleIncomingPacket+0xd8>)
 8006174:	7e1b      	ldrb	r3, [r3, #24]
 8006176:	4618      	mov	r0, r3
 8006178:	1cfb      	adds	r3, r7, #3
 800617a:	2201      	movs	r2, #1
 800617c:	4619      	mov	r1, r3
 800617e:	f7ff fded 	bl	8005d5c <SEGGER_RTT_ReadNoLock>
 8006182:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d057      	beq.n	800623a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800618a:	78fb      	ldrb	r3, [r7, #3]
 800618c:	2b80      	cmp	r3, #128	@ 0x80
 800618e:	d031      	beq.n	80061f4 <_HandleIncomingPacket+0x88>
 8006190:	2b80      	cmp	r3, #128	@ 0x80
 8006192:	dc40      	bgt.n	8006216 <_HandleIncomingPacket+0xaa>
 8006194:	2b07      	cmp	r3, #7
 8006196:	dc15      	bgt.n	80061c4 <_HandleIncomingPacket+0x58>
 8006198:	2b00      	cmp	r3, #0
 800619a:	dd3c      	ble.n	8006216 <_HandleIncomingPacket+0xaa>
 800619c:	3b01      	subs	r3, #1
 800619e:	2b06      	cmp	r3, #6
 80061a0:	d839      	bhi.n	8006216 <_HandleIncomingPacket+0xaa>
 80061a2:	a201      	add	r2, pc, #4	@ (adr r2, 80061a8 <_HandleIncomingPacket+0x3c>)
 80061a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a8:	080061cb 	.word	0x080061cb
 80061ac:	080061d1 	.word	0x080061d1
 80061b0:	080061d7 	.word	0x080061d7
 80061b4:	080061dd 	.word	0x080061dd
 80061b8:	080061e3 	.word	0x080061e3
 80061bc:	080061e9 	.word	0x080061e9
 80061c0:	080061ef 	.word	0x080061ef
 80061c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80061c6:	d033      	beq.n	8006230 <_HandleIncomingPacket+0xc4>
 80061c8:	e025      	b.n	8006216 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80061ca:	f000 fee7 	bl	8006f9c <SEGGER_SYSVIEW_Start>
      break;
 80061ce:	e034      	b.n	800623a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80061d0:	f000 ff9e 	bl	8007110 <SEGGER_SYSVIEW_Stop>
      break;
 80061d4:	e031      	b.n	800623a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80061d6:	f001 f977 	bl	80074c8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80061da:	e02e      	b.n	800623a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80061dc:	f001 f93c 	bl	8007458 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80061e0:	e02b      	b.n	800623a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80061e2:	f000 ffbb 	bl	800715c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80061e6:	e028      	b.n	800623a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80061e8:	f001 fca8 	bl	8007b3c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80061ec:	e025      	b.n	800623a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80061ee:	f001 fc87 	bl	8007b00 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80061f2:	e022      	b.n	800623a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80061f4:	4b13      	ldr	r3, [pc, #76]	@ (8006244 <_HandleIncomingPacket+0xd8>)
 80061f6:	7e1b      	ldrb	r3, [r3, #24]
 80061f8:	4618      	mov	r0, r3
 80061fa:	1cfb      	adds	r3, r7, #3
 80061fc:	2201      	movs	r2, #1
 80061fe:	4619      	mov	r1, r3
 8006200:	f7ff fdac 	bl	8005d5c <SEGGER_RTT_ReadNoLock>
 8006204:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d013      	beq.n	8006234 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	4618      	mov	r0, r3
 8006210:	f001 fbec 	bl	80079ec <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006214:	e00e      	b.n	8006234 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006216:	78fb      	ldrb	r3, [r7, #3]
 8006218:	b25b      	sxtb	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	da0c      	bge.n	8006238 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800621e:	4b09      	ldr	r3, [pc, #36]	@ (8006244 <_HandleIncomingPacket+0xd8>)
 8006220:	7e1b      	ldrb	r3, [r3, #24]
 8006222:	4618      	mov	r0, r3
 8006224:	1cfb      	adds	r3, r7, #3
 8006226:	2201      	movs	r2, #1
 8006228:	4619      	mov	r1, r3
 800622a:	f7ff fd97 	bl	8005d5c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800622e:	e003      	b.n	8006238 <_HandleIncomingPacket+0xcc>
      break;
 8006230:	bf00      	nop
 8006232:	e002      	b.n	800623a <_HandleIncomingPacket+0xce>
      break;
 8006234:	bf00      	nop
 8006236:	e000      	b.n	800623a <_HandleIncomingPacket+0xce>
      break;
 8006238:	bf00      	nop
    }
  }
}
 800623a:	bf00      	nop
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	2000c3ac 	.word	0x2000c3ac

08006248 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006248:	b580      	push	{r7, lr}
 800624a:	b08c      	sub	sp, #48	@ 0x30
 800624c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800624e:	2301      	movs	r3, #1
 8006250:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006252:	1d3b      	adds	r3, r7, #4
 8006254:	3301      	adds	r3, #1
 8006256:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800625c:	4b31      	ldr	r3, [pc, #196]	@ (8006324 <_TrySendOverflowPacket+0xdc>)
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006262:	e00b      	b.n	800627c <_TrySendOverflowPacket+0x34>
 8006264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006266:	b2da      	uxtb	r2, r3
 8006268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800626a:	1c59      	adds	r1, r3, #1
 800626c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800626e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006278:	09db      	lsrs	r3, r3, #7
 800627a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800627c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006280:	d8f0      	bhi.n	8006264 <_TrySendOverflowPacket+0x1c>
 8006282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006288:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800628a:	b2d2      	uxtb	r2, r2
 800628c:	701a      	strb	r2, [r3, #0]
 800628e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006290:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006292:	4b25      	ldr	r3, [pc, #148]	@ (8006328 <_TrySendOverflowPacket+0xe0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006298:	4b22      	ldr	r3, [pc, #136]	@ (8006324 <_TrySendOverflowPacket+0xdc>)
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	623b      	str	r3, [r7, #32]
 80062aa:	e00b      	b.n	80062c4 <_TrySendOverflowPacket+0x7c>
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b2:	1c59      	adds	r1, r3, #1
 80062b4:	6279      	str	r1, [r7, #36]	@ 0x24
 80062b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	09db      	lsrs	r3, r3, #7
 80062c2:	623b      	str	r3, [r7, #32]
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80062c8:	d8f0      	bhi.n	80062ac <_TrySendOverflowPacket+0x64>
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80062d0:	6a3a      	ldr	r2, [r7, #32]
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80062da:	4b12      	ldr	r3, [pc, #72]	@ (8006324 <_TrySendOverflowPacket+0xdc>)
 80062dc:	785b      	ldrb	r3, [r3, #1]
 80062de:	4618      	mov	r0, r3
 80062e0:	1d3b      	adds	r3, r7, #4
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	461a      	mov	r2, r3
 80062e8:	1d3b      	adds	r3, r7, #4
 80062ea:	4619      	mov	r1, r3
 80062ec:	f7f9 ffa8 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80062f0:	4603      	mov	r3, r0
 80062f2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80062fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006324 <_TrySendOverflowPacket+0xdc>)
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006300:	4b08      	ldr	r3, [pc, #32]	@ (8006324 <_TrySendOverflowPacket+0xdc>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	3b01      	subs	r3, #1
 8006306:	b2da      	uxtb	r2, r3
 8006308:	4b06      	ldr	r3, [pc, #24]	@ (8006324 <_TrySendOverflowPacket+0xdc>)
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	e004      	b.n	8006318 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800630e:	4b05      	ldr	r3, [pc, #20]	@ (8006324 <_TrySendOverflowPacket+0xdc>)
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	3301      	adds	r3, #1
 8006314:	4a03      	ldr	r2, [pc, #12]	@ (8006324 <_TrySendOverflowPacket+0xdc>)
 8006316:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006318:	693b      	ldr	r3, [r7, #16]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3730      	adds	r7, #48	@ 0x30
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	2000c3ac 	.word	0x2000c3ac
 8006328:	e0001004 	.word	0xe0001004

0800632c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800632c:	b580      	push	{r7, lr}
 800632e:	b08a      	sub	sp, #40	@ 0x28
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006338:	4b98      	ldr	r3, [pc, #608]	@ (800659c <_SendPacket+0x270>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d010      	beq.n	8006362 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006340:	4b96      	ldr	r3, [pc, #600]	@ (800659c <_SendPacket+0x270>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 812d 	beq.w	80065a4 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800634a:	4b94      	ldr	r3, [pc, #592]	@ (800659c <_SendPacket+0x270>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d109      	bne.n	8006366 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006352:	f7ff ff79 	bl	8006248 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006356:	4b91      	ldr	r3, [pc, #580]	@ (800659c <_SendPacket+0x270>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b01      	cmp	r3, #1
 800635c:	f040 8124 	bne.w	80065a8 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8006360:	e001      	b.n	8006366 <_SendPacket+0x3a>
    goto Send;
 8006362:	bf00      	nop
 8006364:	e000      	b.n	8006368 <_SendPacket+0x3c>
Send:
 8006366:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b1f      	cmp	r3, #31
 800636c:	d809      	bhi.n	8006382 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800636e:	4b8b      	ldr	r3, [pc, #556]	@ (800659c <_SendPacket+0x270>)
 8006370:	69da      	ldr	r2, [r3, #28]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	fa22 f303 	lsr.w	r3, r2, r3
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	2b00      	cmp	r3, #0
 800637e:	f040 8115 	bne.w	80065ac <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b17      	cmp	r3, #23
 8006386:	d807      	bhi.n	8006398 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3b01      	subs	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	b2da      	uxtb	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	e0c4      	b.n	8006522 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80063a4:	d912      	bls.n	80063cc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	09da      	lsrs	r2, r3, #7
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3b01      	subs	r3, #1
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	b2d2      	uxtb	r2, r2
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	3a01      	subs	r2, #1
 80063be:	60fa      	str	r2, [r7, #12]
 80063c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	e006      	b.n	80063da <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b7e      	cmp	r3, #126	@ 0x7e
 80063de:	d807      	bhi.n	80063f0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	60fb      	str	r3, [r7, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	e098      	b.n	8006522 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063f6:	d212      	bcs.n	800641e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	09da      	lsrs	r2, r3, #7
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3b01      	subs	r3, #1
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	b2db      	uxtb	r3, r3
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	3a01      	subs	r2, #1
 8006410:	60fa      	str	r2, [r7, #12]
 8006412:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006416:	b2da      	uxtb	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	701a      	strb	r2, [r3, #0]
 800641c:	e081      	b.n	8006522 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006424:	d21d      	bcs.n	8006462 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	0b9a      	lsrs	r2, r3, #14
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3b01      	subs	r3, #1
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	b2d2      	uxtb	r2, r2
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	09db      	lsrs	r3, r3, #7
 800643a:	b2db      	uxtb	r3, r3
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	3a01      	subs	r2, #1
 8006440:	60fa      	str	r2, [r7, #12]
 8006442:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006446:	b2da      	uxtb	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	b2db      	uxtb	r3, r3
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	3a01      	subs	r2, #1
 8006454:	60fa      	str	r2, [r7, #12]
 8006456:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800645a:	b2da      	uxtb	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	e05f      	b.n	8006522 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006468:	d228      	bcs.n	80064bc <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	0d5a      	lsrs	r2, r3, #21
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3b01      	subs	r3, #1
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	0b9b      	lsrs	r3, r3, #14
 800647e:	b2db      	uxtb	r3, r3
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	3a01      	subs	r2, #1
 8006484:	60fa      	str	r2, [r7, #12]
 8006486:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800648a:	b2da      	uxtb	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	09db      	lsrs	r3, r3, #7
 8006494:	b2db      	uxtb	r3, r3
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	3a01      	subs	r2, #1
 800649a:	60fa      	str	r2, [r7, #12]
 800649c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	3a01      	subs	r2, #1
 80064ae:	60fa      	str	r2, [r7, #12]
 80064b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	701a      	strb	r2, [r3, #0]
 80064ba:	e032      	b.n	8006522 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	0f1a      	lsrs	r2, r3, #28
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	0d5b      	lsrs	r3, r3, #21
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	3a01      	subs	r2, #1
 80064d6:	60fa      	str	r2, [r7, #12]
 80064d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	0b9b      	lsrs	r3, r3, #14
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	3a01      	subs	r2, #1
 80064ec:	60fa      	str	r2, [r7, #12]
 80064ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	09db      	lsrs	r3, r3, #7
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	3a01      	subs	r2, #1
 8006502:	60fa      	str	r2, [r7, #12]
 8006504:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006508:	b2da      	uxtb	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	b2db      	uxtb	r3, r3
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	3a01      	subs	r2, #1
 8006516:	60fa      	str	r2, [r7, #12]
 8006518:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800651c:	b2da      	uxtb	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006522:	4b1f      	ldr	r3, [pc, #124]	@ (80065a0 <_SendPacket+0x274>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006528:	4b1c      	ldr	r3, [pc, #112]	@ (800659c <_SendPacket+0x270>)
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	627b      	str	r3, [r7, #36]	@ 0x24
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	623b      	str	r3, [r7, #32]
 800653a:	e00b      	b.n	8006554 <_SendPacket+0x228>
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	b2da      	uxtb	r2, r3
 8006540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006542:	1c59      	adds	r1, r3, #1
 8006544:	6279      	str	r1, [r7, #36]	@ 0x24
 8006546:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800654a:	b2d2      	uxtb	r2, r2
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	09db      	lsrs	r3, r3, #7
 8006552:	623b      	str	r3, [r7, #32]
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	2b7f      	cmp	r3, #127	@ 0x7f
 8006558:	d8f0      	bhi.n	800653c <_SendPacket+0x210>
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006560:	6a3a      	ldr	r2, [r7, #32]
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800656a:	4b0c      	ldr	r3, [pc, #48]	@ (800659c <_SendPacket+0x270>)
 800656c:	785b      	ldrb	r3, [r3, #1]
 800656e:	4618      	mov	r0, r3
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	461a      	mov	r2, r3
 8006578:	68f9      	ldr	r1, [r7, #12]
 800657a:	f7f9 fe61 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800657e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006586:	4a05      	ldr	r2, [pc, #20]	@ (800659c <_SendPacket+0x270>)
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	60d3      	str	r3, [r2, #12]
 800658c:	e00f      	b.n	80065ae <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800658e:	4b03      	ldr	r3, [pc, #12]	@ (800659c <_SendPacket+0x270>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	3301      	adds	r3, #1
 8006594:	b2da      	uxtb	r2, r3
 8006596:	4b01      	ldr	r3, [pc, #4]	@ (800659c <_SendPacket+0x270>)
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	e008      	b.n	80065ae <_SendPacket+0x282>
 800659c:	2000c3ac 	.word	0x2000c3ac
 80065a0:	e0001004 	.word	0xe0001004
    goto SendDone;
 80065a4:	bf00      	nop
 80065a6:	e002      	b.n	80065ae <_SendPacket+0x282>
      goto SendDone;
 80065a8:	bf00      	nop
 80065aa:	e000      	b.n	80065ae <_SendPacket+0x282>
      goto SendDone;
 80065ac:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80065ae:	4b14      	ldr	r3, [pc, #80]	@ (8006600 <_SendPacket+0x2d4>)
 80065b0:	7e1b      	ldrb	r3, [r3, #24]
 80065b2:	4619      	mov	r1, r3
 80065b4:	4a13      	ldr	r2, [pc, #76]	@ (8006604 <_SendPacket+0x2d8>)
 80065b6:	460b      	mov	r3, r1
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	440b      	add	r3, r1
 80065bc:	00db      	lsls	r3, r3, #3
 80065be:	4413      	add	r3, r2
 80065c0:	336c      	adds	r3, #108	@ 0x6c
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006600 <_SendPacket+0x2d4>)
 80065c6:	7e1b      	ldrb	r3, [r3, #24]
 80065c8:	4618      	mov	r0, r3
 80065ca:	490e      	ldr	r1, [pc, #56]	@ (8006604 <_SendPacket+0x2d8>)
 80065cc:	4603      	mov	r3, r0
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	4403      	add	r3, r0
 80065d2:	00db      	lsls	r3, r3, #3
 80065d4:	440b      	add	r3, r1
 80065d6:	3370      	adds	r3, #112	@ 0x70
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d00b      	beq.n	80065f6 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80065de:	4b08      	ldr	r3, [pc, #32]	@ (8006600 <_SendPacket+0x2d4>)
 80065e0:	789b      	ldrb	r3, [r3, #2]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d107      	bne.n	80065f6 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80065e6:	4b06      	ldr	r3, [pc, #24]	@ (8006600 <_SendPacket+0x2d4>)
 80065e8:	2201      	movs	r2, #1
 80065ea:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80065ec:	f7ff fdbe 	bl	800616c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80065f0:	4b03      	ldr	r3, [pc, #12]	@ (8006600 <_SendPacket+0x2d4>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80065f6:	bf00      	nop
 80065f8:	3728      	adds	r7, #40	@ 0x28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	2000c3ac 	.word	0x2000c3ac
 8006604:	2000baec 	.word	0x2000baec

08006608 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006608:	b580      	push	{r7, lr}
 800660a:	b08a      	sub	sp, #40	@ 0x28
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	3301      	adds	r3, #1
 800661e:	2b80      	cmp	r3, #128	@ 0x80
 8006620:	d80a      	bhi.n	8006638 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	1c59      	adds	r1, r3, #1
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6051      	str	r1, [r2, #4]
 800662c:	78fa      	ldrb	r2, [r7, #3]
 800662e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	2b80      	cmp	r3, #128	@ 0x80
 800663e:	d15a      	bne.n	80066f6 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	b2d2      	uxtb	r2, r2
 800664a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	627b      	str	r3, [r7, #36]	@ 0x24
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	623b      	str	r3, [r7, #32]
 8006660:	e00b      	b.n	800667a <_StoreChar+0x72>
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	b2da      	uxtb	r2, r3
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	1c59      	adds	r1, r3, #1
 800666a:	6279      	str	r1, [r7, #36]	@ 0x24
 800666c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006670:	b2d2      	uxtb	r2, r2
 8006672:	701a      	strb	r2, [r3, #0]
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	09db      	lsrs	r3, r3, #7
 8006678:	623b      	str	r3, [r7, #32]
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	2b7f      	cmp	r3, #127	@ 0x7f
 800667e:	d8f0      	bhi.n	8006662 <_StoreChar+0x5a>
 8006680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	627a      	str	r2, [r7, #36]	@ 0x24
 8006686:	6a3a      	ldr	r2, [r7, #32]
 8006688:	b2d2      	uxtb	r2, r2
 800668a:	701a      	strb	r2, [r3, #0]
 800668c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	61fb      	str	r3, [r7, #28]
 8006694:	2300      	movs	r3, #0
 8006696:	61bb      	str	r3, [r7, #24]
 8006698:	e00b      	b.n	80066b2 <_StoreChar+0xaa>
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	b2da      	uxtb	r2, r3
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	1c59      	adds	r1, r3, #1
 80066a2:	61f9      	str	r1, [r7, #28]
 80066a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066a8:	b2d2      	uxtb	r2, r2
 80066aa:	701a      	strb	r2, [r3, #0]
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	09db      	lsrs	r3, r3, #7
 80066b0:	61bb      	str	r3, [r7, #24]
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80066b6:	d8f0      	bhi.n	800669a <_StoreChar+0x92>
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	61fa      	str	r2, [r7, #28]
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	b2d2      	uxtb	r2, r2
 80066c2:	701a      	strb	r2, [r3, #0]
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	221a      	movs	r2, #26
 80066ce:	6939      	ldr	r1, [r7, #16]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7ff fe2b 	bl	800632c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4618      	mov	r0, r3
 80066dc:	f7ff fd3a 	bl	8006154 <_PreparePacket>
 80066e0:	4602      	mov	r2, r0
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	611a      	str	r2, [r3, #16]
  }
}
 80066f6:	bf00      	nop
 80066f8:	3728      	adds	r7, #40	@ 0x28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006700:	b580      	push	{r7, lr}
 8006702:	b08a      	sub	sp, #40	@ 0x28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
 800670c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8006712:	2301      	movs	r3, #1
 8006714:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8006716:	2301      	movs	r3, #1
 8006718:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800671a:	e007      	b.n	800672c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800671c:	6a3a      	ldr	r2, [r7, #32]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	fbb2 f3f3 	udiv	r3, r2, r3
 8006724:	623b      	str	r3, [r7, #32]
    Width++;
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	3301      	adds	r3, #1
 800672a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800672c:	6a3a      	ldr	r2, [r7, #32]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	429a      	cmp	r2, r3
 8006732:	d2f3      	bcs.n	800671c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	429a      	cmp	r2, r3
 800673a:	d901      	bls.n	8006740 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d000      	beq.n	800674c <_PrintUnsigned+0x4c>
 800674a:	e01f      	b.n	800678c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 800674c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674e:	2b00      	cmp	r3, #0
 8006750:	d01c      	beq.n	800678c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <_PrintUnsigned+0x68>
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d102      	bne.n	8006768 <_PrintUnsigned+0x68>
        c = '0';
 8006762:	2330      	movs	r3, #48	@ 0x30
 8006764:	76fb      	strb	r3, [r7, #27]
 8006766:	e001      	b.n	800676c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8006768:	2320      	movs	r3, #32
 800676a:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800676c:	e007      	b.n	800677e <_PrintUnsigned+0x7e>
        FieldWidth--;
 800676e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006770:	3b01      	subs	r3, #1
 8006772:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8006774:	7efb      	ldrb	r3, [r7, #27]
 8006776:	4619      	mov	r1, r3
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f7ff ff45 	bl	8006608 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800677e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <_PrintUnsigned+0x8c>
 8006784:	69fa      	ldr	r2, [r7, #28]
 8006786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006788:	429a      	cmp	r2, r3
 800678a:	d3f0      	bcc.n	800676e <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d903      	bls.n	800679a <_PrintUnsigned+0x9a>
      NumDigits--;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	3b01      	subs	r3, #1
 8006796:	603b      	str	r3, [r7, #0]
 8006798:	e009      	b.n	80067ae <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679e:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a2:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d200      	bcs.n	80067ae <_PrintUnsigned+0xae>
        break;
 80067ac:	e005      	b.n	80067ba <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	fb02 f303 	mul.w	r3, r2, r3
 80067b6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80067b8:	e7e8      	b.n	800678c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067be:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c2:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067c8:	fb02 f303 	mul.w	r3, r2, r3
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80067d2:	4a15      	ldr	r2, [pc, #84]	@ (8006828 <_PrintUnsigned+0x128>)
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	4413      	add	r3, r2
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	4619      	mov	r1, r3
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f7ff ff13 	bl	8006608 <_StoreChar>
    Digit /= Base;
 80067e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ea:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80067ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1e3      	bne.n	80067ba <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80067f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d011      	beq.n	8006820 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80067fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00e      	beq.n	8006820 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006802:	e006      	b.n	8006812 <_PrintUnsigned+0x112>
        FieldWidth--;
 8006804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006806:	3b01      	subs	r3, #1
 8006808:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 800680a:	2120      	movs	r1, #32
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f7ff fefb 	bl	8006608 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006814:	2b00      	cmp	r3, #0
 8006816:	d003      	beq.n	8006820 <_PrintUnsigned+0x120>
 8006818:	69fa      	ldr	r2, [r7, #28]
 800681a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681c:	429a      	cmp	r2, r3
 800681e:	d3f1      	bcc.n	8006804 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8006820:	bf00      	nop
 8006822:	3728      	adds	r7, #40	@ 0x28
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	08007f30 	.word	0x08007f30

0800682c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af02      	add	r7, sp, #8
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	bfb8      	it	lt
 8006840:	425b      	neglt	r3, r3
 8006842:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006844:	2301      	movs	r3, #1
 8006846:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006848:	e007      	b.n	800685a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006852:	613b      	str	r3, [r7, #16]
    Width++;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	3301      	adds	r3, #1
 8006858:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	429a      	cmp	r2, r3
 8006860:	daf3      	bge.n	800684a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	429a      	cmp	r2, r3
 8006868:	d901      	bls.n	800686e <_PrintInt+0x42>
    Width = NumDigits;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <_PrintInt+0x5e>
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	db04      	blt.n	8006884 <_PrintInt+0x58>
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <_PrintInt+0x5e>
    FieldWidth--;
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	3b01      	subs	r3, #1
 8006888:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800688a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688c:	f003 0302 	and.w	r3, r3, #2
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <_PrintInt+0x6e>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d016      	beq.n	80068c8 <_PrintInt+0x9c>
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d111      	bne.n	80068c8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00e      	beq.n	80068c8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80068aa:	e006      	b.n	80068ba <_PrintInt+0x8e>
        FieldWidth--;
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80068b2:	2120      	movs	r1, #32
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f7ff fea7 	bl	8006608 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <_PrintInt+0x9c>
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d3f1      	bcc.n	80068ac <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	da07      	bge.n	80068de <_PrintInt+0xb2>
    v = -v;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	425b      	negs	r3, r3
 80068d2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80068d4:	212d      	movs	r1, #45	@ 0x2d
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f7ff fe96 	bl	8006608 <_StoreChar>
 80068dc:	e008      	b.n	80068f0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80068e8:	212b      	movs	r1, #43	@ 0x2b
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f7ff fe8c 	bl	8006608 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80068f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d019      	beq.n	800692e <_PrintInt+0x102>
 80068fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b00      	cmp	r3, #0
 8006902:	d114      	bne.n	800692e <_PrintInt+0x102>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d111      	bne.n	800692e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00e      	beq.n	800692e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006910:	e006      	b.n	8006920 <_PrintInt+0xf4>
        FieldWidth--;
 8006912:	6a3b      	ldr	r3, [r7, #32]
 8006914:	3b01      	subs	r3, #1
 8006916:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006918:	2130      	movs	r1, #48	@ 0x30
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f7ff fe74 	bl	8006608 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006920:	6a3b      	ldr	r3, [r7, #32]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d003      	beq.n	800692e <_PrintInt+0x102>
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	429a      	cmp	r2, r3
 800692c:	d3f1      	bcc.n	8006912 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800692e:	68b9      	ldr	r1, [r7, #8]
 8006930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006932:	9301      	str	r3, [sp, #4]
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f7ff fedf 	bl	8006700 <_PrintUnsigned>
}
 8006942:	bf00      	nop
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800694c:	b580      	push	{r7, lr}
 800694e:	b098      	sub	sp, #96	@ 0x60
 8006950:	af02      	add	r7, sp, #8
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006958:	f3ef 8311 	mrs	r3, BASEPRI
 800695c:	f04f 0120 	mov.w	r1, #32
 8006960:	f381 8811 	msr	BASEPRI, r1
 8006964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006966:	48b7      	ldr	r0, [pc, #732]	@ (8006c44 <_VPrintTarget+0x2f8>)
 8006968:	f7ff fbf4 	bl	8006154 <_PreparePacket>
 800696c:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800696e:	4bb5      	ldr	r3, [pc, #724]	@ (8006c44 <_VPrintTarget+0x2f8>)
 8006970:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8006972:	2300      	movs	r3, #0
 8006974:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006978:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	3301      	adds	r3, #1
 800697e:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	3301      	adds	r3, #1
 8006990:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006992:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 81a8 	beq.w	8006cec <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 800699c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80069a0:	2b25      	cmp	r3, #37	@ 0x25
 80069a2:	f040 8195 	bne.w	8006cd0 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80069a6:	2300      	movs	r3, #0
 80069a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 80069aa:	2301      	movs	r3, #1
 80069ac:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 80069b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80069ba:	3b23      	subs	r3, #35	@ 0x23
 80069bc:	2b0d      	cmp	r3, #13
 80069be:	d83f      	bhi.n	8006a40 <_VPrintTarget+0xf4>
 80069c0:	a201      	add	r2, pc, #4	@ (adr r2, 80069c8 <_VPrintTarget+0x7c>)
 80069c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c6:	bf00      	nop
 80069c8:	08006a31 	.word	0x08006a31
 80069cc:	08006a41 	.word	0x08006a41
 80069d0:	08006a41 	.word	0x08006a41
 80069d4:	08006a41 	.word	0x08006a41
 80069d8:	08006a41 	.word	0x08006a41
 80069dc:	08006a41 	.word	0x08006a41
 80069e0:	08006a41 	.word	0x08006a41
 80069e4:	08006a41 	.word	0x08006a41
 80069e8:	08006a21 	.word	0x08006a21
 80069ec:	08006a41 	.word	0x08006a41
 80069f0:	08006a01 	.word	0x08006a01
 80069f4:	08006a41 	.word	0x08006a41
 80069f8:	08006a41 	.word	0x08006a41
 80069fc:	08006a11 	.word	0x08006a11
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006a00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a02:	f043 0301 	orr.w	r3, r3, #1
 8006a06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	e01a      	b.n	8006a46 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006a10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a12:	f043 0302 	orr.w	r3, r3, #2
 8006a16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	e012      	b.n	8006a46 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006a20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a22:	f043 0304 	orr.w	r3, r3, #4
 8006a26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	e00a      	b.n	8006a46 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006a30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a32:	f043 0308 	orr.w	r3, r3, #8
 8006a36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	60fb      	str	r3, [r7, #12]
 8006a3e:	e002      	b.n	8006a46 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006a40:	2300      	movs	r3, #0
 8006a42:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a44:	bf00      	nop
        }
      } while (v);
 8006a46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1b0      	bne.n	80069ae <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8006a58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a5c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006a5e:	d912      	bls.n	8006a86 <_VPrintTarget+0x13a>
 8006a60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a64:	2b39      	cmp	r3, #57	@ 0x39
 8006a66:	d80e      	bhi.n	8006a86 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006a6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a70:	4613      	mov	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	461a      	mov	r2, r3
 8006a7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a7e:	4413      	add	r3, r2
 8006a80:	3b30      	subs	r3, #48	@ 0x30
 8006a82:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8006a84:	e7e4      	b.n	8006a50 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006a86:	2300      	movs	r3, #0
 8006a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8006a92:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a96:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a98:	d11d      	bne.n	8006ad6 <_VPrintTarget+0x18a>
        sFormat++;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8006aa8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006aac:	2b2f      	cmp	r3, #47	@ 0x2f
 8006aae:	d912      	bls.n	8006ad6 <_VPrintTarget+0x18a>
 8006ab0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ab4:	2b39      	cmp	r3, #57	@ 0x39
 8006ab6:	d80e      	bhi.n	8006ad6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3301      	adds	r3, #1
 8006abc:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006abe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	005b      	lsls	r3, r3, #1
 8006ac8:	461a      	mov	r2, r3
 8006aca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ace:	4413      	add	r3, r2
 8006ad0:	3b30      	subs	r3, #48	@ 0x30
 8006ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8006ad4:	e7e4      	b.n	8006aa0 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006ade:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ae2:	2b6c      	cmp	r3, #108	@ 0x6c
 8006ae4:	d003      	beq.n	8006aee <_VPrintTarget+0x1a2>
 8006ae6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006aea:	2b68      	cmp	r3, #104	@ 0x68
 8006aec:	d107      	bne.n	8006afe <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	3301      	adds	r3, #1
 8006afa:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006afc:	e7ef      	b.n	8006ade <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006afe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b02:	2b25      	cmp	r3, #37	@ 0x25
 8006b04:	f000 80d8 	beq.w	8006cb8 <_VPrintTarget+0x36c>
 8006b08:	2b25      	cmp	r3, #37	@ 0x25
 8006b0a:	f2c0 80dc 	blt.w	8006cc6 <_VPrintTarget+0x37a>
 8006b0e:	2b78      	cmp	r3, #120	@ 0x78
 8006b10:	f300 80d9 	bgt.w	8006cc6 <_VPrintTarget+0x37a>
 8006b14:	2b58      	cmp	r3, #88	@ 0x58
 8006b16:	f2c0 80d6 	blt.w	8006cc6 <_VPrintTarget+0x37a>
 8006b1a:	3b58      	subs	r3, #88	@ 0x58
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	f200 80d2 	bhi.w	8006cc6 <_VPrintTarget+0x37a>
 8006b22:	a201      	add	r2, pc, #4	@ (adr r2, 8006b28 <_VPrintTarget+0x1dc>)
 8006b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b28:	08006c1f 	.word	0x08006c1f
 8006b2c:	08006cc7 	.word	0x08006cc7
 8006b30:	08006cc7 	.word	0x08006cc7
 8006b34:	08006cc7 	.word	0x08006cc7
 8006b38:	08006cc7 	.word	0x08006cc7
 8006b3c:	08006cc7 	.word	0x08006cc7
 8006b40:	08006cc7 	.word	0x08006cc7
 8006b44:	08006cc7 	.word	0x08006cc7
 8006b48:	08006cc7 	.word	0x08006cc7
 8006b4c:	08006cc7 	.word	0x08006cc7
 8006b50:	08006cc7 	.word	0x08006cc7
 8006b54:	08006bad 	.word	0x08006bad
 8006b58:	08006bd3 	.word	0x08006bd3
 8006b5c:	08006cc7 	.word	0x08006cc7
 8006b60:	08006cc7 	.word	0x08006cc7
 8006b64:	08006cc7 	.word	0x08006cc7
 8006b68:	08006cc7 	.word	0x08006cc7
 8006b6c:	08006cc7 	.word	0x08006cc7
 8006b70:	08006cc7 	.word	0x08006cc7
 8006b74:	08006cc7 	.word	0x08006cc7
 8006b78:	08006cc7 	.word	0x08006cc7
 8006b7c:	08006cc7 	.word	0x08006cc7
 8006b80:	08006cc7 	.word	0x08006cc7
 8006b84:	08006cc7 	.word	0x08006cc7
 8006b88:	08006c93 	.word	0x08006c93
 8006b8c:	08006cc7 	.word	0x08006cc7
 8006b90:	08006cc7 	.word	0x08006cc7
 8006b94:	08006c49 	.word	0x08006c49
 8006b98:	08006cc7 	.word	0x08006cc7
 8006b9c:	08006bf9 	.word	0x08006bf9
 8006ba0:	08006cc7 	.word	0x08006cc7
 8006ba4:	08006cc7 	.word	0x08006cc7
 8006ba8:	08006c1f 	.word	0x08006c1f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	1d19      	adds	r1, r3, #4
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	6011      	str	r1, [r2, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8006bba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8006bc0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006bc4:	f107 0310 	add.w	r3, r7, #16
 8006bc8:	4611      	mov	r1, r2
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7ff fd1c 	bl	8006608 <_StoreChar>
        break;
 8006bd0:	e07a      	b.n	8006cc8 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	1d19      	adds	r1, r3, #4
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6011      	str	r1, [r2, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006be0:	f107 0010 	add.w	r0, r7, #16
 8006be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006be6:	9301      	str	r3, [sp, #4]
 8006be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bee:	220a      	movs	r2, #10
 8006bf0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006bf2:	f7ff fe1b 	bl	800682c <_PrintInt>
        break;
 8006bf6:	e067      	b.n	8006cc8 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	1d19      	adds	r1, r3, #4
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	6011      	str	r1, [r2, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006c06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006c08:	f107 0010 	add.w	r0, r7, #16
 8006c0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c0e:	9301      	str	r3, [sp, #4]
 8006c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c16:	220a      	movs	r2, #10
 8006c18:	f7ff fd72 	bl	8006700 <_PrintUnsigned>
        break;
 8006c1c:	e054      	b.n	8006cc8 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	1d19      	adds	r1, r3, #4
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6011      	str	r1, [r2, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006c2c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006c2e:	f107 0010 	add.w	r0, r7, #16
 8006c32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c34:	9301      	str	r3, [sp, #4]
 8006c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c3c:	2210      	movs	r2, #16
 8006c3e:	f7ff fd5f 	bl	8006700 <_PrintUnsigned>
        break;
 8006c42:	e041      	b.n	8006cc8 <_VPrintTarget+0x37c>
 8006c44:	2000c3dc 	.word	0x2000c3dc
      case 's':
        s = va_arg(*pParamList, const char*);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	1d19      	adds	r1, r3, #4
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	6011      	str	r1, [r2, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8006c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <_VPrintTarget+0x314>
          s = "(null)";
 8006c5c:	4b4a      	ldr	r3, [pc, #296]	@ (8006d88 <_VPrintTarget+0x43c>)
 8006c5e:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8006c60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8006c68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8006c6e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00b      	beq.n	8006c8e <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8006c76:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006c7a:	f107 0310 	add.w	r3, r7, #16
 8006c7e:	4611      	mov	r1, r2
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7ff fcc1 	bl	8006608 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c8a:	d9e9      	bls.n	8006c60 <_VPrintTarget+0x314>
        break;
 8006c8c:	e01c      	b.n	8006cc8 <_VPrintTarget+0x37c>
            break;
 8006c8e:	bf00      	nop
        break;
 8006c90:	e01a      	b.n	8006cc8 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	1d19      	adds	r1, r3, #4
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	6011      	str	r1, [r2, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006ca0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ca2:	f107 0010 	add.w	r0, r7, #16
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	9301      	str	r3, [sp, #4]
 8006caa:	2308      	movs	r3, #8
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	2308      	movs	r3, #8
 8006cb0:	2210      	movs	r2, #16
 8006cb2:	f7ff fd25 	bl	8006700 <_PrintUnsigned>
        break;
 8006cb6:	e007      	b.n	8006cc8 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006cb8:	f107 0310 	add.w	r3, r7, #16
 8006cbc:	2125      	movs	r1, #37	@ 0x25
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff fca2 	bl	8006608 <_StoreChar>
        break;
 8006cc4:	e000      	b.n	8006cc8 <_VPrintTarget+0x37c>
      default:
        break;
 8006cc6:	bf00      	nop
      }
      sFormat++;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	e007      	b.n	8006ce0 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006cd0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006cd4:	f107 0310 	add.w	r3, r7, #16
 8006cd8:	4611      	mov	r1, r2
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff fc94 	bl	8006608 <_StoreChar>
    }
  } while (*sFormat);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f47f ae4d 	bne.w	8006984 <_VPrintTarget+0x38>
 8006cea:	e000      	b.n	8006cee <_VPrintTarget+0x3a2>
      break;
 8006cec:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d041      	beq.n	8006d78 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006cf4:	6a3a      	ldr	r2, [r7, #32]
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d04:	e00b      	b.n	8006d1e <_VPrintTarget+0x3d2>
 8006d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d0c:	1c59      	adds	r1, r3, #1
 8006d0e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006d10:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d14:	b2d2      	uxtb	r2, r2
 8006d16:	701a      	strb	r2, [r3, #0]
 8006d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1a:	09db      	lsrs	r3, r3, #7
 8006d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d20:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d22:	d8f0      	bhi.n	8006d06 <_VPrintTarget+0x3ba>
 8006d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d26:	1c5a      	adds	r2, r3, #1
 8006d28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006d2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	701a      	strb	r2, [r3, #0]
 8006d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d32:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d38:	2300      	movs	r3, #0
 8006d3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d3c:	e00b      	b.n	8006d56 <_VPrintTarget+0x40a>
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d44:	1c59      	adds	r1, r3, #1
 8006d46:	6379      	str	r1, [r7, #52]	@ 0x34
 8006d48:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	701a      	strb	r2, [r3, #0]
 8006d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d52:	09db      	lsrs	r3, r3, #7
 8006d54:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d58:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d5a:	d8f0      	bhi.n	8006d3e <_VPrintTarget+0x3f2>
 8006d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	637a      	str	r2, [r7, #52]	@ 0x34
 8006d62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d64:	b2d2      	uxtb	r2, r2
 8006d66:	701a      	strb	r2, [r3, #0]
 8006d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d6a:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	6979      	ldr	r1, [r7, #20]
 8006d70:	221a      	movs	r2, #26
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff fada 	bl	800632c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7a:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006d7e:	bf00      	nop
 8006d80:	3758      	adds	r7, #88	@ 0x58
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	08007edc 	.word	0x08007edc

08006d8c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af02      	add	r7, sp, #8
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
 8006d98:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006da0:	4917      	ldr	r1, [pc, #92]	@ (8006e00 <SEGGER_SYSVIEW_Init+0x74>)
 8006da2:	4818      	ldr	r0, [pc, #96]	@ (8006e04 <SEGGER_SYSVIEW_Init+0x78>)
 8006da4:	f7ff f8d6 	bl	8005f54 <SEGGER_RTT_AllocUpBuffer>
 8006da8:	4603      	mov	r3, r0
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	4b16      	ldr	r3, [pc, #88]	@ (8006e08 <SEGGER_SYSVIEW_Init+0x7c>)
 8006dae:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006db0:	4b15      	ldr	r3, [pc, #84]	@ (8006e08 <SEGGER_SYSVIEW_Init+0x7c>)
 8006db2:	785a      	ldrb	r2, [r3, #1]
 8006db4:	4b14      	ldr	r3, [pc, #80]	@ (8006e08 <SEGGER_SYSVIEW_Init+0x7c>)
 8006db6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006db8:	4b13      	ldr	r3, [pc, #76]	@ (8006e08 <SEGGER_SYSVIEW_Init+0x7c>)
 8006dba:	7e1b      	ldrb	r3, [r3, #24]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	4a11      	ldr	r2, [pc, #68]	@ (8006e0c <SEGGER_SYSVIEW_Init+0x80>)
 8006dc6:	490f      	ldr	r1, [pc, #60]	@ (8006e04 <SEGGER_SYSVIEW_Init+0x78>)
 8006dc8:	f7ff f948 	bl	800605c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8006e08 <SEGGER_SYSVIEW_Init+0x7c>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8006e10 <SEGGER_SYSVIEW_Init+0x84>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a0c      	ldr	r2, [pc, #48]	@ (8006e08 <SEGGER_SYSVIEW_Init+0x7c>)
 8006dd8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006dda:	4a0b      	ldr	r2, [pc, #44]	@ (8006e08 <SEGGER_SYSVIEW_Init+0x7c>)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006de0:	4a09      	ldr	r2, [pc, #36]	@ (8006e08 <SEGGER_SYSVIEW_Init+0x7c>)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006de6:	4a08      	ldr	r2, [pc, #32]	@ (8006e08 <SEGGER_SYSVIEW_Init+0x7c>)
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006dec:	4a06      	ldr	r2, [pc, #24]	@ (8006e08 <SEGGER_SYSVIEW_Init+0x7c>)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006df2:	4b05      	ldr	r3, [pc, #20]	@ (8006e08 <SEGGER_SYSVIEW_Init+0x7c>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006df8:	bf00      	nop
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	2000bfa4 	.word	0x2000bfa4
 8006e04:	08007ee4 	.word	0x08007ee4
 8006e08:	2000c3ac 	.word	0x2000c3ac
 8006e0c:	2000c3a4 	.word	0x2000c3a4
 8006e10:	e0001004 	.word	0xe0001004

08006e14 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006e1c:	4a04      	ldr	r2, [pc, #16]	@ (8006e30 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6113      	str	r3, [r2, #16]
}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	2000c3ac 	.word	0x2000c3ac

08006e34 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e3c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e40:	f04f 0120 	mov.w	r1, #32
 8006e44:	f381 8811 	msr	BASEPRI, r1
 8006e48:	60fb      	str	r3, [r7, #12]
 8006e4a:	4808      	ldr	r0, [pc, #32]	@ (8006e6c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006e4c:	f7ff f982 	bl	8006154 <_PreparePacket>
 8006e50:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	68b9      	ldr	r1, [r7, #8]
 8006e56:	68b8      	ldr	r0, [r7, #8]
 8006e58:	f7ff fa68 	bl	800632c <_SendPacket>
  RECORD_END();
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f383 8811 	msr	BASEPRI, r3
}
 8006e62:	bf00      	nop
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	2000c3dc 	.word	0x2000c3dc

08006e70 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e7a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e7e:	f04f 0120 	mov.w	r1, #32
 8006e82:	f381 8811 	msr	BASEPRI, r1
 8006e86:	617b      	str	r3, [r7, #20]
 8006e88:	4816      	ldr	r0, [pc, #88]	@ (8006ee4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006e8a:	f7ff f963 	bl	8006154 <_PreparePacket>
 8006e8e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	61fb      	str	r3, [r7, #28]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	61bb      	str	r3, [r7, #24]
 8006e9c:	e00b      	b.n	8006eb6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	1c59      	adds	r1, r3, #1
 8006ea6:	61f9      	str	r1, [r7, #28]
 8006ea8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006eac:	b2d2      	uxtb	r2, r2
 8006eae:	701a      	strb	r2, [r3, #0]
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	09db      	lsrs	r3, r3, #7
 8006eb4:	61bb      	str	r3, [r7, #24]
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006eba:	d8f0      	bhi.n	8006e9e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	1c5a      	adds	r2, r3, #1
 8006ec0:	61fa      	str	r2, [r7, #28]
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	b2d2      	uxtb	r2, r2
 8006ec6:	701a      	strb	r2, [r3, #0]
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	68f9      	ldr	r1, [r7, #12]
 8006ed0:	6938      	ldr	r0, [r7, #16]
 8006ed2:	f7ff fa2b 	bl	800632c <_SendPacket>
  RECORD_END();
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f383 8811 	msr	BASEPRI, r3
}
 8006edc:	bf00      	nop
 8006ede:	3720      	adds	r7, #32
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	2000c3dc 	.word	0x2000c3dc

08006ee8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08c      	sub	sp, #48	@ 0x30
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ef4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ef8:	f04f 0120 	mov.w	r1, #32
 8006efc:	f381 8811 	msr	BASEPRI, r1
 8006f00:	61fb      	str	r3, [r7, #28]
 8006f02:	4825      	ldr	r0, [pc, #148]	@ (8006f98 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006f04:	f7ff f926 	bl	8006154 <_PreparePacket>
 8006f08:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f16:	e00b      	b.n	8006f30 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f1e:	1c59      	adds	r1, r3, #1
 8006f20:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006f22:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f26:	b2d2      	uxtb	r2, r2
 8006f28:	701a      	strb	r2, [r3, #0]
 8006f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2c:	09db      	lsrs	r3, r3, #7
 8006f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f32:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f34:	d8f0      	bhi.n	8006f18 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f38:	1c5a      	adds	r2, r3, #1
 8006f3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f3e:	b2d2      	uxtb	r2, r2
 8006f40:	701a      	strb	r2, [r3, #0]
 8006f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f44:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	623b      	str	r3, [r7, #32]
 8006f4e:	e00b      	b.n	8006f68 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f56:	1c59      	adds	r1, r3, #1
 8006f58:	6279      	str	r1, [r7, #36]	@ 0x24
 8006f5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f5e:	b2d2      	uxtb	r2, r2
 8006f60:	701a      	strb	r2, [r3, #0]
 8006f62:	6a3b      	ldr	r3, [r7, #32]
 8006f64:	09db      	lsrs	r3, r3, #7
 8006f66:	623b      	str	r3, [r7, #32]
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f6c:	d8f0      	bhi.n	8006f50 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f74:	6a3a      	ldr	r2, [r7, #32]
 8006f76:	b2d2      	uxtb	r2, r2
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	6979      	ldr	r1, [r7, #20]
 8006f82:	69b8      	ldr	r0, [r7, #24]
 8006f84:	f7ff f9d2 	bl	800632c <_SendPacket>
  RECORD_END();
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	f383 8811 	msr	BASEPRI, r3
}
 8006f8e:	bf00      	nop
 8006f90:	3730      	adds	r7, #48	@ 0x30
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	2000c3dc 	.word	0x2000c3dc

08006f9c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08c      	sub	sp, #48	@ 0x30
 8006fa0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006fa2:	4b58      	ldr	r3, [pc, #352]	@ (8007104 <SEGGER_SYSVIEW_Start+0x168>)
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006fa8:	f3ef 8311 	mrs	r3, BASEPRI
 8006fac:	f04f 0120 	mov.w	r1, #32
 8006fb0:	f381 8811 	msr	BASEPRI, r1
 8006fb4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006fb6:	4b53      	ldr	r3, [pc, #332]	@ (8007104 <SEGGER_SYSVIEW_Start+0x168>)
 8006fb8:	785b      	ldrb	r3, [r3, #1]
 8006fba:	220a      	movs	r2, #10
 8006fbc:	4952      	ldr	r1, [pc, #328]	@ (8007108 <SEGGER_SYSVIEW_Start+0x16c>)
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7f9 f93e 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006fca:	200a      	movs	r0, #10
 8006fcc:	f7ff ff32 	bl	8006e34 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006fd0:	f3ef 8311 	mrs	r3, BASEPRI
 8006fd4:	f04f 0120 	mov.w	r1, #32
 8006fd8:	f381 8811 	msr	BASEPRI, r1
 8006fdc:	60bb      	str	r3, [r7, #8]
 8006fde:	484b      	ldr	r0, [pc, #300]	@ (800710c <SEGGER_SYSVIEW_Start+0x170>)
 8006fe0:	f7ff f8b8 	bl	8006154 <_PreparePacket>
 8006fe4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fee:	4b45      	ldr	r3, [pc, #276]	@ (8007104 <SEGGER_SYSVIEW_Start+0x168>)
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ff4:	e00b      	b.n	800700e <SEGGER_SYSVIEW_Start+0x72>
 8006ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ffc:	1c59      	adds	r1, r3, #1
 8006ffe:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007000:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007004:	b2d2      	uxtb	r2, r2
 8007006:	701a      	strb	r2, [r3, #0]
 8007008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700a:	09db      	lsrs	r3, r3, #7
 800700c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800700e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007010:	2b7f      	cmp	r3, #127	@ 0x7f
 8007012:	d8f0      	bhi.n	8006ff6 <SEGGER_SYSVIEW_Start+0x5a>
 8007014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800701a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800701c:	b2d2      	uxtb	r2, r2
 800701e:	701a      	strb	r2, [r3, #0]
 8007020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007022:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	627b      	str	r3, [r7, #36]	@ 0x24
 8007028:	4b36      	ldr	r3, [pc, #216]	@ (8007104 <SEGGER_SYSVIEW_Start+0x168>)
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	623b      	str	r3, [r7, #32]
 800702e:	e00b      	b.n	8007048 <SEGGER_SYSVIEW_Start+0xac>
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	b2da      	uxtb	r2, r3
 8007034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007036:	1c59      	adds	r1, r3, #1
 8007038:	6279      	str	r1, [r7, #36]	@ 0x24
 800703a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	09db      	lsrs	r3, r3, #7
 8007046:	623b      	str	r3, [r7, #32]
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	2b7f      	cmp	r3, #127	@ 0x7f
 800704c:	d8f0      	bhi.n	8007030 <SEGGER_SYSVIEW_Start+0x94>
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	627a      	str	r2, [r7, #36]	@ 0x24
 8007054:	6a3a      	ldr	r2, [r7, #32]
 8007056:	b2d2      	uxtb	r2, r2
 8007058:	701a      	strb	r2, [r3, #0]
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	61fb      	str	r3, [r7, #28]
 8007062:	4b28      	ldr	r3, [pc, #160]	@ (8007104 <SEGGER_SYSVIEW_Start+0x168>)
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	61bb      	str	r3, [r7, #24]
 8007068:	e00b      	b.n	8007082 <SEGGER_SYSVIEW_Start+0xe6>
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	b2da      	uxtb	r2, r3
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	1c59      	adds	r1, r3, #1
 8007072:	61f9      	str	r1, [r7, #28]
 8007074:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007078:	b2d2      	uxtb	r2, r2
 800707a:	701a      	strb	r2, [r3, #0]
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	09db      	lsrs	r3, r3, #7
 8007080:	61bb      	str	r3, [r7, #24]
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	2b7f      	cmp	r3, #127	@ 0x7f
 8007086:	d8f0      	bhi.n	800706a <SEGGER_SYSVIEW_Start+0xce>
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	61fa      	str	r2, [r7, #28]
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	b2d2      	uxtb	r2, r2
 8007092:	701a      	strb	r2, [r3, #0]
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	2300      	movs	r3, #0
 800709e:	613b      	str	r3, [r7, #16]
 80070a0:	e00b      	b.n	80070ba <SEGGER_SYSVIEW_Start+0x11e>
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	1c59      	adds	r1, r3, #1
 80070aa:	6179      	str	r1, [r7, #20]
 80070ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070b0:	b2d2      	uxtb	r2, r2
 80070b2:	701a      	strb	r2, [r3, #0]
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	09db      	lsrs	r3, r3, #7
 80070b8:	613b      	str	r3, [r7, #16]
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80070be:	d8f0      	bhi.n	80070a2 <SEGGER_SYSVIEW_Start+0x106>
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	617a      	str	r2, [r7, #20]
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	b2d2      	uxtb	r2, r2
 80070ca:	701a      	strb	r2, [r3, #0]
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80070d0:	2218      	movs	r2, #24
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7ff f929 	bl	800632c <_SendPacket>
      RECORD_END();
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80070e0:	4b08      	ldr	r3, [pc, #32]	@ (8007104 <SEGGER_SYSVIEW_Start+0x168>)
 80070e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80070e8:	4b06      	ldr	r3, [pc, #24]	@ (8007104 <SEGGER_SYSVIEW_Start+0x168>)
 80070ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ec:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80070ee:	f000 f9eb 	bl	80074c8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80070f2:	f000 f9b1 	bl	8007458 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80070f6:	f000 fd21 	bl	8007b3c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80070fa:	bf00      	nop
 80070fc:	3730      	adds	r7, #48	@ 0x30
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	2000c3ac 	.word	0x2000c3ac
 8007108:	08007f24 	.word	0x08007f24
 800710c:	2000c3dc 	.word	0x2000c3dc

08007110 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007116:	f3ef 8311 	mrs	r3, BASEPRI
 800711a:	f04f 0120 	mov.w	r1, #32
 800711e:	f381 8811 	msr	BASEPRI, r1
 8007122:	607b      	str	r3, [r7, #4]
 8007124:	480b      	ldr	r0, [pc, #44]	@ (8007154 <SEGGER_SYSVIEW_Stop+0x44>)
 8007126:	f7ff f815 	bl	8006154 <_PreparePacket>
 800712a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800712c:	4b0a      	ldr	r3, [pc, #40]	@ (8007158 <SEGGER_SYSVIEW_Stop+0x48>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d007      	beq.n	8007144 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007134:	220b      	movs	r2, #11
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	6838      	ldr	r0, [r7, #0]
 800713a:	f7ff f8f7 	bl	800632c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800713e:	4b06      	ldr	r3, [pc, #24]	@ (8007158 <SEGGER_SYSVIEW_Stop+0x48>)
 8007140:	2200      	movs	r2, #0
 8007142:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f383 8811 	msr	BASEPRI, r3
}
 800714a:	bf00      	nop
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	2000c3dc 	.word	0x2000c3dc
 8007158:	2000c3ac 	.word	0x2000c3ac

0800715c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800715c:	b580      	push	{r7, lr}
 800715e:	b08c      	sub	sp, #48	@ 0x30
 8007160:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007162:	f3ef 8311 	mrs	r3, BASEPRI
 8007166:	f04f 0120 	mov.w	r1, #32
 800716a:	f381 8811 	msr	BASEPRI, r1
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	4845      	ldr	r0, [pc, #276]	@ (8007288 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007172:	f7fe ffef 	bl	8006154 <_PreparePacket>
 8007176:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007180:	4b42      	ldr	r3, [pc, #264]	@ (800728c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007186:	e00b      	b.n	80071a0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718a:	b2da      	uxtb	r2, r3
 800718c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800718e:	1c59      	adds	r1, r3, #1
 8007190:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007192:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007196:	b2d2      	uxtb	r2, r2
 8007198:	701a      	strb	r2, [r3, #0]
 800719a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719c:	09db      	lsrs	r3, r3, #7
 800719e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80071a4:	d8f0      	bhi.n	8007188 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80071a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071ae:	b2d2      	uxtb	r2, r2
 80071b0:	701a      	strb	r2, [r3, #0]
 80071b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80071ba:	4b34      	ldr	r3, [pc, #208]	@ (800728c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	623b      	str	r3, [r7, #32]
 80071c0:	e00b      	b.n	80071da <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	1c59      	adds	r1, r3, #1
 80071ca:	6279      	str	r1, [r7, #36]	@ 0x24
 80071cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071d0:	b2d2      	uxtb	r2, r2
 80071d2:	701a      	strb	r2, [r3, #0]
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	09db      	lsrs	r3, r3, #7
 80071d8:	623b      	str	r3, [r7, #32]
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80071de:	d8f0      	bhi.n	80071c2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80071e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80071e6:	6a3a      	ldr	r2, [r7, #32]
 80071e8:	b2d2      	uxtb	r2, r2
 80071ea:	701a      	strb	r2, [r3, #0]
 80071ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	61fb      	str	r3, [r7, #28]
 80071f4:	4b25      	ldr	r3, [pc, #148]	@ (800728c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	61bb      	str	r3, [r7, #24]
 80071fa:	e00b      	b.n	8007214 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	1c59      	adds	r1, r3, #1
 8007204:	61f9      	str	r1, [r7, #28]
 8007206:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800720a:	b2d2      	uxtb	r2, r2
 800720c:	701a      	strb	r2, [r3, #0]
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	09db      	lsrs	r3, r3, #7
 8007212:	61bb      	str	r3, [r7, #24]
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	2b7f      	cmp	r3, #127	@ 0x7f
 8007218:	d8f0      	bhi.n	80071fc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	61fa      	str	r2, [r7, #28]
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	b2d2      	uxtb	r2, r2
 8007224:	701a      	strb	r2, [r3, #0]
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	617b      	str	r3, [r7, #20]
 800722e:	2300      	movs	r3, #0
 8007230:	613b      	str	r3, [r7, #16]
 8007232:	e00b      	b.n	800724c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	b2da      	uxtb	r2, r3
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	1c59      	adds	r1, r3, #1
 800723c:	6179      	str	r1, [r7, #20]
 800723e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007242:	b2d2      	uxtb	r2, r2
 8007244:	701a      	strb	r2, [r3, #0]
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	09db      	lsrs	r3, r3, #7
 800724a:	613b      	str	r3, [r7, #16]
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007250:	d8f0      	bhi.n	8007234 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	1c5a      	adds	r2, r3, #1
 8007256:	617a      	str	r2, [r7, #20]
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007262:	2218      	movs	r2, #24
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	68b8      	ldr	r0, [r7, #8]
 8007268:	f7ff f860 	bl	800632c <_SendPacket>
  RECORD_END();
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007272:	4b06      	ldr	r3, [pc, #24]	@ (800728c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800727a:	4b04      	ldr	r3, [pc, #16]	@ (800728c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800727c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727e:	4798      	blx	r3
  }
}
 8007280:	bf00      	nop
 8007282:	3730      	adds	r7, #48	@ 0x30
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	2000c3dc 	.word	0x2000c3dc
 800728c:	2000c3ac 	.word	0x2000c3ac

08007290 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007290:	b580      	push	{r7, lr}
 8007292:	b092      	sub	sp, #72	@ 0x48
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007298:	f3ef 8311 	mrs	r3, BASEPRI
 800729c:	f04f 0120 	mov.w	r1, #32
 80072a0:	f381 8811 	msr	BASEPRI, r1
 80072a4:	617b      	str	r3, [r7, #20]
 80072a6:	486a      	ldr	r0, [pc, #424]	@ (8007450 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80072a8:	f7fe ff54 	bl	8006154 <_PreparePacket>
 80072ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	4b66      	ldr	r3, [pc, #408]	@ (8007454 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80072c2:	e00b      	b.n	80072dc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80072c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072ca:	1c59      	adds	r1, r3, #1
 80072cc:	6479      	str	r1, [r7, #68]	@ 0x44
 80072ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072d2:	b2d2      	uxtb	r2, r2
 80072d4:	701a      	strb	r2, [r3, #0]
 80072d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072d8:	09db      	lsrs	r3, r3, #7
 80072da:	643b      	str	r3, [r7, #64]	@ 0x40
 80072dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072de:	2b7f      	cmp	r3, #127	@ 0x7f
 80072e0:	d8f0      	bhi.n	80072c4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80072e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80072e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072ea:	b2d2      	uxtb	r2, r2
 80072ec:	701a      	strb	r2, [r3, #0]
 80072ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072fc:	e00b      	b.n	8007316 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80072fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007300:	b2da      	uxtb	r2, r3
 8007302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007304:	1c59      	adds	r1, r3, #1
 8007306:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8007308:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800730c:	b2d2      	uxtb	r2, r2
 800730e:	701a      	strb	r2, [r3, #0]
 8007310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007312:	09db      	lsrs	r3, r3, #7
 8007314:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007318:	2b7f      	cmp	r3, #127	@ 0x7f
 800731a:	d8f0      	bhi.n	80072fe <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800731c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007322:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007324:	b2d2      	uxtb	r2, r2
 8007326:	701a      	strb	r2, [r3, #0]
 8007328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800732a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	2220      	movs	r2, #32
 8007332:	4619      	mov	r1, r3
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f7fe fedd 	bl	80060f4 <_EncodeStr>
 800733a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800733c:	2209      	movs	r2, #9
 800733e:	68f9      	ldr	r1, [r7, #12]
 8007340:	6938      	ldr	r0, [r7, #16]
 8007342:	f7fe fff3 	bl	800632c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	637b      	str	r3, [r7, #52]	@ 0x34
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	4b40      	ldr	r3, [pc, #256]	@ (8007454 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	633b      	str	r3, [r7, #48]	@ 0x30
 800735a:	e00b      	b.n	8007374 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800735c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735e:	b2da      	uxtb	r2, r3
 8007360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007362:	1c59      	adds	r1, r3, #1
 8007364:	6379      	str	r1, [r7, #52]	@ 0x34
 8007366:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	701a      	strb	r2, [r3, #0]
 800736e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007370:	09db      	lsrs	r3, r3, #7
 8007372:	633b      	str	r3, [r7, #48]	@ 0x30
 8007374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007376:	2b7f      	cmp	r3, #127	@ 0x7f
 8007378:	d8f0      	bhi.n	800735c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800737a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	637a      	str	r2, [r7, #52]	@ 0x34
 8007380:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	701a      	strb	r2, [r3, #0]
 8007386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007388:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007394:	e00b      	b.n	80073ae <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007398:	b2da      	uxtb	r2, r3
 800739a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800739c:	1c59      	adds	r1, r3, #1
 800739e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80073a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073a4:	b2d2      	uxtb	r2, r2
 80073a6:	701a      	strb	r2, [r3, #0]
 80073a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073aa:	09db      	lsrs	r3, r3, #7
 80073ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80073b2:	d8f0      	bhi.n	8007396 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80073b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b6:	1c5a      	adds	r2, r3, #1
 80073b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073bc:	b2d2      	uxtb	r2, r2
 80073be:	701a      	strb	r2, [r3, #0]
 80073c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	623b      	str	r3, [r7, #32]
 80073ce:	e00b      	b.n	80073e8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d6:	1c59      	adds	r1, r3, #1
 80073d8:	6279      	str	r1, [r7, #36]	@ 0x24
 80073da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073de:	b2d2      	uxtb	r2, r2
 80073e0:	701a      	strb	r2, [r3, #0]
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	09db      	lsrs	r3, r3, #7
 80073e6:	623b      	str	r3, [r7, #32]
 80073e8:	6a3b      	ldr	r3, [r7, #32]
 80073ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80073ec:	d8f0      	bhi.n	80073d0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80073ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80073f4:	6a3a      	ldr	r2, [r7, #32]
 80073f6:	b2d2      	uxtb	r2, r2
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	61fb      	str	r3, [r7, #28]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	61bb      	str	r3, [r7, #24]
 8007408:	e00b      	b.n	8007422 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	b2da      	uxtb	r2, r3
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	1c59      	adds	r1, r3, #1
 8007412:	61f9      	str	r1, [r7, #28]
 8007414:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007418:	b2d2      	uxtb	r2, r2
 800741a:	701a      	strb	r2, [r3, #0]
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	09db      	lsrs	r3, r3, #7
 8007420:	61bb      	str	r3, [r7, #24]
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	2b7f      	cmp	r3, #127	@ 0x7f
 8007426:	d8f0      	bhi.n	800740a <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	1c5a      	adds	r2, r3, #1
 800742c:	61fa      	str	r2, [r7, #28]
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	b2d2      	uxtb	r2, r2
 8007432:	701a      	strb	r2, [r3, #0]
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007438:	2215      	movs	r2, #21
 800743a:	68f9      	ldr	r1, [r7, #12]
 800743c:	6938      	ldr	r0, [r7, #16]
 800743e:	f7fe ff75 	bl	800632c <_SendPacket>
  RECORD_END();
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f383 8811 	msr	BASEPRI, r3
}
 8007448:	bf00      	nop
 800744a:	3748      	adds	r7, #72	@ 0x48
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	2000c3dc 	.word	0x2000c3dc
 8007454:	2000c3ac 	.word	0x2000c3ac

08007458 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007458:	b580      	push	{r7, lr}
 800745a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800745c:	4b07      	ldr	r3, [pc, #28]	@ (800747c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d008      	beq.n	8007476 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007464:	4b05      	ldr	r3, [pc, #20]	@ (800747c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800746e:	4b03      	ldr	r3, [pc, #12]	@ (800747c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	4798      	blx	r3
  }
}
 8007476:	bf00      	nop
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	2000c3ac 	.word	0x2000c3ac

08007480 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007488:	f3ef 8311 	mrs	r3, BASEPRI
 800748c:	f04f 0120 	mov.w	r1, #32
 8007490:	f381 8811 	msr	BASEPRI, r1
 8007494:	617b      	str	r3, [r7, #20]
 8007496:	480b      	ldr	r0, [pc, #44]	@ (80074c4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007498:	f7fe fe5c 	bl	8006154 <_PreparePacket>
 800749c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800749e:	2280      	movs	r2, #128	@ 0x80
 80074a0:	6879      	ldr	r1, [r7, #4]
 80074a2:	6938      	ldr	r0, [r7, #16]
 80074a4:	f7fe fe26 	bl	80060f4 <_EncodeStr>
 80074a8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80074aa:	220e      	movs	r2, #14
 80074ac:	68f9      	ldr	r1, [r7, #12]
 80074ae:	6938      	ldr	r0, [r7, #16]
 80074b0:	f7fe ff3c 	bl	800632c <_SendPacket>
  RECORD_END();
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	f383 8811 	msr	BASEPRI, r3
}
 80074ba:	bf00      	nop
 80074bc:	3718      	adds	r7, #24
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	2000c3dc 	.word	0x2000c3dc

080074c8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80074c8:	b590      	push	{r4, r7, lr}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80074ce:	4b15      	ldr	r3, [pc, #84]	@ (8007524 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d01a      	beq.n	800750c <SEGGER_SYSVIEW_RecordSystime+0x44>
 80074d6:	4b13      	ldr	r3, [pc, #76]	@ (8007524 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d015      	beq.n	800750c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80074e0:	4b10      	ldr	r3, [pc, #64]	@ (8007524 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80074e2:	6a1b      	ldr	r3, [r3, #32]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4798      	blx	r3
 80074e8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80074ec:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80074ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074f2:	f04f 0200 	mov.w	r2, #0
 80074f6:	f04f 0300 	mov.w	r3, #0
 80074fa:	000a      	movs	r2, r1
 80074fc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80074fe:	4613      	mov	r3, r2
 8007500:	461a      	mov	r2, r3
 8007502:	4621      	mov	r1, r4
 8007504:	200d      	movs	r0, #13
 8007506:	f7ff fcef 	bl	8006ee8 <SEGGER_SYSVIEW_RecordU32x2>
 800750a:	e006      	b.n	800751a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800750c:	4b06      	ldr	r3, [pc, #24]	@ (8007528 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4619      	mov	r1, r3
 8007512:	200c      	movs	r0, #12
 8007514:	f7ff fcac 	bl	8006e70 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007518:	bf00      	nop
 800751a:	bf00      	nop
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	bd90      	pop	{r4, r7, pc}
 8007522:	bf00      	nop
 8007524:	2000c3ac 	.word	0x2000c3ac
 8007528:	e0001004 	.word	0xe0001004

0800752c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007532:	f3ef 8311 	mrs	r3, BASEPRI
 8007536:	f04f 0120 	mov.w	r1, #32
 800753a:	f381 8811 	msr	BASEPRI, r1
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	4819      	ldr	r0, [pc, #100]	@ (80075a8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007542:	f7fe fe07 	bl	8006154 <_PreparePacket>
 8007546:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800754c:	4b17      	ldr	r3, [pc, #92]	@ (80075ac <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007554:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	617b      	str	r3, [r7, #20]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	613b      	str	r3, [r7, #16]
 800755e:	e00b      	b.n	8007578 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	b2da      	uxtb	r2, r3
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	1c59      	adds	r1, r3, #1
 8007568:	6179      	str	r1, [r7, #20]
 800756a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800756e:	b2d2      	uxtb	r2, r2
 8007570:	701a      	strb	r2, [r3, #0]
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	09db      	lsrs	r3, r3, #7
 8007576:	613b      	str	r3, [r7, #16]
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	2b7f      	cmp	r3, #127	@ 0x7f
 800757c:	d8f0      	bhi.n	8007560 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	617a      	str	r2, [r7, #20]
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	701a      	strb	r2, [r3, #0]
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800758e:	2202      	movs	r2, #2
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	68b8      	ldr	r0, [r7, #8]
 8007594:	f7fe feca 	bl	800632c <_SendPacket>
  RECORD_END();
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f383 8811 	msr	BASEPRI, r3
}
 800759e:	bf00      	nop
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	2000c3dc 	.word	0x2000c3dc
 80075ac:	e000ed04 	.word	0xe000ed04

080075b0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80075b6:	f3ef 8311 	mrs	r3, BASEPRI
 80075ba:	f04f 0120 	mov.w	r1, #32
 80075be:	f381 8811 	msr	BASEPRI, r1
 80075c2:	607b      	str	r3, [r7, #4]
 80075c4:	4807      	ldr	r0, [pc, #28]	@ (80075e4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80075c6:	f7fe fdc5 	bl	8006154 <_PreparePacket>
 80075ca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80075cc:	2203      	movs	r2, #3
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6838      	ldr	r0, [r7, #0]
 80075d2:	f7fe feab 	bl	800632c <_SendPacket>
  RECORD_END();
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f383 8811 	msr	BASEPRI, r3
}
 80075dc:	bf00      	nop
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	2000c3dc 	.word	0x2000c3dc

080075e8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80075ee:	f3ef 8311 	mrs	r3, BASEPRI
 80075f2:	f04f 0120 	mov.w	r1, #32
 80075f6:	f381 8811 	msr	BASEPRI, r1
 80075fa:	607b      	str	r3, [r7, #4]
 80075fc:	4807      	ldr	r0, [pc, #28]	@ (800761c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80075fe:	f7fe fda9 	bl	8006154 <_PreparePacket>
 8007602:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007604:	2212      	movs	r2, #18
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6838      	ldr	r0, [r7, #0]
 800760a:	f7fe fe8f 	bl	800632c <_SendPacket>
  RECORD_END();
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f383 8811 	msr	BASEPRI, r3
}
 8007614:	bf00      	nop
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	2000c3dc 	.word	0x2000c3dc

08007620 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007628:	f3ef 8311 	mrs	r3, BASEPRI
 800762c:	f04f 0120 	mov.w	r1, #32
 8007630:	f381 8811 	msr	BASEPRI, r1
 8007634:	617b      	str	r3, [r7, #20]
 8007636:	4817      	ldr	r0, [pc, #92]	@ (8007694 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8007638:	f7fe fd8c 	bl	8006154 <_PreparePacket>
 800763c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	61fb      	str	r3, [r7, #28]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	61bb      	str	r3, [r7, #24]
 800764a:	e00b      	b.n	8007664 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	b2da      	uxtb	r2, r3
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	1c59      	adds	r1, r3, #1
 8007654:	61f9      	str	r1, [r7, #28]
 8007656:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800765a:	b2d2      	uxtb	r2, r2
 800765c:	701a      	strb	r2, [r3, #0]
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	09db      	lsrs	r3, r3, #7
 8007662:	61bb      	str	r3, [r7, #24]
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	2b7f      	cmp	r3, #127	@ 0x7f
 8007668:	d8f0      	bhi.n	800764c <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	1c5a      	adds	r2, r3, #1
 800766e:	61fa      	str	r2, [r7, #28]
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	b2d2      	uxtb	r2, r2
 8007674:	701a      	strb	r2, [r3, #0]
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800767a:	221c      	movs	r2, #28
 800767c:	68f9      	ldr	r1, [r7, #12]
 800767e:	6938      	ldr	r0, [r7, #16]
 8007680:	f7fe fe54 	bl	800632c <_SendPacket>
  RECORD_END();
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f383 8811 	msr	BASEPRI, r3
}
 800768a:	bf00      	nop
 800768c:	3720      	adds	r7, #32
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	2000c3dc 	.word	0x2000c3dc

08007698 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8007698:	b580      	push	{r7, lr}
 800769a:	b08a      	sub	sp, #40	@ 0x28
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80076a2:	f3ef 8311 	mrs	r3, BASEPRI
 80076a6:	f04f 0120 	mov.w	r1, #32
 80076aa:	f381 8811 	msr	BASEPRI, r1
 80076ae:	617b      	str	r3, [r7, #20]
 80076b0:	4824      	ldr	r0, [pc, #144]	@ (8007744 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 80076b2:	f7fe fd4f 	bl	8006154 <_PreparePacket>
 80076b6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	627b      	str	r3, [r7, #36]	@ 0x24
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	623b      	str	r3, [r7, #32]
 80076c4:	e00b      	b.n	80076de <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	1c59      	adds	r1, r3, #1
 80076ce:	6279      	str	r1, [r7, #36]	@ 0x24
 80076d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80076d4:	b2d2      	uxtb	r2, r2
 80076d6:	701a      	strb	r2, [r3, #0]
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	09db      	lsrs	r3, r3, #7
 80076dc:	623b      	str	r3, [r7, #32]
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80076e2:	d8f0      	bhi.n	80076c6 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 80076e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80076ea:	6a3a      	ldr	r2, [r7, #32]
 80076ec:	b2d2      	uxtb	r2, r2
 80076ee:	701a      	strb	r2, [r3, #0]
 80076f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	61fb      	str	r3, [r7, #28]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	61bb      	str	r3, [r7, #24]
 80076fc:	e00b      	b.n	8007716 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	b2da      	uxtb	r2, r3
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	1c59      	adds	r1, r3, #1
 8007706:	61f9      	str	r1, [r7, #28]
 8007708:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800770c:	b2d2      	uxtb	r2, r2
 800770e:	701a      	strb	r2, [r3, #0]
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	09db      	lsrs	r3, r3, #7
 8007714:	61bb      	str	r3, [r7, #24]
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	2b7f      	cmp	r3, #127	@ 0x7f
 800771a:	d8f0      	bhi.n	80076fe <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	1c5a      	adds	r2, r3, #1
 8007720:	61fa      	str	r2, [r7, #28]
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	b2d2      	uxtb	r2, r2
 8007726:	701a      	strb	r2, [r3, #0]
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800772c:	221c      	movs	r2, #28
 800772e:	68f9      	ldr	r1, [r7, #12]
 8007730:	6938      	ldr	r0, [r7, #16]
 8007732:	f7fe fdfb 	bl	800632c <_SendPacket>
  RECORD_END();
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f383 8811 	msr	BASEPRI, r3
}
 800773c:	bf00      	nop
 800773e:	3728      	adds	r7, #40	@ 0x28
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	2000c3dc 	.word	0x2000c3dc

08007748 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800774e:	f3ef 8311 	mrs	r3, BASEPRI
 8007752:	f04f 0120 	mov.w	r1, #32
 8007756:	f381 8811 	msr	BASEPRI, r1
 800775a:	607b      	str	r3, [r7, #4]
 800775c:	4807      	ldr	r0, [pc, #28]	@ (800777c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800775e:	f7fe fcf9 	bl	8006154 <_PreparePacket>
 8007762:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007764:	2211      	movs	r2, #17
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6838      	ldr	r0, [r7, #0]
 800776a:	f7fe fddf 	bl	800632c <_SendPacket>
  RECORD_END();
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f383 8811 	msr	BASEPRI, r3
}
 8007774:	bf00      	nop
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	2000c3dc 	.word	0x2000c3dc

08007780 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007780:	b580      	push	{r7, lr}
 8007782:	b088      	sub	sp, #32
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007788:	f3ef 8311 	mrs	r3, BASEPRI
 800778c:	f04f 0120 	mov.w	r1, #32
 8007790:	f381 8811 	msr	BASEPRI, r1
 8007794:	617b      	str	r3, [r7, #20]
 8007796:	4819      	ldr	r0, [pc, #100]	@ (80077fc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007798:	f7fe fcdc 	bl	8006154 <_PreparePacket>
 800779c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80077a2:	4b17      	ldr	r3, [pc, #92]	@ (8007800 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	61fb      	str	r3, [r7, #28]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	61bb      	str	r3, [r7, #24]
 80077b4:	e00b      	b.n	80077ce <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	1c59      	adds	r1, r3, #1
 80077be:	61f9      	str	r1, [r7, #28]
 80077c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80077c4:	b2d2      	uxtb	r2, r2
 80077c6:	701a      	strb	r2, [r3, #0]
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	09db      	lsrs	r3, r3, #7
 80077cc:	61bb      	str	r3, [r7, #24]
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80077d2:	d8f0      	bhi.n	80077b6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	1c5a      	adds	r2, r3, #1
 80077d8:	61fa      	str	r2, [r7, #28]
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	b2d2      	uxtb	r2, r2
 80077de:	701a      	strb	r2, [r3, #0]
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80077e4:	2208      	movs	r2, #8
 80077e6:	68f9      	ldr	r1, [r7, #12]
 80077e8:	6938      	ldr	r0, [r7, #16]
 80077ea:	f7fe fd9f 	bl	800632c <_SendPacket>
  RECORD_END();
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f383 8811 	msr	BASEPRI, r3
}
 80077f4:	bf00      	nop
 80077f6:	3720      	adds	r7, #32
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	2000c3dc 	.word	0x2000c3dc
 8007800:	2000c3ac 	.word	0x2000c3ac

08007804 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007804:	b580      	push	{r7, lr}
 8007806:	b088      	sub	sp, #32
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800780c:	f3ef 8311 	mrs	r3, BASEPRI
 8007810:	f04f 0120 	mov.w	r1, #32
 8007814:	f381 8811 	msr	BASEPRI, r1
 8007818:	617b      	str	r3, [r7, #20]
 800781a:	4819      	ldr	r0, [pc, #100]	@ (8007880 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800781c:	f7fe fc9a 	bl	8006154 <_PreparePacket>
 8007820:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007826:	4b17      	ldr	r3, [pc, #92]	@ (8007884 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	61fb      	str	r3, [r7, #28]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	61bb      	str	r3, [r7, #24]
 8007838:	e00b      	b.n	8007852 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	b2da      	uxtb	r2, r3
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	1c59      	adds	r1, r3, #1
 8007842:	61f9      	str	r1, [r7, #28]
 8007844:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007848:	b2d2      	uxtb	r2, r2
 800784a:	701a      	strb	r2, [r3, #0]
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	09db      	lsrs	r3, r3, #7
 8007850:	61bb      	str	r3, [r7, #24]
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	2b7f      	cmp	r3, #127	@ 0x7f
 8007856:	d8f0      	bhi.n	800783a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	61fa      	str	r2, [r7, #28]
 800785e:	69ba      	ldr	r2, [r7, #24]
 8007860:	b2d2      	uxtb	r2, r2
 8007862:	701a      	strb	r2, [r3, #0]
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007868:	2204      	movs	r2, #4
 800786a:	68f9      	ldr	r1, [r7, #12]
 800786c:	6938      	ldr	r0, [r7, #16]
 800786e:	f7fe fd5d 	bl	800632c <_SendPacket>
  RECORD_END();
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f383 8811 	msr	BASEPRI, r3
}
 8007878:	bf00      	nop
 800787a:	3720      	adds	r7, #32
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	2000c3dc 	.word	0x2000c3dc
 8007884:	2000c3ac 	.word	0x2000c3ac

08007888 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007890:	f3ef 8311 	mrs	r3, BASEPRI
 8007894:	f04f 0120 	mov.w	r1, #32
 8007898:	f381 8811 	msr	BASEPRI, r1
 800789c:	617b      	str	r3, [r7, #20]
 800789e:	4819      	ldr	r0, [pc, #100]	@ (8007904 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80078a0:	f7fe fc58 	bl	8006154 <_PreparePacket>
 80078a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80078aa:	4b17      	ldr	r3, [pc, #92]	@ (8007908 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	61fb      	str	r3, [r7, #28]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	61bb      	str	r3, [r7, #24]
 80078bc:	e00b      	b.n	80078d6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	1c59      	adds	r1, r3, #1
 80078c6:	61f9      	str	r1, [r7, #28]
 80078c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80078cc:	b2d2      	uxtb	r2, r2
 80078ce:	701a      	strb	r2, [r3, #0]
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	09db      	lsrs	r3, r3, #7
 80078d4:	61bb      	str	r3, [r7, #24]
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80078da:	d8f0      	bhi.n	80078be <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	61fa      	str	r2, [r7, #28]
 80078e2:	69ba      	ldr	r2, [r7, #24]
 80078e4:	b2d2      	uxtb	r2, r2
 80078e6:	701a      	strb	r2, [r3, #0]
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80078ec:	2206      	movs	r2, #6
 80078ee:	68f9      	ldr	r1, [r7, #12]
 80078f0:	6938      	ldr	r0, [r7, #16]
 80078f2:	f7fe fd1b 	bl	800632c <_SendPacket>
  RECORD_END();
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	f383 8811 	msr	BASEPRI, r3
}
 80078fc:	bf00      	nop
 80078fe:	3720      	adds	r7, #32
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	2000c3dc 	.word	0x2000c3dc
 8007908:	2000c3ac 	.word	0x2000c3ac

0800790c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800790c:	b580      	push	{r7, lr}
 800790e:	b08a      	sub	sp, #40	@ 0x28
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007916:	f3ef 8311 	mrs	r3, BASEPRI
 800791a:	f04f 0120 	mov.w	r1, #32
 800791e:	f381 8811 	msr	BASEPRI, r1
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	4827      	ldr	r0, [pc, #156]	@ (80079c4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007926:	f7fe fc15 	bl	8006154 <_PreparePacket>
 800792a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007930:	4b25      	ldr	r3, [pc, #148]	@ (80079c8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	627b      	str	r3, [r7, #36]	@ 0x24
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	623b      	str	r3, [r7, #32]
 8007942:	e00b      	b.n	800795c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	b2da      	uxtb	r2, r3
 8007948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794a:	1c59      	adds	r1, r3, #1
 800794c:	6279      	str	r1, [r7, #36]	@ 0x24
 800794e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007952:	b2d2      	uxtb	r2, r2
 8007954:	701a      	strb	r2, [r3, #0]
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	09db      	lsrs	r3, r3, #7
 800795a:	623b      	str	r3, [r7, #32]
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007960:	d8f0      	bhi.n	8007944 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007964:	1c5a      	adds	r2, r3, #1
 8007966:	627a      	str	r2, [r7, #36]	@ 0x24
 8007968:	6a3a      	ldr	r2, [r7, #32]
 800796a:	b2d2      	uxtb	r2, r2
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007970:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	61fb      	str	r3, [r7, #28]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	61bb      	str	r3, [r7, #24]
 800797a:	e00b      	b.n	8007994 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	b2da      	uxtb	r2, r3
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	1c59      	adds	r1, r3, #1
 8007984:	61f9      	str	r1, [r7, #28]
 8007986:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800798a:	b2d2      	uxtb	r2, r2
 800798c:	701a      	strb	r2, [r3, #0]
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	09db      	lsrs	r3, r3, #7
 8007992:	61bb      	str	r3, [r7, #24]
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	2b7f      	cmp	r3, #127	@ 0x7f
 8007998:	d8f0      	bhi.n	800797c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	61fa      	str	r2, [r7, #28]
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	b2d2      	uxtb	r2, r2
 80079a4:	701a      	strb	r2, [r3, #0]
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80079aa:	2207      	movs	r2, #7
 80079ac:	68f9      	ldr	r1, [r7, #12]
 80079ae:	6938      	ldr	r0, [r7, #16]
 80079b0:	f7fe fcbc 	bl	800632c <_SendPacket>
  RECORD_END();
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f383 8811 	msr	BASEPRI, r3
}
 80079ba:	bf00      	nop
 80079bc:	3728      	adds	r7, #40	@ 0x28
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	2000c3dc 	.word	0x2000c3dc
 80079c8:	2000c3ac 	.word	0x2000c3ac

080079cc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80079d4:	4b04      	ldr	r3, [pc, #16]	@ (80079e8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	1ad3      	subs	r3, r2, r3
}
 80079dc:	4618      	mov	r0, r3
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	2000c3ac 	.word	0x2000c3ac

080079ec <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08c      	sub	sp, #48	@ 0x30
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	4603      	mov	r3, r0
 80079f4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80079f6:	4b40      	ldr	r3, [pc, #256]	@ (8007af8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d077      	beq.n	8007aee <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80079fe:	4b3e      	ldr	r3, [pc, #248]	@ (8007af8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007a04:	2300      	movs	r3, #0
 8007a06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a08:	e008      	b.n	8007a1c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d007      	beq.n	8007a26 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a18:	3301      	adds	r3, #1
 8007a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a1c:	79fb      	ldrb	r3, [r7, #7]
 8007a1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d3f2      	bcc.n	8007a0a <SEGGER_SYSVIEW_SendModule+0x1e>
 8007a24:	e000      	b.n	8007a28 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007a26:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d055      	beq.n	8007ada <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a2e:	f3ef 8311 	mrs	r3, BASEPRI
 8007a32:	f04f 0120 	mov.w	r1, #32
 8007a36:	f381 8811 	msr	BASEPRI, r1
 8007a3a:	617b      	str	r3, [r7, #20]
 8007a3c:	482f      	ldr	r0, [pc, #188]	@ (8007afc <SEGGER_SYSVIEW_SendModule+0x110>)
 8007a3e:	f7fe fb89 	bl	8006154 <_PreparePacket>
 8007a42:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a4c:	79fb      	ldrb	r3, [r7, #7]
 8007a4e:	623b      	str	r3, [r7, #32]
 8007a50:	e00b      	b.n	8007a6a <SEGGER_SYSVIEW_SendModule+0x7e>
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a58:	1c59      	adds	r1, r3, #1
 8007a5a:	6279      	str	r1, [r7, #36]	@ 0x24
 8007a5c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007a60:	b2d2      	uxtb	r2, r2
 8007a62:	701a      	strb	r2, [r3, #0]
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	09db      	lsrs	r3, r3, #7
 8007a68:	623b      	str	r3, [r7, #32]
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a6e:	d8f0      	bhi.n	8007a52 <SEGGER_SYSVIEW_SendModule+0x66>
 8007a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a72:	1c5a      	adds	r2, r3, #1
 8007a74:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a76:	6a3a      	ldr	r2, [r7, #32]
 8007a78:	b2d2      	uxtb	r2, r2
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	61fb      	str	r3, [r7, #28]
 8007a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	61bb      	str	r3, [r7, #24]
 8007a8a:	e00b      	b.n	8007aa4 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	b2da      	uxtb	r2, r3
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	1c59      	adds	r1, r3, #1
 8007a94:	61f9      	str	r1, [r7, #28]
 8007a96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007a9a:	b2d2      	uxtb	r2, r2
 8007a9c:	701a      	strb	r2, [r3, #0]
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	09db      	lsrs	r3, r3, #7
 8007aa2:	61bb      	str	r3, [r7, #24]
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	2b7f      	cmp	r3, #127	@ 0x7f
 8007aa8:	d8f0      	bhi.n	8007a8c <SEGGER_SYSVIEW_SendModule+0xa0>
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	61fa      	str	r2, [r7, #28]
 8007ab0:	69ba      	ldr	r2, [r7, #24]
 8007ab2:	b2d2      	uxtb	r2, r2
 8007ab4:	701a      	strb	r2, [r3, #0]
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2280      	movs	r2, #128	@ 0x80
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f7fe fb16 	bl	80060f4 <_EncodeStr>
 8007ac8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007aca:	2216      	movs	r2, #22
 8007acc:	68f9      	ldr	r1, [r7, #12]
 8007ace:	6938      	ldr	r0, [r7, #16]
 8007ad0:	f7fe fc2c 	bl	800632c <_SendPacket>
      RECORD_END();
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8007ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d006      	beq.n	8007aee <SEGGER_SYSVIEW_SendModule+0x102>
 8007ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	4798      	blx	r3
    }
  }
}
 8007aee:	bf00      	nop
 8007af0:	3730      	adds	r7, #48	@ 0x30
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	2000c3d4 	.word	0x2000c3d4
 8007afc:	2000c3dc 	.word	0x2000c3dc

08007b00 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007b06:	4b0c      	ldr	r3, [pc, #48]	@ (8007b38 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00f      	beq.n	8007b2e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b38 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d002      	beq.n	8007b22 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1f2      	bne.n	8007b14 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007b2e:	bf00      	nop
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	2000c3d4 	.word	0x2000c3d4

08007b3c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007b42:	f3ef 8311 	mrs	r3, BASEPRI
 8007b46:	f04f 0120 	mov.w	r1, #32
 8007b4a:	f381 8811 	msr	BASEPRI, r1
 8007b4e:	60fb      	str	r3, [r7, #12]
 8007b50:	4817      	ldr	r0, [pc, #92]	@ (8007bb0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007b52:	f7fe faff 	bl	8006154 <_PreparePacket>
 8007b56:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	617b      	str	r3, [r7, #20]
 8007b60:	4b14      	ldr	r3, [pc, #80]	@ (8007bb4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	613b      	str	r3, [r7, #16]
 8007b66:	e00b      	b.n	8007b80 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	1c59      	adds	r1, r3, #1
 8007b70:	6179      	str	r1, [r7, #20]
 8007b72:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007b76:	b2d2      	uxtb	r2, r2
 8007b78:	701a      	strb	r2, [r3, #0]
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	09db      	lsrs	r3, r3, #7
 8007b7e:	613b      	str	r3, [r7, #16]
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b84:	d8f0      	bhi.n	8007b68 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	617a      	str	r2, [r7, #20]
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	b2d2      	uxtb	r2, r2
 8007b90:	701a      	strb	r2, [r3, #0]
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007b96:	221b      	movs	r2, #27
 8007b98:	6879      	ldr	r1, [r7, #4]
 8007b9a:	68b8      	ldr	r0, [r7, #8]
 8007b9c:	f7fe fbc6 	bl	800632c <_SendPacket>
  RECORD_END();
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f383 8811 	msr	BASEPRI, r3
}
 8007ba6:	bf00      	nop
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	2000c3dc 	.word	0x2000c3dc
 8007bb4:	2000c3d8 	.word	0x2000c3d8

08007bb8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007bb8:	b40f      	push	{r0, r1, r2, r3}
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b082      	sub	sp, #8
 8007bbe:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007bc0:	f107 0314 	add.w	r3, r7, #20
 8007bc4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007bc6:	1d3b      	adds	r3, r7, #4
 8007bc8:	461a      	mov	r2, r3
 8007bca:	2100      	movs	r1, #0
 8007bcc:	6938      	ldr	r0, [r7, #16]
 8007bce:	f7fe febd 	bl	800694c <_VPrintTarget>
  va_end(ParamList);
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bdc:	b004      	add	sp, #16
 8007bde:	4770      	bx	lr

08007be0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b08a      	sub	sp, #40	@ 0x28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007be8:	f3ef 8311 	mrs	r3, BASEPRI
 8007bec:	f04f 0120 	mov.w	r1, #32
 8007bf0:	f381 8811 	msr	BASEPRI, r1
 8007bf4:	617b      	str	r3, [r7, #20]
 8007bf6:	4827      	ldr	r0, [pc, #156]	@ (8007c94 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007bf8:	f7fe faac 	bl	8006154 <_PreparePacket>
 8007bfc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007bfe:	2280      	movs	r2, #128	@ 0x80
 8007c00:	6879      	ldr	r1, [r7, #4]
 8007c02:	6938      	ldr	r0, [r7, #16]
 8007c04:	f7fe fa76 	bl	80060f4 <_EncodeStr>
 8007c08:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c0e:	2301      	movs	r3, #1
 8007c10:	623b      	str	r3, [r7, #32]
 8007c12:	e00b      	b.n	8007c2c <SEGGER_SYSVIEW_Warn+0x4c>
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1a:	1c59      	adds	r1, r3, #1
 8007c1c:	6279      	str	r1, [r7, #36]	@ 0x24
 8007c1e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007c22:	b2d2      	uxtb	r2, r2
 8007c24:	701a      	strb	r2, [r3, #0]
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	09db      	lsrs	r3, r3, #7
 8007c2a:	623b      	str	r3, [r7, #32]
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c30:	d8f0      	bhi.n	8007c14 <SEGGER_SYSVIEW_Warn+0x34>
 8007c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c34:	1c5a      	adds	r2, r3, #1
 8007c36:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c38:	6a3a      	ldr	r2, [r7, #32]
 8007c3a:	b2d2      	uxtb	r2, r2
 8007c3c:	701a      	strb	r2, [r3, #0]
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	61fb      	str	r3, [r7, #28]
 8007c46:	2300      	movs	r3, #0
 8007c48:	61bb      	str	r3, [r7, #24]
 8007c4a:	e00b      	b.n	8007c64 <SEGGER_SYSVIEW_Warn+0x84>
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	1c59      	adds	r1, r3, #1
 8007c54:	61f9      	str	r1, [r7, #28]
 8007c56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007c5a:	b2d2      	uxtb	r2, r2
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	09db      	lsrs	r3, r3, #7
 8007c62:	61bb      	str	r3, [r7, #24]
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c68:	d8f0      	bhi.n	8007c4c <SEGGER_SYSVIEW_Warn+0x6c>
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	1c5a      	adds	r2, r3, #1
 8007c6e:	61fa      	str	r2, [r7, #28]
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	b2d2      	uxtb	r2, r2
 8007c74:	701a      	strb	r2, [r3, #0]
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007c7a:	221a      	movs	r2, #26
 8007c7c:	68f9      	ldr	r1, [r7, #12]
 8007c7e:	6938      	ldr	r0, [r7, #16]
 8007c80:	f7fe fb54 	bl	800632c <_SendPacket>
  RECORD_END();
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f383 8811 	msr	BASEPRI, r3
}
 8007c8a:	bf00      	nop
 8007c8c:	3728      	adds	r7, #40	@ 0x28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	2000c3dc 	.word	0x2000c3dc

08007c98 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007c9c:	4b13      	ldr	r3, [pc, #76]	@ (8007cec <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007c9e:	7e1b      	ldrb	r3, [r3, #24]
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	4a13      	ldr	r2, [pc, #76]	@ (8007cf0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	005b      	lsls	r3, r3, #1
 8007ca8:	440b      	add	r3, r1
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	4413      	add	r3, r2
 8007cae:	336c      	adds	r3, #108	@ 0x6c
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8007cec <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007cb4:	7e1b      	ldrb	r3, [r3, #24]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	490d      	ldr	r1, [pc, #52]	@ (8007cf0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007cba:	4603      	mov	r3, r0
 8007cbc:	005b      	lsls	r3, r3, #1
 8007cbe:	4403      	add	r3, r0
 8007cc0:	00db      	lsls	r3, r3, #3
 8007cc2:	440b      	add	r3, r1
 8007cc4:	3370      	adds	r3, #112	@ 0x70
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d00b      	beq.n	8007ce4 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007ccc:	4b07      	ldr	r3, [pc, #28]	@ (8007cec <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007cce:	789b      	ldrb	r3, [r3, #2]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d107      	bne.n	8007ce4 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007cd4:	4b05      	ldr	r3, [pc, #20]	@ (8007cec <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007cda:	f7fe fa47 	bl	800616c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007cde:	4b03      	ldr	r3, [pc, #12]	@ (8007cec <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007ce4:	4b01      	ldr	r3, [pc, #4]	@ (8007cec <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	2000c3ac 	.word	0x2000c3ac
 8007cf0:	2000baec 	.word	0x2000baec

08007cf4 <memcmp>:
 8007cf4:	b510      	push	{r4, lr}
 8007cf6:	3901      	subs	r1, #1
 8007cf8:	4402      	add	r2, r0
 8007cfa:	4290      	cmp	r0, r2
 8007cfc:	d101      	bne.n	8007d02 <memcmp+0xe>
 8007cfe:	2000      	movs	r0, #0
 8007d00:	e005      	b.n	8007d0e <memcmp+0x1a>
 8007d02:	7803      	ldrb	r3, [r0, #0]
 8007d04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007d08:	42a3      	cmp	r3, r4
 8007d0a:	d001      	beq.n	8007d10 <memcmp+0x1c>
 8007d0c:	1b18      	subs	r0, r3, r4
 8007d0e:	bd10      	pop	{r4, pc}
 8007d10:	3001      	adds	r0, #1
 8007d12:	e7f2      	b.n	8007cfa <memcmp+0x6>

08007d14 <memset>:
 8007d14:	4402      	add	r2, r0
 8007d16:	4603      	mov	r3, r0
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d100      	bne.n	8007d1e <memset+0xa>
 8007d1c:	4770      	bx	lr
 8007d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d22:	e7f9      	b.n	8007d18 <memset+0x4>

08007d24 <__libc_init_array>:
 8007d24:	b570      	push	{r4, r5, r6, lr}
 8007d26:	4d0d      	ldr	r5, [pc, #52]	@ (8007d5c <__libc_init_array+0x38>)
 8007d28:	4c0d      	ldr	r4, [pc, #52]	@ (8007d60 <__libc_init_array+0x3c>)
 8007d2a:	1b64      	subs	r4, r4, r5
 8007d2c:	10a4      	asrs	r4, r4, #2
 8007d2e:	2600      	movs	r6, #0
 8007d30:	42a6      	cmp	r6, r4
 8007d32:	d109      	bne.n	8007d48 <__libc_init_array+0x24>
 8007d34:	4d0b      	ldr	r5, [pc, #44]	@ (8007d64 <__libc_init_array+0x40>)
 8007d36:	4c0c      	ldr	r4, [pc, #48]	@ (8007d68 <__libc_init_array+0x44>)
 8007d38:	f000 f826 	bl	8007d88 <_init>
 8007d3c:	1b64      	subs	r4, r4, r5
 8007d3e:	10a4      	asrs	r4, r4, #2
 8007d40:	2600      	movs	r6, #0
 8007d42:	42a6      	cmp	r6, r4
 8007d44:	d105      	bne.n	8007d52 <__libc_init_array+0x2e>
 8007d46:	bd70      	pop	{r4, r5, r6, pc}
 8007d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d4c:	4798      	blx	r3
 8007d4e:	3601      	adds	r6, #1
 8007d50:	e7ee      	b.n	8007d30 <__libc_init_array+0xc>
 8007d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d56:	4798      	blx	r3
 8007d58:	3601      	adds	r6, #1
 8007d5a:	e7f2      	b.n	8007d42 <__libc_init_array+0x1e>
 8007d5c:	08007f48 	.word	0x08007f48
 8007d60:	08007f48 	.word	0x08007f48
 8007d64:	08007f48 	.word	0x08007f48
 8007d68:	08007f4c 	.word	0x08007f4c

08007d6c <memcpy>:
 8007d6c:	440a      	add	r2, r1
 8007d6e:	4291      	cmp	r1, r2
 8007d70:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d74:	d100      	bne.n	8007d78 <memcpy+0xc>
 8007d76:	4770      	bx	lr
 8007d78:	b510      	push	{r4, lr}
 8007d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d82:	4291      	cmp	r1, r2
 8007d84:	d1f9      	bne.n	8007d7a <memcpy+0xe>
 8007d86:	bd10      	pop	{r4, pc}

08007d88 <_init>:
 8007d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8a:	bf00      	nop
 8007d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d8e:	bc08      	pop	{r3}
 8007d90:	469e      	mov	lr, r3
 8007d92:	4770      	bx	lr

08007d94 <_fini>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	bf00      	nop
 8007d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9a:	bc08      	pop	{r3}
 8007d9c:	469e      	mov	lr, r3
 8007d9e:	4770      	bx	lr
