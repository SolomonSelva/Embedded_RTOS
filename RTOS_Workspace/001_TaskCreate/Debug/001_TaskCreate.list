
001_TaskCreate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ce4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08007ee4  08007ee4  00008ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008098  08008098  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  08008098  08008098  00009098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080a0  080080a0  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080a0  080080a0  000090a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080080a4  080080a4  000090a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080080a8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c5dc  2000006c  08008114  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c648  08008114  0000a648  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160b9  00000000  00000000  0000a09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003120  00000000  00000000  00020153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  00023278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff5  00000000  00000000  00024738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c0b8  00000000  00000000  0002572d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001989d  00000000  00000000  000517e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116a03  00000000  00000000  0006b082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181a85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bd0  00000000  00000000  00181ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ab  00000000  00000000  00187698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000006c 	.word	0x2000006c
 800021c:	00000000 	.word	0x00000000
 8000220:	08007ecc 	.word	0x08007ecc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000070 	.word	0x20000070
 800023c:	08007ecc 	.word	0x08007ecc

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	2000bb28 	.word	0x2000bb28
	...

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 fb12 	bl	8000c9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f83d 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 f8a5 	bl	80007cc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

	//NVIC_SetPriorityGrouping(0);

	/* Enable the CYcle counting */
	DWT_CTRL |= (1 << 0);
 8000682:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <main+0x68>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a14      	ldr	r2, [pc, #80]	@ (80006d8 <main+0x68>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6013      	str	r3, [r2, #0]

	SEGGER_UART_init(500000);
 800068e:	4813      	ldr	r0, [pc, #76]	@ (80006dc <main+0x6c>)
 8000690:	f004 fd04 	bl	800509c <SEGGER_UART_init>

	SEGGER_SYSVIEW_Conf();
 8000694:	f004 fb2c 	bl	8004cf0 <SEGGER_SYSVIEW_Conf>
	//SEGGER_SYSVIEW_Start();


	status = xTaskCreate(task1_handler, "task-1", 200, "Hello World from Task-1", 2, &task1_handle);
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2302      	movs	r3, #2
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <main+0x70>)
 80006a4:	22c8      	movs	r2, #200	@ 0xc8
 80006a6:	490f      	ldr	r1, [pc, #60]	@ (80006e4 <main+0x74>)
 80006a8:	480f      	ldr	r0, [pc, #60]	@ (80006e8 <main+0x78>)
 80006aa:	f002 fa67 	bl	8002b7c <xTaskCreate>
 80006ae:	60f8      	str	r0, [r7, #12]

	configASSERT(status = pdPASS);
 80006b0:	2301      	movs	r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]

	status = xTaskCreate(task2_handler, "task-2", 200, "Hello World from Task-2", 2, &task2_handle);
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	2302      	movs	r3, #2
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <main+0x7c>)
 80006be:	22c8      	movs	r2, #200	@ 0xc8
 80006c0:	490b      	ldr	r1, [pc, #44]	@ (80006f0 <main+0x80>)
 80006c2:	480c      	ldr	r0, [pc, #48]	@ (80006f4 <main+0x84>)
 80006c4:	f002 fa5a 	bl	8002b7c <xTaskCreate>
 80006c8:	60f8      	str	r0, [r7, #12]

	configASSERT(status = pdPASS);
 80006ca:	2301      	movs	r3, #1
 80006cc:	60fb      	str	r3, [r7, #12]

	//STart the FreeRTOS Scheduler
	vTaskStartScheduler();
 80006ce:	f002 fbff 	bl	8002ed0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80006d2:	bf00      	nop
 80006d4:	e7fd      	b.n	80006d2 <main+0x62>
 80006d6:	bf00      	nop
 80006d8:	e0001000 	.word	0xe0001000
 80006dc:	0007a120 	.word	0x0007a120
 80006e0:	08007ee4 	.word	0x08007ee4
 80006e4:	08007efc 	.word	0x08007efc
 80006e8:	080009f9 	.word	0x080009f9
 80006ec:	08007f04 	.word	0x08007f04
 80006f0:	08007f1c 	.word	0x08007f1c
 80006f4:	08000a35 	.word	0x08000a35

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	@ 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2234      	movs	r2, #52	@ 0x34
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f006 ff58 	bl	80075bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <SystemClock_Config+0xcc>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000720:	4a28      	ldr	r2, [pc, #160]	@ (80007c4 <SystemClock_Config+0xcc>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	@ 0x40
 8000728:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <SystemClock_Config+0xcc>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000734:	4b24      	ldr	r3, [pc, #144]	@ (80007c8 <SystemClock_Config+0xd0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800073c:	4a22      	ldr	r2, [pc, #136]	@ (80007c8 <SystemClock_Config+0xd0>)
 800073e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b20      	ldr	r3, [pc, #128]	@ (80007c8 <SystemClock_Config+0xd0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000750:	2302      	movs	r3, #2
 8000752:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2310      	movs	r3, #16
 800075a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2302      	movs	r3, #2
 800075e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000760:	2300      	movs	r3, #0
 8000762:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000764:	2308      	movs	r3, #8
 8000766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000768:	23a8      	movs	r3, #168	@ 0xa8
 800076a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fd63 	bl	8001248 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000788:	f000 f984 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000790:	2302      	movs	r3, #2
 8000792:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000798:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800079c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800079e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	2105      	movs	r1, #5
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fffa 	bl	80017a4 <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007b6:	f000 f96d 	bl	8000a94 <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3750      	adds	r7, #80	@ 0x50
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40007000 	.word	0x40007000

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	@ 0x30
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b7f      	ldr	r3, [pc, #508]	@ (80009e0 <MX_GPIO_Init+0x214>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a7e      	ldr	r2, [pc, #504]	@ (80009e0 <MX_GPIO_Init+0x214>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b7c      	ldr	r3, [pc, #496]	@ (80009e0 <MX_GPIO_Init+0x214>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	4b79      	ldr	r3, [pc, #484]	@ (80009e0 <MX_GPIO_Init+0x214>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a78      	ldr	r2, [pc, #480]	@ (80009e0 <MX_GPIO_Init+0x214>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b76      	ldr	r3, [pc, #472]	@ (80009e0 <MX_GPIO_Init+0x214>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b73      	ldr	r3, [pc, #460]	@ (80009e0 <MX_GPIO_Init+0x214>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a72      	ldr	r2, [pc, #456]	@ (80009e0 <MX_GPIO_Init+0x214>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b70      	ldr	r3, [pc, #448]	@ (80009e0 <MX_GPIO_Init+0x214>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b6d      	ldr	r3, [pc, #436]	@ (80009e0 <MX_GPIO_Init+0x214>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a6c      	ldr	r2, [pc, #432]	@ (80009e0 <MX_GPIO_Init+0x214>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b6a      	ldr	r3, [pc, #424]	@ (80009e0 <MX_GPIO_Init+0x214>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	4b67      	ldr	r3, [pc, #412]	@ (80009e0 <MX_GPIO_Init+0x214>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a66      	ldr	r2, [pc, #408]	@ (80009e0 <MX_GPIO_Init+0x214>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b64      	ldr	r3, [pc, #400]	@ (80009e0 <MX_GPIO_Init+0x214>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085a:	4b61      	ldr	r3, [pc, #388]	@ (80009e0 <MX_GPIO_Init+0x214>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a60      	ldr	r2, [pc, #384]	@ (80009e0 <MX_GPIO_Init+0x214>)
 8000860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b5e      	ldr	r3, [pc, #376]	@ (80009e0 <MX_GPIO_Init+0x214>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000878:	485a      	ldr	r0, [pc, #360]	@ (80009e4 <MX_GPIO_Init+0x218>)
 800087a:	f000 fccb 	bl	8001214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2140      	movs	r1, #64	@ 0x40
 8000882:	4859      	ldr	r0, [pc, #356]	@ (80009e8 <MX_GPIO_Init+0x21c>)
 8000884:	f000 fcc6 	bl	8001214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4853      	ldr	r0, [pc, #332]	@ (80009ec <MX_GPIO_Init+0x220>)
 80008a0:	f000 fb0c 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008a4:	2332      	movs	r3, #50	@ 0x32
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b4:	230b      	movs	r3, #11
 80008b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	484b      	ldr	r0, [pc, #300]	@ (80009ec <MX_GPIO_Init+0x220>)
 80008c0:	f000 fafc 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008c4:	2386      	movs	r3, #134	@ 0x86
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d0:	2303      	movs	r3, #3
 80008d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008d4:	230b      	movs	r3, #11
 80008d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4844      	ldr	r0, [pc, #272]	@ (80009f0 <MX_GPIO_Init+0x224>)
 80008e0:	f000 faec 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008e4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4839      	ldr	r0, [pc, #228]	@ (80009e4 <MX_GPIO_Init+0x218>)
 80008fe:	f000 fadd 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000902:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000910:	2303      	movs	r3, #3
 8000912:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000914:	230b      	movs	r3, #11
 8000916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	4831      	ldr	r0, [pc, #196]	@ (80009e4 <MX_GPIO_Init+0x218>)
 8000920:	f000 facc 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000924:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000936:	2307      	movs	r3, #7
 8000938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	482c      	ldr	r0, [pc, #176]	@ (80009f4 <MX_GPIO_Init+0x228>)
 8000942:	f000 fabb 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000946:	2340      	movs	r3, #64	@ 0x40
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4822      	ldr	r0, [pc, #136]	@ (80009e8 <MX_GPIO_Init+0x21c>)
 800095e:	f000 faad 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000962:	2380      	movs	r3, #128	@ 0x80
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	481c      	ldr	r0, [pc, #112]	@ (80009e8 <MX_GPIO_Init+0x21c>)
 8000976:	f000 faa1 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800097a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800098c:	230a      	movs	r3, #10
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4816      	ldr	r0, [pc, #88]	@ (80009f0 <MX_GPIO_Init+0x224>)
 8000998:	f000 fa90 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800099c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	480f      	ldr	r0, [pc, #60]	@ (80009f0 <MX_GPIO_Init+0x224>)
 80009b2:	f000 fa83 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009b6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009c8:	230b      	movs	r3, #11
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <MX_GPIO_Init+0x21c>)
 80009d4:	f000 fa72 	bl	8000ebc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d8:	bf00      	nop
 80009da:	3730      	adds	r7, #48	@ 0x30
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020400 	.word	0x40020400
 80009e8:	40021800 	.word	0x40021800
 80009ec:	40020800 	.word	0x40020800
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40020c00 	.word	0x40020c00

080009f8 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b09c      	sub	sp, #112	@ 0x70
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

	while (1)
	{
		char msg[100];

		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a00:	f107 000c 	add.w	r0, r7, #12
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a09      	ldr	r2, [pc, #36]	@ (8000a2c <task1_handler+0x34>)
 8000a08:	2164      	movs	r1, #100	@ 0x64
 8000a0a:	f006 fd93 	bl	8007534 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	4618      	mov	r0, r3
 8000a14:	f006 fcf0 	bl	80073f8 <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD();
 8000a18:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <task1_handler+0x38>)
 8000a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	f3bf 8f4f 	dsb	sy
 8000a24:	f3bf 8f6f 	isb	sy
	{
 8000a28:	bf00      	nop
 8000a2a:	e7e9      	b.n	8000a00 <task1_handler+0x8>
 8000a2c:	08007f24 	.word	0x08007f24
 8000a30:	e000ed04 	.word	0xe000ed04

08000a34 <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b09c      	sub	sp, #112	@ 0x70
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		char msg[100];

		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a3c:	f107 000c 	add.w	r0, r7, #12
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a09      	ldr	r2, [pc, #36]	@ (8000a68 <task2_handler+0x34>)
 8000a44:	2164      	movs	r1, #100	@ 0x64
 8000a46:	f006 fd75 	bl	8007534 <sniprintf>
		// SEGGER_PRintf needs formatted string, snprintf is used.

		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f006 fcd2 	bl	80073f8 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000a54:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <task2_handler+0x38>)
 8000a56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	f3bf 8f4f 	dsb	sy
 8000a60:	f3bf 8f6f 	isb	sy
	{
 8000a64:	bf00      	nop
 8000a66:	e7e9      	b.n	8000a3c <task2_handler+0x8>
 8000a68:	08007f24 	.word	0x08007f24
 8000a6c:	e000ed04 	.word	0xe000ed04

08000a70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a04      	ldr	r2, [pc, #16]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d101      	bne.n	8000a86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a82:	f000 f919 	bl	8000cb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40001000 	.word	0x40001000

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <Error_Handler+0x8>

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac2:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	@ 0x38
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000af8:	4b33      	ldr	r3, [pc, #204]	@ (8000bc8 <HAL_InitTick+0xe0>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afc:	4a32      	ldr	r2, [pc, #200]	@ (8000bc8 <HAL_InitTick+0xe0>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b04:	4b30      	ldr	r3, [pc, #192]	@ (8000bc8 <HAL_InitTick+0xe0>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b08:	f003 0310 	and.w	r3, r3, #16
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b10:	f107 0210 	add.w	r2, r7, #16
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 f852 	bl	8001bc4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b20:	6a3b      	ldr	r3, [r7, #32]
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d103      	bne.n	8000b32 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b2a:	f001 f837 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 8000b2e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b30:	e004      	b.n	8000b3c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b32:	f001 f833 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 8000b36:	4603      	mov	r3, r0
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b3e:	4a23      	ldr	r2, [pc, #140]	@ (8000bcc <HAL_InitTick+0xe4>)
 8000b40:	fba2 2303 	umull	r2, r3, r2, r3
 8000b44:	0c9b      	lsrs	r3, r3, #18
 8000b46:	3b01      	subs	r3, #1
 8000b48:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	@ (8000bd0 <HAL_InitTick+0xe8>)
 8000b4c:	4a21      	ldr	r2, [pc, #132]	@ (8000bd4 <HAL_InitTick+0xec>)
 8000b4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <HAL_InitTick+0xe8>)
 8000b52:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b56:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b58:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd0 <HAL_InitTick+0xe8>)
 8000b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b5c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <HAL_InitTick+0xe8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <HAL_InitTick+0xe8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <HAL_InitTick+0xe8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b70:	4817      	ldr	r0, [pc, #92]	@ (8000bd0 <HAL_InitTick+0xe8>)
 8000b72:	f001 f859 	bl	8001c28 <HAL_TIM_Base_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d11b      	bne.n	8000bbc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b84:	4812      	ldr	r0, [pc, #72]	@ (8000bd0 <HAL_InitTick+0xe8>)
 8000b86:	f001 f8b1 	bl	8001cec <HAL_TIM_Base_Start_IT>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d111      	bne.n	8000bbc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b98:	2036      	movs	r0, #54	@ 0x36
 8000b9a:	f000 f981 	bl	8000ea0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d808      	bhi.n	8000bb6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	2036      	movs	r0, #54	@ 0x36
 8000baa:	f000 f95d 	bl	8000e68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bae:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <HAL_InitTick+0xf0>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	e002      	b.n	8000bbc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3738      	adds	r7, #56	@ 0x38
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	431bde83 	.word	0x431bde83
 8000bd0:	20000088 	.word	0x20000088
 8000bd4:	40001000 	.word	0x40001000
 8000bd8:	20000004 	.word	0x20000004

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <NMI_Handler+0x4>

08000be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c18:	4802      	ldr	r0, [pc, #8]	@ (8000c24 <TIM6_DAC_IRQHandler+0x10>)
 8000c1a:	f001 f8df 	bl	8001ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000088 	.word	0x20000088

08000c28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <SystemInit+0x20>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c32:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <SystemInit+0x20>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c50:	f7ff ffea 	bl	8000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c54:	480c      	ldr	r0, [pc, #48]	@ (8000c88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c56:	490d      	ldr	r1, [pc, #52]	@ (8000c8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c58:	4a0d      	ldr	r2, [pc, #52]	@ (8000c90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f006 fca7 	bl	80075cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7e:	f7ff fcf7 	bl	8000670 <main>
  bx  lr    
 8000c82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c84:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c90:	080080a8 	.word	0x080080a8
  ldr r2, =_sbss
 8000c94:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c98:	2000c648 	.word	0x2000c648

08000c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC_IRQHandler>

08000c9e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca2:	2003      	movs	r0, #3
 8000ca4:	f000 f8d5 	bl	8000e52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca8:	200f      	movs	r0, #15
 8000caa:	f7ff ff1d 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cae:	f7ff fef7 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_IncTick+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_IncTick+0x24>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <HAL_IncTick+0x24>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	200000d4 	.word	0x200000d4

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	@ (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	200000d4 	.word	0x200000d4

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <__NVIC_SetPriorityGrouping+0x40>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	4313      	orrs	r3, r2
 8000d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d26:	4a04      	ldr	r2, [pc, #16]	@ (8000d38 <__NVIC_SetPriorityGrouping+0x40>)
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	60d3      	str	r3, [r2, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00
 8000d3c:	05fa0000 	.word	0x05fa0000

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db0b      	blt.n	8000d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f003 021f 	and.w	r2, r3, #31
 8000d74:	4907      	ldr	r1, [pc, #28]	@ (8000d94 <__NVIC_EnableIRQ+0x38>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	@ (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	@ (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	@ 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
         );
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	@ 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ff4c 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7a:	f7ff ff61 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000e7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	68b9      	ldr	r1, [r7, #8]
 8000e84:	6978      	ldr	r0, [r7, #20]
 8000e86:	f7ff ffb1 	bl	8000dec <NVIC_EncodePriority>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff80 	bl	8000d98 <__NVIC_SetPriority>
}
 8000e98:	bf00      	nop
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ff54 	bl	8000d5c <__NVIC_EnableIRQ>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	@ 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
 8000eda:	e175      	b.n	80011c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000edc:	2201      	movs	r2, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	f040 8164 	bne.w	80011c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d005      	beq.n	8000f12 <HAL_GPIO_Init+0x56>
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d130      	bne.n	8000f74 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	091b      	lsrs	r3, r3, #4
 8000f5e:	f003 0201 	and.w	r2, r3, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d017      	beq.n	8000fb0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d123      	bne.n	8001004 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	08da      	lsrs	r2, r3, #3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3208      	adds	r2, #8
 8000fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	f003 0307 	and.w	r3, r3, #7
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	220f      	movs	r2, #15
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	691a      	ldr	r2, [r3, #16]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	08da      	lsrs	r2, r3, #3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3208      	adds	r2, #8
 8000ffe:	69b9      	ldr	r1, [r7, #24]
 8001000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0203 	and.w	r2, r3, #3
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001040:	2b00      	cmp	r3, #0
 8001042:	f000 80be 	beq.w	80011c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	4b66      	ldr	r3, [pc, #408]	@ (80011e0 <HAL_GPIO_Init+0x324>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104a:	4a65      	ldr	r2, [pc, #404]	@ (80011e0 <HAL_GPIO_Init+0x324>)
 800104c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001050:	6453      	str	r3, [r2, #68]	@ 0x44
 8001052:	4b63      	ldr	r3, [pc, #396]	@ (80011e0 <HAL_GPIO_Init+0x324>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001056:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800105e:	4a61      	ldr	r2, [pc, #388]	@ (80011e4 <HAL_GPIO_Init+0x328>)
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	3302      	adds	r3, #2
 8001066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	220f      	movs	r2, #15
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a58      	ldr	r2, [pc, #352]	@ (80011e8 <HAL_GPIO_Init+0x32c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d037      	beq.n	80010fa <HAL_GPIO_Init+0x23e>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a57      	ldr	r2, [pc, #348]	@ (80011ec <HAL_GPIO_Init+0x330>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d031      	beq.n	80010f6 <HAL_GPIO_Init+0x23a>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a56      	ldr	r2, [pc, #344]	@ (80011f0 <HAL_GPIO_Init+0x334>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d02b      	beq.n	80010f2 <HAL_GPIO_Init+0x236>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a55      	ldr	r2, [pc, #340]	@ (80011f4 <HAL_GPIO_Init+0x338>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d025      	beq.n	80010ee <HAL_GPIO_Init+0x232>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a54      	ldr	r2, [pc, #336]	@ (80011f8 <HAL_GPIO_Init+0x33c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d01f      	beq.n	80010ea <HAL_GPIO_Init+0x22e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a53      	ldr	r2, [pc, #332]	@ (80011fc <HAL_GPIO_Init+0x340>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d019      	beq.n	80010e6 <HAL_GPIO_Init+0x22a>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a52      	ldr	r2, [pc, #328]	@ (8001200 <HAL_GPIO_Init+0x344>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0x226>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a51      	ldr	r2, [pc, #324]	@ (8001204 <HAL_GPIO_Init+0x348>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00d      	beq.n	80010de <HAL_GPIO_Init+0x222>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a50      	ldr	r2, [pc, #320]	@ (8001208 <HAL_GPIO_Init+0x34c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d007      	beq.n	80010da <HAL_GPIO_Init+0x21e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4f      	ldr	r2, [pc, #316]	@ (800120c <HAL_GPIO_Init+0x350>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_GPIO_Init+0x21a>
 80010d2:	2309      	movs	r3, #9
 80010d4:	e012      	b.n	80010fc <HAL_GPIO_Init+0x240>
 80010d6:	230a      	movs	r3, #10
 80010d8:	e010      	b.n	80010fc <HAL_GPIO_Init+0x240>
 80010da:	2308      	movs	r3, #8
 80010dc:	e00e      	b.n	80010fc <HAL_GPIO_Init+0x240>
 80010de:	2307      	movs	r3, #7
 80010e0:	e00c      	b.n	80010fc <HAL_GPIO_Init+0x240>
 80010e2:	2306      	movs	r3, #6
 80010e4:	e00a      	b.n	80010fc <HAL_GPIO_Init+0x240>
 80010e6:	2305      	movs	r3, #5
 80010e8:	e008      	b.n	80010fc <HAL_GPIO_Init+0x240>
 80010ea:	2304      	movs	r3, #4
 80010ec:	e006      	b.n	80010fc <HAL_GPIO_Init+0x240>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e004      	b.n	80010fc <HAL_GPIO_Init+0x240>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e002      	b.n	80010fc <HAL_GPIO_Init+0x240>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_GPIO_Init+0x240>
 80010fa:	2300      	movs	r3, #0
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	f002 0203 	and.w	r2, r2, #3
 8001102:	0092      	lsls	r2, r2, #2
 8001104:	4093      	lsls	r3, r2
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800110c:	4935      	ldr	r1, [pc, #212]	@ (80011e4 <HAL_GPIO_Init+0x328>)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111a:	4b3d      	ldr	r3, [pc, #244]	@ (8001210 <HAL_GPIO_Init+0x354>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800113e:	4a34      	ldr	r2, [pc, #208]	@ (8001210 <HAL_GPIO_Init+0x354>)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001144:	4b32      	ldr	r3, [pc, #200]	@ (8001210 <HAL_GPIO_Init+0x354>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001168:	4a29      	ldr	r2, [pc, #164]	@ (8001210 <HAL_GPIO_Init+0x354>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800116e:	4b28      	ldr	r3, [pc, #160]	@ (8001210 <HAL_GPIO_Init+0x354>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001192:	4a1f      	ldr	r2, [pc, #124]	@ (8001210 <HAL_GPIO_Init+0x354>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001198:	4b1d      	ldr	r3, [pc, #116]	@ (8001210 <HAL_GPIO_Init+0x354>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011bc:	4a14      	ldr	r2, [pc, #80]	@ (8001210 <HAL_GPIO_Init+0x354>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3301      	adds	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	2b0f      	cmp	r3, #15
 80011cc:	f67f ae86 	bls.w	8000edc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3724      	adds	r7, #36	@ 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40013800 	.word	0x40013800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40020400 	.word	0x40020400
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40020c00 	.word	0x40020c00
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40021400 	.word	0x40021400
 8001200:	40021800 	.word	0x40021800
 8001204:	40021c00 	.word	0x40021c00
 8001208:	40022000 	.word	0x40022000
 800120c:	40022400 	.word	0x40022400
 8001210:	40013c00 	.word	0x40013c00

08001214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	807b      	strh	r3, [r7, #2]
 8001220:	4613      	mov	r3, r2
 8001222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001224:	787b      	ldrb	r3, [r7, #1]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800122a:	887a      	ldrh	r2, [r7, #2]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001230:	e003      	b.n	800123a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001232:	887b      	ldrh	r3, [r7, #2]
 8001234:	041a      	lsls	r2, r3, #16
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	619a      	str	r2, [r3, #24]
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001250:	2300      	movs	r3, #0
 8001252:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e29b      	b.n	8001796 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 8087 	beq.w	800137a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800126c:	4b96      	ldr	r3, [pc, #600]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 030c 	and.w	r3, r3, #12
 8001274:	2b04      	cmp	r3, #4
 8001276:	d00c      	beq.n	8001292 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001278:	4b93      	ldr	r3, [pc, #588]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 030c 	and.w	r3, r3, #12
 8001280:	2b08      	cmp	r3, #8
 8001282:	d112      	bne.n	80012aa <HAL_RCC_OscConfig+0x62>
 8001284:	4b90      	ldr	r3, [pc, #576]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800128c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001290:	d10b      	bne.n	80012aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001292:	4b8d      	ldr	r3, [pc, #564]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d06c      	beq.n	8001378 <HAL_RCC_OscConfig+0x130>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d168      	bne.n	8001378 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e275      	b.n	8001796 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012b2:	d106      	bne.n	80012c2 <HAL_RCC_OscConfig+0x7a>
 80012b4:	4b84      	ldr	r3, [pc, #528]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a83      	ldr	r2, [pc, #524]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 80012ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	e02e      	b.n	8001320 <HAL_RCC_OscConfig+0xd8>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x9c>
 80012ca:	4b7f      	ldr	r3, [pc, #508]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a7e      	ldr	r2, [pc, #504]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 80012d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b7c      	ldr	r3, [pc, #496]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a7b      	ldr	r2, [pc, #492]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 80012dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e01d      	b.n	8001320 <HAL_RCC_OscConfig+0xd8>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012ec:	d10c      	bne.n	8001308 <HAL_RCC_OscConfig+0xc0>
 80012ee:	4b76      	ldr	r3, [pc, #472]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a75      	ldr	r2, [pc, #468]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 80012f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4b73      	ldr	r3, [pc, #460]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a72      	ldr	r2, [pc, #456]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 8001300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e00b      	b.n	8001320 <HAL_RCC_OscConfig+0xd8>
 8001308:	4b6f      	ldr	r3, [pc, #444]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a6e      	ldr	r2, [pc, #440]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 800130e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	4b6c      	ldr	r3, [pc, #432]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a6b      	ldr	r2, [pc, #428]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 800131a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800131e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d013      	beq.n	8001350 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001328:	f7ff fcda 	bl	8000ce0 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001330:	f7ff fcd6 	bl	8000ce0 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b64      	cmp	r3, #100	@ 0x64
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e229      	b.n	8001796 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001342:	4b61      	ldr	r3, [pc, #388]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f0      	beq.n	8001330 <HAL_RCC_OscConfig+0xe8>
 800134e:	e014      	b.n	800137a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff fcc6 	bl	8000ce0 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fcc2 	bl	8000ce0 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	@ 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e215      	b.n	8001796 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136a:	4b57      	ldr	r3, [pc, #348]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x110>
 8001376:	e000      	b.n	800137a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d069      	beq.n	800145a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001386:	4b50      	ldr	r3, [pc, #320]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00b      	beq.n	80013aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001392:	4b4d      	ldr	r3, [pc, #308]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 030c 	and.w	r3, r3, #12
 800139a:	2b08      	cmp	r3, #8
 800139c:	d11c      	bne.n	80013d8 <HAL_RCC_OscConfig+0x190>
 800139e:	4b4a      	ldr	r3, [pc, #296]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d116      	bne.n	80013d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013aa:	4b47      	ldr	r3, [pc, #284]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d005      	beq.n	80013c2 <HAL_RCC_OscConfig+0x17a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d001      	beq.n	80013c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e1e9      	b.n	8001796 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c2:	4b41      	ldr	r3, [pc, #260]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	493d      	ldr	r1, [pc, #244]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d6:	e040      	b.n	800145a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d023      	beq.n	8001428 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e0:	4b39      	ldr	r3, [pc, #228]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a38      	ldr	r2, [pc, #224]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fc78 	bl	8000ce0 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f4:	f7ff fc74 	bl	8000ce0 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e1c7      	b.n	8001796 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001406:	4b30      	ldr	r3, [pc, #192]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001412:	4b2d      	ldr	r3, [pc, #180]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4929      	ldr	r1, [pc, #164]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]
 8001426:	e018      	b.n	800145a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001428:	4b27      	ldr	r3, [pc, #156]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a26      	ldr	r2, [pc, #152]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 800142e:	f023 0301 	bic.w	r3, r3, #1
 8001432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fc54 	bl	8000ce0 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143c:	f7ff fc50 	bl	8000ce0 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e1a3      	b.n	8001796 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144e:	4b1e      	ldr	r3, [pc, #120]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	2b00      	cmp	r3, #0
 8001464:	d038      	beq.n	80014d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d019      	beq.n	80014a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800146e:	4b16      	ldr	r3, [pc, #88]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 8001470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001472:	4a15      	ldr	r2, [pc, #84]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147a:	f7ff fc31 	bl	8000ce0 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001482:	f7ff fc2d 	bl	8000ce0 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e180      	b.n	8001796 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001494:	4b0c      	ldr	r3, [pc, #48]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 8001496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x23a>
 80014a0:	e01a      	b.n	80014d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a2:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 80014a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014a6:	4a08      	ldr	r2, [pc, #32]	@ (80014c8 <HAL_RCC_OscConfig+0x280>)
 80014a8:	f023 0301 	bic.w	r3, r3, #1
 80014ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ae:	f7ff fc17 	bl	8000ce0 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b4:	e00a      	b.n	80014cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b6:	f7ff fc13 	bl	8000ce0 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d903      	bls.n	80014cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e166      	b.n	8001796 <HAL_RCC_OscConfig+0x54e>
 80014c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014cc:	4b92      	ldr	r3, [pc, #584]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 80014ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1ee      	bne.n	80014b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80a4 	beq.w	800162e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e6:	4b8c      	ldr	r3, [pc, #560]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10d      	bne.n	800150e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b89      	ldr	r3, [pc, #548]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	4a88      	ldr	r2, [pc, #544]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fe:	4b86      	ldr	r3, [pc, #536]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800150a:	2301      	movs	r3, #1
 800150c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800150e:	4b83      	ldr	r3, [pc, #524]	@ (800171c <HAL_RCC_OscConfig+0x4d4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d118      	bne.n	800154c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800151a:	4b80      	ldr	r3, [pc, #512]	@ (800171c <HAL_RCC_OscConfig+0x4d4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a7f      	ldr	r2, [pc, #508]	@ (800171c <HAL_RCC_OscConfig+0x4d4>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001526:	f7ff fbdb 	bl	8000ce0 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152e:	f7ff fbd7 	bl	8000ce0 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b64      	cmp	r3, #100	@ 0x64
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e12a      	b.n	8001796 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001540:	4b76      	ldr	r3, [pc, #472]	@ (800171c <HAL_RCC_OscConfig+0x4d4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d106      	bne.n	8001562 <HAL_RCC_OscConfig+0x31a>
 8001554:	4b70      	ldr	r3, [pc, #448]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001558:	4a6f      	ldr	r2, [pc, #444]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001560:	e02d      	b.n	80015be <HAL_RCC_OscConfig+0x376>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x33c>
 800156a:	4b6b      	ldr	r3, [pc, #428]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 800156c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800156e:	4a6a      	ldr	r2, [pc, #424]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6713      	str	r3, [r2, #112]	@ 0x70
 8001576:	4b68      	ldr	r3, [pc, #416]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800157a:	4a67      	ldr	r2, [pc, #412]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 800157c:	f023 0304 	bic.w	r3, r3, #4
 8001580:	6713      	str	r3, [r2, #112]	@ 0x70
 8001582:	e01c      	b.n	80015be <HAL_RCC_OscConfig+0x376>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b05      	cmp	r3, #5
 800158a:	d10c      	bne.n	80015a6 <HAL_RCC_OscConfig+0x35e>
 800158c:	4b62      	ldr	r3, [pc, #392]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 800158e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001590:	4a61      	ldr	r2, [pc, #388]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 8001592:	f043 0304 	orr.w	r3, r3, #4
 8001596:	6713      	str	r3, [r2, #112]	@ 0x70
 8001598:	4b5f      	ldr	r3, [pc, #380]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159c:	4a5e      	ldr	r2, [pc, #376]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a4:	e00b      	b.n	80015be <HAL_RCC_OscConfig+0x376>
 80015a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 80015ac:	f023 0301 	bic.w	r3, r3, #1
 80015b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b2:	4b59      	ldr	r3, [pc, #356]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b6:	4a58      	ldr	r2, [pc, #352]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 80015b8:	f023 0304 	bic.w	r3, r3, #4
 80015bc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d015      	beq.n	80015f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c6:	f7ff fb8b 	bl	8000ce0 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015cc:	e00a      	b.n	80015e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ce:	f7ff fb87 	bl	8000ce0 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015dc:	4293      	cmp	r3, r2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e0d8      	b.n	8001796 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e4:	4b4c      	ldr	r3, [pc, #304]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 80015e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0ee      	beq.n	80015ce <HAL_RCC_OscConfig+0x386>
 80015f0:	e014      	b.n	800161c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f2:	f7ff fb75 	bl	8000ce0 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff fb71 	bl	8000ce0 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e0c2      	b.n	8001796 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001610:	4b41      	ldr	r3, [pc, #260]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1ee      	bne.n	80015fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800161c:	7dfb      	ldrb	r3, [r7, #23]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d105      	bne.n	800162e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001622:	4b3d      	ldr	r3, [pc, #244]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	4a3c      	ldr	r2, [pc, #240]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 8001628:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800162c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 80ae 	beq.w	8001794 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001638:	4b37      	ldr	r3, [pc, #220]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	2b08      	cmp	r3, #8
 8001642:	d06d      	beq.n	8001720 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d14b      	bne.n	80016e4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164c:	4b32      	ldr	r3, [pc, #200]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a31      	ldr	r2, [pc, #196]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 8001652:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fb42 	bl	8000ce0 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001660:	f7ff fb3e 	bl	8000ce0 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e091      	b.n	8001796 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001672:	4b29      	ldr	r3, [pc, #164]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69da      	ldr	r2, [r3, #28]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168c:	019b      	lsls	r3, r3, #6
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001694:	085b      	lsrs	r3, r3, #1
 8001696:	3b01      	subs	r3, #1
 8001698:	041b      	lsls	r3, r3, #16
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a0:	061b      	lsls	r3, r3, #24
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a8:	071b      	lsls	r3, r3, #28
 80016aa:	491b      	ldr	r1, [pc, #108]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b0:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a18      	ldr	r2, [pc, #96]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 80016b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff fb10 	bl	8000ce0 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff fb0c 	bl	8000ce0 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e05f      	b.n	8001796 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d6:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x47c>
 80016e2:	e057      	b.n	8001794 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 80016ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff faf6 	bl	8000ce0 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff faf2 	bl	8000ce0 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e045      	b.n	8001796 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170a:	4b03      	ldr	r3, [pc, #12]	@ (8001718 <HAL_RCC_OscConfig+0x4d0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4b0>
 8001716:	e03d      	b.n	8001794 <HAL_RCC_OscConfig+0x54c>
 8001718:	40023800 	.word	0x40023800
 800171c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001720:	4b1f      	ldr	r3, [pc, #124]	@ (80017a0 <HAL_RCC_OscConfig+0x558>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d030      	beq.n	8001790 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d129      	bne.n	8001790 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d122      	bne.n	8001790 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001750:	4013      	ands	r3, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001756:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001758:	4293      	cmp	r3, r2
 800175a:	d119      	bne.n	8001790 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001766:	085b      	lsrs	r3, r3, #1
 8001768:	3b01      	subs	r3, #1
 800176a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d10f      	bne.n	8001790 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800177a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d107      	bne.n	8001790 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800

080017a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0d0      	b.n	800195e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d910      	bls.n	80017ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ca:	4b67      	ldr	r3, [pc, #412]	@ (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 020f 	bic.w	r2, r3, #15
 80017d2:	4965      	ldr	r1, [pc, #404]	@ (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017da:	4b63      	ldr	r3, [pc, #396]	@ (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d001      	beq.n	80017ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0b8      	b.n	800195e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d020      	beq.n	800183a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001804:	4b59      	ldr	r3, [pc, #356]	@ (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a58      	ldr	r2, [pc, #352]	@ (800196c <HAL_RCC_ClockConfig+0x1c8>)
 800180a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800180e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800181c:	4b53      	ldr	r3, [pc, #332]	@ (800196c <HAL_RCC_ClockConfig+0x1c8>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4a52      	ldr	r2, [pc, #328]	@ (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001822:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001826:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001828:	4b50      	ldr	r3, [pc, #320]	@ (800196c <HAL_RCC_ClockConfig+0x1c8>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	494d      	ldr	r1, [pc, #308]	@ (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001836:	4313      	orrs	r3, r2
 8001838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d040      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184e:	4b47      	ldr	r3, [pc, #284]	@ (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d115      	bne.n	8001886 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e07f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001866:	4b41      	ldr	r3, [pc, #260]	@ (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e073      	b.n	800195e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001876:	4b3d      	ldr	r3, [pc, #244]	@ (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e06b      	b.n	800195e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001886:	4b39      	ldr	r3, [pc, #228]	@ (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f023 0203 	bic.w	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4936      	ldr	r1, [pc, #216]	@ (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001894:	4313      	orrs	r3, r2
 8001896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001898:	f7ff fa22 	bl	8000ce0 <HAL_GetTick>
 800189c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	e00a      	b.n	80018b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a0:	f7ff fa1e 	bl	8000ce0 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e053      	b.n	800195e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	4b2d      	ldr	r3, [pc, #180]	@ (800196c <HAL_RCC_ClockConfig+0x1c8>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 020c 	and.w	r2, r3, #12
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d1eb      	bne.n	80018a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018c8:	4b27      	ldr	r3, [pc, #156]	@ (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d210      	bcs.n	80018f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d6:	4b24      	ldr	r3, [pc, #144]	@ (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 020f 	bic.w	r2, r3, #15
 80018de:	4922      	ldr	r1, [pc, #136]	@ (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b20      	ldr	r3, [pc, #128]	@ (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e032      	b.n	800195e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d008      	beq.n	8001916 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001904:	4b19      	ldr	r3, [pc, #100]	@ (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4916      	ldr	r1, [pc, #88]	@ (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d009      	beq.n	8001936 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001922:	4b12      	ldr	r3, [pc, #72]	@ (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	490e      	ldr	r1, [pc, #56]	@ (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001936:	f000 f821 	bl	800197c <HAL_RCC_GetSysClockFreq>
 800193a:	4602      	mov	r2, r0
 800193c:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <HAL_RCC_ClockConfig+0x1c8>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	490a      	ldr	r1, [pc, #40]	@ (8001970 <HAL_RCC_ClockConfig+0x1cc>)
 8001948:	5ccb      	ldrb	r3, [r1, r3]
 800194a:	fa22 f303 	lsr.w	r3, r2, r3
 800194e:	4a09      	ldr	r2, [pc, #36]	@ (8001974 <HAL_RCC_ClockConfig+0x1d0>)
 8001950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <HAL_RCC_ClockConfig+0x1d4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f8c6 	bl	8000ae8 <HAL_InitTick>

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023c00 	.word	0x40023c00
 800196c:	40023800 	.word	0x40023800
 8001970:	08008010 	.word	0x08008010
 8001974:	20000000 	.word	0x20000000
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800197c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001980:	b094      	sub	sp, #80	@ 0x50
 8001982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	647b      	str	r3, [r7, #68]	@ 0x44
 8001988:	2300      	movs	r3, #0
 800198a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800198c:	2300      	movs	r3, #0
 800198e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001994:	4b79      	ldr	r3, [pc, #484]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b08      	cmp	r3, #8
 800199e:	d00d      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x40>
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	f200 80e1 	bhi.w	8001b68 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x34>
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d003      	beq.n	80019b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80019ae:	e0db      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b0:	4b73      	ldr	r3, [pc, #460]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x204>)
 80019b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019b4:	e0db      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019b6:	4b72      	ldr	r3, [pc, #456]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x204>)
 80019b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019ba:	e0d8      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019bc:	4b6f      	ldr	r3, [pc, #444]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80019c6:	4b6d      	ldr	r3, [pc, #436]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d063      	beq.n	8001a9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d2:	4b6a      	ldr	r3, [pc, #424]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	099b      	lsrs	r3, r3, #6
 80019d8:	2200      	movs	r2, #0
 80019da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80019e6:	2300      	movs	r3, #0
 80019e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80019ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019ee:	4622      	mov	r2, r4
 80019f0:	462b      	mov	r3, r5
 80019f2:	f04f 0000 	mov.w	r0, #0
 80019f6:	f04f 0100 	mov.w	r1, #0
 80019fa:	0159      	lsls	r1, r3, #5
 80019fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a00:	0150      	lsls	r0, r2, #5
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4621      	mov	r1, r4
 8001a08:	1a51      	subs	r1, r2, r1
 8001a0a:	6139      	str	r1, [r7, #16]
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a20:	4659      	mov	r1, fp
 8001a22:	018b      	lsls	r3, r1, #6
 8001a24:	4651      	mov	r1, sl
 8001a26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a2a:	4651      	mov	r1, sl
 8001a2c:	018a      	lsls	r2, r1, #6
 8001a2e:	4651      	mov	r1, sl
 8001a30:	ebb2 0801 	subs.w	r8, r2, r1
 8001a34:	4659      	mov	r1, fp
 8001a36:	eb63 0901 	sbc.w	r9, r3, r1
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a4e:	4690      	mov	r8, r2
 8001a50:	4699      	mov	r9, r3
 8001a52:	4623      	mov	r3, r4
 8001a54:	eb18 0303 	adds.w	r3, r8, r3
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	462b      	mov	r3, r5
 8001a5c:	eb49 0303 	adc.w	r3, r9, r3
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a6e:	4629      	mov	r1, r5
 8001a70:	028b      	lsls	r3, r1, #10
 8001a72:	4621      	mov	r1, r4
 8001a74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a78:	4621      	mov	r1, r4
 8001a7a:	028a      	lsls	r2, r1, #10
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a82:	2200      	movs	r2, #0
 8001a84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a8c:	f7fe fc78 	bl	8000380 <__aeabi_uldivmod>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4613      	mov	r3, r2
 8001a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a98:	e058      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9a:	4b38      	ldr	r3, [pc, #224]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	099b      	lsrs	r3, r3, #6
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aaa:	623b      	str	r3, [r7, #32]
 8001aac:	2300      	movs	r3, #0
 8001aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ab4:	4642      	mov	r2, r8
 8001ab6:	464b      	mov	r3, r9
 8001ab8:	f04f 0000 	mov.w	r0, #0
 8001abc:	f04f 0100 	mov.w	r1, #0
 8001ac0:	0159      	lsls	r1, r3, #5
 8001ac2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac6:	0150      	lsls	r0, r2, #5
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4641      	mov	r1, r8
 8001ace:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ad2:	4649      	mov	r1, r9
 8001ad4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ae4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ae8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001aec:	ebb2 040a 	subs.w	r4, r2, sl
 8001af0:	eb63 050b 	sbc.w	r5, r3, fp
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	00eb      	lsls	r3, r5, #3
 8001afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b02:	00e2      	lsls	r2, r4, #3
 8001b04:	4614      	mov	r4, r2
 8001b06:	461d      	mov	r5, r3
 8001b08:	4643      	mov	r3, r8
 8001b0a:	18e3      	adds	r3, r4, r3
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	464b      	mov	r3, r9
 8001b10:	eb45 0303 	adc.w	r3, r5, r3
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b22:	4629      	mov	r1, r5
 8001b24:	028b      	lsls	r3, r1, #10
 8001b26:	4621      	mov	r1, r4
 8001b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	028a      	lsls	r2, r1, #10
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b36:	2200      	movs	r2, #0
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	61fa      	str	r2, [r7, #28]
 8001b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b40:	f7fe fc1e 	bl	8000380 <__aeabi_uldivmod>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4613      	mov	r3, r2
 8001b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	0c1b      	lsrs	r3, r3, #16
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	3301      	adds	r3, #1
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b66:	e002      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3750      	adds	r7, #80	@ 0x50
 8001b74:	46bd      	mov	sp, r7
 8001b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	00f42400 	.word	0x00f42400

08001b84 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b88:	4b03      	ldr	r3, [pc, #12]	@ (8001b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000000 	.word	0x20000000

08001b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ba0:	f7ff fff0 	bl	8001b84 <HAL_RCC_GetHCLKFreq>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	0a9b      	lsrs	r3, r3, #10
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	4903      	ldr	r1, [pc, #12]	@ (8001bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb2:	5ccb      	ldrb	r3, [r1, r3]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	08008020 	.word	0x08008020

08001bc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	220f      	movs	r2, #15
 8001bd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bd4:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 0203 	and.w	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001be0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c20 <HAL_RCC_GetClockConfig+0x5c>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bec:	4b0c      	ldr	r3, [pc, #48]	@ (8001c20 <HAL_RCC_GetClockConfig+0x5c>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001bf8:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <HAL_RCC_GetClockConfig+0x5c>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	08db      	lsrs	r3, r3, #3
 8001bfe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c06:	4b07      	ldr	r3, [pc, #28]	@ (8001c24 <HAL_RCC_GetClockConfig+0x60>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 020f 	and.w	r2, r3, #15
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	601a      	str	r2, [r3, #0]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40023c00 	.word	0x40023c00

08001c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e049      	b.n	8001cce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f841 	bl	8001cd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3304      	adds	r3, #4
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f000 f9e8 	bl	800203c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d001      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e054      	b.n	8001dae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a26      	ldr	r2, [pc, #152]	@ (8001dbc <HAL_TIM_Base_Start_IT+0xd0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d022      	beq.n	8001d6c <HAL_TIM_Base_Start_IT+0x80>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d2e:	d01d      	beq.n	8001d6c <HAL_TIM_Base_Start_IT+0x80>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a22      	ldr	r2, [pc, #136]	@ (8001dc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d018      	beq.n	8001d6c <HAL_TIM_Base_Start_IT+0x80>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a21      	ldr	r2, [pc, #132]	@ (8001dc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d013      	beq.n	8001d6c <HAL_TIM_Base_Start_IT+0x80>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a1f      	ldr	r2, [pc, #124]	@ (8001dc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00e      	beq.n	8001d6c <HAL_TIM_Base_Start_IT+0x80>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a1e      	ldr	r2, [pc, #120]	@ (8001dcc <HAL_TIM_Base_Start_IT+0xe0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d009      	beq.n	8001d6c <HAL_TIM_Base_Start_IT+0x80>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd0 <HAL_TIM_Base_Start_IT+0xe4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d004      	beq.n	8001d6c <HAL_TIM_Base_Start_IT+0x80>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd4 <HAL_TIM_Base_Start_IT+0xe8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d115      	bne.n	8001d98 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <HAL_TIM_Base_Start_IT+0xec>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d015      	beq.n	8001daa <HAL_TIM_Base_Start_IT+0xbe>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d84:	d011      	beq.n	8001daa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 0201 	orr.w	r2, r2, #1
 8001d94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d96:	e008      	b.n	8001daa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0201 	orr.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	e000      	b.n	8001dac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001daa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	40000400 	.word	0x40000400
 8001dc4:	40000800 	.word	0x40000800
 8001dc8:	40000c00 	.word	0x40000c00
 8001dcc:	40010400 	.word	0x40010400
 8001dd0:	40014000 	.word	0x40014000
 8001dd4:	40001800 	.word	0x40001800
 8001dd8:	00010007 	.word	0x00010007

08001ddc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d020      	beq.n	8001e40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01b      	beq.n	8001e40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0202 	mvn.w	r2, #2
 8001e10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f8e9 	bl	8001ffe <HAL_TIM_IC_CaptureCallback>
 8001e2c:	e005      	b.n	8001e3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f8db 	bl	8001fea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f8ec 	bl	8002012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d020      	beq.n	8001e8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d01b      	beq.n	8001e8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0204 	mvn.w	r2, #4
 8001e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2202      	movs	r2, #2
 8001e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f8c3 	bl	8001ffe <HAL_TIM_IC_CaptureCallback>
 8001e78:	e005      	b.n	8001e86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f8b5 	bl	8001fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f8c6 	bl	8002012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d020      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d01b      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0208 	mvn.w	r2, #8
 8001ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2204      	movs	r2, #4
 8001eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f89d 	bl	8001ffe <HAL_TIM_IC_CaptureCallback>
 8001ec4:	e005      	b.n	8001ed2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f88f 	bl	8001fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f8a0 	bl	8002012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d020      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01b      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0210 	mvn.w	r2, #16
 8001ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2208      	movs	r2, #8
 8001efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f877 	bl	8001ffe <HAL_TIM_IC_CaptureCallback>
 8001f10:	e005      	b.n	8001f1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f869 	bl	8001fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f87a 	bl	8002012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00c      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0201 	mvn.w	r2, #1
 8001f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7fe fd94 	bl	8000a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d104      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00c      	beq.n	8001f76 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f919 	bl	80021a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00c      	beq.n	8001f9a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d007      	beq.n	8001f9a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f911 	bl	80021bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00c      	beq.n	8001fbe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d007      	beq.n	8001fbe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f834 	bl	8002026 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00c      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d007      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f06f 0220 	mvn.w	r2, #32
 8001fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f8d9 	bl	8002194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a46      	ldr	r2, [pc, #280]	@ (8002168 <TIM_Base_SetConfig+0x12c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d013      	beq.n	800207c <TIM_Base_SetConfig+0x40>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800205a:	d00f      	beq.n	800207c <TIM_Base_SetConfig+0x40>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a43      	ldr	r2, [pc, #268]	@ (800216c <TIM_Base_SetConfig+0x130>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d00b      	beq.n	800207c <TIM_Base_SetConfig+0x40>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a42      	ldr	r2, [pc, #264]	@ (8002170 <TIM_Base_SetConfig+0x134>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d007      	beq.n	800207c <TIM_Base_SetConfig+0x40>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a41      	ldr	r2, [pc, #260]	@ (8002174 <TIM_Base_SetConfig+0x138>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d003      	beq.n	800207c <TIM_Base_SetConfig+0x40>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a40      	ldr	r2, [pc, #256]	@ (8002178 <TIM_Base_SetConfig+0x13c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d108      	bne.n	800208e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a35      	ldr	r2, [pc, #212]	@ (8002168 <TIM_Base_SetConfig+0x12c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d02b      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800209c:	d027      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a32      	ldr	r2, [pc, #200]	@ (800216c <TIM_Base_SetConfig+0x130>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d023      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a31      	ldr	r2, [pc, #196]	@ (8002170 <TIM_Base_SetConfig+0x134>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d01f      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a30      	ldr	r2, [pc, #192]	@ (8002174 <TIM_Base_SetConfig+0x138>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d01b      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002178 <TIM_Base_SetConfig+0x13c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d017      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a2e      	ldr	r2, [pc, #184]	@ (800217c <TIM_Base_SetConfig+0x140>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d013      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002180 <TIM_Base_SetConfig+0x144>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00f      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a2c      	ldr	r2, [pc, #176]	@ (8002184 <TIM_Base_SetConfig+0x148>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00b      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002188 <TIM_Base_SetConfig+0x14c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d007      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a2a      	ldr	r2, [pc, #168]	@ (800218c <TIM_Base_SetConfig+0x150>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d003      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a29      	ldr	r2, [pc, #164]	@ (8002190 <TIM_Base_SetConfig+0x154>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d108      	bne.n	8002100 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a10      	ldr	r2, [pc, #64]	@ (8002168 <TIM_Base_SetConfig+0x12c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d003      	beq.n	8002134 <TIM_Base_SetConfig+0xf8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a12      	ldr	r2, [pc, #72]	@ (8002178 <TIM_Base_SetConfig+0x13c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d103      	bne.n	800213c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b01      	cmp	r3, #1
 800214c:	d105      	bne.n	800215a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f023 0201 	bic.w	r2, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	611a      	str	r2, [r3, #16]
  }
}
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40010000 	.word	0x40010000
 800216c:	40000400 	.word	0x40000400
 8002170:	40000800 	.word	0x40000800
 8002174:	40000c00 	.word	0x40000c00
 8002178:	40010400 	.word	0x40010400
 800217c:	40014000 	.word	0x40014000
 8002180:	40014400 	.word	0x40014400
 8002184:	40014800 	.word	0x40014800
 8002188:	40001800 	.word	0x40001800
 800218c:	40001c00 	.word	0x40001c00
 8002190:	40002000 	.word	0x40002000

08002194 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f103 0208 	add.w	r2, r3, #8
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f103 0208 	add.w	r2, r3, #8
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f103 0208 	add.w	r2, r3, #8
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002204:	f240 1019 	movw	r0, #281	@ 0x119
 8002208:	f004 fe2a 	bl	8006e60 <SEGGER_SYSVIEW_RecordEndCall>
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8002222:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002226:	f004 fe1b 	bl	8006e60 <SEGGER_SYSVIEW_RecordEndCall>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d103      	bne.n	8002252 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e00c      	b.n	800226c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3308      	adds	r3, #8
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	e002      	b.n	8002260 <vListInsert+0x2e>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	429a      	cmp	r2, r3
 800226a:	d2f6      	bcs.n	800225a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002298:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 800229c:	f004 fde0 	bl	8006e60 <SEGGER_SYSVIEW_RecordEndCall>
}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6892      	ldr	r2, [r2, #8]
 80022be:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6852      	ldr	r2, [r2, #4]
 80022c8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d103      	bne.n	80022dc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	1e5a      	subs	r2, r3, #1
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4619      	mov	r1, r3
 80022f2:	f240 101d 	movw	r0, #285	@ 0x11d
 80022f6:	f004 fdef 	bl	8006ed8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b086      	sub	sp, #24
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002310:	2301      	movs	r3, #1
 8002312:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10d      	bne.n	800233a <xQueueGenericReset+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 800231e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002322:	b672      	cpsid	i
 8002324:	f383 8811 	msr	BASEPRI, r3
 8002328:	f3bf 8f6f 	isb	sy
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	b662      	cpsie	i
 8002332:	60fb      	str	r3, [r7, #12]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	e7fd      	b.n	8002336 <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d052      	beq.n	80023e6 <xQueueGenericReset+0xe0>
        ( pxQueue->uxLength >= 1U ) &&
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002344:	2b00      	cmp	r3, #0
 8002346:	d04e      	beq.n	80023e6 <xQueueGenericReset+0xe0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002350:	2100      	movs	r1, #0
 8002352:	fba3 2302 	umull	r2, r3, r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d000      	beq.n	800235c <xQueueGenericReset+0x56>
 800235a:	2101      	movs	r1, #1
 800235c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800235e:	2b00      	cmp	r3, #0
 8002360:	d141      	bne.n	80023e6 <xQueueGenericReset+0xe0>
    {
        taskENTER_CRITICAL();
 8002362:	f002 f8e7 	bl	8004534 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800236e:	6939      	ldr	r1, [r7, #16]
 8002370:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002372:	fb01 f303 	mul.w	r3, r1, r3
 8002376:	441a      	add	r2, r3
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	2200      	movs	r2, #0
 8002380:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002392:	3b01      	subs	r3, #1
 8002394:	6939      	ldr	r1, [r7, #16]
 8002396:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	441a      	add	r2, r3
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	22ff      	movs	r2, #255	@ 0xff
 80023a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	22ff      	movs	r2, #255	@ 0xff
 80023ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d109      	bne.n	80023cc <xQueueGenericReset+0xc6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00f      	beq.n	80023e0 <xQueueGenericReset+0xda>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	3310      	adds	r3, #16
 80023c4:	4618      	mov	r0, r3
 80023c6:	f001 f90f 	bl	80035e8 <xTaskRemoveFromEventList>
 80023ca:	e009      	b.n	80023e0 <xQueueGenericReset+0xda>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	3310      	adds	r3, #16
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fefd 	bl	80021d0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	3324      	adds	r3, #36	@ 0x24
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fef8 	bl	80021d0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80023e0:	f002 f8de 	bl	80045a0 <vPortExitCritical>
 80023e4:	e001      	b.n	80023ea <xQueueGenericReset+0xe4>
    }
    else
    {
        xReturn = pdFAIL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10d      	bne.n	800240c <xQueueGenericReset+0x106>
    __asm volatile
 80023f0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80023f4:	b672      	cpsid	i
 80023f6:	f383 8811 	msr	BASEPRI, r3
 80023fa:	f3bf 8f6f 	isb	sy
 80023fe:	f3bf 8f4f 	dsb	sy
 8002402:	b662      	cpsie	i
 8002404:	60bb      	str	r3, [r7, #8]
}
 8002406:	bf00      	nop
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <xQueueGenericReset+0x102>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	4619      	mov	r1, r3
 8002410:	2096      	movs	r0, #150	@ 0x96
 8002412:	f004 fd61 	bl	8006ed8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002416:	697b      	ldr	r3, [r7, #20]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	@ 0x28
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	4613      	mov	r3, r2
 800242c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d02e      	beq.n	8002496 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002438:	2100      	movs	r1, #0
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	fba3 2302 	umull	r2, r3, r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d000      	beq.n	8002448 <xQueueGenericCreate+0x28>
 8002446:	2101      	movs	r1, #1
 8002448:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800244a:	2b00      	cmp	r3, #0
 800244c:	d123      	bne.n	8002496 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002456:	f113 0f55 	cmn.w	r3, #85	@ 0x55
 800245a:	d81c      	bhi.n	8002496 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	fb02 f303 	mul.w	r3, r2, r3
 8002464:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	3354      	adds	r3, #84	@ 0x54
 800246a:	4618      	mov	r0, r3
 800246c:	f002 f99e 	bl	80047ac <pvPortMalloc>
 8002470:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01f      	beq.n	80024b8 <xQueueGenericCreate+0x98>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	3354      	adds	r3, #84	@ 0x54
 8002480:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002482:	79fa      	ldrb	r2, [r7, #7]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	4613      	mov	r3, r2
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f820 	bl	80024d4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002494:	e010      	b.n	80024b8 <xQueueGenericCreate+0x98>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10d      	bne.n	80024b8 <xQueueGenericCreate+0x98>
    __asm volatile
 800249c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80024a0:	b672      	cpsid	i
 80024a2:	f383 8811 	msr	BASEPRI, r3
 80024a6:	f3bf 8f6f 	isb	sy
 80024aa:	f3bf 8f4f 	dsb	sy
 80024ae:	b662      	cpsie	i
 80024b0:	613b      	str	r3, [r7, #16]
}
 80024b2:	bf00      	nop
 80024b4:	bf00      	nop
 80024b6:	e7fd      	b.n	80024b4 <xQueueGenericCreate+0x94>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f004 fea6 	bl	800720c <SEGGER_SYSVIEW_ShrinkId>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4619      	mov	r1, r3
 80024c4:	2098      	movs	r0, #152	@ 0x98
 80024c6:	f004 fd07 	bl	8006ed8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 80024ca:	69fb      	ldr	r3, [r7, #28]
    }
 80024cc:	4618      	mov	r0, r3
 80024ce:	3720      	adds	r7, #32
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d103      	bne.n	80024f0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e002      	b.n	80024f6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002502:	2101      	movs	r1, #1
 8002504:	69b8      	ldr	r0, [r7, #24]
 8002506:	f7ff fefe 	bl	8002306 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
    {
        pxNewQueue->pxQueueSetContainer = NULL;
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2200      	movs	r2, #0
 8002516:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	@ 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800252c:	2300      	movs	r3, #0
 800252e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10d      	bne.n	8002556 <xQueueReceive+0x36>
    __asm volatile
 800253a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800253e:	b672      	cpsid	i
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	b662      	cpsie	i
 800254e:	623b      	str	r3, [r7, #32]
}
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	e7fd      	b.n	8002552 <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d103      	bne.n	8002564 <xQueueReceive+0x44>
 800255c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <xQueueReceive+0x48>
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <xQueueReceive+0x4a>
 8002568:	2300      	movs	r3, #0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10d      	bne.n	800258a <xQueueReceive+0x6a>
    __asm volatile
 800256e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002572:	b672      	cpsid	i
 8002574:	f383 8811 	msr	BASEPRI, r3
 8002578:	f3bf 8f6f 	isb	sy
 800257c:	f3bf 8f4f 	dsb	sy
 8002580:	b662      	cpsie	i
 8002582:	61fb      	str	r3, [r7, #28]
}
 8002584:	bf00      	nop
 8002586:	bf00      	nop
 8002588:	e7fd      	b.n	8002586 <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800258a:	f001 fa4f 	bl	8003a2c <xTaskGetSchedulerState>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <xQueueReceive+0x7a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <xQueueReceive+0x7e>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <xQueueReceive+0x80>
 800259e:	2300      	movs	r3, #0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10d      	bne.n	80025c0 <xQueueReceive+0xa0>
    __asm volatile
 80025a4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80025a8:	b672      	cpsid	i
 80025aa:	f383 8811 	msr	BASEPRI, r3
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	f3bf 8f4f 	dsb	sy
 80025b6:	b662      	cpsie	i
 80025b8:	61bb      	str	r3, [r7, #24]
}
 80025ba:	bf00      	nop
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <xQueueReceive+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80025c0:	f001 ffb8 	bl	8004534 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d018      	beq.n	8002602 <xQueueReceive+0xe2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025d4:	f000 f8f8 	bl	80027c8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	1e5a      	subs	r2, r3, #1
 80025dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025de:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d004      	beq.n	80025f2 <xQueueReceive+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ea:	3310      	adds	r3, #16
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 fffb 	bl	80035e8 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80025f2:	f001 ffd5 	bl	80045a0 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 80025f6:	2101      	movs	r1, #1
 80025f8:	20a4      	movs	r0, #164	@ 0xa4
 80025fa:	f004 fc6d 	bl	8006ed8 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80025fe:	2301      	movs	r3, #1
 8002600:	e071      	b.n	80026e6 <xQueueReceive+0x1c6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d107      	bne.n	8002618 <xQueueReceive+0xf8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002608:	f001 ffca 	bl	80045a0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 800260c:	2100      	movs	r1, #0
 800260e:	20a4      	movs	r0, #164	@ 0xa4
 8002610:	f004 fc62 	bl	8006ed8 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8002614:	2300      	movs	r3, #0
 8002616:	e066      	b.n	80026e6 <xQueueReceive+0x1c6>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800261a:	2b00      	cmp	r3, #0
 800261c:	d106      	bne.n	800262c <xQueueReceive+0x10c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800261e:	f107 0310 	add.w	r3, r7, #16
 8002622:	4618      	mov	r0, r3
 8002624:	f001 f8c2 	bl	80037ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002628:	2301      	movs	r3, #1
 800262a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800262c:	f001 ffb8 	bl	80045a0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002630:	f000 fcac 	bl	8002f8c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002634:	f001 ff7e 	bl	8004534 <vPortEnterCritical>
 8002638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800263e:	b25b      	sxtb	r3, r3
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d103      	bne.n	800264e <xQueueReceive+0x12e>
 8002646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800264e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002650:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002654:	b25b      	sxtb	r3, r3
 8002656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265a:	d103      	bne.n	8002664 <xQueueReceive+0x144>
 800265c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002664:	f001 ff9c 	bl	80045a0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002668:	1d3a      	adds	r2, r7, #4
 800266a:	f107 0310 	add.w	r3, r7, #16
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f001 f8b3 	bl	80037dc <xTaskCheckForTimeOut>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d123      	bne.n	80026c4 <xQueueReceive+0x1a4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800267c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800267e:	f000 f928 	bl	80028d2 <prvIsQueueEmpty>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d017      	beq.n	80026b8 <xQueueReceive+0x198>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268a:	3324      	adds	r3, #36	@ 0x24
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f000 ff33 	bl	80034fc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002696:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002698:	f000 f8bc 	bl	8002814 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800269c:	f000 fc84 	bl	8002fa8 <xTaskResumeAll>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d18c      	bne.n	80025c0 <xQueueReceive+0xa0>
                {
                    taskYIELD_WITHIN_API();
 80026a6:	4b12      	ldr	r3, [pc, #72]	@ (80026f0 <xQueueReceive+0x1d0>)
 80026a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	f3bf 8f4f 	dsb	sy
 80026b2:	f3bf 8f6f 	isb	sy
 80026b6:	e783      	b.n	80025c0 <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80026b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026ba:	f000 f8ab 	bl	8002814 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80026be:	f000 fc73 	bl	8002fa8 <xTaskResumeAll>
 80026c2:	e77d      	b.n	80025c0 <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80026c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026c6:	f000 f8a5 	bl	8002814 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80026ca:	f000 fc6d 	bl	8002fa8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026d0:	f000 f8ff 	bl	80028d2 <prvIsQueueEmpty>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f43f af72 	beq.w	80025c0 <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80026dc:	2100      	movs	r1, #0
 80026de:	20a4      	movs	r0, #164	@ 0xa4
 80026e0:	f004 fbfa 	bl	8006ed8 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80026e4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3730      	adds	r7, #48	@ 0x30
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	e000ed04 	.word	0xe000ed04

080026f4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002708:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10d      	bne.n	800272e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d14d      	bne.n	80027b6 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	4618      	mov	r0, r3
 8002720:	f001 f9a6 	bl	8003a70 <xTaskPriorityDisinherit>
 8002724:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	e043      	b.n	80027b6 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d119      	bne.n	8002768 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6858      	ldr	r0, [r3, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273c:	461a      	mov	r2, r3
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	f004 ff6a 	bl	8007618 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274c:	441a      	add	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	429a      	cmp	r2, r3
 800275c:	d32b      	bcc.n	80027b6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	e026      	b.n	80027b6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	68d8      	ldr	r0, [r3, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002770:	461a      	mov	r2, r3
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	f004 ff50 	bl	8007618 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002780:	425b      	negs	r3, r3
 8002782:	441a      	add	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d207      	bcs.n	80027a4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	425b      	negs	r3, r3
 800279e:	441a      	add	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d105      	bne.n	80027b6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80027be:	697b      	ldr	r3, [r7, #20]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d018      	beq.n	800280c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	441a      	add	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d303      	bcc.n	80027fc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68d9      	ldr	r1, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	461a      	mov	r2, r3
 8002806:	6838      	ldr	r0, [r7, #0]
 8002808:	f004 ff06 	bl	8007618 <memcpy>
    }
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800281c:	f001 fe8a 	bl	8004534 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002826:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002828:	e01e      	b.n	8002868 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <prvUnlockQueue+0x30>
                {
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f8ed 	bl	8002a12 <prvNotifyQueueSetContainer>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d010      	beq.n	8002860 <prvUnlockQueue+0x4c>
                    {
                        /* The queue is a member of a queue set, and posting to
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
 800283e:	f001 f83d 	bl	80038bc <vTaskMissedYield>
 8002842:	e00d      	b.n	8002860 <prvUnlockQueue+0x4c>
                else
                {
                    /* Tasks that are removed from the event list will get
                     * added to the pending ready list as the scheduler is still
                     * suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	2b00      	cmp	r3, #0
 800284a:	d012      	beq.n	8002872 <prvUnlockQueue+0x5e>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3324      	adds	r3, #36	@ 0x24
 8002850:	4618      	mov	r0, r3
 8002852:	f000 fec9 	bl	80035e8 <xTaskRemoveFromEventList>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <prvUnlockQueue+0x4c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            vTaskMissedYield();
 800285c:	f001 f82e 	bl	80038bc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	3b01      	subs	r3, #1
 8002864:	b2db      	uxtb	r3, r3
 8002866:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286c:	2b00      	cmp	r3, #0
 800286e:	dcdc      	bgt.n	800282a <prvUnlockQueue+0x16>
 8002870:	e000      	b.n	8002874 <prvUnlockQueue+0x60>
                        break;
 8002872:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	22ff      	movs	r2, #255	@ 0xff
 8002878:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800287c:	f001 fe90 	bl	80045a0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002880:	f001 fe58 	bl	8004534 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800288a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800288c:	e011      	b.n	80028b2 <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d012      	beq.n	80028bc <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3310      	adds	r3, #16
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fea4 	bl	80035e8 <xTaskRemoveFromEventList>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 80028a6:	f001 f809 	bl	80038bc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80028aa:	7bbb      	ldrb	r3, [r7, #14]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80028b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	dce9      	bgt.n	800288e <prvUnlockQueue+0x7a>
 80028ba:	e000      	b.n	80028be <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 80028bc:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	22ff      	movs	r2, #255	@ 0xff
 80028c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80028c6:	f001 fe6b 	bl	80045a0 <vPortExitCritical>
}
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80028da:	f001 fe2b 	bl	8004534 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d102      	bne.n	80028ec <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80028e6:	2301      	movs	r3, #1
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	e001      	b.n	80028f0 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80028f0:	f001 fe56 	bl	80045a0 <vPortExitCritical>

    return xReturn;
 80028f4:	68fb      	ldr	r3, [r7, #12]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10d      	bne.n	8002930 <vQueueAddToRegistry+0x30>
    __asm volatile
 8002914:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002918:	b672      	cpsid	i
 800291a:	f383 8811 	msr	BASEPRI, r3
 800291e:	f3bf 8f6f 	isb	sy
 8002922:	f3bf 8f4f 	dsb	sy
 8002926:	b662      	cpsie	i
 8002928:	60fb      	str	r3, [r7, #12]
}
 800292a:	bf00      	nop
 800292c:	bf00      	nop
 800292e:	e7fd      	b.n	800292c <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d024      	beq.n	8002980 <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e01e      	b.n	800297a <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800293c:	4a18      	ldr	r2, [pc, #96]	@ (80029a0 <vQueueAddToRegistry+0xa0>)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4413      	add	r3, r2
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	429a      	cmp	r2, r3
 800294a:	d105      	bne.n	8002958 <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4a13      	ldr	r2, [pc, #76]	@ (80029a0 <vQueueAddToRegistry+0xa0>)
 8002952:	4413      	add	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
                    break;
 8002956:	e013      	b.n	8002980 <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10a      	bne.n	8002974 <vQueueAddToRegistry+0x74>
 800295e:	4a10      	ldr	r2, [pc, #64]	@ (80029a0 <vQueueAddToRegistry+0xa0>)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d104      	bne.n	8002974 <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	4a0c      	ldr	r2, [pc, #48]	@ (80029a0 <vQueueAddToRegistry+0xa0>)
 8002970:	4413      	add	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	3301      	adds	r3, #1
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b07      	cmp	r3, #7
 800297e:	d9dd      	bls.n	800293c <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8002992:	20b6      	movs	r0, #182	@ 0xb6
 8002994:	f004 fa64 	bl	8006e60 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002998:	bf00      	nop
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	200000d8 	.word	0x200000d8

080029a4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80029b4:	f001 fdbe 	bl	8004534 <vPortEnterCritical>
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029be:	b25b      	sxtb	r3, r3
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c4:	d103      	bne.n	80029ce <vQueueWaitForMessageRestricted+0x2a>
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029d4:	b25b      	sxtb	r3, r3
 80029d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029da:	d103      	bne.n	80029e4 <vQueueWaitForMessageRestricted+0x40>
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029e4:	f001 fddc 	bl	80045a0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d106      	bne.n	80029fe <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	3324      	adds	r3, #36	@ 0x24
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	68b9      	ldr	r1, [r7, #8]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fda9 	bl	8003550 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80029fe:	6978      	ldr	r0, [r7, #20]
 8002a00:	f7ff ff08 	bl	8002814 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8002a04:	20b9      	movs	r0, #185	@ 0xb9
 8002a06:	f004 fa2b 	bl	8006e60 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002a0a:	bf00      	nop
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b08a      	sub	sp, #40	@ 0x28
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a1e:	623b      	str	r3, [r7, #32]
        BaseType_t xReturn = pdFALSE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	627b      	str	r3, [r7, #36]	@ 0x24
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10d      	bne.n	8002a46 <prvNotifyQueueSetContainer+0x34>
    __asm volatile
 8002a2a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002a2e:	b672      	cpsid	i
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	b662      	cpsie	i
 8002a3e:	617b      	str	r3, [r7, #20]
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	e7fd      	b.n	8002a42 <prvNotifyQueueSetContainer+0x30>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d30d      	bcc.n	8002a6e <prvNotifyQueueSetContainer+0x5c>
    __asm volatile
 8002a52:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002a56:	b672      	cpsid	i
 8002a58:	f383 8811 	msr	BASEPRI, r3
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	b662      	cpsie	i
 8002a66:	613b      	str	r3, [r7, #16]
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	e7fd      	b.n	8002a6a <prvNotifyQueueSetContainer+0x58>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d23f      	bcs.n	8002afa <prvNotifyQueueSetContainer+0xe8>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a80:	77fb      	strb	r3, [r7, #31]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8002a82:	1d3b      	adds	r3, r7, #4
 8002a84:	2200      	movs	r2, #0
 8002a86:	4619      	mov	r1, r3
 8002a88:	6a38      	ldr	r0, [r7, #32]
 8002a8a:	f7ff fe33 	bl	80026f4 <prvCopyDataToQueue>
 8002a8e:	6278      	str	r0, [r7, #36]	@ 0x24

            if( cTxLock == queueUNLOCKED )
 8002a90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d10e      	bne.n	8002ab8 <prvNotifyQueueSetContainer+0xa6>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d02b      	beq.n	8002afa <prvNotifyQueueSetContainer+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	3324      	adds	r3, #36	@ 0x24
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fd9e 	bl	80035e8 <xTaskRemoveFromEventList>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d023      	beq.n	8002afa <prvNotifyQueueSetContainer+0xe8>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab6:	e020      	b.n	8002afa <prvNotifyQueueSetContainer+0xe8>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
 8002ab8:	f000 fba2 	bl	8003200 <uxTaskGetNumberOfTasks>
 8002abc:	61b8      	str	r0, [r7, #24]
 8002abe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d918      	bls.n	8002afa <prvNotifyQueueSetContainer+0xe8>
 8002ac8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002acc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ace:	d10d      	bne.n	8002aec <prvNotifyQueueSetContainer+0xda>
    __asm volatile
 8002ad0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002ad4:	b672      	cpsid	i
 8002ad6:	f383 8811 	msr	BASEPRI, r3
 8002ada:	f3bf 8f6f 	isb	sy
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	b662      	cpsie	i
 8002ae4:	60fb      	str	r3, [r7, #12]
}
 8002ae6:	bf00      	nop
 8002ae8:	bf00      	nop
 8002aea:	e7fd      	b.n	8002ae8 <prvNotifyQueueSetContainer+0xd6>
 8002aec:	7ffb      	ldrb	r3, [r7, #31]
 8002aee:	3301      	adds	r3, #1
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	b25a      	sxtb	r2, r3
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002afc:	4618      	mov	r0, r3
 8002afe:	3728      	adds	r7, #40	@ 0x28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	@ 0x28
 8002b08:	af04      	add	r7, sp, #16
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f001 fe48 	bl	80047ac <pvPortMalloc>
 8002b1c:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d013      	beq.n	8002b4c <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002b24:	2058      	movs	r0, #88	@ 0x58
 8002b26:	f001 fe41 	bl	80047ac <pvPortMalloc>
 8002b2a:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002b32:	2258      	movs	r2, #88	@ 0x58
 8002b34:	2100      	movs	r1, #0
 8002b36:	6978      	ldr	r0, [r7, #20]
 8002b38:	f004 fd40 	bl	80075bc <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b42:	e005      	b.n	8002b50 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002b44:	6938      	ldr	r0, [r7, #16]
 8002b46:	f001 ff6f 	bl	8004a28 <vPortFree>
 8002b4a:	e001      	b.n	8002b50 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00d      	beq.n	8002b72 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b56:	2300      	movs	r3, #0
 8002b58:	9303      	str	r3, [sp, #12]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	9302      	str	r3, [sp, #8]
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b60:	9301      	str	r3, [sp, #4]
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	68b9      	ldr	r1, [r7, #8]
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 f82d 	bl	8002bcc <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002b72:	697b      	ldr	r3, [r7, #20]
    }
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	9301      	str	r3, [sp, #4]
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f7ff ffb3 	bl	8002b04 <prvCreateTask>
 8002b9e:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002ba6:	6938      	ldr	r0, [r7, #16]
 8002ba8:	f000 f8a4 	bl	8002cf4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002bac:	2301      	movs	r3, #1
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	e002      	b.n	8002bb8 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb6:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	20c2      	movs	r0, #194	@ 0xc2
 8002bbe:	f004 f98b 	bl	8006ed8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002bc2:	697b      	ldr	r3, [r7, #20]
    }
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bdc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	461a      	mov	r2, r3
 8002be4:	21a5      	movs	r1, #165	@ 0xa5
 8002be6:	f004 fce9 	bl	80075bc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002bf4:	440b      	add	r3, r1
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	f023 0307 	bic.w	r3, r3, #7
 8002c02:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00d      	beq.n	8002c2a <prvInitialiseNewTask+0x5e>
    __asm volatile
 8002c0e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002c12:	b672      	cpsid	i
 8002c14:	f383 8811 	msr	BASEPRI, r3
 8002c18:	f3bf 8f6f 	isb	sy
 8002c1c:	f3bf 8f4f 	dsb	sy
 8002c20:	b662      	cpsie	i
 8002c22:	617b      	str	r3, [r7, #20]
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	e7fd      	b.n	8002c26 <prvInitialiseNewTask+0x5a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d01e      	beq.n	8002c6e <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c30:	2300      	movs	r3, #0
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	e012      	b.n	8002c5c <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	7819      	ldrb	r1, [r3, #0]
 8002c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	4413      	add	r3, r2
 8002c44:	3334      	adds	r3, #52	@ 0x34
 8002c46:	460a      	mov	r2, r1
 8002c48:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	4413      	add	r3, r2
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	61fb      	str	r3, [r7, #28]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	2b09      	cmp	r3, #9
 8002c60:	d9e9      	bls.n	8002c36 <prvInitialiseNewTask+0x6a>
 8002c62:	e000      	b.n	8002c66 <prvInitialiseNewTask+0x9a>
            {
                break;
 8002c64:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d90d      	bls.n	8002c90 <prvInitialiseNewTask+0xc4>
    __asm volatile
 8002c74:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002c78:	b672      	cpsid	i
 8002c7a:	f383 8811 	msr	BASEPRI, r3
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	b662      	cpsie	i
 8002c88:	613b      	str	r3, [r7, #16]
}
 8002c8a:	bf00      	nop
 8002c8c:	bf00      	nop
 8002c8e:	e7fd      	b.n	8002c8c <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d901      	bls.n	8002c9a <prvInitialiseNewTask+0xce>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c96:	2304      	movs	r3, #4
 8002c98:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ca4:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca8:	3304      	adds	r3, #4
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fab2 	bl	8002214 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb2:	3318      	adds	r3, #24
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff faad 	bl	8002214 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cbe:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc2:	f1c3 0205 	rsb	r2, r3, #5
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cce:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	68f9      	ldr	r1, [r7, #12]
 8002cd4:	69b8      	ldr	r0, [r7, #24]
 8002cd6:	f001 fac7 	bl	8004268 <pxPortInitialiseStack>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cde:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <prvInitialiseNewTask+0x120>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cea:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cec:	bf00      	nop
 8002cee:	3720      	adds	r7, #32
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002cf4:	b5b0      	push	{r4, r5, r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af02      	add	r7, sp, #8
 8002cfa:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002cfc:	f001 fc1a 	bl	8004534 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002d00:	4b48      	ldr	r3, [pc, #288]	@ (8002e24 <prvAddNewTaskToReadyList+0x130>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3301      	adds	r3, #1
 8002d06:	4a47      	ldr	r2, [pc, #284]	@ (8002e24 <prvAddNewTaskToReadyList+0x130>)
 8002d08:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002d0a:	4b47      	ldr	r3, [pc, #284]	@ (8002e28 <prvAddNewTaskToReadyList+0x134>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002d12:	4a45      	ldr	r2, [pc, #276]	@ (8002e28 <prvAddNewTaskToReadyList+0x134>)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d18:	4b42      	ldr	r3, [pc, #264]	@ (8002e24 <prvAddNewTaskToReadyList+0x130>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d110      	bne.n	8002d42 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002d20:	f000 fdea 	bl	80038f8 <prvInitialiseTaskLists>
 8002d24:	e00d      	b.n	8002d42 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002d26:	4b41      	ldr	r3, [pc, #260]	@ (8002e2c <prvAddNewTaskToReadyList+0x138>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d109      	bne.n	8002d42 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e28 <prvAddNewTaskToReadyList+0x134>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d802      	bhi.n	8002d42 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002d3c:	4a3a      	ldr	r2, [pc, #232]	@ (8002e28 <prvAddNewTaskToReadyList+0x134>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002d42:	4b3b      	ldr	r3, [pc, #236]	@ (8002e30 <prvAddNewTaskToReadyList+0x13c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3301      	adds	r3, #1
 8002d48:	4a39      	ldr	r2, [pc, #228]	@ (8002e30 <prvAddNewTaskToReadyList+0x13c>)
 8002d4a:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d4c:	4b38      	ldr	r3, [pc, #224]	@ (8002e30 <prvAddNewTaskToReadyList+0x13c>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d016      	beq.n	8002d88 <prvAddNewTaskToReadyList+0x94>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f004 f92f 	bl	8006fc0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d72:	461d      	mov	r5, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	461c      	mov	r4, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7e:	1ae3      	subs	r3, r4, r3
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	462b      	mov	r3, r5
 8002d84:	f002 f856 	bl	8004e34 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f004 f99c 	bl	80070c8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d94:	2201      	movs	r2, #1
 8002d96:	409a      	lsls	r2, r3
 8002d98:	4b26      	ldr	r3, [pc, #152]	@ (8002e34 <prvAddNewTaskToReadyList+0x140>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	4a25      	ldr	r2, [pc, #148]	@ (8002e34 <prvAddNewTaskToReadyList+0x140>)
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002da6:	4924      	ldr	r1, [pc, #144]	@ (8002e38 <prvAddNewTaskToReadyList+0x144>)
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	3304      	adds	r3, #4
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	609a      	str	r2, [r3, #8]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	3204      	adds	r2, #4
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	1d1a      	adds	r2, r3, #4
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4a14      	ldr	r2, [pc, #80]	@ (8002e38 <prvAddNewTaskToReadyList+0x144>)
 8002de6:	441a      	add	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	615a      	str	r2, [r3, #20]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002df0:	4911      	ldr	r1, [pc, #68]	@ (8002e38 <prvAddNewTaskToReadyList+0x144>)
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e02:	1c59      	adds	r1, r3, #1
 8002e04:	480c      	ldr	r0, [pc, #48]	@ (8002e38 <prvAddNewTaskToReadyList+0x144>)
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4403      	add	r3, r0
 8002e10:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002e12:	f001 fbc5 	bl	80045a0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002e16:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <prvAddNewTaskToReadyList+0x138>)
 8002e18:	681b      	ldr	r3, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bdb0      	pop	{r4, r5, r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200001f0 	.word	0x200001f0
 8002e28:	20000118 	.word	0x20000118
 8002e2c:	200001fc 	.word	0x200001fc
 8002e30:	2000020c 	.word	0x2000020c
 8002e34:	200001f8 	.word	0x200001f8
 8002e38:	2000011c 	.word	0x2000011c

08002e3c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	@ 0x28
 8002e40:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8002e42:	2301      	movs	r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e011      	b.n	8002e74 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002e50:	4a1c      	ldr	r2, [pc, #112]	@ (8002ec4 <prvCreateIdleTasks+0x88>)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	4413      	add	r3, r2
 8002e56:	7819      	ldrb	r1, [r3, #0]
 8002e58:	1d3a      	adds	r2, r7, #4
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	460a      	mov	r2, r1
 8002e60:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002e62:	1d3a      	adds	r2, r7, #4
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	4413      	add	r3, r2
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d006      	beq.n	8002e7c <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	3301      	adds	r3, #1
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2b09      	cmp	r3, #9
 8002e78:	ddea      	ble.n	8002e50 <prvCreateIdleTasks+0x14>
 8002e7a:	e000      	b.n	8002e7e <prvCreateIdleTasks+0x42>
        {
            break;
 8002e7c:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	e015      	b.n	8002eb0 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002e84:	4b10      	ldr	r3, [pc, #64]	@ (8002ec8 <prvCreateIdleTasks+0x8c>)
 8002e86:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8002ecc <prvCreateIdleTasks+0x90>)
 8002e8e:	4413      	add	r3, r2
 8002e90:	1d39      	adds	r1, r7, #4
 8002e92:	9301      	str	r3, [sp, #4]
 8002e94:	2300      	movs	r3, #0
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2282      	movs	r2, #130	@ 0x82
 8002e9c:	6938      	ldr	r0, [r7, #16]
 8002e9e:	f7ff fe6d 	bl	8002b7c <xTaskCreate>
 8002ea2:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d006      	beq.n	8002eb8 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	3301      	adds	r3, #1
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	dde6      	ble.n	8002e84 <prvCreateIdleTasks+0x48>
 8002eb6:	e000      	b.n	8002eba <prvCreateIdleTasks+0x7e>
        {
            break;
 8002eb8:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002eba:	69fb      	ldr	r3, [r7, #28]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	08007f28 	.word	0x08007f28
 8002ec8:	080038d5 	.word	0x080038d5
 8002ecc:	20000214 	.word	0x20000214

08002ed0 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002ed6:	f7ff ffb1 	bl	8002e3c <prvCreateIdleTasks>
 8002eda:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d102      	bne.n	8002ee8 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8002ee2:	f000 ff07 	bl	8003cf4 <xTimerCreateTimerTask>
 8002ee6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d126      	bne.n	8002f3c <vTaskStartScheduler+0x6c>
    __asm volatile
 8002eee:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002ef2:	b672      	cpsid	i
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	b662      	cpsie	i
 8002f02:	60bb      	str	r3, [r7, #8]
}
 8002f04:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f06:	4b1b      	ldr	r3, [pc, #108]	@ (8002f74 <vTaskStartScheduler+0xa4>)
 8002f08:	f04f 32ff 	mov.w	r2, #4294967295
 8002f0c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002f78 <vTaskStartScheduler+0xa8>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f14:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <vTaskStartScheduler+0xac>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002f1a:	4b19      	ldr	r3, [pc, #100]	@ (8002f80 <vTaskStartScheduler+0xb0>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4b19      	ldr	r3, [pc, #100]	@ (8002f84 <vTaskStartScheduler+0xb4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d102      	bne.n	8002f2c <vTaskStartScheduler+0x5c>
 8002f26:	f004 f82f 	bl	8006f88 <SEGGER_SYSVIEW_OnIdle>
 8002f2a:	e004      	b.n	8002f36 <vTaskStartScheduler+0x66>
 8002f2c:	4b15      	ldr	r3, [pc, #84]	@ (8002f84 <vTaskStartScheduler+0xb4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f004 f887 	bl	8007044 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002f36:	f001 fa2d 	bl	8004394 <xPortStartScheduler>
 8002f3a:	e011      	b.n	8002f60 <vTaskStartScheduler+0x90>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f42:	d10d      	bne.n	8002f60 <vTaskStartScheduler+0x90>
    __asm volatile
 8002f44:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002f48:	b672      	cpsid	i
 8002f4a:	f383 8811 	msr	BASEPRI, r3
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	b662      	cpsie	i
 8002f58:	607b      	str	r3, [r7, #4]
}
 8002f5a:	bf00      	nop
 8002f5c:	bf00      	nop
 8002f5e:	e7fd      	b.n	8002f5c <vTaskStartScheduler+0x8c>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002f60:	4b09      	ldr	r3, [pc, #36]	@ (8002f88 <vTaskStartScheduler+0xb8>)
 8002f62:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002f64:	20cd      	movs	r0, #205	@ 0xcd
 8002f66:	f003 ff7b 	bl	8006e60 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000210 	.word	0x20000210
 8002f78:	200001fc 	.word	0x200001fc
 8002f7c:	200001f4 	.word	0x200001f4
 8002f80:	20000214 	.word	0x20000214
 8002f84:	20000118 	.word	0x20000118
 8002f88:	2000000c 	.word	0x2000000c

08002f8c <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002f90:	4b04      	ldr	r3, [pc, #16]	@ (8002fa4 <vTaskSuspendAll+0x18>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3301      	adds	r3, #1
 8002f96:	4a03      	ldr	r2, [pc, #12]	@ (8002fa4 <vTaskSuspendAll+0x18>)
 8002f98:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002f9a:	20cf      	movs	r0, #207	@ 0xcf
 8002f9c:	f003 ff60 	bl	8006e60 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002fa0:	bf00      	nop
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000218 	.word	0x20000218

08002fa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002fb6:	f001 fabd 	bl	8004534 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002fbe:	4b74      	ldr	r3, [pc, #464]	@ (8003190 <xTaskResumeAll+0x1e8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10d      	bne.n	8002fe2 <xTaskResumeAll+0x3a>
    __asm volatile
 8002fc6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002fca:	b672      	cpsid	i
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	b662      	cpsie	i
 8002fda:	603b      	str	r3, [r7, #0]
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	e7fd      	b.n	8002fde <xTaskResumeAll+0x36>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002fe2:	4b6b      	ldr	r3, [pc, #428]	@ (8003190 <xTaskResumeAll+0x1e8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	4a69      	ldr	r2, [pc, #420]	@ (8003190 <xTaskResumeAll+0x1e8>)
 8002fea:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002fec:	4b68      	ldr	r3, [pc, #416]	@ (8003190 <xTaskResumeAll+0x1e8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f040 80c0 	bne.w	8003176 <xTaskResumeAll+0x1ce>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ff6:	4b67      	ldr	r3, [pc, #412]	@ (8003194 <xTaskResumeAll+0x1ec>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80bb 	beq.w	8003176 <xTaskResumeAll+0x1ce>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003000:	e092      	b.n	8003128 <xTaskResumeAll+0x180>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003002:	4b65      	ldr	r3, [pc, #404]	@ (8003198 <xTaskResumeAll+0x1f0>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	6a12      	ldr	r2, [r2, #32]
 8003018:	609a      	str	r2, [r3, #8]
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	69d2      	ldr	r2, [r2, #28]
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	3318      	adds	r3, #24
 800302c:	429a      	cmp	r2, r3
 800302e:	d103      	bne.n	8003038 <xTaskResumeAll+0x90>
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	6a1a      	ldr	r2, [r3, #32]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	2200      	movs	r2, #0
 800303c:	629a      	str	r2, [r3, #40]	@ 0x28
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	1e5a      	subs	r2, r3, #1
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	68d2      	ldr	r2, [r2, #12]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	6892      	ldr	r2, [r2, #8]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3304      	adds	r3, #4
 800306a:	429a      	cmp	r2, r3
 800306c:	d103      	bne.n	8003076 <xTaskResumeAll+0xce>
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	2200      	movs	r2, #0
 800307a:	615a      	str	r2, [r3, #20]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	1e5a      	subs	r2, r3, #1
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	4618      	mov	r0, r3
 800308a:	f004 f81d 	bl	80070c8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003092:	2201      	movs	r2, #1
 8003094:	409a      	lsls	r2, r3
 8003096:	4b41      	ldr	r3, [pc, #260]	@ (800319c <xTaskResumeAll+0x1f4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4313      	orrs	r3, r2
 800309c:	4a3f      	ldr	r2, [pc, #252]	@ (800319c <xTaskResumeAll+0x1f4>)
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a4:	493e      	ldr	r1, [pc, #248]	@ (80031a0 <xTaskResumeAll+0x1f8>)
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	3304      	adds	r3, #4
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	60da      	str	r2, [r3, #12]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	3204      	adds	r2, #4
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	1d1a      	adds	r2, r3, #4
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	609a      	str	r2, [r3, #8]
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4a2f      	ldr	r2, [pc, #188]	@ (80031a0 <xTaskResumeAll+0x1f8>)
 80030e4:	441a      	add	r2, r3
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	615a      	str	r2, [r3, #20]
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ee:	492c      	ldr	r1, [pc, #176]	@ (80031a0 <xTaskResumeAll+0x1f8>)
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69fa      	ldr	r2, [r7, #28]
 80030fe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003100:	1c59      	adds	r1, r3, #1
 8003102:	4827      	ldr	r0, [pc, #156]	@ (80031a0 <xTaskResumeAll+0x1f8>)
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4403      	add	r3, r0
 800310e:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003114:	4b23      	ldr	r3, [pc, #140]	@ (80031a4 <xTaskResumeAll+0x1fc>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311a:	429a      	cmp	r2, r3
 800311c:	d904      	bls.n	8003128 <xTaskResumeAll+0x180>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800311e:	4a22      	ldr	r2, [pc, #136]	@ (80031a8 <xTaskResumeAll+0x200>)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	2101      	movs	r1, #1
 8003124:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003128:	4b1b      	ldr	r3, [pc, #108]	@ (8003198 <xTaskResumeAll+0x1f0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	f47f af68 	bne.w	8003002 <xTaskResumeAll+0x5a>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <xTaskResumeAll+0x194>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003138:	f000 fc5c 	bl	80039f4 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800313c:	4b1b      	ldr	r3, [pc, #108]	@ (80031ac <xTaskResumeAll+0x204>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	61bb      	str	r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d012      	beq.n	800316e <xTaskResumeAll+0x1c6>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003148:	f000 f868 	bl	800321c <xTaskIncrementTick>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d004      	beq.n	800315c <xTaskResumeAll+0x1b4>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003152:	4a15      	ldr	r2, [pc, #84]	@ (80031a8 <xTaskResumeAll+0x200>)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	2101      	movs	r1, #1
 8003158:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	3b01      	subs	r3, #1
 8003160:	61bb      	str	r3, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1ef      	bne.n	8003148 <xTaskResumeAll+0x1a0>

                            xPendedTicks = 0;
 8003168:	4b10      	ldr	r3, [pc, #64]	@ (80031ac <xTaskResumeAll+0x204>)
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800316e:	4a0e      	ldr	r2, [pc, #56]	@ (80031a8 <xTaskResumeAll+0x200>)
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003176:	f001 fa13 	bl	80045a0 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	4619      	mov	r1, r3
 800317e:	20d0      	movs	r0, #208	@ 0xd0
 8003180:	f003 feaa 	bl	8006ed8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8003184:	697b      	ldr	r3, [r7, #20]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3720      	adds	r7, #32
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000218 	.word	0x20000218
 8003194:	200001f0 	.word	0x200001f0
 8003198:	200001b0 	.word	0x200001b0
 800319c:	200001f8 	.word	0x200001f8
 80031a0:	2000011c 	.word	0x2000011c
 80031a4:	20000118 	.word	0x20000118
 80031a8:	20000204 	.word	0x20000204
 80031ac:	20000200 	.word	0x20000200

080031b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80031b6:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <xTaskGetTickCount+0x20>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	20d1      	movs	r0, #209	@ 0xd1
 80031c0:	f003 fe8a 	bl	8006ed8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 80031c4:	687b      	ldr	r3, [r7, #4]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	200001f4 	.word	0x200001f4

080031d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031da:	f001 faa1 	bl	8004720 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80031de:	2300      	movs	r3, #0
 80031e0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80031e2:	4b06      	ldr	r3, [pc, #24]	@ (80031fc <xTaskGetTickCountFromISR+0x28>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 80031e8:	6839      	ldr	r1, [r7, #0]
 80031ea:	20d2      	movs	r0, #210	@ 0xd2
 80031ec:	f003 fe74 	bl	8006ed8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80031f0:	683b      	ldr	r3, [r7, #0]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200001f4 	.word	0x200001f4

08003200 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
    traceENTER_uxTaskGetNumberOfTasks();

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );
 8003204:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <uxTaskGetNumberOfTasks+0x18>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4619      	mov	r1, r3
 800320a:	20d3      	movs	r0, #211	@ 0xd3
 800320c:	f003 fe64 	bl	8006ed8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxCurrentNumberOfTasks;
 8003210:	4b01      	ldr	r3, [pc, #4]	@ (8003218 <uxTaskGetNumberOfTasks+0x18>)
 8003212:	681b      	ldr	r3, [r3, #0]
}
 8003214:	4618      	mov	r0, r3
 8003216:	bd80      	pop	{r7, pc}
 8003218:	200001f0 	.word	0x200001f0

0800321c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08a      	sub	sp, #40	@ 0x28
 8003220:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003222:	2300      	movs	r3, #0
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003226:	4b75      	ldr	r3, [pc, #468]	@ (80033fc <xTaskIncrementTick+0x1e0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f040 80d6 	bne.w	80033dc <xTaskIncrementTick+0x1c0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003230:	4b73      	ldr	r3, [pc, #460]	@ (8003400 <xTaskIncrementTick+0x1e4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003238:	4a71      	ldr	r2, [pc, #452]	@ (8003400 <xTaskIncrementTick+0x1e4>)
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d123      	bne.n	800328c <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 8003244:	4b6f      	ldr	r3, [pc, #444]	@ (8003404 <xTaskIncrementTick+0x1e8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00d      	beq.n	800326a <xTaskIncrementTick+0x4e>
    __asm volatile
 800324e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003252:	b672      	cpsid	i
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	b662      	cpsie	i
 8003262:	607b      	str	r3, [r7, #4]
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	e7fd      	b.n	8003266 <xTaskIncrementTick+0x4a>
 800326a:	4b66      	ldr	r3, [pc, #408]	@ (8003404 <xTaskIncrementTick+0x1e8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	61fb      	str	r3, [r7, #28]
 8003270:	4b65      	ldr	r3, [pc, #404]	@ (8003408 <xTaskIncrementTick+0x1ec>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a63      	ldr	r2, [pc, #396]	@ (8003404 <xTaskIncrementTick+0x1e8>)
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	4a63      	ldr	r2, [pc, #396]	@ (8003408 <xTaskIncrementTick+0x1ec>)
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	4b63      	ldr	r3, [pc, #396]	@ (800340c <xTaskIncrementTick+0x1f0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	3301      	adds	r3, #1
 8003284:	4a61      	ldr	r2, [pc, #388]	@ (800340c <xTaskIncrementTick+0x1f0>)
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	f000 fbb4 	bl	80039f4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800328c:	4b60      	ldr	r3, [pc, #384]	@ (8003410 <xTaskIncrementTick+0x1f4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6a3a      	ldr	r2, [r7, #32]
 8003292:	429a      	cmp	r2, r3
 8003294:	f0c0 80a7 	bcc.w	80033e6 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003298:	4b5a      	ldr	r3, [pc, #360]	@ (8003404 <xTaskIncrementTick+0x1e8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d104      	bne.n	80032ac <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80032a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003410 <xTaskIncrementTick+0x1f4>)
 80032a4:	f04f 32ff 	mov.w	r2, #4294967295
 80032a8:	601a      	str	r2, [r3, #0]
                    break;
 80032aa:	e09c      	b.n	80033e6 <xTaskIncrementTick+0x1ca>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80032ac:	4b55      	ldr	r3, [pc, #340]	@ (8003404 <xTaskIncrementTick+0x1e8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80032bc:	6a3a      	ldr	r2, [r7, #32]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d203      	bcs.n	80032cc <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80032c4:	4a52      	ldr	r2, [pc, #328]	@ (8003410 <xTaskIncrementTick+0x1f4>)
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	6013      	str	r3, [r2, #0]
                        break;
 80032ca:	e08c      	b.n	80033e6 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	68d2      	ldr	r2, [r2, #12]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	6892      	ldr	r2, [r2, #8]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	3304      	adds	r3, #4
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d103      	bne.n	80032fa <xTaskIncrementTick+0xde>
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2200      	movs	r2, #0
 80032fe:	615a      	str	r2, [r3, #20]
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	1e5a      	subs	r2, r3, #1
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330e:	2b00      	cmp	r3, #0
 8003310:	d01e      	beq.n	8003350 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	6a12      	ldr	r2, [r2, #32]
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	69d2      	ldr	r2, [r2, #28]
 800332a:	605a      	str	r2, [r3, #4]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	3318      	adds	r3, #24
 8003334:	429a      	cmp	r2, r3
 8003336:	d103      	bne.n	8003340 <xTaskIncrementTick+0x124>
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	6a1a      	ldr	r2, [r3, #32]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	605a      	str	r2, [r3, #4]
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2200      	movs	r2, #0
 8003344:	629a      	str	r2, [r3, #40]	@ 0x28
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	1e5a      	subs	r2, r3, #1
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	4618      	mov	r0, r3
 8003354:	f003 feb8 	bl	80070c8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335c:	2201      	movs	r2, #1
 800335e:	409a      	lsls	r2, r3
 8003360:	4b2c      	ldr	r3, [pc, #176]	@ (8003414 <xTaskIncrementTick+0x1f8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4313      	orrs	r3, r2
 8003366:	4a2b      	ldr	r2, [pc, #172]	@ (8003414 <xTaskIncrementTick+0x1f8>)
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800336e:	492a      	ldr	r1, [pc, #168]	@ (8003418 <xTaskIncrementTick+0x1fc>)
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	3304      	adds	r3, #4
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60bb      	str	r3, [r7, #8]
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	609a      	str	r2, [r3, #8]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	60da      	str	r2, [r3, #12]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	3204      	adds	r2, #4
 8003396:	605a      	str	r2, [r3, #4]
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	1d1a      	adds	r2, r3, #4
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003418 <xTaskIncrementTick+0x1fc>)
 80033ae:	441a      	add	r2, r3
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	615a      	str	r2, [r3, #20]
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033b8:	4917      	ldr	r1, [pc, #92]	@ (8003418 <xTaskIncrementTick+0x1fc>)
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80033ca:	1c59      	adds	r1, r3, #1
 80033cc:	4812      	ldr	r0, [pc, #72]	@ (8003418 <xTaskIncrementTick+0x1fc>)
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4403      	add	r3, r0
 80033d8:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033da:	e75d      	b.n	8003298 <xTaskIncrementTick+0x7c>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80033dc:	4b0f      	ldr	r3, [pc, #60]	@ (800341c <xTaskIncrementTick+0x200>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3301      	adds	r3, #1
 80033e2:	4a0e      	ldr	r2, [pc, #56]	@ (800341c <xTaskIncrementTick+0x200>)
 80033e4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	4619      	mov	r1, r3
 80033ea:	20db      	movs	r0, #219	@ 0xdb
 80033ec:	f003 fd74 	bl	8006ed8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80033f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3728      	adds	r7, #40	@ 0x28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000218 	.word	0x20000218
 8003400:	200001f4 	.word	0x200001f4
 8003404:	200001a8 	.word	0x200001a8
 8003408:	200001ac 	.word	0x200001ac
 800340c:	20000208 	.word	0x20000208
 8003410:	20000210 	.word	0x20000210
 8003414:	200001f8 	.word	0x200001f8
 8003418:	2000011c 	.word	0x2000011c
 800341c:	20000200 	.word	0x20000200

08003420 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003426:	4b2f      	ldr	r3, [pc, #188]	@ (80034e4 <vTaskSwitchContext+0xc4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800342e:	4b2e      	ldr	r3, [pc, #184]	@ (80034e8 <vTaskSwitchContext+0xc8>)
 8003430:	2201      	movs	r2, #1
 8003432:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003434:	e051      	b.n	80034da <vTaskSwitchContext+0xba>
            xYieldPendings[ 0 ] = pdFALSE;
 8003436:	4b2c      	ldr	r3, [pc, #176]	@ (80034e8 <vTaskSwitchContext+0xc8>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800343c:	4b2b      	ldr	r3, [pc, #172]	@ (80034ec <vTaskSwitchContext+0xcc>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	fab3 f383 	clz	r3, r3
 8003448:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800344a:	7afb      	ldrb	r3, [r7, #11]
 800344c:	f1c3 031f 	rsb	r3, r3, #31
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	4927      	ldr	r1, [pc, #156]	@ (80034f0 <vTaskSwitchContext+0xd0>)
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10d      	bne.n	8003482 <vTaskSwitchContext+0x62>
    __asm volatile
 8003466:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800346a:	b672      	cpsid	i
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	b662      	cpsie	i
 800347a:	607b      	str	r3, [r7, #4]
}
 800347c:	bf00      	nop
 800347e:	bf00      	nop
 8003480:	e7fd      	b.n	800347e <vTaskSwitchContext+0x5e>
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4a18      	ldr	r2, [pc, #96]	@ (80034f0 <vTaskSwitchContext+0xd0>)
 800348e:	4413      	add	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	605a      	str	r2, [r3, #4]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	3308      	adds	r3, #8
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d103      	bne.n	80034b0 <vTaskSwitchContext+0x90>
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	605a      	str	r2, [r3, #4]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	4a0f      	ldr	r2, [pc, #60]	@ (80034f4 <vTaskSwitchContext+0xd4>)
 80034b8:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 80034ba:	4b0f      	ldr	r3, [pc, #60]	@ (80034f8 <vTaskSwitchContext+0xd8>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4b0d      	ldr	r3, [pc, #52]	@ (80034f4 <vTaskSwitchContext+0xd4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d102      	bne.n	80034cc <vTaskSwitchContext+0xac>
 80034c6:	f003 fd5f 	bl	8006f88 <SEGGER_SYSVIEW_OnIdle>
 80034ca:	e004      	b.n	80034d6 <vTaskSwitchContext+0xb6>
 80034cc:	4b09      	ldr	r3, [pc, #36]	@ (80034f4 <vTaskSwitchContext+0xd4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f003 fdb7 	bl	8007044 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80034d6:	4b07      	ldr	r3, [pc, #28]	@ (80034f4 <vTaskSwitchContext+0xd4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
    }
 80034da:	bf00      	nop
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000218 	.word	0x20000218
 80034e8:	20000204 	.word	0x20000204
 80034ec:	200001f8 	.word	0x200001f8
 80034f0:	2000011c 	.word	0x2000011c
 80034f4:	20000118 	.word	0x20000118
 80034f8:	20000214 	.word	0x20000214

080034fc <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10d      	bne.n	8003528 <vTaskPlaceOnEventList+0x2c>
    __asm volatile
 800350c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003510:	b672      	cpsid	i
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	b662      	cpsie	i
 8003520:	60fb      	str	r3, [r7, #12]
}
 8003522:	bf00      	nop
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003528:	4b08      	ldr	r3, [pc, #32]	@ (800354c <vTaskPlaceOnEventList+0x50>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3318      	adds	r3, #24
 800352e:	4619      	mov	r1, r3
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7fe fe7e 	bl	8002232 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003536:	2101      	movs	r1, #1
 8003538:	6838      	ldr	r0, [r7, #0]
 800353a:	f000 fb4d 	bl	8003bd8 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 800353e:	20e1      	movs	r0, #225	@ 0xe1
 8003540:	f003 fc8e 	bl	8006e60 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	20000118 	.word	0x20000118

08003550 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10d      	bne.n	800357e <vTaskPlaceOnEventListRestricted+0x2e>
    __asm volatile
 8003562:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003566:	b672      	cpsid	i
 8003568:	f383 8811 	msr	BASEPRI, r3
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	b662      	cpsie	i
 8003576:	613b      	str	r3, [r7, #16]
}
 8003578:	bf00      	nop
 800357a:	bf00      	nop
 800357c:	e7fd      	b.n	800357a <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	4b17      	ldr	r3, [pc, #92]	@ (80035e4 <vTaskPlaceOnEventListRestricted+0x94>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	61da      	str	r2, [r3, #28]
 800358c:	4b15      	ldr	r3, [pc, #84]	@ (80035e4 <vTaskPlaceOnEventListRestricted+0x94>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	6892      	ldr	r2, [r2, #8]
 8003594:	621a      	str	r2, [r3, #32]
 8003596:	4b13      	ldr	r3, [pc, #76]	@ (80035e4 <vTaskPlaceOnEventListRestricted+0x94>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	3218      	adds	r2, #24
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	4b10      	ldr	r3, [pc, #64]	@ (80035e4 <vTaskPlaceOnEventListRestricted+0x94>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f103 0218 	add.w	r2, r3, #24
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	609a      	str	r2, [r3, #8]
 80035ae:	4b0d      	ldr	r3, [pc, #52]	@ (80035e4 <vTaskPlaceOnEventListRestricted+0x94>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 80035c6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ca:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	68b8      	ldr	r0, [r7, #8]
 80035d0:	f000 fb02 	bl	8003bd8 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 80035d4:	20e3      	movs	r0, #227	@ 0xe3
 80035d6:	f003 fc43 	bl	8006e60 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80035da:	bf00      	nop
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20000118 	.word	0x20000118

080035e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	@ 0x28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10d      	bne.n	800361a <xTaskRemoveFromEventList+0x32>
    __asm volatile
 80035fe:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003602:	b672      	cpsid	i
 8003604:	f383 8811 	msr	BASEPRI, r3
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	b662      	cpsie	i
 8003612:	60fb      	str	r3, [r7, #12]
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	e7fd      	b.n	8003616 <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	6a3a      	ldr	r2, [r7, #32]
 8003626:	6a12      	ldr	r2, [r2, #32]
 8003628:	609a      	str	r2, [r3, #8]
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	6a3a      	ldr	r2, [r7, #32]
 8003630:	69d2      	ldr	r2, [r2, #28]
 8003632:	605a      	str	r2, [r3, #4]
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	3318      	adds	r3, #24
 800363c:	429a      	cmp	r2, r3
 800363e:	d103      	bne.n	8003648 <xTaskRemoveFromEventList+0x60>
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	6a1a      	ldr	r2, [r3, #32]
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	605a      	str	r2, [r3, #4]
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	2200      	movs	r2, #0
 800364c:	629a      	str	r2, [r3, #40]	@ 0x28
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	1e5a      	subs	r2, r3, #1
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003658:	4b4e      	ldr	r3, [pc, #312]	@ (8003794 <xTaskRemoveFromEventList+0x1ac>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d164      	bne.n	800372a <xTaskRemoveFromEventList+0x142>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	6a3a      	ldr	r2, [r7, #32]
 800366c:	68d2      	ldr	r2, [r2, #12]
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	6a3a      	ldr	r2, [r7, #32]
 8003676:	6892      	ldr	r2, [r2, #8]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	3304      	adds	r3, #4
 8003682:	429a      	cmp	r2, r3
 8003684:	d103      	bne.n	800368e <xTaskRemoveFromEventList+0xa6>
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	2200      	movs	r2, #0
 8003692:	615a      	str	r2, [r3, #20]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	1e5a      	subs	r2, r3, #1
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f003 fd11 	bl	80070c8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036aa:	2201      	movs	r2, #1
 80036ac:	409a      	lsls	r2, r3
 80036ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003798 <xTaskRemoveFromEventList+0x1b0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	4a38      	ldr	r2, [pc, #224]	@ (8003798 <xTaskRemoveFromEventList+0x1b0>)
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036bc:	4937      	ldr	r1, [pc, #220]	@ (800379c <xTaskRemoveFromEventList+0x1b4>)
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	3304      	adds	r3, #4
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	60da      	str	r2, [r3, #12]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	6a3a      	ldr	r2, [r7, #32]
 80036e2:	3204      	adds	r2, #4
 80036e4:	605a      	str	r2, [r3, #4]
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	1d1a      	adds	r2, r3, #4
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	609a      	str	r2, [r3, #8]
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4a28      	ldr	r2, [pc, #160]	@ (800379c <xTaskRemoveFromEventList+0x1b4>)
 80036fc:	441a      	add	r2, r3
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	615a      	str	r2, [r3, #20]
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003706:	4925      	ldr	r1, [pc, #148]	@ (800379c <xTaskRemoveFromEventList+0x1b4>)
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6a3a      	ldr	r2, [r7, #32]
 8003716:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003718:	1c59      	adds	r1, r3, #1
 800371a:	4820      	ldr	r0, [pc, #128]	@ (800379c <xTaskRemoveFromEventList+0x1b4>)
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4403      	add	r3, r0
 8003726:	6019      	str	r1, [r3, #0]
 8003728:	e01b      	b.n	8003762 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800372a:	4b1d      	ldr	r3, [pc, #116]	@ (80037a0 <xTaskRemoveFromEventList+0x1b8>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	61bb      	str	r3, [r7, #24]
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	61da      	str	r2, [r3, #28]
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	621a      	str	r2, [r3, #32]
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	6a3a      	ldr	r2, [r7, #32]
 8003744:	3218      	adds	r2, #24
 8003746:	605a      	str	r2, [r3, #4]
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	f103 0218 	add.w	r2, r3, #24
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	609a      	str	r2, [r3, #8]
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	4a12      	ldr	r2, [pc, #72]	@ (80037a0 <xTaskRemoveFromEventList+0x1b8>)
 8003756:	629a      	str	r2, [r3, #40]	@ 0x28
 8003758:	4b11      	ldr	r3, [pc, #68]	@ (80037a0 <xTaskRemoveFromEventList+0x1b8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3301      	adds	r3, #1
 800375e:	4a10      	ldr	r2, [pc, #64]	@ (80037a0 <xTaskRemoveFromEventList+0x1b8>)
 8003760:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003766:	4b0f      	ldr	r3, [pc, #60]	@ (80037a4 <xTaskRemoveFromEventList+0x1bc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376c:	429a      	cmp	r2, r3
 800376e:	d905      	bls.n	800377c <xTaskRemoveFromEventList+0x194>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003770:	2301      	movs	r3, #1
 8003772:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003774:	4b0c      	ldr	r3, [pc, #48]	@ (80037a8 <xTaskRemoveFromEventList+0x1c0>)
 8003776:	2201      	movs	r2, #1
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	e001      	b.n	8003780 <xTaskRemoveFromEventList+0x198>
        }
        else
        {
            xReturn = pdFALSE;
 800377c:	2300      	movs	r3, #0
 800377e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8003780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003782:	4619      	mov	r1, r3
 8003784:	20e4      	movs	r0, #228	@ 0xe4
 8003786:	f003 fba7 	bl	8006ed8 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800378c:	4618      	mov	r0, r3
 800378e:	3728      	adds	r7, #40	@ 0x28
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20000218 	.word	0x20000218
 8003798:	200001f8 	.word	0x200001f8
 800379c:	2000011c 	.word	0x2000011c
 80037a0:	200001b0 	.word	0x200001b0
 80037a4:	20000118 	.word	0x20000118
 80037a8:	20000204 	.word	0x20000204

080037ac <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037b4:	4b07      	ldr	r3, [pc, #28]	@ (80037d4 <vTaskInternalSetTimeOutState+0x28>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80037bc:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <vTaskInternalSetTimeOutState+0x2c>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 80037c4:	20e7      	movs	r0, #231	@ 0xe7
 80037c6:	f003 fb4b 	bl	8006e60 <SEGGER_SYSVIEW_RecordEndCall>
}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000208 	.word	0x20000208
 80037d8:	200001f4 	.word	0x200001f4

080037dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10d      	bne.n	8003808 <xTaskCheckForTimeOut+0x2c>
    __asm volatile
 80037ec:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80037f0:	b672      	cpsid	i
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	b662      	cpsie	i
 8003800:	613b      	str	r3, [r7, #16]
}
 8003802:	bf00      	nop
 8003804:	bf00      	nop
 8003806:	e7fd      	b.n	8003804 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10d      	bne.n	800382a <xTaskCheckForTimeOut+0x4e>
    __asm volatile
 800380e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003812:	b672      	cpsid	i
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	b662      	cpsie	i
 8003822:	60fb      	str	r3, [r7, #12]
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	e7fd      	b.n	8003826 <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 800382a:	f000 fe83 	bl	8004534 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800382e:	4b21      	ldr	r3, [pc, #132]	@ (80038b4 <xTaskCheckForTimeOut+0xd8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d102      	bne.n	800384e <xTaskCheckForTimeOut+0x72>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003848:	2300      	movs	r3, #0
 800384a:	61fb      	str	r3, [r7, #28]
 800384c:	e026      	b.n	800389c <xTaskCheckForTimeOut+0xc0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	4b19      	ldr	r3, [pc, #100]	@ (80038b8 <xTaskCheckForTimeOut+0xdc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d00a      	beq.n	8003870 <xTaskCheckForTimeOut+0x94>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	429a      	cmp	r2, r3
 8003862:	d305      	bcc.n	8003870 <xTaskCheckForTimeOut+0x94>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003864:	2301      	movs	r3, #1
 8003866:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e015      	b.n	800389c <xTaskCheckForTimeOut+0xc0>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	429a      	cmp	r2, r3
 8003878:	d20b      	bcs.n	8003892 <xTaskCheckForTimeOut+0xb6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	1ad2      	subs	r2, r2, r3
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff ff90 	bl	80037ac <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800388c:	2300      	movs	r3, #0
 800388e:	61fb      	str	r3, [r7, #28]
 8003890:	e004      	b.n	800389c <xTaskCheckForTimeOut+0xc0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003898:	2301      	movs	r3, #1
 800389a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800389c:	f000 fe80 	bl	80045a0 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	4619      	mov	r1, r3
 80038a4:	20e8      	movs	r0, #232	@ 0xe8
 80038a6:	f003 fb17 	bl	8006ed8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80038aa:	69fb      	ldr	r3, [r7, #28]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3720      	adds	r7, #32
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	200001f4 	.word	0x200001f4
 80038b8:	20000208 	.word	0x20000208

080038bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80038c0:	4b03      	ldr	r3, [pc, #12]	@ (80038d0 <vTaskMissedYield+0x14>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 80038c6:	20e9      	movs	r0, #233	@ 0xe9
 80038c8:	f003 faca 	bl	8006e60 <SEGGER_SYSVIEW_RecordEndCall>
}
 80038cc:	bf00      	nop
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000204 	.word	0x20000204

080038d4 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80038dc:	f000 f84c 	bl	8003978 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 80038e0:	4b04      	ldr	r3, [pc, #16]	@ (80038f4 <prvIdleTask+0x20>)
 80038e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80038f0:	bf00      	nop
 80038f2:	e7f3      	b.n	80038dc <prvIdleTask+0x8>
 80038f4:	e000ed04 	.word	0xe000ed04

080038f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038fe:	2300      	movs	r3, #0
 8003900:	607b      	str	r3, [r7, #4]
 8003902:	e00c      	b.n	800391e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4a12      	ldr	r2, [pc, #72]	@ (8003958 <prvInitialiseTaskLists+0x60>)
 8003910:	4413      	add	r3, r2
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fc5c 	bl	80021d0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3301      	adds	r3, #1
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b04      	cmp	r3, #4
 8003922:	d9ef      	bls.n	8003904 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003924:	480d      	ldr	r0, [pc, #52]	@ (800395c <prvInitialiseTaskLists+0x64>)
 8003926:	f7fe fc53 	bl	80021d0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800392a:	480d      	ldr	r0, [pc, #52]	@ (8003960 <prvInitialiseTaskLists+0x68>)
 800392c:	f7fe fc50 	bl	80021d0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003930:	480c      	ldr	r0, [pc, #48]	@ (8003964 <prvInitialiseTaskLists+0x6c>)
 8003932:	f7fe fc4d 	bl	80021d0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003936:	480c      	ldr	r0, [pc, #48]	@ (8003968 <prvInitialiseTaskLists+0x70>)
 8003938:	f7fe fc4a 	bl	80021d0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800393c:	480b      	ldr	r0, [pc, #44]	@ (800396c <prvInitialiseTaskLists+0x74>)
 800393e:	f7fe fc47 	bl	80021d0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003942:	4b0b      	ldr	r3, [pc, #44]	@ (8003970 <prvInitialiseTaskLists+0x78>)
 8003944:	4a05      	ldr	r2, [pc, #20]	@ (800395c <prvInitialiseTaskLists+0x64>)
 8003946:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003948:	4b0a      	ldr	r3, [pc, #40]	@ (8003974 <prvInitialiseTaskLists+0x7c>)
 800394a:	4a05      	ldr	r2, [pc, #20]	@ (8003960 <prvInitialiseTaskLists+0x68>)
 800394c:	601a      	str	r2, [r3, #0]
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	2000011c 	.word	0x2000011c
 800395c:	20000180 	.word	0x20000180
 8003960:	20000194 	.word	0x20000194
 8003964:	200001b0 	.word	0x200001b0
 8003968:	200001c4 	.word	0x200001c4
 800396c:	200001dc 	.word	0x200001dc
 8003970:	200001a8 	.word	0x200001a8
 8003974:	200001ac 	.word	0x200001ac

08003978 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800397e:	e019      	b.n	80039b4 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003980:	f000 fdd8 	bl	8004534 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003984:	4b10      	ldr	r3, [pc, #64]	@ (80039c8 <prvCheckTasksWaitingTermination+0x50>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	4618      	mov	r0, r3
 8003992:	f7fe fc89 	bl	80022a8 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003996:	4b0d      	ldr	r3, [pc, #52]	@ (80039cc <prvCheckTasksWaitingTermination+0x54>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	3b01      	subs	r3, #1
 800399c:	4a0b      	ldr	r2, [pc, #44]	@ (80039cc <prvCheckTasksWaitingTermination+0x54>)
 800399e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80039a0:	4b0b      	ldr	r3, [pc, #44]	@ (80039d0 <prvCheckTasksWaitingTermination+0x58>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3b01      	subs	r3, #1
 80039a6:	4a0a      	ldr	r2, [pc, #40]	@ (80039d0 <prvCheckTasksWaitingTermination+0x58>)
 80039a8:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80039aa:	f000 fdf9 	bl	80045a0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f810 	bl	80039d4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039b4:	4b06      	ldr	r3, [pc, #24]	@ (80039d0 <prvCheckTasksWaitingTermination+0x58>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e1      	bne.n	8003980 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	200001c4 	.word	0x200001c4
 80039cc:	200001f0 	.word	0x200001f0
 80039d0:	200001d8 	.word	0x200001d8

080039d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 f821 	bl	8004a28 <vPortFree>
            vPortFree( pxTCB );
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f001 f81e 	bl	8004a28 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a24 <prvResetNextTaskUnblockTime+0x30>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d104      	bne.n	8003a0c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003a02:	4b09      	ldr	r3, [pc, #36]	@ (8003a28 <prvResetNextTaskUnblockTime+0x34>)
 8003a04:	f04f 32ff 	mov.w	r2, #4294967295
 8003a08:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003a0a:	e005      	b.n	8003a18 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a0c:	4b05      	ldr	r3, [pc, #20]	@ (8003a24 <prvResetNextTaskUnblockTime+0x30>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a04      	ldr	r2, [pc, #16]	@ (8003a28 <prvResetNextTaskUnblockTime+0x34>)
 8003a16:	6013      	str	r3, [r2, #0]
}
 8003a18:	bf00      	nop
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	200001a8 	.word	0x200001a8
 8003a28:	20000210 	.word	0x20000210

08003a2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8003a32:	4b0d      	ldr	r3, [pc, #52]	@ (8003a68 <xTaskGetSchedulerState+0x3c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d102      	bne.n	8003a40 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	607b      	str	r3, [r7, #4]
 8003a3e:	e008      	b.n	8003a52 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003a40:	4b0a      	ldr	r3, [pc, #40]	@ (8003a6c <xTaskGetSchedulerState+0x40>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d102      	bne.n	8003a4e <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	e001      	b.n	8003a52 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4619      	mov	r1, r3
 8003a56:	20f5      	movs	r0, #245	@ 0xf5
 8003a58:	f003 fa3e 	bl	8006ed8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003a5c:	687b      	ldr	r3, [r7, #4]
    }
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	200001fc 	.word	0x200001fc
 8003a6c:	20000218 	.word	0x20000218

08003a70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 8098 	beq.w	8003bb8 <xTaskPriorityDisinherit+0x148>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003a88:	4b50      	ldr	r3, [pc, #320]	@ (8003bcc <xTaskPriorityDisinherit+0x15c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d00d      	beq.n	8003aae <xTaskPriorityDisinherit+0x3e>
    __asm volatile
 8003a92:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003a96:	b672      	cpsid	i
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	b662      	cpsie	i
 8003aa6:	613b      	str	r3, [r7, #16]
}
 8003aa8:	bf00      	nop
 8003aaa:	bf00      	nop
 8003aac:	e7fd      	b.n	8003aaa <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10d      	bne.n	8003ad2 <xTaskPriorityDisinherit+0x62>
    __asm volatile
 8003ab6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003aba:	b672      	cpsid	i
 8003abc:	f383 8811 	msr	BASEPRI, r3
 8003ac0:	f3bf 8f6f 	isb	sy
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	b662      	cpsie	i
 8003aca:	60fb      	str	r3, [r7, #12]
}
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	e7fd      	b.n	8003ace <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad6:	1e5a      	subs	r2, r3, #1
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d067      	beq.n	8003bb8 <xTaskPriorityDisinherit+0x148>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d163      	bne.n	8003bb8 <xTaskPriorityDisinherit+0x148>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	3304      	adds	r3, #4
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fe fbd7 	bl	80022a8 <uxListRemove>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10a      	bne.n	8003b16 <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b04:	2201      	movs	r2, #1
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	43da      	mvns	r2, r3
 8003b0c:	4b30      	ldr	r3, [pc, #192]	@ (8003bd0 <xTaskPriorityDisinherit+0x160>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4013      	ands	r3, r2
 8003b12:	4a2f      	ldr	r2, [pc, #188]	@ (8003bd0 <xTaskPriorityDisinherit+0x160>)
 8003b14:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b22:	f1c3 0205 	rsb	r2, r3, #5
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f003 facb 	bl	80070c8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b36:	2201      	movs	r2, #1
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	4b25      	ldr	r3, [pc, #148]	@ (8003bd0 <xTaskPriorityDisinherit+0x160>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	4a23      	ldr	r2, [pc, #140]	@ (8003bd0 <xTaskPriorityDisinherit+0x160>)
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b48:	4922      	ldr	r1, [pc, #136]	@ (8003bd4 <xTaskPriorityDisinherit+0x164>)
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	3304      	adds	r3, #4
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	60da      	str	r2, [r3, #12]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	3204      	adds	r2, #4
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	1d1a      	adds	r2, r3, #4
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	609a      	str	r2, [r3, #8]
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4a13      	ldr	r2, [pc, #76]	@ (8003bd4 <xTaskPriorityDisinherit+0x164>)
 8003b88:	441a      	add	r2, r3
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	615a      	str	r2, [r3, #20]
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b92:	4910      	ldr	r1, [pc, #64]	@ (8003bd4 <xTaskPriorityDisinherit+0x164>)
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003ba4:	1c59      	adds	r1, r3, #1
 8003ba6:	480b      	ldr	r0, [pc, #44]	@ (8003bd4 <xTaskPriorityDisinherit+0x164>)
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4403      	add	r3, r0
 8003bb2:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	20f7      	movs	r0, #247	@ 0xf7
 8003bbe:	f003 f98b 	bl	8006ed8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
    }
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3720      	adds	r7, #32
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20000118 	.word	0x20000118
 8003bd0:	200001f8 	.word	0x200001f8
 8003bd4:	2000011c 	.word	0x2000011c

08003bd8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003be2:	4b3d      	ldr	r3, [pc, #244]	@ (8003cd8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003be8:	4b3c      	ldr	r3, [pc, #240]	@ (8003cdc <prvAddCurrentTaskToDelayedList+0x104>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003bee:	4b3c      	ldr	r3, [pc, #240]	@ (8003ce0 <prvAddCurrentTaskToDelayedList+0x108>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bf4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fb54 	bl	80022a8 <uxListRemove>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10b      	bne.n	8003c1e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003c06:	4b37      	ldr	r3, [pc, #220]	@ (8003ce4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43da      	mvns	r2, r3
 8003c14:	4b34      	ldr	r3, [pc, #208]	@ (8003ce8 <prvAddCurrentTaskToDelayedList+0x110>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	4a33      	ldr	r2, [pc, #204]	@ (8003ce8 <prvAddCurrentTaskToDelayedList+0x110>)
 8003c1c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c24:	d124      	bne.n	8003c70 <prvAddCurrentTaskToDelayedList+0x98>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d021      	beq.n	8003c70 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8003cec <prvAddCurrentTaskToDelayedList+0x114>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	609a      	str	r2, [r3, #8]
 8003c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ce4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	6892      	ldr	r2, [r2, #8]
 8003c42:	60da      	str	r2, [r3, #12]
 8003c44:	4b27      	ldr	r3, [pc, #156]	@ (8003ce4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	3204      	adds	r2, #4
 8003c4e:	605a      	str	r2, [r3, #4]
 8003c50:	4b24      	ldr	r3, [pc, #144]	@ (8003ce4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	1d1a      	adds	r2, r3, #4
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	609a      	str	r2, [r3, #8]
 8003c5a:	4b22      	ldr	r3, [pc, #136]	@ (8003ce4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a23      	ldr	r2, [pc, #140]	@ (8003cec <prvAddCurrentTaskToDelayedList+0x114>)
 8003c60:	615a      	str	r2, [r3, #20]
 8003c62:	4b22      	ldr	r3, [pc, #136]	@ (8003cec <prvAddCurrentTaskToDelayedList+0x114>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3301      	adds	r3, #1
 8003c68:	4a20      	ldr	r2, [pc, #128]	@ (8003cec <prvAddCurrentTaskToDelayedList+0x114>)
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003c6e:	e02e      	b.n	8003cce <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c78:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d20d      	bcs.n	8003ca4 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003c88:	4b16      	ldr	r3, [pc, #88]	@ (8003ce4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2104      	movs	r1, #4
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f003 fa5c 	bl	800714c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003c94:	4b13      	ldr	r3, [pc, #76]	@ (8003ce4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	6978      	ldr	r0, [r7, #20]
 8003c9e:	f7fe fac8 	bl	8002232 <vListInsert>
}
 8003ca2:	e014      	b.n	8003cce <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8003ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ce4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2104      	movs	r1, #4
 8003caa:	4618      	mov	r0, r3
 8003cac:	f003 fa4e 	bl	800714c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	69b8      	ldr	r0, [r7, #24]
 8003cba:	f7fe faba 	bl	8002232 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf0 <prvAddCurrentTaskToDelayedList+0x118>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d202      	bcs.n	8003cce <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8003cc8:	4a09      	ldr	r2, [pc, #36]	@ (8003cf0 <prvAddCurrentTaskToDelayedList+0x118>)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6013      	str	r3, [r2, #0]
}
 8003cce:	bf00      	nop
 8003cd0:	3720      	adds	r7, #32
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	200001f4 	.word	0x200001f4
 8003cdc:	200001a8 	.word	0x200001a8
 8003ce0:	200001ac 	.word	0x200001ac
 8003ce4:	20000118 	.word	0x20000118
 8003ce8:	200001f8 	.word	0x200001f8
 8003cec:	200001dc 	.word	0x200001dc
 8003cf0:	20000210 	.word	0x20000210

08003cf4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003cfe:	f000 fa7d 	bl	80041fc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003d02:	4b16      	ldr	r3, [pc, #88]	@ (8003d5c <xTimerCreateTimerTask+0x68>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00b      	beq.n	8003d22 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003d0a:	4b15      	ldr	r3, [pc, #84]	@ (8003d60 <xTimerCreateTimerTask+0x6c>)
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	2304      	movs	r3, #4
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	2300      	movs	r3, #0
 8003d14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d18:	4912      	ldr	r1, [pc, #72]	@ (8003d64 <xTimerCreateTimerTask+0x70>)
 8003d1a:	4813      	ldr	r0, [pc, #76]	@ (8003d68 <xTimerCreateTimerTask+0x74>)
 8003d1c:	f7fe ff2e 	bl	8002b7c <xTaskCreate>
 8003d20:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10d      	bne.n	8003d44 <xTimerCreateTimerTask+0x50>
    __asm volatile
 8003d28:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003d2c:	b672      	cpsid	i
 8003d2e:	f383 8811 	msr	BASEPRI, r3
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	b662      	cpsie	i
 8003d3c:	603b      	str	r3, [r7, #0]
}
 8003d3e:	bf00      	nop
 8003d40:	bf00      	nop
 8003d42:	e7fd      	b.n	8003d40 <xTimerCreateTimerTask+0x4c>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4619      	mov	r1, r3
 8003d48:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8003d4c:	f003 f8c4 	bl	8006ed8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003d50:	687b      	ldr	r3, [r7, #4]
    }
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	2000024c 	.word	0x2000024c
 8003d60:	20000250 	.word	0x20000250
 8003d64:	08007f40 	.word	0x08007f40
 8003d68:	08003e11 	.word	0x08003e11

08003d6c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003d78:	e008      	b.n	8003d8c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	4413      	add	r3, r2
 8003d82:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	699a      	ldr	r2, [r3, #24]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	18d1      	adds	r1, r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f8df 	bl	8003f5c <prvInsertTimerInActiveList>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1ea      	bne.n	8003d7a <prvReloadTimer+0xe>
        }
    }
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dba:	4b14      	ldr	r3, [pc, #80]	@ (8003e0c <prvProcessExpiredTimer+0x5c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fe fa6d 	bl	80022a8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f7ff ffc3 	bl	8003d6c <prvReloadTimer>
 8003de6:	e008      	b.n	8003dfa <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dee:	f023 0301 	bic.w	r3, r3, #1
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	4798      	blx	r3
    }
 8003e02:	bf00      	nop
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000244 	.word	0x20000244

08003e10 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e18:	f107 0308 	add.w	r3, r7, #8
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 f859 	bl	8003ed4 <prvGetNextExpireTime>
 8003e22:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4619      	mov	r1, r3
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f805 	bl	8003e38 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003e2e:	f000 f8d7 	bl	8003fe0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e32:	bf00      	nop
 8003e34:	e7f0      	b.n	8003e18 <prvTimerTask+0x8>
	...

08003e38 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003e42:	f7ff f8a3 	bl	8002f8c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e46:	f107 0308 	add.w	r3, r7, #8
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 f866 	bl	8003f1c <prvSampleTimeNow>
 8003e50:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d130      	bne.n	8003eba <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10a      	bne.n	8003e74 <prvProcessTimerOrBlockTask+0x3c>
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d806      	bhi.n	8003e74 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003e66:	f7ff f89f 	bl	8002fa8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e6a:	68f9      	ldr	r1, [r7, #12]
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff ff9f 	bl	8003db0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003e72:	e024      	b.n	8003ebe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d008      	beq.n	8003e8c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e7a:	4b13      	ldr	r3, [pc, #76]	@ (8003ec8 <prvProcessTimerOrBlockTask+0x90>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <prvProcessTimerOrBlockTask+0x50>
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <prvProcessTimerOrBlockTask+0x52>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003ecc <prvProcessTimerOrBlockTask+0x94>)
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	4619      	mov	r1, r3
 8003e9a:	f7fe fd83 	bl	80029a4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003e9e:	f7ff f883 	bl	8002fa8 <xTaskResumeAll>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10a      	bne.n	8003ebe <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8003ea8:	4b09      	ldr	r3, [pc, #36]	@ (8003ed0 <prvProcessTimerOrBlockTask+0x98>)
 8003eaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	f3bf 8f6f 	isb	sy
    }
 8003eb8:	e001      	b.n	8003ebe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003eba:	f7ff f875 	bl	8002fa8 <xTaskResumeAll>
    }
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000248 	.word	0x20000248
 8003ecc:	2000024c 	.word	0x2000024c
 8003ed0:	e000ed04 	.word	0xe000ed04

08003ed4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003edc:	4b0e      	ldr	r3, [pc, #56]	@ (8003f18 <prvGetNextExpireTime+0x44>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <prvGetNextExpireTime+0x16>
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	e000      	b.n	8003eec <prvGetNextExpireTime+0x18>
 8003eea:	2200      	movs	r2, #0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d105      	bne.n	8003f04 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ef8:	4b07      	ldr	r3, [pc, #28]	@ (8003f18 <prvGetNextExpireTime+0x44>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	e001      	b.n	8003f08 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003f08:	68fb      	ldr	r3, [r7, #12]
    }
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	20000244 	.word	0x20000244

08003f1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8003f24:	f7ff f944 	bl	80031b0 <xTaskGetTickCount>
 8003f28:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f58 <prvSampleTimeNow+0x3c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d205      	bcs.n	8003f40 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003f34:	f000 f93c 	bl	80041b0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	e002      	b.n	8003f46 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003f46:	4a04      	ldr	r2, [pc, #16]	@ (8003f58 <prvSampleTimeNow+0x3c>)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
    }
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	20000254 	.word	0x20000254

08003f5c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d812      	bhi.n	8003fa8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	1ad2      	subs	r2, r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d302      	bcc.n	8003f96 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003f90:	2301      	movs	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	e01b      	b.n	8003fce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f96:	4b10      	ldr	r3, [pc, #64]	@ (8003fd8 <prvInsertTimerInActiveList+0x7c>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	f7fe f946 	bl	8002232 <vListInsert>
 8003fa6:	e012      	b.n	8003fce <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d206      	bcs.n	8003fbe <prvInsertTimerInActiveList+0x62>
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d302      	bcc.n	8003fbe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	e007      	b.n	8003fce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fbe:	4b07      	ldr	r3, [pc, #28]	@ (8003fdc <prvInsertTimerInActiveList+0x80>)
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4610      	mov	r0, r2
 8003fca:	f7fe f932 	bl	8002232 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003fce:	697b      	ldr	r3, [r7, #20]
    }
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20000248 	.word	0x20000248
 8003fdc:	20000244 	.word	0x20000244

08003fe0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08a      	sub	sp, #40	@ 0x28
 8003fe4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8003fe6:	1d3b      	adds	r3, r7, #4
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	605a      	str	r2, [r3, #4]
 8003fee:	609a      	str	r2, [r3, #8]
 8003ff0:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003ff2:	e0cb      	b.n	800418c <prvProcessReceivedCommands+0x1ac>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	da1b      	bge.n	8004032 <prvProcessReceivedCommands+0x52>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8004000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10d      	bne.n	8004022 <prvProcessReceivedCommands+0x42>
    __asm volatile
 8004006:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800400a:	b672      	cpsid	i
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	b662      	cpsie	i
 800401a:	61bb      	str	r3, [r7, #24]
}
 800401c:	bf00      	nop
 800401e:	bf00      	nop
 8004020:	e7fd      	b.n	800401e <prvProcessReceivedCommands+0x3e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004028:	6850      	ldr	r0, [r2, #4]
 800402a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800402c:	6892      	ldr	r2, [r2, #8]
 800402e:	4611      	mov	r1, r2
 8004030:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f2c0 80a9 	blt.w	800418c <prvProcessReceivedCommands+0x1ac>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d004      	beq.n	8004050 <prvProcessReceivedCommands+0x70>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	3304      	adds	r3, #4
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe f92c 	bl	80022a8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004050:	463b      	mov	r3, r7
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff ff62 	bl	8003f1c <prvSampleTimeNow>
 8004058:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3b01      	subs	r3, #1
 800405e:	2b08      	cmp	r3, #8
 8004060:	f200 8091 	bhi.w	8004186 <prvProcessReceivedCommands+0x1a6>
 8004064:	a201      	add	r2, pc, #4	@ (adr r2, 800406c <prvProcessReceivedCommands+0x8c>)
 8004066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406a:	bf00      	nop
 800406c:	08004091 	.word	0x08004091
 8004070:	08004091 	.word	0x08004091
 8004074:	080040f9 	.word	0x080040f9
 8004078:	0800410d 	.word	0x0800410d
 800407c:	0800415d 	.word	0x0800415d
 8004080:	08004091 	.word	0x08004091
 8004084:	08004091 	.word	0x08004091
 8004088:	080040f9 	.word	0x080040f9
 800408c:	0800410d 	.word	0x0800410d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	b2da      	uxtb	r2, r3
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	18d1      	adds	r1, r2, r3
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	6a38      	ldr	r0, [r7, #32]
 80040b0:	f7ff ff54 	bl	8003f5c <prvInsertTimerInActiveList>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d067      	beq.n	800418a <prvProcessReceivedCommands+0x1aa>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d009      	beq.n	80040dc <prvProcessReceivedCommands+0xfc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	4413      	add	r3, r2
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	4619      	mov	r1, r3
 80040d4:	6a38      	ldr	r0, [r7, #32]
 80040d6:	f7ff fe49 	bl	8003d6c <prvReloadTimer>
 80040da:	e008      	b.n	80040ee <prvProcessReceivedCommands+0x10e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040e2:	f023 0301 	bic.w	r3, r3, #1
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	6a38      	ldr	r0, [r7, #32]
 80040f4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80040f6:	e048      	b.n	800418a <prvProcessReceivedCommands+0x1aa>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040fe:	f023 0301 	bic.w	r3, r3, #1
 8004102:	b2da      	uxtb	r2, r3
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800410a:	e03f      	b.n	800418c <prvProcessReceivedCommands+0x1ac>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	b2da      	uxtb	r2, r3
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10d      	bne.n	8004148 <prvProcessReceivedCommands+0x168>
    __asm volatile
 800412c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004130:	b672      	cpsid	i
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	b662      	cpsie	i
 8004140:	617b      	str	r3, [r7, #20]
}
 8004142:	bf00      	nop
 8004144:	bf00      	nop
 8004146:	e7fd      	b.n	8004144 <prvProcessReceivedCommands+0x164>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	699a      	ldr	r2, [r3, #24]
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	18d1      	adds	r1, r2, r3
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	6a38      	ldr	r0, [r7, #32]
 8004156:	f7ff ff01 	bl	8003f5c <prvInsertTimerInActiveList>
                        break;
 800415a:	e017      	b.n	800418c <prvProcessReceivedCommands+0x1ac>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d103      	bne.n	8004172 <prvProcessReceivedCommands+0x192>
                            {
                                vPortFree( pxTimer );
 800416a:	6a38      	ldr	r0, [r7, #32]
 800416c:	f000 fc5c 	bl	8004a28 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004170:	e00c      	b.n	800418c <prvProcessReceivedCommands+0x1ac>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004178:	f023 0301 	bic.w	r3, r3, #1
 800417c:	b2da      	uxtb	r2, r3
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004184:	e002      	b.n	800418c <prvProcessReceivedCommands+0x1ac>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004186:	bf00      	nop
 8004188:	e000      	b.n	800418c <prvProcessReceivedCommands+0x1ac>
                        break;
 800418a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800418c:	4b07      	ldr	r3, [pc, #28]	@ (80041ac <prvProcessReceivedCommands+0x1cc>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	1d39      	adds	r1, r7, #4
 8004192:	2200      	movs	r2, #0
 8004194:	4618      	mov	r0, r3
 8004196:	f7fe f9c3 	bl	8002520 <xQueueReceive>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	f47f af29 	bne.w	8003ff4 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 80041a2:	bf00      	nop
 80041a4:	bf00      	nop
 80041a6:	3728      	adds	r7, #40	@ 0x28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	2000024c 	.word	0x2000024c

080041b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041b6:	e009      	b.n	80041cc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041b8:	4b0e      	ldr	r3, [pc, #56]	@ (80041f4 <prvSwitchTimerLists+0x44>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80041c2:	f04f 31ff 	mov.w	r1, #4294967295
 80041c6:	6838      	ldr	r0, [r7, #0]
 80041c8:	f7ff fdf2 	bl	8003db0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041cc:	4b09      	ldr	r3, [pc, #36]	@ (80041f4 <prvSwitchTimerLists+0x44>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80041d6:	4b07      	ldr	r3, [pc, #28]	@ (80041f4 <prvSwitchTimerLists+0x44>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80041dc:	4b06      	ldr	r3, [pc, #24]	@ (80041f8 <prvSwitchTimerLists+0x48>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a04      	ldr	r2, [pc, #16]	@ (80041f4 <prvSwitchTimerLists+0x44>)
 80041e2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80041e4:	4a04      	ldr	r2, [pc, #16]	@ (80041f8 <prvSwitchTimerLists+0x48>)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6013      	str	r3, [r2, #0]
    }
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000244 	.word	0x20000244
 80041f8:	20000248 	.word	0x20000248

080041fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004200:	f000 f998 	bl	8004534 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004204:	4b12      	ldr	r3, [pc, #72]	@ (8004250 <prvCheckForValidListAndQueue+0x54>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d11d      	bne.n	8004248 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800420c:	4811      	ldr	r0, [pc, #68]	@ (8004254 <prvCheckForValidListAndQueue+0x58>)
 800420e:	f7fd ffdf 	bl	80021d0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004212:	4811      	ldr	r0, [pc, #68]	@ (8004258 <prvCheckForValidListAndQueue+0x5c>)
 8004214:	f7fd ffdc 	bl	80021d0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004218:	4b10      	ldr	r3, [pc, #64]	@ (800425c <prvCheckForValidListAndQueue+0x60>)
 800421a:	4a0e      	ldr	r2, [pc, #56]	@ (8004254 <prvCheckForValidListAndQueue+0x58>)
 800421c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800421e:	4b10      	ldr	r3, [pc, #64]	@ (8004260 <prvCheckForValidListAndQueue+0x64>)
 8004220:	4a0d      	ldr	r2, [pc, #52]	@ (8004258 <prvCheckForValidListAndQueue+0x5c>)
 8004222:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8004224:	2200      	movs	r2, #0
 8004226:	2110      	movs	r1, #16
 8004228:	2005      	movs	r0, #5
 800422a:	f7fe f8f9 	bl	8002420 <xQueueGenericCreate>
 800422e:	4603      	mov	r3, r0
 8004230:	4a07      	ldr	r2, [pc, #28]	@ (8004250 <prvCheckForValidListAndQueue+0x54>)
 8004232:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004234:	4b06      	ldr	r3, [pc, #24]	@ (8004250 <prvCheckForValidListAndQueue+0x54>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800423c:	4b04      	ldr	r3, [pc, #16]	@ (8004250 <prvCheckForValidListAndQueue+0x54>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4908      	ldr	r1, [pc, #32]	@ (8004264 <prvCheckForValidListAndQueue+0x68>)
 8004242:	4618      	mov	r0, r3
 8004244:	f7fe fb5c 	bl	8002900 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004248:	f000 f9aa 	bl	80045a0 <vPortExitCritical>
    }
 800424c:	bf00      	nop
 800424e:	bd80      	pop	{r7, pc}
 8004250:	2000024c 	.word	0x2000024c
 8004254:	2000021c 	.word	0x2000021c
 8004258:	20000230 	.word	0x20000230
 800425c:	20000244 	.word	0x20000244
 8004260:	20000248 	.word	0x20000248
 8004264:	08007f48 	.word	0x08007f48

08004268 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3b04      	subs	r3, #4
 8004278:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004280:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3b04      	subs	r3, #4
 8004286:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f023 0201 	bic.w	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3b04      	subs	r3, #4
 8004296:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004298:	4a0c      	ldr	r2, [pc, #48]	@ (80042cc <pxPortInitialiseStack+0x64>)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3b14      	subs	r3, #20
 80042a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	3b04      	subs	r3, #4
 80042ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f06f 0202 	mvn.w	r2, #2
 80042b6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3b20      	subs	r3, #32
 80042bc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80042be:	68fb      	ldr	r3, [r7, #12]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	080042d1 	.word	0x080042d1

080042d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80042da:	4b15      	ldr	r3, [pc, #84]	@ (8004330 <prvTaskExitError+0x60>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e2:	d00d      	beq.n	8004300 <prvTaskExitError+0x30>
    __asm volatile
 80042e4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80042e8:	b672      	cpsid	i
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	b662      	cpsie	i
 80042f8:	60fb      	str	r3, [r7, #12]
}
 80042fa:	bf00      	nop
 80042fc:	bf00      	nop
 80042fe:	e7fd      	b.n	80042fc <prvTaskExitError+0x2c>
    __asm volatile
 8004300:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004304:	b672      	cpsid	i
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	b662      	cpsie	i
 8004314:	60bb      	str	r3, [r7, #8]
}
 8004316:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004318:	bf00      	nop
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0fc      	beq.n	800431a <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	20000010 	.word	0x20000010
	...

08004340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004340:	4b07      	ldr	r3, [pc, #28]	@ (8004360 <pxCurrentTCBConst2>)
 8004342:	6819      	ldr	r1, [r3, #0]
 8004344:	6808      	ldr	r0, [r1, #0]
 8004346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800434a:	f380 8809 	msr	PSP, r0
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f04f 0000 	mov.w	r0, #0
 8004356:	f380 8811 	msr	BASEPRI, r0
 800435a:	4770      	bx	lr
 800435c:	f3af 8000 	nop.w

08004360 <pxCurrentTCBConst2>:
 8004360:	20000118 	.word	0x20000118
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004364:	bf00      	nop
 8004366:	bf00      	nop

08004368 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004368:	4808      	ldr	r0, [pc, #32]	@ (800438c <prvPortStartFirstTask+0x24>)
 800436a:	6800      	ldr	r0, [r0, #0]
 800436c:	6800      	ldr	r0, [r0, #0]
 800436e:	f380 8808 	msr	MSP, r0
 8004372:	f04f 0000 	mov.w	r0, #0
 8004376:	f380 8814 	msr	CONTROL, r0
 800437a:	b662      	cpsie	i
 800437c:	b661      	cpsie	f
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	df00      	svc	0
 8004388:	bf00      	nop
 800438a:	0000      	.short	0x0000
 800438c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004390:	bf00      	nop
 8004392:	bf00      	nop

08004394 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08a      	sub	sp, #40	@ 0x28
 8004398:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800439a:	4b5c      	ldr	r3, [pc, #368]	@ (800450c <xPortStartScheduler+0x178>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80043a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a2:	332c      	adds	r3, #44	@ 0x2c
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a5a      	ldr	r2, [pc, #360]	@ (8004510 <xPortStartScheduler+0x17c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00d      	beq.n	80043c8 <xPortStartScheduler+0x34>
    __asm volatile
 80043ac:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80043b0:	b672      	cpsid	i
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	b662      	cpsie	i
 80043c0:	61fb      	str	r3, [r7, #28]
}
 80043c2:	bf00      	nop
 80043c4:	bf00      	nop
 80043c6:	e7fd      	b.n	80043c4 <xPortStartScheduler+0x30>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80043c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ca:	3338      	adds	r3, #56	@ 0x38
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a51      	ldr	r2, [pc, #324]	@ (8004514 <xPortStartScheduler+0x180>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00d      	beq.n	80043f0 <xPortStartScheduler+0x5c>
    __asm volatile
 80043d4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80043d8:	b672      	cpsid	i
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	b662      	cpsie	i
 80043e8:	61bb      	str	r3, [r7, #24]
}
 80043ea:	bf00      	nop
 80043ec:	bf00      	nop
 80043ee:	e7fd      	b.n	80043ec <xPortStartScheduler+0x58>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043f4:	4b48      	ldr	r3, [pc, #288]	@ (8004518 <xPortStartScheduler+0x184>)
 80043f6:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	22ff      	movs	r2, #255	@ 0xff
 8004404:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800440e:	79fb      	ldrb	r3, [r7, #7]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004416:	b2da      	uxtb	r2, r3
 8004418:	4b40      	ldr	r3, [pc, #256]	@ (800451c <xPortStartScheduler+0x188>)
 800441a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800441c:	4b3f      	ldr	r3, [pc, #252]	@ (800451c <xPortStartScheduler+0x188>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10d      	bne.n	8004440 <xPortStartScheduler+0xac>
    __asm volatile
 8004424:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004428:	b672      	cpsid	i
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	b662      	cpsie	i
 8004438:	617b      	str	r3, [r7, #20]
}
 800443a:	bf00      	nop
 800443c:	bf00      	nop
 800443e:	e7fd      	b.n	800443c <xPortStartScheduler+0xa8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	43db      	mvns	r3, r3
 8004446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d015      	beq.n	800447a <xPortStartScheduler+0xe6>
    __asm volatile
 800444e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004452:	b672      	cpsid	i
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	b662      	cpsie	i
 8004462:	613b      	str	r3, [r7, #16]
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop
 8004468:	e7fd      	b.n	8004466 <xPortStartScheduler+0xd2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	3301      	adds	r3, #1
 800446e:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	b2db      	uxtb	r3, r3
 8004478:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004482:	2b80      	cmp	r3, #128	@ 0x80
 8004484:	d0f1      	beq.n	800446a <xPortStartScheduler+0xd6>
        }

        if( ulImplementedPrioBits == 8 )
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d103      	bne.n	8004494 <xPortStartScheduler+0x100>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800448c:	4b24      	ldr	r3, [pc, #144]	@ (8004520 <xPortStartScheduler+0x18c>)
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	e004      	b.n	800449e <xPortStartScheduler+0x10a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f1c3 0307 	rsb	r3, r3, #7
 800449a:	4a21      	ldr	r2, [pc, #132]	@ (8004520 <xPortStartScheduler+0x18c>)
 800449c:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800449e:	4b20      	ldr	r3, [pc, #128]	@ (8004520 <xPortStartScheduler+0x18c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	021b      	lsls	r3, r3, #8
 80044a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004520 <xPortStartScheduler+0x18c>)
 80044a6:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004520 <xPortStartScheduler+0x18c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004520 <xPortStartScheduler+0x18c>)
 80044b2:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80044bc:	4b19      	ldr	r3, [pc, #100]	@ (8004524 <xPortStartScheduler+0x190>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a18      	ldr	r2, [pc, #96]	@ (8004524 <xPortStartScheduler+0x190>)
 80044c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044c6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80044c8:	4b16      	ldr	r3, [pc, #88]	@ (8004524 <xPortStartScheduler+0x190>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a15      	ldr	r2, [pc, #84]	@ (8004524 <xPortStartScheduler+0x190>)
 80044ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044d2:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80044d4:	4b14      	ldr	r3, [pc, #80]	@ (8004528 <xPortStartScheduler+0x194>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80044da:	f000 f8f1 	bl	80046c0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80044de:	4b13      	ldr	r3, [pc, #76]	@ (800452c <xPortStartScheduler+0x198>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80044e4:	f000 f910 	bl	8004708 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044e8:	4b11      	ldr	r3, [pc, #68]	@ (8004530 <xPortStartScheduler+0x19c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a10      	ldr	r2, [pc, #64]	@ (8004530 <xPortStartScheduler+0x19c>)
 80044ee:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80044f2:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80044f4:	f7ff ff38 	bl	8004368 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80044f8:	f7fe ff92 	bl	8003420 <vTaskSwitchContext>
    prvTaskExitError();
 80044fc:	f7ff fee8 	bl	80042d0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3728      	adds	r7, #40	@ 0x28
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	e000ed08 	.word	0xe000ed08
 8004510:	08004341 	.word	0x08004341
 8004514:	08004601 	.word	0x08004601
 8004518:	e000e400 	.word	0xe000e400
 800451c:	20000258 	.word	0x20000258
 8004520:	2000025c 	.word	0x2000025c
 8004524:	e000ed20 	.word	0xe000ed20
 8004528:	e000ed1c 	.word	0xe000ed1c
 800452c:	20000010 	.word	0x20000010
 8004530:	e000ef34 	.word	0xe000ef34

08004534 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
    __asm volatile
 800453a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800453e:	b672      	cpsid	i
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	b662      	cpsie	i
 800454e:	607b      	str	r3, [r7, #4]
}
 8004550:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004552:	4b11      	ldr	r3, [pc, #68]	@ (8004598 <vPortEnterCritical+0x64>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3301      	adds	r3, #1
 8004558:	4a0f      	ldr	r2, [pc, #60]	@ (8004598 <vPortEnterCritical+0x64>)
 800455a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800455c:	4b0e      	ldr	r3, [pc, #56]	@ (8004598 <vPortEnterCritical+0x64>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d112      	bne.n	800458a <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004564:	4b0d      	ldr	r3, [pc, #52]	@ (800459c <vPortEnterCritical+0x68>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00d      	beq.n	800458a <vPortEnterCritical+0x56>
    __asm volatile
 800456e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004572:	b672      	cpsid	i
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	b662      	cpsie	i
 8004582:	603b      	str	r3, [r7, #0]
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop
 8004588:	e7fd      	b.n	8004586 <vPortEnterCritical+0x52>
    }
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000010 	.word	0x20000010
 800459c:	e000ed04 	.word	0xe000ed04

080045a0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80045a6:	4b13      	ldr	r3, [pc, #76]	@ (80045f4 <vPortExitCritical+0x54>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10d      	bne.n	80045ca <vPortExitCritical+0x2a>
    __asm volatile
 80045ae:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80045b2:	b672      	cpsid	i
 80045b4:	f383 8811 	msr	BASEPRI, r3
 80045b8:	f3bf 8f6f 	isb	sy
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	b662      	cpsie	i
 80045c2:	607b      	str	r3, [r7, #4]
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop
 80045c8:	e7fd      	b.n	80045c6 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 80045ca:	4b0a      	ldr	r3, [pc, #40]	@ (80045f4 <vPortExitCritical+0x54>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	4a08      	ldr	r2, [pc, #32]	@ (80045f4 <vPortExitCritical+0x54>)
 80045d2:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80045d4:	4b07      	ldr	r3, [pc, #28]	@ (80045f4 <vPortExitCritical+0x54>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d105      	bne.n	80045e8 <vPortExitCritical+0x48>
 80045dc:	2300      	movs	r3, #0
 80045de:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80045e6:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	20000010 	.word	0x20000010
	...

08004600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004600:	f3ef 8009 	mrs	r0, PSP
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	4b15      	ldr	r3, [pc, #84]	@ (8004660 <pxCurrentTCBConst>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	f01e 0f10 	tst.w	lr, #16
 8004610:	bf08      	it	eq
 8004612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800461a:	6010      	str	r0, [r2, #0]
 800461c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004620:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8004624:	b672      	cpsid	i
 8004626:	f380 8811 	msr	BASEPRI, r0
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	b662      	cpsie	i
 8004634:	f7fe fef4 	bl	8003420 <vTaskSwitchContext>
 8004638:	f04f 0000 	mov.w	r0, #0
 800463c:	f380 8811 	msr	BASEPRI, r0
 8004640:	bc09      	pop	{r0, r3}
 8004642:	6819      	ldr	r1, [r3, #0]
 8004644:	6808      	ldr	r0, [r1, #0]
 8004646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800464a:	f01e 0f10 	tst.w	lr, #16
 800464e:	bf08      	it	eq
 8004650:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004654:	f380 8809 	msr	PSP, r0
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop

08004660 <pxCurrentTCBConst>:
 8004660:	20000118 	.word	0x20000118
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop

08004668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
    __asm volatile
 800466e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004672:	b672      	cpsid	i
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	b662      	cpsie	i
 8004682:	607b      	str	r3, [r7, #4]
}
 8004684:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004686:	f002 fb71 	bl	8006d6c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800468a:	f7fe fdc7 	bl	800321c <xTaskIncrementTick>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d006      	beq.n	80046a2 <SysTick_Handler+0x3a>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8004694:	f002 fbc8 	bl	8006e28 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004698:	4b08      	ldr	r3, [pc, #32]	@ (80046bc <SysTick_Handler+0x54>)
 800469a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	e001      	b.n	80046a6 <SysTick_Handler+0x3e>
        }
        else
        {
            traceISR_EXIT();
 80046a2:	f002 fba5 	bl	8006df0 <SEGGER_SYSVIEW_RecordExitISR>
 80046a6:	2300      	movs	r3, #0
 80046a8:	603b      	str	r3, [r7, #0]
    __asm volatile
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	f383 8811 	msr	BASEPRI, r3
}
 80046b0:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	e000ed04 	.word	0xe000ed04

080046c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046c4:	4b0b      	ldr	r3, [pc, #44]	@ (80046f4 <vPortSetupTimerInterrupt+0x34>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046ca:	4b0b      	ldr	r3, [pc, #44]	@ (80046f8 <vPortSetupTimerInterrupt+0x38>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046d0:	4b0a      	ldr	r3, [pc, #40]	@ (80046fc <vPortSetupTimerInterrupt+0x3c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004700 <vPortSetupTimerInterrupt+0x40>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	099b      	lsrs	r3, r3, #6
 80046dc:	4a09      	ldr	r2, [pc, #36]	@ (8004704 <vPortSetupTimerInterrupt+0x44>)
 80046de:	3b01      	subs	r3, #1
 80046e0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046e2:	4b04      	ldr	r3, [pc, #16]	@ (80046f4 <vPortSetupTimerInterrupt+0x34>)
 80046e4:	2207      	movs	r2, #7
 80046e6:	601a      	str	r2, [r3, #0]
}
 80046e8:	bf00      	nop
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	e000e010 	.word	0xe000e010
 80046f8:	e000e018 	.word	0xe000e018
 80046fc:	20000000 	.word	0x20000000
 8004700:	10624dd3 	.word	0x10624dd3
 8004704:	e000e014 	.word	0xe000e014

08004708 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004708:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004718 <vPortEnableVFP+0x10>
 800470c:	6801      	ldr	r1, [r0, #0]
 800470e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004712:	6001      	str	r1, [r0, #0]
 8004714:	4770      	bx	lr
 8004716:	0000      	.short	0x0000
 8004718:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 800471c:	bf00      	nop
 800471e:	bf00      	nop

08004720 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004726:	f3ef 8305 	mrs	r3, IPSR
 800472a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b0f      	cmp	r3, #15
 8004730:	d917      	bls.n	8004762 <vPortValidateInterruptPriority+0x42>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004732:	4a1a      	ldr	r2, [pc, #104]	@ (800479c <vPortValidateInterruptPriority+0x7c>)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4413      	add	r3, r2
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800473c:	4b18      	ldr	r3, [pc, #96]	@ (80047a0 <vPortValidateInterruptPriority+0x80>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	7afa      	ldrb	r2, [r7, #11]
 8004742:	429a      	cmp	r2, r3
 8004744:	d20d      	bcs.n	8004762 <vPortValidateInterruptPriority+0x42>
    __asm volatile
 8004746:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800474a:	b672      	cpsid	i
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	b662      	cpsie	i
 800475a:	607b      	str	r3, [r7, #4]
}
 800475c:	bf00      	nop
 800475e:	bf00      	nop
 8004760:	e7fd      	b.n	800475e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004762:	4b10      	ldr	r3, [pc, #64]	@ (80047a4 <vPortValidateInterruptPriority+0x84>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800476a:	4b0f      	ldr	r3, [pc, #60]	@ (80047a8 <vPortValidateInterruptPriority+0x88>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d90d      	bls.n	800478e <vPortValidateInterruptPriority+0x6e>
    __asm volatile
 8004772:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004776:	b672      	cpsid	i
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	b662      	cpsie	i
 8004786:	603b      	str	r3, [r7, #0]
}
 8004788:	bf00      	nop
 800478a:	bf00      	nop
 800478c:	e7fd      	b.n	800478a <vPortValidateInterruptPriority+0x6a>
    }
 800478e:	bf00      	nop
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	e000e3f0 	.word	0xe000e3f0
 80047a0:	20000258 	.word	0x20000258
 80047a4:	e000ed0c 	.word	0xe000ed0c
 80047a8:	2000025c 	.word	0x2000025c

080047ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08e      	sub	sp, #56	@ 0x38
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80047b4:	2300      	movs	r3, #0
 80047b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d022      	beq.n	8004804 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80047be:	2308      	movs	r3, #8
 80047c0:	43db      	mvns	r3, r3
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d81b      	bhi.n	8004800 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80047c8:	2208      	movs	r2, #8
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4413      	add	r3, r2
 80047ce:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d014      	beq.n	8004804 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	f1c3 0308 	rsb	r3, r3, #8
 80047e4:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80047e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e8:	43db      	mvns	r3, r3
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d804      	bhi.n	80047fa <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f4:	4413      	add	r3, r2
 80047f6:	607b      	str	r3, [r7, #4]
 80047f8:	e004      	b.n	8004804 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	607b      	str	r3, [r7, #4]
 80047fe:	e001      	b.n	8004804 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8004800:	2300      	movs	r3, #0
 8004802:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8004804:	f7fe fbc2 	bl	8002f8c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004808:	4b80      	ldr	r3, [pc, #512]	@ (8004a0c <pvPortMalloc+0x260>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8004810:	f000 f98a 	bl	8004b28 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f2c0 80de 	blt.w	80049d8 <pvPortMalloc+0x22c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 80da 	beq.w	80049d8 <pvPortMalloc+0x22c>
 8004824:	4b7a      	ldr	r3, [pc, #488]	@ (8004a10 <pvPortMalloc+0x264>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	429a      	cmp	r2, r3
 800482c:	f200 80d4 	bhi.w	80049d8 <pvPortMalloc+0x22c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004830:	4b78      	ldr	r3, [pc, #480]	@ (8004a14 <pvPortMalloc+0x268>)
 8004832:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8004834:	4b77      	ldr	r3, [pc, #476]	@ (8004a14 <pvPortMalloc+0x268>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800483a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800483c:	4a76      	ldr	r2, [pc, #472]	@ (8004a18 <pvPortMalloc+0x26c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d305      	bcc.n	800484e <pvPortMalloc+0xa2>
 8004842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004844:	4a75      	ldr	r2, [pc, #468]	@ (8004a1c <pvPortMalloc+0x270>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d801      	bhi.n	800484e <pvPortMalloc+0xa2>
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <pvPortMalloc+0xa4>
 800484e:	2300      	movs	r3, #0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d12d      	bne.n	80048b0 <pvPortMalloc+0x104>
    __asm volatile
 8004854:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004858:	b672      	cpsid	i
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	b662      	cpsie	i
 8004868:	623b      	str	r3, [r7, #32]
}
 800486a:	bf00      	nop
 800486c:	bf00      	nop
 800486e:	e7fd      	b.n	800486c <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8004870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004872:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8004874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800487a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800487c:	4a66      	ldr	r2, [pc, #408]	@ (8004a18 <pvPortMalloc+0x26c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d305      	bcc.n	800488e <pvPortMalloc+0xe2>
 8004882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004884:	4a65      	ldr	r2, [pc, #404]	@ (8004a1c <pvPortMalloc+0x270>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d801      	bhi.n	800488e <pvPortMalloc+0xe2>
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <pvPortMalloc+0xe4>
 800488e:	2300      	movs	r3, #0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10d      	bne.n	80048b0 <pvPortMalloc+0x104>
    __asm volatile
 8004894:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004898:	b672      	cpsid	i
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	b662      	cpsie	i
 80048a8:	61fb      	str	r3, [r7, #28]
}
 80048aa:	bf00      	nop
 80048ac:	bf00      	nop
 80048ae:	e7fd      	b.n	80048ac <pvPortMalloc+0x100>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80048b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d903      	bls.n	80048c2 <pvPortMalloc+0x116>
 80048ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1d6      	bne.n	8004870 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80048c2:	4b52      	ldr	r3, [pc, #328]	@ (8004a0c <pvPortMalloc+0x260>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048c8:	429a      	cmp	r2, r3
 80048ca:	f000 8085 	beq.w	80049d8 <pvPortMalloc+0x22c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80048ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2208      	movs	r2, #8
 80048d4:	4413      	add	r3, r2
 80048d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80048d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048da:	4a4f      	ldr	r2, [pc, #316]	@ (8004a18 <pvPortMalloc+0x26c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d305      	bcc.n	80048ec <pvPortMalloc+0x140>
 80048e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e2:	4a4e      	ldr	r2, [pc, #312]	@ (8004a1c <pvPortMalloc+0x270>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d801      	bhi.n	80048ec <pvPortMalloc+0x140>
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <pvPortMalloc+0x142>
 80048ec:	2300      	movs	r3, #0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10d      	bne.n	800490e <pvPortMalloc+0x162>
    __asm volatile
 80048f2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80048f6:	b672      	cpsid	i
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	b662      	cpsie	i
 8004906:	61bb      	str	r3, [r7, #24]
}
 8004908:	bf00      	nop
 800490a:	bf00      	nop
 800490c:	e7fd      	b.n	800490a <pvPortMalloc+0x15e>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800490e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004914:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8004916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	429a      	cmp	r2, r3
 800491e:	d90d      	bls.n	800493c <pvPortMalloc+0x190>
    __asm volatile
 8004920:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004924:	b672      	cpsid	i
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	b662      	cpsie	i
 8004934:	617b      	str	r3, [r7, #20]
}
 8004936:	bf00      	nop
 8004938:	bf00      	nop
 800493a:	e7fd      	b.n	8004938 <pvPortMalloc+0x18c>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800493c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	1ad2      	subs	r2, r2, r3
 8004944:	2308      	movs	r3, #8
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	429a      	cmp	r2, r3
 800494a:	d926      	bls.n	800499a <pvPortMalloc+0x1ee>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800494c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4413      	add	r3, r2
 8004952:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00d      	beq.n	800497a <pvPortMalloc+0x1ce>
    __asm volatile
 800495e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004962:	b672      	cpsid	i
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	b662      	cpsie	i
 8004972:	613b      	str	r3, [r7, #16]
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop
 8004978:	e7fd      	b.n	8004976 <pvPortMalloc+0x1ca>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800497a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	1ad2      	subs	r2, r2, r3
 8004982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004984:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800498c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004992:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8004994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004998:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800499a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a10 <pvPortMalloc+0x264>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004a10 <pvPortMalloc+0x264>)
 80049a6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049a8:	4b19      	ldr	r3, [pc, #100]	@ (8004a10 <pvPortMalloc+0x264>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	4b1c      	ldr	r3, [pc, #112]	@ (8004a20 <pvPortMalloc+0x274>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d203      	bcs.n	80049bc <pvPortMalloc+0x210>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049b4:	4b16      	ldr	r3, [pc, #88]	@ (8004a10 <pvPortMalloc+0x264>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a19      	ldr	r2, [pc, #100]	@ (8004a20 <pvPortMalloc+0x274>)
 80049ba:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80049bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80049c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80049c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80049ce:	4b15      	ldr	r3, [pc, #84]	@ (8004a24 <pvPortMalloc+0x278>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3301      	adds	r3, #1
 80049d4:	4a13      	ldr	r2, [pc, #76]	@ (8004a24 <pvPortMalloc+0x278>)
 80049d6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80049d8:	f7fe fae6 	bl	8002fa8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00d      	beq.n	8004a02 <pvPortMalloc+0x256>
    __asm volatile
 80049e6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80049ea:	b672      	cpsid	i
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	b662      	cpsie	i
 80049fa:	60fb      	str	r3, [r7, #12]
}
 80049fc:	bf00      	nop
 80049fe:	bf00      	nop
 8004a00:	e7fd      	b.n	80049fe <pvPortMalloc+0x252>
    return pvReturn;
 8004a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3738      	adds	r7, #56	@ 0x38
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	2000ba68 	.word	0x2000ba68
 8004a10:	2000ba6c 	.word	0x2000ba6c
 8004a14:	2000ba60 	.word	0x2000ba60
 8004a18:	20000260 	.word	0x20000260
 8004a1c:	2000ba5f 	.word	0x2000ba5f
 8004a20:	2000ba70 	.word	0x2000ba70
 8004a24:	2000ba74 	.word	0x2000ba74

08004a28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d06a      	beq.n	8004b10 <vPortFree+0xe8>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004a3a:	2308      	movs	r3, #8
 8004a3c:	425b      	negs	r3, r3
 8004a3e:	69fa      	ldr	r2, [r7, #28]
 8004a40:	4413      	add	r3, r2
 8004a42:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	4a33      	ldr	r2, [pc, #204]	@ (8004b18 <vPortFree+0xf0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d305      	bcc.n	8004a5c <vPortFree+0x34>
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	4a32      	ldr	r2, [pc, #200]	@ (8004b1c <vPortFree+0xf4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d801      	bhi.n	8004a5c <vPortFree+0x34>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e000      	b.n	8004a5e <vPortFree+0x36>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10d      	bne.n	8004a7e <vPortFree+0x56>
    __asm volatile
 8004a62:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004a66:	b672      	cpsid	i
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	b662      	cpsie	i
 8004a76:	617b      	str	r3, [r7, #20]
}
 8004a78:	bf00      	nop
 8004a7a:	bf00      	nop
 8004a7c:	e7fd      	b.n	8004a7a <vPortFree+0x52>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	db0d      	blt.n	8004aa2 <vPortFree+0x7a>
    __asm volatile
 8004a86:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004a8a:	b672      	cpsid	i
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	b662      	cpsie	i
 8004a9a:	613b      	str	r3, [r7, #16]
}
 8004a9c:	bf00      	nop
 8004a9e:	bf00      	nop
 8004aa0:	e7fd      	b.n	8004a9e <vPortFree+0x76>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00d      	beq.n	8004ac6 <vPortFree+0x9e>
    __asm volatile
 8004aaa:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004aae:	b672      	cpsid	i
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	b662      	cpsie	i
 8004abe:	60fb      	str	r3, [r7, #12]
}
 8004ac0:	bf00      	nop
 8004ac2:	bf00      	nop
 8004ac4:	e7fd      	b.n	8004ac2 <vPortFree+0x9a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	0fdb      	lsrs	r3, r3, #31
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d01c      	beq.n	8004b10 <vPortFree+0xe8>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d118      	bne.n	8004b10 <vPortFree+0xe8>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8004aea:	f7fe fa4f 	bl	8002f8c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	4b0b      	ldr	r3, [pc, #44]	@ (8004b20 <vPortFree+0xf8>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4413      	add	r3, r2
 8004af8:	4a09      	ldr	r2, [pc, #36]	@ (8004b20 <vPortFree+0xf8>)
 8004afa:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004afc:	69b8      	ldr	r0, [r7, #24]
 8004afe:	f000 f86d 	bl	8004bdc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b02:	4b08      	ldr	r3, [pc, #32]	@ (8004b24 <vPortFree+0xfc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3301      	adds	r3, #1
 8004b08:	4a06      	ldr	r2, [pc, #24]	@ (8004b24 <vPortFree+0xfc>)
 8004b0a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004b0c:	f7fe fa4c 	bl	8002fa8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004b10:	bf00      	nop
 8004b12:	3720      	adds	r7, #32
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20000260 	.word	0x20000260
 8004b1c:	2000ba5f 	.word	0x2000ba5f
 8004b20:	2000ba6c 	.word	0x2000ba6c
 8004b24:	2000ba78 	.word	0x2000ba78

08004b28 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b2e:	f44f 4338 	mov.w	r3, #47104	@ 0xb800
 8004b32:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004b34:	4b24      	ldr	r3, [pc, #144]	@ (8004bc8 <prvHeapInit+0xa0>)
 8004b36:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00c      	beq.n	8004b5c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3307      	adds	r3, #7
 8004b46:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0307 	bic.w	r3, r3, #7
 8004b4e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	4a1c      	ldr	r2, [pc, #112]	@ (8004bc8 <prvHeapInit+0xa0>)
 8004b58:	4413      	add	r3, r2
 8004b5a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bcc <prvHeapInit+0xa4>)
 8004b60:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004b62:	4b1a      	ldr	r3, [pc, #104]	@ (8004bcc <prvHeapInit+0xa4>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8004b70:	2208      	movs	r2, #8
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	1a9b      	subs	r3, r3, r2
 8004b76:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f023 0307 	bic.w	r3, r3, #7
 8004b7e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a13      	ldr	r2, [pc, #76]	@ (8004bd0 <prvHeapInit+0xa8>)
 8004b84:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004b86:	4b12      	ldr	r3, [pc, #72]	@ (8004bd0 <prvHeapInit+0xa8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8004b8e:	4b10      	ldr	r3, [pc, #64]	@ (8004bd0 <prvHeapInit+0xa8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	1ad2      	subs	r2, r2, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd0 <prvHeapInit+0xa8>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	4a08      	ldr	r2, [pc, #32]	@ (8004bd4 <prvHeapInit+0xac>)
 8004bb2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	4a07      	ldr	r2, [pc, #28]	@ (8004bd8 <prvHeapInit+0xb0>)
 8004bba:	6013      	str	r3, [r2, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	20000260 	.word	0x20000260
 8004bcc:	2000ba60 	.word	0x2000ba60
 8004bd0:	2000ba68 	.word	0x2000ba68
 8004bd4:	2000ba70 	.word	0x2000ba70
 8004bd8:	2000ba6c 	.word	0x2000ba6c

08004bdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004be4:	4b37      	ldr	r3, [pc, #220]	@ (8004cc4 <prvInsertBlockIntoFreeList+0xe8>)
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	e002      	b.n	8004bf0 <prvInsertBlockIntoFreeList+0x14>
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d8f7      	bhi.n	8004bea <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	4a31      	ldr	r2, [pc, #196]	@ (8004cc4 <prvInsertBlockIntoFreeList+0xe8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d01a      	beq.n	8004c38 <prvInsertBlockIntoFreeList+0x5c>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	4a30      	ldr	r2, [pc, #192]	@ (8004cc8 <prvInsertBlockIntoFreeList+0xec>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d305      	bcc.n	8004c16 <prvInsertBlockIntoFreeList+0x3a>
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	4a2f      	ldr	r2, [pc, #188]	@ (8004ccc <prvInsertBlockIntoFreeList+0xf0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d801      	bhi.n	8004c16 <prvInsertBlockIntoFreeList+0x3a>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <prvInsertBlockIntoFreeList+0x3c>
 8004c16:	2300      	movs	r3, #0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10d      	bne.n	8004c38 <prvInsertBlockIntoFreeList+0x5c>
    __asm volatile
 8004c1c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004c20:	b672      	cpsid	i
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	b662      	cpsie	i
 8004c30:	60fb      	str	r3, [r7, #12]
}
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	e7fd      	b.n	8004c34 <prvInsertBlockIntoFreeList+0x58>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4413      	add	r3, r2
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d108      	bne.n	8004c5c <prvInsertBlockIntoFreeList+0x80>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	441a      	add	r2, r3
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	441a      	add	r2, r3
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d118      	bne.n	8004ca2 <prvInsertBlockIntoFreeList+0xc6>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	4b16      	ldr	r3, [pc, #88]	@ (8004cd0 <prvInsertBlockIntoFreeList+0xf4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d00d      	beq.n	8004c98 <prvInsertBlockIntoFreeList+0xbc>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	441a      	add	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	e008      	b.n	8004caa <prvInsertBlockIntoFreeList+0xce>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004c98:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd0 <prvInsertBlockIntoFreeList+0xf4>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	e003      	b.n	8004caa <prvInsertBlockIntoFreeList+0xce>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d002      	beq.n	8004cb8 <prvInsertBlockIntoFreeList+0xdc>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004cb8:	bf00      	nop
 8004cba:	371c      	adds	r7, #28
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	2000ba60 	.word	0x2000ba60
 8004cc8:	20000260 	.word	0x20000260
 8004ccc:	2000ba5f 	.word	0x2000ba5f
 8004cd0:	2000ba68 	.word	0x2000ba68

08004cd4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004cd8:	4803      	ldr	r0, [pc, #12]	@ (8004ce8 <_cbSendSystemDesc+0x14>)
 8004cda:	f001 fff1 	bl	8006cc0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004cde:	4803      	ldr	r0, [pc, #12]	@ (8004cec <_cbSendSystemDesc+0x18>)
 8004ce0:	f001 ffee 	bl	8006cc0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004ce4:	bf00      	nop
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	08007f50 	.word	0x08007f50
 8004cec:	08007f8c 	.word	0x08007f8c

08004cf0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004cf4:	4b06      	ldr	r3, [pc, #24]	@ (8004d10 <SEGGER_SYSVIEW_Conf+0x20>)
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	4b05      	ldr	r3, [pc, #20]	@ (8004d10 <SEGGER_SYSVIEW_Conf+0x20>)
 8004cfa:	6819      	ldr	r1, [r3, #0]
 8004cfc:	4b05      	ldr	r3, [pc, #20]	@ (8004d14 <SEGGER_SYSVIEW_Conf+0x24>)
 8004cfe:	4a06      	ldr	r2, [pc, #24]	@ (8004d18 <SEGGER_SYSVIEW_Conf+0x28>)
 8004d00:	f001 fc64 	bl	80065cc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004d04:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004d08:	f001 fca4 	bl	8006654 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004d0c:	bf00      	nop
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20000000 	.word	0x20000000
 8004d14:	08004cd5 	.word	0x08004cd5
 8004d18:	08008028 	.word	0x08008028

08004d1c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004d22:	2300      	movs	r3, #0
 8004d24:	607b      	str	r3, [r7, #4]
 8004d26:	e033      	b.n	8004d90 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004d28:	491e      	ldr	r1, [pc, #120]	@ (8004da4 <_cbSendTaskList+0x88>)
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	6818      	ldr	r0, [r3, #0]
 8004d38:	491a      	ldr	r1, [pc, #104]	@ (8004da4 <_cbSendTaskList+0x88>)
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	3304      	adds	r3, #4
 8004d48:	6819      	ldr	r1, [r3, #0]
 8004d4a:	4c16      	ldr	r4, [pc, #88]	@ (8004da4 <_cbSendTaskList+0x88>)
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4423      	add	r3, r4
 8004d58:	3308      	adds	r3, #8
 8004d5a:	681c      	ldr	r4, [r3, #0]
 8004d5c:	4d11      	ldr	r5, [pc, #68]	@ (8004da4 <_cbSendTaskList+0x88>)
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	442b      	add	r3, r5
 8004d6a:	330c      	adds	r3, #12
 8004d6c:	681d      	ldr	r5, [r3, #0]
 8004d6e:	4e0d      	ldr	r6, [pc, #52]	@ (8004da4 <_cbSendTaskList+0x88>)
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4433      	add	r3, r6
 8004d7c:	3310      	adds	r3, #16
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	462b      	mov	r3, r5
 8004d84:	4622      	mov	r2, r4
 8004d86:	f000 f8bd 	bl	8004f04 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	607b      	str	r3, [r7, #4]
 8004d90:	4b05      	ldr	r3, [pc, #20]	@ (8004da8 <_cbSendTaskList+0x8c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d3c6      	bcc.n	8004d28 <_cbSendTaskList+0xc>
  }
}
 8004d9a:	bf00      	nop
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004da4:	2000ba7c 	.word	0x2000ba7c
 8004da8:	2000bb1c 	.word	0x2000bb1c

08004dac <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db0:	b082      	sub	sp, #8
 8004db2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004db4:	f7fe fa0e 	bl	80031d4 <xTaskGetTickCountFromISR>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2200      	movs	r2, #0
 8004dbc:	469a      	mov	sl, r3
 8004dbe:	4693      	mov	fp, r2
 8004dc0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004dc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	f04f 0a00 	mov.w	sl, #0
 8004dd0:	f04f 0b00 	mov.w	fp, #0
 8004dd4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004dd8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004ddc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004de0:	4652      	mov	r2, sl
 8004de2:	465b      	mov	r3, fp
 8004de4:	1a14      	subs	r4, r2, r0
 8004de6:	eb63 0501 	sbc.w	r5, r3, r1
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	00ab      	lsls	r3, r5, #2
 8004df4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004df8:	00a2      	lsls	r2, r4, #2
 8004dfa:	4614      	mov	r4, r2
 8004dfc:	461d      	mov	r5, r3
 8004dfe:	eb14 0800 	adds.w	r8, r4, r0
 8004e02:	eb45 0901 	adc.w	r9, r5, r1
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e1a:	4690      	mov	r8, r2
 8004e1c:	4699      	mov	r9, r3
 8004e1e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004e22:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004e26:	4610      	mov	r0, r2
 8004e28:	4619      	mov	r1, r3
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004e34 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004e42:	2205      	movs	r2, #5
 8004e44:	492b      	ldr	r1, [pc, #172]	@ (8004ef4 <SYSVIEW_AddTask+0xc0>)
 8004e46:	68b8      	ldr	r0, [r7, #8]
 8004e48:	f002 fba8 	bl	800759c <memcmp>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d04b      	beq.n	8004eea <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004e52:	4b29      	ldr	r3, [pc, #164]	@ (8004ef8 <SYSVIEW_AddTask+0xc4>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b07      	cmp	r3, #7
 8004e58:	d903      	bls.n	8004e62 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004e5a:	4828      	ldr	r0, [pc, #160]	@ (8004efc <SYSVIEW_AddTask+0xc8>)
 8004e5c:	f002 fae0 	bl	8007420 <SEGGER_SYSVIEW_Warn>
    return;
 8004e60:	e044      	b.n	8004eec <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004e62:	4b25      	ldr	r3, [pc, #148]	@ (8004ef8 <SYSVIEW_AddTask+0xc4>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4926      	ldr	r1, [pc, #152]	@ (8004f00 <SYSVIEW_AddTask+0xcc>)
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004e76:	4b20      	ldr	r3, [pc, #128]	@ (8004ef8 <SYSVIEW_AddTask+0xc4>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4921      	ldr	r1, [pc, #132]	@ (8004f00 <SYSVIEW_AddTask+0xcc>)
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	3304      	adds	r3, #4
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ef8 <SYSVIEW_AddTask+0xc4>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	491b      	ldr	r1, [pc, #108]	@ (8004f00 <SYSVIEW_AddTask+0xcc>)
 8004e92:	4613      	mov	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004ea2:	4b15      	ldr	r3, [pc, #84]	@ (8004ef8 <SYSVIEW_AddTask+0xc4>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4916      	ldr	r1, [pc, #88]	@ (8004f00 <SYSVIEW_AddTask+0xcc>)
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	330c      	adds	r3, #12
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef8 <SYSVIEW_AddTask+0xc4>)
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	4910      	ldr	r1, [pc, #64]	@ (8004f00 <SYSVIEW_AddTask+0xcc>)
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	3310      	adds	r3, #16
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004ece:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef8 <SYSVIEW_AddTask+0xc4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	4a08      	ldr	r2, [pc, #32]	@ (8004ef8 <SYSVIEW_AddTask+0xc4>)
 8004ed6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	68b9      	ldr	r1, [r7, #8]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 f80e 	bl	8004f04 <SYSVIEW_SendTaskInfo>
 8004ee8:	e000      	b.n	8004eec <SYSVIEW_AddTask+0xb8>
    return;
 8004eea:	bf00      	nop

}
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	08007f9c 	.word	0x08007f9c
 8004ef8:	2000bb1c 	.word	0x2000bb1c
 8004efc:	08007fa4 	.word	0x08007fa4
 8004f00:	2000ba7c 	.word	0x2000ba7c

08004f04 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08a      	sub	sp, #40	@ 0x28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004f12:	f107 0310 	add.w	r3, r7, #16
 8004f16:	2218      	movs	r2, #24
 8004f18:	2100      	movs	r1, #0
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f002 fb4e 	bl	80075bc <memset>
  TaskInfo.TaskID     = TaskID;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f32:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004f34:	f107 0310 	add.w	r3, r7, #16
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f001 fdc9 	bl	8006ad0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004f3e:	bf00      	nop
 8004f40:	3728      	adds	r7, #40	@ 0x28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <__NVIC_EnableIRQ>:
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	db0b      	blt.n	8004f72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	f003 021f 	and.w	r2, r3, #31
 8004f60:	4907      	ldr	r1, [pc, #28]	@ (8004f80 <__NVIC_EnableIRQ+0x38>)
 8004f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	2001      	movs	r0, #1
 8004f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	e000e100 	.word	0xe000e100

08004f84 <__NVIC_SetPriority>:
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	6039      	str	r1, [r7, #0]
 8004f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	db0a      	blt.n	8004fae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	490c      	ldr	r1, [pc, #48]	@ (8004fd0 <__NVIC_SetPriority+0x4c>)
 8004f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa2:	0112      	lsls	r2, r2, #4
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004fac:	e00a      	b.n	8004fc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	4908      	ldr	r1, [pc, #32]	@ (8004fd4 <__NVIC_SetPriority+0x50>)
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	3b04      	subs	r3, #4
 8004fbc:	0112      	lsls	r2, r2, #4
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	761a      	strb	r2, [r3, #24]
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	e000e100 	.word	0xe000e100
 8004fd4:	e000ed00 	.word	0xe000ed00

08004fd8 <_StartSysView>:

} _SVInfo = {0,0,1};



static void _StartSysView(void) {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0

  int r;



  r = SEGGER_SYSVIEW_IsStarted();
 8004fde:	f002 fa7b 	bl	80074d8 <SEGGER_SYSVIEW_IsStarted>
 8004fe2:	6078      	str	r0, [r7, #4]

  if (r == 0) {
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <_StartSysView+0x16>

    SEGGER_SYSVIEW_Start();
 8004fea:	f001 fbf7 	bl	80067dc <SEGGER_SYSVIEW_Start>

  }

}
 8004fee:	bf00      	nop
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <_cbOnUARTRx>:



static void _cbOnUARTRx(U8 Data) {
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4603      	mov	r3, r0
 8005000:	71fb      	strb	r3, [r7, #7]

  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005002:	4b0c      	ldr	r3, [pc, #48]	@ (8005034 <_cbOnUARTRx+0x3c>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b03      	cmp	r3, #3
 8005008:	d806      	bhi.n	8005018 <_cbOnUARTRx+0x20>

    _SVInfo.NumBytesHelloRcvd++;
 800500a:	4b0a      	ldr	r3, [pc, #40]	@ (8005034 <_cbOnUARTRx+0x3c>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	3301      	adds	r3, #1
 8005010:	b2da      	uxtb	r2, r3
 8005012:	4b08      	ldr	r3, [pc, #32]	@ (8005034 <_cbOnUARTRx+0x3c>)
 8005014:	701a      	strb	r2, [r3, #0]

    goto Done;
 8005016:	e009      	b.n	800502c <_cbOnUARTRx+0x34>

  }

  _StartSysView();
 8005018:	f7ff ffde 	bl	8004fd8 <_StartSysView>

  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800501c:	4b05      	ldr	r3, [pc, #20]	@ (8005034 <_cbOnUARTRx+0x3c>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	4618      	mov	r0, r3
 8005022:	1dfb      	adds	r3, r7, #7
 8005024:	2201      	movs	r2, #1
 8005026:	4619      	mov	r1, r3
 8005028:	f000 fb8e 	bl	8005748 <SEGGER_RTT_WriteDownBuffer>

Done:

  return;
 800502c:	bf00      	nop

}
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20000014 	.word	0x20000014

08005038 <_cbOnUARTTx>:



static int _cbOnUARTTx(U8* pChar) {
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]

  int r;



  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005040:	4b14      	ldr	r3, [pc, #80]	@ (8005094 <_cbOnUARTTx+0x5c>)
 8005042:	785b      	ldrb	r3, [r3, #1]
 8005044:	2b03      	cmp	r3, #3
 8005046:	d80f      	bhi.n	8005068 <_cbOnUARTTx+0x30>

    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005048:	4b12      	ldr	r3, [pc, #72]	@ (8005094 <_cbOnUARTTx+0x5c>)
 800504a:	785b      	ldrb	r3, [r3, #1]
 800504c:	461a      	mov	r2, r3
 800504e:	4b12      	ldr	r3, [pc, #72]	@ (8005098 <_cbOnUARTTx+0x60>)
 8005050:	5c9a      	ldrb	r2, [r3, r2]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	701a      	strb	r2, [r3, #0]

    _SVInfo.NumBytesHelloSent++;
 8005056:	4b0f      	ldr	r3, [pc, #60]	@ (8005094 <_cbOnUARTTx+0x5c>)
 8005058:	785b      	ldrb	r3, [r3, #1]
 800505a:	3301      	adds	r3, #1
 800505c:	b2da      	uxtb	r2, r3
 800505e:	4b0d      	ldr	r3, [pc, #52]	@ (8005094 <_cbOnUARTTx+0x5c>)
 8005060:	705a      	strb	r2, [r3, #1]

    r = 1;
 8005062:	2301      	movs	r3, #1
 8005064:	60fb      	str	r3, [r7, #12]

    goto Done;
 8005066:	e00f      	b.n	8005088 <_cbOnUARTTx+0x50>

  }

  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005068:	4b0a      	ldr	r3, [pc, #40]	@ (8005094 <_cbOnUARTTx+0x5c>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fa0d 	bl	8005490 <SEGGER_RTT_ReadUpBufferNoLock>
 8005076:	4603      	mov	r3, r0
 8005078:	60fb      	str	r3, [r7, #12]

  if (r < 0) {  // Failed to read from up buffer?
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	da02      	bge.n	8005086 <_cbOnUARTTx+0x4e>

    r = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	e000      	b.n	8005088 <_cbOnUARTTx+0x50>

  }

Done:
 8005086:	bf00      	nop

  return r;
 8005088:	68fb      	ldr	r3, [r7, #12]

}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000014 	.word	0x20000014
 8005098:	08008030 	.word	0x08008030

0800509c <SEGGER_UART_init>:



void SEGGER_UART_init(U32 baud)

{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]

HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80050a4:	4a04      	ldr	r2, [pc, #16]	@ (80050b8 <SEGGER_UART_init+0x1c>)
 80050a6:	4905      	ldr	r1, [pc, #20]	@ (80050bc <SEGGER_UART_init+0x20>)
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f855 	bl	8005158 <HIF_UART_Init>

}
 80050ae:	bf00      	nop
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	08004ff9 	.word	0x08004ff9
 80050bc:	08005039 	.word	0x08005039

080050c0 <USART3_IRQHandler>:

*/

void USART3_IRQHandler(void);

void USART3_IRQHandler(void) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0

  int r;



  UsartStatus = USART_SR;                              // Examine status register
 80050c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005140 <USART3_IRQHandler+0x80>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]

  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d011      	beq.n	80050fa <USART3_IRQHandler+0x3a>

    v = USART_RDR;                                      // Read data
 80050d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005144 <USART3_IRQHandler+0x84>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	71fb      	strb	r3, [r7, #7]

    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f003 030b 	and.w	r3, r3, #11
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d108      	bne.n	80050fa <USART3_IRQHandler+0x3a>

      (void)v;                                         // Avoid warning in BTL

      if (_cbOnRx) {
 80050e8:	4b17      	ldr	r3, [pc, #92]	@ (8005148 <USART3_IRQHandler+0x88>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d004      	beq.n	80050fa <USART3_IRQHandler+0x3a>

        _cbOnRx(v);
 80050f0:	4b15      	ldr	r3, [pc, #84]	@ (8005148 <USART3_IRQHandler+0x88>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	79fa      	ldrb	r2, [r7, #7]
 80050f6:	4610      	mov	r0, r2
 80050f8:	4798      	blx	r3

    }

  }

  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01a      	beq.n	800513a <USART3_IRQHandler+0x7a>

    // Therefore, we need to check if the function pointer is valid.

    //

    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005104:	4b11      	ldr	r3, [pc, #68]	@ (800514c <USART3_IRQHandler+0x8c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d015      	beq.n	8005138 <USART3_IRQHandler+0x78>

      return;

    }

    r = _cbOnTx(&v);
 800510c:	4b0f      	ldr	r3, [pc, #60]	@ (800514c <USART3_IRQHandler+0x8c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	1dfa      	adds	r2, r7, #7
 8005112:	4610      	mov	r0, r2
 8005114:	4798      	blx	r3
 8005116:	60b8      	str	r0, [r7, #8]

    if (r == 0) {                          // No more characters to send ?
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <USART3_IRQHandler+0x6c>

      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800511e:	4b0c      	ldr	r3, [pc, #48]	@ (8005150 <USART3_IRQHandler+0x90>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a0b      	ldr	r2, [pc, #44]	@ (8005150 <USART3_IRQHandler+0x90>)
 8005124:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	e006      	b.n	800513a <USART3_IRQHandler+0x7a>

    } else {

      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800512c:	4b04      	ldr	r3, [pc, #16]	@ (8005140 <USART3_IRQHandler+0x80>)
 800512e:	681b      	ldr	r3, [r3, #0]

      USART_TDR = v;  // Start transmission by writing to data register
 8005130:	79fa      	ldrb	r2, [r7, #7]
 8005132:	4b08      	ldr	r3, [pc, #32]	@ (8005154 <USART3_IRQHandler+0x94>)
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	e000      	b.n	800513a <USART3_IRQHandler+0x7a>
      return;
 8005138:	bf00      	nop

    }

  }

}
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	4000481c 	.word	0x4000481c
 8005144:	40004824 	.word	0x40004824
 8005148:	2000bb20 	.word	0x2000bb20
 800514c:	2000bb24 	.word	0x2000bb24
 8005150:	40004800 	.word	0x40004800
 8005154:	40004828 	.word	0x40004828

08005158 <HIF_UART_Init>:

*       HIF_UART_Init()

*/

void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]

  //

  // Habilitar reloj de USART3 y puerto D

  RCC_APB1ENR |= (1 << 18);       // Habilitar reloj USART3 (APB1)
 8005164:	4b2e      	ldr	r3, [pc, #184]	@ (8005220 <HIF_UART_Init+0xc8>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a2d      	ldr	r2, [pc, #180]	@ (8005220 <HIF_UART_Init+0xc8>)
 800516a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800516e:	6013      	str	r3, [r2, #0]

  RCC_AHB1ENR |= (1 << 3);        // Habilitar reloj GPIO D
 8005170:	4b2c      	ldr	r3, [pc, #176]	@ (8005224 <HIF_UART_Init+0xcc>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a2b      	ldr	r2, [pc, #172]	@ (8005224 <HIF_UART_Init+0xcc>)
 8005176:	f043 0308 	orr.w	r3, r3, #8
 800517a:	6013      	str	r3, [r2, #0]



  // Configurar los pines PD8 y PD9 para función alternativa AF7 (USART3)

  v  = GPIO_AFRH;
 800517c:	4b2a      	ldr	r3, [pc, #168]	@ (8005228 <HIF_UART_Init+0xd0>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	613b      	str	r3, [r7, #16]

  v &= ~((15UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (15UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005188:	613b      	str	r3, [r7, #16]

  v |=  ((7UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (7UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005190:	613b      	str	r3, [r7, #16]

  GPIO_AFRH = v;
 8005192:	4a25      	ldr	r2, [pc, #148]	@ (8005228 <HIF_UART_Init+0xd0>)
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	6013      	str	r3, [r2, #0]

  // Configure USART RX/TX pins for alternate function usage

  //

  v  = GPIO_MODER;
 8005198:	4b24      	ldr	r3, [pc, #144]	@ (800522c <HIF_UART_Init+0xd4>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	613b      	str	r3, [r7, #16]

  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80051a4:	613b      	str	r3, [r7, #16]

  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 80051ac:	613b      	str	r3, [r7, #16]

  GPIO_MODER = v;
 80051ae:	4a1f      	ldr	r2, [pc, #124]	@ (800522c <HIF_UART_Init+0xd4>)
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	6013      	str	r3, [r2, #0]

  // Set baudrate

  //

  Div = Baudrate * 8;                       // We use 8x oversampling.
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	617b      	str	r3, [r7, #20]

  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80051ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005230 <HIF_UART_Init+0xd8>)
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c2:	3301      	adds	r3, #1
 80051c4:	617b      	str	r3, [r7, #20]

  Div = Div / 2;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	085b      	lsrs	r3, r3, #1
 80051ca:	617b      	str	r3, [r7, #20]

  if (Div > 0xFFF) {
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051d2:	d302      	bcc.n	80051da <HIF_UART_Init+0x82>

    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80051d4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80051d8:	617b      	str	r3, [r7, #20]

  }

  if (Div >= 1) {
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d004      	beq.n	80051ea <HIF_UART_Init+0x92>

    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	4a13      	ldr	r2, [pc, #76]	@ (8005234 <HIF_UART_Init+0xdc>)
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	6013      	str	r3, [r2, #0]

  // Initialize USART

  //

  USART_CR1 = 0
 80051ea:	4b13      	ldr	r3, [pc, #76]	@ (8005238 <HIF_UART_Init+0xe0>)
 80051ec:	f248 022d 	movw	r2, #32813	@ 0x802d
 80051f0:	601a      	str	r2, [r3, #0]

            | (1 <<  2)                         // RE     = 1; Receiver enabled

            ;

  USART_CR2 = 0
 80051f2:	4b12      	ldr	r3, [pc, #72]	@ (800523c <HIF_UART_Init+0xe4>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]

            | (0 << 12)                         // STOP = 00b; 1 stop bit

            ;

  USART_CR3 = 0
 80051f8:	4b11      	ldr	r3, [pc, #68]	@ (8005240 <HIF_UART_Init+0xe8>)
 80051fa:	2280      	movs	r2, #128	@ 0x80
 80051fc:	601a      	str	r2, [r3, #0]

  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC

  //

  _cbOnRx = cbOnRx;
 80051fe:	4a11      	ldr	r2, [pc, #68]	@ (8005244 <HIF_UART_Init+0xec>)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6013      	str	r3, [r2, #0]

  _cbOnTx = cbOnTx;
 8005204:	4a10      	ldr	r2, [pc, #64]	@ (8005248 <HIF_UART_Init+0xf0>)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	6013      	str	r3, [r2, #0]

  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800520a:	2106      	movs	r1, #6
 800520c:	2027      	movs	r0, #39	@ 0x27
 800520e:	f7ff feb9 	bl	8004f84 <__NVIC_SetPriority>

  NVIC_EnableIRQ(USART_IRQn);
 8005212:	2027      	movs	r0, #39	@ 0x27
 8005214:	f7ff fe98 	bl	8004f48 <__NVIC_EnableIRQ>

}
 8005218:	bf00      	nop
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40023840 	.word	0x40023840
 8005224:	40023830 	.word	0x40023830
 8005228:	40020c24 	.word	0x40020c24
 800522c:	40020c00 	.word	0x40020c00
 8005230:	0501bd00 	.word	0x0501bd00
 8005234:	4000480c 	.word	0x4000480c
 8005238:	40004800 	.word	0x40004800
 800523c:	40004804 	.word	0x40004804
 8005240:	40004808 	.word	0x40004808
 8005244:	2000bb20 	.word	0x2000bb20
 8005248:	2000bb24 	.word	0x2000bb24

0800524c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005252:	4b26      	ldr	r3, [pc, #152]	@ (80052ec <_DoInit+0xa0>)
 8005254:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005256:	22a8      	movs	r2, #168	@ 0xa8
 8005258:	2100      	movs	r1, #0
 800525a:	6838      	ldr	r0, [r7, #0]
 800525c:	f002 f9ae 	bl	80075bc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	2203      	movs	r2, #3
 8005264:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2203      	movs	r2, #3
 800526a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	4a20      	ldr	r2, [pc, #128]	@ (80052f0 <_DoInit+0xa4>)
 8005270:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	4a1f      	ldr	r2, [pc, #124]	@ (80052f4 <_DoInit+0xa8>)
 8005276:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800527e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2200      	movs	r2, #0
 8005284:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2200      	movs	r2, #0
 800528a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2200      	movs	r2, #0
 8005290:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	4a16      	ldr	r2, [pc, #88]	@ (80052f0 <_DoInit+0xa4>)
 8005296:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	4a17      	ldr	r2, [pc, #92]	@ (80052f8 <_DoInit+0xac>)
 800529c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2210      	movs	r2, #16
 80052a2:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2200      	movs	r2, #0
 80052a8:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2200      	movs	r2, #0
 80052ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2200      	movs	r2, #0
 80052b4:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80052b6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80052ba:	2300      	movs	r3, #0
 80052bc:	607b      	str	r3, [r7, #4]
 80052be:	e00c      	b.n	80052da <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f1c3 030f 	rsb	r3, r3, #15
 80052c6:	4a0d      	ldr	r2, [pc, #52]	@ (80052fc <_DoInit+0xb0>)
 80052c8:	5cd1      	ldrb	r1, [r2, r3]
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4413      	add	r3, r2
 80052d0:	460a      	mov	r2, r1
 80052d2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3301      	adds	r3, #1
 80052d8:	607b      	str	r3, [r7, #4]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b0f      	cmp	r3, #15
 80052de:	d9ef      	bls.n	80052c0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80052e0:	f3bf 8f5f 	dmb	sy
}
 80052e4:	bf00      	nop
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	2000bb28 	.word	0x2000bb28
 80052f0:	08007ff4 	.word	0x08007ff4
 80052f4:	2000bbd0 	.word	0x2000bbd0
 80052f8:	2000bfd0 	.word	0x2000bfd0
 80052fc:	08008034 	.word	0x08008034

08005300 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005300:	b580      	push	{r7, lr}
 8005302:	b08a      	sub	sp, #40	@ 0x28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800530c:	2300      	movs	r3, #0
 800530e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	429a      	cmp	r2, r3
 8005322:	d905      	bls.n	8005330 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	3b01      	subs	r3, #1
 800532c:	627b      	str	r3, [r7, #36]	@ 0x24
 800532e:	e007      	b.n	8005340 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	69b9      	ldr	r1, [r7, #24]
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	1acb      	subs	r3, r1, r3
 800533a:	4413      	add	r3, r2
 800533c:	3b01      	subs	r3, #1
 800533e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800534a:	4293      	cmp	r3, r2
 800534c:	bf28      	it	cs
 800534e:	4613      	movcs	r3, r2
 8005350:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4293      	cmp	r3, r2
 8005358:	bf28      	it	cs
 800535a:	4613      	movcs	r3, r2
 800535c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	4413      	add	r3, r2
 8005366:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800536a:	68b9      	ldr	r1, [r7, #8]
 800536c:	6978      	ldr	r0, [r7, #20]
 800536e:	f002 f953 	bl	8007618 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005372:	6a3a      	ldr	r2, [r7, #32]
 8005374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005376:	4413      	add	r3, r2
 8005378:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	4413      	add	r3, r2
 8005380:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800538a:	69fa      	ldr	r2, [r7, #28]
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	4413      	add	r3, r2
 8005390:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	69fa      	ldr	r2, [r7, #28]
 8005398:	429a      	cmp	r2, r3
 800539a:	d101      	bne.n	80053a0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800539c:	2300      	movs	r3, #0
 800539e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80053a0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	69fa      	ldr	r2, [r7, #28]
 80053a8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1b2      	bne.n	8005316 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80053b0:	6a3b      	ldr	r3, [r7, #32]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3728      	adds	r7, #40	@ 0x28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b088      	sub	sp, #32
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d911      	bls.n	8005402 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	6938      	ldr	r0, [r7, #16]
 80053ee:	f002 f913 	bl	8007618 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80053f2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80053f6:	69fa      	ldr	r2, [r7, #28]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	441a      	add	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005400:	e01f      	b.n	8005442 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	68b9      	ldr	r1, [r7, #8]
 8005414:	6938      	ldr	r0, [r7, #16]
 8005416:	f002 f8ff 	bl	8007618 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	4413      	add	r3, r2
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4619      	mov	r1, r3
 8005432:	6938      	ldr	r0, [r7, #16]
 8005434:	f002 f8f0 	bl	8007618 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005438:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	60da      	str	r2, [r3, #12]
}
 8005442:	bf00      	nop
 8005444:	3720      	adds	r7, #32
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800544a:	b480      	push	{r7}
 800544c:	b087      	sub	sp, #28
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	429a      	cmp	r2, r3
 8005464:	d808      	bhi.n	8005478 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	1ad2      	subs	r2, r2, r3
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	4413      	add	r3, r2
 8005472:	3b01      	subs	r3, #1
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	e004      	b.n	8005482 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	3b01      	subs	r3, #1
 8005480:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005482:	697b      	ldr	r3, [r7, #20]
}
 8005484:	4618      	mov	r0, r3
 8005486:	371c      	adds	r7, #28
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005490:	b580      	push	{r7, lr}
 8005492:	b08c      	sub	sp, #48	@ 0x30
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800549c:	4b3e      	ldr	r3, [pc, #248]	@ (8005598 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800549e:	623b      	str	r3, [r7, #32]
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b53      	cmp	r3, #83	@ 0x53
 80054a8:	d001      	beq.n	80054ae <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80054aa:	f7ff fecf 	bl	800524c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	4613      	mov	r3, r2
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	4413      	add	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	4a37      	ldr	r2, [pc, #220]	@ (8005598 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80054bc:	4413      	add	r3, r2
 80054be:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80054d0:	2300      	movs	r3, #0
 80054d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80054d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d92b      	bls.n	8005534 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4293      	cmp	r3, r2
 80054ec:	bf28      	it	cs
 80054ee:	4613      	movcs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f8:	4413      	add	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	6939      	ldr	r1, [r7, #16]
 8005500:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005502:	f002 f889 	bl	8007618 <memcpy>
    NumBytesRead += NumBytesRem;
 8005506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	4413      	add	r3, r2
 800550c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800550e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	4413      	add	r3, r2
 8005514:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800551e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	4413      	add	r3, r2
 8005524:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800552c:	429a      	cmp	r2, r3
 800552e:	d101      	bne.n	8005534 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005530:	2300      	movs	r3, #0
 8005532:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4293      	cmp	r3, r2
 8005542:	bf28      	it	cs
 8005544:	4613      	movcs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d019      	beq.n	8005582 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	685a      	ldr	r2, [r3, #4]
 8005552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005554:	4413      	add	r3, r2
 8005556:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	6939      	ldr	r1, [r7, #16]
 800555c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800555e:	f002 f85b 	bl	8007618 <memcpy>
    NumBytesRead += NumBytesRem;
 8005562:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	4413      	add	r3, r2
 8005568:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800556a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	4413      	add	r3, r2
 8005570:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800557a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	4413      	add	r3, r2
 8005580:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800558c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800558e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005590:	4618      	mov	r0, r3
 8005592:	3730      	adds	r7, #48	@ 0x30
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	2000bb28 	.word	0x2000bb28

0800559c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b08c      	sub	sp, #48	@ 0x30
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80055a8:	4b3e      	ldr	r3, [pc, #248]	@ (80056a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80055aa:	623b      	str	r3, [r7, #32]
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b53      	cmp	r3, #83	@ 0x53
 80055b4:	d001      	beq.n	80055ba <SEGGER_RTT_ReadNoLock+0x1e>
 80055b6:	f7ff fe49 	bl	800524c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4613      	mov	r3, r2
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	4413      	add	r3, r2
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	3360      	adds	r3, #96	@ 0x60
 80055c6:	4a37      	ldr	r2, [pc, #220]	@ (80056a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80055c8:	4413      	add	r3, r2
 80055ca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80055dc:	2300      	movs	r3, #0
 80055de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80055e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d92b      	bls.n	8005640 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4293      	cmp	r3, r2
 80055f8:	bf28      	it	cs
 80055fa:	4613      	movcs	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005604:	4413      	add	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	6939      	ldr	r1, [r7, #16]
 800560c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800560e:	f002 f803 	bl	8007618 <memcpy>
    NumBytesRead += NumBytesRem;
 8005612:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	4413      	add	r3, r2
 8005618:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800561a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	4413      	add	r3, r2
 8005620:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800562a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	4413      	add	r3, r2
 8005630:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005638:	429a      	cmp	r2, r3
 800563a:	d101      	bne.n	8005640 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800563c:	2300      	movs	r3, #0
 800563e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4293      	cmp	r3, r2
 800564e:	bf28      	it	cs
 8005650:	4613      	movcs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d019      	beq.n	800568e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005660:	4413      	add	r3, r2
 8005662:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	6939      	ldr	r1, [r7, #16]
 8005668:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800566a:	f001 ffd5 	bl	8007618 <memcpy>
    NumBytesRead += NumBytesRem;
 800566e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	4413      	add	r3, r2
 8005674:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	4413      	add	r3, r2
 800567c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005686:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	4413      	add	r3, r2
 800568c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800568e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005698:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800569a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800569c:	4618      	mov	r0, r3
 800569e:	3730      	adds	r7, #48	@ 0x30
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	2000bb28 	.word	0x2000bb28

080056a8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4613      	mov	r3, r2
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	4413      	add	r3, r2
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	3360      	adds	r3, #96	@ 0x60
 80056c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005744 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80056c6:	4413      	add	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d029      	beq.n	8005726 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d82e      	bhi.n	8005734 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d013      	beq.n	8005706 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80056de:	e029      	b.n	8005734 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80056e0:	6978      	ldr	r0, [r7, #20]
 80056e2:	f7ff feb2 	bl	800544a <_GetAvailWriteSpace>
 80056e6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d202      	bcs.n	80056f6 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80056f0:	2300      	movs	r3, #0
 80056f2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80056f4:	e021      	b.n	800573a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	69b9      	ldr	r1, [r7, #24]
 80056fe:	6978      	ldr	r0, [r7, #20]
 8005700:	f7ff fe5b 	bl	80053ba <_WriteNoCheck>
    break;
 8005704:	e019      	b.n	800573a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005706:	6978      	ldr	r0, [r7, #20]
 8005708:	f7ff fe9f 	bl	800544a <_GetAvailWriteSpace>
 800570c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	4293      	cmp	r3, r2
 8005714:	bf28      	it	cs
 8005716:	4613      	movcs	r3, r2
 8005718:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	69b9      	ldr	r1, [r7, #24]
 800571e:	6978      	ldr	r0, [r7, #20]
 8005720:	f7ff fe4b 	bl	80053ba <_WriteNoCheck>
    break;
 8005724:	e009      	b.n	800573a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	69b9      	ldr	r1, [r7, #24]
 800572a:	6978      	ldr	r0, [r7, #20]
 800572c:	f7ff fde8 	bl	8005300 <_WriteBlocking>
 8005730:	61f8      	str	r0, [r7, #28]
    break;
 8005732:	e002      	b.n	800573a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005734:	2300      	movs	r3, #0
 8005736:	61fb      	str	r3, [r7, #28]
    break;
 8005738:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800573a:	69fb      	ldr	r3, [r7, #28]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3720      	adds	r7, #32
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	2000bb28 	.word	0x2000bb28

08005748 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005754:	4b0e      	ldr	r3, [pc, #56]	@ (8005790 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005756:	61fb      	str	r3, [r7, #28]
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b53      	cmp	r3, #83	@ 0x53
 8005760:	d001      	beq.n	8005766 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005762:	f7ff fd73 	bl	800524c <_DoInit>
  SEGGER_RTT_LOCK();
 8005766:	f3ef 8311 	mrs	r3, BASEPRI
 800576a:	f04f 0120 	mov.w	r1, #32
 800576e:	f381 8811 	msr	BASEPRI, r1
 8005772:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	68b9      	ldr	r1, [r7, #8]
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f7ff ff95 	bl	80056a8 <SEGGER_RTT_WriteDownBufferNoLock>
 800577e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005786:	697b      	ldr	r3, [r7, #20]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3720      	adds	r7, #32
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	2000bb28 	.word	0x2000bb28

08005794 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005794:	b580      	push	{r7, lr}
 8005796:	b088      	sub	sp, #32
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80057a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005898 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b53      	cmp	r3, #83	@ 0x53
 80057ae:	d001      	beq.n	80057b4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80057b0:	f7ff fd4c 	bl	800524c <_DoInit>
  SEGGER_RTT_LOCK();
 80057b4:	f3ef 8311 	mrs	r3, BASEPRI
 80057b8:	f04f 0120 	mov.w	r1, #32
 80057bc:	f381 8811 	msr	BASEPRI, r1
 80057c0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80057c2:	4b35      	ldr	r3, [pc, #212]	@ (8005898 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80057c4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80057ca:	6939      	ldr	r1, [r7, #16]
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	4613      	mov	r3, r2
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	4413      	add	r3, r2
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	440b      	add	r3, r1
 80057da:	3304      	adds	r3, #4
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d008      	beq.n	80057f4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	3301      	adds	r3, #1
 80057e6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	dbeb      	blt.n	80057ca <SEGGER_RTT_AllocUpBuffer+0x36>
 80057f2:	e000      	b.n	80057f6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80057f4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	da3f      	bge.n	8005880 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005800:	6939      	ldr	r1, [r7, #16]
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	4613      	mov	r3, r2
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	4413      	add	r3, r2
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	440b      	add	r3, r1
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005814:	6939      	ldr	r1, [r7, #16]
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	4613      	mov	r3, r2
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	4413      	add	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	440b      	add	r3, r1
 8005824:	3304      	adds	r3, #4
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800582a:	6939      	ldr	r1, [r7, #16]
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	4613      	mov	r3, r2
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	4413      	add	r3, r2
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	440b      	add	r3, r1
 8005838:	3320      	adds	r3, #32
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800583e:	6939      	ldr	r1, [r7, #16]
 8005840:	69fa      	ldr	r2, [r7, #28]
 8005842:	4613      	mov	r3, r2
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	4413      	add	r3, r2
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	440b      	add	r3, r1
 800584c:	3328      	adds	r3, #40	@ 0x28
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005852:	6939      	ldr	r1, [r7, #16]
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	4613      	mov	r3, r2
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	4413      	add	r3, r2
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	440b      	add	r3, r1
 8005860:	3324      	adds	r3, #36	@ 0x24
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005866:	6939      	ldr	r1, [r7, #16]
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	4613      	mov	r3, r2
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	4413      	add	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	440b      	add	r3, r1
 8005874:	332c      	adds	r3, #44	@ 0x2c
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800587a:	f3bf 8f5f 	dmb	sy
 800587e:	e002      	b.n	8005886 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005880:	f04f 33ff 	mov.w	r3, #4294967295
 8005884:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800588c:	69fb      	ldr	r3, [r7, #28]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3720      	adds	r7, #32
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	2000bb28 	.word	0x2000bb28

0800589c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800589c:	b580      	push	{r7, lr}
 800589e:	b08a      	sub	sp, #40	@ 0x28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80058aa:	4b21      	ldr	r3, [pc, #132]	@ (8005930 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80058ac:	623b      	str	r3, [r7, #32]
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b53      	cmp	r3, #83	@ 0x53
 80058b6:	d001      	beq.n	80058bc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80058b8:	f7ff fcc8 	bl	800524c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80058bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005930 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80058be:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d82c      	bhi.n	8005920 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80058c6:	f3ef 8311 	mrs	r3, BASEPRI
 80058ca:	f04f 0120 	mov.w	r1, #32
 80058ce:	f381 8811 	msr	BASEPRI, r1
 80058d2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4613      	mov	r3, r2
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	4413      	add	r3, r2
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	3360      	adds	r3, #96	@ 0x60
 80058e0:	69fa      	ldr	r2, [r7, #28]
 80058e2:	4413      	add	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00e      	beq.n	800590a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2200      	movs	r2, #0
 8005902:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	2200      	movs	r2, #0
 8005908:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800590e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005910:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800591a:	2300      	movs	r3, #0
 800591c:	627b      	str	r3, [r7, #36]	@ 0x24
 800591e:	e002      	b.n	8005926 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005920:	f04f 33ff 	mov.w	r3, #4294967295
 8005924:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005928:	4618      	mov	r0, r3
 800592a:	3728      	adds	r7, #40	@ 0x28
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	2000bb28 	.word	0x2000bb28

08005934 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	60fa      	str	r2, [r7, #12]
 800594a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b80      	cmp	r3, #128	@ 0x80
 8005950:	d90a      	bls.n	8005968 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005952:	2380      	movs	r3, #128	@ 0x80
 8005954:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005956:	e007      	b.n	8005968 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	1c53      	adds	r3, r2, #1
 800595c:	60bb      	str	r3, [r7, #8]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1c59      	adds	r1, r3, #1
 8005962:	60f9      	str	r1, [r7, #12]
 8005964:	7812      	ldrb	r2, [r2, #0]
 8005966:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	1e5a      	subs	r2, r3, #1
 800596c:	607a      	str	r2, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <_EncodeStr+0x46>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1ee      	bne.n	8005958 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	b2da      	uxtb	r2, r3
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005986:	68fb      	ldr	r3, [r7, #12]
}
 8005988:	4618      	mov	r0, r3
 800598a:	371c      	adds	r7, #28
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3307      	adds	r3, #7
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80059b2:	4b34      	ldr	r3, [pc, #208]	@ (8005a84 <_HandleIncomingPacket+0xd8>)
 80059b4:	7e1b      	ldrb	r3, [r3, #24]
 80059b6:	4618      	mov	r0, r3
 80059b8:	1cfb      	adds	r3, r7, #3
 80059ba:	2201      	movs	r2, #1
 80059bc:	4619      	mov	r1, r3
 80059be:	f7ff fded 	bl	800559c <SEGGER_RTT_ReadNoLock>
 80059c2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d057      	beq.n	8005a7a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80059ca:	78fb      	ldrb	r3, [r7, #3]
 80059cc:	2b80      	cmp	r3, #128	@ 0x80
 80059ce:	d031      	beq.n	8005a34 <_HandleIncomingPacket+0x88>
 80059d0:	2b80      	cmp	r3, #128	@ 0x80
 80059d2:	dc40      	bgt.n	8005a56 <_HandleIncomingPacket+0xaa>
 80059d4:	2b07      	cmp	r3, #7
 80059d6:	dc15      	bgt.n	8005a04 <_HandleIncomingPacket+0x58>
 80059d8:	2b00      	cmp	r3, #0
 80059da:	dd3c      	ble.n	8005a56 <_HandleIncomingPacket+0xaa>
 80059dc:	3b01      	subs	r3, #1
 80059de:	2b06      	cmp	r3, #6
 80059e0:	d839      	bhi.n	8005a56 <_HandleIncomingPacket+0xaa>
 80059e2:	a201      	add	r2, pc, #4	@ (adr r2, 80059e8 <_HandleIncomingPacket+0x3c>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	08005a0b 	.word	0x08005a0b
 80059ec:	08005a11 	.word	0x08005a11
 80059f0:	08005a17 	.word	0x08005a17
 80059f4:	08005a1d 	.word	0x08005a1d
 80059f8:	08005a23 	.word	0x08005a23
 80059fc:	08005a29 	.word	0x08005a29
 8005a00:	08005a2f 	.word	0x08005a2f
 8005a04:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a06:	d033      	beq.n	8005a70 <_HandleIncomingPacket+0xc4>
 8005a08:	e025      	b.n	8005a56 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005a0a:	f000 fee7 	bl	80067dc <SEGGER_SYSVIEW_Start>
      break;
 8005a0e:	e034      	b.n	8005a7a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005a10:	f000 ff9e 	bl	8006950 <SEGGER_SYSVIEW_Stop>
      break;
 8005a14:	e031      	b.n	8005a7a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005a16:	f001 f977 	bl	8006d08 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005a1a:	e02e      	b.n	8005a7a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005a1c:	f001 f93c 	bl	8006c98 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005a20:	e02b      	b.n	8005a7a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005a22:	f000 ffbb 	bl	800699c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005a26:	e028      	b.n	8005a7a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005a28:	f001 fca8 	bl	800737c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005a2c:	e025      	b.n	8005a7a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005a2e:	f001 fc87 	bl	8007340 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005a32:	e022      	b.n	8005a7a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005a34:	4b13      	ldr	r3, [pc, #76]	@ (8005a84 <_HandleIncomingPacket+0xd8>)
 8005a36:	7e1b      	ldrb	r3, [r3, #24]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	1cfb      	adds	r3, r7, #3
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	4619      	mov	r1, r3
 8005a40:	f7ff fdac 	bl	800559c <SEGGER_RTT_ReadNoLock>
 8005a44:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d013      	beq.n	8005a74 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005a4c:	78fb      	ldrb	r3, [r7, #3]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f001 fbec 	bl	800722c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005a54:	e00e      	b.n	8005a74 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005a56:	78fb      	ldrb	r3, [r7, #3]
 8005a58:	b25b      	sxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	da0c      	bge.n	8005a78 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005a5e:	4b09      	ldr	r3, [pc, #36]	@ (8005a84 <_HandleIncomingPacket+0xd8>)
 8005a60:	7e1b      	ldrb	r3, [r3, #24]
 8005a62:	4618      	mov	r0, r3
 8005a64:	1cfb      	adds	r3, r7, #3
 8005a66:	2201      	movs	r2, #1
 8005a68:	4619      	mov	r1, r3
 8005a6a:	f7ff fd97 	bl	800559c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005a6e:	e003      	b.n	8005a78 <_HandleIncomingPacket+0xcc>
      break;
 8005a70:	bf00      	nop
 8005a72:	e002      	b.n	8005a7a <_HandleIncomingPacket+0xce>
      break;
 8005a74:	bf00      	nop
 8005a76:	e000      	b.n	8005a7a <_HandleIncomingPacket+0xce>
      break;
 8005a78:	bf00      	nop
    }
  }
}
 8005a7a:	bf00      	nop
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	2000c3e8 	.word	0x2000c3e8

08005a88 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08c      	sub	sp, #48	@ 0x30
 8005a8c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005a8e:	2301      	movs	r3, #1
 8005a90:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005a92:	1d3b      	adds	r3, r7, #4
 8005a94:	3301      	adds	r3, #1
 8005a96:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a9c:	4b31      	ldr	r3, [pc, #196]	@ (8005b64 <_TrySendOverflowPacket+0xdc>)
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005aa2:	e00b      	b.n	8005abc <_TrySendOverflowPacket+0x34>
 8005aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aaa:	1c59      	adds	r1, r3, #1
 8005aac:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005aae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	701a      	strb	r2, [r3, #0]
 8005ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab8:	09db      	lsrs	r3, r3, #7
 8005aba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005abe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ac0:	d8f0      	bhi.n	8005aa4 <_TrySendOverflowPacket+0x1c>
 8005ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ac8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005ad2:	4b25      	ldr	r3, [pc, #148]	@ (8005b68 <_TrySendOverflowPacket+0xe0>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005ad8:	4b22      	ldr	r3, [pc, #136]	@ (8005b64 <_TrySendOverflowPacket+0xdc>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	623b      	str	r3, [r7, #32]
 8005aea:	e00b      	b.n	8005b04 <_TrySendOverflowPacket+0x7c>
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af2:	1c59      	adds	r1, r3, #1
 8005af4:	6279      	str	r1, [r7, #36]	@ 0x24
 8005af6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	701a      	strb	r2, [r3, #0]
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	09db      	lsrs	r3, r3, #7
 8005b02:	623b      	str	r3, [r7, #32]
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b08:	d8f0      	bhi.n	8005aec <_TrySendOverflowPacket+0x64>
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b10:	6a3a      	ldr	r2, [r7, #32]
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	701a      	strb	r2, [r3, #0]
 8005b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b18:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005b1a:	4b12      	ldr	r3, [pc, #72]	@ (8005b64 <_TrySendOverflowPacket+0xdc>)
 8005b1c:	785b      	ldrb	r3, [r3, #1]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	1d3b      	adds	r3, r7, #4
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	1d3b      	adds	r3, r7, #4
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	f7fa fb88 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005b30:	4603      	mov	r3, r0
 8005b32:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d009      	beq.n	8005b4e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8005b64 <_TrySendOverflowPacket+0xdc>)
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005b40:	4b08      	ldr	r3, [pc, #32]	@ (8005b64 <_TrySendOverflowPacket+0xdc>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	4b06      	ldr	r3, [pc, #24]	@ (8005b64 <_TrySendOverflowPacket+0xdc>)
 8005b4a:	701a      	strb	r2, [r3, #0]
 8005b4c:	e004      	b.n	8005b58 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005b4e:	4b05      	ldr	r3, [pc, #20]	@ (8005b64 <_TrySendOverflowPacket+0xdc>)
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	3301      	adds	r3, #1
 8005b54:	4a03      	ldr	r2, [pc, #12]	@ (8005b64 <_TrySendOverflowPacket+0xdc>)
 8005b56:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005b58:	693b      	ldr	r3, [r7, #16]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3730      	adds	r7, #48	@ 0x30
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	2000c3e8 	.word	0x2000c3e8
 8005b68:	e0001004 	.word	0xe0001004

08005b6c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08a      	sub	sp, #40	@ 0x28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005b78:	4b98      	ldr	r3, [pc, #608]	@ (8005ddc <_SendPacket+0x270>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d010      	beq.n	8005ba2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005b80:	4b96      	ldr	r3, [pc, #600]	@ (8005ddc <_SendPacket+0x270>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 812d 	beq.w	8005de4 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005b8a:	4b94      	ldr	r3, [pc, #592]	@ (8005ddc <_SendPacket+0x270>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d109      	bne.n	8005ba6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005b92:	f7ff ff79 	bl	8005a88 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005b96:	4b91      	ldr	r3, [pc, #580]	@ (8005ddc <_SendPacket+0x270>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	f040 8124 	bne.w	8005de8 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005ba0:	e001      	b.n	8005ba6 <_SendPacket+0x3a>
    goto Send;
 8005ba2:	bf00      	nop
 8005ba4:	e000      	b.n	8005ba8 <_SendPacket+0x3c>
Send:
 8005ba6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b1f      	cmp	r3, #31
 8005bac:	d809      	bhi.n	8005bc2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005bae:	4b8b      	ldr	r3, [pc, #556]	@ (8005ddc <_SendPacket+0x270>)
 8005bb0:	69da      	ldr	r2, [r3, #28]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f040 8115 	bne.w	8005dec <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b17      	cmp	r3, #23
 8005bc6:	d807      	bhi.n	8005bd8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	701a      	strb	r2, [r3, #0]
 8005bd6:	e0c4      	b.n	8005d62 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005be4:	d912      	bls.n	8005c0c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	09da      	lsrs	r2, r3, #7
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	3a01      	subs	r2, #1
 8005bfe:	60fa      	str	r2, [r7, #12]
 8005c00:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	e006      	b.n	8005c1a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b7e      	cmp	r3, #126	@ 0x7e
 8005c1e:	d807      	bhi.n	8005c30 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	e098      	b.n	8005d62 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c36:	d212      	bcs.n	8005c5e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	09da      	lsrs	r2, r3, #7
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	3a01      	subs	r2, #1
 8005c50:	60fa      	str	r2, [r7, #12]
 8005c52:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	701a      	strb	r2, [r3, #0]
 8005c5c:	e081      	b.n	8005d62 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c64:	d21d      	bcs.n	8005ca2 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	0b9a      	lsrs	r2, r3, #14
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	09db      	lsrs	r3, r3, #7
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	3a01      	subs	r2, #1
 8005c80:	60fa      	str	r2, [r7, #12]
 8005c82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	3a01      	subs	r2, #1
 8005c94:	60fa      	str	r2, [r7, #12]
 8005c96:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	701a      	strb	r2, [r3, #0]
 8005ca0:	e05f      	b.n	8005d62 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ca8:	d228      	bcs.n	8005cfc <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	0d5a      	lsrs	r2, r3, #21
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	b2d2      	uxtb	r2, r2
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	0b9b      	lsrs	r3, r3, #14
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	3a01      	subs	r2, #1
 8005cc4:	60fa      	str	r2, [r7, #12]
 8005cc6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	09db      	lsrs	r3, r3, #7
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	3a01      	subs	r2, #1
 8005cda:	60fa      	str	r2, [r7, #12]
 8005cdc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	3a01      	subs	r2, #1
 8005cee:	60fa      	str	r2, [r7, #12]
 8005cf0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	701a      	strb	r2, [r3, #0]
 8005cfa:	e032      	b.n	8005d62 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	0f1a      	lsrs	r2, r3, #28
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	0d5b      	lsrs	r3, r3, #21
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	3a01      	subs	r2, #1
 8005d16:	60fa      	str	r2, [r7, #12]
 8005d18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	0b9b      	lsrs	r3, r3, #14
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	3a01      	subs	r2, #1
 8005d2c:	60fa      	str	r2, [r7, #12]
 8005d2e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	09db      	lsrs	r3, r3, #7
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	3a01      	subs	r2, #1
 8005d42:	60fa      	str	r2, [r7, #12]
 8005d44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	3a01      	subs	r2, #1
 8005d56:	60fa      	str	r2, [r7, #12]
 8005d58:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d62:	4b1f      	ldr	r3, [pc, #124]	@ (8005de0 <_SendPacket+0x274>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d68:	4b1c      	ldr	r3, [pc, #112]	@ (8005ddc <_SendPacket+0x270>)
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	623b      	str	r3, [r7, #32]
 8005d7a:	e00b      	b.n	8005d94 <_SendPacket+0x228>
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d82:	1c59      	adds	r1, r3, #1
 8005d84:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d86:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	09db      	lsrs	r3, r3, #7
 8005d92:	623b      	str	r3, [r7, #32]
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d98:	d8f0      	bhi.n	8005d7c <_SendPacket+0x210>
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005da0:	6a3a      	ldr	r2, [r7, #32]
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da8:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005daa:	4b0c      	ldr	r3, [pc, #48]	@ (8005ddc <_SendPacket+0x270>)
 8005dac:	785b      	ldrb	r3, [r3, #1]
 8005dae:	4618      	mov	r0, r3
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	461a      	mov	r2, r3
 8005db8:	68f9      	ldr	r1, [r7, #12]
 8005dba:	f7fa fa41 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005dbe:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005dc6:	4a05      	ldr	r2, [pc, #20]	@ (8005ddc <_SendPacket+0x270>)
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	60d3      	str	r3, [r2, #12]
 8005dcc:	e00f      	b.n	8005dee <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005dce:	4b03      	ldr	r3, [pc, #12]	@ (8005ddc <_SendPacket+0x270>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	4b01      	ldr	r3, [pc, #4]	@ (8005ddc <_SendPacket+0x270>)
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	e008      	b.n	8005dee <_SendPacket+0x282>
 8005ddc:	2000c3e8 	.word	0x2000c3e8
 8005de0:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005de4:	bf00      	nop
 8005de6:	e002      	b.n	8005dee <_SendPacket+0x282>
      goto SendDone;
 8005de8:	bf00      	nop
 8005dea:	e000      	b.n	8005dee <_SendPacket+0x282>
      goto SendDone;
 8005dec:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005dee:	4b14      	ldr	r3, [pc, #80]	@ (8005e40 <_SendPacket+0x2d4>)
 8005df0:	7e1b      	ldrb	r3, [r3, #24]
 8005df2:	4619      	mov	r1, r3
 8005df4:	4a13      	ldr	r2, [pc, #76]	@ (8005e44 <_SendPacket+0x2d8>)
 8005df6:	460b      	mov	r3, r1
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	440b      	add	r3, r1
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	4413      	add	r3, r2
 8005e00:	336c      	adds	r3, #108	@ 0x6c
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	4b0e      	ldr	r3, [pc, #56]	@ (8005e40 <_SendPacket+0x2d4>)
 8005e06:	7e1b      	ldrb	r3, [r3, #24]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	490e      	ldr	r1, [pc, #56]	@ (8005e44 <_SendPacket+0x2d8>)
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	4403      	add	r3, r0
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	440b      	add	r3, r1
 8005e16:	3370      	adds	r3, #112	@ 0x70
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d00b      	beq.n	8005e36 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005e1e:	4b08      	ldr	r3, [pc, #32]	@ (8005e40 <_SendPacket+0x2d4>)
 8005e20:	789b      	ldrb	r3, [r3, #2]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d107      	bne.n	8005e36 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005e26:	4b06      	ldr	r3, [pc, #24]	@ (8005e40 <_SendPacket+0x2d4>)
 8005e28:	2201      	movs	r2, #1
 8005e2a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005e2c:	f7ff fdbe 	bl	80059ac <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005e30:	4b03      	ldr	r3, [pc, #12]	@ (8005e40 <_SendPacket+0x2d4>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005e36:	bf00      	nop
 8005e38:	3728      	adds	r7, #40	@ 0x28
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	2000c3e8 	.word	0x2000c3e8
 8005e44:	2000bb28 	.word	0x2000bb28

08005e48 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b08a      	sub	sp, #40	@ 0x28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	2b80      	cmp	r3, #128	@ 0x80
 8005e60:	d80a      	bhi.n	8005e78 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	1c59      	adds	r1, r3, #1
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6051      	str	r1, [r2, #4]
 8005e6c:	78fa      	ldrb	r2, [r7, #3]
 8005e6e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	2b80      	cmp	r3, #128	@ 0x80
 8005e7e:	d15a      	bne.n	8005f36 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691a      	ldr	r2, [r3, #16]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	623b      	str	r3, [r7, #32]
 8005ea0:	e00b      	b.n	8005eba <_StoreChar+0x72>
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea8:	1c59      	adds	r1, r3, #1
 8005eaa:	6279      	str	r1, [r7, #36]	@ 0x24
 8005eac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005eb0:	b2d2      	uxtb	r2, r2
 8005eb2:	701a      	strb	r2, [r3, #0]
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	09db      	lsrs	r3, r3, #7
 8005eb8:	623b      	str	r3, [r7, #32]
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ebe:	d8f0      	bhi.n	8005ea2 <_StoreChar+0x5a>
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ec6:	6a3a      	ldr	r2, [r7, #32]
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	701a      	strb	r2, [r3, #0]
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ece:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	61fb      	str	r3, [r7, #28]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	61bb      	str	r3, [r7, #24]
 8005ed8:	e00b      	b.n	8005ef2 <_StoreChar+0xaa>
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	1c59      	adds	r1, r3, #1
 8005ee2:	61f9      	str	r1, [r7, #28]
 8005ee4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	09db      	lsrs	r3, r3, #7
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ef6:	d8f0      	bhi.n	8005eda <_StoreChar+0x92>
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	61fa      	str	r2, [r7, #28]
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	701a      	strb	r2, [r3, #0]
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	221a      	movs	r2, #26
 8005f0e:	6939      	ldr	r1, [r7, #16]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7ff fe2b 	bl	8005b6c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7ff fd3a 	bl	8005994 <_PreparePacket>
 8005f20:	4602      	mov	r2, r0
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	611a      	str	r2, [r3, #16]
  }
}
 8005f36:	bf00      	nop
 8005f38:	3728      	adds	r7, #40	@ 0x28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08a      	sub	sp, #40	@ 0x28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005f52:	2301      	movs	r3, #1
 8005f54:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005f56:	2301      	movs	r3, #1
 8005f58:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005f5a:	e007      	b.n	8005f6c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005f5c:	6a3a      	ldr	r2, [r7, #32]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f64:	623b      	str	r3, [r7, #32]
    Width++;
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005f6c:	6a3a      	ldr	r2, [r7, #32]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d2f3      	bcs.n	8005f5c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d901      	bls.n	8005f80 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d000      	beq.n	8005f8c <_PrintUnsigned+0x4c>
 8005f8a:	e01f      	b.n	8005fcc <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d01c      	beq.n	8005fcc <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <_PrintUnsigned+0x68>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d102      	bne.n	8005fa8 <_PrintUnsigned+0x68>
        c = '0';
 8005fa2:	2330      	movs	r3, #48	@ 0x30
 8005fa4:	76fb      	strb	r3, [r7, #27]
 8005fa6:	e001      	b.n	8005fac <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005fa8:	2320      	movs	r3, #32
 8005faa:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005fac:	e007      	b.n	8005fbe <_PrintUnsigned+0x7e>
        FieldWidth--;
 8005fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005fb4:	7efb      	ldrb	r3, [r7, #27]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f7ff ff45 	bl	8005e48 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <_PrintUnsigned+0x8c>
 8005fc4:	69fa      	ldr	r2, [r7, #28]
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d3f0      	bcc.n	8005fae <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d903      	bls.n	8005fda <_PrintUnsigned+0x9a>
      NumDigits--;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	e009      	b.n	8005fee <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe2:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d200      	bcs.n	8005fee <_PrintUnsigned+0xae>
        break;
 8005fec:	e005      	b.n	8005ffa <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	fb02 f303 	mul.w	r3, r2, r3
 8005ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005ff8:	e7e8      	b.n	8005fcc <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006002:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006008:	fb02 f303 	mul.w	r3, r2, r3
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006012:	4a15      	ldr	r2, [pc, #84]	@ (8006068 <_PrintUnsigned+0x128>)
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	4413      	add	r3, r2
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	4619      	mov	r1, r3
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f7ff ff13 	bl	8005e48 <_StoreChar>
    Digit /= Base;
 8006022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	fbb2 f3f3 	udiv	r3, r2, r3
 800602a:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 800602c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e3      	bne.n	8005ffa <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d011      	beq.n	8006060 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 800603c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00e      	beq.n	8006060 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006042:	e006      	b.n	8006052 <_PrintUnsigned+0x112>
        FieldWidth--;
 8006044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006046:	3b01      	subs	r3, #1
 8006048:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 800604a:	2120      	movs	r1, #32
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f7ff fefb 	bl	8005e48 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <_PrintUnsigned+0x120>
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605c:	429a      	cmp	r2, r3
 800605e:	d3f1      	bcc.n	8006044 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8006060:	bf00      	nop
 8006062:	3728      	adds	r7, #40	@ 0x28
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	08008054 	.word	0x08008054

0800606c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af02      	add	r7, sp, #8
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	2b00      	cmp	r3, #0
 800607e:	bfb8      	it	lt
 8006080:	425b      	neglt	r3, r3
 8006082:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006084:	2301      	movs	r3, #1
 8006086:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006088:	e007      	b.n	800609a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006092:	613b      	str	r3, [r7, #16]
    Width++;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	3301      	adds	r3, #1
 8006098:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	429a      	cmp	r2, r3
 80060a0:	daf3      	bge.n	800608a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d901      	bls.n	80060ae <_PrintInt+0x42>
    Width = NumDigits;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00a      	beq.n	80060ca <_PrintInt+0x5e>
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	db04      	blt.n	80060c4 <_PrintInt+0x58>
 80060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <_PrintInt+0x5e>
    FieldWidth--;
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80060ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <_PrintInt+0x6e>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d016      	beq.n	8006108 <_PrintInt+0x9c>
 80060da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d111      	bne.n	8006108 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00e      	beq.n	8006108 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060ea:	e006      	b.n	80060fa <_PrintInt+0x8e>
        FieldWidth--;
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	3b01      	subs	r3, #1
 80060f0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80060f2:	2120      	movs	r1, #32
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f7ff fea7 	bl	8005e48 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <_PrintInt+0x9c>
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	429a      	cmp	r2, r3
 8006106:	d3f1      	bcc.n	80060ec <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	da07      	bge.n	800611e <_PrintInt+0xb2>
    v = -v;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	425b      	negs	r3, r3
 8006112:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006114:	212d      	movs	r1, #45	@ 0x2d
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f7ff fe96 	bl	8005e48 <_StoreChar>
 800611c:	e008      	b.n	8006130 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006128:	212b      	movs	r1, #43	@ 0x2b
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f7ff fe8c 	bl	8005e48 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d019      	beq.n	800616e <_PrintInt+0x102>
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d114      	bne.n	800616e <_PrintInt+0x102>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d111      	bne.n	800616e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00e      	beq.n	800616e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006150:	e006      	b.n	8006160 <_PrintInt+0xf4>
        FieldWidth--;
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	3b01      	subs	r3, #1
 8006156:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006158:	2130      	movs	r1, #48	@ 0x30
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f7ff fe74 	bl	8005e48 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <_PrintInt+0x102>
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	429a      	cmp	r2, r3
 800616c:	d3f1      	bcc.n	8006152 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006172:	9301      	str	r3, [sp, #4]
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f7ff fedf 	bl	8005f40 <_PrintUnsigned>
}
 8006182:	bf00      	nop
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
	...

0800618c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800618c:	b580      	push	{r7, lr}
 800618e:	b098      	sub	sp, #96	@ 0x60
 8006190:	af02      	add	r7, sp, #8
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006198:	f3ef 8311 	mrs	r3, BASEPRI
 800619c:	f04f 0120 	mov.w	r1, #32
 80061a0:	f381 8811 	msr	BASEPRI, r1
 80061a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061a6:	48b7      	ldr	r0, [pc, #732]	@ (8006484 <_VPrintTarget+0x2f8>)
 80061a8:	f7ff fbf4 	bl	8005994 <_PreparePacket>
 80061ac:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80061ae:	4bb5      	ldr	r3, [pc, #724]	@ (8006484 <_VPrintTarget+0x2f8>)
 80061b0:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 80061b2:	2300      	movs	r3, #0
 80061b4:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 80061b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b8:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	3301      	adds	r3, #1
 80061be:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	3301      	adds	r3, #1
 80061d0:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80061d2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f000 81a8 	beq.w	800652c <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80061dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061e0:	2b25      	cmp	r3, #37	@ 0x25
 80061e2:	f040 8195 	bne.w	8006510 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80061e6:	2300      	movs	r3, #0
 80061e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 80061ea:	2301      	movs	r3, #1
 80061ec:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 80061f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061fa:	3b23      	subs	r3, #35	@ 0x23
 80061fc:	2b0d      	cmp	r3, #13
 80061fe:	d83f      	bhi.n	8006280 <_VPrintTarget+0xf4>
 8006200:	a201      	add	r2, pc, #4	@ (adr r2, 8006208 <_VPrintTarget+0x7c>)
 8006202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006206:	bf00      	nop
 8006208:	08006271 	.word	0x08006271
 800620c:	08006281 	.word	0x08006281
 8006210:	08006281 	.word	0x08006281
 8006214:	08006281 	.word	0x08006281
 8006218:	08006281 	.word	0x08006281
 800621c:	08006281 	.word	0x08006281
 8006220:	08006281 	.word	0x08006281
 8006224:	08006281 	.word	0x08006281
 8006228:	08006261 	.word	0x08006261
 800622c:	08006281 	.word	0x08006281
 8006230:	08006241 	.word	0x08006241
 8006234:	08006281 	.word	0x08006281
 8006238:	08006281 	.word	0x08006281
 800623c:	08006251 	.word	0x08006251
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006242:	f043 0301 	orr.w	r3, r3, #1
 8006246:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	3301      	adds	r3, #1
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	e01a      	b.n	8006286 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006252:	f043 0302 	orr.w	r3, r3, #2
 8006256:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3301      	adds	r3, #1
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	e012      	b.n	8006286 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006260:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006262:	f043 0304 	orr.w	r3, r3, #4
 8006266:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	3301      	adds	r3, #1
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	e00a      	b.n	8006286 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006270:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006272:	f043 0308 	orr.w	r3, r3, #8
 8006276:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	3301      	adds	r3, #1
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	e002      	b.n	8006286 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006280:	2300      	movs	r3, #0
 8006282:	653b      	str	r3, [r7, #80]	@ 0x50
 8006284:	bf00      	nop
        }
      } while (v);
 8006286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1b0      	bne.n	80061ee <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800628c:	2300      	movs	r3, #0
 800628e:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8006298:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800629c:	2b2f      	cmp	r3, #47	@ 0x2f
 800629e:	d912      	bls.n	80062c6 <_VPrintTarget+0x13a>
 80062a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80062a4:	2b39      	cmp	r3, #57	@ 0x39
 80062a6:	d80e      	bhi.n	80062c6 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	3301      	adds	r3, #1
 80062ac:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80062ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062b0:	4613      	mov	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	461a      	mov	r2, r3
 80062ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80062be:	4413      	add	r3, r2
 80062c0:	3b30      	subs	r3, #48	@ 0x30
 80062c2:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 80062c4:	e7e4      	b.n	8006290 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80062c6:	2300      	movs	r3, #0
 80062c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 80062d2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80062d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80062d8:	d11d      	bne.n	8006316 <_VPrintTarget+0x18a>
        sFormat++;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3301      	adds	r3, #1
 80062de:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 80062e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80062ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80062ee:	d912      	bls.n	8006316 <_VPrintTarget+0x18a>
 80062f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80062f4:	2b39      	cmp	r3, #57	@ 0x39
 80062f6:	d80e      	bhi.n	8006316 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3301      	adds	r3, #1
 80062fc:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80062fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006300:	4613      	mov	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	005b      	lsls	r3, r3, #1
 8006308:	461a      	mov	r2, r3
 800630a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800630e:	4413      	add	r3, r2
 8006310:	3b30      	subs	r3, #48	@ 0x30
 8006312:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8006314:	e7e4      	b.n	80062e0 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800631e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006322:	2b6c      	cmp	r3, #108	@ 0x6c
 8006324:	d003      	beq.n	800632e <_VPrintTarget+0x1a2>
 8006326:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800632a:	2b68      	cmp	r3, #104	@ 0x68
 800632c:	d107      	bne.n	800633e <_VPrintTarget+0x1b2>
          c = *sFormat;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3301      	adds	r3, #1
 800633a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800633c:	e7ef      	b.n	800631e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800633e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006342:	2b25      	cmp	r3, #37	@ 0x25
 8006344:	f000 80d8 	beq.w	80064f8 <_VPrintTarget+0x36c>
 8006348:	2b25      	cmp	r3, #37	@ 0x25
 800634a:	f2c0 80dc 	blt.w	8006506 <_VPrintTarget+0x37a>
 800634e:	2b78      	cmp	r3, #120	@ 0x78
 8006350:	f300 80d9 	bgt.w	8006506 <_VPrintTarget+0x37a>
 8006354:	2b58      	cmp	r3, #88	@ 0x58
 8006356:	f2c0 80d6 	blt.w	8006506 <_VPrintTarget+0x37a>
 800635a:	3b58      	subs	r3, #88	@ 0x58
 800635c:	2b20      	cmp	r3, #32
 800635e:	f200 80d2 	bhi.w	8006506 <_VPrintTarget+0x37a>
 8006362:	a201      	add	r2, pc, #4	@ (adr r2, 8006368 <_VPrintTarget+0x1dc>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	0800645f 	.word	0x0800645f
 800636c:	08006507 	.word	0x08006507
 8006370:	08006507 	.word	0x08006507
 8006374:	08006507 	.word	0x08006507
 8006378:	08006507 	.word	0x08006507
 800637c:	08006507 	.word	0x08006507
 8006380:	08006507 	.word	0x08006507
 8006384:	08006507 	.word	0x08006507
 8006388:	08006507 	.word	0x08006507
 800638c:	08006507 	.word	0x08006507
 8006390:	08006507 	.word	0x08006507
 8006394:	080063ed 	.word	0x080063ed
 8006398:	08006413 	.word	0x08006413
 800639c:	08006507 	.word	0x08006507
 80063a0:	08006507 	.word	0x08006507
 80063a4:	08006507 	.word	0x08006507
 80063a8:	08006507 	.word	0x08006507
 80063ac:	08006507 	.word	0x08006507
 80063b0:	08006507 	.word	0x08006507
 80063b4:	08006507 	.word	0x08006507
 80063b8:	08006507 	.word	0x08006507
 80063bc:	08006507 	.word	0x08006507
 80063c0:	08006507 	.word	0x08006507
 80063c4:	08006507 	.word	0x08006507
 80063c8:	080064d3 	.word	0x080064d3
 80063cc:	08006507 	.word	0x08006507
 80063d0:	08006507 	.word	0x08006507
 80063d4:	08006489 	.word	0x08006489
 80063d8:	08006507 	.word	0x08006507
 80063dc:	08006439 	.word	0x08006439
 80063e0:	08006507 	.word	0x08006507
 80063e4:	08006507 	.word	0x08006507
 80063e8:	0800645f 	.word	0x0800645f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	1d19      	adds	r1, r3, #4
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6011      	str	r1, [r2, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 80063fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8006400:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006404:	f107 0310 	add.w	r3, r7, #16
 8006408:	4611      	mov	r1, r2
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff fd1c 	bl	8005e48 <_StoreChar>
        break;
 8006410:	e07a      	b.n	8006508 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	1d19      	adds	r1, r3, #4
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6011      	str	r1, [r2, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006420:	f107 0010 	add.w	r0, r7, #16
 8006424:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006426:	9301      	str	r3, [sp, #4]
 8006428:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800642e:	220a      	movs	r2, #10
 8006430:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006432:	f7ff fe1b 	bl	800606c <_PrintInt>
        break;
 8006436:	e067      	b.n	8006508 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	1d19      	adds	r1, r3, #4
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6011      	str	r1, [r2, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006446:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006448:	f107 0010 	add.w	r0, r7, #16
 800644c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800644e:	9301      	str	r3, [sp, #4]
 8006450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006456:	220a      	movs	r2, #10
 8006458:	f7ff fd72 	bl	8005f40 <_PrintUnsigned>
        break;
 800645c:	e054      	b.n	8006508 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	1d19      	adds	r1, r3, #4
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	6011      	str	r1, [r2, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800646c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800646e:	f107 0010 	add.w	r0, r7, #16
 8006472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006474:	9301      	str	r3, [sp, #4]
 8006476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800647c:	2210      	movs	r2, #16
 800647e:	f7ff fd5f 	bl	8005f40 <_PrintUnsigned>
        break;
 8006482:	e041      	b.n	8006508 <_VPrintTarget+0x37c>
 8006484:	2000c418 	.word	0x2000c418
      case 's':
        s = va_arg(*pParamList, const char*);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	1d19      	adds	r1, r3, #4
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	6011      	str	r1, [r2, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8006496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <_VPrintTarget+0x314>
          s = "(null)";
 800649c:	4b4a      	ldr	r3, [pc, #296]	@ (80065c8 <_VPrintTarget+0x43c>)
 800649e:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 80064a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 80064a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064aa:	3301      	adds	r3, #1
 80064ac:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 80064ae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00b      	beq.n	80064ce <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 80064b6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80064ba:	f107 0310 	add.w	r3, r7, #16
 80064be:	4611      	mov	r1, r2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff fcc1 	bl	8005e48 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80064ca:	d9e9      	bls.n	80064a0 <_VPrintTarget+0x314>
        break;
 80064cc:	e01c      	b.n	8006508 <_VPrintTarget+0x37c>
            break;
 80064ce:	bf00      	nop
        break;
 80064d0:	e01a      	b.n	8006508 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	1d19      	adds	r1, r3, #4
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6011      	str	r1, [r2, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80064e0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80064e2:	f107 0010 	add.w	r0, r7, #16
 80064e6:	2300      	movs	r3, #0
 80064e8:	9301      	str	r3, [sp, #4]
 80064ea:	2308      	movs	r3, #8
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	2308      	movs	r3, #8
 80064f0:	2210      	movs	r2, #16
 80064f2:	f7ff fd25 	bl	8005f40 <_PrintUnsigned>
        break;
 80064f6:	e007      	b.n	8006508 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80064f8:	f107 0310 	add.w	r3, r7, #16
 80064fc:	2125      	movs	r1, #37	@ 0x25
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff fca2 	bl	8005e48 <_StoreChar>
        break;
 8006504:	e000      	b.n	8006508 <_VPrintTarget+0x37c>
      default:
        break;
 8006506:	bf00      	nop
      }
      sFormat++;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3301      	adds	r3, #1
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	e007      	b.n	8006520 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006510:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006514:	f107 0310 	add.w	r3, r7, #16
 8006518:	4611      	mov	r1, r2
 800651a:	4618      	mov	r0, r3
 800651c:	f7ff fc94 	bl	8005e48 <_StoreChar>
    }
  } while (*sFormat);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	f47f ae4d 	bne.w	80061c4 <_VPrintTarget+0x38>
 800652a:	e000      	b.n	800652e <_VPrintTarget+0x3a2>
      break;
 800652c:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d041      	beq.n	80065b8 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006534:	6a3a      	ldr	r2, [r7, #32]
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006544:	e00b      	b.n	800655e <_VPrintTarget+0x3d2>
 8006546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006548:	b2da      	uxtb	r2, r3
 800654a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800654c:	1c59      	adds	r1, r3, #1
 800654e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006550:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006554:	b2d2      	uxtb	r2, r2
 8006556:	701a      	strb	r2, [r3, #0]
 8006558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655a:	09db      	lsrs	r3, r3, #7
 800655c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800655e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006560:	2b7f      	cmp	r3, #127	@ 0x7f
 8006562:	d8f0      	bhi.n	8006546 <_VPrintTarget+0x3ba>
 8006564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800656a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800656c:	b2d2      	uxtb	r2, r2
 800656e:	701a      	strb	r2, [r3, #0]
 8006570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006572:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	637b      	str	r3, [r7, #52]	@ 0x34
 8006578:	2300      	movs	r3, #0
 800657a:	633b      	str	r3, [r7, #48]	@ 0x30
 800657c:	e00b      	b.n	8006596 <_VPrintTarget+0x40a>
 800657e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006580:	b2da      	uxtb	r2, r3
 8006582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006584:	1c59      	adds	r1, r3, #1
 8006586:	6379      	str	r1, [r7, #52]	@ 0x34
 8006588:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006592:	09db      	lsrs	r3, r3, #7
 8006594:	633b      	str	r3, [r7, #48]	@ 0x30
 8006596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006598:	2b7f      	cmp	r3, #127	@ 0x7f
 800659a:	d8f0      	bhi.n	800657e <_VPrintTarget+0x3f2>
 800659c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	637a      	str	r2, [r7, #52]	@ 0x34
 80065a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065a4:	b2d2      	uxtb	r2, r2
 80065a6:	701a      	strb	r2, [r3, #0]
 80065a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065aa:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	6979      	ldr	r1, [r7, #20]
 80065b0:	221a      	movs	r2, #26
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7ff fada 	bl	8005b6c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80065b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ba:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80065be:	bf00      	nop
 80065c0:	3758      	adds	r7, #88	@ 0x58
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	08008000 	.word	0x08008000

080065cc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af02      	add	r7, sp, #8
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80065da:	2300      	movs	r3, #0
 80065dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80065e0:	4917      	ldr	r1, [pc, #92]	@ (8006640 <SEGGER_SYSVIEW_Init+0x74>)
 80065e2:	4818      	ldr	r0, [pc, #96]	@ (8006644 <SEGGER_SYSVIEW_Init+0x78>)
 80065e4:	f7ff f8d6 	bl	8005794 <SEGGER_RTT_AllocUpBuffer>
 80065e8:	4603      	mov	r3, r0
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	4b16      	ldr	r3, [pc, #88]	@ (8006648 <SEGGER_SYSVIEW_Init+0x7c>)
 80065ee:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80065f0:	4b15      	ldr	r3, [pc, #84]	@ (8006648 <SEGGER_SYSVIEW_Init+0x7c>)
 80065f2:	785a      	ldrb	r2, [r3, #1]
 80065f4:	4b14      	ldr	r3, [pc, #80]	@ (8006648 <SEGGER_SYSVIEW_Init+0x7c>)
 80065f6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80065f8:	4b13      	ldr	r3, [pc, #76]	@ (8006648 <SEGGER_SYSVIEW_Init+0x7c>)
 80065fa:	7e1b      	ldrb	r3, [r3, #24]
 80065fc:	4618      	mov	r0, r3
 80065fe:	2300      	movs	r3, #0
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	2308      	movs	r3, #8
 8006604:	4a11      	ldr	r2, [pc, #68]	@ (800664c <SEGGER_SYSVIEW_Init+0x80>)
 8006606:	490f      	ldr	r1, [pc, #60]	@ (8006644 <SEGGER_SYSVIEW_Init+0x78>)
 8006608:	f7ff f948 	bl	800589c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800660c:	4b0e      	ldr	r3, [pc, #56]	@ (8006648 <SEGGER_SYSVIEW_Init+0x7c>)
 800660e:	2200      	movs	r2, #0
 8006610:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006612:	4b0f      	ldr	r3, [pc, #60]	@ (8006650 <SEGGER_SYSVIEW_Init+0x84>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a0c      	ldr	r2, [pc, #48]	@ (8006648 <SEGGER_SYSVIEW_Init+0x7c>)
 8006618:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800661a:	4a0b      	ldr	r2, [pc, #44]	@ (8006648 <SEGGER_SYSVIEW_Init+0x7c>)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006620:	4a09      	ldr	r2, [pc, #36]	@ (8006648 <SEGGER_SYSVIEW_Init+0x7c>)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006626:	4a08      	ldr	r2, [pc, #32]	@ (8006648 <SEGGER_SYSVIEW_Init+0x7c>)
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800662c:	4a06      	ldr	r2, [pc, #24]	@ (8006648 <SEGGER_SYSVIEW_Init+0x7c>)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006632:	4b05      	ldr	r3, [pc, #20]	@ (8006648 <SEGGER_SYSVIEW_Init+0x7c>)
 8006634:	2200      	movs	r2, #0
 8006636:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006638:	bf00      	nop
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	2000bfe0 	.word	0x2000bfe0
 8006644:	08008008 	.word	0x08008008
 8006648:	2000c3e8 	.word	0x2000c3e8
 800664c:	2000c3e0 	.word	0x2000c3e0
 8006650:	e0001004 	.word	0xe0001004

08006654 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800665c:	4a04      	ldr	r2, [pc, #16]	@ (8006670 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6113      	str	r3, [r2, #16]
}
 8006662:	bf00      	nop
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	2000c3e8 	.word	0x2000c3e8

08006674 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800667c:	f3ef 8311 	mrs	r3, BASEPRI
 8006680:	f04f 0120 	mov.w	r1, #32
 8006684:	f381 8811 	msr	BASEPRI, r1
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	4808      	ldr	r0, [pc, #32]	@ (80066ac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800668c:	f7ff f982 	bl	8005994 <_PreparePacket>
 8006690:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	68b9      	ldr	r1, [r7, #8]
 8006696:	68b8      	ldr	r0, [r7, #8]
 8006698:	f7ff fa68 	bl	8005b6c <_SendPacket>
  RECORD_END();
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f383 8811 	msr	BASEPRI, r3
}
 80066a2:	bf00      	nop
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	2000c418 	.word	0x2000c418

080066b0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b088      	sub	sp, #32
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066ba:	f3ef 8311 	mrs	r3, BASEPRI
 80066be:	f04f 0120 	mov.w	r1, #32
 80066c2:	f381 8811 	msr	BASEPRI, r1
 80066c6:	617b      	str	r3, [r7, #20]
 80066c8:	4816      	ldr	r0, [pc, #88]	@ (8006724 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80066ca:	f7ff f963 	bl	8005994 <_PreparePacket>
 80066ce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	61fb      	str	r3, [r7, #28]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	61bb      	str	r3, [r7, #24]
 80066dc:	e00b      	b.n	80066f6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	1c59      	adds	r1, r3, #1
 80066e6:	61f9      	str	r1, [r7, #28]
 80066e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	09db      	lsrs	r3, r3, #7
 80066f4:	61bb      	str	r3, [r7, #24]
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80066fa:	d8f0      	bhi.n	80066de <SEGGER_SYSVIEW_RecordU32+0x2e>
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	1c5a      	adds	r2, r3, #1
 8006700:	61fa      	str	r2, [r7, #28]
 8006702:	69ba      	ldr	r2, [r7, #24]
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	701a      	strb	r2, [r3, #0]
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	68f9      	ldr	r1, [r7, #12]
 8006710:	6938      	ldr	r0, [r7, #16]
 8006712:	f7ff fa2b 	bl	8005b6c <_SendPacket>
  RECORD_END();
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f383 8811 	msr	BASEPRI, r3
}
 800671c:	bf00      	nop
 800671e:	3720      	adds	r7, #32
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	2000c418 	.word	0x2000c418

08006728 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006728:	b580      	push	{r7, lr}
 800672a:	b08c      	sub	sp, #48	@ 0x30
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006734:	f3ef 8311 	mrs	r3, BASEPRI
 8006738:	f04f 0120 	mov.w	r1, #32
 800673c:	f381 8811 	msr	BASEPRI, r1
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	4825      	ldr	r0, [pc, #148]	@ (80067d8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006744:	f7ff f926 	bl	8005994 <_PreparePacket>
 8006748:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006756:	e00b      	b.n	8006770 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675a:	b2da      	uxtb	r2, r3
 800675c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675e:	1c59      	adds	r1, r3, #1
 8006760:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006762:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676c:	09db      	lsrs	r3, r3, #7
 800676e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006772:	2b7f      	cmp	r3, #127	@ 0x7f
 8006774:	d8f0      	bhi.n	8006758 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800677c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]
 8006782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006784:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	627b      	str	r3, [r7, #36]	@ 0x24
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	623b      	str	r3, [r7, #32]
 800678e:	e00b      	b.n	80067a8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	b2da      	uxtb	r2, r3
 8006794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006796:	1c59      	adds	r1, r3, #1
 8006798:	6279      	str	r1, [r7, #36]	@ 0x24
 800679a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	09db      	lsrs	r3, r3, #7
 80067a6:	623b      	str	r3, [r7, #32]
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80067ac:	d8f0      	bhi.n	8006790 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80067b4:	6a3a      	ldr	r2, [r7, #32]
 80067b6:	b2d2      	uxtb	r2, r2
 80067b8:	701a      	strb	r2, [r3, #0]
 80067ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067bc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	6979      	ldr	r1, [r7, #20]
 80067c2:	69b8      	ldr	r0, [r7, #24]
 80067c4:	f7ff f9d2 	bl	8005b6c <_SendPacket>
  RECORD_END();
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	f383 8811 	msr	BASEPRI, r3
}
 80067ce:	bf00      	nop
 80067d0:	3730      	adds	r7, #48	@ 0x30
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	2000c418 	.word	0x2000c418

080067dc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08c      	sub	sp, #48	@ 0x30
 80067e0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80067e2:	4b58      	ldr	r3, [pc, #352]	@ (8006944 <SEGGER_SYSVIEW_Start+0x168>)
 80067e4:	2201      	movs	r2, #1
 80067e6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80067e8:	f3ef 8311 	mrs	r3, BASEPRI
 80067ec:	f04f 0120 	mov.w	r1, #32
 80067f0:	f381 8811 	msr	BASEPRI, r1
 80067f4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80067f6:	4b53      	ldr	r3, [pc, #332]	@ (8006944 <SEGGER_SYSVIEW_Start+0x168>)
 80067f8:	785b      	ldrb	r3, [r3, #1]
 80067fa:	220a      	movs	r2, #10
 80067fc:	4952      	ldr	r1, [pc, #328]	@ (8006948 <SEGGER_SYSVIEW_Start+0x16c>)
 80067fe:	4618      	mov	r0, r3
 8006800:	f7f9 fd1e 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800680a:	200a      	movs	r0, #10
 800680c:	f7ff ff32 	bl	8006674 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006810:	f3ef 8311 	mrs	r3, BASEPRI
 8006814:	f04f 0120 	mov.w	r1, #32
 8006818:	f381 8811 	msr	BASEPRI, r1
 800681c:	60bb      	str	r3, [r7, #8]
 800681e:	484b      	ldr	r0, [pc, #300]	@ (800694c <SEGGER_SYSVIEW_Start+0x170>)
 8006820:	f7ff f8b8 	bl	8005994 <_PreparePacket>
 8006824:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800682e:	4b45      	ldr	r3, [pc, #276]	@ (8006944 <SEGGER_SYSVIEW_Start+0x168>)
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006834:	e00b      	b.n	800684e <SEGGER_SYSVIEW_Start+0x72>
 8006836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006838:	b2da      	uxtb	r2, r3
 800683a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800683c:	1c59      	adds	r1, r3, #1
 800683e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006840:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	701a      	strb	r2, [r3, #0]
 8006848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800684a:	09db      	lsrs	r3, r3, #7
 800684c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800684e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006850:	2b7f      	cmp	r3, #127	@ 0x7f
 8006852:	d8f0      	bhi.n	8006836 <SEGGER_SYSVIEW_Start+0x5a>
 8006854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800685a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006862:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	627b      	str	r3, [r7, #36]	@ 0x24
 8006868:	4b36      	ldr	r3, [pc, #216]	@ (8006944 <SEGGER_SYSVIEW_Start+0x168>)
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	623b      	str	r3, [r7, #32]
 800686e:	e00b      	b.n	8006888 <SEGGER_SYSVIEW_Start+0xac>
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	b2da      	uxtb	r2, r3
 8006874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006876:	1c59      	adds	r1, r3, #1
 8006878:	6279      	str	r1, [r7, #36]	@ 0x24
 800687a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800687e:	b2d2      	uxtb	r2, r2
 8006880:	701a      	strb	r2, [r3, #0]
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	09db      	lsrs	r3, r3, #7
 8006886:	623b      	str	r3, [r7, #32]
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	2b7f      	cmp	r3, #127	@ 0x7f
 800688c:	d8f0      	bhi.n	8006870 <SEGGER_SYSVIEW_Start+0x94>
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	627a      	str	r2, [r7, #36]	@ 0x24
 8006894:	6a3a      	ldr	r2, [r7, #32]
 8006896:	b2d2      	uxtb	r2, r2
 8006898:	701a      	strb	r2, [r3, #0]
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	61fb      	str	r3, [r7, #28]
 80068a2:	4b28      	ldr	r3, [pc, #160]	@ (8006944 <SEGGER_SYSVIEW_Start+0x168>)
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	61bb      	str	r3, [r7, #24]
 80068a8:	e00b      	b.n	80068c2 <SEGGER_SYSVIEW_Start+0xe6>
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	1c59      	adds	r1, r3, #1
 80068b2:	61f9      	str	r1, [r7, #28]
 80068b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068b8:	b2d2      	uxtb	r2, r2
 80068ba:	701a      	strb	r2, [r3, #0]
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	09db      	lsrs	r3, r3, #7
 80068c0:	61bb      	str	r3, [r7, #24]
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80068c6:	d8f0      	bhi.n	80068aa <SEGGER_SYSVIEW_Start+0xce>
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	61fa      	str	r2, [r7, #28]
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	b2d2      	uxtb	r2, r2
 80068d2:	701a      	strb	r2, [r3, #0]
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	2300      	movs	r3, #0
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	e00b      	b.n	80068fa <SEGGER_SYSVIEW_Start+0x11e>
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	1c59      	adds	r1, r3, #1
 80068ea:	6179      	str	r1, [r7, #20]
 80068ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	09db      	lsrs	r3, r3, #7
 80068f8:	613b      	str	r3, [r7, #16]
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80068fe:	d8f0      	bhi.n	80068e2 <SEGGER_SYSVIEW_Start+0x106>
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	617a      	str	r2, [r7, #20]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006910:	2218      	movs	r2, #24
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7ff f929 	bl	8005b6c <_SendPacket>
      RECORD_END();
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006920:	4b08      	ldr	r3, [pc, #32]	@ (8006944 <SEGGER_SYSVIEW_Start+0x168>)
 8006922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006928:	4b06      	ldr	r3, [pc, #24]	@ (8006944 <SEGGER_SYSVIEW_Start+0x168>)
 800692a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800692e:	f000 f9eb 	bl	8006d08 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006932:	f000 f9b1 	bl	8006c98 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006936:	f000 fd21 	bl	800737c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800693a:	bf00      	nop
 800693c:	3730      	adds	r7, #48	@ 0x30
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	2000c3e8 	.word	0x2000c3e8
 8006948:	08008048 	.word	0x08008048
 800694c:	2000c418 	.word	0x2000c418

08006950 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006956:	f3ef 8311 	mrs	r3, BASEPRI
 800695a:	f04f 0120 	mov.w	r1, #32
 800695e:	f381 8811 	msr	BASEPRI, r1
 8006962:	607b      	str	r3, [r7, #4]
 8006964:	480b      	ldr	r0, [pc, #44]	@ (8006994 <SEGGER_SYSVIEW_Stop+0x44>)
 8006966:	f7ff f815 	bl	8005994 <_PreparePacket>
 800696a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800696c:	4b0a      	ldr	r3, [pc, #40]	@ (8006998 <SEGGER_SYSVIEW_Stop+0x48>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d007      	beq.n	8006984 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006974:	220b      	movs	r2, #11
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	6838      	ldr	r0, [r7, #0]
 800697a:	f7ff f8f7 	bl	8005b6c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800697e:	4b06      	ldr	r3, [pc, #24]	@ (8006998 <SEGGER_SYSVIEW_Stop+0x48>)
 8006980:	2200      	movs	r2, #0
 8006982:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f383 8811 	msr	BASEPRI, r3
}
 800698a:	bf00      	nop
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	2000c418 	.word	0x2000c418
 8006998:	2000c3e8 	.word	0x2000c3e8

0800699c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800699c:	b580      	push	{r7, lr}
 800699e:	b08c      	sub	sp, #48	@ 0x30
 80069a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80069a2:	f3ef 8311 	mrs	r3, BASEPRI
 80069a6:	f04f 0120 	mov.w	r1, #32
 80069aa:	f381 8811 	msr	BASEPRI, r1
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	4845      	ldr	r0, [pc, #276]	@ (8006ac8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80069b2:	f7fe ffef 	bl	8005994 <_PreparePacket>
 80069b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069c0:	4b42      	ldr	r3, [pc, #264]	@ (8006acc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069c6:	e00b      	b.n	80069e0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80069c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ce:	1c59      	adds	r1, r3, #1
 80069d0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80069d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069d6:	b2d2      	uxtb	r2, r2
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069dc:	09db      	lsrs	r3, r3, #7
 80069de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80069e4:	d8f0      	bhi.n	80069c8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80069e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069ee:	b2d2      	uxtb	r2, r2
 80069f0:	701a      	strb	r2, [r3, #0]
 80069f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80069fa:	4b34      	ldr	r3, [pc, #208]	@ (8006acc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	623b      	str	r3, [r7, #32]
 8006a00:	e00b      	b.n	8006a1a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a08:	1c59      	adds	r1, r3, #1
 8006a0a:	6279      	str	r1, [r7, #36]	@ 0x24
 8006a0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a10:	b2d2      	uxtb	r2, r2
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	09db      	lsrs	r3, r3, #7
 8006a18:	623b      	str	r3, [r7, #32]
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a1e:	d8f0      	bhi.n	8006a02 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a26:	6a3a      	ldr	r2, [r7, #32]
 8006a28:	b2d2      	uxtb	r2, r2
 8006a2a:	701a      	strb	r2, [r3, #0]
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	61fb      	str	r3, [r7, #28]
 8006a34:	4b25      	ldr	r3, [pc, #148]	@ (8006acc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	e00b      	b.n	8006a54 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	1c59      	adds	r1, r3, #1
 8006a44:	61f9      	str	r1, [r7, #28]
 8006a46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a4a:	b2d2      	uxtb	r2, r2
 8006a4c:	701a      	strb	r2, [r3, #0]
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	09db      	lsrs	r3, r3, #7
 8006a52:	61bb      	str	r3, [r7, #24]
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a58:	d8f0      	bhi.n	8006a3c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	61fa      	str	r2, [r7, #28]
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	b2d2      	uxtb	r2, r2
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	617b      	str	r3, [r7, #20]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	613b      	str	r3, [r7, #16]
 8006a72:	e00b      	b.n	8006a8c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	1c59      	adds	r1, r3, #1
 8006a7c:	6179      	str	r1, [r7, #20]
 8006a7e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	09db      	lsrs	r3, r3, #7
 8006a8a:	613b      	str	r3, [r7, #16]
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a90:	d8f0      	bhi.n	8006a74 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	617a      	str	r2, [r7, #20]
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006aa2:	2218      	movs	r2, #24
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	68b8      	ldr	r0, [r7, #8]
 8006aa8:	f7ff f860 	bl	8005b6c <_SendPacket>
  RECORD_END();
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006ab2:	4b06      	ldr	r3, [pc, #24]	@ (8006acc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d002      	beq.n	8006ac0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006aba:	4b04      	ldr	r3, [pc, #16]	@ (8006acc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006abe:	4798      	blx	r3
  }
}
 8006ac0:	bf00      	nop
 8006ac2:	3730      	adds	r7, #48	@ 0x30
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	2000c418 	.word	0x2000c418
 8006acc:	2000c3e8 	.word	0x2000c3e8

08006ad0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b092      	sub	sp, #72	@ 0x48
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006ad8:	f3ef 8311 	mrs	r3, BASEPRI
 8006adc:	f04f 0120 	mov.w	r1, #32
 8006ae0:	f381 8811 	msr	BASEPRI, r1
 8006ae4:	617b      	str	r3, [r7, #20]
 8006ae6:	486a      	ldr	r0, [pc, #424]	@ (8006c90 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006ae8:	f7fe ff54 	bl	8005994 <_PreparePacket>
 8006aec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	4b66      	ldr	r3, [pc, #408]	@ (8006c94 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b02:	e00b      	b.n	8006b1c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006b04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b0a:	1c59      	adds	r1, r3, #1
 8006b0c:	6479      	str	r1, [r7, #68]	@ 0x44
 8006b0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b12:	b2d2      	uxtb	r2, r2
 8006b14:	701a      	strb	r2, [r3, #0]
 8006b16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b18:	09db      	lsrs	r3, r3, #7
 8006b1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b20:	d8f0      	bhi.n	8006b04 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b24:	1c5a      	adds	r2, r3, #1
 8006b26:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	701a      	strb	r2, [r3, #0]
 8006b2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b3c:	e00b      	b.n	8006b56 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b44:	1c59      	adds	r1, r3, #1
 8006b46:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006b48:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b4c:	b2d2      	uxtb	r2, r2
 8006b4e:	701a      	strb	r2, [r3, #0]
 8006b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b52:	09db      	lsrs	r3, r3, #7
 8006b54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b58:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b5a:	d8f0      	bhi.n	8006b3e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006b62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b64:	b2d2      	uxtb	r2, r2
 8006b66:	701a      	strb	r2, [r3, #0]
 8006b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b6a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	2220      	movs	r2, #32
 8006b72:	4619      	mov	r1, r3
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7fe fedd 	bl	8005934 <_EncodeStr>
 8006b7a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006b7c:	2209      	movs	r2, #9
 8006b7e:	68f9      	ldr	r1, [r7, #12]
 8006b80:	6938      	ldr	r0, [r7, #16]
 8006b82:	f7fe fff3 	bl	8005b6c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	4b40      	ldr	r3, [pc, #256]	@ (8006c94 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b9a:	e00b      	b.n	8006bb4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ba2:	1c59      	adds	r1, r3, #1
 8006ba4:	6379      	str	r1, [r7, #52]	@ 0x34
 8006ba6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006baa:	b2d2      	uxtb	r2, r2
 8006bac:	701a      	strb	r2, [r3, #0]
 8006bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb0:	09db      	lsrs	r3, r3, #7
 8006bb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bb8:	d8f0      	bhi.n	8006b9c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bbc:	1c5a      	adds	r2, r3, #1
 8006bbe:	637a      	str	r2, [r7, #52]	@ 0x34
 8006bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	701a      	strb	r2, [r3, #0]
 8006bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bc8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bd4:	e00b      	b.n	8006bee <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bdc:	1c59      	adds	r1, r3, #1
 8006bde:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006be0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006be4:	b2d2      	uxtb	r2, r2
 8006be6:	701a      	strb	r2, [r3, #0]
 8006be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bea:	09db      	lsrs	r3, r3, #7
 8006bec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bf2:	d8f0      	bhi.n	8006bd6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bfc:	b2d2      	uxtb	r2, r2
 8006bfe:	701a      	strb	r2, [r3, #0]
 8006c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c02:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	623b      	str	r3, [r7, #32]
 8006c0e:	e00b      	b.n	8006c28 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c16:	1c59      	adds	r1, r3, #1
 8006c18:	6279      	str	r1, [r7, #36]	@ 0x24
 8006c1a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	09db      	lsrs	r3, r3, #7
 8006c26:	623b      	str	r3, [r7, #32]
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c2c:	d8f0      	bhi.n	8006c10 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c34:	6a3a      	ldr	r2, [r7, #32]
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	61fb      	str	r3, [r7, #28]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	61bb      	str	r3, [r7, #24]
 8006c48:	e00b      	b.n	8006c62 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	1c59      	adds	r1, r3, #1
 8006c52:	61f9      	str	r1, [r7, #28]
 8006c54:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c58:	b2d2      	uxtb	r2, r2
 8006c5a:	701a      	strb	r2, [r3, #0]
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	09db      	lsrs	r3, r3, #7
 8006c60:	61bb      	str	r3, [r7, #24]
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c66:	d8f0      	bhi.n	8006c4a <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	61fa      	str	r2, [r7, #28]
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	b2d2      	uxtb	r2, r2
 8006c72:	701a      	strb	r2, [r3, #0]
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006c78:	2215      	movs	r2, #21
 8006c7a:	68f9      	ldr	r1, [r7, #12]
 8006c7c:	6938      	ldr	r0, [r7, #16]
 8006c7e:	f7fe ff75 	bl	8005b6c <_SendPacket>
  RECORD_END();
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f383 8811 	msr	BASEPRI, r3
}
 8006c88:	bf00      	nop
 8006c8a:	3748      	adds	r7, #72	@ 0x48
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	2000c418 	.word	0x2000c418
 8006c94:	2000c3e8 	.word	0x2000c3e8

08006c98 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006c9c:	4b07      	ldr	r3, [pc, #28]	@ (8006cbc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d008      	beq.n	8006cb6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006ca4:	4b05      	ldr	r3, [pc, #20]	@ (8006cbc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006cae:	4b03      	ldr	r3, [pc, #12]	@ (8006cbc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	4798      	blx	r3
  }
}
 8006cb6:	bf00      	nop
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	2000c3e8 	.word	0x2000c3e8

08006cc0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cc8:	f3ef 8311 	mrs	r3, BASEPRI
 8006ccc:	f04f 0120 	mov.w	r1, #32
 8006cd0:	f381 8811 	msr	BASEPRI, r1
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	480b      	ldr	r0, [pc, #44]	@ (8006d04 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006cd8:	f7fe fe5c 	bl	8005994 <_PreparePacket>
 8006cdc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cde:	2280      	movs	r2, #128	@ 0x80
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	6938      	ldr	r0, [r7, #16]
 8006ce4:	f7fe fe26 	bl	8005934 <_EncodeStr>
 8006ce8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006cea:	220e      	movs	r2, #14
 8006cec:	68f9      	ldr	r1, [r7, #12]
 8006cee:	6938      	ldr	r0, [r7, #16]
 8006cf0:	f7fe ff3c 	bl	8005b6c <_SendPacket>
  RECORD_END();
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f383 8811 	msr	BASEPRI, r3
}
 8006cfa:	bf00      	nop
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	2000c418 	.word	0x2000c418

08006d08 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006d08:	b590      	push	{r4, r7, lr}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006d0e:	4b15      	ldr	r3, [pc, #84]	@ (8006d64 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d01a      	beq.n	8006d4c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006d16:	4b13      	ldr	r3, [pc, #76]	@ (8006d64 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d015      	beq.n	8006d4c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006d20:	4b10      	ldr	r3, [pc, #64]	@ (8006d64 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4798      	blx	r3
 8006d28:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d2c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006d2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d32:	f04f 0200 	mov.w	r2, #0
 8006d36:	f04f 0300 	mov.w	r3, #0
 8006d3a:	000a      	movs	r2, r1
 8006d3c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d3e:	4613      	mov	r3, r2
 8006d40:	461a      	mov	r2, r3
 8006d42:	4621      	mov	r1, r4
 8006d44:	200d      	movs	r0, #13
 8006d46:	f7ff fcef 	bl	8006728 <SEGGER_SYSVIEW_RecordU32x2>
 8006d4a:	e006      	b.n	8006d5a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006d4c:	4b06      	ldr	r3, [pc, #24]	@ (8006d68 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4619      	mov	r1, r3
 8006d52:	200c      	movs	r0, #12
 8006d54:	f7ff fcac 	bl	80066b0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006d58:	bf00      	nop
 8006d5a:	bf00      	nop
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd90      	pop	{r4, r7, pc}
 8006d62:	bf00      	nop
 8006d64:	2000c3e8 	.word	0x2000c3e8
 8006d68:	e0001004 	.word	0xe0001004

08006d6c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d72:	f3ef 8311 	mrs	r3, BASEPRI
 8006d76:	f04f 0120 	mov.w	r1, #32
 8006d7a:	f381 8811 	msr	BASEPRI, r1
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	4819      	ldr	r0, [pc, #100]	@ (8006de8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006d82:	f7fe fe07 	bl	8005994 <_PreparePacket>
 8006d86:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006d8c:	4b17      	ldr	r3, [pc, #92]	@ (8006dec <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d94:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	617b      	str	r3, [r7, #20]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	613b      	str	r3, [r7, #16]
 8006d9e:	e00b      	b.n	8006db8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	1c59      	adds	r1, r3, #1
 8006da8:	6179      	str	r1, [r7, #20]
 8006daa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dae:	b2d2      	uxtb	r2, r2
 8006db0:	701a      	strb	r2, [r3, #0]
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	09db      	lsrs	r3, r3, #7
 8006db6:	613b      	str	r3, [r7, #16]
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dbc:	d8f0      	bhi.n	8006da0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	617a      	str	r2, [r7, #20]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	b2d2      	uxtb	r2, r2
 8006dc8:	701a      	strb	r2, [r3, #0]
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006dce:	2202      	movs	r2, #2
 8006dd0:	6879      	ldr	r1, [r7, #4]
 8006dd2:	68b8      	ldr	r0, [r7, #8]
 8006dd4:	f7fe feca 	bl	8005b6c <_SendPacket>
  RECORD_END();
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f383 8811 	msr	BASEPRI, r3
}
 8006dde:	bf00      	nop
 8006de0:	3718      	adds	r7, #24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	2000c418 	.word	0x2000c418
 8006dec:	e000ed04 	.word	0xe000ed04

08006df0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006df6:	f3ef 8311 	mrs	r3, BASEPRI
 8006dfa:	f04f 0120 	mov.w	r1, #32
 8006dfe:	f381 8811 	msr	BASEPRI, r1
 8006e02:	607b      	str	r3, [r7, #4]
 8006e04:	4807      	ldr	r0, [pc, #28]	@ (8006e24 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006e06:	f7fe fdc5 	bl	8005994 <_PreparePacket>
 8006e0a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006e0c:	2203      	movs	r2, #3
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6838      	ldr	r0, [r7, #0]
 8006e12:	f7fe feab 	bl	8005b6c <_SendPacket>
  RECORD_END();
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f383 8811 	msr	BASEPRI, r3
}
 8006e1c:	bf00      	nop
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	2000c418 	.word	0x2000c418

08006e28 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e2e:	f3ef 8311 	mrs	r3, BASEPRI
 8006e32:	f04f 0120 	mov.w	r1, #32
 8006e36:	f381 8811 	msr	BASEPRI, r1
 8006e3a:	607b      	str	r3, [r7, #4]
 8006e3c:	4807      	ldr	r0, [pc, #28]	@ (8006e5c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006e3e:	f7fe fda9 	bl	8005994 <_PreparePacket>
 8006e42:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006e44:	2212      	movs	r2, #18
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6838      	ldr	r0, [r7, #0]
 8006e4a:	f7fe fe8f 	bl	8005b6c <_SendPacket>
  RECORD_END();
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f383 8811 	msr	BASEPRI, r3
}
 8006e54:	bf00      	nop
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	2000c418 	.word	0x2000c418

08006e60 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b088      	sub	sp, #32
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e68:	f3ef 8311 	mrs	r3, BASEPRI
 8006e6c:	f04f 0120 	mov.w	r1, #32
 8006e70:	f381 8811 	msr	BASEPRI, r1
 8006e74:	617b      	str	r3, [r7, #20]
 8006e76:	4817      	ldr	r0, [pc, #92]	@ (8006ed4 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006e78:	f7fe fd8c 	bl	8005994 <_PreparePacket>
 8006e7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	61fb      	str	r3, [r7, #28]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	61bb      	str	r3, [r7, #24]
 8006e8a:	e00b      	b.n	8006ea4 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	1c59      	adds	r1, r3, #1
 8006e94:	61f9      	str	r1, [r7, #28]
 8006e96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	09db      	lsrs	r3, r3, #7
 8006ea2:	61bb      	str	r3, [r7, #24]
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ea8:	d8f0      	bhi.n	8006e8c <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	1c5a      	adds	r2, r3, #1
 8006eae:	61fa      	str	r2, [r7, #28]
 8006eb0:	69ba      	ldr	r2, [r7, #24]
 8006eb2:	b2d2      	uxtb	r2, r2
 8006eb4:	701a      	strb	r2, [r3, #0]
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006eba:	221c      	movs	r2, #28
 8006ebc:	68f9      	ldr	r1, [r7, #12]
 8006ebe:	6938      	ldr	r0, [r7, #16]
 8006ec0:	f7fe fe54 	bl	8005b6c <_SendPacket>
  RECORD_END();
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f383 8811 	msr	BASEPRI, r3
}
 8006eca:	bf00      	nop
 8006ecc:	3720      	adds	r7, #32
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	2000c418 	.word	0x2000c418

08006ed8 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b08a      	sub	sp, #40	@ 0x28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ee2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ee6:	f04f 0120 	mov.w	r1, #32
 8006eea:	f381 8811 	msr	BASEPRI, r1
 8006eee:	617b      	str	r3, [r7, #20]
 8006ef0:	4824      	ldr	r0, [pc, #144]	@ (8006f84 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8006ef2:	f7fe fd4f 	bl	8005994 <_PreparePacket>
 8006ef6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	623b      	str	r3, [r7, #32]
 8006f04:	e00b      	b.n	8006f1e <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0c:	1c59      	adds	r1, r3, #1
 8006f0e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006f10:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f14:	b2d2      	uxtb	r2, r2
 8006f16:	701a      	strb	r2, [r3, #0]
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	09db      	lsrs	r3, r3, #7
 8006f1c:	623b      	str	r3, [r7, #32]
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f22:	d8f0      	bhi.n	8006f06 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8006f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f2a:	6a3a      	ldr	r2, [r7, #32]
 8006f2c:	b2d2      	uxtb	r2, r2
 8006f2e:	701a      	strb	r2, [r3, #0]
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	61fb      	str	r3, [r7, #28]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	61bb      	str	r3, [r7, #24]
 8006f3c:	e00b      	b.n	8006f56 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	1c59      	adds	r1, r3, #1
 8006f46:	61f9      	str	r1, [r7, #28]
 8006f48:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f4c:	b2d2      	uxtb	r2, r2
 8006f4e:	701a      	strb	r2, [r3, #0]
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	09db      	lsrs	r3, r3, #7
 8006f54:	61bb      	str	r3, [r7, #24]
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f5a:	d8f0      	bhi.n	8006f3e <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	1c5a      	adds	r2, r3, #1
 8006f60:	61fa      	str	r2, [r7, #28]
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	b2d2      	uxtb	r2, r2
 8006f66:	701a      	strb	r2, [r3, #0]
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006f6c:	221c      	movs	r2, #28
 8006f6e:	68f9      	ldr	r1, [r7, #12]
 8006f70:	6938      	ldr	r0, [r7, #16]
 8006f72:	f7fe fdfb 	bl	8005b6c <_SendPacket>
  RECORD_END();
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f383 8811 	msr	BASEPRI, r3
}
 8006f7c:	bf00      	nop
 8006f7e:	3728      	adds	r7, #40	@ 0x28
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	2000c418 	.word	0x2000c418

08006f88 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f8e:	f3ef 8311 	mrs	r3, BASEPRI
 8006f92:	f04f 0120 	mov.w	r1, #32
 8006f96:	f381 8811 	msr	BASEPRI, r1
 8006f9a:	607b      	str	r3, [r7, #4]
 8006f9c:	4807      	ldr	r0, [pc, #28]	@ (8006fbc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006f9e:	f7fe fcf9 	bl	8005994 <_PreparePacket>
 8006fa2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006fa4:	2211      	movs	r2, #17
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6838      	ldr	r0, [r7, #0]
 8006faa:	f7fe fddf 	bl	8005b6c <_SendPacket>
  RECORD_END();
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f383 8811 	msr	BASEPRI, r3
}
 8006fb4:	bf00      	nop
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	2000c418 	.word	0x2000c418

08006fc0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b088      	sub	sp, #32
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006fc8:	f3ef 8311 	mrs	r3, BASEPRI
 8006fcc:	f04f 0120 	mov.w	r1, #32
 8006fd0:	f381 8811 	msr	BASEPRI, r1
 8006fd4:	617b      	str	r3, [r7, #20]
 8006fd6:	4819      	ldr	r0, [pc, #100]	@ (800703c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006fd8:	f7fe fcdc 	bl	8005994 <_PreparePacket>
 8006fdc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006fe2:	4b17      	ldr	r3, [pc, #92]	@ (8007040 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	61fb      	str	r3, [r7, #28]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	61bb      	str	r3, [r7, #24]
 8006ff4:	e00b      	b.n	800700e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	1c59      	adds	r1, r3, #1
 8006ffe:	61f9      	str	r1, [r7, #28]
 8007000:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007004:	b2d2      	uxtb	r2, r2
 8007006:	701a      	strb	r2, [r3, #0]
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	09db      	lsrs	r3, r3, #7
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	2b7f      	cmp	r3, #127	@ 0x7f
 8007012:	d8f0      	bhi.n	8006ff6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	61fa      	str	r2, [r7, #28]
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	b2d2      	uxtb	r2, r2
 800701e:	701a      	strb	r2, [r3, #0]
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007024:	2208      	movs	r2, #8
 8007026:	68f9      	ldr	r1, [r7, #12]
 8007028:	6938      	ldr	r0, [r7, #16]
 800702a:	f7fe fd9f 	bl	8005b6c <_SendPacket>
  RECORD_END();
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f383 8811 	msr	BASEPRI, r3
}
 8007034:	bf00      	nop
 8007036:	3720      	adds	r7, #32
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	2000c418 	.word	0x2000c418
 8007040:	2000c3e8 	.word	0x2000c3e8

08007044 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800704c:	f3ef 8311 	mrs	r3, BASEPRI
 8007050:	f04f 0120 	mov.w	r1, #32
 8007054:	f381 8811 	msr	BASEPRI, r1
 8007058:	617b      	str	r3, [r7, #20]
 800705a:	4819      	ldr	r0, [pc, #100]	@ (80070c0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800705c:	f7fe fc9a 	bl	8005994 <_PreparePacket>
 8007060:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007066:	4b17      	ldr	r3, [pc, #92]	@ (80070c4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	61fb      	str	r3, [r7, #28]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	61bb      	str	r3, [r7, #24]
 8007078:	e00b      	b.n	8007092 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	b2da      	uxtb	r2, r3
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	1c59      	adds	r1, r3, #1
 8007082:	61f9      	str	r1, [r7, #28]
 8007084:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007088:	b2d2      	uxtb	r2, r2
 800708a:	701a      	strb	r2, [r3, #0]
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	09db      	lsrs	r3, r3, #7
 8007090:	61bb      	str	r3, [r7, #24]
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	2b7f      	cmp	r3, #127	@ 0x7f
 8007096:	d8f0      	bhi.n	800707a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	1c5a      	adds	r2, r3, #1
 800709c:	61fa      	str	r2, [r7, #28]
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	b2d2      	uxtb	r2, r2
 80070a2:	701a      	strb	r2, [r3, #0]
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80070a8:	2204      	movs	r2, #4
 80070aa:	68f9      	ldr	r1, [r7, #12]
 80070ac:	6938      	ldr	r0, [r7, #16]
 80070ae:	f7fe fd5d 	bl	8005b6c <_SendPacket>
  RECORD_END();
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f383 8811 	msr	BASEPRI, r3
}
 80070b8:	bf00      	nop
 80070ba:	3720      	adds	r7, #32
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	2000c418 	.word	0x2000c418
 80070c4:	2000c3e8 	.word	0x2000c3e8

080070c8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80070d0:	f3ef 8311 	mrs	r3, BASEPRI
 80070d4:	f04f 0120 	mov.w	r1, #32
 80070d8:	f381 8811 	msr	BASEPRI, r1
 80070dc:	617b      	str	r3, [r7, #20]
 80070de:	4819      	ldr	r0, [pc, #100]	@ (8007144 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80070e0:	f7fe fc58 	bl	8005994 <_PreparePacket>
 80070e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80070ea:	4b17      	ldr	r3, [pc, #92]	@ (8007148 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	61fb      	str	r3, [r7, #28]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	61bb      	str	r3, [r7, #24]
 80070fc:	e00b      	b.n	8007116 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	b2da      	uxtb	r2, r3
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	1c59      	adds	r1, r3, #1
 8007106:	61f9      	str	r1, [r7, #28]
 8007108:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800710c:	b2d2      	uxtb	r2, r2
 800710e:	701a      	strb	r2, [r3, #0]
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	09db      	lsrs	r3, r3, #7
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	2b7f      	cmp	r3, #127	@ 0x7f
 800711a:	d8f0      	bhi.n	80070fe <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	61fa      	str	r2, [r7, #28]
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	b2d2      	uxtb	r2, r2
 8007126:	701a      	strb	r2, [r3, #0]
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800712c:	2206      	movs	r2, #6
 800712e:	68f9      	ldr	r1, [r7, #12]
 8007130:	6938      	ldr	r0, [r7, #16]
 8007132:	f7fe fd1b 	bl	8005b6c <_SendPacket>
  RECORD_END();
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f383 8811 	msr	BASEPRI, r3
}
 800713c:	bf00      	nop
 800713e:	3720      	adds	r7, #32
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	2000c418 	.word	0x2000c418
 8007148:	2000c3e8 	.word	0x2000c3e8

0800714c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800714c:	b580      	push	{r7, lr}
 800714e:	b08a      	sub	sp, #40	@ 0x28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007156:	f3ef 8311 	mrs	r3, BASEPRI
 800715a:	f04f 0120 	mov.w	r1, #32
 800715e:	f381 8811 	msr	BASEPRI, r1
 8007162:	617b      	str	r3, [r7, #20]
 8007164:	4827      	ldr	r0, [pc, #156]	@ (8007204 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007166:	f7fe fc15 	bl	8005994 <_PreparePacket>
 800716a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007170:	4b25      	ldr	r3, [pc, #148]	@ (8007208 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	627b      	str	r3, [r7, #36]	@ 0x24
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	623b      	str	r3, [r7, #32]
 8007182:	e00b      	b.n	800719c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	b2da      	uxtb	r2, r3
 8007188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718a:	1c59      	adds	r1, r3, #1
 800718c:	6279      	str	r1, [r7, #36]	@ 0x24
 800718e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007192:	b2d2      	uxtb	r2, r2
 8007194:	701a      	strb	r2, [r3, #0]
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	09db      	lsrs	r3, r3, #7
 800719a:	623b      	str	r3, [r7, #32]
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	2b7f      	cmp	r3, #127	@ 0x7f
 80071a0:	d8f0      	bhi.n	8007184 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80071a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a4:	1c5a      	adds	r2, r3, #1
 80071a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80071a8:	6a3a      	ldr	r2, [r7, #32]
 80071aa:	b2d2      	uxtb	r2, r2
 80071ac:	701a      	strb	r2, [r3, #0]
 80071ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	61fb      	str	r3, [r7, #28]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	61bb      	str	r3, [r7, #24]
 80071ba:	e00b      	b.n	80071d4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	b2da      	uxtb	r2, r3
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	1c59      	adds	r1, r3, #1
 80071c4:	61f9      	str	r1, [r7, #28]
 80071c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071ca:	b2d2      	uxtb	r2, r2
 80071cc:	701a      	strb	r2, [r3, #0]
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	09db      	lsrs	r3, r3, #7
 80071d2:	61bb      	str	r3, [r7, #24]
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80071d8:	d8f0      	bhi.n	80071bc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	1c5a      	adds	r2, r3, #1
 80071de:	61fa      	str	r2, [r7, #28]
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	b2d2      	uxtb	r2, r2
 80071e4:	701a      	strb	r2, [r3, #0]
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80071ea:	2207      	movs	r2, #7
 80071ec:	68f9      	ldr	r1, [r7, #12]
 80071ee:	6938      	ldr	r0, [r7, #16]
 80071f0:	f7fe fcbc 	bl	8005b6c <_SendPacket>
  RECORD_END();
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f383 8811 	msr	BASEPRI, r3
}
 80071fa:	bf00      	nop
 80071fc:	3728      	adds	r7, #40	@ 0x28
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	2000c418 	.word	0x2000c418
 8007208:	2000c3e8 	.word	0x2000c3e8

0800720c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007214:	4b04      	ldr	r3, [pc, #16]	@ (8007228 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	1ad3      	subs	r3, r2, r3
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	2000c3e8 	.word	0x2000c3e8

0800722c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800722c:	b580      	push	{r7, lr}
 800722e:	b08c      	sub	sp, #48	@ 0x30
 8007230:	af00      	add	r7, sp, #0
 8007232:	4603      	mov	r3, r0
 8007234:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007236:	4b40      	ldr	r3, [pc, #256]	@ (8007338 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d077      	beq.n	800732e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800723e:	4b3e      	ldr	r3, [pc, #248]	@ (8007338 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007244:	2300      	movs	r3, #0
 8007246:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007248:	e008      	b.n	800725c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800724a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007252:	2b00      	cmp	r3, #0
 8007254:	d007      	beq.n	8007266 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007258:	3301      	adds	r3, #1
 800725a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800725c:	79fb      	ldrb	r3, [r7, #7]
 800725e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007260:	429a      	cmp	r2, r3
 8007262:	d3f2      	bcc.n	800724a <SEGGER_SYSVIEW_SendModule+0x1e>
 8007264:	e000      	b.n	8007268 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007266:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800726a:	2b00      	cmp	r3, #0
 800726c:	d055      	beq.n	800731a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800726e:	f3ef 8311 	mrs	r3, BASEPRI
 8007272:	f04f 0120 	mov.w	r1, #32
 8007276:	f381 8811 	msr	BASEPRI, r1
 800727a:	617b      	str	r3, [r7, #20]
 800727c:	482f      	ldr	r0, [pc, #188]	@ (800733c <SEGGER_SYSVIEW_SendModule+0x110>)
 800727e:	f7fe fb89 	bl	8005994 <_PreparePacket>
 8007282:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	627b      	str	r3, [r7, #36]	@ 0x24
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	623b      	str	r3, [r7, #32]
 8007290:	e00b      	b.n	80072aa <SEGGER_SYSVIEW_SendModule+0x7e>
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	b2da      	uxtb	r2, r3
 8007296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007298:	1c59      	adds	r1, r3, #1
 800729a:	6279      	str	r1, [r7, #36]	@ 0x24
 800729c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072a0:	b2d2      	uxtb	r2, r2
 80072a2:	701a      	strb	r2, [r3, #0]
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	09db      	lsrs	r3, r3, #7
 80072a8:	623b      	str	r3, [r7, #32]
 80072aa:	6a3b      	ldr	r3, [r7, #32]
 80072ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80072ae:	d8f0      	bhi.n	8007292 <SEGGER_SYSVIEW_SendModule+0x66>
 80072b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b2:	1c5a      	adds	r2, r3, #1
 80072b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80072b6:	6a3a      	ldr	r2, [r7, #32]
 80072b8:	b2d2      	uxtb	r2, r2
 80072ba:	701a      	strb	r2, [r3, #0]
 80072bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072be:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	61fb      	str	r3, [r7, #28]
 80072c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	61bb      	str	r3, [r7, #24]
 80072ca:	e00b      	b.n	80072e4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	1c59      	adds	r1, r3, #1
 80072d4:	61f9      	str	r1, [r7, #28]
 80072d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072da:	b2d2      	uxtb	r2, r2
 80072dc:	701a      	strb	r2, [r3, #0]
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	09db      	lsrs	r3, r3, #7
 80072e2:	61bb      	str	r3, [r7, #24]
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80072e8:	d8f0      	bhi.n	80072cc <SEGGER_SYSVIEW_SendModule+0xa0>
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	1c5a      	adds	r2, r3, #1
 80072ee:	61fa      	str	r2, [r7, #28]
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	b2d2      	uxtb	r2, r2
 80072f4:	701a      	strb	r2, [r3, #0]
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2280      	movs	r2, #128	@ 0x80
 8007300:	4619      	mov	r1, r3
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f7fe fb16 	bl	8005934 <_EncodeStr>
 8007308:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800730a:	2216      	movs	r2, #22
 800730c:	68f9      	ldr	r1, [r7, #12]
 800730e:	6938      	ldr	r0, [r7, #16]
 8007310:	f7fe fc2c 	bl	8005b6c <_SendPacket>
      RECORD_END();
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800731a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731c:	2b00      	cmp	r3, #0
 800731e:	d006      	beq.n	800732e <SEGGER_SYSVIEW_SendModule+0x102>
 8007320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	4798      	blx	r3
    }
  }
}
 800732e:	bf00      	nop
 8007330:	3730      	adds	r7, #48	@ 0x30
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	2000c410 	.word	0x2000c410
 800733c:	2000c418 	.word	0x2000c418

08007340 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007346:	4b0c      	ldr	r3, [pc, #48]	@ (8007378 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00f      	beq.n	800736e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800734e:	4b0a      	ldr	r3, [pc, #40]	@ (8007378 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1f2      	bne.n	8007354 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800736e:	bf00      	nop
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	2000c410 	.word	0x2000c410

0800737c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007382:	f3ef 8311 	mrs	r3, BASEPRI
 8007386:	f04f 0120 	mov.w	r1, #32
 800738a:	f381 8811 	msr	BASEPRI, r1
 800738e:	60fb      	str	r3, [r7, #12]
 8007390:	4817      	ldr	r0, [pc, #92]	@ (80073f0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007392:	f7fe faff 	bl	8005994 <_PreparePacket>
 8007396:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	617b      	str	r3, [r7, #20]
 80073a0:	4b14      	ldr	r3, [pc, #80]	@ (80073f4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	613b      	str	r3, [r7, #16]
 80073a6:	e00b      	b.n	80073c0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	1c59      	adds	r1, r3, #1
 80073b0:	6179      	str	r1, [r7, #20]
 80073b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073b6:	b2d2      	uxtb	r2, r2
 80073b8:	701a      	strb	r2, [r3, #0]
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	09db      	lsrs	r3, r3, #7
 80073be:	613b      	str	r3, [r7, #16]
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80073c4:	d8f0      	bhi.n	80073a8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	1c5a      	adds	r2, r3, #1
 80073ca:	617a      	str	r2, [r7, #20]
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	b2d2      	uxtb	r2, r2
 80073d0:	701a      	strb	r2, [r3, #0]
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80073d6:	221b      	movs	r2, #27
 80073d8:	6879      	ldr	r1, [r7, #4]
 80073da:	68b8      	ldr	r0, [r7, #8]
 80073dc:	f7fe fbc6 	bl	8005b6c <_SendPacket>
  RECORD_END();
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f383 8811 	msr	BASEPRI, r3
}
 80073e6:	bf00      	nop
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	2000c418 	.word	0x2000c418
 80073f4:	2000c414 	.word	0x2000c414

080073f8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80073f8:	b40f      	push	{r0, r1, r2, r3}
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007400:	f107 0314 	add.w	r3, r7, #20
 8007404:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007406:	1d3b      	adds	r3, r7, #4
 8007408:	461a      	mov	r2, r3
 800740a:	2100      	movs	r1, #0
 800740c:	6938      	ldr	r0, [r7, #16]
 800740e:	f7fe febd 	bl	800618c <_VPrintTarget>
  va_end(ParamList);
}
 8007412:	bf00      	nop
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800741c:	b004      	add	sp, #16
 800741e:	4770      	bx	lr

08007420 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007420:	b580      	push	{r7, lr}
 8007422:	b08a      	sub	sp, #40	@ 0x28
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007428:	f3ef 8311 	mrs	r3, BASEPRI
 800742c:	f04f 0120 	mov.w	r1, #32
 8007430:	f381 8811 	msr	BASEPRI, r1
 8007434:	617b      	str	r3, [r7, #20]
 8007436:	4827      	ldr	r0, [pc, #156]	@ (80074d4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007438:	f7fe faac 	bl	8005994 <_PreparePacket>
 800743c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800743e:	2280      	movs	r2, #128	@ 0x80
 8007440:	6879      	ldr	r1, [r7, #4]
 8007442:	6938      	ldr	r0, [r7, #16]
 8007444:	f7fe fa76 	bl	8005934 <_EncodeStr>
 8007448:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	627b      	str	r3, [r7, #36]	@ 0x24
 800744e:	2301      	movs	r3, #1
 8007450:	623b      	str	r3, [r7, #32]
 8007452:	e00b      	b.n	800746c <SEGGER_SYSVIEW_Warn+0x4c>
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	b2da      	uxtb	r2, r3
 8007458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745a:	1c59      	adds	r1, r3, #1
 800745c:	6279      	str	r1, [r7, #36]	@ 0x24
 800745e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007462:	b2d2      	uxtb	r2, r2
 8007464:	701a      	strb	r2, [r3, #0]
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	09db      	lsrs	r3, r3, #7
 800746a:	623b      	str	r3, [r7, #32]
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007470:	d8f0      	bhi.n	8007454 <SEGGER_SYSVIEW_Warn+0x34>
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	627a      	str	r2, [r7, #36]	@ 0x24
 8007478:	6a3a      	ldr	r2, [r7, #32]
 800747a:	b2d2      	uxtb	r2, r2
 800747c:	701a      	strb	r2, [r3, #0]
 800747e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007480:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	61fb      	str	r3, [r7, #28]
 8007486:	2300      	movs	r3, #0
 8007488:	61bb      	str	r3, [r7, #24]
 800748a:	e00b      	b.n	80074a4 <SEGGER_SYSVIEW_Warn+0x84>
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	b2da      	uxtb	r2, r3
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	1c59      	adds	r1, r3, #1
 8007494:	61f9      	str	r1, [r7, #28]
 8007496:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	701a      	strb	r2, [r3, #0]
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	09db      	lsrs	r3, r3, #7
 80074a2:	61bb      	str	r3, [r7, #24]
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80074a8:	d8f0      	bhi.n	800748c <SEGGER_SYSVIEW_Warn+0x6c>
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	1c5a      	adds	r2, r3, #1
 80074ae:	61fa      	str	r2, [r7, #28]
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	b2d2      	uxtb	r2, r2
 80074b4:	701a      	strb	r2, [r3, #0]
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80074ba:	221a      	movs	r2, #26
 80074bc:	68f9      	ldr	r1, [r7, #12]
 80074be:	6938      	ldr	r0, [r7, #16]
 80074c0:	f7fe fb54 	bl	8005b6c <_SendPacket>
  RECORD_END();
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f383 8811 	msr	BASEPRI, r3
}
 80074ca:	bf00      	nop
 80074cc:	3728      	adds	r7, #40	@ 0x28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	2000c418 	.word	0x2000c418

080074d8 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80074dc:	4b13      	ldr	r3, [pc, #76]	@ (800752c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80074de:	7e1b      	ldrb	r3, [r3, #24]
 80074e0:	4619      	mov	r1, r3
 80074e2:	4a13      	ldr	r2, [pc, #76]	@ (8007530 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80074e4:	460b      	mov	r3, r1
 80074e6:	005b      	lsls	r3, r3, #1
 80074e8:	440b      	add	r3, r1
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	4413      	add	r3, r2
 80074ee:	336c      	adds	r3, #108	@ 0x6c
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	4b0e      	ldr	r3, [pc, #56]	@ (800752c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80074f4:	7e1b      	ldrb	r3, [r3, #24]
 80074f6:	4618      	mov	r0, r3
 80074f8:	490d      	ldr	r1, [pc, #52]	@ (8007530 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80074fa:	4603      	mov	r3, r0
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	4403      	add	r3, r0
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	440b      	add	r3, r1
 8007504:	3370      	adds	r3, #112	@ 0x70
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	429a      	cmp	r2, r3
 800750a:	d00b      	beq.n	8007524 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800750c:	4b07      	ldr	r3, [pc, #28]	@ (800752c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800750e:	789b      	ldrb	r3, [r3, #2]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d107      	bne.n	8007524 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007514:	4b05      	ldr	r3, [pc, #20]	@ (800752c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007516:	2201      	movs	r2, #1
 8007518:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800751a:	f7fe fa47 	bl	80059ac <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800751e:	4b03      	ldr	r3, [pc, #12]	@ (800752c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007520:	2200      	movs	r2, #0
 8007522:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007524:	4b01      	ldr	r3, [pc, #4]	@ (800752c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007526:	781b      	ldrb	r3, [r3, #0]
}
 8007528:	4618      	mov	r0, r3
 800752a:	bd80      	pop	{r7, pc}
 800752c:	2000c3e8 	.word	0x2000c3e8
 8007530:	2000bb28 	.word	0x2000bb28

08007534 <sniprintf>:
 8007534:	b40c      	push	{r2, r3}
 8007536:	b530      	push	{r4, r5, lr}
 8007538:	4b17      	ldr	r3, [pc, #92]	@ (8007598 <sniprintf+0x64>)
 800753a:	1e0c      	subs	r4, r1, #0
 800753c:	681d      	ldr	r5, [r3, #0]
 800753e:	b09d      	sub	sp, #116	@ 0x74
 8007540:	da08      	bge.n	8007554 <sniprintf+0x20>
 8007542:	238b      	movs	r3, #139	@ 0x8b
 8007544:	602b      	str	r3, [r5, #0]
 8007546:	f04f 30ff 	mov.w	r0, #4294967295
 800754a:	b01d      	add	sp, #116	@ 0x74
 800754c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007550:	b002      	add	sp, #8
 8007552:	4770      	bx	lr
 8007554:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007558:	f8ad 3014 	strh.w	r3, [sp, #20]
 800755c:	bf14      	ite	ne
 800755e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007562:	4623      	moveq	r3, r4
 8007564:	9304      	str	r3, [sp, #16]
 8007566:	9307      	str	r3, [sp, #28]
 8007568:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800756c:	9002      	str	r0, [sp, #8]
 800756e:	9006      	str	r0, [sp, #24]
 8007570:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007574:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007576:	ab21      	add	r3, sp, #132	@ 0x84
 8007578:	a902      	add	r1, sp, #8
 800757a:	4628      	mov	r0, r5
 800757c:	9301      	str	r3, [sp, #4]
 800757e:	f000 f9ad 	bl	80078dc <_svfiprintf_r>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	bfbc      	itt	lt
 8007586:	238b      	movlt	r3, #139	@ 0x8b
 8007588:	602b      	strlt	r3, [r5, #0]
 800758a:	2c00      	cmp	r4, #0
 800758c:	d0dd      	beq.n	800754a <sniprintf+0x16>
 800758e:	9b02      	ldr	r3, [sp, #8]
 8007590:	2200      	movs	r2, #0
 8007592:	701a      	strb	r2, [r3, #0]
 8007594:	e7d9      	b.n	800754a <sniprintf+0x16>
 8007596:	bf00      	nop
 8007598:	2000001c 	.word	0x2000001c

0800759c <memcmp>:
 800759c:	b510      	push	{r4, lr}
 800759e:	3901      	subs	r1, #1
 80075a0:	4402      	add	r2, r0
 80075a2:	4290      	cmp	r0, r2
 80075a4:	d101      	bne.n	80075aa <memcmp+0xe>
 80075a6:	2000      	movs	r0, #0
 80075a8:	e005      	b.n	80075b6 <memcmp+0x1a>
 80075aa:	7803      	ldrb	r3, [r0, #0]
 80075ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80075b0:	42a3      	cmp	r3, r4
 80075b2:	d001      	beq.n	80075b8 <memcmp+0x1c>
 80075b4:	1b18      	subs	r0, r3, r4
 80075b6:	bd10      	pop	{r4, pc}
 80075b8:	3001      	adds	r0, #1
 80075ba:	e7f2      	b.n	80075a2 <memcmp+0x6>

080075bc <memset>:
 80075bc:	4402      	add	r2, r0
 80075be:	4603      	mov	r3, r0
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d100      	bne.n	80075c6 <memset+0xa>
 80075c4:	4770      	bx	lr
 80075c6:	f803 1b01 	strb.w	r1, [r3], #1
 80075ca:	e7f9      	b.n	80075c0 <memset+0x4>

080075cc <__libc_init_array>:
 80075cc:	b570      	push	{r4, r5, r6, lr}
 80075ce:	4d0d      	ldr	r5, [pc, #52]	@ (8007604 <__libc_init_array+0x38>)
 80075d0:	4c0d      	ldr	r4, [pc, #52]	@ (8007608 <__libc_init_array+0x3c>)
 80075d2:	1b64      	subs	r4, r4, r5
 80075d4:	10a4      	asrs	r4, r4, #2
 80075d6:	2600      	movs	r6, #0
 80075d8:	42a6      	cmp	r6, r4
 80075da:	d109      	bne.n	80075f0 <__libc_init_array+0x24>
 80075dc:	4d0b      	ldr	r5, [pc, #44]	@ (800760c <__libc_init_array+0x40>)
 80075de:	4c0c      	ldr	r4, [pc, #48]	@ (8007610 <__libc_init_array+0x44>)
 80075e0:	f000 fc74 	bl	8007ecc <_init>
 80075e4:	1b64      	subs	r4, r4, r5
 80075e6:	10a4      	asrs	r4, r4, #2
 80075e8:	2600      	movs	r6, #0
 80075ea:	42a6      	cmp	r6, r4
 80075ec:	d105      	bne.n	80075fa <__libc_init_array+0x2e>
 80075ee:	bd70      	pop	{r4, r5, r6, pc}
 80075f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075f4:	4798      	blx	r3
 80075f6:	3601      	adds	r6, #1
 80075f8:	e7ee      	b.n	80075d8 <__libc_init_array+0xc>
 80075fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80075fe:	4798      	blx	r3
 8007600:	3601      	adds	r6, #1
 8007602:	e7f2      	b.n	80075ea <__libc_init_array+0x1e>
 8007604:	080080a0 	.word	0x080080a0
 8007608:	080080a0 	.word	0x080080a0
 800760c:	080080a0 	.word	0x080080a0
 8007610:	080080a4 	.word	0x080080a4

08007614 <__retarget_lock_acquire_recursive>:
 8007614:	4770      	bx	lr

08007616 <__retarget_lock_release_recursive>:
 8007616:	4770      	bx	lr

08007618 <memcpy>:
 8007618:	440a      	add	r2, r1
 800761a:	4291      	cmp	r1, r2
 800761c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007620:	d100      	bne.n	8007624 <memcpy+0xc>
 8007622:	4770      	bx	lr
 8007624:	b510      	push	{r4, lr}
 8007626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800762a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800762e:	4291      	cmp	r1, r2
 8007630:	d1f9      	bne.n	8007626 <memcpy+0xe>
 8007632:	bd10      	pop	{r4, pc}

08007634 <_free_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	4605      	mov	r5, r0
 8007638:	2900      	cmp	r1, #0
 800763a:	d041      	beq.n	80076c0 <_free_r+0x8c>
 800763c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007640:	1f0c      	subs	r4, r1, #4
 8007642:	2b00      	cmp	r3, #0
 8007644:	bfb8      	it	lt
 8007646:	18e4      	addlt	r4, r4, r3
 8007648:	f000 f8e0 	bl	800780c <__malloc_lock>
 800764c:	4a1d      	ldr	r2, [pc, #116]	@ (80076c4 <_free_r+0x90>)
 800764e:	6813      	ldr	r3, [r2, #0]
 8007650:	b933      	cbnz	r3, 8007660 <_free_r+0x2c>
 8007652:	6063      	str	r3, [r4, #4]
 8007654:	6014      	str	r4, [r2, #0]
 8007656:	4628      	mov	r0, r5
 8007658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800765c:	f000 b8dc 	b.w	8007818 <__malloc_unlock>
 8007660:	42a3      	cmp	r3, r4
 8007662:	d908      	bls.n	8007676 <_free_r+0x42>
 8007664:	6820      	ldr	r0, [r4, #0]
 8007666:	1821      	adds	r1, r4, r0
 8007668:	428b      	cmp	r3, r1
 800766a:	bf01      	itttt	eq
 800766c:	6819      	ldreq	r1, [r3, #0]
 800766e:	685b      	ldreq	r3, [r3, #4]
 8007670:	1809      	addeq	r1, r1, r0
 8007672:	6021      	streq	r1, [r4, #0]
 8007674:	e7ed      	b.n	8007652 <_free_r+0x1e>
 8007676:	461a      	mov	r2, r3
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	b10b      	cbz	r3, 8007680 <_free_r+0x4c>
 800767c:	42a3      	cmp	r3, r4
 800767e:	d9fa      	bls.n	8007676 <_free_r+0x42>
 8007680:	6811      	ldr	r1, [r2, #0]
 8007682:	1850      	adds	r0, r2, r1
 8007684:	42a0      	cmp	r0, r4
 8007686:	d10b      	bne.n	80076a0 <_free_r+0x6c>
 8007688:	6820      	ldr	r0, [r4, #0]
 800768a:	4401      	add	r1, r0
 800768c:	1850      	adds	r0, r2, r1
 800768e:	4283      	cmp	r3, r0
 8007690:	6011      	str	r1, [r2, #0]
 8007692:	d1e0      	bne.n	8007656 <_free_r+0x22>
 8007694:	6818      	ldr	r0, [r3, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	6053      	str	r3, [r2, #4]
 800769a:	4408      	add	r0, r1
 800769c:	6010      	str	r0, [r2, #0]
 800769e:	e7da      	b.n	8007656 <_free_r+0x22>
 80076a0:	d902      	bls.n	80076a8 <_free_r+0x74>
 80076a2:	230c      	movs	r3, #12
 80076a4:	602b      	str	r3, [r5, #0]
 80076a6:	e7d6      	b.n	8007656 <_free_r+0x22>
 80076a8:	6820      	ldr	r0, [r4, #0]
 80076aa:	1821      	adds	r1, r4, r0
 80076ac:	428b      	cmp	r3, r1
 80076ae:	bf04      	itt	eq
 80076b0:	6819      	ldreq	r1, [r3, #0]
 80076b2:	685b      	ldreq	r3, [r3, #4]
 80076b4:	6063      	str	r3, [r4, #4]
 80076b6:	bf04      	itt	eq
 80076b8:	1809      	addeq	r1, r1, r0
 80076ba:	6021      	streq	r1, [r4, #0]
 80076bc:	6054      	str	r4, [r2, #4]
 80076be:	e7ca      	b.n	8007656 <_free_r+0x22>
 80076c0:	bd38      	pop	{r3, r4, r5, pc}
 80076c2:	bf00      	nop
 80076c4:	2000c640 	.word	0x2000c640

080076c8 <sbrk_aligned>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	4e0f      	ldr	r6, [pc, #60]	@ (8007708 <sbrk_aligned+0x40>)
 80076cc:	460c      	mov	r4, r1
 80076ce:	6831      	ldr	r1, [r6, #0]
 80076d0:	4605      	mov	r5, r0
 80076d2:	b911      	cbnz	r1, 80076da <sbrk_aligned+0x12>
 80076d4:	f000 fba6 	bl	8007e24 <_sbrk_r>
 80076d8:	6030      	str	r0, [r6, #0]
 80076da:	4621      	mov	r1, r4
 80076dc:	4628      	mov	r0, r5
 80076de:	f000 fba1 	bl	8007e24 <_sbrk_r>
 80076e2:	1c43      	adds	r3, r0, #1
 80076e4:	d103      	bne.n	80076ee <sbrk_aligned+0x26>
 80076e6:	f04f 34ff 	mov.w	r4, #4294967295
 80076ea:	4620      	mov	r0, r4
 80076ec:	bd70      	pop	{r4, r5, r6, pc}
 80076ee:	1cc4      	adds	r4, r0, #3
 80076f0:	f024 0403 	bic.w	r4, r4, #3
 80076f4:	42a0      	cmp	r0, r4
 80076f6:	d0f8      	beq.n	80076ea <sbrk_aligned+0x22>
 80076f8:	1a21      	subs	r1, r4, r0
 80076fa:	4628      	mov	r0, r5
 80076fc:	f000 fb92 	bl	8007e24 <_sbrk_r>
 8007700:	3001      	adds	r0, #1
 8007702:	d1f2      	bne.n	80076ea <sbrk_aligned+0x22>
 8007704:	e7ef      	b.n	80076e6 <sbrk_aligned+0x1e>
 8007706:	bf00      	nop
 8007708:	2000c63c 	.word	0x2000c63c

0800770c <_malloc_r>:
 800770c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007710:	1ccd      	adds	r5, r1, #3
 8007712:	f025 0503 	bic.w	r5, r5, #3
 8007716:	3508      	adds	r5, #8
 8007718:	2d0c      	cmp	r5, #12
 800771a:	bf38      	it	cc
 800771c:	250c      	movcc	r5, #12
 800771e:	2d00      	cmp	r5, #0
 8007720:	4606      	mov	r6, r0
 8007722:	db01      	blt.n	8007728 <_malloc_r+0x1c>
 8007724:	42a9      	cmp	r1, r5
 8007726:	d904      	bls.n	8007732 <_malloc_r+0x26>
 8007728:	230c      	movs	r3, #12
 800772a:	6033      	str	r3, [r6, #0]
 800772c:	2000      	movs	r0, #0
 800772e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007732:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007808 <_malloc_r+0xfc>
 8007736:	f000 f869 	bl	800780c <__malloc_lock>
 800773a:	f8d8 3000 	ldr.w	r3, [r8]
 800773e:	461c      	mov	r4, r3
 8007740:	bb44      	cbnz	r4, 8007794 <_malloc_r+0x88>
 8007742:	4629      	mov	r1, r5
 8007744:	4630      	mov	r0, r6
 8007746:	f7ff ffbf 	bl	80076c8 <sbrk_aligned>
 800774a:	1c43      	adds	r3, r0, #1
 800774c:	4604      	mov	r4, r0
 800774e:	d158      	bne.n	8007802 <_malloc_r+0xf6>
 8007750:	f8d8 4000 	ldr.w	r4, [r8]
 8007754:	4627      	mov	r7, r4
 8007756:	2f00      	cmp	r7, #0
 8007758:	d143      	bne.n	80077e2 <_malloc_r+0xd6>
 800775a:	2c00      	cmp	r4, #0
 800775c:	d04b      	beq.n	80077f6 <_malloc_r+0xea>
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	4639      	mov	r1, r7
 8007762:	4630      	mov	r0, r6
 8007764:	eb04 0903 	add.w	r9, r4, r3
 8007768:	f000 fb5c 	bl	8007e24 <_sbrk_r>
 800776c:	4581      	cmp	r9, r0
 800776e:	d142      	bne.n	80077f6 <_malloc_r+0xea>
 8007770:	6821      	ldr	r1, [r4, #0]
 8007772:	1a6d      	subs	r5, r5, r1
 8007774:	4629      	mov	r1, r5
 8007776:	4630      	mov	r0, r6
 8007778:	f7ff ffa6 	bl	80076c8 <sbrk_aligned>
 800777c:	3001      	adds	r0, #1
 800777e:	d03a      	beq.n	80077f6 <_malloc_r+0xea>
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	442b      	add	r3, r5
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	f8d8 3000 	ldr.w	r3, [r8]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	bb62      	cbnz	r2, 80077e8 <_malloc_r+0xdc>
 800778e:	f8c8 7000 	str.w	r7, [r8]
 8007792:	e00f      	b.n	80077b4 <_malloc_r+0xa8>
 8007794:	6822      	ldr	r2, [r4, #0]
 8007796:	1b52      	subs	r2, r2, r5
 8007798:	d420      	bmi.n	80077dc <_malloc_r+0xd0>
 800779a:	2a0b      	cmp	r2, #11
 800779c:	d917      	bls.n	80077ce <_malloc_r+0xc2>
 800779e:	1961      	adds	r1, r4, r5
 80077a0:	42a3      	cmp	r3, r4
 80077a2:	6025      	str	r5, [r4, #0]
 80077a4:	bf18      	it	ne
 80077a6:	6059      	strne	r1, [r3, #4]
 80077a8:	6863      	ldr	r3, [r4, #4]
 80077aa:	bf08      	it	eq
 80077ac:	f8c8 1000 	streq.w	r1, [r8]
 80077b0:	5162      	str	r2, [r4, r5]
 80077b2:	604b      	str	r3, [r1, #4]
 80077b4:	4630      	mov	r0, r6
 80077b6:	f000 f82f 	bl	8007818 <__malloc_unlock>
 80077ba:	f104 000b 	add.w	r0, r4, #11
 80077be:	1d23      	adds	r3, r4, #4
 80077c0:	f020 0007 	bic.w	r0, r0, #7
 80077c4:	1ac2      	subs	r2, r0, r3
 80077c6:	bf1c      	itt	ne
 80077c8:	1a1b      	subne	r3, r3, r0
 80077ca:	50a3      	strne	r3, [r4, r2]
 80077cc:	e7af      	b.n	800772e <_malloc_r+0x22>
 80077ce:	6862      	ldr	r2, [r4, #4]
 80077d0:	42a3      	cmp	r3, r4
 80077d2:	bf0c      	ite	eq
 80077d4:	f8c8 2000 	streq.w	r2, [r8]
 80077d8:	605a      	strne	r2, [r3, #4]
 80077da:	e7eb      	b.n	80077b4 <_malloc_r+0xa8>
 80077dc:	4623      	mov	r3, r4
 80077de:	6864      	ldr	r4, [r4, #4]
 80077e0:	e7ae      	b.n	8007740 <_malloc_r+0x34>
 80077e2:	463c      	mov	r4, r7
 80077e4:	687f      	ldr	r7, [r7, #4]
 80077e6:	e7b6      	b.n	8007756 <_malloc_r+0x4a>
 80077e8:	461a      	mov	r2, r3
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	42a3      	cmp	r3, r4
 80077ee:	d1fb      	bne.n	80077e8 <_malloc_r+0xdc>
 80077f0:	2300      	movs	r3, #0
 80077f2:	6053      	str	r3, [r2, #4]
 80077f4:	e7de      	b.n	80077b4 <_malloc_r+0xa8>
 80077f6:	230c      	movs	r3, #12
 80077f8:	6033      	str	r3, [r6, #0]
 80077fa:	4630      	mov	r0, r6
 80077fc:	f000 f80c 	bl	8007818 <__malloc_unlock>
 8007800:	e794      	b.n	800772c <_malloc_r+0x20>
 8007802:	6005      	str	r5, [r0, #0]
 8007804:	e7d6      	b.n	80077b4 <_malloc_r+0xa8>
 8007806:	bf00      	nop
 8007808:	2000c640 	.word	0x2000c640

0800780c <__malloc_lock>:
 800780c:	4801      	ldr	r0, [pc, #4]	@ (8007814 <__malloc_lock+0x8>)
 800780e:	f7ff bf01 	b.w	8007614 <__retarget_lock_acquire_recursive>
 8007812:	bf00      	nop
 8007814:	2000c638 	.word	0x2000c638

08007818 <__malloc_unlock>:
 8007818:	4801      	ldr	r0, [pc, #4]	@ (8007820 <__malloc_unlock+0x8>)
 800781a:	f7ff befc 	b.w	8007616 <__retarget_lock_release_recursive>
 800781e:	bf00      	nop
 8007820:	2000c638 	.word	0x2000c638

08007824 <__ssputs_r>:
 8007824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007828:	688e      	ldr	r6, [r1, #8]
 800782a:	461f      	mov	r7, r3
 800782c:	42be      	cmp	r6, r7
 800782e:	680b      	ldr	r3, [r1, #0]
 8007830:	4682      	mov	sl, r0
 8007832:	460c      	mov	r4, r1
 8007834:	4690      	mov	r8, r2
 8007836:	d82d      	bhi.n	8007894 <__ssputs_r+0x70>
 8007838:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800783c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007840:	d026      	beq.n	8007890 <__ssputs_r+0x6c>
 8007842:	6965      	ldr	r5, [r4, #20]
 8007844:	6909      	ldr	r1, [r1, #16]
 8007846:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800784a:	eba3 0901 	sub.w	r9, r3, r1
 800784e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007852:	1c7b      	adds	r3, r7, #1
 8007854:	444b      	add	r3, r9
 8007856:	106d      	asrs	r5, r5, #1
 8007858:	429d      	cmp	r5, r3
 800785a:	bf38      	it	cc
 800785c:	461d      	movcc	r5, r3
 800785e:	0553      	lsls	r3, r2, #21
 8007860:	d527      	bpl.n	80078b2 <__ssputs_r+0x8e>
 8007862:	4629      	mov	r1, r5
 8007864:	f7ff ff52 	bl	800770c <_malloc_r>
 8007868:	4606      	mov	r6, r0
 800786a:	b360      	cbz	r0, 80078c6 <__ssputs_r+0xa2>
 800786c:	6921      	ldr	r1, [r4, #16]
 800786e:	464a      	mov	r2, r9
 8007870:	f7ff fed2 	bl	8007618 <memcpy>
 8007874:	89a3      	ldrh	r3, [r4, #12]
 8007876:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800787a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800787e:	81a3      	strh	r3, [r4, #12]
 8007880:	6126      	str	r6, [r4, #16]
 8007882:	6165      	str	r5, [r4, #20]
 8007884:	444e      	add	r6, r9
 8007886:	eba5 0509 	sub.w	r5, r5, r9
 800788a:	6026      	str	r6, [r4, #0]
 800788c:	60a5      	str	r5, [r4, #8]
 800788e:	463e      	mov	r6, r7
 8007890:	42be      	cmp	r6, r7
 8007892:	d900      	bls.n	8007896 <__ssputs_r+0x72>
 8007894:	463e      	mov	r6, r7
 8007896:	6820      	ldr	r0, [r4, #0]
 8007898:	4632      	mov	r2, r6
 800789a:	4641      	mov	r1, r8
 800789c:	f000 faa8 	bl	8007df0 <memmove>
 80078a0:	68a3      	ldr	r3, [r4, #8]
 80078a2:	1b9b      	subs	r3, r3, r6
 80078a4:	60a3      	str	r3, [r4, #8]
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	4433      	add	r3, r6
 80078aa:	6023      	str	r3, [r4, #0]
 80078ac:	2000      	movs	r0, #0
 80078ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b2:	462a      	mov	r2, r5
 80078b4:	f000 fac6 	bl	8007e44 <_realloc_r>
 80078b8:	4606      	mov	r6, r0
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d1e0      	bne.n	8007880 <__ssputs_r+0x5c>
 80078be:	6921      	ldr	r1, [r4, #16]
 80078c0:	4650      	mov	r0, sl
 80078c2:	f7ff feb7 	bl	8007634 <_free_r>
 80078c6:	230c      	movs	r3, #12
 80078c8:	f8ca 3000 	str.w	r3, [sl]
 80078cc:	89a3      	ldrh	r3, [r4, #12]
 80078ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078d2:	81a3      	strh	r3, [r4, #12]
 80078d4:	f04f 30ff 	mov.w	r0, #4294967295
 80078d8:	e7e9      	b.n	80078ae <__ssputs_r+0x8a>
	...

080078dc <_svfiprintf_r>:
 80078dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e0:	4698      	mov	r8, r3
 80078e2:	898b      	ldrh	r3, [r1, #12]
 80078e4:	061b      	lsls	r3, r3, #24
 80078e6:	b09d      	sub	sp, #116	@ 0x74
 80078e8:	4607      	mov	r7, r0
 80078ea:	460d      	mov	r5, r1
 80078ec:	4614      	mov	r4, r2
 80078ee:	d510      	bpl.n	8007912 <_svfiprintf_r+0x36>
 80078f0:	690b      	ldr	r3, [r1, #16]
 80078f2:	b973      	cbnz	r3, 8007912 <_svfiprintf_r+0x36>
 80078f4:	2140      	movs	r1, #64	@ 0x40
 80078f6:	f7ff ff09 	bl	800770c <_malloc_r>
 80078fa:	6028      	str	r0, [r5, #0]
 80078fc:	6128      	str	r0, [r5, #16]
 80078fe:	b930      	cbnz	r0, 800790e <_svfiprintf_r+0x32>
 8007900:	230c      	movs	r3, #12
 8007902:	603b      	str	r3, [r7, #0]
 8007904:	f04f 30ff 	mov.w	r0, #4294967295
 8007908:	b01d      	add	sp, #116	@ 0x74
 800790a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790e:	2340      	movs	r3, #64	@ 0x40
 8007910:	616b      	str	r3, [r5, #20]
 8007912:	2300      	movs	r3, #0
 8007914:	9309      	str	r3, [sp, #36]	@ 0x24
 8007916:	2320      	movs	r3, #32
 8007918:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800791c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007920:	2330      	movs	r3, #48	@ 0x30
 8007922:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007ac0 <_svfiprintf_r+0x1e4>
 8007926:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800792a:	f04f 0901 	mov.w	r9, #1
 800792e:	4623      	mov	r3, r4
 8007930:	469a      	mov	sl, r3
 8007932:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007936:	b10a      	cbz	r2, 800793c <_svfiprintf_r+0x60>
 8007938:	2a25      	cmp	r2, #37	@ 0x25
 800793a:	d1f9      	bne.n	8007930 <_svfiprintf_r+0x54>
 800793c:	ebba 0b04 	subs.w	fp, sl, r4
 8007940:	d00b      	beq.n	800795a <_svfiprintf_r+0x7e>
 8007942:	465b      	mov	r3, fp
 8007944:	4622      	mov	r2, r4
 8007946:	4629      	mov	r1, r5
 8007948:	4638      	mov	r0, r7
 800794a:	f7ff ff6b 	bl	8007824 <__ssputs_r>
 800794e:	3001      	adds	r0, #1
 8007950:	f000 80a7 	beq.w	8007aa2 <_svfiprintf_r+0x1c6>
 8007954:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007956:	445a      	add	r2, fp
 8007958:	9209      	str	r2, [sp, #36]	@ 0x24
 800795a:	f89a 3000 	ldrb.w	r3, [sl]
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 809f 	beq.w	8007aa2 <_svfiprintf_r+0x1c6>
 8007964:	2300      	movs	r3, #0
 8007966:	f04f 32ff 	mov.w	r2, #4294967295
 800796a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800796e:	f10a 0a01 	add.w	sl, sl, #1
 8007972:	9304      	str	r3, [sp, #16]
 8007974:	9307      	str	r3, [sp, #28]
 8007976:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800797a:	931a      	str	r3, [sp, #104]	@ 0x68
 800797c:	4654      	mov	r4, sl
 800797e:	2205      	movs	r2, #5
 8007980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007984:	484e      	ldr	r0, [pc, #312]	@ (8007ac0 <_svfiprintf_r+0x1e4>)
 8007986:	f7f8 fcab 	bl	80002e0 <memchr>
 800798a:	9a04      	ldr	r2, [sp, #16]
 800798c:	b9d8      	cbnz	r0, 80079c6 <_svfiprintf_r+0xea>
 800798e:	06d0      	lsls	r0, r2, #27
 8007990:	bf44      	itt	mi
 8007992:	2320      	movmi	r3, #32
 8007994:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007998:	0711      	lsls	r1, r2, #28
 800799a:	bf44      	itt	mi
 800799c:	232b      	movmi	r3, #43	@ 0x2b
 800799e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079a2:	f89a 3000 	ldrb.w	r3, [sl]
 80079a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80079a8:	d015      	beq.n	80079d6 <_svfiprintf_r+0xfa>
 80079aa:	9a07      	ldr	r2, [sp, #28]
 80079ac:	4654      	mov	r4, sl
 80079ae:	2000      	movs	r0, #0
 80079b0:	f04f 0c0a 	mov.w	ip, #10
 80079b4:	4621      	mov	r1, r4
 80079b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079ba:	3b30      	subs	r3, #48	@ 0x30
 80079bc:	2b09      	cmp	r3, #9
 80079be:	d94b      	bls.n	8007a58 <_svfiprintf_r+0x17c>
 80079c0:	b1b0      	cbz	r0, 80079f0 <_svfiprintf_r+0x114>
 80079c2:	9207      	str	r2, [sp, #28]
 80079c4:	e014      	b.n	80079f0 <_svfiprintf_r+0x114>
 80079c6:	eba0 0308 	sub.w	r3, r0, r8
 80079ca:	fa09 f303 	lsl.w	r3, r9, r3
 80079ce:	4313      	orrs	r3, r2
 80079d0:	9304      	str	r3, [sp, #16]
 80079d2:	46a2      	mov	sl, r4
 80079d4:	e7d2      	b.n	800797c <_svfiprintf_r+0xa0>
 80079d6:	9b03      	ldr	r3, [sp, #12]
 80079d8:	1d19      	adds	r1, r3, #4
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	9103      	str	r1, [sp, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	bfbb      	ittet	lt
 80079e2:	425b      	neglt	r3, r3
 80079e4:	f042 0202 	orrlt.w	r2, r2, #2
 80079e8:	9307      	strge	r3, [sp, #28]
 80079ea:	9307      	strlt	r3, [sp, #28]
 80079ec:	bfb8      	it	lt
 80079ee:	9204      	strlt	r2, [sp, #16]
 80079f0:	7823      	ldrb	r3, [r4, #0]
 80079f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80079f4:	d10a      	bne.n	8007a0c <_svfiprintf_r+0x130>
 80079f6:	7863      	ldrb	r3, [r4, #1]
 80079f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80079fa:	d132      	bne.n	8007a62 <_svfiprintf_r+0x186>
 80079fc:	9b03      	ldr	r3, [sp, #12]
 80079fe:	1d1a      	adds	r2, r3, #4
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	9203      	str	r2, [sp, #12]
 8007a04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a08:	3402      	adds	r4, #2
 8007a0a:	9305      	str	r3, [sp, #20]
 8007a0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007ad0 <_svfiprintf_r+0x1f4>
 8007a10:	7821      	ldrb	r1, [r4, #0]
 8007a12:	2203      	movs	r2, #3
 8007a14:	4650      	mov	r0, sl
 8007a16:	f7f8 fc63 	bl	80002e0 <memchr>
 8007a1a:	b138      	cbz	r0, 8007a2c <_svfiprintf_r+0x150>
 8007a1c:	9b04      	ldr	r3, [sp, #16]
 8007a1e:	eba0 000a 	sub.w	r0, r0, sl
 8007a22:	2240      	movs	r2, #64	@ 0x40
 8007a24:	4082      	lsls	r2, r0
 8007a26:	4313      	orrs	r3, r2
 8007a28:	3401      	adds	r4, #1
 8007a2a:	9304      	str	r3, [sp, #16]
 8007a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a30:	4824      	ldr	r0, [pc, #144]	@ (8007ac4 <_svfiprintf_r+0x1e8>)
 8007a32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a36:	2206      	movs	r2, #6
 8007a38:	f7f8 fc52 	bl	80002e0 <memchr>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d036      	beq.n	8007aae <_svfiprintf_r+0x1d2>
 8007a40:	4b21      	ldr	r3, [pc, #132]	@ (8007ac8 <_svfiprintf_r+0x1ec>)
 8007a42:	bb1b      	cbnz	r3, 8007a8c <_svfiprintf_r+0x1b0>
 8007a44:	9b03      	ldr	r3, [sp, #12]
 8007a46:	3307      	adds	r3, #7
 8007a48:	f023 0307 	bic.w	r3, r3, #7
 8007a4c:	3308      	adds	r3, #8
 8007a4e:	9303      	str	r3, [sp, #12]
 8007a50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a52:	4433      	add	r3, r6
 8007a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a56:	e76a      	b.n	800792e <_svfiprintf_r+0x52>
 8007a58:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a5c:	460c      	mov	r4, r1
 8007a5e:	2001      	movs	r0, #1
 8007a60:	e7a8      	b.n	80079b4 <_svfiprintf_r+0xd8>
 8007a62:	2300      	movs	r3, #0
 8007a64:	3401      	adds	r4, #1
 8007a66:	9305      	str	r3, [sp, #20]
 8007a68:	4619      	mov	r1, r3
 8007a6a:	f04f 0c0a 	mov.w	ip, #10
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a74:	3a30      	subs	r2, #48	@ 0x30
 8007a76:	2a09      	cmp	r2, #9
 8007a78:	d903      	bls.n	8007a82 <_svfiprintf_r+0x1a6>
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0c6      	beq.n	8007a0c <_svfiprintf_r+0x130>
 8007a7e:	9105      	str	r1, [sp, #20]
 8007a80:	e7c4      	b.n	8007a0c <_svfiprintf_r+0x130>
 8007a82:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a86:	4604      	mov	r4, r0
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e7f0      	b.n	8007a6e <_svfiprintf_r+0x192>
 8007a8c:	ab03      	add	r3, sp, #12
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	462a      	mov	r2, r5
 8007a92:	4b0e      	ldr	r3, [pc, #56]	@ (8007acc <_svfiprintf_r+0x1f0>)
 8007a94:	a904      	add	r1, sp, #16
 8007a96:	4638      	mov	r0, r7
 8007a98:	f3af 8000 	nop.w
 8007a9c:	1c42      	adds	r2, r0, #1
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	d1d6      	bne.n	8007a50 <_svfiprintf_r+0x174>
 8007aa2:	89ab      	ldrh	r3, [r5, #12]
 8007aa4:	065b      	lsls	r3, r3, #25
 8007aa6:	f53f af2d 	bmi.w	8007904 <_svfiprintf_r+0x28>
 8007aaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007aac:	e72c      	b.n	8007908 <_svfiprintf_r+0x2c>
 8007aae:	ab03      	add	r3, sp, #12
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	462a      	mov	r2, r5
 8007ab4:	4b05      	ldr	r3, [pc, #20]	@ (8007acc <_svfiprintf_r+0x1f0>)
 8007ab6:	a904      	add	r1, sp, #16
 8007ab8:	4638      	mov	r0, r7
 8007aba:	f000 f879 	bl	8007bb0 <_printf_i>
 8007abe:	e7ed      	b.n	8007a9c <_svfiprintf_r+0x1c0>
 8007ac0:	08008064 	.word	0x08008064
 8007ac4:	0800806e 	.word	0x0800806e
 8007ac8:	00000000 	.word	0x00000000
 8007acc:	08007825 	.word	0x08007825
 8007ad0:	0800806a 	.word	0x0800806a

08007ad4 <_printf_common>:
 8007ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ad8:	4616      	mov	r6, r2
 8007ada:	4698      	mov	r8, r3
 8007adc:	688a      	ldr	r2, [r1, #8]
 8007ade:	690b      	ldr	r3, [r1, #16]
 8007ae0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	bfb8      	it	lt
 8007ae8:	4613      	movlt	r3, r2
 8007aea:	6033      	str	r3, [r6, #0]
 8007aec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007af0:	4607      	mov	r7, r0
 8007af2:	460c      	mov	r4, r1
 8007af4:	b10a      	cbz	r2, 8007afa <_printf_common+0x26>
 8007af6:	3301      	adds	r3, #1
 8007af8:	6033      	str	r3, [r6, #0]
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	0699      	lsls	r1, r3, #26
 8007afe:	bf42      	ittt	mi
 8007b00:	6833      	ldrmi	r3, [r6, #0]
 8007b02:	3302      	addmi	r3, #2
 8007b04:	6033      	strmi	r3, [r6, #0]
 8007b06:	6825      	ldr	r5, [r4, #0]
 8007b08:	f015 0506 	ands.w	r5, r5, #6
 8007b0c:	d106      	bne.n	8007b1c <_printf_common+0x48>
 8007b0e:	f104 0a19 	add.w	sl, r4, #25
 8007b12:	68e3      	ldr	r3, [r4, #12]
 8007b14:	6832      	ldr	r2, [r6, #0]
 8007b16:	1a9b      	subs	r3, r3, r2
 8007b18:	42ab      	cmp	r3, r5
 8007b1a:	dc26      	bgt.n	8007b6a <_printf_common+0x96>
 8007b1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b20:	6822      	ldr	r2, [r4, #0]
 8007b22:	3b00      	subs	r3, #0
 8007b24:	bf18      	it	ne
 8007b26:	2301      	movne	r3, #1
 8007b28:	0692      	lsls	r2, r2, #26
 8007b2a:	d42b      	bmi.n	8007b84 <_printf_common+0xb0>
 8007b2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b30:	4641      	mov	r1, r8
 8007b32:	4638      	mov	r0, r7
 8007b34:	47c8      	blx	r9
 8007b36:	3001      	adds	r0, #1
 8007b38:	d01e      	beq.n	8007b78 <_printf_common+0xa4>
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	6922      	ldr	r2, [r4, #16]
 8007b3e:	f003 0306 	and.w	r3, r3, #6
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	bf02      	ittt	eq
 8007b46:	68e5      	ldreq	r5, [r4, #12]
 8007b48:	6833      	ldreq	r3, [r6, #0]
 8007b4a:	1aed      	subeq	r5, r5, r3
 8007b4c:	68a3      	ldr	r3, [r4, #8]
 8007b4e:	bf0c      	ite	eq
 8007b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b54:	2500      	movne	r5, #0
 8007b56:	4293      	cmp	r3, r2
 8007b58:	bfc4      	itt	gt
 8007b5a:	1a9b      	subgt	r3, r3, r2
 8007b5c:	18ed      	addgt	r5, r5, r3
 8007b5e:	2600      	movs	r6, #0
 8007b60:	341a      	adds	r4, #26
 8007b62:	42b5      	cmp	r5, r6
 8007b64:	d11a      	bne.n	8007b9c <_printf_common+0xc8>
 8007b66:	2000      	movs	r0, #0
 8007b68:	e008      	b.n	8007b7c <_printf_common+0xa8>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	4652      	mov	r2, sl
 8007b6e:	4641      	mov	r1, r8
 8007b70:	4638      	mov	r0, r7
 8007b72:	47c8      	blx	r9
 8007b74:	3001      	adds	r0, #1
 8007b76:	d103      	bne.n	8007b80 <_printf_common+0xac>
 8007b78:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b80:	3501      	adds	r5, #1
 8007b82:	e7c6      	b.n	8007b12 <_printf_common+0x3e>
 8007b84:	18e1      	adds	r1, r4, r3
 8007b86:	1c5a      	adds	r2, r3, #1
 8007b88:	2030      	movs	r0, #48	@ 0x30
 8007b8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b8e:	4422      	add	r2, r4
 8007b90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b98:	3302      	adds	r3, #2
 8007b9a:	e7c7      	b.n	8007b2c <_printf_common+0x58>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	4622      	mov	r2, r4
 8007ba0:	4641      	mov	r1, r8
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	47c8      	blx	r9
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	d0e6      	beq.n	8007b78 <_printf_common+0xa4>
 8007baa:	3601      	adds	r6, #1
 8007bac:	e7d9      	b.n	8007b62 <_printf_common+0x8e>
	...

08007bb0 <_printf_i>:
 8007bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb4:	7e0f      	ldrb	r7, [r1, #24]
 8007bb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007bb8:	2f78      	cmp	r7, #120	@ 0x78
 8007bba:	4691      	mov	r9, r2
 8007bbc:	4680      	mov	r8, r0
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	469a      	mov	sl, r3
 8007bc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007bc6:	d807      	bhi.n	8007bd8 <_printf_i+0x28>
 8007bc8:	2f62      	cmp	r7, #98	@ 0x62
 8007bca:	d80a      	bhi.n	8007be2 <_printf_i+0x32>
 8007bcc:	2f00      	cmp	r7, #0
 8007bce:	f000 80d2 	beq.w	8007d76 <_printf_i+0x1c6>
 8007bd2:	2f58      	cmp	r7, #88	@ 0x58
 8007bd4:	f000 80b9 	beq.w	8007d4a <_printf_i+0x19a>
 8007bd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007be0:	e03a      	b.n	8007c58 <_printf_i+0xa8>
 8007be2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007be6:	2b15      	cmp	r3, #21
 8007be8:	d8f6      	bhi.n	8007bd8 <_printf_i+0x28>
 8007bea:	a101      	add	r1, pc, #4	@ (adr r1, 8007bf0 <_printf_i+0x40>)
 8007bec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bf0:	08007c49 	.word	0x08007c49
 8007bf4:	08007c5d 	.word	0x08007c5d
 8007bf8:	08007bd9 	.word	0x08007bd9
 8007bfc:	08007bd9 	.word	0x08007bd9
 8007c00:	08007bd9 	.word	0x08007bd9
 8007c04:	08007bd9 	.word	0x08007bd9
 8007c08:	08007c5d 	.word	0x08007c5d
 8007c0c:	08007bd9 	.word	0x08007bd9
 8007c10:	08007bd9 	.word	0x08007bd9
 8007c14:	08007bd9 	.word	0x08007bd9
 8007c18:	08007bd9 	.word	0x08007bd9
 8007c1c:	08007d5d 	.word	0x08007d5d
 8007c20:	08007c87 	.word	0x08007c87
 8007c24:	08007d17 	.word	0x08007d17
 8007c28:	08007bd9 	.word	0x08007bd9
 8007c2c:	08007bd9 	.word	0x08007bd9
 8007c30:	08007d7f 	.word	0x08007d7f
 8007c34:	08007bd9 	.word	0x08007bd9
 8007c38:	08007c87 	.word	0x08007c87
 8007c3c:	08007bd9 	.word	0x08007bd9
 8007c40:	08007bd9 	.word	0x08007bd9
 8007c44:	08007d1f 	.word	0x08007d1f
 8007c48:	6833      	ldr	r3, [r6, #0]
 8007c4a:	1d1a      	adds	r2, r3, #4
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6032      	str	r2, [r6, #0]
 8007c50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e09d      	b.n	8007d98 <_printf_i+0x1e8>
 8007c5c:	6833      	ldr	r3, [r6, #0]
 8007c5e:	6820      	ldr	r0, [r4, #0]
 8007c60:	1d19      	adds	r1, r3, #4
 8007c62:	6031      	str	r1, [r6, #0]
 8007c64:	0606      	lsls	r6, r0, #24
 8007c66:	d501      	bpl.n	8007c6c <_printf_i+0xbc>
 8007c68:	681d      	ldr	r5, [r3, #0]
 8007c6a:	e003      	b.n	8007c74 <_printf_i+0xc4>
 8007c6c:	0645      	lsls	r5, r0, #25
 8007c6e:	d5fb      	bpl.n	8007c68 <_printf_i+0xb8>
 8007c70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c74:	2d00      	cmp	r5, #0
 8007c76:	da03      	bge.n	8007c80 <_printf_i+0xd0>
 8007c78:	232d      	movs	r3, #45	@ 0x2d
 8007c7a:	426d      	negs	r5, r5
 8007c7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c80:	4859      	ldr	r0, [pc, #356]	@ (8007de8 <_printf_i+0x238>)
 8007c82:	230a      	movs	r3, #10
 8007c84:	e011      	b.n	8007caa <_printf_i+0xfa>
 8007c86:	6821      	ldr	r1, [r4, #0]
 8007c88:	6833      	ldr	r3, [r6, #0]
 8007c8a:	0608      	lsls	r0, r1, #24
 8007c8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c90:	d402      	bmi.n	8007c98 <_printf_i+0xe8>
 8007c92:	0649      	lsls	r1, r1, #25
 8007c94:	bf48      	it	mi
 8007c96:	b2ad      	uxthmi	r5, r5
 8007c98:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c9a:	4853      	ldr	r0, [pc, #332]	@ (8007de8 <_printf_i+0x238>)
 8007c9c:	6033      	str	r3, [r6, #0]
 8007c9e:	bf14      	ite	ne
 8007ca0:	230a      	movne	r3, #10
 8007ca2:	2308      	moveq	r3, #8
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007caa:	6866      	ldr	r6, [r4, #4]
 8007cac:	60a6      	str	r6, [r4, #8]
 8007cae:	2e00      	cmp	r6, #0
 8007cb0:	bfa2      	ittt	ge
 8007cb2:	6821      	ldrge	r1, [r4, #0]
 8007cb4:	f021 0104 	bicge.w	r1, r1, #4
 8007cb8:	6021      	strge	r1, [r4, #0]
 8007cba:	b90d      	cbnz	r5, 8007cc0 <_printf_i+0x110>
 8007cbc:	2e00      	cmp	r6, #0
 8007cbe:	d04b      	beq.n	8007d58 <_printf_i+0x1a8>
 8007cc0:	4616      	mov	r6, r2
 8007cc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007cc6:	fb03 5711 	mls	r7, r3, r1, r5
 8007cca:	5dc7      	ldrb	r7, [r0, r7]
 8007ccc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007cd0:	462f      	mov	r7, r5
 8007cd2:	42bb      	cmp	r3, r7
 8007cd4:	460d      	mov	r5, r1
 8007cd6:	d9f4      	bls.n	8007cc2 <_printf_i+0x112>
 8007cd8:	2b08      	cmp	r3, #8
 8007cda:	d10b      	bne.n	8007cf4 <_printf_i+0x144>
 8007cdc:	6823      	ldr	r3, [r4, #0]
 8007cde:	07df      	lsls	r7, r3, #31
 8007ce0:	d508      	bpl.n	8007cf4 <_printf_i+0x144>
 8007ce2:	6923      	ldr	r3, [r4, #16]
 8007ce4:	6861      	ldr	r1, [r4, #4]
 8007ce6:	4299      	cmp	r1, r3
 8007ce8:	bfde      	ittt	le
 8007cea:	2330      	movle	r3, #48	@ 0x30
 8007cec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007cf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007cf4:	1b92      	subs	r2, r2, r6
 8007cf6:	6122      	str	r2, [r4, #16]
 8007cf8:	f8cd a000 	str.w	sl, [sp]
 8007cfc:	464b      	mov	r3, r9
 8007cfe:	aa03      	add	r2, sp, #12
 8007d00:	4621      	mov	r1, r4
 8007d02:	4640      	mov	r0, r8
 8007d04:	f7ff fee6 	bl	8007ad4 <_printf_common>
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d14a      	bne.n	8007da2 <_printf_i+0x1f2>
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	b004      	add	sp, #16
 8007d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	f043 0320 	orr.w	r3, r3, #32
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	4833      	ldr	r0, [pc, #204]	@ (8007dec <_printf_i+0x23c>)
 8007d20:	2778      	movs	r7, #120	@ 0x78
 8007d22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	6831      	ldr	r1, [r6, #0]
 8007d2a:	061f      	lsls	r7, r3, #24
 8007d2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d30:	d402      	bmi.n	8007d38 <_printf_i+0x188>
 8007d32:	065f      	lsls	r7, r3, #25
 8007d34:	bf48      	it	mi
 8007d36:	b2ad      	uxthmi	r5, r5
 8007d38:	6031      	str	r1, [r6, #0]
 8007d3a:	07d9      	lsls	r1, r3, #31
 8007d3c:	bf44      	itt	mi
 8007d3e:	f043 0320 	orrmi.w	r3, r3, #32
 8007d42:	6023      	strmi	r3, [r4, #0]
 8007d44:	b11d      	cbz	r5, 8007d4e <_printf_i+0x19e>
 8007d46:	2310      	movs	r3, #16
 8007d48:	e7ac      	b.n	8007ca4 <_printf_i+0xf4>
 8007d4a:	4827      	ldr	r0, [pc, #156]	@ (8007de8 <_printf_i+0x238>)
 8007d4c:	e7e9      	b.n	8007d22 <_printf_i+0x172>
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	f023 0320 	bic.w	r3, r3, #32
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	e7f6      	b.n	8007d46 <_printf_i+0x196>
 8007d58:	4616      	mov	r6, r2
 8007d5a:	e7bd      	b.n	8007cd8 <_printf_i+0x128>
 8007d5c:	6833      	ldr	r3, [r6, #0]
 8007d5e:	6825      	ldr	r5, [r4, #0]
 8007d60:	6961      	ldr	r1, [r4, #20]
 8007d62:	1d18      	adds	r0, r3, #4
 8007d64:	6030      	str	r0, [r6, #0]
 8007d66:	062e      	lsls	r6, r5, #24
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	d501      	bpl.n	8007d70 <_printf_i+0x1c0>
 8007d6c:	6019      	str	r1, [r3, #0]
 8007d6e:	e002      	b.n	8007d76 <_printf_i+0x1c6>
 8007d70:	0668      	lsls	r0, r5, #25
 8007d72:	d5fb      	bpl.n	8007d6c <_printf_i+0x1bc>
 8007d74:	8019      	strh	r1, [r3, #0]
 8007d76:	2300      	movs	r3, #0
 8007d78:	6123      	str	r3, [r4, #16]
 8007d7a:	4616      	mov	r6, r2
 8007d7c:	e7bc      	b.n	8007cf8 <_printf_i+0x148>
 8007d7e:	6833      	ldr	r3, [r6, #0]
 8007d80:	1d1a      	adds	r2, r3, #4
 8007d82:	6032      	str	r2, [r6, #0]
 8007d84:	681e      	ldr	r6, [r3, #0]
 8007d86:	6862      	ldr	r2, [r4, #4]
 8007d88:	2100      	movs	r1, #0
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	f7f8 faa8 	bl	80002e0 <memchr>
 8007d90:	b108      	cbz	r0, 8007d96 <_printf_i+0x1e6>
 8007d92:	1b80      	subs	r0, r0, r6
 8007d94:	6060      	str	r0, [r4, #4]
 8007d96:	6863      	ldr	r3, [r4, #4]
 8007d98:	6123      	str	r3, [r4, #16]
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007da0:	e7aa      	b.n	8007cf8 <_printf_i+0x148>
 8007da2:	6923      	ldr	r3, [r4, #16]
 8007da4:	4632      	mov	r2, r6
 8007da6:	4649      	mov	r1, r9
 8007da8:	4640      	mov	r0, r8
 8007daa:	47d0      	blx	sl
 8007dac:	3001      	adds	r0, #1
 8007dae:	d0ad      	beq.n	8007d0c <_printf_i+0x15c>
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	079b      	lsls	r3, r3, #30
 8007db4:	d413      	bmi.n	8007dde <_printf_i+0x22e>
 8007db6:	68e0      	ldr	r0, [r4, #12]
 8007db8:	9b03      	ldr	r3, [sp, #12]
 8007dba:	4298      	cmp	r0, r3
 8007dbc:	bfb8      	it	lt
 8007dbe:	4618      	movlt	r0, r3
 8007dc0:	e7a6      	b.n	8007d10 <_printf_i+0x160>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	4632      	mov	r2, r6
 8007dc6:	4649      	mov	r1, r9
 8007dc8:	4640      	mov	r0, r8
 8007dca:	47d0      	blx	sl
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d09d      	beq.n	8007d0c <_printf_i+0x15c>
 8007dd0:	3501      	adds	r5, #1
 8007dd2:	68e3      	ldr	r3, [r4, #12]
 8007dd4:	9903      	ldr	r1, [sp, #12]
 8007dd6:	1a5b      	subs	r3, r3, r1
 8007dd8:	42ab      	cmp	r3, r5
 8007dda:	dcf2      	bgt.n	8007dc2 <_printf_i+0x212>
 8007ddc:	e7eb      	b.n	8007db6 <_printf_i+0x206>
 8007dde:	2500      	movs	r5, #0
 8007de0:	f104 0619 	add.w	r6, r4, #25
 8007de4:	e7f5      	b.n	8007dd2 <_printf_i+0x222>
 8007de6:	bf00      	nop
 8007de8:	08008075 	.word	0x08008075
 8007dec:	08008086 	.word	0x08008086

08007df0 <memmove>:
 8007df0:	4288      	cmp	r0, r1
 8007df2:	b510      	push	{r4, lr}
 8007df4:	eb01 0402 	add.w	r4, r1, r2
 8007df8:	d902      	bls.n	8007e00 <memmove+0x10>
 8007dfa:	4284      	cmp	r4, r0
 8007dfc:	4623      	mov	r3, r4
 8007dfe:	d807      	bhi.n	8007e10 <memmove+0x20>
 8007e00:	1e43      	subs	r3, r0, #1
 8007e02:	42a1      	cmp	r1, r4
 8007e04:	d008      	beq.n	8007e18 <memmove+0x28>
 8007e06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e0e:	e7f8      	b.n	8007e02 <memmove+0x12>
 8007e10:	4402      	add	r2, r0
 8007e12:	4601      	mov	r1, r0
 8007e14:	428a      	cmp	r2, r1
 8007e16:	d100      	bne.n	8007e1a <memmove+0x2a>
 8007e18:	bd10      	pop	{r4, pc}
 8007e1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e22:	e7f7      	b.n	8007e14 <memmove+0x24>

08007e24 <_sbrk_r>:
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	4d06      	ldr	r5, [pc, #24]	@ (8007e40 <_sbrk_r+0x1c>)
 8007e28:	2300      	movs	r3, #0
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	4608      	mov	r0, r1
 8007e2e:	602b      	str	r3, [r5, #0]
 8007e30:	f000 f83e 	bl	8007eb0 <_sbrk>
 8007e34:	1c43      	adds	r3, r0, #1
 8007e36:	d102      	bne.n	8007e3e <_sbrk_r+0x1a>
 8007e38:	682b      	ldr	r3, [r5, #0]
 8007e3a:	b103      	cbz	r3, 8007e3e <_sbrk_r+0x1a>
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	bd38      	pop	{r3, r4, r5, pc}
 8007e40:	2000c634 	.word	0x2000c634

08007e44 <_realloc_r>:
 8007e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e48:	4680      	mov	r8, r0
 8007e4a:	4615      	mov	r5, r2
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	b921      	cbnz	r1, 8007e5a <_realloc_r+0x16>
 8007e50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e54:	4611      	mov	r1, r2
 8007e56:	f7ff bc59 	b.w	800770c <_malloc_r>
 8007e5a:	b92a      	cbnz	r2, 8007e68 <_realloc_r+0x24>
 8007e5c:	f7ff fbea 	bl	8007634 <_free_r>
 8007e60:	2400      	movs	r4, #0
 8007e62:	4620      	mov	r0, r4
 8007e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e68:	f000 f81a 	bl	8007ea0 <_malloc_usable_size_r>
 8007e6c:	4285      	cmp	r5, r0
 8007e6e:	4606      	mov	r6, r0
 8007e70:	d802      	bhi.n	8007e78 <_realloc_r+0x34>
 8007e72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007e76:	d8f4      	bhi.n	8007e62 <_realloc_r+0x1e>
 8007e78:	4629      	mov	r1, r5
 8007e7a:	4640      	mov	r0, r8
 8007e7c:	f7ff fc46 	bl	800770c <_malloc_r>
 8007e80:	4607      	mov	r7, r0
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d0ec      	beq.n	8007e60 <_realloc_r+0x1c>
 8007e86:	42b5      	cmp	r5, r6
 8007e88:	462a      	mov	r2, r5
 8007e8a:	4621      	mov	r1, r4
 8007e8c:	bf28      	it	cs
 8007e8e:	4632      	movcs	r2, r6
 8007e90:	f7ff fbc2 	bl	8007618 <memcpy>
 8007e94:	4621      	mov	r1, r4
 8007e96:	4640      	mov	r0, r8
 8007e98:	f7ff fbcc 	bl	8007634 <_free_r>
 8007e9c:	463c      	mov	r4, r7
 8007e9e:	e7e0      	b.n	8007e62 <_realloc_r+0x1e>

08007ea0 <_malloc_usable_size_r>:
 8007ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea4:	1f18      	subs	r0, r3, #4
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	bfbc      	itt	lt
 8007eaa:	580b      	ldrlt	r3, [r1, r0]
 8007eac:	18c0      	addlt	r0, r0, r3
 8007eae:	4770      	bx	lr

08007eb0 <_sbrk>:
 8007eb0:	4a04      	ldr	r2, [pc, #16]	@ (8007ec4 <_sbrk+0x14>)
 8007eb2:	6811      	ldr	r1, [r2, #0]
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	b909      	cbnz	r1, 8007ebc <_sbrk+0xc>
 8007eb8:	4903      	ldr	r1, [pc, #12]	@ (8007ec8 <_sbrk+0x18>)
 8007eba:	6011      	str	r1, [r2, #0]
 8007ebc:	6810      	ldr	r0, [r2, #0]
 8007ebe:	4403      	add	r3, r0
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	4770      	bx	lr
 8007ec4:	2000c644 	.word	0x2000c644
 8007ec8:	2000c648 	.word	0x2000c648

08007ecc <_init>:
 8007ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ece:	bf00      	nop
 8007ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ed2:	bc08      	pop	{r3}
 8007ed4:	469e      	mov	lr, r3
 8007ed6:	4770      	bx	lr

08007ed8 <_fini>:
 8007ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eda:	bf00      	nop
 8007edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ede:	bc08      	pop	{r3}
 8007ee0:	469e      	mov	lr, r3
 8007ee2:	4770      	bx	lr
