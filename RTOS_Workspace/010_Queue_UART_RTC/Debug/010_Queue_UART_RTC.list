
010_Queue_UART_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1c8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800a3c8  0800a3c8  0000b3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a818  0800a818  0000c084  2**0
                  CONTENTS
  4 .ARM          00000008  0800a818  0800a818  0000b818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a820  0800a820  0000c084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a820  0800a820  0000b820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a824  0800a824  0000b824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800a828  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bc98  20000084  0800a8ac  0000c084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000bd1c  0800a8ac  0000cd1c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000195e9  00000000  00000000  0000c0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ada  00000000  00000000  0002569b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  00029178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010e7  00000000  00000000  0002a738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d60b  00000000  00000000  0002b81f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d8ba  00000000  00000000  00058e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011392d  00000000  00000000  000766e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018a011  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063a0  00000000  00000000  0018a054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001903f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000084 	.word	0x20000084
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a3b0 	.word	0x0800a3b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000088 	.word	0x20000088
 800023c:	0800a3b0 	.word	0x0800a3b0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <led_effect_stop>:
 */

#include "main.h"

void led_effect_stop(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af02      	add	r7, sp, #8
	for (int i =0;i<4;i++)
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	e00e      	b.n	800062a <led_effect_stop+0x2a>
		xTimerStop(led_timer_handle[i],portMAX_DELAY);
 800060c:	4a0b      	ldr	r2, [pc, #44]	@ (800063c <led_effect_stop+0x3c>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	2200      	movs	r2, #0
 800061e:	2103      	movs	r1, #3
 8000620:	f007 fd6c 	bl	80080fc <xTimerGenericCommandFromTask>
	for (int i =0;i<4;i++)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3301      	adds	r3, #1
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b03      	cmp	r3, #3
 800062e:	dded      	ble.n	800060c <led_effect_stop+0xc>
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	2000016c 	.word	0x2000016c

08000640 <led_effect>:

void led_effect(int n)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b085      	sub	sp, #20
 8000644:	af02      	add	r7, sp, #8
 8000646:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 8000648:	f7ff ffda 	bl	8000600 <led_effect_stop>
	xTimerStart(led_timer_handle[n-1],portMAX_DELAY);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3b01      	subs	r3, #1
 8000650:	4a08      	ldr	r2, [pc, #32]	@ (8000674 <led_effect+0x34>)
 8000652:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000656:	f006 fc1d 	bl	8006e94 <xTaskGetTickCount>
 800065a:	4602      	mov	r2, r0
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2300      	movs	r3, #0
 8000664:	2101      	movs	r1, #1
 8000666:	4620      	mov	r0, r4
 8000668:	f007 fd48 	bl	80080fc <xTimerGenericCommandFromTask>

}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bd90      	pop	{r4, r7, pc}
 8000674:	2000016c 	.word	0x2000016c

08000678 <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	2101      	movs	r1, #1
 8000680:	4807      	ldr	r0, [pc, #28]	@ (80006a0 <turn_off_all_leds+0x28>)
 8000682:	f001 fec1 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2180      	movs	r1, #128	@ 0x80
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <turn_off_all_leds+0x28>)
 800068c:	f001 febc 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000696:	4802      	ldr	r0, [pc, #8]	@ (80006a0 <turn_off_all_leds+0x28>)
 8000698:	f001 feb6 	bl	8002408 <HAL_GPIO_WritePin>
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40020400 	.word	0x40020400

080006a4 <turn_on_all_leds>:

void turn_on_all_leds(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2101      	movs	r1, #1
 80006ac:	4807      	ldr	r0, [pc, #28]	@ (80006cc <turn_on_all_leds+0x28>)
 80006ae:	f001 feab 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2180      	movs	r1, #128	@ 0x80
 80006b6:	4805      	ldr	r0, [pc, #20]	@ (80006cc <turn_on_all_leds+0x28>)
 80006b8:	f001 fea6 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006c2:	4802      	ldr	r0, [pc, #8]	@ (80006cc <turn_on_all_leds+0x28>)
 80006c4:	f001 fea0 	bl	8002408 <HAL_GPIO_WritePin>
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40020400 	.word	0x40020400

080006d0 <turn_on_even_leds>:

void turn_on_even_leds(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2101      	movs	r1, #1
 80006d8:	4807      	ldr	r0, [pc, #28]	@ (80006f8 <turn_on_even_leds+0x28>)
 80006da:	f001 fe95 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2180      	movs	r1, #128	@ 0x80
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <turn_on_even_leds+0x28>)
 80006e4:	f001 fe90 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006ee:	4802      	ldr	r0, [pc, #8]	@ (80006f8 <turn_on_even_leds+0x28>)
 80006f0:	f001 fe8a 	bl	8002408 <HAL_GPIO_WritePin>
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40020400 	.word	0x40020400

080006fc <turn_on_odd_leds>:

void turn_on_odd_leds(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2101      	movs	r1, #1
 8000704:	4807      	ldr	r0, [pc, #28]	@ (8000724 <turn_on_odd_leds+0x28>)
 8000706:	f001 fe7f 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2180      	movs	r1, #128	@ 0x80
 800070e:	4805      	ldr	r0, [pc, #20]	@ (8000724 <turn_on_odd_leds+0x28>)
 8000710:	f001 fe7a 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800071a:	4802      	ldr	r0, [pc, #8]	@ (8000724 <turn_on_odd_leds+0x28>)
 800071c:	f001 fe74 	bl	8002408 <HAL_GPIO_WritePin>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40020400 	.word	0x40020400

08000728 <LED_Control>:

void LED_Control(int value)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	for(int i=0; i < 4; i++)
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	e013      	b.n	800075e <LED_Control+0x36>
		HAL_GPIO_WritePin(LD3_GPIO_Port, (LD1_Pin << i)	, ((value >> i)& 0x1));
 8000736:	2201      	movs	r2, #1
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	b299      	uxth	r1, r3
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	fa42 f303 	asr.w	r3, r2, r3
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	b2db      	uxtb	r3, r3
 8000750:	461a      	mov	r2, r3
 8000752:	4807      	ldr	r0, [pc, #28]	@ (8000770 <LED_Control+0x48>)
 8000754:	f001 fe58 	bl	8002408 <HAL_GPIO_WritePin>
	for(int i=0; i < 4; i++)
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3301      	adds	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	2b03      	cmp	r3, #3
 8000762:	dde8      	ble.n	8000736 <LED_Control+0xe>
}
 8000764:	bf00      	nop
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40020400 	.word	0x40020400

08000774 <led_effect_1>:

void led_effect_1(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1)? turn_off_all_leds() : turn_on_all_leds();
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <led_effect_1+0x28>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f083 0301 	eor.w	r3, r3, #1
 8000780:	4a06      	ldr	r2, [pc, #24]	@ (800079c <led_effect_1+0x28>)
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b05      	ldr	r3, [pc, #20]	@ (800079c <led_effect_1+0x28>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d002      	beq.n	8000792 <led_effect_1+0x1e>
 800078c:	f7ff ff74 	bl	8000678 <turn_off_all_leds>
}
 8000790:	e001      	b.n	8000796 <led_effect_1+0x22>
	(flag ^= 1)? turn_off_all_leds() : turn_on_all_leds();
 8000792:	f7ff ff87 	bl	80006a4 <turn_on_all_leds>
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000000 	.word	0x20000000

080007a0 <led_effect_2>:

void led_effect_2(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1)? turn_on_even_leds() : turn_on_odd_leds();
 80007a4:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <led_effect_2+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f083 0301 	eor.w	r3, r3, #1
 80007ac:	4a06      	ldr	r2, [pc, #24]	@ (80007c8 <led_effect_2+0x28>)
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <led_effect_2+0x28>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d002      	beq.n	80007be <led_effect_2+0x1e>
 80007b8:	f7ff ff8a 	bl	80006d0 <turn_on_even_leds>
}
 80007bc:	e001      	b.n	80007c2 <led_effect_2+0x22>
	(flag ^= 1)? turn_on_even_leds() : turn_on_odd_leds();
 80007be:	f7ff ff9d 	bl	80006fc <turn_on_odd_leds>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000004 	.word	0x20000004

080007cc <led_effect_3>:

void led_effect_3(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_Control(0x1 << (i++ % 4));
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <led_effect_3+0x2c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	4908      	ldr	r1, [pc, #32]	@ (80007f8 <led_effect_3+0x2c>)
 80007d8:	600a      	str	r2, [r1, #0]
 80007da:	425a      	negs	r2, r3
 80007dc:	f003 0303 	and.w	r3, r3, #3
 80007e0:	f002 0203 	and.w	r2, r2, #3
 80007e4:	bf58      	it	pl
 80007e6:	4253      	negpl	r3, r2
 80007e8:	2201      	movs	r2, #1
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff9a 	bl	8000728 <LED_Control>

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000a0 	.word	0x200000a0

080007fc <led_effect_4>:

void led_effect_4(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_Control(0x08 >> (i++ % 4));
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <led_effect_4+0x2c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	1c5a      	adds	r2, r3, #1
 8000806:	4908      	ldr	r1, [pc, #32]	@ (8000828 <led_effect_4+0x2c>)
 8000808:	600a      	str	r2, [r1, #0]
 800080a:	425a      	negs	r2, r3
 800080c:	f003 0303 	and.w	r3, r3, #3
 8000810:	f002 0203 	and.w	r2, r2, #3
 8000814:	bf58      	it	pl
 8000816:	4253      	negpl	r3, r2
 8000818:	2208      	movs	r2, #8
 800081a:	fa42 f303 	asr.w	r3, r2, r3
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff ff82 	bl	8000728 <LED_Control>
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000a4 	.word	0x200000a4

0800082c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000832:	f001 fa9c 	bl	8001d6e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000836:	f000 f8e5 	bl	8000a04 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800083a:	f000 f997 	bl	8000b6c <MX_GPIO_Init>
	MX_RTC_Init();
 800083e:	f000 f93f 	bl	8000ac0 <MX_RTC_Init>
	MX_USART3_UART_Init();
 8000842:	f000 f963 	bl	8000b0c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	/* Enable the CYcle counting */
	DWT_CTRL |= (1 << 0);
 8000846:	4b55      	ldr	r3, [pc, #340]	@ (800099c <main+0x170>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a54      	ldr	r2, [pc, #336]	@ (800099c <main+0x170>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6013      	str	r3, [r2, #0]

	/*
	 * Creating 5 tasks for Menu, LED, RTC, Print and Command control
	 */

	status = xTaskCreate(menu_task_handler, "Menu_Task", 200, NULL, 2, &menu_task_handle);
 8000852:	4b53      	ldr	r3, [pc, #332]	@ (80009a0 <main+0x174>)
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	2302      	movs	r3, #2
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2300      	movs	r3, #0
 800085c:	22c8      	movs	r2, #200	@ 0xc8
 800085e:	4951      	ldr	r1, [pc, #324]	@ (80009a4 <main+0x178>)
 8000860:	4851      	ldr	r0, [pc, #324]	@ (80009a8 <main+0x17c>)
 8000862:	f006 f81e 	bl	80068a2 <xTaskCreate>
 8000866:	60b8      	str	r0, [r7, #8]

	configASSERT(status = pdPASS);
 8000868:	2301      	movs	r3, #1
 800086a:	60bb      	str	r3, [r7, #8]

	status = xTaskCreate(led_task_handler, "LED_Task", 200, NULL, 2, &led_task_handle);
 800086c:	4b4f      	ldr	r3, [pc, #316]	@ (80009ac <main+0x180>)
 800086e:	9301      	str	r3, [sp, #4]
 8000870:	2302      	movs	r3, #2
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2300      	movs	r3, #0
 8000876:	22c8      	movs	r2, #200	@ 0xc8
 8000878:	494d      	ldr	r1, [pc, #308]	@ (80009b0 <main+0x184>)
 800087a:	484e      	ldr	r0, [pc, #312]	@ (80009b4 <main+0x188>)
 800087c:	f006 f811 	bl	80068a2 <xTaskCreate>
 8000880:	60b8      	str	r0, [r7, #8]

	configASSERT(status = pdPASS);
 8000882:	2301      	movs	r3, #1
 8000884:	60bb      	str	r3, [r7, #8]

	status = xTaskCreate(rtc_task_handler, "RTC_Task", 200, NULL, 2, &rtc_task_handle);
 8000886:	4b4c      	ldr	r3, [pc, #304]	@ (80009b8 <main+0x18c>)
 8000888:	9301      	str	r3, [sp, #4]
 800088a:	2302      	movs	r3, #2
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	2300      	movs	r3, #0
 8000890:	22c8      	movs	r2, #200	@ 0xc8
 8000892:	494a      	ldr	r1, [pc, #296]	@ (80009bc <main+0x190>)
 8000894:	484a      	ldr	r0, [pc, #296]	@ (80009c0 <main+0x194>)
 8000896:	f006 f804 	bl	80068a2 <xTaskCreate>
 800089a:	60b8      	str	r0, [r7, #8]

	configASSERT(status = pdPASS);
 800089c:	2301      	movs	r3, #1
 800089e:	60bb      	str	r3, [r7, #8]

	status = xTaskCreate(print_task_handler, "Print_Task", 200, NULL, 2, &print_task_handle);
 80008a0:	4b48      	ldr	r3, [pc, #288]	@ (80009c4 <main+0x198>)
 80008a2:	9301      	str	r3, [sp, #4]
 80008a4:	2302      	movs	r3, #2
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	2300      	movs	r3, #0
 80008aa:	22c8      	movs	r2, #200	@ 0xc8
 80008ac:	4946      	ldr	r1, [pc, #280]	@ (80009c8 <main+0x19c>)
 80008ae:	4847      	ldr	r0, [pc, #284]	@ (80009cc <main+0x1a0>)
 80008b0:	f005 fff7 	bl	80068a2 <xTaskCreate>
 80008b4:	60b8      	str	r0, [r7, #8]

	configASSERT(status = pdPASS);
 80008b6:	2301      	movs	r3, #1
 80008b8:	60bb      	str	r3, [r7, #8]

	status = xTaskCreate(command_task_handler, "Command_Task", 200, NULL, 2, &command_task_handle);
 80008ba:	4b45      	ldr	r3, [pc, #276]	@ (80009d0 <main+0x1a4>)
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	2302      	movs	r3, #2
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	2300      	movs	r3, #0
 80008c4:	22c8      	movs	r2, #200	@ 0xc8
 80008c6:	4943      	ldr	r1, [pc, #268]	@ (80009d4 <main+0x1a8>)
 80008c8:	4843      	ldr	r0, [pc, #268]	@ (80009d8 <main+0x1ac>)
 80008ca:	f005 ffea 	bl	80068a2 <xTaskCreate>
 80008ce:	60b8      	str	r0, [r7, #8]

	configASSERT(status = pdPASS);
 80008d0:	2301      	movs	r3, #1
 80008d2:	60bb      	str	r3, [r7, #8]

	/*
	 * Creating 2 Queues for Input Data and Print Data
	 */

	xQueueInputData = xQueueCreate( 10, sizeof( char ) );
 80008d4:	2200      	movs	r2, #0
 80008d6:	2101      	movs	r1, #1
 80008d8:	200a      	movs	r0, #10
 80008da:	f005 f93f 	bl	8005b5c <xQueueGenericCreate>
 80008de:	4603      	mov	r3, r0
 80008e0:	4a3e      	ldr	r2, [pc, #248]	@ (80009dc <main+0x1b0>)
 80008e2:	6013      	str	r3, [r2, #0]

	configASSERT( xQueueInputData != NULL )
 80008e4:	4b3d      	ldr	r3, [pc, #244]	@ (80009dc <main+0x1b0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d10d      	bne.n	8000908 <main+0xdc>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80008ec:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80008f0:	b672      	cpsid	i
 80008f2:	f383 8811 	msr	BASEPRI, r3
 80008f6:	f3bf 8f6f 	isb	sy
 80008fa:	f3bf 8f4f 	dsb	sy
 80008fe:	b662      	cpsie	i
 8000900:	607b      	str	r3, [r7, #4]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000902:	bf00      	nop
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <main+0xd8>

	xQueuePrint = xQueueCreate( 10, sizeof( long unsigned int ) );
 8000908:	2200      	movs	r2, #0
 800090a:	2104      	movs	r1, #4
 800090c:	200a      	movs	r0, #10
 800090e:	f005 f925 	bl	8005b5c <xQueueGenericCreate>
 8000912:	4603      	mov	r3, r0
 8000914:	4a32      	ldr	r2, [pc, #200]	@ (80009e0 <main+0x1b4>)
 8000916:	6013      	str	r3, [r2, #0]

	configASSERT( xQueuePrint != NULL )
 8000918:	4b31      	ldr	r3, [pc, #196]	@ (80009e0 <main+0x1b4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d10d      	bne.n	800093c <main+0x110>
    __asm volatile
 8000920:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8000924:	b672      	cpsid	i
 8000926:	f383 8811 	msr	BASEPRI, r3
 800092a:	f3bf 8f6f 	isb	sy
 800092e:	f3bf 8f4f 	dsb	sy
 8000932:	b662      	cpsie	i
 8000934:	603b      	str	r3, [r7, #0]
}
 8000936:	bf00      	nop
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <main+0x10c>

	//Create Software TImers for LED effects
	for (int i =0;i<4;i++)
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	e013      	b.n	800096a <main+0x13e>
		led_timer_handle[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void *)(i+1), led_effect_callback);
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	3301      	adds	r3, #1
 8000946:	461a      	mov	r2, r3
 8000948:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <main+0x1b8>)
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	4613      	mov	r3, r2
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000954:	4824      	ldr	r0, [pc, #144]	@ (80009e8 <main+0x1bc>)
 8000956:	f007 fb75 	bl	8008044 <xTimerCreate>
 800095a:	4602      	mov	r2, r0
 800095c:	4923      	ldr	r1, [pc, #140]	@ (80009ec <main+0x1c0>)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i =0;i<4;i++)
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	3301      	adds	r3, #1
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	2b03      	cmp	r3, #3
 800096e:	dde8      	ble.n	8000942 <main+0x116>

	rtc_timer = xTimerCreate ("rtc_report_timer",pdMS_TO_TICKS(1000),pdTRUE,NULL,rtc_report_callback);
 8000970:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <main+0x1c4>)
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2300      	movs	r3, #0
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800097c:	481d      	ldr	r0, [pc, #116]	@ (80009f4 <main+0x1c8>)
 800097e:	f007 fb61 	bl	8008044 <xTimerCreate>
 8000982:	4603      	mov	r3, r0
 8000984:	4a1c      	ldr	r2, [pc, #112]	@ (80009f8 <main+0x1cc>)
 8000986:	6013      	str	r3, [r2, #0]

	// Start Reception of USART3
	HAL_UART_Receive_IT(&huart3, (uint8_t *)&user_data, 1);
 8000988:	2201      	movs	r2, #1
 800098a:	491c      	ldr	r1, [pc, #112]	@ (80009fc <main+0x1d0>)
 800098c:	481c      	ldr	r0, [pc, #112]	@ (8000a00 <main+0x1d4>)
 800098e:	f003 fd3a 	bl	8004406 <HAL_UART_Receive_IT>

	//STart the FreeRTOS Scheduler
	vTaskStartScheduler();
 8000992:	f006 f91f 	bl	8006bd4 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000996:	bf00      	nop
 8000998:	e7fd      	b.n	8000996 <main+0x16a>
 800099a:	bf00      	nop
 800099c:	e0001000 	.word	0xe0001000
 80009a0:	20000150 	.word	0x20000150
 80009a4:	0800a3c8 	.word	0x0800a3c8
 80009a8:	080014ed 	.word	0x080014ed
 80009ac:	20000154 	.word	0x20000154
 80009b0:	0800a3d4 	.word	0x0800a3d4
 80009b4:	080015d5 	.word	0x080015d5
 80009b8:	20000158 	.word	0x20000158
 80009bc:	0800a3e0 	.word	0x0800a3e0
 80009c0:	08001749 	.word	0x08001749
 80009c4:	2000015c 	.word	0x2000015c
 80009c8:	0800a3ec 	.word	0x0800a3ec
 80009cc:	08001bc1 	.word	0x08001bc1
 80009d0:	20000160 	.word	0x20000160
 80009d4:	0800a3f8 	.word	0x0800a3f8
 80009d8:	08001c01 	.word	0x08001c01
 80009dc:	20000164 	.word	0x20000164
 80009e0:	20000168 	.word	0x20000168
 80009e4:	08000d89 	.word	0x08000d89
 80009e8:	0800a408 	.word	0x0800a408
 80009ec:	2000016c 	.word	0x2000016c
 80009f0:	08000d75 	.word	0x08000d75
 80009f4:	0800a414 	.word	0x0800a414
 80009f8:	2000017c 	.word	0x2000017c
 80009fc:	20000180 	.word	0x20000180
 8000a00:	200000c8 	.word	0x200000c8

08000a04 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b094      	sub	sp, #80	@ 0x50
 8000a08:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	2234      	movs	r2, #52	@ 0x34
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f008 fcfd 	bl	8009412 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a28:	4b23      	ldr	r3, [pc, #140]	@ (8000ab8 <SystemClock_Config+0xb4>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2c:	4a22      	ldr	r2, [pc, #136]	@ (8000ab8 <SystemClock_Config+0xb4>)
 8000a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a34:	4b20      	ldr	r3, [pc, #128]	@ (8000ab8 <SystemClock_Config+0xb4>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a40:	4b1e      	ldr	r3, [pc, #120]	@ (8000abc <SystemClock_Config+0xb8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a48:	4a1c      	ldr	r2, [pc, #112]	@ (8000abc <SystemClock_Config+0xb8>)
 8000a4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4b1a      	ldr	r3, [pc, #104]	@ (8000abc <SystemClock_Config+0xb8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a5c:	230a      	movs	r3, #10
 8000a5e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a60:	2301      	movs	r3, #1
 8000a62:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a64:	2310      	movs	r3, #16
 8000a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 fce1 	bl	800243c <HAL_RCC_OscConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x80>
	{
		Error_Handler();
 8000a80:	f000 fa06 	bl	8000e90 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a84:	230f      	movs	r3, #15
 8000a86:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a94:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 ff79 	bl	8002998 <HAL_RCC_ClockConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0xac>
	{
		Error_Handler();
 8000aac:	f000 f9f0 	bl	8000e90 <Error_Handler>
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	3750      	adds	r7, #80	@ 0x50
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40007000 	.word	0x40007000

08000ac0 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <MX_RTC_Init+0x44>)
 8000ac6:	4a10      	ldr	r2, [pc, #64]	@ (8000b08 <MX_RTC_Init+0x48>)
 8000ac8:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <MX_RTC_Init+0x44>)
 8000acc:	2240      	movs	r2, #64	@ 0x40
 8000ace:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <MX_RTC_Init+0x44>)
 8000ad2:	227f      	movs	r2, #127	@ 0x7f
 8000ad4:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <MX_RTC_Init+0x44>)
 8000ad8:	22ff      	movs	r2, #255	@ 0xff
 8000ada:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000adc:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <MX_RTC_Init+0x44>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <MX_RTC_Init+0x44>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <MX_RTC_Init+0x44>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <MX_RTC_Init+0x44>)
 8000af0:	f002 fdd0 	bl	8003694 <HAL_RTC_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_RTC_Init+0x3e>
	{
		Error_Handler();
 8000afa:	f000 f9c9 	bl	8000e90 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200000a8 	.word	0x200000a8
 8000b08:	40002800 	.word	0x40002800

08000b0c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000b10:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b12:	4a15      	ldr	r2, [pc, #84]	@ (8000b68 <MX_USART3_UART_Init+0x5c>)
 8000b14:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000b16:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b50:	f003 fb82 	bl	8004258 <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 8000b5a:	f000 f999 	bl	8000e90 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000c8 	.word	0x200000c8
 8000b68:	40004800 	.word	0x40004800

08000b6c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08c      	sub	sp, #48	@ 0x30
 8000b70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	4b77      	ldr	r3, [pc, #476]	@ (8000d60 <MX_GPIO_Init+0x1f4>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	4a76      	ldr	r2, [pc, #472]	@ (8000d60 <MX_GPIO_Init+0x1f4>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8e:	4b74      	ldr	r3, [pc, #464]	@ (8000d60 <MX_GPIO_Init+0x1f4>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	61bb      	str	r3, [r7, #24]
 8000b98:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9a:	4b71      	ldr	r3, [pc, #452]	@ (8000d60 <MX_GPIO_Init+0x1f4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a70      	ldr	r2, [pc, #448]	@ (8000d60 <MX_GPIO_Init+0x1f4>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b6e      	ldr	r3, [pc, #440]	@ (8000d60 <MX_GPIO_Init+0x1f4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b6b      	ldr	r3, [pc, #428]	@ (8000d60 <MX_GPIO_Init+0x1f4>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a6a      	ldr	r2, [pc, #424]	@ (8000d60 <MX_GPIO_Init+0x1f4>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b68      	ldr	r3, [pc, #416]	@ (8000d60 <MX_GPIO_Init+0x1f4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	4b65      	ldr	r3, [pc, #404]	@ (8000d60 <MX_GPIO_Init+0x1f4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a64      	ldr	r2, [pc, #400]	@ (8000d60 <MX_GPIO_Init+0x1f4>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b62      	ldr	r3, [pc, #392]	@ (8000d60 <MX_GPIO_Init+0x1f4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000be2:	4b5f      	ldr	r3, [pc, #380]	@ (8000d60 <MX_GPIO_Init+0x1f4>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a5e      	ldr	r2, [pc, #376]	@ (8000d60 <MX_GPIO_Init+0x1f4>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b5c      	ldr	r3, [pc, #368]	@ (8000d60 <MX_GPIO_Init+0x1f4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000bfa:	4b59      	ldr	r3, [pc, #356]	@ (8000d60 <MX_GPIO_Init+0x1f4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a58      	ldr	r2, [pc, #352]	@ (8000d60 <MX_GPIO_Init+0x1f4>)
 8000c00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b56      	ldr	r3, [pc, #344]	@ (8000d60 <MX_GPIO_Init+0x1f4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000c18:	4852      	ldr	r0, [pc, #328]	@ (8000d64 <MX_GPIO_Init+0x1f8>)
 8000c1a:	f001 fbf5 	bl	8002408 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2140      	movs	r1, #64	@ 0x40
 8000c22:	4851      	ldr	r0, [pc, #324]	@ (8000d68 <MX_GPIO_Init+0x1fc>)
 8000c24:	f001 fbf0 	bl	8002408 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c2e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c32:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	484b      	ldr	r0, [pc, #300]	@ (8000d6c <MX_GPIO_Init+0x200>)
 8000c40:	f001 fa36 	bl	80020b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c44:	2332      	movs	r3, #50	@ 0x32
 8000c46:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c54:	230b      	movs	r3, #11
 8000c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4843      	ldr	r0, [pc, #268]	@ (8000d6c <MX_GPIO_Init+0x200>)
 8000c60:	f001 fa26 	bl	80020b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c64:	2386      	movs	r3, #134	@ 0x86
 8000c66:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c74:	230b      	movs	r3, #11
 8000c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	483c      	ldr	r0, [pc, #240]	@ (8000d70 <MX_GPIO_Init+0x204>)
 8000c80:	f001 fa16 	bl	80020b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c84:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000c88:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4831      	ldr	r0, [pc, #196]	@ (8000d64 <MX_GPIO_Init+0x1f8>)
 8000c9e:	f001 fa07 	bl	80020b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ca2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ca6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb4:	230b      	movs	r3, #11
 8000cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4829      	ldr	r0, [pc, #164]	@ (8000d64 <MX_GPIO_Init+0x1f8>)
 8000cc0:	f001 f9f6 	bl	80020b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cc4:	2340      	movs	r3, #64	@ 0x40
 8000cc6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4823      	ldr	r0, [pc, #140]	@ (8000d68 <MX_GPIO_Init+0x1fc>)
 8000cdc:	f001 f9e8 	bl	80020b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ce0:	2380      	movs	r3, #128	@ 0x80
 8000ce2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	481d      	ldr	r0, [pc, #116]	@ (8000d68 <MX_GPIO_Init+0x1fc>)
 8000cf4:	f001 f9dc 	bl	80020b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cf8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000cfc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d0a:	230a      	movs	r3, #10
 8000d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	4816      	ldr	r0, [pc, #88]	@ (8000d70 <MX_GPIO_Init+0x204>)
 8000d16:	f001 f9cb 	bl	80020b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d1e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4810      	ldr	r0, [pc, #64]	@ (8000d70 <MX_GPIO_Init+0x204>)
 8000d30:	f001 f9be 	bl	80020b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d34:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d38:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d46:	230b      	movs	r3, #11
 8000d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <MX_GPIO_Init+0x1fc>)
 8000d52:	f001 f9ad 	bl	80020b0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d56:	bf00      	nop
 8000d58:	3730      	adds	r7, #48	@ 0x30
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020400 	.word	0x40020400
 8000d68:	40021800 	.word	0x40021800
 8000d6c:	40020800 	.word	0x40020800
 8000d70:	40020000 	.word	0x40020000

08000d74 <rtc_report_callback>:

/* USER CODE BEGIN 4 */

void rtc_report_callback( TimerHandle_t xTimer )
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	 show_time_date_itm();
 8000d7c:	f000 f88e 	bl	8000e9c <show_time_date_itm>

}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <led_effect_callback>:


void led_effect_callback(TimerHandle_t xTimer)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	int id ;
	id = (uint32_t) pvTimerGetTimerID(xTimer);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f007 fcb5 	bl	8008700 <pvTimerGetTimerID>
 8000d96:	4603      	mov	r3, r0
 8000d98:	60fb      	str	r3, [r7, #12]

	switch (id)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d816      	bhi.n	8000dd0 <led_effect_callback+0x48>
 8000da2:	a201      	add	r2, pc, #4	@ (adr r2, 8000da8 <led_effect_callback+0x20>)
 8000da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da8:	08000db9 	.word	0x08000db9
 8000dac:	08000dbf 	.word	0x08000dbf
 8000db0:	08000dc5 	.word	0x08000dc5
 8000db4:	08000dcb 	.word	0x08000dcb
	{
	case 1:
		led_effect_1();
 8000db8:	f7ff fcdc 	bl	8000774 <led_effect_1>
		break;
 8000dbc:	e008      	b.n	8000dd0 <led_effect_callback+0x48>
	case 2:
		led_effect_2();
 8000dbe:	f7ff fcef 	bl	80007a0 <led_effect_2>
		break;
 8000dc2:	e005      	b.n	8000dd0 <led_effect_callback+0x48>
	case 3:
		led_effect_3();
 8000dc4:	f7ff fd02 	bl	80007cc <led_effect_3>
		break;
 8000dc8:	e002      	b.n	8000dd0 <led_effect_callback+0x48>
	case 4:
		led_effect_4();
 8000dca:	f7ff fd17 	bl	80007fc <led_effect_4>
		break;
 8000dce:	bf00      	nop
	}
}
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	if(! xQueueIsQueueFullFromISR(xQueueInputData))
 8000de0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e5c <HAL_UART_RxCpltCallback+0x84>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f005 fbf7 	bl	80065d8 <xQueueIsQueueFullFromISR>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d107      	bne.n	8000e00 <HAL_UART_RxCpltCallback+0x28>
	{
		/*Queue is not full */
		xQueueSendFromISR(xQueueInputData,(void *)&user_data,NULL);
 8000df0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <HAL_UART_RxCpltCallback+0x84>)
 8000df2:	6818      	ldr	r0, [r3, #0]
 8000df4:	2300      	movs	r3, #0
 8000df6:	2200      	movs	r2, #0
 8000df8:	4919      	ldr	r1, [pc, #100]	@ (8000e60 <HAL_UART_RxCpltCallback+0x88>)
 8000dfa:	f005 f84d 	bl	8005e98 <xQueueGenericSendFromISR>
 8000dfe:	e013      	b.n	8000e28 <HAL_UART_RxCpltCallback+0x50>

	}else{
		/*Queue is full */

		if(user_data == '\n')
 8000e00:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <HAL_UART_RxCpltCallback+0x88>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b0a      	cmp	r3, #10
 8000e08:	d10e      	bne.n	8000e28 <HAL_UART_RxCpltCallback+0x50>
		{
			/*user_data = '\n' */

			/* Make sure the last data byte of the queue is /n */
			xQueueReceiveFromISR(xQueueInputData,(void *)&dummy,NULL);
 8000e0a:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <HAL_UART_RxCpltCallback+0x84>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f107 010f 	add.w	r1, r7, #15
 8000e12:	2200      	movs	r2, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f005 f9ff 	bl	8006218 <xQueueReceiveFromISR>
			xQueueSendFromISR(xQueueInputData,(void *)&user_data,NULL);
 8000e1a:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <HAL_UART_RxCpltCallback+0x84>)
 8000e1c:	6818      	ldr	r0, [r3, #0]
 8000e1e:	2300      	movs	r3, #0
 8000e20:	2200      	movs	r2, #0
 8000e22:	490f      	ldr	r1, [pc, #60]	@ (8000e60 <HAL_UART_RxCpltCallback+0x88>)
 8000e24:	f005 f838 	bl	8005e98 <xQueueGenericSendFromISR>
		}
	}


	/*send notification to command handling task if user_data = '\n' */
	if(user_data == '\n')
 8000e28:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <HAL_UART_RxCpltCallback+0x88>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b0a      	cmp	r3, #10
 8000e30:	d10a      	bne.n	8000e48 <HAL_UART_RxCpltCallback+0x70>
	{
		xTaskNotifyFromISR(command_task_handle,0, eNoAction,NULL);
 8000e32:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <HAL_UART_RxCpltCallback+0x8c>)
 8000e34:	6818      	ldr	r0, [r3, #0]
 8000e36:	2300      	movs	r3, #0
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	2200      	movs	r2, #0
 8000e42:	2100      	movs	r1, #0
 8000e44:	f006 feda 	bl	8007bfc <xTaskGenericNotifyFromISR>
	}


	/*Enable UART data byte reception again in IT mode */
	HAL_UART_Receive_IT(&huart3, (uint8_t *)&user_data, 1);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4905      	ldr	r1, [pc, #20]	@ (8000e60 <HAL_UART_RxCpltCallback+0x88>)
 8000e4c:	4806      	ldr	r0, [pc, #24]	@ (8000e68 <HAL_UART_RxCpltCallback+0x90>)
 8000e4e:	f003 fada 	bl	8004406 <HAL_UART_Receive_IT>


}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000164 	.word	0x20000164
 8000e60:	20000180 	.word	0x20000180
 8000e64:	20000160 	.word	0x20000160
 8000e68:	200000c8 	.word	0x200000c8

08000e6c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d101      	bne.n	8000e82 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000e7e:	f000 ff83 	bl	8001d88 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40001000 	.word	0x40001000

08000e90 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <Error_Handler+0x8>

08000e9c <show_time_date_itm>:


#include "main.h"

 void show_time_date_itm(void)
 {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	@ 0x28
 8000ea0:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000ea2:	f107 0318 	add.w	r3, r7, #24
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f008 fab1 	bl	8009412 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2214      	movs	r2, #20
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f008 faab 	bl	8009412 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4815      	ldr	r0, [pc, #84]	@ (8000f18 <show_time_date_itm+0x7c>)
 8000ec4:	f002 fd04 	bl	80038d0 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000ec8:	f107 0318 	add.w	r3, r7, #24
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4811      	ldr	r0, [pc, #68]	@ (8000f18 <show_time_date_itm+0x7c>)
 8000ed2:	f002 fddf 	bl	8003a94 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d101      	bne.n	8000ee0 <show_time_date_itm+0x44>
 8000edc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <show_time_date_itm+0x80>)
 8000ede:	e000      	b.n	8000ee2 <show_time_date_itm+0x46>
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <show_time_date_itm+0x84>)
 8000ee2:	61fb      	str	r3, [r7, #28]


	printf("%02d:%02d:%02d [%s]",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8000ee4:	793b      	ldrb	r3, [r7, #4]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	797b      	ldrb	r3, [r7, #5]
 8000eea:	461a      	mov	r2, r3
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	480b      	ldr	r0, [pc, #44]	@ (8000f24 <show_time_date_itm+0x88>)
 8000ef8:	f008 fa16 	bl	8009328 <iprintf>
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8000efc:	7e7b      	ldrb	r3, [r7, #25]
 8000efe:	4619      	mov	r1, r3
 8000f00:	7ebb      	ldrb	r3, [r7, #26]
 8000f02:	461a      	mov	r2, r3
 8000f04:	7efb      	ldrb	r3, [r7, #27]
 8000f06:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000f0a:	4807      	ldr	r0, [pc, #28]	@ (8000f28 <show_time_date_itm+0x8c>)
 8000f0c:	f008 fa0c 	bl	8009328 <iprintf>

 }
 8000f10:	bf00      	nop
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200000a8 	.word	0x200000a8
 8000f1c:	0800a428 	.word	0x0800a428
 8000f20:	0800a42c 	.word	0x0800a42c
 8000f24:	0800a430 	.word	0x0800a430
 8000f28:	0800a444 	.word	0x0800a444

08000f2c <show_time_date>:

void show_time_date(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	@ 0x30
 8000f30:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000f32:	f107 0318 	add.w	r3, r7, #24
 8000f36:	2204      	movs	r2, #4
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f008 fa69 	bl	8009412 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2214      	movs	r2, #20
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f008 fa63 	bl	8009412 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	4821      	ldr	r0, [pc, #132]	@ (8000fd8 <show_time_date+0xac>)
 8000f54:	f002 fcbc 	bl	80038d0 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	4619      	mov	r1, r3
 8000f60:	481d      	ldr	r0, [pc, #116]	@ (8000fd8 <show_time_date+0xac>)
 8000f62:	f002 fd97 	bl	8003a94 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d101      	bne.n	8000f70 <show_time_date+0x44>
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <show_time_date+0xb0>)
 8000f6e:	e000      	b.n	8000f72 <show_time_date+0x46>
 8000f70:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <show_time_date+0xb4>)
 8000f72:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8000f74:	793b      	ldrb	r3, [r7, #4]
 8000f76:	4618      	mov	r0, r3
 8000f78:	797b      	ldrb	r3, [r7, #5]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	79bb      	ldrb	r3, [r7, #6]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	9101      	str	r1, [sp, #4]
 8000f86:	9200      	str	r2, [sp, #0]
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a16      	ldr	r2, [pc, #88]	@ (8000fe4 <show_time_date+0xb8>)
 8000f8c:	4916      	ldr	r1, [pc, #88]	@ (8000fe8 <show_time_date+0xbc>)
 8000f8e:	4817      	ldr	r0, [pc, #92]	@ (8000fec <show_time_date+0xc0>)
 8000f90:	f008 f9dc 	bl	800934c <siprintf>
	xQueueSend(xQueuePrint,&time,portMAX_DELAY);
 8000f94:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <show_time_date+0xc4>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9e:	4915      	ldr	r1, [pc, #84]	@ (8000ff4 <show_time_date+0xc8>)
 8000fa0:	f004 fe54 	bl	8005c4c <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8000fa4:	7e7b      	ldrb	r3, [r7, #25]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	7ebb      	ldrb	r3, [r7, #26]
 8000faa:	4619      	mov	r1, r3
 8000fac:	7efb      	ldrb	r3, [r7, #27]
 8000fae:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4910      	ldr	r1, [pc, #64]	@ (8000ff8 <show_time_date+0xcc>)
 8000fb8:	4810      	ldr	r0, [pc, #64]	@ (8000ffc <show_time_date+0xd0>)
 8000fba:	f008 f9c7 	bl	800934c <siprintf>
	xQueueSend(xQueuePrint,&date,portMAX_DELAY);
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <show_time_date+0xc4>)
 8000fc0:	6818      	ldr	r0, [r3, #0]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	490d      	ldr	r1, [pc, #52]	@ (8001000 <show_time_date+0xd4>)
 8000fca:	f004 fe3f 	bl	8005c4c <xQueueGenericSend>
}
 8000fce:	bf00      	nop
 8000fd0:	3720      	adds	r7, #32
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000a8 	.word	0x200000a8
 8000fdc:	0800a428 	.word	0x0800a428
 8000fe0:	0800a42c 	.word	0x0800a42c
 8000fe4:	0800a454 	.word	0x0800a454
 8000fe8:	0800a468 	.word	0x0800a468
 8000fec:	20000184 	.word	0x20000184
 8000ff0:	20000168 	.word	0x20000168
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	0800a444 	.word	0x0800a444
 8000ffc:	200001ac 	.word	0x200001ac
 8001000:	2000000c 	.word	0x2000000c

08001004 <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 800101e:	2200      	movs	r2, #0
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	4803      	ldr	r0, [pc, #12]	@ (8001030 <rtc_configure_time+0x2c>)
 8001024:	f002 fbba 	bl	800379c <HAL_RTC_SetTime>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200000a8 	.word	0x200000a8

08001034 <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	4803      	ldr	r0, [pc, #12]	@ (8001050 <rtc_configure_date+0x1c>)
 8001042:	f002 fca3 	bl	800398c <HAL_RTC_SetDate>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200000a8 	.word	0x200000a8

08001054 <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
	if(time){
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00d      	beq.n	8001080 <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b0c      	cmp	r3, #12
 800106a:	d807      	bhi.n	800107c <validate_rtc_information+0x28>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	2b3b      	cmp	r3, #59	@ 0x3b
 8001072:	d803      	bhi.n	800107c <validate_rtc_information+0x28>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	789b      	ldrb	r3, [r3, #2]
 8001078:	2b3b      	cmp	r3, #59	@ 0x3b
 800107a:	d901      	bls.n	8001080 <validate_rtc_information+0x2c>
			return 1;
 800107c:	2301      	movs	r3, #1
 800107e:	e015      	b.n	80010ac <validate_rtc_information+0x58>
	}

	if(date){
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d011      	beq.n	80010aa <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	789b      	ldrb	r3, [r3, #2]
 800108a:	2b1f      	cmp	r3, #31
 800108c:	d80b      	bhi.n	80010a6 <validate_rtc_information+0x52>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b07      	cmp	r3, #7
 8001094:	d807      	bhi.n	80010a6 <validate_rtc_information+0x52>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	78db      	ldrb	r3, [r3, #3]
 800109a:	2b63      	cmp	r3, #99	@ 0x63
 800109c:	d803      	bhi.n	80010a6 <validate_rtc_information+0x52>
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	785b      	ldrb	r3, [r3, #1]
 80010a2:	2b0c      	cmp	r3, #12
 80010a4:	d901      	bls.n	80010aa <validate_rtc_information+0x56>
			return 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <validate_rtc_information+0x58>
	}

	return 0;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <HAL_MspInit+0x44>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c2:	4a0e      	ldr	r2, [pc, #56]	@ (80010fc <HAL_MspInit+0x44>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ca:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <HAL_MspInit+0x44>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <HAL_MspInit+0x44>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010da:	4a08      	ldr	r2, [pc, #32]	@ (80010fc <HAL_MspInit+0x44>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_MspInit+0x44>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800

08001100 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0a6      	sub	sp, #152	@ 0x98
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	2290      	movs	r2, #144	@ 0x90
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f008 f97e 	bl	8009412 <memset>
  if(hrtc->Instance==RTC)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a0e      	ldr	r2, [pc, #56]	@ (8001154 <HAL_RTC_MspInit+0x54>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d114      	bne.n	800114a <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001120:	2320      	movs	r3, #32
 8001122:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001124:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001128:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	4618      	mov	r0, r3
 8001130:	f001 fe88 	bl	8002e44 <HAL_RCCEx_PeriphCLKConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800113a:	f7ff fea9 	bl	8000e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_RTC_MspInit+0x58>)
 8001140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001142:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <HAL_RTC_MspInit+0x58>)
 8001144:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001148:	6713      	str	r3, [r2, #112]	@ 0x70

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800114a:	bf00      	nop
 800114c:	3798      	adds	r7, #152	@ 0x98
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40002800 	.word	0x40002800
 8001158:	40023800 	.word	0x40023800

0800115c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0ae      	sub	sp, #184	@ 0xb8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2290      	movs	r2, #144	@ 0x90
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f008 f948 	bl	8009412 <memset>
  if(huart->Instance==USART3)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a26      	ldr	r2, [pc, #152]	@ (8001220 <HAL_UART_MspInit+0xc4>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d144      	bne.n	8001216 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800118c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001190:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001192:	2300      	movs	r3, #0
 8001194:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4618      	mov	r0, r3
 800119c:	f001 fe52 	bl	8002e44 <HAL_RCCEx_PeriphCLKConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011a6:	f7ff fe73 	bl	8000e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <HAL_UART_MspInit+0xc8>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001224 <HAL_UART_MspInit+0xc8>)
 80011b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <HAL_UART_MspInit+0xc8>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c2:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <HAL_UART_MspInit+0xc8>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a17      	ldr	r2, [pc, #92]	@ (8001224 <HAL_UART_MspInit+0xc8>)
 80011c8:	f043 0308 	orr.w	r3, r3, #8
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <HAL_UART_MspInit+0xc8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011f4:	2307      	movs	r3, #7
 80011f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011fe:	4619      	mov	r1, r3
 8001200:	4809      	ldr	r0, [pc, #36]	@ (8001228 <HAL_UART_MspInit+0xcc>)
 8001202:	f000 ff55 	bl	80020b0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 7, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2107      	movs	r1, #7
 800120a:	2027      	movs	r0, #39	@ 0x27
 800120c:	f000 fe94 	bl	8001f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001210:	2027      	movs	r0, #39	@ 0x27
 8001212:	f000 fead 	bl	8001f70 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001216:	bf00      	nop
 8001218:	37b8      	adds	r7, #184	@ 0xb8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40004800 	.word	0x40004800
 8001224:	40023800 	.word	0x40023800
 8001228:	40020c00 	.word	0x40020c00

0800122c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08e      	sub	sp, #56	@ 0x38
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001234:	2300      	movs	r3, #0
 8001236:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001238:	2300      	movs	r3, #0
 800123a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800123c:	4b33      	ldr	r3, [pc, #204]	@ (800130c <HAL_InitTick+0xe0>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001240:	4a32      	ldr	r2, [pc, #200]	@ (800130c <HAL_InitTick+0xe0>)
 8001242:	f043 0310 	orr.w	r3, r3, #16
 8001246:	6413      	str	r3, [r2, #64]	@ 0x40
 8001248:	4b30      	ldr	r3, [pc, #192]	@ (800130c <HAL_InitTick+0xe0>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001254:	f107 0210 	add.w	r2, r7, #16
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f001 fdbe 	bl	8002de0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800126a:	2b00      	cmp	r3, #0
 800126c:	d103      	bne.n	8001276 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800126e:	f001 fd8f 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8001272:	6378      	str	r0, [r7, #52]	@ 0x34
 8001274:	e004      	b.n	8001280 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001276:	f001 fd8b 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 800127a:	4603      	mov	r3, r0
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001282:	4a23      	ldr	r2, [pc, #140]	@ (8001310 <HAL_InitTick+0xe4>)
 8001284:	fba2 2303 	umull	r2, r3, r2, r3
 8001288:	0c9b      	lsrs	r3, r3, #18
 800128a:	3b01      	subs	r3, #1
 800128c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800128e:	4b21      	ldr	r3, [pc, #132]	@ (8001314 <HAL_InitTick+0xe8>)
 8001290:	4a21      	ldr	r2, [pc, #132]	@ (8001318 <HAL_InitTick+0xec>)
 8001292:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001294:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <HAL_InitTick+0xe8>)
 8001296:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800129a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800129c:	4a1d      	ldr	r2, [pc, #116]	@ (8001314 <HAL_InitTick+0xe8>)
 800129e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001314 <HAL_InitTick+0xe8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <HAL_InitTick+0xe8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ae:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <HAL_InitTick+0xe8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80012b4:	4817      	ldr	r0, [pc, #92]	@ (8001314 <HAL_InitTick+0xe8>)
 80012b6:	f002 fcfb 	bl	8003cb0 <HAL_TIM_Base_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80012c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d11b      	bne.n	8001300 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80012c8:	4812      	ldr	r0, [pc, #72]	@ (8001314 <HAL_InitTick+0xe8>)
 80012ca:	f002 fd53 	bl	8003d74 <HAL_TIM_Base_Start_IT>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80012d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d111      	bne.n	8001300 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012dc:	2036      	movs	r0, #54	@ 0x36
 80012de:	f000 fe47 	bl	8001f70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d808      	bhi.n	80012fa <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	2036      	movs	r0, #54	@ 0x36
 80012ee:	f000 fe23 	bl	8001f38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012f2:	4a0a      	ldr	r2, [pc, #40]	@ (800131c <HAL_InitTick+0xf0>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	e002      	b.n	8001300 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001300:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001304:	4618      	mov	r0, r3
 8001306:	3738      	adds	r7, #56	@ 0x38
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	431bde83 	.word	0x431bde83
 8001314:	200001d4 	.word	0x200001d4
 8001318:	40001000 	.word	0x40001000
 800131c:	20000018 	.word	0x20000018

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <NMI_Handler+0x4>

08001328 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <HardFault_Handler+0x4>

08001330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <MemManage_Handler+0x4>

08001338 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <UsageFault_Handler+0x4>

08001348 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <USART3_IRQHandler+0x10>)
 800135e:	f003 f897 	bl	8004490 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200000c8 	.word	0x200000c8

0800136c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001370:	4802      	ldr	r0, [pc, #8]	@ (800137c <TIM6_DAC_IRQHandler+0x10>)
 8001372:	f002 fd77 	bl	8003e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200001d4 	.word	0x200001d4

08001380 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	e00a      	b.n	80013a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001392:	f3af 8000 	nop.w
 8001396:	4601      	mov	r1, r0
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	60ba      	str	r2, [r7, #8]
 800139e:	b2ca      	uxtb	r2, r1
 80013a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3301      	adds	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	dbf0      	blt.n	8001392 <_read+0x12>
  }

  return len;
 80013b0:	687b      	ldr	r3, [r7, #4]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e009      	b.n	80013e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	60ba      	str	r2, [r7, #8]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3301      	adds	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbf1      	blt.n	80013cc <_write+0x12>
  }
  return len;
 80013e8:	687b      	ldr	r3, [r7, #4]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_close>:

int _close(int file)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800141a:	605a      	str	r2, [r3, #4]
  return 0;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <_isatty>:

int _isatty(int file)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001464:	4a14      	ldr	r2, [pc, #80]	@ (80014b8 <_sbrk+0x5c>)
 8001466:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <_sbrk+0x60>)
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001470:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d102      	bne.n	800147e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001478:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <_sbrk+0x64>)
 800147a:	4a12      	ldr	r2, [pc, #72]	@ (80014c4 <_sbrk+0x68>)
 800147c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147e:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	429a      	cmp	r2, r3
 800148a:	d207      	bcs.n	800149c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800148c:	f008 f810 	bl	80094b0 <__errno>
 8001490:	4603      	mov	r3, r0
 8001492:	220c      	movs	r2, #12
 8001494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	e009      	b.n	80014b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800149c:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a2:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	4a05      	ldr	r2, [pc, #20]	@ (80014c0 <_sbrk+0x64>)
 80014ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ae:	68fb      	ldr	r3, [r7, #12]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20080000 	.word	0x20080000
 80014bc:	00000400 	.word	0x00000400
 80014c0:	20000220 	.word	0x20000220
 80014c4:	2000bd20 	.word	0x2000bd20

080014c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <SystemInit+0x20>)
 80014ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014d2:	4a05      	ldr	r2, [pc, #20]	@ (80014e8 <SystemInit+0x20>)
 80014d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <menu_task_handler>:
void process_command (command_t *cmd);

const char* msg_invalid = "!!!!!! Invalid Option !!!!!!\n";

void menu_task_handler(void* parameters)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	6078      	str	r0, [r7, #4]

	command_t *cmd;

	int option;

	const char* msg_menu = "=================================\n"
 80014f4:	4b31      	ldr	r3, [pc, #196]	@ (80015bc <menu_task_handler+0xd0>)
 80014f6:	60bb      	str	r3, [r7, #8]
			"Date and Time  -------> 1\n"
			"Exit  		-------> 2\n"
			"Enter your choice here : ";
	while (1)
	{
		xQueueSend(xQueuePrint,&msg_menu,portMAX_DELAY);
 80014f8:	4b31      	ldr	r3, [pc, #196]	@ (80015c0 <menu_task_handler+0xd4>)
 80014fa:	6818      	ldr	r0, [r3, #0]
 80014fc:	f107 0108 	add.w	r1, r7, #8
 8001500:	2300      	movs	r3, #0
 8001502:	f04f 32ff 	mov.w	r2, #4294967295
 8001506:	f004 fba1 	bl	8005c4c <xQueueGenericSend>

		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	f04f 32ff 	mov.w	r2, #4294967295
 8001512:	9200      	str	r2, [sp, #0]
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	2000      	movs	r0, #0
 800151a:	f006 f9a9 	bl	8007870 <xTaskGenericNotifyWait>

		cmd = (command_t *)cmd_addr;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	617b      	str	r3, [r7, #20]

		if (cmd->Len == 1)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d133      	bne.n	8001592 <menu_task_handler+0xa6>
		{
			option = cmd->payload[0] - 48;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	3b30      	subs	r3, #48	@ 0x30
 8001530:	613b      	str	r3, [r7, #16]

			switch(option)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d035      	beq.n	80015a4 <menu_task_handler+0xb8>
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b02      	cmp	r3, #2
 800153c:	dc20      	bgt.n	8001580 <menu_task_handler+0x94>
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <menu_task_handler+0x60>
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d00d      	beq.n	8001566 <menu_task_handler+0x7a>
 800154a:	e019      	b.n	8001580 <menu_task_handler+0x94>
			{
			case 0:
				curr_state = sLedEffect;
 800154c:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <menu_task_handler+0xd8>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
				xTaskNotify(led_task_handle,0,eNoAction);
 8001552:	4b1d      	ldr	r3, [pc, #116]	@ (80015c8 <menu_task_handler+0xdc>)
 8001554:	6818      	ldr	r0, [r3, #0]
 8001556:	2300      	movs	r3, #0
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	2300      	movs	r3, #0
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	f006 fa1a 	bl	8007998 <xTaskGenericNotify>
				break;
 8001564:	e01f      	b.n	80015a6 <menu_task_handler+0xba>

			case 1:
				curr_state = sRtcMenu;
 8001566:	4b17      	ldr	r3, [pc, #92]	@ (80015c4 <menu_task_handler+0xd8>)
 8001568:	2202      	movs	r2, #2
 800156a:	701a      	strb	r2, [r3, #0]
				xTaskNotify(rtc_task_handle,0,eNoAction);
 800156c:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <menu_task_handler+0xe0>)
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	2300      	movs	r3, #0
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2300      	movs	r3, #0
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	f006 fa0d 	bl	8007998 <xTaskGenericNotify>

			case 2: /* Implement exit */
				break;
 800157e:	e011      	b.n	80015a4 <menu_task_handler+0xb8>

			default:
				xQueueSend(xQueuePrint,&msg_invalid,portMAX_DELAY);
 8001580:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <menu_task_handler+0xd4>)
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	2300      	movs	r3, #0
 8001586:	f04f 32ff 	mov.w	r2, #4294967295
 800158a:	4911      	ldr	r1, [pc, #68]	@ (80015d0 <menu_task_handler+0xe4>)
 800158c:	f004 fb5e 	bl	8005c4c <xQueueGenericSend>
				continue;
 8001590:	e012      	b.n	80015b8 <menu_task_handler+0xcc>

		}
		else
		{
			// invalid entry
			xQueueSend(xQueuePrint,&msg_invalid,portMAX_DELAY);
 8001592:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <menu_task_handler+0xd4>)
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	2300      	movs	r3, #0
 8001598:	f04f 32ff 	mov.w	r2, #4294967295
 800159c:	490c      	ldr	r1, [pc, #48]	@ (80015d0 <menu_task_handler+0xe4>)
 800159e:	f004 fb55 	bl	8005c4c <xQueueGenericSend>
			continue;
 80015a2:	e009      	b.n	80015b8 <menu_task_handler+0xcc>
				break;
 80015a4:	bf00      	nop
		}

		//Wait to run again when some other task notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2300      	movs	r3, #0
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	2000      	movs	r0, #0
 80015b4:	f006 f95c 	bl	8007870 <xTaskGenericNotifyWait>
		xQueueSend(xQueuePrint,&msg_menu,portMAX_DELAY);
 80015b8:	e79e      	b.n	80014f8 <menu_task_handler+0xc>
 80015ba:	bf00      	nop
 80015bc:	0800a4a0 	.word	0x0800a4a0
 80015c0:	20000168 	.word	0x20000168
 80015c4:	20000181 	.word	0x20000181
 80015c8:	20000154 	.word	0x20000154
 80015cc:	20000158 	.word	0x20000158
 80015d0:	20000014 	.word	0x20000014

080015d4 <led_task_handler>:
	}

}

void led_task_handler(void* parameters)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af02      	add	r7, sp, #8
 80015da:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 80015dc:	4b3e      	ldr	r3, [pc, #248]	@ (80016d8 <led_task_handler+0x104>)
 80015de:	60fb      	str	r3, [r7, #12]
			"(none,e1,e2,e3,e4)\n"
			"Enter your choice here : ";

	while(1){
		/* Wait for notification (Notify wait) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2300      	movs	r3, #0
 80015e8:	2200      	movs	r2, #0
 80015ea:	2100      	movs	r1, #0
 80015ec:	2000      	movs	r0, #0
 80015ee:	f006 f93f 	bl	8007870 <xTaskGenericNotifyWait>

		/* Print LED menu */
		xQueueSend(xQueuePrint,&msg_led,portMAX_DELAY);
 80015f2:	4b3a      	ldr	r3, [pc, #232]	@ (80016dc <led_task_handler+0x108>)
 80015f4:	6818      	ldr	r0, [r3, #0]
 80015f6:	f107 010c 	add.w	r1, r7, #12
 80015fa:	2300      	movs	r3, #0
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001600:	f004 fb24 	bl	8005c4c <xQueueGenericSend>

		/* wait for LED command (Notify wait) */
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	2000      	movs	r0, #0
 8001614:	f006 f92c 	bl	8007870 <xTaskGenericNotifyWait>

		cmd = (command_t*)cmd_addr;
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	617b      	str	r3, [r7, #20]

		if(cmd->Len <= 4)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b04      	cmp	r3, #4
 8001622:	d843      	bhi.n	80016ac <led_task_handler+0xd8>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	492e      	ldr	r1, [pc, #184]	@ (80016e0 <led_task_handler+0x10c>)
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe fe09 	bl	8000240 <strcmp>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <led_task_handler+0x66>
				led_effect_stop();
 8001634:	f7fe ffe4 	bl	8000600 <led_effect_stop>
 8001638:	e040      	b.n	80016bc <led_task_handler+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	4929      	ldr	r1, [pc, #164]	@ (80016e4 <led_task_handler+0x110>)
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe fdfe 	bl	8000240 <strcmp>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d103      	bne.n	8001652 <led_task_handler+0x7e>
				led_effect(1);
 800164a:	2001      	movs	r0, #1
 800164c:	f7fe fff8 	bl	8000640 <led_effect>
 8001650:	e034      	b.n	80016bc <led_task_handler+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	4924      	ldr	r1, [pc, #144]	@ (80016e8 <led_task_handler+0x114>)
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fdf2 	bl	8000240 <strcmp>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d103      	bne.n	800166a <led_task_handler+0x96>
				led_effect(2);
 8001662:	2002      	movs	r0, #2
 8001664:	f7fe ffec 	bl	8000640 <led_effect>
 8001668:	e028      	b.n	80016bc <led_task_handler+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	491f      	ldr	r1, [pc, #124]	@ (80016ec <led_task_handler+0x118>)
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe fde6 	bl	8000240 <strcmp>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d103      	bne.n	8001682 <led_task_handler+0xae>
				led_effect(3);
 800167a:	2003      	movs	r0, #3
 800167c:	f7fe ffe0 	bl	8000640 <led_effect>
 8001680:	e01c      	b.n	80016bc <led_task_handler+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	491a      	ldr	r1, [pc, #104]	@ (80016f0 <led_task_handler+0x11c>)
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe fdda 	bl	8000240 <strcmp>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d103      	bne.n	800169a <led_task_handler+0xc6>
				led_effect(4);
 8001692:	2004      	movs	r0, #4
 8001694:	f7fe ffd4 	bl	8000640 <led_effect>
 8001698:	e010      	b.n	80016bc <led_task_handler+0xe8>
			else
				/* print invalid message */
				xQueueSend(xQueuePrint,&msg_invalid,portMAX_DELAY);
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <led_task_handler+0x108>)
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	2300      	movs	r3, #0
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295
 80016a4:	4913      	ldr	r1, [pc, #76]	@ (80016f4 <led_task_handler+0x120>)
 80016a6:	f004 fad1 	bl	8005c4c <xQueueGenericSend>
 80016aa:	e007      	b.n	80016bc <led_task_handler+0xe8>
		}else
			/* print invalid message */
			xQueueSend(xQueuePrint,&msg_invalid,portMAX_DELAY);
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <led_task_handler+0x108>)
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	2300      	movs	r3, #0
 80016b2:	f04f 32ff 	mov.w	r2, #4294967295
 80016b6:	490f      	ldr	r1, [pc, #60]	@ (80016f4 <led_task_handler+0x120>)
 80016b8:	f004 fac8 	bl	8005c4c <xQueueGenericSend>

		/* update state variable */
		curr_state = sMainMenu;
 80016bc:	4b0e      	ldr	r3, [pc, #56]	@ (80016f8 <led_task_handler+0x124>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]

		/* Notify menu task */
		xTaskNotify(menu_task_handle,0,eNoAction);
 80016c2:	4b0e      	ldr	r3, [pc, #56]	@ (80016fc <led_task_handler+0x128>)
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	2300      	movs	r3, #0
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2300      	movs	r3, #0
 80016cc:	2200      	movs	r2, #0
 80016ce:	2100      	movs	r1, #0
 80016d0:	f006 f962 	bl	8007998 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80016d4:	e784      	b.n	80015e0 <led_task_handler+0xc>
 80016d6:	bf00      	nop
 80016d8:	0800a54c 	.word	0x0800a54c
 80016dc:	20000168 	.word	0x20000168
 80016e0:	0800a5c4 	.word	0x0800a5c4
 80016e4:	0800a5cc 	.word	0x0800a5cc
 80016e8:	0800a5d0 	.word	0x0800a5d0
 80016ec:	0800a5d4 	.word	0x0800a5d4
 80016f0:	0800a5d8 	.word	0x0800a5d8
 80016f4:	20000014 	.word	0x20000014
 80016f8:	20000181 	.word	0x20000181
 80016fc:	20000150 	.word	0x20000150

08001700 <getnumber>:

	}
}

uint8_t getnumber(uint8_t *p , int len)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]

	int value ;

	if(len > 1)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2b01      	cmp	r3, #1
 800170e:	dd0f      	ble.n	8001730 <getnumber+0x30>
	   value =  ( ((p[0]-48) * 10) + (p[1] - 48) );
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	461a      	mov	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3301      	adds	r3, #1
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	3b30      	subs	r3, #48	@ 0x30
 800172a:	4413      	add	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	e003      	b.n	8001738 <getnumber+0x38>
	else
		value = p[0] - 48;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	3b30      	subs	r3, #48	@ 0x30
 8001736:	60fb      	str	r3, [r7, #12]

	return value;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	b2db      	uxtb	r3, r3

}
 800173c:	4618      	mov	r0, r3
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <rtc_task_handler>:


void rtc_task_handler(void* parameters)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b09b      	sub	sp, #108	@ 0x6c
 800174c:	af02      	add	r7, sp, #8
 800174e:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 8001750:	4bb3      	ldr	r3, [pc, #716]	@ (8001a20 <rtc_task_handler+0x2d8>)
 8001752:	64fb      	str	r3, [r7, #76]	@ 0x4c
			"|         RTC          |\n"
			"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 8001754:	4bb3      	ldr	r3, [pc, #716]	@ (8001a24 <rtc_task_handler+0x2dc>)
 8001756:	64bb      	str	r3, [r7, #72]	@ 0x48
			"Enable reporting          ----> 2\n"
			"Exit                      ----> 4\n"
			"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 8001758:	4bb3      	ldr	r3, [pc, #716]	@ (8001a28 <rtc_task_handler+0x2e0>)
 800175a:	647b      	str	r3, [r7, #68]	@ 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 800175c:	4bb3      	ldr	r3, [pc, #716]	@ (8001a2c <rtc_task_handler+0x2e4>)
 800175e:	643b      	str	r3, [r7, #64]	@ 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 8001760:	4bb3      	ldr	r3, [pc, #716]	@ (8001a30 <rtc_task_handler+0x2e8>)
 8001762:	63fb      	str	r3, [r7, #60]	@ 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 8001764:	4bb3      	ldr	r3, [pc, #716]	@ (8001a34 <rtc_task_handler+0x2ec>)
 8001766:	63bb      	str	r3, [r7, #56]	@ 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 8001768:	4bb3      	ldr	r3, [pc, #716]	@ (8001a38 <rtc_task_handler+0x2f0>)
 800176a:	637b      	str	r3, [r7, #52]	@ 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 800176c:	4bb3      	ldr	r3, [pc, #716]	@ (8001a3c <rtc_task_handler+0x2f4>)
 800176e:	633b      	str	r3, [r7, #48]	@ 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 8001770:	4bb3      	ldr	r3, [pc, #716]	@ (8001a40 <rtc_task_handler+0x2f8>)
 8001772:	62fb      	str	r3, [r7, #44]	@ 0x2c

	const char *msg_conf = "Configuration successful\n";
 8001774:	4bb3      	ldr	r3, [pc, #716]	@ (8001a44 <rtc_task_handler+0x2fc>)
 8001776:	62bb      	str	r3, [r7, #40]	@ 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8001778:	4bb3      	ldr	r3, [pc, #716]	@ (8001a48 <rtc_task_handler+0x300>)
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
#define DAY_CONFIG 		3


	while(1){
		/* Notify wait (wait till someone notifies)			 */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2300      	movs	r3, #0
 8001784:	2200      	movs	r2, #0
 8001786:	2100      	movs	r1, #0
 8001788:	2000      	movs	r0, #0
 800178a:	f006 f871 	bl	8007870 <xTaskGenericNotifyWait>

		/* Print the menu and show current date and time information */
		xQueueSend(xQueuePrint,&msg_rtc1,portMAX_DELAY);
 800178e:	4baf      	ldr	r3, [pc, #700]	@ (8001a4c <rtc_task_handler+0x304>)
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001796:	2300      	movs	r3, #0
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	f004 fa56 	bl	8005c4c <xQueueGenericSend>
		show_time_date();
 80017a0:	f7ff fbc4 	bl	8000f2c <show_time_date>
		xQueueSend(xQueuePrint,&msg_rtc2,portMAX_DELAY);
 80017a4:	4ba9      	ldr	r3, [pc, #676]	@ (8001a4c <rtc_task_handler+0x304>)
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80017ac:	2300      	movs	r3, #0
 80017ae:	f04f 32ff 	mov.w	r2, #4294967295
 80017b2:	f004 fa4b 	bl	8005c4c <xQueueGenericSend>


		while(curr_state != sMainMenu){
 80017b6:	e1e7      	b.n	8001b88 <rtc_task_handler+0x440>

			/* Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80017b8:	f107 0320 	add.w	r3, r7, #32
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	9200      	str	r2, [sp, #0]
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	2000      	movs	r0, #0
 80017c8:	f006 f852 	bl	8007870 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	65fb      	str	r3, [r7, #92]	@ 0x5c

			switch(curr_state)
 80017d0:	4b9f      	ldr	r3, [pc, #636]	@ (8001a50 <rtc_task_handler+0x308>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	3b02      	subs	r3, #2
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	f200 81d6 	bhi.w	8001b88 <rtc_task_handler+0x440>
 80017dc:	a201      	add	r2, pc, #4	@ (adr r2, 80017e4 <rtc_task_handler+0x9c>)
 80017de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e2:	bf00      	nop
 80017e4:	080017f5 	.word	0x080017f5
 80017e8:	080018a9 	.word	0x080018a9
 80017ec:	08001997 	.word	0x08001997
 80017f0:	08001aff 	.word	0x08001aff
			{
			case sRtcMenu:{

				/*process RTC menu commands */
				if(cmd->Len == 1)
 80017f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d148      	bne.n	800188e <rtc_task_handler+0x146>
				{
					menu_code = cmd->payload[0] - 48;
 80017fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	3b30      	subs	r3, #48	@ 0x30
 8001802:	653b      	str	r3, [r7, #80]	@ 0x50
 8001804:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001806:	2b03      	cmp	r3, #3
 8001808:	d835      	bhi.n	8001876 <rtc_task_handler+0x12e>
 800180a:	a201      	add	r2, pc, #4	@ (adr r2, 8001810 <rtc_task_handler+0xc8>)
 800180c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001810:	08001821 	.word	0x08001821
 8001814:	0800183b 	.word	0x0800183b
 8001818:	08001855 	.word	0x08001855
 800181c:	0800186f 	.word	0x0800186f
					switch(menu_code)
					{
					case 0:
						curr_state = sRtcTimeConfig;
 8001820:	4b8b      	ldr	r3, [pc, #556]	@ (8001a50 <rtc_task_handler+0x308>)
 8001822:	2203      	movs	r2, #3
 8001824:	701a      	strb	r2, [r3, #0]
						xQueueSend(xQueuePrint,&msg_rtc_hh,portMAX_DELAY);
 8001826:	4b89      	ldr	r3, [pc, #548]	@ (8001a4c <rtc_task_handler+0x304>)
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800182e:	2300      	movs	r3, #0
 8001830:	f04f 32ff 	mov.w	r2, #4294967295
 8001834:	f004 fa0a 	bl	8005c4c <xQueueGenericSend>
						break;
 8001838:	e035      	b.n	80018a6 <rtc_task_handler+0x15e>
					case 1:
						curr_state = sRtcDateConfig;
 800183a:	4b85      	ldr	r3, [pc, #532]	@ (8001a50 <rtc_task_handler+0x308>)
 800183c:	2204      	movs	r2, #4
 800183e:	701a      	strb	r2, [r3, #0]
						xQueueSend(xQueuePrint,&msg_rtc_dd,portMAX_DELAY);
 8001840:	4b82      	ldr	r3, [pc, #520]	@ (8001a4c <rtc_task_handler+0x304>)
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001848:	2300      	movs	r3, #0
 800184a:	f04f 32ff 	mov.w	r2, #4294967295
 800184e:	f004 f9fd 	bl	8005c4c <xQueueGenericSend>
						break;
 8001852:	e028      	b.n	80018a6 <rtc_task_handler+0x15e>
					case 2 :
						curr_state = sRtcReport;
 8001854:	4b7e      	ldr	r3, [pc, #504]	@ (8001a50 <rtc_task_handler+0x308>)
 8001856:	2205      	movs	r2, #5
 8001858:	701a      	strb	r2, [r3, #0]
						xQueueSend(xQueuePrint,&msg_rtc_report,portMAX_DELAY);
 800185a:	4b7c      	ldr	r3, [pc, #496]	@ (8001a4c <rtc_task_handler+0x304>)
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001862:	2300      	movs	r3, #0
 8001864:	f04f 32ff 	mov.w	r2, #4294967295
 8001868:	f004 f9f0 	bl	8005c4c <xQueueGenericSend>
						break;
 800186c:	e01b      	b.n	80018a6 <rtc_task_handler+0x15e>
					case 3 :
						curr_state = sMainMenu;
 800186e:	4b78      	ldr	r3, [pc, #480]	@ (8001a50 <rtc_task_handler+0x308>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
						break;
 8001874:	e017      	b.n	80018a6 <rtc_task_handler+0x15e>
					default:
						curr_state = sMainMenu;
 8001876:	4b76      	ldr	r3, [pc, #472]	@ (8001a50 <rtc_task_handler+0x308>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
						xQueueSend(xQueuePrint,&msg_invalid,portMAX_DELAY);
 800187c:	4b73      	ldr	r3, [pc, #460]	@ (8001a4c <rtc_task_handler+0x304>)
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	2300      	movs	r3, #0
 8001882:	f04f 32ff 	mov.w	r2, #4294967295
 8001886:	4973      	ldr	r1, [pc, #460]	@ (8001a54 <rtc_task_handler+0x30c>)
 8001888:	f004 f9e0 	bl	8005c4c <xQueueGenericSend>

				}else{
					curr_state = sMainMenu;
					xQueueSend(xQueuePrint,&msg_invalid,portMAX_DELAY);
				}
				break;}
 800188c:	e17c      	b.n	8001b88 <rtc_task_handler+0x440>
					curr_state = sMainMenu;
 800188e:	4b70      	ldr	r3, [pc, #448]	@ (8001a50 <rtc_task_handler+0x308>)
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
					xQueueSend(xQueuePrint,&msg_invalid,portMAX_DELAY);
 8001894:	4b6d      	ldr	r3, [pc, #436]	@ (8001a4c <rtc_task_handler+0x304>)
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	2300      	movs	r3, #0
 800189a:	f04f 32ff 	mov.w	r2, #4294967295
 800189e:	496d      	ldr	r1, [pc, #436]	@ (8001a54 <rtc_task_handler+0x30c>)
 80018a0:	f004 f9d4 	bl	8005c4c <xQueueGenericSend>
				break;}
 80018a4:	e170      	b.n	8001b88 <rtc_task_handler+0x440>
 80018a6:	e16f      	b.n	8001b88 <rtc_task_handler+0x440>

			case sRtcTimeConfig:{
				/* get hh, mm, ss infor and configure RTC */

				/* take care of invalid entries */
				switch(rtc_state)
 80018a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001a58 <rtc_task_handler+0x310>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d03b      	beq.n	8001928 <rtc_task_handler+0x1e0>
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	f300 8166 	bgt.w	8001b82 <rtc_task_handler+0x43a>
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <rtc_task_handler+0x178>
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d01a      	beq.n	80018f4 <rtc_task_handler+0x1ac>

					curr_state = sMainMenu;
					rtc_state = 0;
					break;}
				}
				break;}
 80018be:	e160      	b.n	8001b82 <rtc_task_handler+0x43a>
					uint8_t hour = getnumber(cmd->payload , cmd->Len);
 80018c0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80018c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	4619      	mov	r1, r3
 80018c8:	4610      	mov	r0, r2
 80018ca:	f7ff ff19 	bl	8001700 <getnumber>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					time.Hours = hour;
 80018d4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80018d8:	733b      	strb	r3, [r7, #12]
					rtc_state = MM_CONFIG;
 80018da:	4b5f      	ldr	r3, [pc, #380]	@ (8001a58 <rtc_task_handler+0x310>)
 80018dc:	2201      	movs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]
					xQueueSend(xQueuePrint,&msg_rtc_mm,portMAX_DELAY);
 80018e0:	4b5a      	ldr	r3, [pc, #360]	@ (8001a4c <rtc_task_handler+0x304>)
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80018e8:	2300      	movs	r3, #0
 80018ea:	f04f 32ff 	mov.w	r2, #4294967295
 80018ee:	f004 f9ad 	bl	8005c4c <xQueueGenericSend>
					break;}
 80018f2:	e04f      	b.n	8001994 <rtc_task_handler+0x24c>
					uint8_t min = getnumber(cmd->payload , cmd->Len);
 80018f4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80018f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	4619      	mov	r1, r3
 80018fc:	4610      	mov	r0, r2
 80018fe:	f7ff feff 	bl	8001700 <getnumber>
 8001902:	4603      	mov	r3, r0
 8001904:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
					time.Minutes = min;
 8001908:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800190c:	737b      	strb	r3, [r7, #13]
					rtc_state = SS_CONFIG;
 800190e:	4b52      	ldr	r3, [pc, #328]	@ (8001a58 <rtc_task_handler+0x310>)
 8001910:	2202      	movs	r2, #2
 8001912:	601a      	str	r2, [r3, #0]
					xQueueSend(xQueuePrint,&msg_rtc_ss,portMAX_DELAY);
 8001914:	4b4d      	ldr	r3, [pc, #308]	@ (8001a4c <rtc_task_handler+0x304>)
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800191c:	2300      	movs	r3, #0
 800191e:	f04f 32ff 	mov.w	r2, #4294967295
 8001922:	f004 f993 	bl	8005c4c <xQueueGenericSend>
					break;}
 8001926:	e035      	b.n	8001994 <rtc_task_handler+0x24c>
					uint8_t sec = getnumber(cmd->payload , cmd->Len);
 8001928:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800192a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	4619      	mov	r1, r3
 8001930:	4610      	mov	r0, r2
 8001932:	f7ff fee5 	bl	8001700 <getnumber>
 8001936:	4603      	mov	r3, r0
 8001938:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					time.Seconds = sec;
 800193c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001940:	73bb      	strb	r3, [r7, #14]
					if(!validate_rtc_information(&time,NULL))
 8001942:	f107 030c 	add.w	r3, r7, #12
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fb83 	bl	8001054 <validate_rtc_information>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d110      	bne.n	8001976 <rtc_task_handler+0x22e>
						rtc_configure_time(&time);
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fb53 	bl	8001004 <rtc_configure_time>
						xQueueSend(xQueuePrint,&msg_conf,portMAX_DELAY);
 800195e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a4c <rtc_task_handler+0x304>)
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001966:	2300      	movs	r3, #0
 8001968:	f04f 32ff 	mov.w	r2, #4294967295
 800196c:	f004 f96e 	bl	8005c4c <xQueueGenericSend>
						show_time_date();
 8001970:	f7ff fadc 	bl	8000f2c <show_time_date>
 8001974:	e007      	b.n	8001986 <rtc_task_handler+0x23e>
						xQueueSend(xQueuePrint,&msg_invalid,portMAX_DELAY);
 8001976:	4b35      	ldr	r3, [pc, #212]	@ (8001a4c <rtc_task_handler+0x304>)
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	2300      	movs	r3, #0
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	4934      	ldr	r1, [pc, #208]	@ (8001a54 <rtc_task_handler+0x30c>)
 8001982:	f004 f963 	bl	8005c4c <xQueueGenericSend>
					curr_state = sMainMenu;
 8001986:	4b32      	ldr	r3, [pc, #200]	@ (8001a50 <rtc_task_handler+0x308>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
					rtc_state = 0;
 800198c:	4b32      	ldr	r3, [pc, #200]	@ (8001a58 <rtc_task_handler+0x310>)
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
					break;}
 8001992:	bf00      	nop
				break;}
 8001994:	e0f5      	b.n	8001b82 <rtc_task_handler+0x43a>
			case sRtcDateConfig:{

				/* get date, month, day , year info and configure RTC */

				/* take care of invalid entries */
				switch(rtc_state)
 8001996:	4b30      	ldr	r3, [pc, #192]	@ (8001a58 <rtc_task_handler+0x310>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b03      	cmp	r3, #3
 800199c:	f200 80f3 	bhi.w	8001b86 <rtc_task_handler+0x43e>
 80019a0:	a201      	add	r2, pc, #4	@ (adr r2, 80019a8 <rtc_task_handler+0x260>)
 80019a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a6:	bf00      	nop
 80019a8:	080019b9 	.word	0x080019b9
 80019ac:	080019ed 	.word	0x080019ed
 80019b0:	08001a91 	.word	0x08001a91
 80019b4:	08001a5d 	.word	0x08001a5d
				{
				case DATE_CONFIG:{
					uint8_t d = getnumber(cmd->payload , cmd->Len);
 80019b8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80019ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	4619      	mov	r1, r3
 80019c0:	4610      	mov	r0, r2
 80019c2:	f7ff fe9d 	bl	8001700 <getnumber>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
					date.Date = d;
 80019cc:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80019d0:	72bb      	strb	r3, [r7, #10]
					rtc_state = MONTH_CONFIG;
 80019d2:	4b21      	ldr	r3, [pc, #132]	@ (8001a58 <rtc_task_handler+0x310>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
					xQueueSend(xQueuePrint,&msg_rtc_mo,portMAX_DELAY);
 80019d8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a4c <rtc_task_handler+0x304>)
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80019e0:	2300      	movs	r3, #0
 80019e2:	f04f 32ff 	mov.w	r2, #4294967295
 80019e6:	f004 f931 	bl	8005c4c <xQueueGenericSend>
					break;}
 80019ea:	e087      	b.n	8001afc <rtc_task_handler+0x3b4>
				case MONTH_CONFIG:{
					uint8_t month = getnumber(cmd->payload , cmd->Len);
 80019ec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80019ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	4619      	mov	r1, r3
 80019f4:	4610      	mov	r0, r2
 80019f6:	f7ff fe83 	bl	8001700 <getnumber>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
					date.Month = month;
 8001a00:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001a04:	727b      	strb	r3, [r7, #9]
					rtc_state = DAY_CONFIG;
 8001a06:	4b14      	ldr	r3, [pc, #80]	@ (8001a58 <rtc_task_handler+0x310>)
 8001a08:	2203      	movs	r2, #3
 8001a0a:	601a      	str	r2, [r3, #0]
					xQueueSend(xQueuePrint,&msg_rtc_dow,portMAX_DELAY);
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <rtc_task_handler+0x304>)
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001a14:	2300      	movs	r3, #0
 8001a16:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1a:	f004 f917 	bl	8005c4c <xQueueGenericSend>
					break;}
 8001a1e:	e06d      	b.n	8001afc <rtc_task_handler+0x3b4>
 8001a20:	0800a5dc 	.word	0x0800a5dc
 8001a24:	0800a628 	.word	0x0800a628
 8001a28:	0800a6cc 	.word	0x0800a6cc
 8001a2c:	0800a6e0 	.word	0x0800a6e0
 8001a30:	0800a6f8 	.word	0x0800a6f8
 8001a34:	0800a710 	.word	0x0800a710
 8001a38:	0800a724 	.word	0x0800a724
 8001a3c:	0800a738 	.word	0x0800a738
 8001a40:	0800a750 	.word	0x0800a750
 8001a44:	0800a764 	.word	0x0800a764
 8001a48:	0800a780 	.word	0x0800a780
 8001a4c:	20000168 	.word	0x20000168
 8001a50:	20000181 	.word	0x20000181
 8001a54:	20000014 	.word	0x20000014
 8001a58:	20000224 	.word	0x20000224
				case DAY_CONFIG:{
					uint8_t day = getnumber(cmd->payload , cmd->Len);
 8001a5c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001a5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	4619      	mov	r1, r3
 8001a64:	4610      	mov	r0, r2
 8001a66:	f7ff fe4b 	bl	8001700 <getnumber>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					date.WeekDay = day;
 8001a70:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001a74:	723b      	strb	r3, [r7, #8]
					rtc_state = YEAR_CONFIG;
 8001a76:	4b4c      	ldr	r3, [pc, #304]	@ (8001ba8 <rtc_task_handler+0x460>)
 8001a78:	2202      	movs	r2, #2
 8001a7a:	601a      	str	r2, [r3, #0]
					xQueueSend(xQueuePrint,&msg_rtc_yr,portMAX_DELAY);
 8001a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8001bac <rtc_task_handler+0x464>)
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001a84:	2300      	movs	r3, #0
 8001a86:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8a:	f004 f8df 	bl	8005c4c <xQueueGenericSend>
					break;}
 8001a8e:	e035      	b.n	8001afc <rtc_task_handler+0x3b4>
				case YEAR_CONFIG:{
					uint8_t year = getnumber(cmd->payload , cmd->Len);
 8001a90:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001a92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	4619      	mov	r1, r3
 8001a98:	4610      	mov	r0, r2
 8001a9a:	f7ff fe31 	bl	8001700 <getnumber>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
					date.Year = year;
 8001aa4:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001aa8:	72fb      	strb	r3, [r7, #11]

					if(!validate_rtc_information(NULL,&date))
 8001aaa:	f107 0308 	add.w	r3, r7, #8
 8001aae:	4619      	mov	r1, r3
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7ff facf 	bl	8001054 <validate_rtc_information>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d110      	bne.n	8001ade <rtc_task_handler+0x396>
					{
						rtc_configure_date(&date);
 8001abc:	f107 0308 	add.w	r3, r7, #8
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fab7 	bl	8001034 <rtc_configure_date>
						xQueueSend(xQueuePrint,&msg_conf,portMAX_DELAY);
 8001ac6:	4b39      	ldr	r3, [pc, #228]	@ (8001bac <rtc_task_handler+0x464>)
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad4:	f004 f8ba 	bl	8005c4c <xQueueGenericSend>
						show_time_date();
 8001ad8:	f7ff fa28 	bl	8000f2c <show_time_date>
 8001adc:	e007      	b.n	8001aee <rtc_task_handler+0x3a6>
					}else
						xQueueSend(xQueuePrint,&msg_invalid,portMAX_DELAY);
 8001ade:	4b33      	ldr	r3, [pc, #204]	@ (8001bac <rtc_task_handler+0x464>)
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	4931      	ldr	r1, [pc, #196]	@ (8001bb0 <rtc_task_handler+0x468>)
 8001aea:	f004 f8af 	bl	8005c4c <xQueueGenericSend>

					curr_state = sMainMenu;
 8001aee:	4b31      	ldr	r3, [pc, #196]	@ (8001bb4 <rtc_task_handler+0x46c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
					rtc_state = 0;
 8001af4:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba8 <rtc_task_handler+0x460>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
					break;}
 8001afa:	bf00      	nop
				}

				break;}
 8001afc:	e043      	b.n	8001b86 <rtc_task_handler+0x43e>

			case sRtcReport:{
				/* enable or disable RTC current time reporting over ITM printf */
				if(cmd->Len == 1)
 8001afe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d131      	bne.n	8001b6a <rtc_task_handler+0x422>
				{
					if(cmd->payload[0] == 'y'){
 8001b06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b79      	cmp	r3, #121	@ 0x79
 8001b0c:	d115      	bne.n	8001b3a <rtc_task_handler+0x3f2>
						if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 8001b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb8 <rtc_task_handler+0x470>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f006 fdc8 	bl	80086a8 <xTimerIsTimerActive>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d12d      	bne.n	8001b7a <rtc_task_handler+0x432>
							xTimerStart(rtc_timer,portMAX_DELAY);
 8001b1e:	4b26      	ldr	r3, [pc, #152]	@ (8001bb8 <rtc_task_handler+0x470>)
 8001b20:	681c      	ldr	r4, [r3, #0]
 8001b22:	f005 f9b7 	bl	8006e94 <xTaskGetTickCount>
 8001b26:	4602      	mov	r2, r0
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	2101      	movs	r1, #1
 8001b32:	4620      	mov	r0, r4
 8001b34:	f006 fae2 	bl	80080fc <xTimerGenericCommandFromTask>
 8001b38:	e01f      	b.n	8001b7a <rtc_task_handler+0x432>
					}else if (cmd->payload[0] == 'n'){
 8001b3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b6e      	cmp	r3, #110	@ 0x6e
 8001b40:	d10a      	bne.n	8001b58 <rtc_task_handler+0x410>
						xTimerStop(rtc_timer,portMAX_DELAY);
 8001b42:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb8 <rtc_task_handler+0x470>)
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2103      	movs	r1, #3
 8001b52:	f006 fad3 	bl	80080fc <xTimerGenericCommandFromTask>
 8001b56:	e010      	b.n	8001b7a <rtc_task_handler+0x432>
					}else{
						xQueueSend(xQueuePrint,&msg_invalid,portMAX_DELAY);
 8001b58:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <rtc_task_handler+0x464>)
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b62:	4913      	ldr	r1, [pc, #76]	@ (8001bb0 <rtc_task_handler+0x468>)
 8001b64:	f004 f872 	bl	8005c4c <xQueueGenericSend>
 8001b68:	e007      	b.n	8001b7a <rtc_task_handler+0x432>
					}

				}else
					xQueueSend(xQueuePrint,&msg_invalid,portMAX_DELAY);
 8001b6a:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <rtc_task_handler+0x464>)
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295
 8001b74:	490e      	ldr	r1, [pc, #56]	@ (8001bb0 <rtc_task_handler+0x468>)
 8001b76:	f004 f869 	bl	8005c4c <xQueueGenericSend>

				curr_state = sMainMenu;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <rtc_task_handler+0x46c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
				break;}
 8001b80:	e002      	b.n	8001b88 <rtc_task_handler+0x440>
				break;}
 8001b82:	bf00      	nop
 8001b84:	e000      	b.n	8001b88 <rtc_task_handler+0x440>
				break;}
 8001b86:	bf00      	nop
		while(curr_state != sMainMenu){
 8001b88:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <rtc_task_handler+0x46c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f47f ae13 	bne.w	80017b8 <rtc_task_handler+0x70>
			}// switch end

		} //while end

		/* Notify menu task */
		xTaskNotify(menu_task_handle,0,eNoAction);
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <rtc_task_handler+0x474>)
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	2300      	movs	r3, #0
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	f005 fefa 	bl	8007998 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001ba4:	e5ea      	b.n	800177c <rtc_task_handler+0x34>
 8001ba6:	bf00      	nop
 8001ba8:	20000224 	.word	0x20000224
 8001bac:	20000168 	.word	0x20000168
 8001bb0:	20000014 	.word	0x20000014
 8001bb4:	20000181 	.word	0x20000181
 8001bb8:	2000017c 	.word	0x2000017c
 8001bbc:	20000150 	.word	0x20000150

08001bc0 <print_task_handler>:
	}//while super loop end

}

void print_task_handler(void* parameters)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	uint32_t * msg;
	while (1)
	{
		xQueueReceive(xQueuePrint, &msg	, portMAX_DELAY);
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <print_task_handler+0x38>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f107 010c 	add.w	r1, r7, #12
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f004 fa37 	bl	8006048 <xQueueReceive>
		HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen((char *)msg), HAL_MAX_DELAY);
 8001bda:	68fc      	ldr	r4, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fb38 	bl	8000254 <strlen>
 8001be4:	4603      	mov	r3, r0
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bec:	4621      	mov	r1, r4
 8001bee:	4803      	ldr	r0, [pc, #12]	@ (8001bfc <print_task_handler+0x3c>)
 8001bf0:	f002 fb80 	bl	80042f4 <HAL_UART_Transmit>
		xQueueReceive(xQueuePrint, &msg	, portMAX_DELAY);
 8001bf4:	bf00      	nop
 8001bf6:	e7e7      	b.n	8001bc8 <print_task_handler+0x8>
 8001bf8:	20000168 	.word	0x20000168
 8001bfc:	200000c8 	.word	0x200000c8

08001c00 <command_task_handler>:
	}

}

void command_task_handler(void* parameters)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	@ 0x28
 8001c04:	af02      	add	r7, sp, #8
 8001c06:	6078      	str	r0, [r7, #4]
	command_t cmd;
	while(1)
	{

		/* Implement Notify wait */
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001c08:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	2200      	movs	r2, #0
 8001c12:	2100      	movs	r1, #0
 8001c14:	2000      	movs	r0, #0
 8001c16:	f005 fe2b 	bl	8007870 <xTaskGenericNotifyWait>
 8001c1a:	61f8      	str	r0, [r7, #28]

		/* process the user data (command) stored in input data queue */
		if (ret == pdTRUE)
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d1f2      	bne.n	8001c08 <command_task_handler+0x8>
		{
			process_command(&cmd);
 8001c22:	f107 030c 	add.w	r3, r7, #12
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f802 	bl	8001c30 <process_command>
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001c2c:	e7ec      	b.n	8001c08 <command_task_handler+0x8>
	...

08001c30 <process_command>:
	}
}


void process_command (command_t *cmd)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f835 	bl	8001ca8 <extract_command>

	switch(curr_state)
 8001c3e:	4b16      	ldr	r3, [pc, #88]	@ (8001c98 <process_command+0x68>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	dc23      	bgt.n	8001c8e <process_command+0x5e>
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	da17      	bge.n	8001c7a <process_command+0x4a>
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <process_command+0x24>
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d00a      	beq.n	8001c68 <process_command+0x38>
		/* Notify RTC task with comand */
		xTaskNotify(rtc_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
		break;
	}

}
 8001c52:	e01c      	b.n	8001c8e <process_command+0x5e>
		xTaskNotify(menu_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
 8001c54:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <process_command+0x6c>)
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2303      	movs	r3, #3
 8001c60:	2100      	movs	r1, #0
 8001c62:	f005 fe99 	bl	8007998 <xTaskGenericNotify>
		break;
 8001c66:	e012      	b.n	8001c8e <process_command+0x5e>
		xTaskNotify(led_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
 8001c68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca0 <process_command+0x70>)
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	2303      	movs	r3, #3
 8001c74:	2100      	movs	r1, #0
 8001c76:	f005 fe8f 	bl	8007998 <xTaskGenericNotify>
		xTaskNotify(rtc_task_handle,(uint32_t)cmd,eSetValueWithOverwrite);
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca4 <process_command+0x74>)
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	2300      	movs	r3, #0
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2303      	movs	r3, #3
 8001c86:	2100      	movs	r1, #0
 8001c88:	f005 fe86 	bl	8007998 <xTaskGenericNotify>
		break;
 8001c8c:	bf00      	nop
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000181 	.word	0x20000181
 8001c9c:	20000150 	.word	0x20000150
 8001ca0:	20000154 	.word	0x20000154
 8001ca4:	20000158 	.word	0x20000158

08001ca8 <extract_command>:

int extract_command(command_t *cmd)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(xQueueInputData);
 8001cb0:	4b19      	ldr	r3, [pc, #100]	@ (8001d18 <extract_command+0x70>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f004 fb51 	bl	800635c <uxQueueMessagesWaiting>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	613b      	str	r3, [r7, #16]
	if(! status) return -1;
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <extract_command+0x22>
 8001cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc8:	e022      	b.n	8001d10 <extract_command+0x68>
	uint8_t i=0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	75fb      	strb	r3, [r7, #23]

	do
	{
		status = xQueueReceive(xQueueInputData, &item, 0);
 8001cce:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <extract_command+0x70>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f107 010f 	add.w	r1, r7, #15
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f004 f9b5 	bl	8006048 <xQueueReceive>
 8001cde:	6138      	str	r0, [r7, #16]
		if (status == pdTRUE) cmd->payload[i++] = item;
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d106      	bne.n	8001cf4 <extract_command+0x4c>
 8001ce6:	7dfb      	ldrb	r3, [r7, #23]
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	75fa      	strb	r2, [r7, #23]
 8001cec:	461a      	mov	r2, r3
 8001cee:	7bf9      	ldrb	r1, [r7, #15]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	5499      	strb	r1, [r3, r2]

	}while(item != '\n');
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	2b0a      	cmp	r3, #10
 8001cf8:	d1e9      	bne.n	8001cce <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 8001cfa:	7dfb      	ldrb	r3, [r7, #23]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	2100      	movs	r1, #0
 8001d02:	54d1      	strb	r1, [r2, r3]
	cmd->Len = i-1;
 8001d04:	7dfb      	ldrb	r3, [r7, #23]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	461a      	mov	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	60da      	str	r2, [r3, #12]

	return 0;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000164 	.word	0x20000164

08001d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d20:	f7ff fbd2 	bl	80014c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d24:	480c      	ldr	r0, [pc, #48]	@ (8001d58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d26:	490d      	ldr	r1, [pc, #52]	@ (8001d5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d28:	4a0d      	ldr	r2, [pc, #52]	@ (8001d60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d2c:	e002      	b.n	8001d34 <LoopCopyDataInit>

08001d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d32:	3304      	adds	r3, #4

08001d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d38:	d3f9      	bcc.n	8001d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d40:	e001      	b.n	8001d46 <LoopFillZerobss>

08001d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d44:	3204      	adds	r2, #4

08001d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d48:	d3fb      	bcc.n	8001d42 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d4a:	f007 fbb7 	bl	80094bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d4e:	f7fe fd6d 	bl	800082c <main>
  bx  lr    
 8001d52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d54:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d5c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001d60:	0800a828 	.word	0x0800a828
  ldr r2, =_sbss
 8001d64:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001d68:	2000bd1c 	.word	0x2000bd1c

08001d6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d6c:	e7fe      	b.n	8001d6c <ADC_IRQHandler>

08001d6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d72:	2003      	movs	r0, #3
 8001d74:	f000 f8d5 	bl	8001f22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d78:	200f      	movs	r0, #15
 8001d7a:	f7ff fa57 	bl	800122c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d7e:	f7ff f99b 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <HAL_IncTick+0x20>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_IncTick+0x24>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	4a04      	ldr	r2, [pc, #16]	@ (8001dac <HAL_IncTick+0x24>)
 8001d9a:	6013      	str	r3, [r2, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	2000001c 	.word	0x2000001c
 8001dac:	20000228 	.word	0x20000228

08001db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return uwTick;
 8001db4:	4b03      	ldr	r3, [pc, #12]	@ (8001dc4 <HAL_GetTick+0x14>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000228 	.word	0x20000228

08001dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <__NVIC_SetPriorityGrouping+0x40>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001de4:	4013      	ands	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001df0:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df6:	4a04      	ldr	r2, [pc, #16]	@ (8001e08 <__NVIC_SetPriorityGrouping+0x40>)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	60d3      	str	r3, [r2, #12]
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00
 8001e0c:	05fa0000 	.word	0x05fa0000

08001e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e14:	4b04      	ldr	r3, [pc, #16]	@ (8001e28 <__NVIC_GetPriorityGrouping+0x18>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	f003 0307 	and.w	r3, r3, #7
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	db0b      	blt.n	8001e56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	f003 021f 	and.w	r2, r3, #31
 8001e44:	4907      	ldr	r1, [pc, #28]	@ (8001e64 <__NVIC_EnableIRQ+0x38>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000e100 	.word	0xe000e100

08001e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	db0a      	blt.n	8001e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	490c      	ldr	r1, [pc, #48]	@ (8001eb4 <__NVIC_SetPriority+0x4c>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	0112      	lsls	r2, r2, #4
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e90:	e00a      	b.n	8001ea8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4908      	ldr	r1, [pc, #32]	@ (8001eb8 <__NVIC_SetPriority+0x50>)
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	3b04      	subs	r3, #4
 8001ea0:	0112      	lsls	r2, r2, #4
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	761a      	strb	r2, [r3, #24]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000e100 	.word	0xe000e100
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	@ 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f1c3 0307 	rsb	r3, r3, #7
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	bf28      	it	cs
 8001eda:	2304      	movcs	r3, #4
 8001edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	2b06      	cmp	r3, #6
 8001ee4:	d902      	bls.n	8001eec <NVIC_EncodePriority+0x30>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3b03      	subs	r3, #3
 8001eea:	e000      	b.n	8001eee <NVIC_EncodePriority+0x32>
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43da      	mvns	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	401a      	ands	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	43d9      	mvns	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	4313      	orrs	r3, r2
         );
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3724      	adds	r7, #36	@ 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ff4c 	bl	8001dc8 <__NVIC_SetPriorityGrouping>
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f4a:	f7ff ff61 	bl	8001e10 <__NVIC_GetPriorityGrouping>
 8001f4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	68b9      	ldr	r1, [r7, #8]
 8001f54:	6978      	ldr	r0, [r7, #20]
 8001f56:	f7ff ffb1 	bl	8001ebc <NVIC_EncodePriority>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ff80 	bl	8001e68 <__NVIC_SetPriority>
}
 8001f68:	bf00      	nop
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff54 	bl	8001e2c <__NVIC_EnableIRQ>
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f9a:	f7ff ff09 	bl	8001db0 <HAL_GetTick>
 8001f9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d008      	beq.n	8001fbe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2280      	movs	r2, #128	@ 0x80
 8001fb0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e052      	b.n	8002064 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0216 	bic.w	r2, r2, #22
 8001fcc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695a      	ldr	r2, [r3, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fdc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d103      	bne.n	8001fee <HAL_DMA_Abort+0x62>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0208 	bic.w	r2, r2, #8
 8001ffc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0201 	bic.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800200e:	e013      	b.n	8002038 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002010:	f7ff fece 	bl	8001db0 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b05      	cmp	r3, #5
 800201c:	d90c      	bls.n	8002038 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2220      	movs	r2, #32
 8002022:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2203      	movs	r2, #3
 8002028:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e015      	b.n	8002064 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1e4      	bne.n	8002010 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204a:	223f      	movs	r2, #63	@ 0x3f
 800204c:	409a      	lsls	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d004      	beq.n	800208a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2280      	movs	r2, #128	@ 0x80
 8002084:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e00c      	b.n	80020a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2205      	movs	r2, #5
 800208e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	@ 0x24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	e175      	b.n	80023bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020d0:	2201      	movs	r2, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	f040 8164 	bne.w	80023b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d005      	beq.n	8002106 <HAL_GPIO_Init+0x56>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d130      	bne.n	8002168 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2203      	movs	r2, #3
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800213c:	2201      	movs	r2, #1
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 0201 	and.w	r2, r3, #1
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b03      	cmp	r3, #3
 8002172:	d017      	beq.n	80021a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d123      	bne.n	80021f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	08da      	lsrs	r2, r3, #3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3208      	adds	r2, #8
 80021b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	220f      	movs	r2, #15
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	08da      	lsrs	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3208      	adds	r2, #8
 80021f2:	69b9      	ldr	r1, [r7, #24]
 80021f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0203 	and.w	r2, r3, #3
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80be 	beq.w	80023b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223a:	4b66      	ldr	r3, [pc, #408]	@ (80023d4 <HAL_GPIO_Init+0x324>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	4a65      	ldr	r2, [pc, #404]	@ (80023d4 <HAL_GPIO_Init+0x324>)
 8002240:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002244:	6453      	str	r3, [r2, #68]	@ 0x44
 8002246:	4b63      	ldr	r3, [pc, #396]	@ (80023d4 <HAL_GPIO_Init+0x324>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002252:	4a61      	ldr	r2, [pc, #388]	@ (80023d8 <HAL_GPIO_Init+0x328>)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	3302      	adds	r3, #2
 800225a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	220f      	movs	r2, #15
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a58      	ldr	r2, [pc, #352]	@ (80023dc <HAL_GPIO_Init+0x32c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d037      	beq.n	80022ee <HAL_GPIO_Init+0x23e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a57      	ldr	r2, [pc, #348]	@ (80023e0 <HAL_GPIO_Init+0x330>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d031      	beq.n	80022ea <HAL_GPIO_Init+0x23a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a56      	ldr	r2, [pc, #344]	@ (80023e4 <HAL_GPIO_Init+0x334>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d02b      	beq.n	80022e6 <HAL_GPIO_Init+0x236>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a55      	ldr	r2, [pc, #340]	@ (80023e8 <HAL_GPIO_Init+0x338>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d025      	beq.n	80022e2 <HAL_GPIO_Init+0x232>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a54      	ldr	r2, [pc, #336]	@ (80023ec <HAL_GPIO_Init+0x33c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d01f      	beq.n	80022de <HAL_GPIO_Init+0x22e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a53      	ldr	r2, [pc, #332]	@ (80023f0 <HAL_GPIO_Init+0x340>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d019      	beq.n	80022da <HAL_GPIO_Init+0x22a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a52      	ldr	r2, [pc, #328]	@ (80023f4 <HAL_GPIO_Init+0x344>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d013      	beq.n	80022d6 <HAL_GPIO_Init+0x226>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a51      	ldr	r2, [pc, #324]	@ (80023f8 <HAL_GPIO_Init+0x348>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00d      	beq.n	80022d2 <HAL_GPIO_Init+0x222>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a50      	ldr	r2, [pc, #320]	@ (80023fc <HAL_GPIO_Init+0x34c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d007      	beq.n	80022ce <HAL_GPIO_Init+0x21e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002400 <HAL_GPIO_Init+0x350>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d101      	bne.n	80022ca <HAL_GPIO_Init+0x21a>
 80022c6:	2309      	movs	r3, #9
 80022c8:	e012      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022ca:	230a      	movs	r3, #10
 80022cc:	e010      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022ce:	2308      	movs	r3, #8
 80022d0:	e00e      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022d2:	2307      	movs	r3, #7
 80022d4:	e00c      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022d6:	2306      	movs	r3, #6
 80022d8:	e00a      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022da:	2305      	movs	r3, #5
 80022dc:	e008      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022de:	2304      	movs	r3, #4
 80022e0:	e006      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022e2:	2303      	movs	r3, #3
 80022e4:	e004      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e002      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022ee:	2300      	movs	r3, #0
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	f002 0203 	and.w	r2, r2, #3
 80022f6:	0092      	lsls	r2, r2, #2
 80022f8:	4093      	lsls	r3, r2
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002300:	4935      	ldr	r1, [pc, #212]	@ (80023d8 <HAL_GPIO_Init+0x328>)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3302      	adds	r3, #2
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800230e:	4b3d      	ldr	r3, [pc, #244]	@ (8002404 <HAL_GPIO_Init+0x354>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002332:	4a34      	ldr	r2, [pc, #208]	@ (8002404 <HAL_GPIO_Init+0x354>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002338:	4b32      	ldr	r3, [pc, #200]	@ (8002404 <HAL_GPIO_Init+0x354>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800235c:	4a29      	ldr	r2, [pc, #164]	@ (8002404 <HAL_GPIO_Init+0x354>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002362:	4b28      	ldr	r3, [pc, #160]	@ (8002404 <HAL_GPIO_Init+0x354>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002386:	4a1f      	ldr	r2, [pc, #124]	@ (8002404 <HAL_GPIO_Init+0x354>)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800238c:	4b1d      	ldr	r3, [pc, #116]	@ (8002404 <HAL_GPIO_Init+0x354>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023b0:	4a14      	ldr	r2, [pc, #80]	@ (8002404 <HAL_GPIO_Init+0x354>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3301      	adds	r3, #1
 80023ba:	61fb      	str	r3, [r7, #28]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2b0f      	cmp	r3, #15
 80023c0:	f67f ae86 	bls.w	80020d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3724      	adds	r7, #36	@ 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40013800 	.word	0x40013800
 80023dc:	40020000 	.word	0x40020000
 80023e0:	40020400 	.word	0x40020400
 80023e4:	40020800 	.word	0x40020800
 80023e8:	40020c00 	.word	0x40020c00
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40021400 	.word	0x40021400
 80023f4:	40021800 	.word	0x40021800
 80023f8:	40021c00 	.word	0x40021c00
 80023fc:	40022000 	.word	0x40022000
 8002400:	40022400 	.word	0x40022400
 8002404:	40013c00 	.word	0x40013c00

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002424:	e003      	b.n	800242e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	041a      	lsls	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	619a      	str	r2, [r3, #24]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002444:	2300      	movs	r3, #0
 8002446:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e29b      	b.n	800298a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8087 	beq.w	800256e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002460:	4b96      	ldr	r3, [pc, #600]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	2b04      	cmp	r3, #4
 800246a:	d00c      	beq.n	8002486 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246c:	4b93      	ldr	r3, [pc, #588]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 030c 	and.w	r3, r3, #12
 8002474:	2b08      	cmp	r3, #8
 8002476:	d112      	bne.n	800249e <HAL_RCC_OscConfig+0x62>
 8002478:	4b90      	ldr	r3, [pc, #576]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002480:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002484:	d10b      	bne.n	800249e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002486:	4b8d      	ldr	r3, [pc, #564]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d06c      	beq.n	800256c <HAL_RCC_OscConfig+0x130>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d168      	bne.n	800256c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e275      	b.n	800298a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_OscConfig+0x7a>
 80024a8:	4b84      	ldr	r3, [pc, #528]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a83      	ldr	r2, [pc, #524]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 80024ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	e02e      	b.n	8002514 <HAL_RCC_OscConfig+0xd8>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x9c>
 80024be:	4b7f      	ldr	r3, [pc, #508]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a7e      	ldr	r2, [pc, #504]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 80024c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b7c      	ldr	r3, [pc, #496]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a7b      	ldr	r2, [pc, #492]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 80024d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e01d      	b.n	8002514 <HAL_RCC_OscConfig+0xd8>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0xc0>
 80024e2:	4b76      	ldr	r3, [pc, #472]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a75      	ldr	r2, [pc, #468]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 80024e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b73      	ldr	r3, [pc, #460]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a72      	ldr	r2, [pc, #456]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e00b      	b.n	8002514 <HAL_RCC_OscConfig+0xd8>
 80024fc:	4b6f      	ldr	r3, [pc, #444]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a6e      	ldr	r2, [pc, #440]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 8002502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b6c      	ldr	r3, [pc, #432]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a6b      	ldr	r2, [pc, #428]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 800250e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d013      	beq.n	8002544 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251c:	f7ff fc48 	bl	8001db0 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002524:	f7ff fc44 	bl	8001db0 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	@ 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e229      	b.n	800298a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002536:	4b61      	ldr	r3, [pc, #388]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0xe8>
 8002542:	e014      	b.n	800256e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7ff fc34 	bl	8001db0 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800254c:	f7ff fc30 	bl	8001db0 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	@ 0x64
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e215      	b.n	800298a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255e:	4b57      	ldr	r3, [pc, #348]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x110>
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d069      	beq.n	800264e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800257a:	4b50      	ldr	r3, [pc, #320]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002586:	4b4d      	ldr	r3, [pc, #308]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b08      	cmp	r3, #8
 8002590:	d11c      	bne.n	80025cc <HAL_RCC_OscConfig+0x190>
 8002592:	4b4a      	ldr	r3, [pc, #296]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d116      	bne.n	80025cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259e:	4b47      	ldr	r3, [pc, #284]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_RCC_OscConfig+0x17a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e1e9      	b.n	800298a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b6:	4b41      	ldr	r3, [pc, #260]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	493d      	ldr	r1, [pc, #244]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ca:	e040      	b.n	800264e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d023      	beq.n	800261c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d4:	4b39      	ldr	r3, [pc, #228]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a38      	ldr	r2, [pc, #224]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7ff fbe6 	bl	8001db0 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e8:	f7ff fbe2 	bl	8001db0 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e1c7      	b.n	800298a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	4b30      	ldr	r3, [pc, #192]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002606:	4b2d      	ldr	r3, [pc, #180]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4929      	ldr	r1, [pc, #164]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]
 800261a:	e018      	b.n	800264e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261c:	4b27      	ldr	r3, [pc, #156]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a26      	ldr	r2, [pc, #152]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002628:	f7ff fbc2 	bl	8001db0 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002630:	f7ff fbbe 	bl	8001db0 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e1a3      	b.n	800298a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002642:	4b1e      	ldr	r3, [pc, #120]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d038      	beq.n	80026cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d019      	beq.n	8002696 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002662:	4b16      	ldr	r3, [pc, #88]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 8002664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002666:	4a15      	ldr	r2, [pc, #84]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266e:	f7ff fb9f 	bl	8001db0 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002676:	f7ff fb9b 	bl	8001db0 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e180      	b.n	800298a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002688:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 800268a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x23a>
 8002694:	e01a      	b.n	80026cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002696:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 8002698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800269a:	4a08      	ldr	r2, [pc, #32]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a2:	f7ff fb85 	bl	8001db0 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a8:	e00a      	b.n	80026c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026aa:	f7ff fb81 	bl	8001db0 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d903      	bls.n	80026c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e166      	b.n	800298a <HAL_RCC_OscConfig+0x54e>
 80026bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c0:	4b92      	ldr	r3, [pc, #584]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 80026c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1ee      	bne.n	80026aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80a4 	beq.w	8002822 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026da:	4b8c      	ldr	r3, [pc, #560]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10d      	bne.n	8002702 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	4b89      	ldr	r3, [pc, #548]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	4a88      	ldr	r2, [pc, #544]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 80026ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f2:	4b86      	ldr	r3, [pc, #536]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fe:	2301      	movs	r3, #1
 8002700:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002702:	4b83      	ldr	r3, [pc, #524]	@ (8002910 <HAL_RCC_OscConfig+0x4d4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d118      	bne.n	8002740 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800270e:	4b80      	ldr	r3, [pc, #512]	@ (8002910 <HAL_RCC_OscConfig+0x4d4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a7f      	ldr	r2, [pc, #508]	@ (8002910 <HAL_RCC_OscConfig+0x4d4>)
 8002714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271a:	f7ff fb49 	bl	8001db0 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002722:	f7ff fb45 	bl	8001db0 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b64      	cmp	r3, #100	@ 0x64
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e12a      	b.n	800298a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002734:	4b76      	ldr	r3, [pc, #472]	@ (8002910 <HAL_RCC_OscConfig+0x4d4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x31a>
 8002748:	4b70      	ldr	r3, [pc, #448]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 800274a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274c:	4a6f      	ldr	r2, [pc, #444]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6713      	str	r3, [r2, #112]	@ 0x70
 8002754:	e02d      	b.n	80027b2 <HAL_RCC_OscConfig+0x376>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x33c>
 800275e:	4b6b      	ldr	r3, [pc, #428]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002762:	4a6a      	ldr	r2, [pc, #424]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	6713      	str	r3, [r2, #112]	@ 0x70
 800276a:	4b68      	ldr	r3, [pc, #416]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276e:	4a67      	ldr	r2, [pc, #412]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 8002770:	f023 0304 	bic.w	r3, r3, #4
 8002774:	6713      	str	r3, [r2, #112]	@ 0x70
 8002776:	e01c      	b.n	80027b2 <HAL_RCC_OscConfig+0x376>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b05      	cmp	r3, #5
 800277e:	d10c      	bne.n	800279a <HAL_RCC_OscConfig+0x35e>
 8002780:	4b62      	ldr	r3, [pc, #392]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002784:	4a61      	ldr	r2, [pc, #388]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 8002786:	f043 0304 	orr.w	r3, r3, #4
 800278a:	6713      	str	r3, [r2, #112]	@ 0x70
 800278c:	4b5f      	ldr	r3, [pc, #380]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002790:	4a5e      	ldr	r2, [pc, #376]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6713      	str	r3, [r2, #112]	@ 0x70
 8002798:	e00b      	b.n	80027b2 <HAL_RCC_OscConfig+0x376>
 800279a:	4b5c      	ldr	r3, [pc, #368]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279e:	4a5b      	ldr	r2, [pc, #364]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 80027a0:	f023 0301 	bic.w	r3, r3, #1
 80027a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027a6:	4b59      	ldr	r3, [pc, #356]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027aa:	4a58      	ldr	r2, [pc, #352]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 80027ac:	f023 0304 	bic.w	r3, r3, #4
 80027b0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d015      	beq.n	80027e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ba:	f7ff faf9 	bl	8001db0 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c0:	e00a      	b.n	80027d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c2:	f7ff faf5 	bl	8001db0 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e0d8      	b.n	800298a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d8:	4b4c      	ldr	r3, [pc, #304]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0ee      	beq.n	80027c2 <HAL_RCC_OscConfig+0x386>
 80027e4:	e014      	b.n	8002810 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e6:	f7ff fae3 	bl	8001db0 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ec:	e00a      	b.n	8002804 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ee:	f7ff fadf 	bl	8001db0 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e0c2      	b.n	800298a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002804:	4b41      	ldr	r3, [pc, #260]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1ee      	bne.n	80027ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002810:	7dfb      	ldrb	r3, [r7, #23]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d105      	bne.n	8002822 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002816:	4b3d      	ldr	r3, [pc, #244]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	4a3c      	ldr	r2, [pc, #240]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 800281c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002820:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 80ae 	beq.w	8002988 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800282c:	4b37      	ldr	r3, [pc, #220]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 030c 	and.w	r3, r3, #12
 8002834:	2b08      	cmp	r3, #8
 8002836:	d06d      	beq.n	8002914 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d14b      	bne.n	80028d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002840:	4b32      	ldr	r3, [pc, #200]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a31      	ldr	r2, [pc, #196]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 8002846:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800284a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7ff fab0 	bl	8001db0 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002854:	f7ff faac 	bl	8001db0 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e091      	b.n	800298a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002866:	4b29      	ldr	r3, [pc, #164]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69da      	ldr	r2, [r3, #28]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	019b      	lsls	r3, r3, #6
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	3b01      	subs	r3, #1
 800288c:	041b      	lsls	r3, r3, #16
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002894:	061b      	lsls	r3, r3, #24
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289c:	071b      	lsls	r3, r3, #28
 800289e:	491b      	ldr	r1, [pc, #108]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a4:	4b19      	ldr	r3, [pc, #100]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a18      	ldr	r2, [pc, #96]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 80028aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7ff fa7e 	bl	8001db0 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b8:	f7ff fa7a 	bl	8001db0 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e05f      	b.n	800298a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ca:	4b10      	ldr	r3, [pc, #64]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x47c>
 80028d6:	e057      	b.n	8002988 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d8:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0b      	ldr	r2, [pc, #44]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 80028de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7ff fa64 	bl	8001db0 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ec:	f7ff fa60 	bl	8001db0 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e045      	b.n	800298a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fe:	4b03      	ldr	r3, [pc, #12]	@ (800290c <HAL_RCC_OscConfig+0x4d0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x4b0>
 800290a:	e03d      	b.n	8002988 <HAL_RCC_OscConfig+0x54c>
 800290c:	40023800 	.word	0x40023800
 8002910:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002914:	4b1f      	ldr	r3, [pc, #124]	@ (8002994 <HAL_RCC_OscConfig+0x558>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d030      	beq.n	8002984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d129      	bne.n	8002984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293a:	429a      	cmp	r2, r3
 800293c:	d122      	bne.n	8002984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002944:	4013      	ands	r3, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800294a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800294c:	4293      	cmp	r3, r2
 800294e:	d119      	bne.n	8002984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295a:	085b      	lsrs	r3, r3, #1
 800295c:	3b01      	subs	r3, #1
 800295e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d10f      	bne.n	8002984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d107      	bne.n	8002984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800

08002998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0d0      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029b0:	4b6a      	ldr	r3, [pc, #424]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 030f 	and.w	r3, r3, #15
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d910      	bls.n	80029e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b67      	ldr	r3, [pc, #412]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 020f 	bic.w	r2, r3, #15
 80029c6:	4965      	ldr	r1, [pc, #404]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b63      	ldr	r3, [pc, #396]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0b8      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d020      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f8:	4b59      	ldr	r3, [pc, #356]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4a58      	ldr	r2, [pc, #352]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 80029fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a10:	4b53      	ldr	r3, [pc, #332]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4a52      	ldr	r2, [pc, #328]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002a16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a1c:	4b50      	ldr	r3, [pc, #320]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	494d      	ldr	r1, [pc, #308]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d040      	beq.n	8002abc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	4b47      	ldr	r3, [pc, #284]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d115      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e07f      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5a:	4b41      	ldr	r3, [pc, #260]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d109      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e073      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e06b      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a7a:	4b39      	ldr	r3, [pc, #228]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f023 0203 	bic.w	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4936      	ldr	r1, [pc, #216]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a8c:	f7ff f990 	bl	8001db0 <HAL_GetTick>
 8002a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a94:	f7ff f98c 	bl	8001db0 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e053      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 020c 	and.w	r2, r3, #12
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d1eb      	bne.n	8002a94 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002abc:	4b27      	ldr	r3, [pc, #156]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d210      	bcs.n	8002aec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aca:	4b24      	ldr	r3, [pc, #144]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 020f 	bic.w	r2, r3, #15
 8002ad2:	4922      	ldr	r1, [pc, #136]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ada:	4b20      	ldr	r3, [pc, #128]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e032      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af8:	4b19      	ldr	r3, [pc, #100]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4916      	ldr	r1, [pc, #88]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d009      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b16:	4b12      	ldr	r3, [pc, #72]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	490e      	ldr	r1, [pc, #56]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b2a:	f000 f821 	bl	8002b70 <HAL_RCC_GetSysClockFreq>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	490a      	ldr	r1, [pc, #40]	@ (8002b64 <HAL_RCC_ClockConfig+0x1cc>)
 8002b3c:	5ccb      	ldrb	r3, [r1, r3]
 8002b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b42:	4a09      	ldr	r2, [pc, #36]	@ (8002b68 <HAL_RCC_ClockConfig+0x1d0>)
 8002b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b46:	4b09      	ldr	r3, [pc, #36]	@ (8002b6c <HAL_RCC_ClockConfig+0x1d4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fb6e 	bl	800122c <HAL_InitTick>

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023c00 	.word	0x40023c00
 8002b60:	40023800 	.word	0x40023800
 8002b64:	0800a7cc 	.word	0x0800a7cc
 8002b68:	20000010 	.word	0x20000010
 8002b6c:	20000018 	.word	0x20000018

08002b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b74:	b094      	sub	sp, #80	@ 0x50
 8002b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b80:	2300      	movs	r3, #0
 8002b82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b88:	4b79      	ldr	r3, [pc, #484]	@ (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d00d      	beq.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	f200 80e1 	bhi.w	8002d5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d003      	beq.n	8002baa <HAL_RCC_GetSysClockFreq+0x3a>
 8002ba2:	e0db      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ba4:	4b73      	ldr	r3, [pc, #460]	@ (8002d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ba8:	e0db      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002baa:	4b72      	ldr	r3, [pc, #456]	@ (8002d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bae:	e0d8      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bb0:	4b6f      	ldr	r3, [pc, #444]	@ (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bb8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002bba:	4b6d      	ldr	r3, [pc, #436]	@ (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d063      	beq.n	8002c8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc6:	4b6a      	ldr	r3, [pc, #424]	@ (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	099b      	lsrs	r3, r3, #6
 8002bcc:	2200      	movs	r2, #0
 8002bce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bda:	2300      	movs	r3, #0
 8002bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002be2:	4622      	mov	r2, r4
 8002be4:	462b      	mov	r3, r5
 8002be6:	f04f 0000 	mov.w	r0, #0
 8002bea:	f04f 0100 	mov.w	r1, #0
 8002bee:	0159      	lsls	r1, r3, #5
 8002bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf4:	0150      	lsls	r0, r2, #5
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	1a51      	subs	r1, r2, r1
 8002bfe:	6139      	str	r1, [r7, #16]
 8002c00:	4629      	mov	r1, r5
 8002c02:	eb63 0301 	sbc.w	r3, r3, r1
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c14:	4659      	mov	r1, fp
 8002c16:	018b      	lsls	r3, r1, #6
 8002c18:	4651      	mov	r1, sl
 8002c1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c1e:	4651      	mov	r1, sl
 8002c20:	018a      	lsls	r2, r1, #6
 8002c22:	4651      	mov	r1, sl
 8002c24:	ebb2 0801 	subs.w	r8, r2, r1
 8002c28:	4659      	mov	r1, fp
 8002c2a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c42:	4690      	mov	r8, r2
 8002c44:	4699      	mov	r9, r3
 8002c46:	4623      	mov	r3, r4
 8002c48:	eb18 0303 	adds.w	r3, r8, r3
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	462b      	mov	r3, r5
 8002c50:	eb49 0303 	adc.w	r3, r9, r3
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c62:	4629      	mov	r1, r5
 8002c64:	028b      	lsls	r3, r1, #10
 8002c66:	4621      	mov	r1, r4
 8002c68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	028a      	lsls	r2, r1, #10
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c76:	2200      	movs	r2, #0
 8002c78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c80:	f7fd fb46 	bl	8000310 <__aeabi_uldivmod>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4613      	mov	r3, r2
 8002c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c8c:	e058      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8e:	4b38      	ldr	r3, [pc, #224]	@ (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	099b      	lsrs	r3, r3, #6
 8002c94:	2200      	movs	r2, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	4611      	mov	r1, r2
 8002c9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c9e:	623b      	str	r3, [r7, #32]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ca8:	4642      	mov	r2, r8
 8002caa:	464b      	mov	r3, r9
 8002cac:	f04f 0000 	mov.w	r0, #0
 8002cb0:	f04f 0100 	mov.w	r1, #0
 8002cb4:	0159      	lsls	r1, r3, #5
 8002cb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cba:	0150      	lsls	r0, r2, #5
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4641      	mov	r1, r8
 8002cc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ce0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ce4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	00eb      	lsls	r3, r5, #3
 8002cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cf6:	00e2      	lsls	r2, r4, #3
 8002cf8:	4614      	mov	r4, r2
 8002cfa:	461d      	mov	r5, r3
 8002cfc:	4643      	mov	r3, r8
 8002cfe:	18e3      	adds	r3, r4, r3
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	464b      	mov	r3, r9
 8002d04:	eb45 0303 	adc.w	r3, r5, r3
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d16:	4629      	mov	r1, r5
 8002d18:	028b      	lsls	r3, r1, #10
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d20:	4621      	mov	r1, r4
 8002d22:	028a      	lsls	r2, r1, #10
 8002d24:	4610      	mov	r0, r2
 8002d26:	4619      	mov	r1, r3
 8002d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	61fa      	str	r2, [r7, #28]
 8002d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d34:	f7fd faec 	bl	8000310 <__aeabi_uldivmod>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d40:	4b0b      	ldr	r3, [pc, #44]	@ (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	0c1b      	lsrs	r3, r3, #16
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d5a:	e002      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d5c:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3750      	adds	r7, #80	@ 0x50
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d6e:	bf00      	nop
 8002d70:	40023800 	.word	0x40023800
 8002d74:	00f42400 	.word	0x00f42400

08002d78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d7c:	4b03      	ldr	r3, [pc, #12]	@ (8002d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000010 	.word	0x20000010

08002d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d94:	f7ff fff0 	bl	8002d78 <HAL_RCC_GetHCLKFreq>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b05      	ldr	r3, [pc, #20]	@ (8002db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	0a9b      	lsrs	r3, r3, #10
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	4903      	ldr	r1, [pc, #12]	@ (8002db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002da6:	5ccb      	ldrb	r3, [r1, r3]
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40023800 	.word	0x40023800
 8002db4:	0800a7dc 	.word	0x0800a7dc

08002db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dbc:	f7ff ffdc 	bl	8002d78 <HAL_RCC_GetHCLKFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b05      	ldr	r3, [pc, #20]	@ (8002dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	0b5b      	lsrs	r3, r3, #13
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4903      	ldr	r1, [pc, #12]	@ (8002ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	0800a7dc 	.word	0x0800a7dc

08002de0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	220f      	movs	r2, #15
 8002dee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002df0:	4b12      	ldr	r3, [pc, #72]	@ (8002e3c <HAL_RCC_GetClockConfig+0x5c>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0203 	and.w	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8002e3c <HAL_RCC_GetClockConfig+0x5c>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e08:	4b0c      	ldr	r3, [pc, #48]	@ (8002e3c <HAL_RCC_GetClockConfig+0x5c>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002e14:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <HAL_RCC_GetClockConfig+0x5c>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	08db      	lsrs	r3, r3, #3
 8002e1a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e22:	4b07      	ldr	r3, [pc, #28]	@ (8002e40 <HAL_RCC_GetClockConfig+0x60>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 020f 	and.w	r2, r3, #15
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	601a      	str	r2, [r3, #0]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40023c00 	.word	0x40023c00

08002e44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d012      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e6c:	4b69      	ldr	r3, [pc, #420]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	4a68      	ldr	r2, [pc, #416]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e72:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002e76:	6093      	str	r3, [r2, #8]
 8002e78:	4b66      	ldr	r3, [pc, #408]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e80:	4964      	ldr	r1, [pc, #400]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d017      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e9e:	4b5d      	ldr	r3, [pc, #372]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ea4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eac:	4959      	ldr	r1, [pc, #356]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d017      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eda:	4b4e      	ldr	r3, [pc, #312]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ee0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	494a      	ldr	r1, [pc, #296]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ef8:	d101      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002efa:	2301      	movs	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f06:	2301      	movs	r3, #1
 8002f08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f16:	2301      	movs	r3, #1
 8002f18:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 808b 	beq.w	800303e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f28:	4b3a      	ldr	r3, [pc, #232]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	4a39      	ldr	r2, [pc, #228]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f32:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f34:	4b37      	ldr	r3, [pc, #220]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f40:	4b35      	ldr	r3, [pc, #212]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a34      	ldr	r2, [pc, #208]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f4c:	f7fe ff30 	bl	8001db0 <HAL_GetTick>
 8002f50:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f54:	f7fe ff2c 	bl	8001db0 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	@ 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e38f      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f66:	4b2c      	ldr	r3, [pc, #176]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f72:	4b28      	ldr	r3, [pc, #160]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f7a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d035      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d02e      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f90:	4b20      	ldr	r3, [pc, #128]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f98:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9e:	4a1d      	ldr	r2, [pc, #116]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fa4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002faa:	4a1a      	ldr	r2, [pc, #104]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fb0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002fb2:	4a18      	ldr	r2, [pc, #96]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fb8:	4b16      	ldr	r3, [pc, #88]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d114      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fef4 	bl	8001db0 <HAL_GetTick>
 8002fc8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fca:	e00a      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fcc:	f7fe fef0 	bl	8001db0 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e351      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0ee      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ff6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ffa:	d111      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ffc:	4b05      	ldr	r3, [pc, #20]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003008:	4b04      	ldr	r3, [pc, #16]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800300a:	400b      	ands	r3, r1
 800300c:	4901      	ldr	r1, [pc, #4]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800300e:	4313      	orrs	r3, r2
 8003010:	608b      	str	r3, [r1, #8]
 8003012:	e00b      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003014:	40023800 	.word	0x40023800
 8003018:	40007000 	.word	0x40007000
 800301c:	0ffffcff 	.word	0x0ffffcff
 8003020:	4bac      	ldr	r3, [pc, #688]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4aab      	ldr	r2, [pc, #684]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003026:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800302a:	6093      	str	r3, [r2, #8]
 800302c:	4ba9      	ldr	r3, [pc, #676]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800302e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003038:	49a6      	ldr	r1, [pc, #664]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303a:	4313      	orrs	r3, r2
 800303c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	2b00      	cmp	r3, #0
 8003048:	d010      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800304a:	4ba2      	ldr	r3, [pc, #648]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800304c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003050:	4aa0      	ldr	r2, [pc, #640]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003052:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003056:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800305a:	4b9e      	ldr	r3, [pc, #632]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003064:	499b      	ldr	r1, [pc, #620]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003078:	4b96      	ldr	r3, [pc, #600]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800307e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003086:	4993      	ldr	r1, [pc, #588]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800309a:	4b8e      	ldr	r3, [pc, #568]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800309c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030a8:	498a      	ldr	r1, [pc, #552]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030bc:	4b85      	ldr	r3, [pc, #532]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030ca:	4982      	ldr	r1, [pc, #520]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030de:	4b7d      	ldr	r3, [pc, #500]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ec:	4979      	ldr	r1, [pc, #484]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003100:	4b74      	ldr	r3, [pc, #464]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003106:	f023 0203 	bic.w	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310e:	4971      	ldr	r1, [pc, #452]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003122:	4b6c      	ldr	r3, [pc, #432]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003128:	f023 020c 	bic.w	r2, r3, #12
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003130:	4968      	ldr	r1, [pc, #416]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003144:	4b63      	ldr	r3, [pc, #396]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800314a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003152:	4960      	ldr	r1, [pc, #384]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003166:	4b5b      	ldr	r3, [pc, #364]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003174:	4957      	ldr	r1, [pc, #348]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003188:	4b52      	ldr	r3, [pc, #328]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003196:	494f      	ldr	r1, [pc, #316]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80031aa:	4b4a      	ldr	r3, [pc, #296]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b8:	4946      	ldr	r1, [pc, #280]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80031cc:	4b41      	ldr	r3, [pc, #260]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031da:	493e      	ldr	r1, [pc, #248]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031ee:	4b39      	ldr	r3, [pc, #228]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031fc:	4935      	ldr	r1, [pc, #212]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003210:	4b30      	ldr	r3, [pc, #192]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003216:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800321e:	492d      	ldr	r1, [pc, #180]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d011      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003232:	4b28      	ldr	r3, [pc, #160]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003238:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003240:	4924      	ldr	r1, [pc, #144]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800324c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003250:	d101      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003252:	2301      	movs	r3, #1
 8003254:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003262:	2301      	movs	r3, #1
 8003264:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003272:	4b18      	ldr	r3, [pc, #96]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003278:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003280:	4914      	ldr	r1, [pc, #80]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00b      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003294:	4b0f      	ldr	r3, [pc, #60]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800329a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032a4:	490b      	ldr	r1, [pc, #44]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00f      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80032b8:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032be:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032c8:	4902      	ldr	r1, [pc, #8]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80032d0:	e002      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00b      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032e4:	4b8a      	ldr	r3, [pc, #552]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f4:	4986      	ldr	r1, [pc, #536]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00b      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003308:	4b81      	ldr	r3, [pc, #516]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800330a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800330e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003318:	497d      	ldr	r1, [pc, #500]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d006      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 80d6 	beq.w	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003334:	4b76      	ldr	r3, [pc, #472]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a75      	ldr	r2, [pc, #468]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800333a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800333e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003340:	f7fe fd36 	bl	8001db0 <HAL_GetTick>
 8003344:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003346:	e008      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003348:	f7fe fd32 	bl	8001db0 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b64      	cmp	r3, #100	@ 0x64
 8003354:	d901      	bls.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e195      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800335a:	4b6d      	ldr	r3, [pc, #436]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d021      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003376:	2b00      	cmp	r3, #0
 8003378:	d11d      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800337a:	4b65      	ldr	r3, [pc, #404]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800337c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003380:	0c1b      	lsrs	r3, r3, #16
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003388:	4b61      	ldr	r3, [pc, #388]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800338a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800338e:	0e1b      	lsrs	r3, r3, #24
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	019a      	lsls	r2, r3, #6
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	041b      	lsls	r3, r3, #16
 80033a0:	431a      	orrs	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	061b      	lsls	r3, r3, #24
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	071b      	lsls	r3, r3, #28
 80033ae:	4958      	ldr	r1, [pc, #352]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033ca:	d00a      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d02e      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033e0:	d129      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033e8:	0c1b      	lsrs	r3, r3, #16
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033f0:	4b47      	ldr	r3, [pc, #284]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033f6:	0f1b      	lsrs	r3, r3, #28
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	019a      	lsls	r2, r3, #6
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	041b      	lsls	r3, r3, #16
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	061b      	lsls	r3, r3, #24
 8003410:	431a      	orrs	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	071b      	lsls	r3, r3, #28
 8003416:	493e      	ldr	r1, [pc, #248]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800341e:	4b3c      	ldr	r3, [pc, #240]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003420:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003424:	f023 021f 	bic.w	r2, r3, #31
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	3b01      	subs	r3, #1
 800342e:	4938      	ldr	r1, [pc, #224]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d01d      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003442:	4b33      	ldr	r3, [pc, #204]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003448:	0e1b      	lsrs	r3, r3, #24
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003450:	4b2f      	ldr	r3, [pc, #188]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003456:	0f1b      	lsrs	r3, r3, #28
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	019a      	lsls	r2, r3, #6
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	431a      	orrs	r2, r3
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	061b      	lsls	r3, r3, #24
 8003470:	431a      	orrs	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	071b      	lsls	r3, r3, #28
 8003476:	4926      	ldr	r1, [pc, #152]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d011      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	019a      	lsls	r2, r3, #6
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	041b      	lsls	r3, r3, #16
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	061b      	lsls	r3, r3, #24
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	071b      	lsls	r3, r3, #28
 80034a6:	491a      	ldr	r1, [pc, #104]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034ae:	4b18      	ldr	r3, [pc, #96]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a17      	ldr	r2, [pc, #92]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80034b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ba:	f7fe fc79 	bl	8001db0 <HAL_GetTick>
 80034be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034c0:	e008      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034c2:	f7fe fc75 	bl	8001db0 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b64      	cmp	r3, #100	@ 0x64
 80034ce:	d901      	bls.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e0d8      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	f040 80ce 	bne.w	8003684 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034e8:	4b09      	ldr	r3, [pc, #36]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a08      	ldr	r2, [pc, #32]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f4:	f7fe fc5c 	bl	8001db0 <HAL_GetTick>
 80034f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034fa:	e00b      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034fc:	f7fe fc58 	bl	8001db0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b64      	cmp	r3, #100	@ 0x64
 8003508:	d904      	bls.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e0bb      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800350e:	bf00      	nop
 8003510:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003514:	4b5e      	ldr	r3, [pc, #376]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800351c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003520:	d0ec      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003532:	2b00      	cmp	r3, #0
 8003534:	d009      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800353e:	2b00      	cmp	r3, #0
 8003540:	d02e      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d12a      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800354a:	4b51      	ldr	r3, [pc, #324]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800354c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003550:	0c1b      	lsrs	r3, r3, #16
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003558:	4b4d      	ldr	r3, [pc, #308]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355e:	0f1b      	lsrs	r3, r3, #28
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	019a      	lsls	r2, r3, #6
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	041b      	lsls	r3, r3, #16
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	061b      	lsls	r3, r3, #24
 8003578:	431a      	orrs	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	071b      	lsls	r3, r3, #28
 800357e:	4944      	ldr	r1, [pc, #272]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003586:	4b42      	ldr	r3, [pc, #264]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800358c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003594:	3b01      	subs	r3, #1
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	493d      	ldr	r1, [pc, #244]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d022      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035b4:	d11d      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035b6:	4b36      	ldr	r3, [pc, #216]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035bc:	0e1b      	lsrs	r3, r3, #24
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035c4:	4b32      	ldr	r3, [pc, #200]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ca:	0f1b      	lsrs	r3, r3, #28
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	019a      	lsls	r2, r3, #6
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	041b      	lsls	r3, r3, #16
 80035de:	431a      	orrs	r2, r3
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	061b      	lsls	r3, r3, #24
 80035e4:	431a      	orrs	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	071b      	lsls	r3, r3, #28
 80035ea:	4929      	ldr	r1, [pc, #164]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d028      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035fe:	4b24      	ldr	r3, [pc, #144]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003604:	0e1b      	lsrs	r3, r3, #24
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800360c:	4b20      	ldr	r3, [pc, #128]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003612:	0c1b      	lsrs	r3, r3, #16
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	019a      	lsls	r2, r3, #6
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	041b      	lsls	r3, r3, #16
 8003624:	431a      	orrs	r2, r3
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	061b      	lsls	r3, r3, #24
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	071b      	lsls	r3, r3, #28
 8003632:	4917      	ldr	r1, [pc, #92]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800363a:	4b15      	ldr	r3, [pc, #84]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800363c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003640:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003648:	4911      	ldr	r1, [pc, #68]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003650:	4b0f      	ldr	r3, [pc, #60]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a0e      	ldr	r2, [pc, #56]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800365a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800365c:	f7fe fba8 	bl	8001db0 <HAL_GetTick>
 8003660:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003664:	f7fe fba4 	bl	8001db0 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	@ 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e007      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003676:	4b06      	ldr	r3, [pc, #24]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800367e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003682:	d1ef      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3720      	adds	r7, #32
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800

08003694 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e071      	b.n	800378e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	7f5b      	ldrb	r3, [r3, #29]
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d105      	bne.n	80036c0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fd fd20 	bl	8001100 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b10      	cmp	r3, #16
 80036d2:	d053      	beq.n	800377c <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	22ca      	movs	r2, #202	@ 0xca
 80036da:	625a      	str	r2, [r3, #36]	@ 0x24
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2253      	movs	r2, #83	@ 0x53
 80036e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fa4b 	bl	8003b80 <RTC_EnterInitMode>
 80036ea:	4603      	mov	r3, r0
 80036ec:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d12a      	bne.n	800374a <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6899      	ldr	r1, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b26      	ldr	r3, [pc, #152]	@ (8003798 <HAL_RTC_Init+0x104>)
 8003700:	400b      	ands	r3, r1
 8003702:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6899      	ldr	r1, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68d2      	ldr	r2, [r2, #12]
 800372a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6919      	ldr	r1, [r3, #16]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	041a      	lsls	r2, r3, #16
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fa54 	bl	8003bee <RTC_ExitInitMode>
 8003746:	4603      	mov	r3, r0
 8003748:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d110      	bne.n	8003772 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0208 	bic.w	r2, r2, #8
 800375e:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699a      	ldr	r2, [r3, #24]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	22ff      	movs	r2, #255	@ 0xff
 8003778:	625a      	str	r2, [r3, #36]	@ 0x24
 800377a:	e001      	b.n	8003780 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d102      	bne.n	800378c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800378c:	7bfb      	ldrb	r3, [r7, #15]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	ff8fffbf 	.word	0xff8fffbf

0800379c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	7f1b      	ldrb	r3, [r3, #28]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_RTC_SetTime+0x1c>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e085      	b.n	80038c4 <HAL_RTC_SetTime+0x128>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2201      	movs	r2, #1
 80037bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2202      	movs	r2, #2
 80037c2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d126      	bne.n	8003818 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2200      	movs	r2, #0
 80037dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fa28 	bl	8003c38 <RTC_ByteToBcd2>
 80037e8:	4603      	mov	r3, r0
 80037ea:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	785b      	ldrb	r3, [r3, #1]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fa21 	bl	8003c38 <RTC_ByteToBcd2>
 80037f6:	4603      	mov	r3, r0
 80037f8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80037fa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	789b      	ldrb	r3, [r3, #2]
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fa19 	bl	8003c38 <RTC_ByteToBcd2>
 8003806:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003808:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	78db      	ldrb	r3, [r3, #3]
 8003810:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	e018      	b.n	800384a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d102      	bne.n	800382c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2200      	movs	r2, #0
 800382a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	785b      	ldrb	r3, [r3, #1]
 8003836:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003838:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800383e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	78db      	ldrb	r3, [r3, #3]
 8003844:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	22ca      	movs	r2, #202	@ 0xca
 8003850:	625a      	str	r2, [r3, #36]	@ 0x24
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2253      	movs	r2, #83	@ 0x53
 8003858:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f990 	bl	8003b80 <RTC_EnterInitMode>
 8003860:	4603      	mov	r3, r0
 8003862:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d11e      	bne.n	80038a8 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	6979      	ldr	r1, [r7, #20]
 8003870:	4b16      	ldr	r3, [pc, #88]	@ (80038cc <HAL_RTC_SetTime+0x130>)
 8003872:	400b      	ands	r3, r1
 8003874:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003884:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6899      	ldr	r1, [r3, #8]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	431a      	orrs	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f9a5 	bl	8003bee <RTC_ExitInitMode>
 80038a4:	4603      	mov	r3, r0
 80038a6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80038a8:	7cfb      	ldrb	r3, [r7, #19]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d102      	bne.n	80038b4 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	22ff      	movs	r2, #255	@ 0xff
 80038ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	771a      	strb	r2, [r3, #28]

  return status;
 80038c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	371c      	adds	r7, #28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd90      	pop	{r4, r7, pc}
 80038cc:	007f7f7f 	.word	0x007f7f7f

080038d0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4b22      	ldr	r3, [pc, #136]	@ (8003988 <HAL_RTC_GetTime+0xb8>)
 8003900:	4013      	ands	r3, r2
 8003902:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	0c1b      	lsrs	r3, r3, #16
 8003908:	b2db      	uxtb	r3, r3
 800390a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800390e:	b2da      	uxtb	r2, r3
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	0a1b      	lsrs	r3, r3, #8
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800391e:	b2da      	uxtb	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800392c:	b2da      	uxtb	r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	0d9b      	lsrs	r3, r3, #22
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	b2da      	uxtb	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d11a      	bne.n	800397e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f000 f991 	bl	8003c74 <RTC_Bcd2ToByte>
 8003952:	4603      	mov	r3, r0
 8003954:	461a      	mov	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	785b      	ldrb	r3, [r3, #1]
 800395e:	4618      	mov	r0, r3
 8003960:	f000 f988 	bl	8003c74 <RTC_Bcd2ToByte>
 8003964:	4603      	mov	r3, r0
 8003966:	461a      	mov	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	789b      	ldrb	r3, [r3, #2]
 8003970:	4618      	mov	r0, r3
 8003972:	f000 f97f 	bl	8003c74 <RTC_Bcd2ToByte>
 8003976:	4603      	mov	r3, r0
 8003978:	461a      	mov	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	007f7f7f 	.word	0x007f7f7f

0800398c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800398c:	b590      	push	{r4, r7, lr}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	7f1b      	ldrb	r3, [r3, #28]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_RTC_SetDate+0x1c>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e06f      	b.n	8003a88 <HAL_RTC_SetDate+0xfc>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2202      	movs	r2, #2
 80039b2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10e      	bne.n	80039d8 <HAL_RTC_SetDate+0x4c>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	785b      	ldrb	r3, [r3, #1]
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d008      	beq.n	80039d8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	785b      	ldrb	r3, [r3, #1]
 80039ca:	f023 0310 	bic.w	r3, r3, #16
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	330a      	adds	r3, #10
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d11c      	bne.n	8003a18 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	78db      	ldrb	r3, [r3, #3]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 f928 	bl	8003c38 <RTC_ByteToBcd2>
 80039e8:	4603      	mov	r3, r0
 80039ea:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	785b      	ldrb	r3, [r3, #1]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 f921 	bl	8003c38 <RTC_ByteToBcd2>
 80039f6:	4603      	mov	r3, r0
 80039f8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80039fa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	789b      	ldrb	r3, [r3, #2]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 f919 	bl	8003c38 <RTC_ByteToBcd2>
 8003a06:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003a08:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	e00e      	b.n	8003a36 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	78db      	ldrb	r3, [r3, #3]
 8003a1c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	785b      	ldrb	r3, [r3, #1]
 8003a22:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003a24:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003a2a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	22ca      	movs	r2, #202	@ 0xca
 8003a3c:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2253      	movs	r2, #83	@ 0x53
 8003a44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f89a 	bl	8003b80 <RTC_EnterInitMode>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10a      	bne.n	8003a6c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	6979      	ldr	r1, [r7, #20]
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a90 <HAL_RTC_SetDate+0x104>)
 8003a5e:	400b      	ands	r3, r1
 8003a60:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f8c3 	bl	8003bee <RTC_ExitInitMode>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003a6c:	7cfb      	ldrb	r3, [r7, #19]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	22ff      	movs	r2, #255	@ 0xff
 8003a7e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	771a      	strb	r2, [r3, #28]

  return status;
 8003a86:	7cfb      	ldrb	r3, [r7, #19]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	371c      	adds	r7, #28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd90      	pop	{r4, r7, pc}
 8003a90:	00ffff3f 	.word	0x00ffff3f

08003a94 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	4b21      	ldr	r3, [pc, #132]	@ (8003b30 <HAL_RTC_GetDate+0x9c>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	0c1b      	lsrs	r3, r3, #16
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	0a1b      	lsrs	r3, r3, #8
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	0b5b      	lsrs	r3, r3, #13
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d11a      	bne.n	8003b24 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	78db      	ldrb	r3, [r3, #3]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 f8be 	bl	8003c74 <RTC_Bcd2ToByte>
 8003af8:	4603      	mov	r3, r0
 8003afa:	461a      	mov	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	785b      	ldrb	r3, [r3, #1]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 f8b5 	bl	8003c74 <RTC_Bcd2ToByte>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	789b      	ldrb	r3, [r3, #2]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 f8ac 	bl	8003c74 <RTC_Bcd2ToByte>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	461a      	mov	r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	00ffff3f 	.word	0x00ffff3f

08003b34 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a0d      	ldr	r2, [pc, #52]	@ (8003b7c <HAL_RTC_WaitForSynchro+0x48>)
 8003b46:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b48:	f7fe f932 	bl	8001db0 <HAL_GetTick>
 8003b4c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b4e:	e009      	b.n	8003b64 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b50:	f7fe f92e 	bl	8001db0 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b5e:	d901      	bls.n	8003b64 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e007      	b.n	8003b74 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0ee      	beq.n	8003b50 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	0001ff5f 	.word	0x0001ff5f

08003b80 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d122      	bne.n	8003be4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003bac:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bae:	f7fe f8ff 	bl	8001db0 <HAL_GetTick>
 8003bb2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003bb4:	e00c      	b.n	8003bd0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003bb6:	f7fe f8fb 	bl	8001db0 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bc4:	d904      	bls.n	8003bd0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2204      	movs	r2, #4
 8003bca:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d102      	bne.n	8003be4 <RTC_EnterInitMode+0x64>
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d1e8      	bne.n	8003bb6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c08:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10a      	bne.n	8003c2e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff ff8b 	bl	8003b34 <HAL_RTC_WaitForSynchro>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d004      	beq.n	8003c2e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2204      	movs	r2, #4
 8003c28:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003c46:	e005      	b.n	8003c54 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	3b0a      	subs	r3, #10
 8003c52:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	2b09      	cmp	r3, #9
 8003c58:	d8f6      	bhi.n	8003c48 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	b2db      	uxtb	r3, r3
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	b2db      	uxtb	r3, r3
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e049      	b.n	8003d56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f841 	bl	8003d5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f000 f9e8 	bl	80040c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d001      	beq.n	8003d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e054      	b.n	8003e36 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0201 	orr.w	r2, r2, #1
 8003da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a26      	ldr	r2, [pc, #152]	@ (8003e44 <HAL_TIM_Base_Start_IT+0xd0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d022      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db6:	d01d      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a22      	ldr	r2, [pc, #136]	@ (8003e48 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d018      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a21      	ldr	r2, [pc, #132]	@ (8003e4c <HAL_TIM_Base_Start_IT+0xd8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d013      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e50 <HAL_TIM_Base_Start_IT+0xdc>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00e      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1e      	ldr	r2, [pc, #120]	@ (8003e54 <HAL_TIM_Base_Start_IT+0xe0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d009      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e58 <HAL_TIM_Base_Start_IT+0xe4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d004      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a1b      	ldr	r2, [pc, #108]	@ (8003e5c <HAL_TIM_Base_Start_IT+0xe8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d115      	bne.n	8003e20 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	4b19      	ldr	r3, [pc, #100]	@ (8003e60 <HAL_TIM_Base_Start_IT+0xec>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b06      	cmp	r3, #6
 8003e04:	d015      	beq.n	8003e32 <HAL_TIM_Base_Start_IT+0xbe>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e0c:	d011      	beq.n	8003e32 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0201 	orr.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1e:	e008      	b.n	8003e32 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	e000      	b.n	8003e34 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40010000 	.word	0x40010000
 8003e48:	40000400 	.word	0x40000400
 8003e4c:	40000800 	.word	0x40000800
 8003e50:	40000c00 	.word	0x40000c00
 8003e54:	40010400 	.word	0x40010400
 8003e58:	40014000 	.word	0x40014000
 8003e5c:	40001800 	.word	0x40001800
 8003e60:	00010007 	.word	0x00010007

08003e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d020      	beq.n	8003ec8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d01b      	beq.n	8003ec8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0202 	mvn.w	r2, #2
 8003e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f8e9 	bl	8004086 <HAL_TIM_IC_CaptureCallback>
 8003eb4:	e005      	b.n	8003ec2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f8db 	bl	8004072 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f8ec 	bl	800409a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d020      	beq.n	8003f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d01b      	beq.n	8003f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0204 	mvn.w	r2, #4
 8003ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f8c3 	bl	8004086 <HAL_TIM_IC_CaptureCallback>
 8003f00:	e005      	b.n	8003f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f8b5 	bl	8004072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f8c6 	bl	800409a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d020      	beq.n	8003f60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01b      	beq.n	8003f60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0208 	mvn.w	r2, #8
 8003f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2204      	movs	r2, #4
 8003f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f89d 	bl	8004086 <HAL_TIM_IC_CaptureCallback>
 8003f4c:	e005      	b.n	8003f5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f88f 	bl	8004072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f8a0 	bl	800409a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d020      	beq.n	8003fac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d01b      	beq.n	8003fac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f06f 0210 	mvn.w	r2, #16
 8003f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2208      	movs	r2, #8
 8003f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f877 	bl	8004086 <HAL_TIM_IC_CaptureCallback>
 8003f98:	e005      	b.n	8003fa6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f869 	bl	8004072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f87a 	bl	800409a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00c      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d007      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f06f 0201 	mvn.w	r2, #1
 8003fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fc ff4e 	bl	8000e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d104      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00c      	beq.n	8003ffe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d007      	beq.n	8003ffe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f919 	bl	8004230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00c      	beq.n	8004022 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800401a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f911 	bl	8004244 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00c      	beq.n	8004046 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d007      	beq.n	8004046 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800403e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f834 	bl	80040ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00c      	beq.n	800406a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b00      	cmp	r3, #0
 8004058:	d007      	beq.n	800406a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f06f 0220 	mvn.w	r2, #32
 8004062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f8d9 	bl	800421c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800406a:	bf00      	nop
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
	...

080040c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a46      	ldr	r2, [pc, #280]	@ (80041f0 <TIM_Base_SetConfig+0x12c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d013      	beq.n	8004104 <TIM_Base_SetConfig+0x40>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e2:	d00f      	beq.n	8004104 <TIM_Base_SetConfig+0x40>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a43      	ldr	r2, [pc, #268]	@ (80041f4 <TIM_Base_SetConfig+0x130>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00b      	beq.n	8004104 <TIM_Base_SetConfig+0x40>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a42      	ldr	r2, [pc, #264]	@ (80041f8 <TIM_Base_SetConfig+0x134>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d007      	beq.n	8004104 <TIM_Base_SetConfig+0x40>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a41      	ldr	r2, [pc, #260]	@ (80041fc <TIM_Base_SetConfig+0x138>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <TIM_Base_SetConfig+0x40>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a40      	ldr	r2, [pc, #256]	@ (8004200 <TIM_Base_SetConfig+0x13c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d108      	bne.n	8004116 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800410a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a35      	ldr	r2, [pc, #212]	@ (80041f0 <TIM_Base_SetConfig+0x12c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d02b      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004124:	d027      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a32      	ldr	r2, [pc, #200]	@ (80041f4 <TIM_Base_SetConfig+0x130>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d023      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a31      	ldr	r2, [pc, #196]	@ (80041f8 <TIM_Base_SetConfig+0x134>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d01f      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a30      	ldr	r2, [pc, #192]	@ (80041fc <TIM_Base_SetConfig+0x138>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d01b      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a2f      	ldr	r2, [pc, #188]	@ (8004200 <TIM_Base_SetConfig+0x13c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d017      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a2e      	ldr	r2, [pc, #184]	@ (8004204 <TIM_Base_SetConfig+0x140>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a2d      	ldr	r2, [pc, #180]	@ (8004208 <TIM_Base_SetConfig+0x144>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00f      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2c      	ldr	r2, [pc, #176]	@ (800420c <TIM_Base_SetConfig+0x148>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00b      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a2b      	ldr	r2, [pc, #172]	@ (8004210 <TIM_Base_SetConfig+0x14c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d007      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a2a      	ldr	r2, [pc, #168]	@ (8004214 <TIM_Base_SetConfig+0x150>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d003      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a29      	ldr	r2, [pc, #164]	@ (8004218 <TIM_Base_SetConfig+0x154>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d108      	bne.n	8004188 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800417c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a10      	ldr	r2, [pc, #64]	@ (80041f0 <TIM_Base_SetConfig+0x12c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d003      	beq.n	80041bc <TIM_Base_SetConfig+0xf8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a12      	ldr	r2, [pc, #72]	@ (8004200 <TIM_Base_SetConfig+0x13c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d103      	bne.n	80041c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d105      	bne.n	80041e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f023 0201 	bic.w	r2, r3, #1
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	611a      	str	r2, [r3, #16]
  }
}
 80041e2:	bf00      	nop
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40010000 	.word	0x40010000
 80041f4:	40000400 	.word	0x40000400
 80041f8:	40000800 	.word	0x40000800
 80041fc:	40000c00 	.word	0x40000c00
 8004200:	40010400 	.word	0x40010400
 8004204:	40014000 	.word	0x40014000
 8004208:	40014400 	.word	0x40014400
 800420c:	40014800 	.word	0x40014800
 8004210:	40001800 	.word	0x40001800
 8004214:	40001c00 	.word	0x40001c00
 8004218:	40002000 	.word	0x40002000

0800421c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e040      	b.n	80042ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fc ff6e 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2224      	movs	r2, #36	@ 0x24
 8004284:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0201 	bic.w	r2, r2, #1
 8004294:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fe6c 	bl	8004f7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 fc05 	bl	8004ab4 <UART_SetConfig>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e01b      	b.n	80042ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 feeb 	bl	80050c0 <UART_CheckIdleState>
 80042ea:	4603      	mov	r3, r0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08a      	sub	sp, #40	@ 0x28
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	4613      	mov	r3, r2
 8004302:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004308:	2b20      	cmp	r3, #32
 800430a:	d177      	bne.n	80043fc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_UART_Transmit+0x24>
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e070      	b.n	80043fe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2221      	movs	r2, #33	@ 0x21
 8004328:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800432a:	f7fd fd41 	bl	8001db0 <HAL_GetTick>
 800432e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	88fa      	ldrh	r2, [r7, #6]
 8004334:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	88fa      	ldrh	r2, [r7, #6]
 800433c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004348:	d108      	bne.n	800435c <HAL_UART_Transmit+0x68>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d104      	bne.n	800435c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	61bb      	str	r3, [r7, #24]
 800435a:	e003      	b.n	8004364 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004360:	2300      	movs	r3, #0
 8004362:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004364:	e02f      	b.n	80043c6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2200      	movs	r2, #0
 800436e:	2180      	movs	r1, #128	@ 0x80
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 ff4d 	bl	8005210 <UART_WaitOnFlagUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d004      	beq.n	8004386 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e03b      	b.n	80043fe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10b      	bne.n	80043a4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800439a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	3302      	adds	r3, #2
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	e007      	b.n	80043b4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	781a      	ldrb	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	3301      	adds	r3, #1
 80043b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1c9      	bne.n	8004366 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2200      	movs	r2, #0
 80043da:	2140      	movs	r1, #64	@ 0x40
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 ff17 	bl	8005210 <UART_WaitOnFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e005      	b.n	80043fe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	e000      	b.n	80043fe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80043fc:	2302      	movs	r3, #2
  }
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b08a      	sub	sp, #40	@ 0x28
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	4613      	mov	r3, r2
 8004412:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800441a:	2b20      	cmp	r3, #32
 800441c:	d132      	bne.n	8004484 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <HAL_UART_Receive_IT+0x24>
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e02b      	b.n	8004486 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d018      	beq.n	8004474 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	613b      	str	r3, [r7, #16]
   return(result);
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	623b      	str	r3, [r7, #32]
 8004462:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	69f9      	ldr	r1, [r7, #28]
 8004466:	6a3a      	ldr	r2, [r7, #32]
 8004468:	e841 2300 	strex	r3, r2, [r1]
 800446c:	61bb      	str	r3, [r7, #24]
   return(result);
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e6      	bne.n	8004442 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004474:	88fb      	ldrh	r3, [r7, #6]
 8004476:	461a      	mov	r2, r3
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 ff36 	bl	80052ec <UART_Start_Receive_IT>
 8004480:	4603      	mov	r3, r0
 8004482:	e000      	b.n	8004486 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004484:	2302      	movs	r3, #2
  }
}
 8004486:	4618      	mov	r0, r3
 8004488:	3728      	adds	r7, #40	@ 0x28
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b0ba      	sub	sp, #232	@ 0xe8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80044ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 80044be:	4013      	ands	r3, r2
 80044c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80044c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d115      	bne.n	80044f8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80044cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00f      	beq.n	80044f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d009      	beq.n	80044f8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 82ac 	beq.w	8004a46 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	4798      	blx	r3
      }
      return;
 80044f6:	e2a6      	b.n	8004a46 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80044f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 8117 	beq.w	8004730 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d106      	bne.n	800451c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800450e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004512:	4b85      	ldr	r3, [pc, #532]	@ (8004728 <HAL_UART_IRQHandler+0x298>)
 8004514:	4013      	ands	r3, r2
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 810a 	beq.w	8004730 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800451c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d011      	beq.n	800454c <HAL_UART_IRQHandler+0xbc>
 8004528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800452c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00b      	beq.n	800454c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2201      	movs	r2, #1
 800453a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004542:	f043 0201 	orr.w	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800454c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d011      	beq.n	800457c <HAL_UART_IRQHandler+0xec>
 8004558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00b      	beq.n	800457c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2202      	movs	r2, #2
 800456a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004572:	f043 0204 	orr.w	r2, r3, #4
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800457c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d011      	beq.n	80045ac <HAL_UART_IRQHandler+0x11c>
 8004588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00b      	beq.n	80045ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2204      	movs	r2, #4
 800459a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045a2:	f043 0202 	orr.w	r2, r3, #2
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d017      	beq.n	80045e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d105      	bne.n	80045d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00b      	beq.n	80045e8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2208      	movs	r2, #8
 80045d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045de:	f043 0208 	orr.w	r2, r3, #8
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80045e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d012      	beq.n	800461a <HAL_UART_IRQHandler+0x18a>
 80045f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00c      	beq.n	800461a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004608:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004610:	f043 0220 	orr.w	r2, r3, #32
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 8212 	beq.w	8004a4a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00d      	beq.n	800464e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004654:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004662:	2b40      	cmp	r3, #64	@ 0x40
 8004664:	d005      	beq.n	8004672 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800466a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800466e:	2b00      	cmp	r3, #0
 8004670:	d04f      	beq.n	8004712 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 ff00 	bl	8005478 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004682:	2b40      	cmp	r3, #64	@ 0x40
 8004684:	d141      	bne.n	800470a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3308      	adds	r3, #8
 800468c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800469c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3308      	adds	r3, #8
 80046ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1d9      	bne.n	8004686 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d013      	beq.n	8004702 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046de:	4a13      	ldr	r2, [pc, #76]	@ (800472c <HAL_UART_IRQHandler+0x29c>)
 80046e0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fd fcc0 	bl	800206c <HAL_DMA_Abort_IT>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d017      	beq.n	8004722 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80046fc:	4610      	mov	r0, r2
 80046fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004700:	e00f      	b.n	8004722 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f9b6 	bl	8004a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004708:	e00b      	b.n	8004722 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f9b2 	bl	8004a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004710:	e007      	b.n	8004722 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f9ae 	bl	8004a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004720:	e193      	b.n	8004a4a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004722:	bf00      	nop
    return;
 8004724:	e191      	b.n	8004a4a <HAL_UART_IRQHandler+0x5ba>
 8004726:	bf00      	nop
 8004728:	04000120 	.word	0x04000120
 800472c:	08005541 	.word	0x08005541

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004734:	2b01      	cmp	r3, #1
 8004736:	f040 814c 	bne.w	80049d2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800473a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800473e:	f003 0310 	and.w	r3, r3, #16
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8145 	beq.w	80049d2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 813e 	beq.w	80049d2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2210      	movs	r2, #16
 800475c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004768:	2b40      	cmp	r3, #64	@ 0x40
 800476a:	f040 80b6 	bne.w	80048da <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800477a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 8165 	beq.w	8004a4e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800478a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800478e:	429a      	cmp	r2, r3
 8004790:	f080 815d 	bcs.w	8004a4e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800479a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047a8:	f000 8086 	beq.w	80048b8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80047d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047da:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80047e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80047ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1da      	bne.n	80047ac <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3308      	adds	r3, #8
 80047fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004800:	e853 3f00 	ldrex	r3, [r3]
 8004804:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004806:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3308      	adds	r3, #8
 8004816:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800481a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800481e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004820:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004822:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800482c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e1      	bne.n	80047f6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3308      	adds	r3, #8
 8004838:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004842:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004848:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3308      	adds	r3, #8
 8004852:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004856:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004858:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800485c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004864:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e3      	bne.n	8004832 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2220      	movs	r2, #32
 800486e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004888:	f023 0310 	bic.w	r3, r3, #16
 800488c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800489a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800489c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048a2:	e841 2300 	strex	r3, r2, [r1]
 80048a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1e4      	bne.n	8004878 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fd fb6a 	bl	8001f8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	4619      	mov	r1, r3
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f8d8 	bl	8004a88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048d8:	e0b9      	b.n	8004a4e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 80ab 	beq.w	8004a52 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80048fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 80a6 	beq.w	8004a52 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800490e:	e853 3f00 	ldrex	r3, [r3]
 8004912:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004916:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800491a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004928:	647b      	str	r3, [r7, #68]	@ 0x44
 800492a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800492e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004930:	e841 2300 	strex	r3, r2, [r1]
 8004934:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e4      	bne.n	8004906 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3308      	adds	r3, #8
 8004942:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	623b      	str	r3, [r7, #32]
   return(result);
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	f023 0301 	bic.w	r3, r3, #1
 8004952:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3308      	adds	r3, #8
 800495c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004960:	633a      	str	r2, [r7, #48]	@ 0x30
 8004962:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004964:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004968:	e841 2300 	strex	r3, r2, [r1]
 800496c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800496e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1e3      	bne.n	800493c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2220      	movs	r2, #32
 8004978:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	60fb      	str	r3, [r7, #12]
   return(result);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f023 0310 	bic.w	r3, r3, #16
 800499c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	69b9      	ldr	r1, [r7, #24]
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	617b      	str	r3, [r7, #20]
   return(result);
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e4      	bne.n	8004988 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2202      	movs	r2, #2
 80049c2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049c8:	4619      	mov	r1, r3
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f85c 	bl	8004a88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049d0:	e03f      	b.n	8004a52 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80049d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00e      	beq.n	80049fc <HAL_UART_IRQHandler+0x56c>
 80049de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d008      	beq.n	80049fc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80049f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f853 	bl	8004aa0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049fa:	e02d      	b.n	8004a58 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80049fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00e      	beq.n	8004a26 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01c      	beq.n	8004a56 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	4798      	blx	r3
    }
    return;
 8004a24:	e017      	b.n	8004a56 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d012      	beq.n	8004a58 <HAL_UART_IRQHandler+0x5c8>
 8004a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00c      	beq.n	8004a58 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fd94 	bl	800556c <UART_EndTransmit_IT>
    return;
 8004a44:	e008      	b.n	8004a58 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004a46:	bf00      	nop
 8004a48:	e006      	b.n	8004a58 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004a4a:	bf00      	nop
 8004a4c:	e004      	b.n	8004a58 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004a4e:	bf00      	nop
 8004a50:	e002      	b.n	8004a58 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004a52:	bf00      	nop
 8004a54:	e000      	b.n	8004a58 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004a56:	bf00      	nop
  }

}
 8004a58:	37e8      	adds	r7, #232	@ 0xe8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop

08004a60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	4ba6      	ldr	r3, [pc, #664]	@ (8004d78 <UART_SetConfig+0x2c4>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6812      	ldr	r2, [r2, #0]
 8004ae6:	6979      	ldr	r1, [r7, #20]
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a94      	ldr	r2, [pc, #592]	@ (8004d7c <UART_SetConfig+0x2c8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d120      	bne.n	8004b72 <UART_SetConfig+0xbe>
 8004b30:	4b93      	ldr	r3, [pc, #588]	@ (8004d80 <UART_SetConfig+0x2cc>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d816      	bhi.n	8004b6c <UART_SetConfig+0xb8>
 8004b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b44 <UART_SetConfig+0x90>)
 8004b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b44:	08004b55 	.word	0x08004b55
 8004b48:	08004b61 	.word	0x08004b61
 8004b4c:	08004b5b 	.word	0x08004b5b
 8004b50:	08004b67 	.word	0x08004b67
 8004b54:	2301      	movs	r3, #1
 8004b56:	77fb      	strb	r3, [r7, #31]
 8004b58:	e150      	b.n	8004dfc <UART_SetConfig+0x348>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	77fb      	strb	r3, [r7, #31]
 8004b5e:	e14d      	b.n	8004dfc <UART_SetConfig+0x348>
 8004b60:	2304      	movs	r3, #4
 8004b62:	77fb      	strb	r3, [r7, #31]
 8004b64:	e14a      	b.n	8004dfc <UART_SetConfig+0x348>
 8004b66:	2308      	movs	r3, #8
 8004b68:	77fb      	strb	r3, [r7, #31]
 8004b6a:	e147      	b.n	8004dfc <UART_SetConfig+0x348>
 8004b6c:	2310      	movs	r3, #16
 8004b6e:	77fb      	strb	r3, [r7, #31]
 8004b70:	e144      	b.n	8004dfc <UART_SetConfig+0x348>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a83      	ldr	r2, [pc, #524]	@ (8004d84 <UART_SetConfig+0x2d0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d132      	bne.n	8004be2 <UART_SetConfig+0x12e>
 8004b7c:	4b80      	ldr	r3, [pc, #512]	@ (8004d80 <UART_SetConfig+0x2cc>)
 8004b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b82:	f003 030c 	and.w	r3, r3, #12
 8004b86:	2b0c      	cmp	r3, #12
 8004b88:	d828      	bhi.n	8004bdc <UART_SetConfig+0x128>
 8004b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b90 <UART_SetConfig+0xdc>)
 8004b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b90:	08004bc5 	.word	0x08004bc5
 8004b94:	08004bdd 	.word	0x08004bdd
 8004b98:	08004bdd 	.word	0x08004bdd
 8004b9c:	08004bdd 	.word	0x08004bdd
 8004ba0:	08004bd1 	.word	0x08004bd1
 8004ba4:	08004bdd 	.word	0x08004bdd
 8004ba8:	08004bdd 	.word	0x08004bdd
 8004bac:	08004bdd 	.word	0x08004bdd
 8004bb0:	08004bcb 	.word	0x08004bcb
 8004bb4:	08004bdd 	.word	0x08004bdd
 8004bb8:	08004bdd 	.word	0x08004bdd
 8004bbc:	08004bdd 	.word	0x08004bdd
 8004bc0:	08004bd7 	.word	0x08004bd7
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	77fb      	strb	r3, [r7, #31]
 8004bc8:	e118      	b.n	8004dfc <UART_SetConfig+0x348>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	77fb      	strb	r3, [r7, #31]
 8004bce:	e115      	b.n	8004dfc <UART_SetConfig+0x348>
 8004bd0:	2304      	movs	r3, #4
 8004bd2:	77fb      	strb	r3, [r7, #31]
 8004bd4:	e112      	b.n	8004dfc <UART_SetConfig+0x348>
 8004bd6:	2308      	movs	r3, #8
 8004bd8:	77fb      	strb	r3, [r7, #31]
 8004bda:	e10f      	b.n	8004dfc <UART_SetConfig+0x348>
 8004bdc:	2310      	movs	r3, #16
 8004bde:	77fb      	strb	r3, [r7, #31]
 8004be0:	e10c      	b.n	8004dfc <UART_SetConfig+0x348>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a68      	ldr	r2, [pc, #416]	@ (8004d88 <UART_SetConfig+0x2d4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d120      	bne.n	8004c2e <UART_SetConfig+0x17a>
 8004bec:	4b64      	ldr	r3, [pc, #400]	@ (8004d80 <UART_SetConfig+0x2cc>)
 8004bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004bf6:	2b30      	cmp	r3, #48	@ 0x30
 8004bf8:	d013      	beq.n	8004c22 <UART_SetConfig+0x16e>
 8004bfa:	2b30      	cmp	r3, #48	@ 0x30
 8004bfc:	d814      	bhi.n	8004c28 <UART_SetConfig+0x174>
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d009      	beq.n	8004c16 <UART_SetConfig+0x162>
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	d810      	bhi.n	8004c28 <UART_SetConfig+0x174>
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <UART_SetConfig+0x15c>
 8004c0a:	2b10      	cmp	r3, #16
 8004c0c:	d006      	beq.n	8004c1c <UART_SetConfig+0x168>
 8004c0e:	e00b      	b.n	8004c28 <UART_SetConfig+0x174>
 8004c10:	2300      	movs	r3, #0
 8004c12:	77fb      	strb	r3, [r7, #31]
 8004c14:	e0f2      	b.n	8004dfc <UART_SetConfig+0x348>
 8004c16:	2302      	movs	r3, #2
 8004c18:	77fb      	strb	r3, [r7, #31]
 8004c1a:	e0ef      	b.n	8004dfc <UART_SetConfig+0x348>
 8004c1c:	2304      	movs	r3, #4
 8004c1e:	77fb      	strb	r3, [r7, #31]
 8004c20:	e0ec      	b.n	8004dfc <UART_SetConfig+0x348>
 8004c22:	2308      	movs	r3, #8
 8004c24:	77fb      	strb	r3, [r7, #31]
 8004c26:	e0e9      	b.n	8004dfc <UART_SetConfig+0x348>
 8004c28:	2310      	movs	r3, #16
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e0e6      	b.n	8004dfc <UART_SetConfig+0x348>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a56      	ldr	r2, [pc, #344]	@ (8004d8c <UART_SetConfig+0x2d8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d120      	bne.n	8004c7a <UART_SetConfig+0x1c6>
 8004c38:	4b51      	ldr	r3, [pc, #324]	@ (8004d80 <UART_SetConfig+0x2cc>)
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c42:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c44:	d013      	beq.n	8004c6e <UART_SetConfig+0x1ba>
 8004c46:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c48:	d814      	bhi.n	8004c74 <UART_SetConfig+0x1c0>
 8004c4a:	2b80      	cmp	r3, #128	@ 0x80
 8004c4c:	d009      	beq.n	8004c62 <UART_SetConfig+0x1ae>
 8004c4e:	2b80      	cmp	r3, #128	@ 0x80
 8004c50:	d810      	bhi.n	8004c74 <UART_SetConfig+0x1c0>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <UART_SetConfig+0x1a8>
 8004c56:	2b40      	cmp	r3, #64	@ 0x40
 8004c58:	d006      	beq.n	8004c68 <UART_SetConfig+0x1b4>
 8004c5a:	e00b      	b.n	8004c74 <UART_SetConfig+0x1c0>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	77fb      	strb	r3, [r7, #31]
 8004c60:	e0cc      	b.n	8004dfc <UART_SetConfig+0x348>
 8004c62:	2302      	movs	r3, #2
 8004c64:	77fb      	strb	r3, [r7, #31]
 8004c66:	e0c9      	b.n	8004dfc <UART_SetConfig+0x348>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e0c6      	b.n	8004dfc <UART_SetConfig+0x348>
 8004c6e:	2308      	movs	r3, #8
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e0c3      	b.n	8004dfc <UART_SetConfig+0x348>
 8004c74:	2310      	movs	r3, #16
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e0c0      	b.n	8004dfc <UART_SetConfig+0x348>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a44      	ldr	r2, [pc, #272]	@ (8004d90 <UART_SetConfig+0x2dc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d125      	bne.n	8004cd0 <UART_SetConfig+0x21c>
 8004c84:	4b3e      	ldr	r3, [pc, #248]	@ (8004d80 <UART_SetConfig+0x2cc>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c92:	d017      	beq.n	8004cc4 <UART_SetConfig+0x210>
 8004c94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c98:	d817      	bhi.n	8004cca <UART_SetConfig+0x216>
 8004c9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c9e:	d00b      	beq.n	8004cb8 <UART_SetConfig+0x204>
 8004ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ca4:	d811      	bhi.n	8004cca <UART_SetConfig+0x216>
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <UART_SetConfig+0x1fe>
 8004caa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cae:	d006      	beq.n	8004cbe <UART_SetConfig+0x20a>
 8004cb0:	e00b      	b.n	8004cca <UART_SetConfig+0x216>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e0a1      	b.n	8004dfc <UART_SetConfig+0x348>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e09e      	b.n	8004dfc <UART_SetConfig+0x348>
 8004cbe:	2304      	movs	r3, #4
 8004cc0:	77fb      	strb	r3, [r7, #31]
 8004cc2:	e09b      	b.n	8004dfc <UART_SetConfig+0x348>
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e098      	b.n	8004dfc <UART_SetConfig+0x348>
 8004cca:	2310      	movs	r3, #16
 8004ccc:	77fb      	strb	r3, [r7, #31]
 8004cce:	e095      	b.n	8004dfc <UART_SetConfig+0x348>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a2f      	ldr	r2, [pc, #188]	@ (8004d94 <UART_SetConfig+0x2e0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d125      	bne.n	8004d26 <UART_SetConfig+0x272>
 8004cda:	4b29      	ldr	r3, [pc, #164]	@ (8004d80 <UART_SetConfig+0x2cc>)
 8004cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ce4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ce8:	d017      	beq.n	8004d1a <UART_SetConfig+0x266>
 8004cea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cee:	d817      	bhi.n	8004d20 <UART_SetConfig+0x26c>
 8004cf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cf4:	d00b      	beq.n	8004d0e <UART_SetConfig+0x25a>
 8004cf6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cfa:	d811      	bhi.n	8004d20 <UART_SetConfig+0x26c>
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <UART_SetConfig+0x254>
 8004d00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d04:	d006      	beq.n	8004d14 <UART_SetConfig+0x260>
 8004d06:	e00b      	b.n	8004d20 <UART_SetConfig+0x26c>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	77fb      	strb	r3, [r7, #31]
 8004d0c:	e076      	b.n	8004dfc <UART_SetConfig+0x348>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	77fb      	strb	r3, [r7, #31]
 8004d12:	e073      	b.n	8004dfc <UART_SetConfig+0x348>
 8004d14:	2304      	movs	r3, #4
 8004d16:	77fb      	strb	r3, [r7, #31]
 8004d18:	e070      	b.n	8004dfc <UART_SetConfig+0x348>
 8004d1a:	2308      	movs	r3, #8
 8004d1c:	77fb      	strb	r3, [r7, #31]
 8004d1e:	e06d      	b.n	8004dfc <UART_SetConfig+0x348>
 8004d20:	2310      	movs	r3, #16
 8004d22:	77fb      	strb	r3, [r7, #31]
 8004d24:	e06a      	b.n	8004dfc <UART_SetConfig+0x348>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004d98 <UART_SetConfig+0x2e4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d138      	bne.n	8004da2 <UART_SetConfig+0x2ee>
 8004d30:	4b13      	ldr	r3, [pc, #76]	@ (8004d80 <UART_SetConfig+0x2cc>)
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d36:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004d3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d3e:	d017      	beq.n	8004d70 <UART_SetConfig+0x2bc>
 8004d40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d44:	d82a      	bhi.n	8004d9c <UART_SetConfig+0x2e8>
 8004d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d4a:	d00b      	beq.n	8004d64 <UART_SetConfig+0x2b0>
 8004d4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d50:	d824      	bhi.n	8004d9c <UART_SetConfig+0x2e8>
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <UART_SetConfig+0x2aa>
 8004d56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d5a:	d006      	beq.n	8004d6a <UART_SetConfig+0x2b6>
 8004d5c:	e01e      	b.n	8004d9c <UART_SetConfig+0x2e8>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	77fb      	strb	r3, [r7, #31]
 8004d62:	e04b      	b.n	8004dfc <UART_SetConfig+0x348>
 8004d64:	2302      	movs	r3, #2
 8004d66:	77fb      	strb	r3, [r7, #31]
 8004d68:	e048      	b.n	8004dfc <UART_SetConfig+0x348>
 8004d6a:	2304      	movs	r3, #4
 8004d6c:	77fb      	strb	r3, [r7, #31]
 8004d6e:	e045      	b.n	8004dfc <UART_SetConfig+0x348>
 8004d70:	2308      	movs	r3, #8
 8004d72:	77fb      	strb	r3, [r7, #31]
 8004d74:	e042      	b.n	8004dfc <UART_SetConfig+0x348>
 8004d76:	bf00      	nop
 8004d78:	efff69f3 	.word	0xefff69f3
 8004d7c:	40011000 	.word	0x40011000
 8004d80:	40023800 	.word	0x40023800
 8004d84:	40004400 	.word	0x40004400
 8004d88:	40004800 	.word	0x40004800
 8004d8c:	40004c00 	.word	0x40004c00
 8004d90:	40005000 	.word	0x40005000
 8004d94:	40011400 	.word	0x40011400
 8004d98:	40007800 	.word	0x40007800
 8004d9c:	2310      	movs	r3, #16
 8004d9e:	77fb      	strb	r3, [r7, #31]
 8004da0:	e02c      	b.n	8004dfc <UART_SetConfig+0x348>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a72      	ldr	r2, [pc, #456]	@ (8004f70 <UART_SetConfig+0x4bc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d125      	bne.n	8004df8 <UART_SetConfig+0x344>
 8004dac:	4b71      	ldr	r3, [pc, #452]	@ (8004f74 <UART_SetConfig+0x4c0>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004db6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004dba:	d017      	beq.n	8004dec <UART_SetConfig+0x338>
 8004dbc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004dc0:	d817      	bhi.n	8004df2 <UART_SetConfig+0x33e>
 8004dc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dc6:	d00b      	beq.n	8004de0 <UART_SetConfig+0x32c>
 8004dc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dcc:	d811      	bhi.n	8004df2 <UART_SetConfig+0x33e>
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <UART_SetConfig+0x326>
 8004dd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dd6:	d006      	beq.n	8004de6 <UART_SetConfig+0x332>
 8004dd8:	e00b      	b.n	8004df2 <UART_SetConfig+0x33e>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	77fb      	strb	r3, [r7, #31]
 8004dde:	e00d      	b.n	8004dfc <UART_SetConfig+0x348>
 8004de0:	2302      	movs	r3, #2
 8004de2:	77fb      	strb	r3, [r7, #31]
 8004de4:	e00a      	b.n	8004dfc <UART_SetConfig+0x348>
 8004de6:	2304      	movs	r3, #4
 8004de8:	77fb      	strb	r3, [r7, #31]
 8004dea:	e007      	b.n	8004dfc <UART_SetConfig+0x348>
 8004dec:	2308      	movs	r3, #8
 8004dee:	77fb      	strb	r3, [r7, #31]
 8004df0:	e004      	b.n	8004dfc <UART_SetConfig+0x348>
 8004df2:	2310      	movs	r3, #16
 8004df4:	77fb      	strb	r3, [r7, #31]
 8004df6:	e001      	b.n	8004dfc <UART_SetConfig+0x348>
 8004df8:	2310      	movs	r3, #16
 8004dfa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e04:	d15b      	bne.n	8004ebe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004e06:	7ffb      	ldrb	r3, [r7, #31]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d828      	bhi.n	8004e5e <UART_SetConfig+0x3aa>
 8004e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e14 <UART_SetConfig+0x360>)
 8004e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e12:	bf00      	nop
 8004e14:	08004e39 	.word	0x08004e39
 8004e18:	08004e41 	.word	0x08004e41
 8004e1c:	08004e49 	.word	0x08004e49
 8004e20:	08004e5f 	.word	0x08004e5f
 8004e24:	08004e4f 	.word	0x08004e4f
 8004e28:	08004e5f 	.word	0x08004e5f
 8004e2c:	08004e5f 	.word	0x08004e5f
 8004e30:	08004e5f 	.word	0x08004e5f
 8004e34:	08004e57 	.word	0x08004e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e38:	f7fd ffaa 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8004e3c:	61b8      	str	r0, [r7, #24]
        break;
 8004e3e:	e013      	b.n	8004e68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e40:	f7fd ffba 	bl	8002db8 <HAL_RCC_GetPCLK2Freq>
 8004e44:	61b8      	str	r0, [r7, #24]
        break;
 8004e46:	e00f      	b.n	8004e68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e48:	4b4b      	ldr	r3, [pc, #300]	@ (8004f78 <UART_SetConfig+0x4c4>)
 8004e4a:	61bb      	str	r3, [r7, #24]
        break;
 8004e4c:	e00c      	b.n	8004e68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e4e:	f7fd fe8f 	bl	8002b70 <HAL_RCC_GetSysClockFreq>
 8004e52:	61b8      	str	r0, [r7, #24]
        break;
 8004e54:	e008      	b.n	8004e68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e5a:	61bb      	str	r3, [r7, #24]
        break;
 8004e5c:	e004      	b.n	8004e68 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	77bb      	strb	r3, [r7, #30]
        break;
 8004e66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d074      	beq.n	8004f58 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	005a      	lsls	r2, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	085b      	lsrs	r3, r3, #1
 8004e78:	441a      	add	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	2b0f      	cmp	r3, #15
 8004e88:	d916      	bls.n	8004eb8 <UART_SetConfig+0x404>
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e90:	d212      	bcs.n	8004eb8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	f023 030f 	bic.w	r3, r3, #15
 8004e9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	085b      	lsrs	r3, r3, #1
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	89fb      	ldrh	r3, [r7, #14]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	89fa      	ldrh	r2, [r7, #14]
 8004eb4:	60da      	str	r2, [r3, #12]
 8004eb6:	e04f      	b.n	8004f58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	77bb      	strb	r3, [r7, #30]
 8004ebc:	e04c      	b.n	8004f58 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ebe:	7ffb      	ldrb	r3, [r7, #31]
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d828      	bhi.n	8004f16 <UART_SetConfig+0x462>
 8004ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ecc <UART_SetConfig+0x418>)
 8004ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eca:	bf00      	nop
 8004ecc:	08004ef1 	.word	0x08004ef1
 8004ed0:	08004ef9 	.word	0x08004ef9
 8004ed4:	08004f01 	.word	0x08004f01
 8004ed8:	08004f17 	.word	0x08004f17
 8004edc:	08004f07 	.word	0x08004f07
 8004ee0:	08004f17 	.word	0x08004f17
 8004ee4:	08004f17 	.word	0x08004f17
 8004ee8:	08004f17 	.word	0x08004f17
 8004eec:	08004f0f 	.word	0x08004f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef0:	f7fd ff4e 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8004ef4:	61b8      	str	r0, [r7, #24]
        break;
 8004ef6:	e013      	b.n	8004f20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef8:	f7fd ff5e 	bl	8002db8 <HAL_RCC_GetPCLK2Freq>
 8004efc:	61b8      	str	r0, [r7, #24]
        break;
 8004efe:	e00f      	b.n	8004f20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f00:	4b1d      	ldr	r3, [pc, #116]	@ (8004f78 <UART_SetConfig+0x4c4>)
 8004f02:	61bb      	str	r3, [r7, #24]
        break;
 8004f04:	e00c      	b.n	8004f20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f06:	f7fd fe33 	bl	8002b70 <HAL_RCC_GetSysClockFreq>
 8004f0a:	61b8      	str	r0, [r7, #24]
        break;
 8004f0c:	e008      	b.n	8004f20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f12:	61bb      	str	r3, [r7, #24]
        break;
 8004f14:	e004      	b.n	8004f20 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	77bb      	strb	r3, [r7, #30]
        break;
 8004f1e:	bf00      	nop
    }

    if (pclk != 0U)
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d018      	beq.n	8004f58 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	085a      	lsrs	r2, r3, #1
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	441a      	add	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	2b0f      	cmp	r3, #15
 8004f3e:	d909      	bls.n	8004f54 <UART_SetConfig+0x4a0>
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f46:	d205      	bcs.n	8004f54 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	60da      	str	r2, [r3, #12]
 8004f52:	e001      	b.n	8004f58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f64:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3720      	adds	r7, #32
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40007c00 	.word	0x40007c00
 8004f74:	40023800 	.word	0x40023800
 8004f78:	00f42400 	.word	0x00f42400

08004f7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01a      	beq.n	8005092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800507a:	d10a      	bne.n	8005092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	605a      	str	r2, [r3, #4]
  }
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b098      	sub	sp, #96	@ 0x60
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050d0:	f7fc fe6e 	bl	8001db0 <HAL_GetTick>
 80050d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d12e      	bne.n	8005142 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ec:	2200      	movs	r2, #0
 80050ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f88c 	bl	8005210 <UART_WaitOnFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d021      	beq.n	8005142 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800510c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800510e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005112:	653b      	str	r3, [r7, #80]	@ 0x50
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	461a      	mov	r2, r3
 800511a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800511c:	647b      	str	r3, [r7, #68]	@ 0x44
 800511e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005120:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005122:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005124:	e841 2300 	strex	r3, r2, [r1]
 8005128:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800512a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e6      	bne.n	80050fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2220      	movs	r2, #32
 8005134:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e062      	b.n	8005208 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b04      	cmp	r3, #4
 800514e:	d149      	bne.n	80051e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005150:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005158:	2200      	movs	r2, #0
 800515a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f856 	bl	8005210 <UART_WaitOnFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d03c      	beq.n	80051e4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	623b      	str	r3, [r7, #32]
   return(result);
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800517e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005188:	633b      	str	r3, [r7, #48]	@ 0x30
 800518a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800518e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e6      	bne.n	800516a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3308      	adds	r3, #8
 80051a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0301 	bic.w	r3, r3, #1
 80051b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3308      	adds	r3, #8
 80051ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051bc:	61fa      	str	r2, [r7, #28]
 80051be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	69b9      	ldr	r1, [r7, #24]
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	617b      	str	r3, [r7, #20]
   return(result);
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e5      	bne.n	800519c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e011      	b.n	8005208 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2220      	movs	r2, #32
 80051e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3758      	adds	r7, #88	@ 0x58
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	4613      	mov	r3, r2
 800521e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005220:	e04f      	b.n	80052c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005228:	d04b      	beq.n	80052c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800522a:	f7fc fdc1 	bl	8001db0 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	429a      	cmp	r2, r3
 8005238:	d302      	bcc.n	8005240 <UART_WaitOnFlagUntilTimeout+0x30>
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e04e      	b.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b00      	cmp	r3, #0
 8005250:	d037      	beq.n	80052c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2b80      	cmp	r3, #128	@ 0x80
 8005256:	d034      	beq.n	80052c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b40      	cmp	r3, #64	@ 0x40
 800525c:	d031      	beq.n	80052c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	f003 0308 	and.w	r3, r3, #8
 8005268:	2b08      	cmp	r3, #8
 800526a:	d110      	bne.n	800528e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2208      	movs	r2, #8
 8005272:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 f8ff 	bl	8005478 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2208      	movs	r2, #8
 800527e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e029      	b.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005298:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800529c:	d111      	bne.n	80052c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80052a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 f8e5 	bl	8005478 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e00f      	b.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	4013      	ands	r3, r2
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	bf0c      	ite	eq
 80052d2:	2301      	moveq	r3, #1
 80052d4:	2300      	movne	r3, #0
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	461a      	mov	r2, r3
 80052da:	79fb      	ldrb	r3, [r7, #7]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d0a0      	beq.n	8005222 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b097      	sub	sp, #92	@ 0x5c
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	4613      	mov	r3, r2
 80052f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	88fa      	ldrh	r2, [r7, #6]
 8005304:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	88fa      	ldrh	r2, [r7, #6]
 800530c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800531e:	d10e      	bne.n	800533e <UART_Start_Receive_IT+0x52>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d105      	bne.n	8005334 <UART_Start_Receive_IT+0x48>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800532e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005332:	e02d      	b.n	8005390 <UART_Start_Receive_IT+0xa4>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	22ff      	movs	r2, #255	@ 0xff
 8005338:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800533c:	e028      	b.n	8005390 <UART_Start_Receive_IT+0xa4>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10d      	bne.n	8005362 <UART_Start_Receive_IT+0x76>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d104      	bne.n	8005358 <UART_Start_Receive_IT+0x6c>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	22ff      	movs	r2, #255	@ 0xff
 8005352:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005356:	e01b      	b.n	8005390 <UART_Start_Receive_IT+0xa4>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	227f      	movs	r2, #127	@ 0x7f
 800535c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005360:	e016      	b.n	8005390 <UART_Start_Receive_IT+0xa4>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800536a:	d10d      	bne.n	8005388 <UART_Start_Receive_IT+0x9c>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d104      	bne.n	800537e <UART_Start_Receive_IT+0x92>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	227f      	movs	r2, #127	@ 0x7f
 8005378:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800537c:	e008      	b.n	8005390 <UART_Start_Receive_IT+0xa4>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	223f      	movs	r2, #63	@ 0x3f
 8005382:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005386:	e003      	b.n	8005390 <UART_Start_Receive_IT+0xa4>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2222      	movs	r2, #34	@ 0x22
 800539c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3308      	adds	r3, #8
 80053a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053aa:	e853 3f00 	ldrex	r3, [r3]
 80053ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3308      	adds	r3, #8
 80053be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80053c0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80053c2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80053c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053c8:	e841 2300 	strex	r3, r2, [r1]
 80053cc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80053ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e5      	bne.n	80053a0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053dc:	d107      	bne.n	80053ee <UART_Start_Receive_IT+0x102>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d103      	bne.n	80053ee <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4a21      	ldr	r2, [pc, #132]	@ (8005470 <UART_Start_Receive_IT+0x184>)
 80053ea:	669a      	str	r2, [r3, #104]	@ 0x68
 80053ec:	e002      	b.n	80053f4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4a20      	ldr	r2, [pc, #128]	@ (8005474 <UART_Start_Receive_IT+0x188>)
 80053f2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d019      	beq.n	8005430 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005404:	e853 3f00 	ldrex	r3, [r3]
 8005408:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800540a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005410:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800541a:	637b      	str	r3, [r7, #52]	@ 0x34
 800541c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005420:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005422:	e841 2300 	strex	r3, r2, [r1]
 8005426:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1e6      	bne.n	80053fc <UART_Start_Receive_IT+0x110>
 800542e:	e018      	b.n	8005462 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	613b      	str	r3, [r7, #16]
   return(result);
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f043 0320 	orr.w	r3, r3, #32
 8005444:	653b      	str	r3, [r7, #80]	@ 0x50
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800544e:	623b      	str	r3, [r7, #32]
 8005450:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005452:	69f9      	ldr	r1, [r7, #28]
 8005454:	6a3a      	ldr	r2, [r7, #32]
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	61bb      	str	r3, [r7, #24]
   return(result);
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e6      	bne.n	8005430 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	375c      	adds	r7, #92	@ 0x5c
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	08005769 	.word	0x08005769
 8005474:	080055c1 	.word	0x080055c1

08005478 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005478:	b480      	push	{r7}
 800547a:	b095      	sub	sp, #84	@ 0x54
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005488:	e853 3f00 	ldrex	r3, [r3]
 800548c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800548e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005490:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005494:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800549e:	643b      	str	r3, [r7, #64]	@ 0x40
 80054a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054a6:	e841 2300 	strex	r3, r2, [r1]
 80054aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1e6      	bne.n	8005480 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3308      	adds	r3, #8
 80054b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	f023 0301 	bic.w	r3, r3, #1
 80054c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3308      	adds	r3, #8
 80054d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054da:	e841 2300 	strex	r3, r2, [r1]
 80054de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1e5      	bne.n	80054b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d118      	bne.n	8005520 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f023 0310 	bic.w	r3, r3, #16
 8005502:	647b      	str	r3, [r7, #68]	@ 0x44
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800550c:	61bb      	str	r3, [r7, #24]
 800550e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	6979      	ldr	r1, [r7, #20]
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	e841 2300 	strex	r3, r2, [r1]
 8005518:	613b      	str	r3, [r7, #16]
   return(result);
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e6      	bne.n	80054ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005534:	bf00      	nop
 8005536:	3754      	adds	r7, #84	@ 0x54
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f7ff fa88 	bl	8004a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005564:	bf00      	nop
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	60bb      	str	r3, [r7, #8]
   return(result);
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005588:	61fb      	str	r3, [r7, #28]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	61bb      	str	r3, [r7, #24]
 8005594:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	6979      	ldr	r1, [r7, #20]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	613b      	str	r3, [r7, #16]
   return(result);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e6      	bne.n	8005574 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2220      	movs	r2, #32
 80055aa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff fa54 	bl	8004a60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055b8:	bf00      	nop
 80055ba:	3720      	adds	r7, #32
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b09c      	sub	sp, #112	@ 0x70
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80055ce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055d8:	2b22      	cmp	r3, #34	@ 0x22
 80055da:	f040 80b9 	bne.w	8005750 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80055e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80055ec:	b2d9      	uxtb	r1, r3
 80055ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f8:	400a      	ands	r2, r1
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	f040 809c 	bne.w	8005760 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005638:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800563c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005646:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005648:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800564c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005654:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e6      	bne.n	8005628 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3308      	adds	r3, #8
 8005660:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800566a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800566c:	f023 0301 	bic.w	r3, r3, #1
 8005670:	667b      	str	r3, [r7, #100]	@ 0x64
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3308      	adds	r3, #8
 8005678:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800567a:	647a      	str	r2, [r7, #68]	@ 0x44
 800567c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005680:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e5      	bne.n	800565a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2220      	movs	r2, #32
 8005692:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d018      	beq.n	80056e2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	623b      	str	r3, [r7, #32]
   return(result);
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80056d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e6      	bne.n	80056b0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d12e      	bne.n	8005748 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f023 0310 	bic.w	r3, r3, #16
 8005704:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	69b9      	ldr	r1, [r7, #24]
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	617b      	str	r3, [r7, #20]
   return(result);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e6      	bne.n	80056f0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	2b10      	cmp	r3, #16
 800572e:	d103      	bne.n	8005738 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2210      	movs	r2, #16
 8005736:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff f9a1 	bl	8004a88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005746:	e00b      	b.n	8005760 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7fb fb45 	bl	8000dd8 <HAL_UART_RxCpltCallback>
}
 800574e:	e007      	b.n	8005760 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0208 	orr.w	r2, r2, #8
 800575e:	619a      	str	r2, [r3, #24]
}
 8005760:	bf00      	nop
 8005762:	3770      	adds	r7, #112	@ 0x70
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b09c      	sub	sp, #112	@ 0x70
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005776:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005780:	2b22      	cmp	r3, #34	@ 0x22
 8005782:	f040 80b9 	bne.w	80058f8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005794:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005796:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800579a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800579e:	4013      	ands	r3, r2
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057aa:	1c9a      	adds	r2, r3, #2
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	3b01      	subs	r3, #1
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f040 809c 	bne.w	8005908 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057d8:	e853 3f00 	ldrex	r3, [r3]
 80057dc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80057de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80057f0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80057f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80057fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1e6      	bne.n	80057d0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3308      	adds	r3, #8
 8005808:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580c:	e853 3f00 	ldrex	r3, [r3]
 8005810:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005814:	f023 0301 	bic.w	r3, r3, #1
 8005818:	663b      	str	r3, [r7, #96]	@ 0x60
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3308      	adds	r3, #8
 8005820:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005822:	643a      	str	r2, [r7, #64]	@ 0x40
 8005824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005826:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005828:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800582a:	e841 2300 	strex	r3, r2, [r1]
 800582e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1e5      	bne.n	8005802 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d018      	beq.n	800588a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	e853 3f00 	ldrex	r3, [r3]
 8005864:	61fb      	str	r3, [r7, #28]
   return(result);
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800586c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005876:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005878:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800587c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1e6      	bne.n	8005858 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800588e:	2b01      	cmp	r3, #1
 8005890:	d12e      	bne.n	80058f0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f023 0310 	bic.w	r3, r3, #16
 80058ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058b6:	61bb      	str	r3, [r7, #24]
 80058b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	6979      	ldr	r1, [r7, #20]
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	613b      	str	r3, [r7, #16]
   return(result);
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e6      	bne.n	8005898 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b10      	cmp	r3, #16
 80058d6:	d103      	bne.n	80058e0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2210      	movs	r2, #16
 80058de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff f8cd 	bl	8004a88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058ee:	e00b      	b.n	8005908 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7fb fa71 	bl	8000dd8 <HAL_UART_RxCpltCallback>
}
 80058f6:	e007      	b.n	8005908 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0208 	orr.w	r2, r2, #8
 8005906:	619a      	str	r2, [r3, #24]
}
 8005908:	bf00      	nop
 800590a:	3770      	adds	r7, #112	@ 0x70
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f103 0208 	add.w	r2, r3, #8
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f04f 32ff 	mov.w	r2, #4294967295
 8005928:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f103 0208 	add.w	r2, r3, #8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f103 0208 	add.w	r2, r3, #8
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800596a:	b480      	push	{r7}
 800596c:	b085      	sub	sp, #20
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005980:	d103      	bne.n	800598a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	e00c      	b.n	80059a4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	3308      	adds	r3, #8
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	e002      	b.n	8005998 <vListInsert+0x2e>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d2f6      	bcs.n	8005992 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80059d0:	bf00      	nop
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6892      	ldr	r2, [r2, #8]
 80059f2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6852      	ldr	r2, [r2, #4]
 80059fc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d103      	bne.n	8005a10 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	1e5a      	subs	r2, r3, #1
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10d      	bne.n	8005a64 <xQueueGenericReset+0x34>
    __asm volatile
 8005a48:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005a4c:	b672      	cpsid	i
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	b662      	cpsie	i
 8005a5c:	60fb      	str	r3, [r7, #12]
}
 8005a5e:	bf00      	nop
 8005a60:	bf00      	nop
 8005a62:	e7fd      	b.n	8005a60 <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d05d      	beq.n	8005b26 <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d059      	beq.n	8005b26 <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	fba3 2302 	umull	r2, r3, r3, r2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d000      	beq.n	8005a86 <xQueueGenericReset+0x56>
 8005a84:	2101      	movs	r1, #1
 8005a86:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d14c      	bne.n	8005b26 <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 8005a8c:	f002 ffc2 	bl	8008a14 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a98:	6939      	ldr	r1, [r7, #16]
 8005a9a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	441a      	add	r2, r3
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005abc:	3b01      	subs	r3, #1
 8005abe:	6939      	ldr	r1, [r7, #16]
 8005ac0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ac2:	fb01 f303 	mul.w	r3, r1, r3
 8005ac6:	441a      	add	r2, r3
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	22ff      	movs	r2, #255	@ 0xff
 8005ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	22ff      	movs	r2, #255	@ 0xff
 8005ad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d114      	bne.n	8005b0c <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d01a      	beq.n	8005b20 <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	3310      	adds	r3, #16
 8005aee:	4618      	mov	r0, r3
 8005af0:	f001 fbd8 	bl	80072a4 <xTaskRemoveFromEventList>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d012      	beq.n	8005b20 <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005afa:	4b17      	ldr	r3, [pc, #92]	@ (8005b58 <xQueueGenericReset+0x128>)
 8005afc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	e009      	b.n	8005b20 <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	3310      	adds	r3, #16
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7ff fefd 	bl	8005910 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	3324      	adds	r3, #36	@ 0x24
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff fef8 	bl	8005910 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8005b20:	f002 ffae 	bl	8008a80 <vPortExitCritical>
 8005b24:	e001      	b.n	8005b2a <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10d      	bne.n	8005b4c <xQueueGenericReset+0x11c>
    __asm volatile
 8005b30:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005b34:	b672      	cpsid	i
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	b662      	cpsie	i
 8005b44:	60bb      	str	r3, [r7, #8]
}
 8005b46:	bf00      	nop
 8005b48:	bf00      	nop
 8005b4a:	e7fd      	b.n	8005b48 <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8005b4c:	697b      	ldr	r3, [r7, #20]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	e000ed04 	.word	0xe000ed04

08005b5c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b08a      	sub	sp, #40	@ 0x28
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	4613      	mov	r3, r2
 8005b68:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d02e      	beq.n	8005bd2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005b74:	2100      	movs	r1, #0
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d000      	beq.n	8005b84 <xQueueGenericCreate+0x28>
 8005b82:	2101      	movs	r1, #1
 8005b84:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d123      	bne.n	8005bd2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005b92:	f113 0f55 	cmn.w	r3, #85	@ 0x55
 8005b96:	d81c      	bhi.n	8005bd2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ba0:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	3354      	adds	r3, #84	@ 0x54
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f003 f868 	bl	8008c7c <pvPortMalloc>
 8005bac:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01f      	beq.n	8005bf4 <xQueueGenericCreate+0x98>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	3354      	adds	r3, #84	@ 0x54
 8005bbc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bbe:	79fa      	ldrb	r2, [r7, #7]
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 f817 	bl	8005bfe <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8005bd0:	e010      	b.n	8005bf4 <xQueueGenericCreate+0x98>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10d      	bne.n	8005bf4 <xQueueGenericCreate+0x98>
    __asm volatile
 8005bd8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005bdc:	b672      	cpsid	i
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	b662      	cpsie	i
 8005bec:	613b      	str	r3, [r7, #16]
}
 8005bee:	bf00      	nop
 8005bf0:	bf00      	nop
 8005bf2:	e7fd      	b.n	8005bf0 <xQueueGenericCreate+0x94>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8005bf4:	69fb      	ldr	r3, [r7, #28]
    }
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3720      	adds	r7, #32
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b084      	sub	sp, #16
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	607a      	str	r2, [r7, #4]
 8005c0a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d103      	bne.n	8005c1a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	e002      	b.n	8005c20 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	69b8      	ldr	r0, [r7, #24]
 8005c30:	f7ff fefe 	bl	8005a30 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	78fa      	ldrb	r2, [r7, #3]
 8005c38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
    {
        pxNewQueue->pxQueueSetContainer = NULL;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005c42:	bf00      	nop
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08e      	sub	sp, #56	@ 0x38
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8005c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10d      	bne.n	8005c84 <xQueueGenericSend+0x38>
    __asm volatile
 8005c68:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005c6c:	b672      	cpsid	i
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	b662      	cpsie	i
 8005c7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	e7fd      	b.n	8005c80 <xQueueGenericSend+0x34>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d103      	bne.n	8005c92 <xQueueGenericSend+0x46>
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <xQueueGenericSend+0x4a>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e000      	b.n	8005c98 <xQueueGenericSend+0x4c>
 8005c96:	2300      	movs	r3, #0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10d      	bne.n	8005cb8 <xQueueGenericSend+0x6c>
    __asm volatile
 8005c9c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005ca0:	b672      	cpsid	i
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	b662      	cpsie	i
 8005cb0:	623b      	str	r3, [r7, #32]
}
 8005cb2:	bf00      	nop
 8005cb4:	bf00      	nop
 8005cb6:	e7fd      	b.n	8005cb4 <xQueueGenericSend+0x68>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d103      	bne.n	8005cc6 <xQueueGenericSend+0x7a>
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d101      	bne.n	8005cca <xQueueGenericSend+0x7e>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e000      	b.n	8005ccc <xQueueGenericSend+0x80>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10d      	bne.n	8005cec <xQueueGenericSend+0xa0>
    __asm volatile
 8005cd0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005cd4:	b672      	cpsid	i
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	b662      	cpsie	i
 8005ce4:	61fb      	str	r3, [r7, #28]
}
 8005ce6:	bf00      	nop
 8005ce8:	bf00      	nop
 8005cea:	e7fd      	b.n	8005ce8 <xQueueGenericSend+0x9c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cec:	f001 fcf6 	bl	80076dc <xTaskGetSchedulerState>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d102      	bne.n	8005cfc <xQueueGenericSend+0xb0>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <xQueueGenericSend+0xb4>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e000      	b.n	8005d02 <xQueueGenericSend+0xb6>
 8005d00:	2300      	movs	r3, #0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10d      	bne.n	8005d22 <xQueueGenericSend+0xd6>
    __asm volatile
 8005d06:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005d0a:	b672      	cpsid	i
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	b662      	cpsie	i
 8005d1a:	61bb      	str	r3, [r7, #24]
}
 8005d1c:	bf00      	nop
 8005d1e:	bf00      	nop
 8005d20:	e7fd      	b.n	8005d1e <xQueueGenericSend+0xd2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005d22:	f002 fe77 	bl	8008a14 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d302      	bcc.n	8005d38 <xQueueGenericSend+0xec>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d145      	bne.n	8005dc4 <xQueueGenericSend+0x178>
            {
                traceQUEUE_SEND( pxQueue );

                #if ( configUSE_QUEUE_SETS == 1 )
                {
                    const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d44:	f000 fb2b 	bl	800639e <prvCopyDataToQueue>
 8005d48:	62b8      	str	r0, [r7, #40]	@ 0x28

                    if( pxQueue->pxQueueSetContainer != NULL )
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d014      	beq.n	8005d7c <xQueueGenericSend+0x130>
                    {
                        if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d102      	bne.n	8005d5e <xQueueGenericSend+0x112>
 8005d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d12e      	bne.n	8005dbc <xQueueGenericSend+0x170>
                            /* Do not notify the queue set as an existing item
                             * was overwritten in the queue so the number of items
                             * in the queue has not changed. */
                            mtCOVERAGE_TEST_MARKER();
                        }
                        else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8005d5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d60:	f000 fcea 	bl	8006738 <prvNotifyQueueSetContainer>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d028      	beq.n	8005dbc <xQueueGenericSend+0x170>
                        {
                            /* The queue is a member of a queue set, and posting
                             * to the queue set caused a higher priority task to
                             * unblock. A context switch is required. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005d6a:	4b4a      	ldr	r3, [pc, #296]	@ (8005e94 <xQueueGenericSend+0x248>)
 8005d6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	e01f      	b.n	8005dbc <xQueueGenericSend+0x170>
                    }
                    else
                    {
                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d010      	beq.n	8005da6 <xQueueGenericSend+0x15a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d86:	3324      	adds	r3, #36	@ 0x24
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f001 fa8b 	bl	80072a4 <xTaskRemoveFromEventList>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d013      	beq.n	8005dbc <xQueueGenericSend+0x170>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to
                                 * do this from within the critical section - the
                                 * kernel takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005d94:	4b3f      	ldr	r3, [pc, #252]	@ (8005e94 <xQueueGenericSend+0x248>)
 8005d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	e00a      	b.n	8005dbc <xQueueGenericSend+0x170>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8005da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d007      	beq.n	8005dbc <xQueueGenericSend+0x170>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes
                             * and the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005dac:	4b39      	ldr	r3, [pc, #228]	@ (8005e94 <xQueueGenericSend+0x248>)
 8005dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005dbc:	f002 fe60 	bl	8008a80 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e063      	b.n	8005e8c <xQueueGenericSend+0x240>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d103      	bne.n	8005dd2 <xQueueGenericSend+0x186>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005dca:	f002 fe59 	bl	8008a80 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	e05c      	b.n	8005e8c <xQueueGenericSend+0x240>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d106      	bne.n	8005de6 <xQueueGenericSend+0x19a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005dd8:	f107 0310 	add.w	r3, r7, #16
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f001 fb3d 	bl	800745c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005de2:	2301      	movs	r3, #1
 8005de4:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005de6:	f002 fe4b 	bl	8008a80 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005dea:	f000 ff3b 	bl	8006c64 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005dee:	f002 fe11 	bl	8008a14 <vPortEnterCritical>
 8005df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005df8:	b25b      	sxtb	r3, r3
 8005dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfe:	d103      	bne.n	8005e08 <xQueueGenericSend+0x1bc>
 8005e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e0e:	b25b      	sxtb	r3, r3
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e14:	d103      	bne.n	8005e1e <xQueueGenericSend+0x1d2>
 8005e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e1e:	f002 fe2f 	bl	8008a80 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e22:	1d3a      	adds	r2, r7, #4
 8005e24:	f107 0310 	add.w	r3, r7, #16
 8005e28:	4611      	mov	r1, r2
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f001 fb2c 	bl	8007488 <xTaskCheckForTimeOut>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d124      	bne.n	8005e80 <xQueueGenericSend+0x234>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e38:	f000 fbb6 	bl	80065a8 <prvIsQueueFull>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d018      	beq.n	8005e74 <xQueueGenericSend+0x228>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e44:	3310      	adds	r3, #16
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	4611      	mov	r1, r2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f001 f9ba 	bl	80071c4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005e50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e52:	f000 fb34 	bl	80064be <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005e56:	f000 ff13 	bl	8006c80 <xTaskResumeAll>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f47f af60 	bne.w	8005d22 <xQueueGenericSend+0xd6>
                {
                    taskYIELD_WITHIN_API();
 8005e62:	4b0c      	ldr	r3, [pc, #48]	@ (8005e94 <xQueueGenericSend+0x248>)
 8005e64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e68:	601a      	str	r2, [r3, #0]
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	e756      	b.n	8005d22 <xQueueGenericSend+0xd6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005e74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e76:	f000 fb22 	bl	80064be <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005e7a:	f000 ff01 	bl	8006c80 <xTaskResumeAll>
 8005e7e:	e750      	b.n	8005d22 <xQueueGenericSend+0xd6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005e80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e82:	f000 fb1c 	bl	80064be <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005e86:	f000 fefb 	bl	8006c80 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8005e8a:	2300      	movs	r3, #0
        }
    }
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3738      	adds	r7, #56	@ 0x38
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	e000ed04 	.word	0xe000ed04

08005e98 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b092      	sub	sp, #72	@ 0x48
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	643b      	str	r3, [r7, #64]	@ 0x40

    traceENTER_xQueueGenericSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition );

    configASSERT( pxQueue );
 8005eaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10d      	bne.n	8005ecc <xQueueGenericSendFromISR+0x34>
    __asm volatile
 8005eb0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005eb4:	b672      	cpsid	i
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	b662      	cpsie	i
 8005ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 8005ec6:	bf00      	nop
 8005ec8:	bf00      	nop
 8005eca:	e7fd      	b.n	8005ec8 <xQueueGenericSendFromISR+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d103      	bne.n	8005eda <xQueueGenericSendFromISR+0x42>
 8005ed2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <xQueueGenericSendFromISR+0x46>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <xQueueGenericSendFromISR+0x48>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10d      	bne.n	8005f00 <xQueueGenericSendFromISR+0x68>
    __asm volatile
 8005ee4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005ee8:	b672      	cpsid	i
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	b662      	cpsie	i
 8005ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005efa:	bf00      	nop
 8005efc:	bf00      	nop
 8005efe:	e7fd      	b.n	8005efc <xQueueGenericSendFromISR+0x64>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d103      	bne.n	8005f0e <xQueueGenericSendFromISR+0x76>
 8005f06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d101      	bne.n	8005f12 <xQueueGenericSendFromISR+0x7a>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e000      	b.n	8005f14 <xQueueGenericSendFromISR+0x7c>
 8005f12:	2300      	movs	r3, #0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10d      	bne.n	8005f34 <xQueueGenericSendFromISR+0x9c>
    __asm volatile
 8005f18:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005f1c:	b672      	cpsid	i
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	b662      	cpsie	i
 8005f2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f2e:	bf00      	nop
 8005f30:	bf00      	nop
 8005f32:	e7fd      	b.n	8005f30 <xQueueGenericSendFromISR+0x98>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f34:	f002 fe5c 	bl	8008bf0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8005f38:	f3ef 8211 	mrs	r2, BASEPRI
 8005f3c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005f40:	b672      	cpsid	i
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	b662      	cpsie	i
 8005f50:	623a      	str	r2, [r7, #32]
 8005f52:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8005f54:	6a3b      	ldr	r3, [r7, #32]
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8005f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d302      	bcc.n	8005f6a <xQueueGenericSendFromISR+0xd2>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d160      	bne.n	800602c <xQueueGenericSendFromISR+0x194>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f70:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f78:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	68b9      	ldr	r1, [r7, #8]
 8005f7e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8005f80:	f000 fa0d 	bl	800639e <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005f84:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8005f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8c:	d129      	bne.n	8005fe2 <xQueueGenericSendFromISR+0x14a>
            {
                #if ( configUSE_QUEUE_SETS == 1 )
                {
                    if( pxQueue->pxQueueSetContainer != NULL )
 8005f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d012      	beq.n	8005fbc <xQueueGenericSendFromISR+0x124>
                    {
                        if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d102      	bne.n	8005fa2 <xQueueGenericSendFromISR+0x10a>
 8005f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d141      	bne.n	8006026 <xQueueGenericSendFromISR+0x18e>
                            /* Do not notify the queue set as an existing item
                             * was overwritten in the queue so the number of items
                             * in the queue has not changed. */
                            mtCOVERAGE_TEST_MARKER();
                        }
                        else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8005fa2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8005fa4:	f000 fbc8 	bl	8006738 <prvNotifyQueueSetContainer>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d03b      	beq.n	8006026 <xQueueGenericSendFromISR+0x18e>
                        {
                            /* The queue is a member of a queue set, and posting
                             * to the queue set caused a higher priority task to
                             * unblock.  A context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d038      	beq.n	8006026 <xQueueGenericSendFromISR+0x18e>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	e034      	b.n	8006026 <xQueueGenericSendFromISR+0x18e>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d030      	beq.n	8006026 <xQueueGenericSendFromISR+0x18e>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fc6:	3324      	adds	r3, #36	@ 0x24
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 f96b 	bl	80072a4 <xTaskRemoveFromEventList>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d028      	beq.n	8006026 <xQueueGenericSendFromISR+0x18e>
                            {
                                /* The task waiting has a higher priority so
                                 *  record that a context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d025      	beq.n	8006026 <xQueueGenericSendFromISR+0x18e>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	e021      	b.n	8006026 <xQueueGenericSendFromISR+0x18e>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8005fe2:	f000 ff67 	bl	8006eb4 <uxTaskGetNumberOfTasks>
 8005fe6:	6338      	str	r0, [r7, #48]	@ 0x30
 8005fe8:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8005fec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d919      	bls.n	8006026 <xQueueGenericSendFromISR+0x18e>
 8005ff2:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8005ff6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ff8:	d10d      	bne.n	8006016 <xQueueGenericSendFromISR+0x17e>
    __asm volatile
 8005ffa:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005ffe:	b672      	cpsid	i
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	b662      	cpsie	i
 800600e:	61bb      	str	r3, [r7, #24]
}
 8006010:	bf00      	nop
 8006012:	bf00      	nop
 8006014:	e7fd      	b.n	8006012 <xQueueGenericSendFromISR+0x17a>
 8006016:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800601a:	3301      	adds	r3, #1
 800601c:	b2db      	uxtb	r3, r3
 800601e:	b25a      	sxtb	r2, r3
 8006020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006022:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8006026:	2301      	movs	r3, #1
 8006028:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 800602a:	e001      	b.n	8006030 <xQueueGenericSendFromISR+0x198>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800602c:	2300      	movs	r3, #0
 800602e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006032:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800603a:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );

    return xReturn;
 800603c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800603e:	4618      	mov	r0, r3
 8006040:	3748      	adds	r7, #72	@ 0x48
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08c      	sub	sp, #48	@ 0x30
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006054:	2300      	movs	r3, #0
 8006056:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800605c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10d      	bne.n	800607e <xQueueReceive+0x36>
    __asm volatile
 8006062:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006066:	b672      	cpsid	i
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	b662      	cpsie	i
 8006076:	623b      	str	r3, [r7, #32]
}
 8006078:	bf00      	nop
 800607a:	bf00      	nop
 800607c:	e7fd      	b.n	800607a <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d103      	bne.n	800608c <xQueueReceive+0x44>
 8006084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <xQueueReceive+0x48>
 800608c:	2301      	movs	r3, #1
 800608e:	e000      	b.n	8006092 <xQueueReceive+0x4a>
 8006090:	2300      	movs	r3, #0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10d      	bne.n	80060b2 <xQueueReceive+0x6a>
    __asm volatile
 8006096:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800609a:	b672      	cpsid	i
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	b662      	cpsie	i
 80060aa:	61fb      	str	r3, [r7, #28]
}
 80060ac:	bf00      	nop
 80060ae:	bf00      	nop
 80060b0:	e7fd      	b.n	80060ae <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060b2:	f001 fb13 	bl	80076dc <xTaskGetSchedulerState>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d102      	bne.n	80060c2 <xQueueReceive+0x7a>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <xQueueReceive+0x7e>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <xQueueReceive+0x80>
 80060c6:	2300      	movs	r3, #0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10d      	bne.n	80060e8 <xQueueReceive+0xa0>
    __asm volatile
 80060cc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80060d0:	b672      	cpsid	i
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	b662      	cpsie	i
 80060e0:	61bb      	str	r3, [r7, #24]
}
 80060e2:	bf00      	nop
 80060e4:	bf00      	nop
 80060e6:	e7fd      	b.n	80060e4 <xQueueReceive+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80060e8:	f002 fc94 	bl	8008a14 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d01f      	beq.n	8006138 <xQueueReceive+0xf0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060fc:	f000 f9b9 	bl	8006472 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8006100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006102:	1e5a      	subs	r2, r3, #1
 8006104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006106:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00f      	beq.n	8006130 <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006112:	3310      	adds	r3, #16
 8006114:	4618      	mov	r0, r3
 8006116:	f001 f8c5 	bl	80072a4 <xTaskRemoveFromEventList>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d007      	beq.n	8006130 <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006120:	4b3c      	ldr	r3, [pc, #240]	@ (8006214 <xQueueReceive+0x1cc>)
 8006122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006130:	f002 fca6 	bl	8008a80 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8006134:	2301      	movs	r3, #1
 8006136:	e069      	b.n	800620c <xQueueReceive+0x1c4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d103      	bne.n	8006146 <xQueueReceive+0xfe>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800613e:	f002 fc9f 	bl	8008a80 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8006142:	2300      	movs	r3, #0
 8006144:	e062      	b.n	800620c <xQueueReceive+0x1c4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006148:	2b00      	cmp	r3, #0
 800614a:	d106      	bne.n	800615a <xQueueReceive+0x112>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800614c:	f107 0310 	add.w	r3, r7, #16
 8006150:	4618      	mov	r0, r3
 8006152:	f001 f983 	bl	800745c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006156:	2301      	movs	r3, #1
 8006158:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800615a:	f002 fc91 	bl	8008a80 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800615e:	f000 fd81 	bl	8006c64 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006162:	f002 fc57 	bl	8008a14 <vPortEnterCritical>
 8006166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006168:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800616c:	b25b      	sxtb	r3, r3
 800616e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006172:	d103      	bne.n	800617c <xQueueReceive+0x134>
 8006174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800617c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006182:	b25b      	sxtb	r3, r3
 8006184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006188:	d103      	bne.n	8006192 <xQueueReceive+0x14a>
 800618a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006192:	f002 fc75 	bl	8008a80 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006196:	1d3a      	adds	r2, r7, #4
 8006198:	f107 0310 	add.w	r3, r7, #16
 800619c:	4611      	mov	r1, r2
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 f972 	bl	8007488 <xTaskCheckForTimeOut>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d123      	bne.n	80061f2 <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061ac:	f000 f9e6 	bl	800657c <prvIsQueueEmpty>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d017      	beq.n	80061e6 <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b8:	3324      	adds	r3, #36	@ 0x24
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	4611      	mov	r1, r2
 80061be:	4618      	mov	r0, r3
 80061c0:	f001 f800 	bl	80071c4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80061c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061c6:	f000 f97a 	bl	80064be <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80061ca:	f000 fd59 	bl	8006c80 <xTaskResumeAll>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d189      	bne.n	80060e8 <xQueueReceive+0xa0>
                {
                    taskYIELD_WITHIN_API();
 80061d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006214 <xQueueReceive+0x1cc>)
 80061d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	e780      	b.n	80060e8 <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80061e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061e8:	f000 f969 	bl	80064be <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80061ec:	f000 fd48 	bl	8006c80 <xTaskResumeAll>
 80061f0:	e77a      	b.n	80060e8 <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80061f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061f4:	f000 f963 	bl	80064be <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80061f8:	f000 fd42 	bl	8006c80 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061fe:	f000 f9bd 	bl	800657c <prvIsQueueEmpty>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	f43f af6f 	beq.w	80060e8 <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800620a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800620c:	4618      	mov	r0, r3
 800620e:	3730      	adds	r7, #48	@ 0x30
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	e000ed04 	.word	0xe000ed04

08006218 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b090      	sub	sp, #64	@ 0x40
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	63bb      	str	r3, [r7, #56]	@ 0x38

    traceENTER_xQueueReceiveFromISR( xQueue, pvBuffer, pxHigherPriorityTaskWoken );

    configASSERT( pxQueue );
 8006228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10d      	bne.n	800624a <xQueueReceiveFromISR+0x32>
    __asm volatile
 800622e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006232:	b672      	cpsid	i
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	b662      	cpsie	i
 8006242:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop
 8006248:	e7fd      	b.n	8006246 <xQueueReceiveFromISR+0x2e>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d103      	bne.n	8006258 <xQueueReceiveFromISR+0x40>
 8006250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006254:	2b00      	cmp	r3, #0
 8006256:	d101      	bne.n	800625c <xQueueReceiveFromISR+0x44>
 8006258:	2301      	movs	r3, #1
 800625a:	e000      	b.n	800625e <xQueueReceiveFromISR+0x46>
 800625c:	2300      	movs	r3, #0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10d      	bne.n	800627e <xQueueReceiveFromISR+0x66>
    __asm volatile
 8006262:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006266:	b672      	cpsid	i
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	b662      	cpsie	i
 8006276:	623b      	str	r3, [r7, #32]
}
 8006278:	bf00      	nop
 800627a:	bf00      	nop
 800627c:	e7fd      	b.n	800627a <xQueueReceiveFromISR+0x62>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800627e:	f002 fcb7 	bl	8008bf0 <vPortValidateInterruptPriority>
    __asm volatile
 8006282:	f3ef 8211 	mrs	r2, BASEPRI
 8006286:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800628a:	b672      	cpsid	i
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	b662      	cpsie	i
 800629a:	61fa      	str	r2, [r7, #28]
 800629c:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 800629e:	69fb      	ldr	r3, [r7, #28]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 80062a0:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a6:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d049      	beq.n	8006342 <xQueueReceiveFromISR+0x12a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80062ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062b8:	68b9      	ldr	r1, [r7, #8]
 80062ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80062bc:	f000 f8d9 	bl	8006472 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80062c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c2:	1e5a      	subs	r2, r3, #1
 80062c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80062c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d0:	d112      	bne.n	80062f8 <xQueueReceiveFromISR+0xe0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d030      	beq.n	800633c <xQueueReceiveFromISR+0x124>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062dc:	3310      	adds	r3, #16
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 ffe0 	bl	80072a4 <xTaskRemoveFromEventList>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d028      	beq.n	800633c <xQueueReceiveFromISR+0x124>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d025      	beq.n	800633c <xQueueReceiveFromISR+0x124>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	e021      	b.n	800633c <xQueueReceiveFromISR+0x124>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 80062f8:	f000 fddc 	bl	8006eb4 <uxTaskGetNumberOfTasks>
 80062fc:	62b8      	str	r0, [r7, #40]	@ 0x28
 80062fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006302:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006304:	429a      	cmp	r2, r3
 8006306:	d919      	bls.n	800633c <xQueueReceiveFromISR+0x124>
 8006308:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800630c:	2b7f      	cmp	r3, #127	@ 0x7f
 800630e:	d10d      	bne.n	800632c <xQueueReceiveFromISR+0x114>
    __asm volatile
 8006310:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006314:	b672      	cpsid	i
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	b662      	cpsie	i
 8006324:	617b      	str	r3, [r7, #20]
}
 8006326:	bf00      	nop
 8006328:	bf00      	nop
 800632a:	e7fd      	b.n	8006328 <xQueueReceiveFromISR+0x110>
 800632c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006330:	3301      	adds	r3, #1
 8006332:	b2db      	uxtb	r3, r3
 8006334:	b25a      	sxtb	r2, r3
 8006336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 800633c:	2301      	movs	r3, #1
 800633e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006340:	e001      	b.n	8006346 <xQueueReceiveFromISR+0x12e>
        }
        else
        {
            xReturn = pdFAIL;
 8006342:	2300      	movs	r3, #0
 8006344:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006348:	613b      	str	r3, [r7, #16]
    __asm volatile
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f383 8811 	msr	BASEPRI, r3
}
 8006350:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );

    return xReturn;
 8006352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006354:	4618      	mov	r0, r3
 8006356:	3740      	adds	r7, #64	@ 0x40
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10d      	bne.n	8006386 <uxQueueMessagesWaiting+0x2a>
    __asm volatile
 800636a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800636e:	b672      	cpsid	i
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	b662      	cpsie	i
 800637e:	60bb      	str	r3, [r7, #8]
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	e7fd      	b.n	8006382 <uxQueueMessagesWaiting+0x26>

    taskENTER_CRITICAL();
 8006386:	f002 fb45 	bl	8008a14 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800638e:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8006390:	f002 fb76 	bl	8008a80 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 8006394:	68fb      	ldr	r3, [r7, #12]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80063aa:	2300      	movs	r3, #0
 80063ac:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b2:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10d      	bne.n	80063d8 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d14d      	bne.n	8006460 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f001 f9a5 	bl	8007718 <xTaskPriorityDisinherit>
 80063ce:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	609a      	str	r2, [r3, #8]
 80063d6:	e043      	b.n	8006460 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d119      	bne.n	8006412 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6858      	ldr	r0, [r3, #4]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e6:	461a      	mov	r2, r3
 80063e8:	68b9      	ldr	r1, [r7, #8]
 80063ea:	f003 f88e 	bl	800950a <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f6:	441a      	add	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	429a      	cmp	r2, r3
 8006406:	d32b      	bcc.n	8006460 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	605a      	str	r2, [r3, #4]
 8006410:	e026      	b.n	8006460 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	68d8      	ldr	r0, [r3, #12]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641a:	461a      	mov	r2, r3
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	f003 f874 	bl	800950a <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642a:	425b      	negs	r3, r3
 800642c:	441a      	add	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	68da      	ldr	r2, [r3, #12]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	429a      	cmp	r2, r3
 800643c:	d207      	bcs.n	800644e <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	689a      	ldr	r2, [r3, #8]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	425b      	negs	r3, r3
 8006448:	441a      	add	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b02      	cmp	r3, #2
 8006452:	d105      	bne.n	8006460 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	3b01      	subs	r3, #1
 800645e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	1c5a      	adds	r2, r3, #1
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8006468:	697b      	ldr	r3, [r7, #20]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b082      	sub	sp, #8
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	d018      	beq.n	80064b6 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648c:	441a      	add	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	429a      	cmp	r2, r3
 800649c:	d303      	bcc.n	80064a6 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68d9      	ldr	r1, [r3, #12]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ae:	461a      	mov	r2, r3
 80064b0:	6838      	ldr	r0, [r7, #0]
 80064b2:	f003 f82a 	bl	800950a <memcpy>
    }
}
 80064b6:	bf00      	nop
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80064c6:	f002 faa5 	bl	8008a14 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064d0:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80064d2:	e01e      	b.n	8006512 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d008      	beq.n	80064ee <prvUnlockQueue+0x30>
                {
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f92b 	bl	8006738 <prvNotifyQueueSetContainer>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d010      	beq.n	800650a <prvUnlockQueue+0x4c>
                    {
                        /* The queue is a member of a queue set, and posting to
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
 80064e8:	f001 f83a 	bl	8007560 <vTaskMissedYield>
 80064ec:	e00d      	b.n	800650a <prvUnlockQueue+0x4c>
                else
                {
                    /* Tasks that are removed from the event list will get
                     * added to the pending ready list as the scheduler is still
                     * suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d012      	beq.n	800651c <prvUnlockQueue+0x5e>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	3324      	adds	r3, #36	@ 0x24
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fed2 	bl	80072a4 <xTaskRemoveFromEventList>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <prvUnlockQueue+0x4c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            vTaskMissedYield();
 8006506:	f001 f82b 	bl	8007560 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800650a:	7bfb      	ldrb	r3, [r7, #15]
 800650c:	3b01      	subs	r3, #1
 800650e:	b2db      	uxtb	r3, r3
 8006510:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006516:	2b00      	cmp	r3, #0
 8006518:	dcdc      	bgt.n	80064d4 <prvUnlockQueue+0x16>
 800651a:	e000      	b.n	800651e <prvUnlockQueue+0x60>
                        break;
 800651c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	22ff      	movs	r2, #255	@ 0xff
 8006522:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8006526:	f002 faab 	bl	8008a80 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800652a:	f002 fa73 	bl	8008a14 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006534:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006536:	e011      	b.n	800655c <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d012      	beq.n	8006566 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3310      	adds	r3, #16
 8006544:	4618      	mov	r0, r3
 8006546:	f000 fead 	bl	80072a4 <xTaskRemoveFromEventList>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 8006550:	f001 f806 	bl	8007560 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006554:	7bbb      	ldrb	r3, [r7, #14]
 8006556:	3b01      	subs	r3, #1
 8006558:	b2db      	uxtb	r3, r3
 800655a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800655c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006560:	2b00      	cmp	r3, #0
 8006562:	dce9      	bgt.n	8006538 <prvUnlockQueue+0x7a>
 8006564:	e000      	b.n	8006568 <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8006566:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	22ff      	movs	r2, #255	@ 0xff
 800656c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8006570:	f002 fa86 	bl	8008a80 <vPortExitCritical>
}
 8006574:	bf00      	nop
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006584:	f002 fa46 	bl	8008a14 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658c:	2b00      	cmp	r3, #0
 800658e:	d102      	bne.n	8006596 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006590:	2301      	movs	r3, #1
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	e001      	b.n	800659a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006596:	2300      	movs	r3, #0
 8006598:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800659a:	f002 fa71 	bl	8008a80 <vPortExitCritical>

    return xReturn;
 800659e:	68fb      	ldr	r3, [r7, #12]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80065b0:	f002 fa30 	bl	8008a14 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065bc:	429a      	cmp	r2, r3
 80065be:	d102      	bne.n	80065c6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80065c0:	2301      	movs	r3, #1
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	e001      	b.n	80065ca <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80065ca:	f002 fa59 	bl	8008a80 <vPortExitCritical>

    return xReturn;
 80065ce:	68fb      	ldr	r3, [r7, #12]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueIsQueueFullFromISR( xQueue );

    configASSERT( pxQueue );
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10d      	bne.n	8006606 <xQueueIsQueueFullFromISR+0x2e>
    __asm volatile
 80065ea:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80065ee:	b672      	cpsid	i
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	b662      	cpsie	i
 80065fe:	60fb      	str	r3, [r7, #12]
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	e7fd      	b.n	8006602 <xQueueIsQueueFullFromISR+0x2a>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800660e:	429a      	cmp	r2, r3
 8006610:	d102      	bne.n	8006618 <xQueueIsQueueFullFromISR+0x40>
    {
        xReturn = pdTRUE;
 8006612:	2301      	movs	r3, #1
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	e001      	b.n	800661c <xQueueIsQueueFullFromISR+0x44>
    }
    else
    {
        xReturn = pdFALSE;
 8006618:	2300      	movs	r3, #0
 800661a:	617b      	str	r3, [r7, #20]
    }

    traceRETURN_xQueueIsQueueFullFromISR( xReturn );

    return xReturn;
 800661c:	697b      	ldr	r3, [r7, #20]
}
 800661e:	4618      	mov	r0, r3
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
	...

0800662c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8006636:	2300      	movs	r3, #0
 8006638:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10d      	bne.n	800665c <vQueueAddToRegistry+0x30>
    __asm volatile
 8006640:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006644:	b672      	cpsid	i
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	b662      	cpsie	i
 8006654:	60fb      	str	r3, [r7, #12]
}
 8006656:	bf00      	nop
 8006658:	bf00      	nop
 800665a:	e7fd      	b.n	8006658 <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d024      	beq.n	80066ac <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]
 8006666:	e01e      	b.n	80066a6 <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8006668:	4a18      	ldr	r2, [pc, #96]	@ (80066cc <vQueueAddToRegistry+0xa0>)
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	00db      	lsls	r3, r3, #3
 800666e:	4413      	add	r3, r2
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	429a      	cmp	r2, r3
 8006676:	d105      	bne.n	8006684 <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	4a13      	ldr	r2, [pc, #76]	@ (80066cc <vQueueAddToRegistry+0xa0>)
 800667e:	4413      	add	r3, r2
 8006680:	613b      	str	r3, [r7, #16]
                    break;
 8006682:	e013      	b.n	80066ac <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10a      	bne.n	80066a0 <vQueueAddToRegistry+0x74>
 800668a:	4a10      	ldr	r2, [pc, #64]	@ (80066cc <vQueueAddToRegistry+0xa0>)
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d104      	bne.n	80066a0 <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	4a0c      	ldr	r2, [pc, #48]	@ (80066cc <vQueueAddToRegistry+0xa0>)
 800669c:	4413      	add	r3, r2
 800669e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	3301      	adds	r3, #1
 80066a4:	617b      	str	r3, [r7, #20]
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2b07      	cmp	r3, #7
 80066aa:	d9dd      	bls.n	8006668 <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 80066be:	bf00      	nop
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	2000022c 	.word	0x2000022c

080066d0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80066e0:	f002 f998 	bl	8008a14 <vPortEnterCritical>
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066ea:	b25b      	sxtb	r3, r3
 80066ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f0:	d103      	bne.n	80066fa <vQueueWaitForMessageRestricted+0x2a>
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006700:	b25b      	sxtb	r3, r3
 8006702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006706:	d103      	bne.n	8006710 <vQueueWaitForMessageRestricted+0x40>
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006710:	f002 f9b6 	bl	8008a80 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006718:	2b00      	cmp	r3, #0
 800671a:	d106      	bne.n	800672a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	3324      	adds	r3, #36	@ 0x24
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	68b9      	ldr	r1, [r7, #8]
 8006724:	4618      	mov	r0, r3
 8006726:	f000 fd75 	bl	8007214 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800672a:	6978      	ldr	r0, [r7, #20]
 800672c:	f7ff fec7 	bl	80064be <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8006730:	bf00      	nop
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8006738:	b580      	push	{r7, lr}
 800673a:	b08a      	sub	sp, #40	@ 0x28
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006744:	623b      	str	r3, [r7, #32]
        BaseType_t xReturn = pdFALSE;
 8006746:	2300      	movs	r3, #0
 8006748:	627b      	str	r3, [r7, #36]	@ 0x24
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10d      	bne.n	800676c <prvNotifyQueueSetContainer+0x34>
    __asm volatile
 8006750:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006754:	b672      	cpsid	i
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	b662      	cpsie	i
 8006764:	617b      	str	r3, [r7, #20]
}
 8006766:	bf00      	nop
 8006768:	bf00      	nop
 800676a:	e7fd      	b.n	8006768 <prvNotifyQueueSetContainer+0x30>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006774:	429a      	cmp	r2, r3
 8006776:	d30d      	bcc.n	8006794 <prvNotifyQueueSetContainer+0x5c>
    __asm volatile
 8006778:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800677c:	b672      	cpsid	i
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	b662      	cpsie	i
 800678c:	613b      	str	r3, [r7, #16]
}
 800678e:	bf00      	nop
 8006790:	bf00      	nop
 8006792:	e7fd      	b.n	8006790 <prvNotifyQueueSetContainer+0x58>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006798:	6a3b      	ldr	r3, [r7, #32]
 800679a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800679c:	429a      	cmp	r2, r3
 800679e:	d23f      	bcs.n	8006820 <prvNotifyQueueSetContainer+0xe8>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067a6:	77fb      	strb	r3, [r7, #31]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80067a8:	1d3b      	adds	r3, r7, #4
 80067aa:	2200      	movs	r2, #0
 80067ac:	4619      	mov	r1, r3
 80067ae:	6a38      	ldr	r0, [r7, #32]
 80067b0:	f7ff fdf5 	bl	800639e <prvCopyDataToQueue>
 80067b4:	6278      	str	r0, [r7, #36]	@ 0x24

            if( cTxLock == queueUNLOCKED )
 80067b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80067ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067be:	d10e      	bne.n	80067de <prvNotifyQueueSetContainer+0xa6>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d02b      	beq.n	8006820 <prvNotifyQueueSetContainer+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	3324      	adds	r3, #36	@ 0x24
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fd69 	bl	80072a4 <xTaskRemoveFromEventList>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d023      	beq.n	8006820 <prvNotifyQueueSetContainer+0xe8>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 80067d8:	2301      	movs	r3, #1
 80067da:	627b      	str	r3, [r7, #36]	@ 0x24
 80067dc:	e020      	b.n	8006820 <prvNotifyQueueSetContainer+0xe8>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
 80067de:	f000 fb69 	bl	8006eb4 <uxTaskGetNumberOfTasks>
 80067e2:	61b8      	str	r0, [r7, #24]
 80067e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d918      	bls.n	8006820 <prvNotifyQueueSetContainer+0xe8>
 80067ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80067f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80067f4:	d10d      	bne.n	8006812 <prvNotifyQueueSetContainer+0xda>
    __asm volatile
 80067f6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80067fa:	b672      	cpsid	i
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	b662      	cpsie	i
 800680a:	60fb      	str	r3, [r7, #12]
}
 800680c:	bf00      	nop
 800680e:	bf00      	nop
 8006810:	e7fd      	b.n	800680e <prvNotifyQueueSetContainer+0xd6>
 8006812:	7ffb      	ldrb	r3, [r7, #31]
 8006814:	3301      	adds	r3, #1
 8006816:	b2db      	uxtb	r3, r3
 8006818:	b25a      	sxtb	r2, r3
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8006822:	4618      	mov	r0, r3
 8006824:	3728      	adds	r7, #40	@ 0x28
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800682a:	b580      	push	{r7, lr}
 800682c:	b08a      	sub	sp, #40	@ 0x28
 800682e:	af04      	add	r7, sp, #16
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	607a      	str	r2, [r7, #4]
 8006836:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4618      	mov	r0, r3
 800683e:	f002 fa1d 	bl	8008c7c <pvPortMalloc>
 8006842:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d013      	beq.n	8006872 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800684a:	2058      	movs	r0, #88	@ 0x58
 800684c:	f002 fa16 	bl	8008c7c <pvPortMalloc>
 8006850:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d008      	beq.n	800686a <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8006858:	2258      	movs	r2, #88	@ 0x58
 800685a:	2100      	movs	r1, #0
 800685c:	6978      	ldr	r0, [r7, #20]
 800685e:	f002 fdd8 	bl	8009412 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	631a      	str	r2, [r3, #48]	@ 0x30
 8006868:	e005      	b.n	8006876 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800686a:	6938      	ldr	r0, [r7, #16]
 800686c:	f002 fb44 	bl	8008ef8 <vPortFree>
 8006870:	e001      	b.n	8006876 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8006872:	2300      	movs	r3, #0
 8006874:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00d      	beq.n	8006898 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800687c:	2300      	movs	r3, #0
 800687e:	9303      	str	r3, [sp, #12]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	9302      	str	r3, [sp, #8]
 8006884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006886:	9301      	str	r3, [sp, #4]
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	68b9      	ldr	r1, [r7, #8]
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 f828 	bl	80068e8 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8006898:	697b      	ldr	r3, [r7, #20]
    }
 800689a:	4618      	mov	r0, r3
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b088      	sub	sp, #32
 80068a6:	af02      	add	r7, sp, #8
 80068a8:	60f8      	str	r0, [r7, #12]
 80068aa:	60b9      	str	r1, [r7, #8]
 80068ac:	607a      	str	r2, [r7, #4]
 80068ae:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80068b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b2:	9301      	str	r3, [sp, #4]
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	68b9      	ldr	r1, [r7, #8]
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f7ff ffb3 	bl	800682a <prvCreateTask>
 80068c4:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d005      	beq.n	80068d8 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80068cc:	6938      	ldr	r0, [r7, #16]
 80068ce:	f000 f89f 	bl	8006a10 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80068d2:	2301      	movs	r3, #1
 80068d4:	617b      	str	r3, [r7, #20]
 80068d6:	e002      	b.n	80068de <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068d8:	f04f 33ff 	mov.w	r3, #4294967295
 80068dc:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80068de:	697b      	ldr	r3, [r7, #20]
    }
 80068e0:	4618      	mov	r0, r3
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80068f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	461a      	mov	r2, r3
 8006900:	21a5      	movs	r1, #165	@ 0xa5
 8006902:	f002 fd86 	bl	8009412 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800690a:	6879      	ldr	r1, [r7, #4]
 800690c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006910:	440b      	add	r3, r1
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	f023 0307 	bic.w	r3, r3, #7
 800691e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	f003 0307 	and.w	r3, r3, #7
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00d      	beq.n	8006946 <prvInitialiseNewTask+0x5e>
    __asm volatile
 800692a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800692e:	b672      	cpsid	i
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	b662      	cpsie	i
 800693e:	617b      	str	r3, [r7, #20]
}
 8006940:	bf00      	nop
 8006942:	bf00      	nop
 8006944:	e7fd      	b.n	8006942 <prvInitialiseNewTask+0x5a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01e      	beq.n	800698a <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800694c:	2300      	movs	r3, #0
 800694e:	61fb      	str	r3, [r7, #28]
 8006950:	e012      	b.n	8006978 <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	4413      	add	r3, r2
 8006958:	7819      	ldrb	r1, [r3, #0]
 800695a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	4413      	add	r3, r2
 8006960:	3334      	adds	r3, #52	@ 0x34
 8006962:	460a      	mov	r2, r1
 8006964:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	4413      	add	r3, r2
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d006      	beq.n	8006980 <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	3301      	adds	r3, #1
 8006976:	61fb      	str	r3, [r7, #28]
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	2b09      	cmp	r3, #9
 800697c:	d9e9      	bls.n	8006952 <prvInitialiseNewTask+0x6a>
 800697e:	e000      	b.n	8006982 <prvInitialiseNewTask+0x9a>
            {
                break;
 8006980:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8006982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006984:	2200      	movs	r2, #0
 8006986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800698a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698c:	2b04      	cmp	r3, #4
 800698e:	d90d      	bls.n	80069ac <prvInitialiseNewTask+0xc4>
    __asm volatile
 8006990:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006994:	b672      	cpsid	i
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	b662      	cpsie	i
 80069a4:	613b      	str	r3, [r7, #16]
}
 80069a6:	bf00      	nop
 80069a8:	bf00      	nop
 80069aa:	e7fd      	b.n	80069a8 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ae:	2b04      	cmp	r3, #4
 80069b0:	d901      	bls.n	80069b6 <prvInitialiseNewTask+0xce>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069b2:	2304      	movs	r3, #4
 80069b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80069b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80069bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069c0:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c4:	3304      	adds	r3, #4
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fe ffc2 	bl	8005950 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ce:	3318      	adds	r3, #24
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fe ffbd 	bl	8005950 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069da:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80069dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069de:	f1c3 0205 	rsb	r2, r3, #5
 80069e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ea:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	68f9      	ldr	r1, [r7, #12]
 80069f0:	69b8      	ldr	r0, [r7, #24]
 80069f2:	f001 fea9 	bl	8008748 <pxPortInitialiseStack>
 80069f6:	4602      	mov	r2, r0
 80069f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fa:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80069fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d002      	beq.n	8006a08 <prvInitialiseNewTask+0x120>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a06:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006a08:	bf00      	nop
 8006a0a:	3720      	adds	r7, #32
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8006a18:	f001 fffc 	bl	8008a14 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8006a1c:	4b41      	ldr	r3, [pc, #260]	@ (8006b24 <prvAddNewTaskToReadyList+0x114>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3301      	adds	r3, #1
 8006a22:	4a40      	ldr	r2, [pc, #256]	@ (8006b24 <prvAddNewTaskToReadyList+0x114>)
 8006a24:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8006a26:	4b40      	ldr	r3, [pc, #256]	@ (8006b28 <prvAddNewTaskToReadyList+0x118>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d109      	bne.n	8006a42 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8006a2e:	4a3e      	ldr	r2, [pc, #248]	@ (8006b28 <prvAddNewTaskToReadyList+0x118>)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a34:	4b3b      	ldr	r3, [pc, #236]	@ (8006b24 <prvAddNewTaskToReadyList+0x114>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d110      	bne.n	8006a5e <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8006a3c:	f000 fdb4 	bl	80075a8 <prvInitialiseTaskLists>
 8006a40:	e00d      	b.n	8006a5e <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8006a42:	4b3a      	ldr	r3, [pc, #232]	@ (8006b2c <prvAddNewTaskToReadyList+0x11c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d109      	bne.n	8006a5e <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a4a:	4b37      	ldr	r3, [pc, #220]	@ (8006b28 <prvAddNewTaskToReadyList+0x118>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d802      	bhi.n	8006a5e <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8006a58:	4a33      	ldr	r2, [pc, #204]	@ (8006b28 <prvAddNewTaskToReadyList+0x118>)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8006a5e:	4b34      	ldr	r3, [pc, #208]	@ (8006b30 <prvAddNewTaskToReadyList+0x120>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3301      	adds	r3, #1
 8006a64:	4a32      	ldr	r2, [pc, #200]	@ (8006b30 <prvAddNewTaskToReadyList+0x120>)
 8006a66:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a68:	4b31      	ldr	r3, [pc, #196]	@ (8006b30 <prvAddNewTaskToReadyList+0x120>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a74:	2201      	movs	r2, #1
 8006a76:	409a      	lsls	r2, r3
 8006a78:	4b2e      	ldr	r3, [pc, #184]	@ (8006b34 <prvAddNewTaskToReadyList+0x124>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8006b34 <prvAddNewTaskToReadyList+0x124>)
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a86:	492c      	ldr	r1, [pc, #176]	@ (8006b38 <prvAddNewTaskToReadyList+0x128>)
 8006a88:	4613      	mov	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	440b      	add	r3, r1
 8006a92:	3304      	adds	r3, #4
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	60fb      	str	r3, [r7, #12]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	609a      	str	r2, [r3, #8]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	60da      	str	r2, [r3, #12]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	3204      	adds	r2, #4
 8006aae:	605a      	str	r2, [r3, #4]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	1d1a      	adds	r2, r3, #4
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	609a      	str	r2, [r3, #8]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006abc:	4613      	mov	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8006b38 <prvAddNewTaskToReadyList+0x128>)
 8006ac6:	441a      	add	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	615a      	str	r2, [r3, #20]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad0:	4919      	ldr	r1, [pc, #100]	@ (8006b38 <prvAddNewTaskToReadyList+0x128>)
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	440b      	add	r3, r1
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006ae2:	1c59      	adds	r1, r3, #1
 8006ae4:	4814      	ldr	r0, [pc, #80]	@ (8006b38 <prvAddNewTaskToReadyList+0x128>)
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4403      	add	r3, r0
 8006af0:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8006af2:	f001 ffc5 	bl	8008a80 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8006af6:	4b0d      	ldr	r3, [pc, #52]	@ (8006b2c <prvAddNewTaskToReadyList+0x11c>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00e      	beq.n	8006b1c <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8006afe:	4b0a      	ldr	r3, [pc, #40]	@ (8006b28 <prvAddNewTaskToReadyList+0x118>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d207      	bcs.n	8006b1c <prvAddNewTaskToReadyList+0x10c>
 8006b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b3c <prvAddNewTaskToReadyList+0x12c>)
 8006b0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8006b1c:	bf00      	nop
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	20000344 	.word	0x20000344
 8006b28:	2000026c 	.word	0x2000026c
 8006b2c:	20000350 	.word	0x20000350
 8006b30:	20000360 	.word	0x20000360
 8006b34:	2000034c 	.word	0x2000034c
 8006b38:	20000270 	.word	0x20000270
 8006b3c:	e000ed04 	.word	0xe000ed04

08006b40 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b08a      	sub	sp, #40	@ 0x28
 8006b44:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8006b46:	2301      	movs	r3, #1
 8006b48:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8006b4e:	2300      	movs	r3, #0
 8006b50:	617b      	str	r3, [r7, #20]
 8006b52:	e011      	b.n	8006b78 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8006b54:	4a1c      	ldr	r2, [pc, #112]	@ (8006bc8 <prvCreateIdleTasks+0x88>)
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	4413      	add	r3, r2
 8006b5a:	7819      	ldrb	r1, [r3, #0]
 8006b5c:	1d3a      	adds	r2, r7, #4
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	4413      	add	r3, r2
 8006b62:	460a      	mov	r2, r1
 8006b64:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8006b66:	1d3a      	adds	r2, r7, #4
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d006      	beq.n	8006b80 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	3301      	adds	r3, #1
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	2b09      	cmp	r3, #9
 8006b7c:	ddea      	ble.n	8006b54 <prvCreateIdleTasks+0x14>
 8006b7e:	e000      	b.n	8006b82 <prvCreateIdleTasks+0x42>
        {
            break;
 8006b80:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8006b82:	2300      	movs	r3, #0
 8006b84:	61bb      	str	r3, [r7, #24]
 8006b86:	e015      	b.n	8006bb4 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8006b88:	4b10      	ldr	r3, [pc, #64]	@ (8006bcc <prvCreateIdleTasks+0x8c>)
 8006b8a:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4a0f      	ldr	r2, [pc, #60]	@ (8006bd0 <prvCreateIdleTasks+0x90>)
 8006b92:	4413      	add	r3, r2
 8006b94:	1d39      	adds	r1, r7, #4
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	2282      	movs	r2, #130	@ 0x82
 8006ba0:	6938      	ldr	r0, [r7, #16]
 8006ba2:	f7ff fe7e 	bl	80068a2 <xTaskCreate>
 8006ba6:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d006      	beq.n	8006bbc <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	61bb      	str	r3, [r7, #24]
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	dde6      	ble.n	8006b88 <prvCreateIdleTasks+0x48>
 8006bba:	e000      	b.n	8006bbe <prvCreateIdleTasks+0x7e>
        {
            break;
 8006bbc:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8006bbe:	69fb      	ldr	r3, [r7, #28]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3720      	adds	r7, #32
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	0800a7a4 	.word	0x0800a7a4
 8006bcc:	08007579 	.word	0x08007579
 8006bd0:	20000368 	.word	0x20000368

08006bd4 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8006bda:	f7ff ffb1 	bl	8006b40 <prvCreateIdleTasks>
 8006bde:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d102      	bne.n	8006bec <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8006be6:	f001 f9f7 	bl	8007fd8 <xTimerCreateTimerTask>
 8006bea:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d118      	bne.n	8006c24 <vTaskStartScheduler+0x50>
    __asm volatile
 8006bf2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006bf6:	b672      	cpsid	i
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	b662      	cpsie	i
 8006c06:	60bb      	str	r3, [r7, #8]
}
 8006c08:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8006c0a:	4b12      	ldr	r3, [pc, #72]	@ (8006c54 <vTaskStartScheduler+0x80>)
 8006c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c10:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006c12:	4b11      	ldr	r3, [pc, #68]	@ (8006c58 <vTaskStartScheduler+0x84>)
 8006c14:	2201      	movs	r2, #1
 8006c16:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c18:	4b10      	ldr	r3, [pc, #64]	@ (8006c5c <vTaskStartScheduler+0x88>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8006c1e:	f001 fe29 	bl	8008874 <xPortStartScheduler>
 8006c22:	e011      	b.n	8006c48 <vTaskStartScheduler+0x74>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2a:	d10d      	bne.n	8006c48 <vTaskStartScheduler+0x74>
    __asm volatile
 8006c2c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006c30:	b672      	cpsid	i
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	b662      	cpsie	i
 8006c40:	607b      	str	r3, [r7, #4]
}
 8006c42:	bf00      	nop
 8006c44:	bf00      	nop
 8006c46:	e7fd      	b.n	8006c44 <vTaskStartScheduler+0x70>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006c48:	4b05      	ldr	r3, [pc, #20]	@ (8006c60 <vTaskStartScheduler+0x8c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8006c4c:	bf00      	nop
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	20000364 	.word	0x20000364
 8006c58:	20000350 	.word	0x20000350
 8006c5c:	20000348 	.word	0x20000348
 8006c60:	20000020 	.word	0x20000020

08006c64 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c64:	b480      	push	{r7}
 8006c66:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8006c68:	4b04      	ldr	r3, [pc, #16]	@ (8006c7c <vTaskSuspendAll+0x18>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	4a03      	ldr	r2, [pc, #12]	@ (8006c7c <vTaskSuspendAll+0x18>)
 8006c70:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8006c72:	bf00      	nop
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	2000036c 	.word	0x2000036c

08006c80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006c86:	2300      	movs	r3, #0
 8006c88:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8006c8e:	f001 fec1 	bl	8008a14 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8006c92:	2300      	movs	r3, #0
 8006c94:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8006c96:	4b76      	ldr	r3, [pc, #472]	@ (8006e70 <xTaskResumeAll+0x1f0>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10d      	bne.n	8006cba <xTaskResumeAll+0x3a>
    __asm volatile
 8006c9e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006ca2:	b672      	cpsid	i
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	b662      	cpsie	i
 8006cb2:	603b      	str	r3, [r7, #0]
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop
 8006cb8:	e7fd      	b.n	8006cb6 <xTaskResumeAll+0x36>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8006cba:	4b6d      	ldr	r3, [pc, #436]	@ (8006e70 <xTaskResumeAll+0x1f0>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	4a6b      	ldr	r2, [pc, #428]	@ (8006e70 <xTaskResumeAll+0x1f0>)
 8006cc2:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8006cc4:	4b6a      	ldr	r3, [pc, #424]	@ (8006e70 <xTaskResumeAll+0x1f0>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f040 80ca 	bne.w	8006e62 <xTaskResumeAll+0x1e2>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006cce:	4b69      	ldr	r3, [pc, #420]	@ (8006e74 <xTaskResumeAll+0x1f4>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 80c5 	beq.w	8006e62 <xTaskResumeAll+0x1e2>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cd8:	e08e      	b.n	8006df8 <xTaskResumeAll+0x178>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006cda:	4b67      	ldr	r3, [pc, #412]	@ (8006e78 <xTaskResumeAll+0x1f8>)
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	69fa      	ldr	r2, [r7, #28]
 8006cee:	6a12      	ldr	r2, [r2, #32]
 8006cf0:	609a      	str	r2, [r3, #8]
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	69d2      	ldr	r2, [r2, #28]
 8006cfa:	605a      	str	r2, [r3, #4]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	3318      	adds	r3, #24
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d103      	bne.n	8006d10 <xTaskResumeAll+0x90>
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	6a1a      	ldr	r2, [r3, #32]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	605a      	str	r2, [r3, #4]
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	2200      	movs	r2, #0
 8006d14:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	1e5a      	subs	r2, r3, #1
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	60bb      	str	r3, [r7, #8]
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	69fa      	ldr	r2, [r7, #28]
 8006d2c:	68d2      	ldr	r2, [r2, #12]
 8006d2e:	609a      	str	r2, [r3, #8]
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	6892      	ldr	r2, [r2, #8]
 8006d38:	605a      	str	r2, [r3, #4]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	3304      	adds	r3, #4
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d103      	bne.n	8006d4e <xTaskResumeAll+0xce>
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	68da      	ldr	r2, [r3, #12]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	605a      	str	r2, [r3, #4]
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	2200      	movs	r2, #0
 8006d52:	615a      	str	r2, [r3, #20]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	1e5a      	subs	r2, r3, #1
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d62:	2201      	movs	r2, #1
 8006d64:	409a      	lsls	r2, r3
 8006d66:	4b45      	ldr	r3, [pc, #276]	@ (8006e7c <xTaskResumeAll+0x1fc>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	4a43      	ldr	r2, [pc, #268]	@ (8006e7c <xTaskResumeAll+0x1fc>)
 8006d6e:	6013      	str	r3, [r2, #0]
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d74:	4942      	ldr	r1, [pc, #264]	@ (8006e80 <xTaskResumeAll+0x200>)
 8006d76:	4613      	mov	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	440b      	add	r3, r1
 8006d80:	3304      	adds	r3, #4
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	607b      	str	r3, [r7, #4]
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	609a      	str	r2, [r3, #8]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	60da      	str	r2, [r3, #12]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	69fa      	ldr	r2, [r7, #28]
 8006d9a:	3204      	adds	r2, #4
 8006d9c:	605a      	str	r2, [r3, #4]
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	1d1a      	adds	r2, r3, #4
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	609a      	str	r2, [r3, #8]
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006daa:	4613      	mov	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4a33      	ldr	r2, [pc, #204]	@ (8006e80 <xTaskResumeAll+0x200>)
 8006db4:	441a      	add	r2, r3
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	615a      	str	r2, [r3, #20]
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dbe:	4930      	ldr	r1, [pc, #192]	@ (8006e80 <xTaskResumeAll+0x200>)
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	440b      	add	r3, r1
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	69fa      	ldr	r2, [r7, #28]
 8006dce:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006dd0:	1c59      	adds	r1, r3, #1
 8006dd2:	482b      	ldr	r0, [pc, #172]	@ (8006e80 <xTaskResumeAll+0x200>)
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4403      	add	r3, r0
 8006dde:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de4:	4b27      	ldr	r3, [pc, #156]	@ (8006e84 <xTaskResumeAll+0x204>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d904      	bls.n	8006df8 <xTaskResumeAll+0x178>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8006dee:	4a26      	ldr	r2, [pc, #152]	@ (8006e88 <xTaskResumeAll+0x208>)
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	2101      	movs	r1, #1
 8006df4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006df8:	4b1f      	ldr	r3, [pc, #124]	@ (8006e78 <xTaskResumeAll+0x1f8>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f47f af6c 	bne.w	8006cda <xTaskResumeAll+0x5a>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d001      	beq.n	8006e0c <xTaskResumeAll+0x18c>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8006e08:	f000 fc4c 	bl	80076a4 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8006e8c <xTaskResumeAll+0x20c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d012      	beq.n	8006e3e <xTaskResumeAll+0x1be>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8006e18:	f000 f858 	bl	8006ecc <xTaskIncrementTick>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d004      	beq.n	8006e2c <xTaskResumeAll+0x1ac>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8006e22:	4a19      	ldr	r2, [pc, #100]	@ (8006e88 <xTaskResumeAll+0x208>)
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	2101      	movs	r1, #1
 8006e28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1ef      	bne.n	8006e18 <xTaskResumeAll+0x198>

                            xPendedTicks = 0;
 8006e38:	4b14      	ldr	r3, [pc, #80]	@ (8006e8c <xTaskResumeAll+0x20c>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8006e3e:	4a12      	ldr	r2, [pc, #72]	@ (8006e88 <xTaskResumeAll+0x208>)
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00b      	beq.n	8006e62 <xTaskResumeAll+0x1e2>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8006e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e84 <xTaskResumeAll+0x204>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4b0f      	ldr	r3, [pc, #60]	@ (8006e90 <xTaskResumeAll+0x210>)
 8006e54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006e62:	f001 fe0d 	bl	8008a80 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8006e66:	69bb      	ldr	r3, [r7, #24]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3720      	adds	r7, #32
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	2000036c 	.word	0x2000036c
 8006e74:	20000344 	.word	0x20000344
 8006e78:	20000304 	.word	0x20000304
 8006e7c:	2000034c 	.word	0x2000034c
 8006e80:	20000270 	.word	0x20000270
 8006e84:	2000026c 	.word	0x2000026c
 8006e88:	20000358 	.word	0x20000358
 8006e8c:	20000354 	.word	0x20000354
 8006e90:	e000ed04 	.word	0xe000ed04

08006e94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006e9a:	4b05      	ldr	r3, [pc, #20]	@ (8006eb0 <xTaskGetTickCount+0x1c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8006ea0:	687b      	ldr	r3, [r7, #4]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	20000348 	.word	0x20000348

08006eb4 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 8006eb8:	4b03      	ldr	r3, [pc, #12]	@ (8006ec8 <uxTaskGetNumberOfTasks+0x14>)
 8006eba:	681b      	ldr	r3, [r3, #0]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	20000344 	.word	0x20000344

08006ecc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08a      	sub	sp, #40	@ 0x28
 8006ed0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8006ed6:	4b80      	ldr	r3, [pc, #512]	@ (80070d8 <xTaskIncrementTick+0x20c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f040 80f1 	bne.w	80070c2 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ee0:	4b7e      	ldr	r3, [pc, #504]	@ (80070dc <xTaskIncrementTick+0x210>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006ee8:	4a7c      	ldr	r2, [pc, #496]	@ (80070dc <xTaskIncrementTick+0x210>)
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d123      	bne.n	8006f3c <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 8006ef4:	4b7a      	ldr	r3, [pc, #488]	@ (80070e0 <xTaskIncrementTick+0x214>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00d      	beq.n	8006f1a <xTaskIncrementTick+0x4e>
    __asm volatile
 8006efe:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006f02:	b672      	cpsid	i
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	b662      	cpsie	i
 8006f12:	607b      	str	r3, [r7, #4]
}
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop
 8006f18:	e7fd      	b.n	8006f16 <xTaskIncrementTick+0x4a>
 8006f1a:	4b71      	ldr	r3, [pc, #452]	@ (80070e0 <xTaskIncrementTick+0x214>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	61fb      	str	r3, [r7, #28]
 8006f20:	4b70      	ldr	r3, [pc, #448]	@ (80070e4 <xTaskIncrementTick+0x218>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a6e      	ldr	r2, [pc, #440]	@ (80070e0 <xTaskIncrementTick+0x214>)
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	4a6e      	ldr	r2, [pc, #440]	@ (80070e4 <xTaskIncrementTick+0x218>)
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	4b6e      	ldr	r3, [pc, #440]	@ (80070e8 <xTaskIncrementTick+0x21c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3301      	adds	r3, #1
 8006f34:	4a6c      	ldr	r2, [pc, #432]	@ (80070e8 <xTaskIncrementTick+0x21c>)
 8006f36:	6013      	str	r3, [r2, #0]
 8006f38:	f000 fbb4 	bl	80076a4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006f3c:	4b6b      	ldr	r3, [pc, #428]	@ (80070ec <xTaskIncrementTick+0x220>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6a3a      	ldr	r2, [r7, #32]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	f0c0 80a8 	bcc.w	8007098 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f48:	4b65      	ldr	r3, [pc, #404]	@ (80070e0 <xTaskIncrementTick+0x214>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d104      	bne.n	8006f5c <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8006f52:	4b66      	ldr	r3, [pc, #408]	@ (80070ec <xTaskIncrementTick+0x220>)
 8006f54:	f04f 32ff 	mov.w	r2, #4294967295
 8006f58:	601a      	str	r2, [r3, #0]
                    break;
 8006f5a:	e09d      	b.n	8007098 <xTaskIncrementTick+0x1cc>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006f5c:	4b60      	ldr	r3, [pc, #384]	@ (80070e0 <xTaskIncrementTick+0x214>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8006f6c:	6a3a      	ldr	r2, [r7, #32]
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d203      	bcs.n	8006f7c <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006f74:	4a5d      	ldr	r2, [pc, #372]	@ (80070ec <xTaskIncrementTick+0x220>)
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	6013      	str	r3, [r2, #0]
                        break;
 8006f7a:	e08d      	b.n	8007098 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	613b      	str	r3, [r7, #16]
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	68d2      	ldr	r2, [r2, #12]
 8006f8a:	609a      	str	r2, [r3, #8]
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	6892      	ldr	r2, [r2, #8]
 8006f94:	605a      	str	r2, [r3, #4]
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d103      	bne.n	8006faa <xTaskIncrementTick+0xde>
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	605a      	str	r2, [r3, #4]
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2200      	movs	r2, #0
 8006fae:	615a      	str	r2, [r3, #20]
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	1e5a      	subs	r2, r3, #1
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d01e      	beq.n	8007000 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	69ba      	ldr	r2, [r7, #24]
 8006fce:	6a12      	ldr	r2, [r2, #32]
 8006fd0:	609a      	str	r2, [r3, #8]
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	69d2      	ldr	r2, [r2, #28]
 8006fda:	605a      	str	r2, [r3, #4]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	3318      	adds	r3, #24
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d103      	bne.n	8006ff0 <xTaskIncrementTick+0x124>
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	6a1a      	ldr	r2, [r3, #32]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	605a      	str	r2, [r3, #4]
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	1e5a      	subs	r2, r3, #1
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007004:	2201      	movs	r2, #1
 8007006:	409a      	lsls	r2, r3
 8007008:	4b39      	ldr	r3, [pc, #228]	@ (80070f0 <xTaskIncrementTick+0x224>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4313      	orrs	r3, r2
 800700e:	4a38      	ldr	r2, [pc, #224]	@ (80070f0 <xTaskIncrementTick+0x224>)
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007016:	4937      	ldr	r1, [pc, #220]	@ (80070f4 <xTaskIncrementTick+0x228>)
 8007018:	4613      	mov	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	440b      	add	r3, r1
 8007022:	3304      	adds	r3, #4
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60bb      	str	r3, [r7, #8]
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	609a      	str	r2, [r3, #8]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	689a      	ldr	r2, [r3, #8]
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	60da      	str	r2, [r3, #12]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	3204      	adds	r2, #4
 800703e:	605a      	str	r2, [r3, #4]
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	1d1a      	adds	r2, r3, #4
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	609a      	str	r2, [r3, #8]
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800704c:	4613      	mov	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4a27      	ldr	r2, [pc, #156]	@ (80070f4 <xTaskIncrementTick+0x228>)
 8007056:	441a      	add	r2, r3
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	615a      	str	r2, [r3, #20]
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007060:	4924      	ldr	r1, [pc, #144]	@ (80070f4 <xTaskIncrementTick+0x228>)
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	440b      	add	r3, r1
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007072:	1c59      	adds	r1, r3, #1
 8007074:	481f      	ldr	r0, [pc, #124]	@ (80070f4 <xTaskIncrementTick+0x228>)
 8007076:	4613      	mov	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4403      	add	r3, r0
 8007080:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007086:	4b1c      	ldr	r3, [pc, #112]	@ (80070f8 <xTaskIncrementTick+0x22c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708c:	429a      	cmp	r2, r3
 800708e:	f67f af5b 	bls.w	8006f48 <xTaskIncrementTick+0x7c>
                            {
                                xSwitchRequired = pdTRUE;
 8007092:	2301      	movs	r3, #1
 8007094:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007096:	e757      	b.n	8006f48 <xTaskIncrementTick+0x7c>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8007098:	4b17      	ldr	r3, [pc, #92]	@ (80070f8 <xTaskIncrementTick+0x22c>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800709e:	4915      	ldr	r1, [pc, #84]	@ (80070f4 <xTaskIncrementTick+0x228>)
 80070a0:	4613      	mov	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	440b      	add	r3, r1
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d901      	bls.n	80070b4 <xTaskIncrementTick+0x1e8>
                {
                    xSwitchRequired = pdTRUE;
 80070b0:	2301      	movs	r3, #1
 80070b2:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80070b4:	4b11      	ldr	r3, [pc, #68]	@ (80070fc <xTaskIncrementTick+0x230>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d007      	beq.n	80070cc <xTaskIncrementTick+0x200>
                {
                    xSwitchRequired = pdTRUE;
 80070bc:	2301      	movs	r3, #1
 80070be:	627b      	str	r3, [r7, #36]	@ 0x24
 80070c0:	e004      	b.n	80070cc <xTaskIncrementTick+0x200>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80070c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007100 <xTaskIncrementTick+0x234>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3301      	adds	r3, #1
 80070c8:	4a0d      	ldr	r2, [pc, #52]	@ (8007100 <xTaskIncrementTick+0x234>)
 80070ca:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3728      	adds	r7, #40	@ 0x28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	2000036c 	.word	0x2000036c
 80070dc:	20000348 	.word	0x20000348
 80070e0:	200002fc 	.word	0x200002fc
 80070e4:	20000300 	.word	0x20000300
 80070e8:	2000035c 	.word	0x2000035c
 80070ec:	20000364 	.word	0x20000364
 80070f0:	2000034c 	.word	0x2000034c
 80070f4:	20000270 	.word	0x20000270
 80070f8:	2000026c 	.word	0x2000026c
 80070fc:	20000358 	.word	0x20000358
 8007100:	20000354 	.word	0x20000354

08007104 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800710a:	4b29      	ldr	r3, [pc, #164]	@ (80071b0 <vTaskSwitchContext+0xac>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8007112:	4b28      	ldr	r3, [pc, #160]	@ (80071b4 <vTaskSwitchContext+0xb0>)
 8007114:	2201      	movs	r2, #1
 8007116:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8007118:	e043      	b.n	80071a2 <vTaskSwitchContext+0x9e>
            xYieldPendings[ 0 ] = pdFALSE;
 800711a:	4b26      	ldr	r3, [pc, #152]	@ (80071b4 <vTaskSwitchContext+0xb0>)
 800711c:	2200      	movs	r2, #0
 800711e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8007120:	4b25      	ldr	r3, [pc, #148]	@ (80071b8 <vTaskSwitchContext+0xb4>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	fab3 f383 	clz	r3, r3
 800712c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800712e:	7afb      	ldrb	r3, [r7, #11]
 8007130:	f1c3 031f 	rsb	r3, r3, #31
 8007134:	617b      	str	r3, [r7, #20]
 8007136:	4921      	ldr	r1, [pc, #132]	@ (80071bc <vTaskSwitchContext+0xb8>)
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	4613      	mov	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	440b      	add	r3, r1
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10d      	bne.n	8007166 <vTaskSwitchContext+0x62>
    __asm volatile
 800714a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800714e:	b672      	cpsid	i
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	b662      	cpsie	i
 800715e:	607b      	str	r3, [r7, #4]
}
 8007160:	bf00      	nop
 8007162:	bf00      	nop
 8007164:	e7fd      	b.n	8007162 <vTaskSwitchContext+0x5e>
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	4613      	mov	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4a12      	ldr	r2, [pc, #72]	@ (80071bc <vTaskSwitchContext+0xb8>)
 8007172:	4413      	add	r3, r2
 8007174:	613b      	str	r3, [r7, #16]
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	605a      	str	r2, [r3, #4]
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	3308      	adds	r3, #8
 8007188:	429a      	cmp	r2, r3
 800718a:	d103      	bne.n	8007194 <vTaskSwitchContext+0x90>
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	68da      	ldr	r2, [r3, #12]
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	605a      	str	r2, [r3, #4]
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	4a09      	ldr	r2, [pc, #36]	@ (80071c0 <vTaskSwitchContext+0xbc>)
 800719c:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800719e:	4b08      	ldr	r3, [pc, #32]	@ (80071c0 <vTaskSwitchContext+0xbc>)
 80071a0:	681b      	ldr	r3, [r3, #0]
    }
 80071a2:	bf00      	nop
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	2000036c 	.word	0x2000036c
 80071b4:	20000358 	.word	0x20000358
 80071b8:	2000034c 	.word	0x2000034c
 80071bc:	20000270 	.word	0x20000270
 80071c0:	2000026c 	.word	0x2000026c

080071c4 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10d      	bne.n	80071f0 <vTaskPlaceOnEventList+0x2c>
    __asm volatile
 80071d4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80071d8:	b672      	cpsid	i
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	b662      	cpsie	i
 80071e8:	60fb      	str	r3, [r7, #12]
}
 80071ea:	bf00      	nop
 80071ec:	bf00      	nop
 80071ee:	e7fd      	b.n	80071ec <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071f0:	4b07      	ldr	r3, [pc, #28]	@ (8007210 <vTaskPlaceOnEventList+0x4c>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3318      	adds	r3, #24
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7fe fbb6 	bl	800596a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071fe:	2101      	movs	r1, #1
 8007200:	6838      	ldr	r0, [r7, #0]
 8007202:	f000 fe67 	bl	8007ed4 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8007206:	bf00      	nop
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	2000026c 	.word	0x2000026c

08007214 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10d      	bne.n	8007242 <vTaskPlaceOnEventListRestricted+0x2e>
    __asm volatile
 8007226:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800722a:	b672      	cpsid	i
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	b662      	cpsie	i
 800723a:	613b      	str	r3, [r7, #16]
}
 800723c:	bf00      	nop
 800723e:	bf00      	nop
 8007240:	e7fd      	b.n	800723e <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	4b15      	ldr	r3, [pc, #84]	@ (80072a0 <vTaskPlaceOnEventListRestricted+0x8c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	61da      	str	r2, [r3, #28]
 8007250:	4b13      	ldr	r3, [pc, #76]	@ (80072a0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	6892      	ldr	r2, [r2, #8]
 8007258:	621a      	str	r2, [r3, #32]
 800725a:	4b11      	ldr	r3, [pc, #68]	@ (80072a0 <vTaskPlaceOnEventListRestricted+0x8c>)
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	3218      	adds	r2, #24
 8007264:	605a      	str	r2, [r3, #4]
 8007266:	4b0e      	ldr	r3, [pc, #56]	@ (80072a0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f103 0218 	add.w	r2, r3, #24
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	609a      	str	r2, [r3, #8]
 8007272:	4b0b      	ldr	r3, [pc, #44]	@ (80072a0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	629a      	str	r2, [r3, #40]	@ 0x28
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	1c5a      	adds	r2, r3, #1
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 800728a:	f04f 33ff 	mov.w	r3, #4294967295
 800728e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007290:	6879      	ldr	r1, [r7, #4]
 8007292:	68b8      	ldr	r0, [r7, #8]
 8007294:	f000 fe1e 	bl	8007ed4 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8007298:	bf00      	nop
 800729a:	3718      	adds	r7, #24
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	2000026c 	.word	0x2000026c

080072a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072a4:	b480      	push	{r7}
 80072a6:	b08b      	sub	sp, #44	@ 0x2c
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10d      	bne.n	80072d6 <xTaskRemoveFromEventList+0x32>
    __asm volatile
 80072ba:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80072be:	b672      	cpsid	i
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	b662      	cpsie	i
 80072ce:	60fb      	str	r3, [r7, #12]
}
 80072d0:	bf00      	nop
 80072d2:	bf00      	nop
 80072d4:	e7fd      	b.n	80072d2 <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072da:	61fb      	str	r3, [r7, #28]
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	6a3a      	ldr	r2, [r7, #32]
 80072e2:	6a12      	ldr	r2, [r2, #32]
 80072e4:	609a      	str	r2, [r3, #8]
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	6a3a      	ldr	r2, [r7, #32]
 80072ec:	69d2      	ldr	r2, [r2, #28]
 80072ee:	605a      	str	r2, [r3, #4]
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	3318      	adds	r3, #24
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d103      	bne.n	8007304 <xTaskRemoveFromEventList+0x60>
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	6a1a      	ldr	r2, [r3, #32]
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	605a      	str	r2, [r3, #4]
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	2200      	movs	r2, #0
 8007308:	629a      	str	r2, [r3, #40]	@ 0x28
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	1e5a      	subs	r2, r3, #1
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8007314:	4b4b      	ldr	r3, [pc, #300]	@ (8007444 <xTaskRemoveFromEventList+0x1a0>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d160      	bne.n	80073de <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	617b      	str	r3, [r7, #20]
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	6a3a      	ldr	r2, [r7, #32]
 8007328:	68d2      	ldr	r2, [r2, #12]
 800732a:	609a      	str	r2, [r3, #8]
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	6a3a      	ldr	r2, [r7, #32]
 8007332:	6892      	ldr	r2, [r2, #8]
 8007334:	605a      	str	r2, [r3, #4]
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	3304      	adds	r3, #4
 800733e:	429a      	cmp	r2, r3
 8007340:	d103      	bne.n	800734a <xTaskRemoveFromEventList+0xa6>
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	605a      	str	r2, [r3, #4]
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	2200      	movs	r2, #0
 800734e:	615a      	str	r2, [r3, #20]
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	1e5a      	subs	r2, r3, #1
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735e:	2201      	movs	r2, #1
 8007360:	409a      	lsls	r2, r3
 8007362:	4b39      	ldr	r3, [pc, #228]	@ (8007448 <xTaskRemoveFromEventList+0x1a4>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4313      	orrs	r3, r2
 8007368:	4a37      	ldr	r2, [pc, #220]	@ (8007448 <xTaskRemoveFromEventList+0x1a4>)
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	6a3b      	ldr	r3, [r7, #32]
 800736e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007370:	4936      	ldr	r1, [pc, #216]	@ (800744c <xTaskRemoveFromEventList+0x1a8>)
 8007372:	4613      	mov	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4413      	add	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	440b      	add	r3, r1
 800737c:	3304      	adds	r3, #4
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	613b      	str	r3, [r7, #16]
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	609a      	str	r2, [r3, #8]
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	60da      	str	r2, [r3, #12]
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	6a3a      	ldr	r2, [r7, #32]
 8007396:	3204      	adds	r2, #4
 8007398:	605a      	str	r2, [r3, #4]
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	1d1a      	adds	r2, r3, #4
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	609a      	str	r2, [r3, #8]
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073a6:	4613      	mov	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4a27      	ldr	r2, [pc, #156]	@ (800744c <xTaskRemoveFromEventList+0x1a8>)
 80073b0:	441a      	add	r2, r3
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	615a      	str	r2, [r3, #20]
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ba:	4924      	ldr	r1, [pc, #144]	@ (800744c <xTaskRemoveFromEventList+0x1a8>)
 80073bc:	4613      	mov	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	440b      	add	r3, r1
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6a3a      	ldr	r2, [r7, #32]
 80073ca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80073cc:	1c59      	adds	r1, r3, #1
 80073ce:	481f      	ldr	r0, [pc, #124]	@ (800744c <xTaskRemoveFromEventList+0x1a8>)
 80073d0:	4613      	mov	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4403      	add	r3, r0
 80073da:	6019      	str	r1, [r3, #0]
 80073dc:	e01b      	b.n	8007416 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073de:	4b1c      	ldr	r3, [pc, #112]	@ (8007450 <xTaskRemoveFromEventList+0x1ac>)
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	61bb      	str	r3, [r7, #24]
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	61da      	str	r2, [r3, #28]
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	689a      	ldr	r2, [r3, #8]
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	621a      	str	r2, [r3, #32]
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	6a3a      	ldr	r2, [r7, #32]
 80073f8:	3218      	adds	r2, #24
 80073fa:	605a      	str	r2, [r3, #4]
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	f103 0218 	add.w	r2, r3, #24
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	609a      	str	r2, [r3, #8]
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	4a11      	ldr	r2, [pc, #68]	@ (8007450 <xTaskRemoveFromEventList+0x1ac>)
 800740a:	629a      	str	r2, [r3, #40]	@ 0x28
 800740c:	4b10      	ldr	r3, [pc, #64]	@ (8007450 <xTaskRemoveFromEventList+0x1ac>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3301      	adds	r3, #1
 8007412:	4a0f      	ldr	r2, [pc, #60]	@ (8007450 <xTaskRemoveFromEventList+0x1ac>)
 8007414:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800741a:	4b0e      	ldr	r3, [pc, #56]	@ (8007454 <xTaskRemoveFromEventList+0x1b0>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007420:	429a      	cmp	r2, r3
 8007422:	d905      	bls.n	8007430 <xTaskRemoveFromEventList+0x18c>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8007424:	2301      	movs	r3, #1
 8007426:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8007428:	4b0b      	ldr	r3, [pc, #44]	@ (8007458 <xTaskRemoveFromEventList+0x1b4>)
 800742a:	2201      	movs	r2, #1
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	e001      	b.n	8007434 <xTaskRemoveFromEventList+0x190>
        }
        else
        {
            xReturn = pdFALSE;
 8007430:	2300      	movs	r3, #0
 8007432:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8007434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007436:	4618      	mov	r0, r3
 8007438:	372c      	adds	r7, #44	@ 0x2c
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	2000036c 	.word	0x2000036c
 8007448:	2000034c 	.word	0x2000034c
 800744c:	20000270 	.word	0x20000270
 8007450:	20000304 	.word	0x20000304
 8007454:	2000026c 	.word	0x2000026c
 8007458:	20000358 	.word	0x20000358

0800745c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007464:	4b06      	ldr	r3, [pc, #24]	@ (8007480 <vTaskInternalSetTimeOutState+0x24>)
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800746c:	4b05      	ldr	r3, [pc, #20]	@ (8007484 <vTaskInternalSetTimeOutState+0x28>)
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	2000035c 	.word	0x2000035c
 8007484:	20000348 	.word	0x20000348

08007488 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b088      	sub	sp, #32
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10d      	bne.n	80074b4 <xTaskCheckForTimeOut+0x2c>
    __asm volatile
 8007498:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800749c:	b672      	cpsid	i
 800749e:	f383 8811 	msr	BASEPRI, r3
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	b662      	cpsie	i
 80074ac:	613b      	str	r3, [r7, #16]
}
 80074ae:	bf00      	nop
 80074b0:	bf00      	nop
 80074b2:	e7fd      	b.n	80074b0 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10d      	bne.n	80074d6 <xTaskCheckForTimeOut+0x4e>
    __asm volatile
 80074ba:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80074be:	b672      	cpsid	i
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	b662      	cpsie	i
 80074ce:	60fb      	str	r3, [r7, #12]
}
 80074d0:	bf00      	nop
 80074d2:	bf00      	nop
 80074d4:	e7fd      	b.n	80074d2 <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 80074d6:	f001 fa9d 	bl	8008a14 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80074da:	4b1f      	ldr	r3, [pc, #124]	@ (8007558 <xTaskCheckForTimeOut+0xd0>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f2:	d102      	bne.n	80074fa <xTaskCheckForTimeOut+0x72>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80074f4:	2300      	movs	r3, #0
 80074f6:	61fb      	str	r3, [r7, #28]
 80074f8:	e026      	b.n	8007548 <xTaskCheckForTimeOut+0xc0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	4b17      	ldr	r3, [pc, #92]	@ (800755c <xTaskCheckForTimeOut+0xd4>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	429a      	cmp	r2, r3
 8007504:	d00a      	beq.n	800751c <xTaskCheckForTimeOut+0x94>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	429a      	cmp	r2, r3
 800750e:	d305      	bcc.n	800751c <xTaskCheckForTimeOut+0x94>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007510:	2301      	movs	r3, #1
 8007512:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2200      	movs	r2, #0
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	e015      	b.n	8007548 <xTaskCheckForTimeOut+0xc0>
        }
        else if( xElapsedTime < *pxTicksToWait )
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	429a      	cmp	r2, r3
 8007524:	d20b      	bcs.n	800753e <xTaskCheckForTimeOut+0xb6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	1ad2      	subs	r2, r2, r3
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7ff ff92 	bl	800745c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007538:	2300      	movs	r3, #0
 800753a:	61fb      	str	r3, [r7, #28]
 800753c:	e004      	b.n	8007548 <xTaskCheckForTimeOut+0xc0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2200      	movs	r2, #0
 8007542:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007544:	2301      	movs	r3, #1
 8007546:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007548:	f001 fa9a 	bl	8008a80 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 800754c:	69fb      	ldr	r3, [r7, #28]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3720      	adds	r7, #32
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	20000348 	.word	0x20000348
 800755c:	2000035c 	.word	0x2000035c

08007560 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8007564:	4b03      	ldr	r3, [pc, #12]	@ (8007574 <vTaskMissedYield+0x14>)
 8007566:	2201      	movs	r2, #1
 8007568:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 800756a:	bf00      	nop
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	20000358 	.word	0x20000358

08007578 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007580:	f000 f852 	bl	8007628 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8007584:	4b06      	ldr	r3, [pc, #24]	@ (80075a0 <prvIdleTask+0x28>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d9f9      	bls.n	8007580 <prvIdleTask+0x8>
            {
                taskYIELD();
 800758c:	4b05      	ldr	r3, [pc, #20]	@ (80075a4 <prvIdleTask+0x2c>)
 800758e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800759c:	e7f0      	b.n	8007580 <prvIdleTask+0x8>
 800759e:	bf00      	nop
 80075a0:	20000270 	.word	0x20000270
 80075a4:	e000ed04 	.word	0xe000ed04

080075a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075ae:	2300      	movs	r3, #0
 80075b0:	607b      	str	r3, [r7, #4]
 80075b2:	e00c      	b.n	80075ce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4a12      	ldr	r2, [pc, #72]	@ (8007608 <prvInitialiseTaskLists+0x60>)
 80075c0:	4413      	add	r3, r2
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fe f9a4 	bl	8005910 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	3301      	adds	r3, #1
 80075cc:	607b      	str	r3, [r7, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b04      	cmp	r3, #4
 80075d2:	d9ef      	bls.n	80075b4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80075d4:	480d      	ldr	r0, [pc, #52]	@ (800760c <prvInitialiseTaskLists+0x64>)
 80075d6:	f7fe f99b 	bl	8005910 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80075da:	480d      	ldr	r0, [pc, #52]	@ (8007610 <prvInitialiseTaskLists+0x68>)
 80075dc:	f7fe f998 	bl	8005910 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80075e0:	480c      	ldr	r0, [pc, #48]	@ (8007614 <prvInitialiseTaskLists+0x6c>)
 80075e2:	f7fe f995 	bl	8005910 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80075e6:	480c      	ldr	r0, [pc, #48]	@ (8007618 <prvInitialiseTaskLists+0x70>)
 80075e8:	f7fe f992 	bl	8005910 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80075ec:	480b      	ldr	r0, [pc, #44]	@ (800761c <prvInitialiseTaskLists+0x74>)
 80075ee:	f7fe f98f 	bl	8005910 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80075f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007620 <prvInitialiseTaskLists+0x78>)
 80075f4:	4a05      	ldr	r2, [pc, #20]	@ (800760c <prvInitialiseTaskLists+0x64>)
 80075f6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007624 <prvInitialiseTaskLists+0x7c>)
 80075fa:	4a05      	ldr	r2, [pc, #20]	@ (8007610 <prvInitialiseTaskLists+0x68>)
 80075fc:	601a      	str	r2, [r3, #0]
}
 80075fe:	bf00      	nop
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20000270 	.word	0x20000270
 800760c:	200002d4 	.word	0x200002d4
 8007610:	200002e8 	.word	0x200002e8
 8007614:	20000304 	.word	0x20000304
 8007618:	20000318 	.word	0x20000318
 800761c:	20000330 	.word	0x20000330
 8007620:	200002fc 	.word	0x200002fc
 8007624:	20000300 	.word	0x20000300

08007628 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800762e:	e019      	b.n	8007664 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8007630:	f001 f9f0 	bl	8008a14 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007634:	4b10      	ldr	r3, [pc, #64]	@ (8007678 <prvCheckTasksWaitingTermination+0x50>)
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	3304      	adds	r3, #4
 8007640:	4618      	mov	r0, r3
 8007642:	f7fe f9cb 	bl	80059dc <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8007646:	4b0d      	ldr	r3, [pc, #52]	@ (800767c <prvCheckTasksWaitingTermination+0x54>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3b01      	subs	r3, #1
 800764c:	4a0b      	ldr	r2, [pc, #44]	@ (800767c <prvCheckTasksWaitingTermination+0x54>)
 800764e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8007650:	4b0b      	ldr	r3, [pc, #44]	@ (8007680 <prvCheckTasksWaitingTermination+0x58>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3b01      	subs	r3, #1
 8007656:	4a0a      	ldr	r2, [pc, #40]	@ (8007680 <prvCheckTasksWaitingTermination+0x58>)
 8007658:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800765a:	f001 fa11 	bl	8008a80 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f810 	bl	8007684 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007664:	4b06      	ldr	r3, [pc, #24]	@ (8007680 <prvCheckTasksWaitingTermination+0x58>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e1      	bne.n	8007630 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800766c:	bf00      	nop
 800766e:	bf00      	nop
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20000318 	.word	0x20000318
 800767c:	20000344 	.word	0x20000344
 8007680:	2000032c 	.word	0x2000032c

08007684 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007690:	4618      	mov	r0, r3
 8007692:	f001 fc31 	bl	8008ef8 <vPortFree>
            vPortFree( pxTCB );
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f001 fc2e 	bl	8008ef8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800769c:	bf00      	nop
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076a8:	4b0a      	ldr	r3, [pc, #40]	@ (80076d4 <prvResetNextTaskUnblockTime+0x30>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d104      	bne.n	80076bc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80076b2:	4b09      	ldr	r3, [pc, #36]	@ (80076d8 <prvResetNextTaskUnblockTime+0x34>)
 80076b4:	f04f 32ff 	mov.w	r2, #4294967295
 80076b8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80076ba:	e005      	b.n	80076c8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80076bc:	4b05      	ldr	r3, [pc, #20]	@ (80076d4 <prvResetNextTaskUnblockTime+0x30>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a04      	ldr	r2, [pc, #16]	@ (80076d8 <prvResetNextTaskUnblockTime+0x34>)
 80076c6:	6013      	str	r3, [r2, #0]
}
 80076c8:	bf00      	nop
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	200002fc 	.word	0x200002fc
 80076d8:	20000364 	.word	0x20000364

080076dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80076e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007710 <xTaskGetSchedulerState+0x34>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d102      	bne.n	80076f0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80076ea:	2301      	movs	r3, #1
 80076ec:	607b      	str	r3, [r7, #4]
 80076ee:	e008      	b.n	8007702 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80076f0:	4b08      	ldr	r3, [pc, #32]	@ (8007714 <xTaskGetSchedulerState+0x38>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d102      	bne.n	80076fe <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80076f8:	2302      	movs	r3, #2
 80076fa:	607b      	str	r3, [r7, #4]
 80076fc:	e001      	b.n	8007702 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80076fe:	2300      	movs	r3, #0
 8007700:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8007702:	687b      	ldr	r3, [r7, #4]
    }
 8007704:	4618      	mov	r0, r3
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	20000350 	.word	0x20000350
 8007714:	2000036c 	.word	0x2000036c

08007718 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007718:	b580      	push	{r7, lr}
 800771a:	b088      	sub	sp, #32
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8007724:	2300      	movs	r3, #0
 8007726:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	f000 8094 	beq.w	8007858 <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007730:	4b4c      	ldr	r3, [pc, #304]	@ (8007864 <xTaskPriorityDisinherit+0x14c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	429a      	cmp	r2, r3
 8007738:	d00d      	beq.n	8007756 <xTaskPriorityDisinherit+0x3e>
    __asm volatile
 800773a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800773e:	b672      	cpsid	i
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	b662      	cpsie	i
 800774e:	613b      	str	r3, [r7, #16]
}
 8007750:	bf00      	nop
 8007752:	bf00      	nop
 8007754:	e7fd      	b.n	8007752 <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10d      	bne.n	800777a <xTaskPriorityDisinherit+0x62>
    __asm volatile
 800775e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8007762:	b672      	cpsid	i
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	b662      	cpsie	i
 8007772:	60fb      	str	r3, [r7, #12]
}
 8007774:	bf00      	nop
 8007776:	bf00      	nop
 8007778:	e7fd      	b.n	8007776 <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800777e:	1e5a      	subs	r2, r3, #1
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800778c:	429a      	cmp	r2, r3
 800778e:	d063      	beq.n	8007858 <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007794:	2b00      	cmp	r3, #0
 8007796:	d15f      	bne.n	8007858 <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	3304      	adds	r3, #4
 800779c:	4618      	mov	r0, r3
 800779e:	f7fe f91d 	bl	80059dc <uxListRemove>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10a      	bne.n	80077be <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ac:	2201      	movs	r2, #1
 80077ae:	fa02 f303 	lsl.w	r3, r2, r3
 80077b2:	43da      	mvns	r2, r3
 80077b4:	4b2c      	ldr	r3, [pc, #176]	@ (8007868 <xTaskPriorityDisinherit+0x150>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4013      	ands	r3, r2
 80077ba:	4a2b      	ldr	r2, [pc, #172]	@ (8007868 <xTaskPriorityDisinherit+0x150>)
 80077bc:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ca:	f1c3 0205 	rsb	r2, r3, #5
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d6:	2201      	movs	r2, #1
 80077d8:	409a      	lsls	r2, r3
 80077da:	4b23      	ldr	r3, [pc, #140]	@ (8007868 <xTaskPriorityDisinherit+0x150>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4313      	orrs	r3, r2
 80077e0:	4a21      	ldr	r2, [pc, #132]	@ (8007868 <xTaskPriorityDisinherit+0x150>)
 80077e2:	6013      	str	r3, [r2, #0]
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077e8:	4920      	ldr	r1, [pc, #128]	@ (800786c <xTaskPriorityDisinherit+0x154>)
 80077ea:	4613      	mov	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	440b      	add	r3, r1
 80077f4:	3304      	adds	r3, #4
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	617b      	str	r3, [r7, #20]
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	609a      	str	r2, [r3, #8]
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	60da      	str	r2, [r3, #12]
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	3204      	adds	r2, #4
 8007810:	605a      	str	r2, [r3, #4]
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	1d1a      	adds	r2, r3, #4
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	609a      	str	r2, [r3, #8]
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800781e:	4613      	mov	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4413      	add	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4a11      	ldr	r2, [pc, #68]	@ (800786c <xTaskPriorityDisinherit+0x154>)
 8007828:	441a      	add	r2, r3
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	615a      	str	r2, [r3, #20]
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007832:	490e      	ldr	r1, [pc, #56]	@ (800786c <xTaskPriorityDisinherit+0x154>)
 8007834:	4613      	mov	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	440b      	add	r3, r1
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007844:	1c59      	adds	r1, r3, #1
 8007846:	4809      	ldr	r0, [pc, #36]	@ (800786c <xTaskPriorityDisinherit+0x154>)
 8007848:	4613      	mov	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4403      	add	r3, r0
 8007852:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007854:	2301      	movs	r3, #1
 8007856:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8007858:	69fb      	ldr	r3, [r7, #28]
    }
 800785a:	4618      	mov	r0, r3
 800785c:	3720      	adds	r7, #32
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	2000026c 	.word	0x2000026c
 8007868:	2000034c 	.word	0x2000034c
 800786c:	20000270 	.word	0x20000270

08007870 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8007870:	b580      	push	{r7, lr}
 8007872:	b088      	sub	sp, #32
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
 800787c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 800787e:	2300      	movs	r3, #0
 8007880:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00d      	beq.n	80078a4 <xTaskGenericNotifyWait+0x34>
    __asm volatile
 8007888:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800788c:	b672      	cpsid	i
 800788e:	f383 8811 	msr	BASEPRI, r3
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	f3bf 8f4f 	dsb	sy
 800789a:	b662      	cpsie	i
 800789c:	613b      	str	r3, [r7, #16]
}
 800789e:	bf00      	nop
 80078a0:	bf00      	nop
 80078a2:	e7fd      	b.n	80078a0 <xTaskGenericNotifyWait+0x30>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 80078a4:	f7ff f9de 	bl	8006c64 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 80078a8:	f001 f8b4 	bl	8008a14 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 80078ac:	4b38      	ldr	r3, [pc, #224]	@ (8007990 <xTaskGenericNotifyWait+0x120>)
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	4413      	add	r3, r2
 80078b4:	3354      	adds	r3, #84	@ 0x54
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d018      	beq.n	80078f0 <xTaskGenericNotifyWait+0x80>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 80078be:	4b34      	ldr	r3, [pc, #208]	@ (8007990 <xTaskGenericNotifyWait+0x120>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	3214      	adds	r2, #20
 80078c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	43d2      	mvns	r2, r2
 80078ce:	4011      	ands	r1, r2
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	3214      	adds	r2, #20
 80078d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 80078d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007990 <xTaskGenericNotifyWait+0x120>)
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4413      	add	r3, r2
 80078e0:	3354      	adds	r3, #84	@ 0x54
 80078e2:	2201      	movs	r2, #1
 80078e4:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 80078e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d001      	beq.n	80078f0 <xTaskGenericNotifyWait+0x80>
                    {
                        xShouldBlock = pdTRUE;
 80078ec:	2301      	movs	r3, #1
 80078ee:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 80078f0:	f001 f8c6 	bl	8008a80 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d103      	bne.n	8007902 <xTaskGenericNotifyWait+0x92>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078fa:	2101      	movs	r1, #1
 80078fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078fe:	f000 fae9 	bl	8007ed4 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8007902:	f7ff f9bd 	bl	8006c80 <xTaskResumeAll>
 8007906:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d10a      	bne.n	8007924 <xTaskGenericNotifyWait+0xb4>
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d107      	bne.n	8007924 <xTaskGenericNotifyWait+0xb4>
        {
            taskYIELD_WITHIN_API();
 8007914:	4b1f      	ldr	r3, [pc, #124]	@ (8007994 <xTaskGenericNotifyWait+0x124>)
 8007916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8007924:	f001 f876 	bl	8008a14 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d007      	beq.n	800793e <xTaskGenericNotifyWait+0xce>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 800792e:	4b18      	ldr	r3, [pc, #96]	@ (8007990 <xTaskGenericNotifyWait+0x120>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	3214      	adds	r2, #20
 8007936:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 800793e:	4b14      	ldr	r3, [pc, #80]	@ (8007990 <xTaskGenericNotifyWait+0x120>)
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	4413      	add	r3, r2
 8007946:	3354      	adds	r3, #84	@ 0x54
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b02      	cmp	r3, #2
 800794e:	d002      	beq.n	8007956 <xTaskGenericNotifyWait+0xe6>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8007950:	2300      	movs	r3, #0
 8007952:	61fb      	str	r3, [r7, #28]
 8007954:	e00e      	b.n	8007974 <xTaskGenericNotifyWait+0x104>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8007956:	4b0e      	ldr	r3, [pc, #56]	@ (8007990 <xTaskGenericNotifyWait+0x120>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	3214      	adds	r2, #20
 800795e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	43d2      	mvns	r2, r2
 8007966:	4011      	ands	r1, r2
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	3214      	adds	r2, #20
 800796c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8007970:	2301      	movs	r3, #1
 8007972:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8007974:	4b06      	ldr	r3, [pc, #24]	@ (8007990 <xTaskGenericNotifyWait+0x120>)
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4413      	add	r3, r2
 800797c:	3354      	adds	r3, #84	@ 0x54
 800797e:	2200      	movs	r2, #0
 8007980:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8007982:	f001 f87d 	bl	8008a80 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 8007986:	69fb      	ldr	r3, [r7, #28]
    }
 8007988:	4618      	mov	r0, r3
 800798a:	3720      	adds	r7, #32
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	2000026c 	.word	0x2000026c
 8007994:	e000ed04 	.word	0xe000ed04

08007998 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8007998:	b580      	push	{r7, lr}
 800799a:	b08e      	sub	sp, #56	@ 0x38
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
 80079a4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80079a6:	2301      	movs	r3, #1
 80079a8:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00d      	beq.n	80079cc <xTaskGenericNotify+0x34>
    __asm volatile
 80079b0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80079b4:	b672      	cpsid	i
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	b662      	cpsie	i
 80079c4:	623b      	str	r3, [r7, #32]
}
 80079c6:	bf00      	nop
 80079c8:	bf00      	nop
 80079ca:	e7fd      	b.n	80079c8 <xTaskGenericNotify+0x30>
        configASSERT( xTaskToNotify );
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10d      	bne.n	80079ee <xTaskGenericNotify+0x56>
    __asm volatile
 80079d2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80079d6:	b672      	cpsid	i
 80079d8:	f383 8811 	msr	BASEPRI, r3
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	b662      	cpsie	i
 80079e6:	61fb      	str	r3, [r7, #28]
}
 80079e8:	bf00      	nop
 80079ea:	bf00      	nop
 80079ec:	e7fd      	b.n	80079ea <xTaskGenericNotify+0x52>
        pxTCB = xTaskToNotify;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 80079f2:	f001 f80f 	bl	8008a14 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80079f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d006      	beq.n	8007a0a <xTaskGenericNotify+0x72>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80079fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	3214      	adds	r2, #20
 8007a02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a08:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8007a0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	4413      	add	r3, r2
 8007a10:	3354      	adds	r3, #84	@ 0x54
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007a18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	3354      	adds	r3, #84	@ 0x54
 8007a20:	2202      	movs	r2, #2
 8007a22:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007a24:	78fb      	ldrb	r3, [r7, #3]
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	d83b      	bhi.n	8007aa2 <xTaskGenericNotify+0x10a>
 8007a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a30 <xTaskGenericNotify+0x98>)
 8007a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a30:	08007ac7 	.word	0x08007ac7
 8007a34:	08007a45 	.word	0x08007a45
 8007a38:	08007a61 	.word	0x08007a61
 8007a3c:	08007a79 	.word	0x08007a79
 8007a40:	08007a87 	.word	0x08007a87
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8007a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	3214      	adds	r2, #20
 8007a4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	ea42 0103 	orr.w	r1, r2, r3
 8007a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	3214      	adds	r2, #20
 8007a5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007a5e:	e035      	b.n	8007acc <xTaskGenericNotify+0x134>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8007a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	3214      	adds	r2, #20
 8007a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6a:	1c59      	adds	r1, r3, #1
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	3214      	adds	r2, #20
 8007a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007a76:	e029      	b.n	8007acc <xTaskGenericNotify+0x134>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	3214      	adds	r2, #20
 8007a7e:	6879      	ldr	r1, [r7, #4]
 8007a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007a84:	e022      	b.n	8007acc <xTaskGenericNotify+0x134>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007a86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d006      	beq.n	8007a9c <xTaskGenericNotify+0x104>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	3214      	adds	r2, #20
 8007a94:	6879      	ldr	r1, [r7, #4]
 8007a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8007a9a:	e017      	b.n	8007acc <xTaskGenericNotify+0x134>
                        xReturn = pdFAIL;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8007aa0:	e014      	b.n	8007acc <xTaskGenericNotify+0x134>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8007aa2:	4b51      	ldr	r3, [pc, #324]	@ (8007be8 <xTaskGenericNotify+0x250>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00f      	beq.n	8007aca <xTaskGenericNotify+0x132>
    __asm volatile
 8007aaa:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8007aae:	b672      	cpsid	i
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	b662      	cpsie	i
 8007abe:	61bb      	str	r3, [r7, #24]
}
 8007ac0:	bf00      	nop
 8007ac2:	bf00      	nop
 8007ac4:	e7fd      	b.n	8007ac2 <xTaskGenericNotify+0x12a>
                    break;
 8007ac6:	bf00      	nop
 8007ac8:	e000      	b.n	8007acc <xTaskGenericNotify+0x134>

                    break;
 8007aca:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007acc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	f040 8081 	bne.w	8007bd8 <xTaskGenericNotify+0x240>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ae2:	68d2      	ldr	r2, [r2, #12]
 8007ae4:	609a      	str	r2, [r3, #8]
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007aec:	6892      	ldr	r2, [r2, #8]
 8007aee:	605a      	str	r2, [r3, #4]
 8007af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af6:	3304      	adds	r3, #4
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d103      	bne.n	8007b04 <xTaskGenericNotify+0x16c>
 8007afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afe:	68da      	ldr	r2, [r3, #12]
 8007b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b02:	605a      	str	r2, [r3, #4]
 8007b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b06:	2200      	movs	r2, #0
 8007b08:	615a      	str	r2, [r3, #20]
 8007b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	1e5a      	subs	r2, r3, #1
 8007b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b12:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8007b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b18:	2201      	movs	r2, #1
 8007b1a:	409a      	lsls	r2, r3
 8007b1c:	4b33      	ldr	r3, [pc, #204]	@ (8007bec <xTaskGenericNotify+0x254>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	4a32      	ldr	r2, [pc, #200]	@ (8007bec <xTaskGenericNotify+0x254>)
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b2a:	4931      	ldr	r1, [pc, #196]	@ (8007bf0 <xTaskGenericNotify+0x258>)
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	440b      	add	r3, r1
 8007b36:	3304      	adds	r3, #4
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b40:	609a      	str	r2, [r3, #8]
 8007b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b44:	689a      	ldr	r2, [r3, #8]
 8007b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b48:	60da      	str	r2, [r3, #12]
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b50:	3204      	adds	r2, #4
 8007b52:	605a      	str	r2, [r3, #4]
 8007b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b56:	1d1a      	adds	r2, r3, #4
 8007b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5a:	609a      	str	r2, [r3, #8]
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4a21      	ldr	r2, [pc, #132]	@ (8007bf0 <xTaskGenericNotify+0x258>)
 8007b6a:	441a      	add	r2, r3
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6e:	615a      	str	r2, [r3, #20]
 8007b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b74:	491e      	ldr	r1, [pc, #120]	@ (8007bf0 <xTaskGenericNotify+0x258>)
 8007b76:	4613      	mov	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	440b      	add	r3, r1
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b84:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007b86:	1c59      	adds	r1, r3, #1
 8007b88:	4819      	ldr	r0, [pc, #100]	@ (8007bf0 <xTaskGenericNotify+0x258>)
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4403      	add	r3, r0
 8007b94:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00d      	beq.n	8007bba <xTaskGenericNotify+0x222>
    __asm volatile
 8007b9e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8007ba2:	b672      	cpsid	i
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	b662      	cpsie	i
 8007bb2:	617b      	str	r3, [r7, #20]
}
 8007bb4:	bf00      	nop
 8007bb6:	bf00      	nop
 8007bb8:	e7fd      	b.n	8007bb6 <xTaskGenericNotify+0x21e>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8007bba:	4b0e      	ldr	r3, [pc, #56]	@ (8007bf4 <xTaskGenericNotify+0x25c>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d207      	bcs.n	8007bd8 <xTaskGenericNotify+0x240>
 8007bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf8 <xTaskGenericNotify+0x260>)
 8007bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007bd8:	f000 ff52 	bl	8008a80 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 8007bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8007bde:	4618      	mov	r0, r3
 8007be0:	3738      	adds	r7, #56	@ 0x38
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	20000348 	.word	0x20000348
 8007bec:	2000034c 	.word	0x2000034c
 8007bf0:	20000270 	.word	0x20000270
 8007bf4:	2000026c 	.word	0x2000026c
 8007bf8:	e000ed04 	.word	0xe000ed04

08007bfc <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b092      	sub	sp, #72	@ 0x48
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10d      	bne.n	8007c30 <xTaskGenericNotifyFromISR+0x34>
    __asm volatile
 8007c14:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8007c18:	b672      	cpsid	i
 8007c1a:	f383 8811 	msr	BASEPRI, r3
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	b662      	cpsie	i
 8007c28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c2a:	bf00      	nop
 8007c2c:	bf00      	nop
 8007c2e:	e7fd      	b.n	8007c2c <xTaskGenericNotifyFromISR+0x30>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00d      	beq.n	8007c52 <xTaskGenericNotifyFromISR+0x56>
    __asm volatile
 8007c36:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8007c3a:	b672      	cpsid	i
 8007c3c:	f383 8811 	msr	BASEPRI, r3
 8007c40:	f3bf 8f6f 	isb	sy
 8007c44:	f3bf 8f4f 	dsb	sy
 8007c48:	b662      	cpsie	i
 8007c4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c4c:	bf00      	nop
 8007c4e:	bf00      	nop
 8007c50:	e7fd      	b.n	8007c4e <xTaskGenericNotifyFromISR+0x52>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c52:	f000 ffcd 	bl	8008bf0 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm volatile
 8007c5a:	f3ef 8211 	mrs	r2, BASEPRI
 8007c5e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8007c62:	b672      	cpsid	i
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	b662      	cpsie	i
 8007c72:	623a      	str	r2, [r7, #32]
 8007c74:	61fb      	str	r3, [r7, #28]
    return ulOriginalBASEPRI;
 8007c76:	6a3b      	ldr	r3, [r7, #32]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8007c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8007c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d006      	beq.n	8007c8e <xTaskGenericNotifyFromISR+0x92>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8007c80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	3214      	adds	r2, #20
 8007c86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c8c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8007c8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	4413      	add	r3, r2
 8007c94:	3354      	adds	r3, #84	@ 0x54
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007c9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	3354      	adds	r3, #84	@ 0x54
 8007ca4:	2202      	movs	r2, #2
 8007ca6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007ca8:	78fb      	ldrb	r3, [r7, #3]
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	d83b      	bhi.n	8007d26 <xTaskGenericNotifyFromISR+0x12a>
 8007cae:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb4 <xTaskGenericNotifyFromISR+0xb8>)
 8007cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb4:	08007d4b 	.word	0x08007d4b
 8007cb8:	08007cc9 	.word	0x08007cc9
 8007cbc:	08007ce5 	.word	0x08007ce5
 8007cc0:	08007cfd 	.word	0x08007cfd
 8007cc4:	08007d0b 	.word	0x08007d0b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8007cc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	3214      	adds	r2, #20
 8007cce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	ea42 0103 	orr.w	r1, r2, r3
 8007cd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	3214      	adds	r2, #20
 8007cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007ce2:	e035      	b.n	8007d50 <xTaskGenericNotifyFromISR+0x154>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8007ce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	3214      	adds	r2, #20
 8007cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cee:	1c59      	adds	r1, r3, #1
 8007cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	3214      	adds	r2, #20
 8007cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007cfa:	e029      	b.n	8007d50 <xTaskGenericNotifyFromISR+0x154>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	3214      	adds	r2, #20
 8007d02:	6879      	ldr	r1, [r7, #4]
 8007d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007d08:	e022      	b.n	8007d50 <xTaskGenericNotifyFromISR+0x154>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007d0a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d006      	beq.n	8007d20 <xTaskGenericNotifyFromISR+0x124>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	3214      	adds	r2, #20
 8007d18:	6879      	ldr	r1, [r7, #4]
 8007d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8007d1e:	e017      	b.n	8007d50 <xTaskGenericNotifyFromISR+0x154>
                        xReturn = pdFAIL;
 8007d20:	2300      	movs	r3, #0
 8007d22:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 8007d24:	e014      	b.n	8007d50 <xTaskGenericNotifyFromISR+0x154>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8007d26:	4b64      	ldr	r3, [pc, #400]	@ (8007eb8 <xTaskGenericNotifyFromISR+0x2bc>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00f      	beq.n	8007d4e <xTaskGenericNotifyFromISR+0x152>
    __asm volatile
 8007d2e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8007d32:	b672      	cpsid	i
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	b662      	cpsie	i
 8007d42:	61bb      	str	r3, [r7, #24]
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop
 8007d48:	e7fd      	b.n	8007d46 <xTaskGenericNotifyFromISR+0x14a>
                    break;
 8007d4a:	bf00      	nop
 8007d4c:	e000      	b.n	8007d50 <xTaskGenericNotifyFromISR+0x154>
                    break;
 8007d4e:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007d50:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	f040 80a3 	bne.w	8007ea0 <xTaskGenericNotifyFromISR+0x2a4>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007d5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00d      	beq.n	8007d7e <xTaskGenericNotifyFromISR+0x182>
    __asm volatile
 8007d62:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8007d66:	b672      	cpsid	i
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	b662      	cpsie	i
 8007d76:	617b      	str	r3, [r7, #20]
}
 8007d78:	bf00      	nop
 8007d7a:	bf00      	nop
 8007d7c:	e7fd      	b.n	8007d7a <xTaskGenericNotifyFromISR+0x17e>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8007d7e:	4b4f      	ldr	r3, [pc, #316]	@ (8007ebc <xTaskGenericNotifyFromISR+0x2c0>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d160      	bne.n	8007e48 <xTaskGenericNotifyFromISR+0x24c>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d92:	68d2      	ldr	r2, [r2, #12]
 8007d94:	609a      	str	r2, [r3, #8]
 8007d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d9c:	6892      	ldr	r2, [r2, #8]
 8007d9e:	605a      	str	r2, [r3, #4]
 8007da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da2:	685a      	ldr	r2, [r3, #4]
 8007da4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007da6:	3304      	adds	r3, #4
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d103      	bne.n	8007db4 <xTaskGenericNotifyFromISR+0x1b8>
 8007dac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dae:	68da      	ldr	r2, [r3, #12]
 8007db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db2:	605a      	str	r2, [r3, #4]
 8007db4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007db6:	2200      	movs	r2, #0
 8007db8:	615a      	str	r2, [r3, #20]
 8007dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	1e5a      	subs	r2, r3, #1
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8007dc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc8:	2201      	movs	r2, #1
 8007dca:	409a      	lsls	r2, r3
 8007dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8007ec0 <xTaskGenericNotifyFromISR+0x2c4>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	4a3b      	ldr	r2, [pc, #236]	@ (8007ec0 <xTaskGenericNotifyFromISR+0x2c4>)
 8007dd4:	6013      	str	r3, [r2, #0]
 8007dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dda:	493a      	ldr	r1, [pc, #232]	@ (8007ec4 <xTaskGenericNotifyFromISR+0x2c8>)
 8007ddc:	4613      	mov	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4413      	add	r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	440b      	add	r3, r1
 8007de6:	3304      	adds	r3, #4
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007df0:	609a      	str	r2, [r3, #8]
 8007df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df4:	689a      	ldr	r2, [r3, #8]
 8007df6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007df8:	60da      	str	r2, [r3, #12]
 8007dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e00:	3204      	adds	r2, #4
 8007e02:	605a      	str	r2, [r3, #4]
 8007e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e06:	1d1a      	adds	r2, r3, #4
 8007e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0a:	609a      	str	r2, [r3, #8]
 8007e0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4a2a      	ldr	r2, [pc, #168]	@ (8007ec4 <xTaskGenericNotifyFromISR+0x2c8>)
 8007e1a:	441a      	add	r2, r3
 8007e1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e1e:	615a      	str	r2, [r3, #20]
 8007e20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e24:	4927      	ldr	r1, [pc, #156]	@ (8007ec4 <xTaskGenericNotifyFromISR+0x2c8>)
 8007e26:	4613      	mov	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	440b      	add	r3, r1
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e34:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007e36:	1c59      	adds	r1, r3, #1
 8007e38:	4822      	ldr	r0, [pc, #136]	@ (8007ec4 <xTaskGenericNotifyFromISR+0x2c8>)
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4403      	add	r3, r0
 8007e44:	6019      	str	r1, [r3, #0]
 8007e46:	e01b      	b.n	8007e80 <xTaskGenericNotifyFromISR+0x284>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007e48:	4b1f      	ldr	r3, [pc, #124]	@ (8007ec8 <xTaskGenericNotifyFromISR+0x2cc>)
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e52:	61da      	str	r2, [r3, #28]
 8007e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e56:	689a      	ldr	r2, [r3, #8]
 8007e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e5a:	621a      	str	r2, [r3, #32]
 8007e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e62:	3218      	adds	r2, #24
 8007e64:	605a      	str	r2, [r3, #4]
 8007e66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e68:	f103 0218 	add.w	r2, r3, #24
 8007e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e6e:	609a      	str	r2, [r3, #8]
 8007e70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e72:	4a15      	ldr	r2, [pc, #84]	@ (8007ec8 <xTaskGenericNotifyFromISR+0x2cc>)
 8007e74:	629a      	str	r2, [r3, #40]	@ 0x28
 8007e76:	4b14      	ldr	r3, [pc, #80]	@ (8007ec8 <xTaskGenericNotifyFromISR+0x2cc>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	4a12      	ldr	r2, [pc, #72]	@ (8007ec8 <xTaskGenericNotifyFromISR+0x2cc>)
 8007e7e:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e84:	4b11      	ldr	r3, [pc, #68]	@ (8007ecc <xTaskGenericNotifyFromISR+0x2d0>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d908      	bls.n	8007ea0 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8007e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d002      	beq.n	8007e9a <xTaskGenericNotifyFromISR+0x29e>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8007e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e96:	2201      	movs	r2, #1
 8007e98:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8007e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed0 <xTaskGenericNotifyFromISR+0x2d4>)
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ea2:	613b      	str	r3, [r7, #16]
    __asm volatile
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	f383 8811 	msr	BASEPRI, r3
}
 8007eaa:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 8007eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3748      	adds	r7, #72	@ 0x48
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20000348 	.word	0x20000348
 8007ebc:	2000036c 	.word	0x2000036c
 8007ec0:	2000034c 	.word	0x2000034c
 8007ec4:	20000270 	.word	0x20000270
 8007ec8:	20000304 	.word	0x20000304
 8007ecc:	2000026c 	.word	0x2000026c
 8007ed0:	20000358 	.word	0x20000358

08007ed4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b088      	sub	sp, #32
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007ede:	4b37      	ldr	r3, [pc, #220]	@ (8007fbc <prvAddCurrentTaskToDelayedList+0xe8>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8007ee4:	4b36      	ldr	r3, [pc, #216]	@ (8007fc0 <prvAddCurrentTaskToDelayedList+0xec>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8007eea:	4b36      	ldr	r3, [pc, #216]	@ (8007fc4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ef0:	4b35      	ldr	r3, [pc, #212]	@ (8007fc8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fd fd70 	bl	80059dc <uxListRemove>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10b      	bne.n	8007f1a <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007f02:	4b31      	ldr	r3, [pc, #196]	@ (8007fc8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f08:	2201      	movs	r2, #1
 8007f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0e:	43da      	mvns	r2, r3
 8007f10:	4b2e      	ldr	r3, [pc, #184]	@ (8007fcc <prvAddCurrentTaskToDelayedList+0xf8>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4013      	ands	r3, r2
 8007f16:	4a2d      	ldr	r2, [pc, #180]	@ (8007fcc <prvAddCurrentTaskToDelayedList+0xf8>)
 8007f18:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f20:	d124      	bne.n	8007f6c <prvAddCurrentTaskToDelayedList+0x98>
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d021      	beq.n	8007f6c <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f28:	4b29      	ldr	r3, [pc, #164]	@ (8007fd0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	613b      	str	r3, [r7, #16]
 8007f2e:	4b26      	ldr	r3, [pc, #152]	@ (8007fc8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	693a      	ldr	r2, [r7, #16]
 8007f34:	609a      	str	r2, [r3, #8]
 8007f36:	4b24      	ldr	r3, [pc, #144]	@ (8007fc8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	6892      	ldr	r2, [r2, #8]
 8007f3e:	60da      	str	r2, [r3, #12]
 8007f40:	4b21      	ldr	r3, [pc, #132]	@ (8007fc8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	3204      	adds	r2, #4
 8007f4a:	605a      	str	r2, [r3, #4]
 8007f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8007fc8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	1d1a      	adds	r2, r3, #4
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	609a      	str	r2, [r3, #8]
 8007f56:	4b1c      	ldr	r3, [pc, #112]	@ (8007fc8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8007fd0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8007f5c:	615a      	str	r2, [r3, #20]
 8007f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8007fd0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3301      	adds	r3, #1
 8007f64:	4a1a      	ldr	r2, [pc, #104]	@ (8007fd0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007f6a:	e022      	b.n	8007fb2 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8007f6c:	69fa      	ldr	r2, [r7, #28]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4413      	add	r3, r2
 8007f72:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f74:	4b14      	ldr	r3, [pc, #80]	@ (8007fc8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d207      	bcs.n	8007f94 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8007f84:	4b10      	ldr	r3, [pc, #64]	@ (8007fc8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	3304      	adds	r3, #4
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6978      	ldr	r0, [r7, #20]
 8007f8e:	f7fd fcec 	bl	800596a <vListInsert>
}
 8007f92:	e00e      	b.n	8007fb2 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8007f94:	4b0c      	ldr	r3, [pc, #48]	@ (8007fc8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3304      	adds	r3, #4
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	69b8      	ldr	r0, [r7, #24]
 8007f9e:	f7fd fce4 	bl	800596a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8007fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8007fd4 <prvAddCurrentTaskToDelayedList+0x100>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d202      	bcs.n	8007fb2 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8007fac:	4a09      	ldr	r2, [pc, #36]	@ (8007fd4 <prvAddCurrentTaskToDelayedList+0x100>)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6013      	str	r3, [r2, #0]
}
 8007fb2:	bf00      	nop
 8007fb4:	3720      	adds	r7, #32
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	20000348 	.word	0x20000348
 8007fc0:	200002fc 	.word	0x200002fc
 8007fc4:	20000300 	.word	0x20000300
 8007fc8:	2000026c 	.word	0x2000026c
 8007fcc:	2000034c 	.word	0x2000034c
 8007fd0:	20000330 	.word	0x20000330
 8007fd4:	20000364 	.word	0x20000364

08007fd8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007fe2:	f000 fb2b 	bl	800863c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007fe6:	4b13      	ldr	r3, [pc, #76]	@ (8008034 <xTimerCreateTimerTask+0x5c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00b      	beq.n	8008006 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8007fee:	4b12      	ldr	r3, [pc, #72]	@ (8008038 <xTimerCreateTimerTask+0x60>)
 8007ff0:	9301      	str	r3, [sp, #4]
 8007ff2:	2304      	movs	r3, #4
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007ffc:	490f      	ldr	r1, [pc, #60]	@ (800803c <xTimerCreateTimerTask+0x64>)
 8007ffe:	4810      	ldr	r0, [pc, #64]	@ (8008040 <xTimerCreateTimerTask+0x68>)
 8008000:	f7fe fc4f 	bl	80068a2 <xTaskCreate>
 8008004:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10d      	bne.n	8008028 <xTimerCreateTimerTask+0x50>
    __asm volatile
 800800c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008010:	b672      	cpsid	i
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	b662      	cpsie	i
 8008020:	603b      	str	r3, [r7, #0]
}
 8008022:	bf00      	nop
 8008024:	bf00      	nop
 8008026:	e7fd      	b.n	8008024 <xTimerCreateTimerTask+0x4c>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8008028:	687b      	ldr	r3, [r7, #4]
    }
 800802a:	4618      	mov	r0, r3
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	200003a0 	.word	0x200003a0
 8008038:	200003a4 	.word	0x200003a4
 800803c:	0800a7bc 	.word	0x0800a7bc
 8008040:	08008251 	.word	0x08008251

08008044 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af02      	add	r7, sp, #8
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
 8008050:	603b      	str	r3, [r7, #0]
            traceENTER_xTimerCreate( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8008052:	202c      	movs	r0, #44	@ 0x2c
 8008054:	f000 fe12 	bl	8008c7c <pvPortMalloc>
 8008058:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00d      	beq.n	800807c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	9301      	str	r3, [sp, #4]
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	68b9      	ldr	r1, [r7, #8]
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f000 f805 	bl	8008086 <prvInitialiseNewTimer>
            }

            traceRETURN_xTimerCreate( pxNewTimer );

            return pxNewTimer;
 800807c:	697b      	ldr	r3, [r7, #20]
        }
 800807e:	4618      	mov	r0, r3
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8008086:	b580      	push	{r7, lr}
 8008088:	b086      	sub	sp, #24
 800808a:	af00      	add	r7, sp, #0
 800808c:	60f8      	str	r0, [r7, #12]
 800808e:	60b9      	str	r1, [r7, #8]
 8008090:	607a      	str	r2, [r7, #4]
 8008092:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10d      	bne.n	80080b6 <prvInitialiseNewTimer+0x30>
    __asm volatile
 800809a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800809e:	b672      	cpsid	i
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	b662      	cpsie	i
 80080ae:	617b      	str	r3, [r7, #20]
}
 80080b0:	bf00      	nop
 80080b2:	bf00      	nop
 80080b4:	e7fd      	b.n	80080b2 <prvInitialiseNewTimer+0x2c>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 80080b6:	f000 fac1 	bl	800863c <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 80080ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80080c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 80080c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c8:	683a      	ldr	r2, [r7, #0]
 80080ca:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80080cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ce:	6a3a      	ldr	r2, [r7, #32]
 80080d0:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80080d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d4:	3304      	adds	r3, #4
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fd fc3a 	bl	8005950 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d008      	beq.n	80080f4 <prvInitialiseNewTimer+0x6e>
        {
            pxNewTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 80080e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080e8:	f043 0304 	orr.w	r3, r3, #4
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 80080f4:	bf00      	nop
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <xTimerGenericCommandFromTask>:
    BaseType_t xTimerGenericCommandFromTask( TimerHandle_t xTimer,
                                             const BaseType_t xCommandID,
                                             const TickType_t xOptionalValue,
                                             BaseType_t * const pxHigherPriorityTaskWoken,
                                             const TickType_t xTicksToWait )
    {
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b08c      	sub	sp, #48	@ 0x30
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
 8008108:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800810a:	2300      	movs	r3, #0
 800810c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        ( void ) pxHigherPriorityTaskWoken;

        traceENTER_xTimerGenericCommandFromTask( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );

        configASSERT( xTimer );
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10d      	bne.n	8008130 <xTimerGenericCommandFromTask+0x34>
    __asm volatile
 8008114:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008118:	b672      	cpsid	i
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	b662      	cpsie	i
 8008128:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800812a:	bf00      	nop
 800812c:	bf00      	nop
 800812e:	e7fd      	b.n	800812c <xTimerGenericCommandFromTask+0x30>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8008130:	4b1d      	ldr	r3, [pc, #116]	@ (80081a8 <xTimerGenericCommandFromTask+0xac>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d031      	beq.n	800819c <xTimerGenericCommandFromTask+0xa0>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	61fb      	str	r3, [r7, #28]

            configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2b05      	cmp	r3, #5
 8008148:	dd0d      	ble.n	8008166 <xTimerGenericCommandFromTask+0x6a>
    __asm volatile
 800814a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800814e:	b672      	cpsid	i
 8008150:	f383 8811 	msr	BASEPRI, r3
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	b662      	cpsie	i
 800815e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008160:	bf00      	nop
 8008162:	bf00      	nop
 8008164:	e7fd      	b.n	8008162 <xTimerGenericCommandFromTask+0x66>

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2b05      	cmp	r3, #5
 800816a:	dc17      	bgt.n	800819c <xTimerGenericCommandFromTask+0xa0>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800816c:	f7ff fab6 	bl	80076dc <xTaskGetSchedulerState>
 8008170:	4603      	mov	r3, r0
 8008172:	2b02      	cmp	r3, #2
 8008174:	d109      	bne.n	800818a <xTimerGenericCommandFromTask+0x8e>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008176:	4b0c      	ldr	r3, [pc, #48]	@ (80081a8 <xTimerGenericCommandFromTask+0xac>)
 8008178:	6818      	ldr	r0, [r3, #0]
 800817a:	f107 0114 	add.w	r1, r7, #20
 800817e:	2300      	movs	r3, #0
 8008180:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008182:	f7fd fd63 	bl	8005c4c <xQueueGenericSend>
 8008186:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008188:	e008      	b.n	800819c <xTimerGenericCommandFromTask+0xa0>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800818a:	4b07      	ldr	r3, [pc, #28]	@ (80081a8 <xTimerGenericCommandFromTask+0xac>)
 800818c:	6818      	ldr	r0, [r3, #0]
 800818e:	f107 0114 	add.w	r1, r7, #20
 8008192:	2300      	movs	r3, #0
 8008194:	2200      	movs	r2, #0
 8008196:	f7fd fd59 	bl	8005c4c <xQueueGenericSend>
 800819a:	62f8      	str	r0, [r7, #44]	@ 0x2c
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromTask( xReturn );

        return xReturn;
 800819c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800819e:	4618      	mov	r0, r3
 80081a0:	3730      	adds	r7, #48	@ 0x30
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	200003a0 	.word	0x200003a0

080081ac <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80081b8:	e008      	b.n	80081cc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	4413      	add	r3, r2
 80081c2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6a1b      	ldr	r3, [r3, #32]
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	699a      	ldr	r2, [r3, #24]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	18d1      	adds	r1, r2, r3
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f000 f8df 	bl	800839c <prvInsertTimerInActiveList>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1ea      	bne.n	80081ba <prvReloadTimer+0xe>
        }
    }
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
	...

080081f0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081fa:	4b14      	ldr	r3, [pc, #80]	@ (800824c <prvProcessExpiredTimer+0x5c>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	3304      	adds	r3, #4
 8008208:	4618      	mov	r0, r3
 800820a:	f7fd fbe7 	bl	80059dc <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008214:	f003 0304 	and.w	r3, r3, #4
 8008218:	2b00      	cmp	r3, #0
 800821a:	d005      	beq.n	8008228 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	6879      	ldr	r1, [r7, #4]
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f7ff ffc3 	bl	80081ac <prvReloadTimer>
 8008226:	e008      	b.n	800823a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800822e:	f023 0301 	bic.w	r3, r3, #1
 8008232:	b2da      	uxtb	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	4798      	blx	r3
    }
 8008242:	bf00      	nop
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20000398 	.word	0x20000398

08008250 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008258:	f107 0308 	add.w	r3, r7, #8
 800825c:	4618      	mov	r0, r3
 800825e:	f000 f859 	bl	8008314 <prvGetNextExpireTime>
 8008262:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	4619      	mov	r1, r3
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 f805 	bl	8008278 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800826e:	f000 f8d7 	bl	8008420 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008272:	bf00      	nop
 8008274:	e7f0      	b.n	8008258 <prvTimerTask+0x8>
	...

08008278 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8008282:	f7fe fcef 	bl	8006c64 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008286:	f107 0308 	add.w	r3, r7, #8
 800828a:	4618      	mov	r0, r3
 800828c:	f000 f866 	bl	800835c <prvSampleTimeNow>
 8008290:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d130      	bne.n	80082fa <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10a      	bne.n	80082b4 <prvProcessTimerOrBlockTask+0x3c>
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d806      	bhi.n	80082b4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80082a6:	f7fe fceb 	bl	8006c80 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80082aa:	68f9      	ldr	r1, [r7, #12]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f7ff ff9f 	bl	80081f0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80082b2:	e024      	b.n	80082fe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d008      	beq.n	80082cc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80082ba:	4b13      	ldr	r3, [pc, #76]	@ (8008308 <prvProcessTimerOrBlockTask+0x90>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <prvProcessTimerOrBlockTask+0x50>
 80082c4:	2301      	movs	r3, #1
 80082c6:	e000      	b.n	80082ca <prvProcessTimerOrBlockTask+0x52>
 80082c8:	2300      	movs	r3, #0
 80082ca:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80082cc:	4b0f      	ldr	r3, [pc, #60]	@ (800830c <prvProcessTimerOrBlockTask+0x94>)
 80082ce:	6818      	ldr	r0, [r3, #0]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	4619      	mov	r1, r3
 80082da:	f7fe f9f9 	bl	80066d0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80082de:	f7fe fccf 	bl	8006c80 <xTaskResumeAll>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10a      	bne.n	80082fe <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 80082e8:	4b09      	ldr	r3, [pc, #36]	@ (8008310 <prvProcessTimerOrBlockTask+0x98>)
 80082ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	f3bf 8f6f 	isb	sy
    }
 80082f8:	e001      	b.n	80082fe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80082fa:	f7fe fcc1 	bl	8006c80 <xTaskResumeAll>
    }
 80082fe:	bf00      	nop
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	2000039c 	.word	0x2000039c
 800830c:	200003a0 	.word	0x200003a0
 8008310:	e000ed04 	.word	0xe000ed04

08008314 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800831c:	4b0e      	ldr	r3, [pc, #56]	@ (8008358 <prvGetNextExpireTime+0x44>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <prvGetNextExpireTime+0x16>
 8008326:	2201      	movs	r2, #1
 8008328:	e000      	b.n	800832c <prvGetNextExpireTime+0x18>
 800832a:	2200      	movs	r2, #0
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d105      	bne.n	8008344 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008338:	4b07      	ldr	r3, [pc, #28]	@ (8008358 <prvGetNextExpireTime+0x44>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	60fb      	str	r3, [r7, #12]
 8008342:	e001      	b.n	8008348 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8008344:	2300      	movs	r3, #0
 8008346:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8008348:	68fb      	ldr	r3, [r7, #12]
    }
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	20000398 	.word	0x20000398

0800835c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8008364:	f7fe fd96 	bl	8006e94 <xTaskGetTickCount>
 8008368:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800836a:	4b0b      	ldr	r3, [pc, #44]	@ (8008398 <prvSampleTimeNow+0x3c>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	429a      	cmp	r2, r3
 8008372:	d205      	bcs.n	8008380 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008374:	f000 f93c 	bl	80085f0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	e002      	b.n	8008386 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8008386:	4a04      	ldr	r2, [pc, #16]	@ (8008398 <prvSampleTimeNow+0x3c>)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800838c:	68fb      	ldr	r3, [r7, #12]
    }
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	200003a8 	.word	0x200003a8

0800839c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
 80083a8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80083aa:	2300      	movs	r3, #0
 80083ac:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d812      	bhi.n	80083e8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	1ad2      	subs	r2, r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d302      	bcc.n	80083d6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80083d0:	2301      	movs	r3, #1
 80083d2:	617b      	str	r3, [r7, #20]
 80083d4:	e01b      	b.n	800840e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80083d6:	4b10      	ldr	r3, [pc, #64]	@ (8008418 <prvInsertTimerInActiveList+0x7c>)
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	3304      	adds	r3, #4
 80083de:	4619      	mov	r1, r3
 80083e0:	4610      	mov	r0, r2
 80083e2:	f7fd fac2 	bl	800596a <vListInsert>
 80083e6:	e012      	b.n	800840e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d206      	bcs.n	80083fe <prvInsertTimerInActiveList+0x62>
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d302      	bcc.n	80083fe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80083f8:	2301      	movs	r3, #1
 80083fa:	617b      	str	r3, [r7, #20]
 80083fc:	e007      	b.n	800840e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083fe:	4b07      	ldr	r3, [pc, #28]	@ (800841c <prvInsertTimerInActiveList+0x80>)
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	3304      	adds	r3, #4
 8008406:	4619      	mov	r1, r3
 8008408:	4610      	mov	r0, r2
 800840a:	f7fd faae 	bl	800596a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800840e:	697b      	ldr	r3, [r7, #20]
    }
 8008410:	4618      	mov	r0, r3
 8008412:	3718      	adds	r7, #24
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	2000039c 	.word	0x2000039c
 800841c:	20000398 	.word	0x20000398

08008420 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8008420:	b580      	push	{r7, lr}
 8008422:	b08a      	sub	sp, #40	@ 0x28
 8008424:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8008426:	1d3b      	adds	r3, r7, #4
 8008428:	2200      	movs	r2, #0
 800842a:	601a      	str	r2, [r3, #0]
 800842c:	605a      	str	r2, [r3, #4]
 800842e:	609a      	str	r2, [r3, #8]
 8008430:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8008432:	e0cb      	b.n	80085cc <prvProcessReceivedCommands+0x1ac>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	da1b      	bge.n	8008472 <prvProcessReceivedCommands+0x52>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800843a:	1d3b      	adds	r3, r7, #4
 800843c:	3304      	adds	r3, #4
 800843e:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8008440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10d      	bne.n	8008462 <prvProcessReceivedCommands+0x42>
    __asm volatile
 8008446:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800844a:	b672      	cpsid	i
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	b662      	cpsie	i
 800845a:	61bb      	str	r3, [r7, #24]
}
 800845c:	bf00      	nop
 800845e:	bf00      	nop
 8008460:	e7fd      	b.n	800845e <prvProcessReceivedCommands+0x3e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008468:	6850      	ldr	r0, [r2, #4]
 800846a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800846c:	6892      	ldr	r2, [r2, #8]
 800846e:	4611      	mov	r1, r2
 8008470:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	f2c0 80a9 	blt.w	80085cc <prvProcessReceivedCommands+0x1ac>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d004      	beq.n	8008490 <prvProcessReceivedCommands+0x70>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	3304      	adds	r3, #4
 800848a:	4618      	mov	r0, r3
 800848c:	f7fd faa6 	bl	80059dc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008490:	463b      	mov	r3, r7
 8008492:	4618      	mov	r0, r3
 8008494:	f7ff ff62 	bl	800835c <prvSampleTimeNow>
 8008498:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	3b01      	subs	r3, #1
 800849e:	2b08      	cmp	r3, #8
 80084a0:	f200 8091 	bhi.w	80085c6 <prvProcessReceivedCommands+0x1a6>
 80084a4:	a201      	add	r2, pc, #4	@ (adr r2, 80084ac <prvProcessReceivedCommands+0x8c>)
 80084a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084aa:	bf00      	nop
 80084ac:	080084d1 	.word	0x080084d1
 80084b0:	080084d1 	.word	0x080084d1
 80084b4:	08008539 	.word	0x08008539
 80084b8:	0800854d 	.word	0x0800854d
 80084bc:	0800859d 	.word	0x0800859d
 80084c0:	080084d1 	.word	0x080084d1
 80084c4:	080084d1 	.word	0x080084d1
 80084c8:	08008539 	.word	0x08008539
 80084cc:	0800854d 	.word	0x0800854d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80084d0:	6a3b      	ldr	r3, [r7, #32]
 80084d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084d6:	f043 0301 	orr.w	r3, r3, #1
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	6a3b      	ldr	r3, [r7, #32]
 80084de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	18d1      	adds	r1, r2, r3
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	69fa      	ldr	r2, [r7, #28]
 80084ee:	6a38      	ldr	r0, [r7, #32]
 80084f0:	f7ff ff54 	bl	800839c <prvInsertTimerInActiveList>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d067      	beq.n	80085ca <prvProcessReceivedCommands+0x1aa>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80084fa:	6a3b      	ldr	r3, [r7, #32]
 80084fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008500:	f003 0304 	and.w	r3, r3, #4
 8008504:	2b00      	cmp	r3, #0
 8008506:	d009      	beq.n	800851c <prvProcessReceivedCommands+0xfc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	4413      	add	r3, r2
 8008510:	69fa      	ldr	r2, [r7, #28]
 8008512:	4619      	mov	r1, r3
 8008514:	6a38      	ldr	r0, [r7, #32]
 8008516:	f7ff fe49 	bl	80081ac <prvReloadTimer>
 800851a:	e008      	b.n	800852e <prvProcessReceivedCommands+0x10e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800851c:	6a3b      	ldr	r3, [r7, #32]
 800851e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008522:	f023 0301 	bic.w	r3, r3, #1
 8008526:	b2da      	uxtb	r2, r3
 8008528:	6a3b      	ldr	r3, [r7, #32]
 800852a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	6a38      	ldr	r0, [r7, #32]
 8008534:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8008536:	e048      	b.n	80085ca <prvProcessReceivedCommands+0x1aa>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008538:	6a3b      	ldr	r3, [r7, #32]
 800853a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800853e:	f023 0301 	bic.w	r3, r3, #1
 8008542:	b2da      	uxtb	r2, r3
 8008544:	6a3b      	ldr	r3, [r7, #32]
 8008546:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800854a:	e03f      	b.n	80085cc <prvProcessReceivedCommands+0x1ac>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008552:	f043 0301 	orr.w	r3, r3, #1
 8008556:	b2da      	uxtb	r2, r3
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	6a3b      	ldr	r3, [r7, #32]
 8008562:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10d      	bne.n	8008588 <prvProcessReceivedCommands+0x168>
    __asm volatile
 800856c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008570:	b672      	cpsid	i
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	b662      	cpsie	i
 8008580:	617b      	str	r3, [r7, #20]
}
 8008582:	bf00      	nop
 8008584:	bf00      	nop
 8008586:	e7fd      	b.n	8008584 <prvProcessReceivedCommands+0x164>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	699a      	ldr	r2, [r3, #24]
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	18d1      	adds	r1, r2, r3
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	69fa      	ldr	r2, [r7, #28]
 8008594:	6a38      	ldr	r0, [r7, #32]
 8008596:	f7ff ff01 	bl	800839c <prvInsertTimerInActiveList>
                        break;
 800859a:	e017      	b.n	80085cc <prvProcessReceivedCommands+0x1ac>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800859c:	6a3b      	ldr	r3, [r7, #32]
 800859e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085a2:	f003 0302 	and.w	r3, r3, #2
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d103      	bne.n	80085b2 <prvProcessReceivedCommands+0x192>
                            {
                                vPortFree( pxTimer );
 80085aa:	6a38      	ldr	r0, [r7, #32]
 80085ac:	f000 fca4 	bl	8008ef8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80085b0:	e00c      	b.n	80085cc <prvProcessReceivedCommands+0x1ac>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80085b2:	6a3b      	ldr	r3, [r7, #32]
 80085b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085b8:	f023 0301 	bic.w	r3, r3, #1
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80085c4:	e002      	b.n	80085cc <prvProcessReceivedCommands+0x1ac>

                    default:
                        /* Don't expect to get here. */
                        break;
 80085c6:	bf00      	nop
 80085c8:	e000      	b.n	80085cc <prvProcessReceivedCommands+0x1ac>
                        break;
 80085ca:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80085cc:	4b07      	ldr	r3, [pc, #28]	@ (80085ec <prvProcessReceivedCommands+0x1cc>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	1d39      	adds	r1, r7, #4
 80085d2:	2200      	movs	r2, #0
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fd fd37 	bl	8006048 <xQueueReceive>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f47f af29 	bne.w	8008434 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 80085e2:	bf00      	nop
 80085e4:	bf00      	nop
 80085e6:	3728      	adds	r7, #40	@ 0x28
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	200003a0 	.word	0x200003a0

080085f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085f6:	e009      	b.n	800860c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008634 <prvSwitchTimerLists+0x44>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8008602:	f04f 31ff 	mov.w	r1, #4294967295
 8008606:	6838      	ldr	r0, [r7, #0]
 8008608:	f7ff fdf2 	bl	80081f0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800860c:	4b09      	ldr	r3, [pc, #36]	@ (8008634 <prvSwitchTimerLists+0x44>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1f0      	bne.n	80085f8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8008616:	4b07      	ldr	r3, [pc, #28]	@ (8008634 <prvSwitchTimerLists+0x44>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800861c:	4b06      	ldr	r3, [pc, #24]	@ (8008638 <prvSwitchTimerLists+0x48>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a04      	ldr	r2, [pc, #16]	@ (8008634 <prvSwitchTimerLists+0x44>)
 8008622:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008624:	4a04      	ldr	r2, [pc, #16]	@ (8008638 <prvSwitchTimerLists+0x48>)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6013      	str	r3, [r2, #0]
    }
 800862a:	bf00      	nop
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	20000398 	.word	0x20000398
 8008638:	2000039c 	.word	0x2000039c

0800863c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800863c:	b580      	push	{r7, lr}
 800863e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8008640:	f000 f9e8 	bl	8008a14 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008644:	4b12      	ldr	r3, [pc, #72]	@ (8008690 <prvCheckForValidListAndQueue+0x54>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d11d      	bne.n	8008688 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800864c:	4811      	ldr	r0, [pc, #68]	@ (8008694 <prvCheckForValidListAndQueue+0x58>)
 800864e:	f7fd f95f 	bl	8005910 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8008652:	4811      	ldr	r0, [pc, #68]	@ (8008698 <prvCheckForValidListAndQueue+0x5c>)
 8008654:	f7fd f95c 	bl	8005910 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008658:	4b10      	ldr	r3, [pc, #64]	@ (800869c <prvCheckForValidListAndQueue+0x60>)
 800865a:	4a0e      	ldr	r2, [pc, #56]	@ (8008694 <prvCheckForValidListAndQueue+0x58>)
 800865c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800865e:	4b10      	ldr	r3, [pc, #64]	@ (80086a0 <prvCheckForValidListAndQueue+0x64>)
 8008660:	4a0d      	ldr	r2, [pc, #52]	@ (8008698 <prvCheckForValidListAndQueue+0x5c>)
 8008662:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8008664:	2200      	movs	r2, #0
 8008666:	2110      	movs	r1, #16
 8008668:	2005      	movs	r0, #5
 800866a:	f7fd fa77 	bl	8005b5c <xQueueGenericCreate>
 800866e:	4603      	mov	r3, r0
 8008670:	4a07      	ldr	r2, [pc, #28]	@ (8008690 <prvCheckForValidListAndQueue+0x54>)
 8008672:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8008674:	4b06      	ldr	r3, [pc, #24]	@ (8008690 <prvCheckForValidListAndQueue+0x54>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d005      	beq.n	8008688 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800867c:	4b04      	ldr	r3, [pc, #16]	@ (8008690 <prvCheckForValidListAndQueue+0x54>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4908      	ldr	r1, [pc, #32]	@ (80086a4 <prvCheckForValidListAndQueue+0x68>)
 8008682:	4618      	mov	r0, r3
 8008684:	f7fd ffd2 	bl	800662c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008688:	f000 f9fa 	bl	8008a80 <vPortExitCritical>
    }
 800868c:	bf00      	nop
 800868e:	bd80      	pop	{r7, pc}
 8008690:	200003a0 	.word	0x200003a0
 8008694:	20000370 	.word	0x20000370
 8008698:	20000384 	.word	0x20000384
 800869c:	20000398 	.word	0x20000398
 80086a0:	2000039c 	.word	0x2000039c
 80086a4:	0800a7c4 	.word	0x0800a7c4

080086a8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	613b      	str	r3, [r7, #16]

        traceENTER_xTimerIsTimerActive( xTimer );

        configASSERT( xTimer );
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10d      	bne.n	80086d6 <xTimerIsTimerActive+0x2e>
    __asm volatile
 80086ba:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80086be:	b672      	cpsid	i
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	b662      	cpsie	i
 80086ce:	60fb      	str	r3, [r7, #12]
}
 80086d0:	bf00      	nop
 80086d2:	bf00      	nop
 80086d4:	e7fd      	b.n	80086d2 <xTimerIsTimerActive+0x2a>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 80086d6:	f000 f99d 	bl	8008a14 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0U )
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086e0:	f003 0301 	and.w	r3, r3, #1
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d102      	bne.n	80086ee <xTimerIsTimerActive+0x46>
            {
                xReturn = pdFALSE;
 80086e8:	2300      	movs	r3, #0
 80086ea:	617b      	str	r3, [r7, #20]
 80086ec:	e001      	b.n	80086f2 <xTimerIsTimerActive+0x4a>
            }
            else
            {
                xReturn = pdTRUE;
 80086ee:	2301      	movs	r3, #1
 80086f0:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 80086f2:	f000 f9c5 	bl	8008a80 <vPortExitCritical>

        traceRETURN_xTimerIsTimerActive( xReturn );

        return xReturn;
 80086f6:	697b      	ldr	r3, [r7, #20]
    }
 80086f8:	4618      	mov	r0, r3
 80086fa:	3718      	adds	r7, #24
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        traceENTER_pvTimerGetTimerID( xTimer );

        configASSERT( xTimer );
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10d      	bne.n	800872e <pvTimerGetTimerID+0x2e>
    __asm volatile
 8008712:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008716:	b672      	cpsid	i
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	b662      	cpsie	i
 8008726:	60fb      	str	r3, [r7, #12]
}
 8008728:	bf00      	nop
 800872a:	bf00      	nop
 800872c:	e7fd      	b.n	800872a <pvTimerGetTimerID+0x2a>

        taskENTER_CRITICAL();
 800872e:	f000 f971 	bl	8008a14 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8008738:	f000 f9a2 	bl	8008a80 <vPortExitCritical>

        traceRETURN_pvTimerGetTimerID( pvReturn );

        return pvReturn;
 800873c:	693b      	ldr	r3, [r7, #16]
    }
 800873e:	4618      	mov	r0, r3
 8008740:	3718      	adds	r7, #24
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
	...

08008748 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	3b04      	subs	r3, #4
 8008758:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008760:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3b04      	subs	r3, #4
 8008766:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	f023 0201 	bic.w	r2, r3, #1
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	3b04      	subs	r3, #4
 8008776:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008778:	4a0c      	ldr	r2, [pc, #48]	@ (80087ac <pxPortInitialiseStack+0x64>)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	3b14      	subs	r3, #20
 8008782:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	3b04      	subs	r3, #4
 800878e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f06f 0202 	mvn.w	r2, #2
 8008796:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3b20      	subs	r3, #32
 800879c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800879e:	68fb      	ldr	r3, [r7, #12]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	080087b1 	.word	0x080087b1

080087b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80087b6:	2300      	movs	r3, #0
 80087b8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80087ba:	4b15      	ldr	r3, [pc, #84]	@ (8008810 <prvTaskExitError+0x60>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c2:	d00d      	beq.n	80087e0 <prvTaskExitError+0x30>
    __asm volatile
 80087c4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80087c8:	b672      	cpsid	i
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	b662      	cpsie	i
 80087d8:	60fb      	str	r3, [r7, #12]
}
 80087da:	bf00      	nop
 80087dc:	bf00      	nop
 80087de:	e7fd      	b.n	80087dc <prvTaskExitError+0x2c>
    __asm volatile
 80087e0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80087e4:	b672      	cpsid	i
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	b662      	cpsie	i
 80087f4:	60bb      	str	r3, [r7, #8]
}
 80087f6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80087f8:	bf00      	nop
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d0fc      	beq.n	80087fa <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8008800:	bf00      	nop
 8008802:	bf00      	nop
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	20000024 	.word	0x20000024
	...

08008820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008820:	4b07      	ldr	r3, [pc, #28]	@ (8008840 <pxCurrentTCBConst2>)
 8008822:	6819      	ldr	r1, [r3, #0]
 8008824:	6808      	ldr	r0, [r1, #0]
 8008826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882a:	f380 8809 	msr	PSP, r0
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f04f 0000 	mov.w	r0, #0
 8008836:	f380 8811 	msr	BASEPRI, r0
 800883a:	4770      	bx	lr
 800883c:	f3af 8000 	nop.w

08008840 <pxCurrentTCBConst2>:
 8008840:	2000026c 	.word	0x2000026c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8008844:	bf00      	nop
 8008846:	bf00      	nop

08008848 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008848:	4808      	ldr	r0, [pc, #32]	@ (800886c <prvPortStartFirstTask+0x24>)
 800884a:	6800      	ldr	r0, [r0, #0]
 800884c:	6800      	ldr	r0, [r0, #0]
 800884e:	f380 8808 	msr	MSP, r0
 8008852:	f04f 0000 	mov.w	r0, #0
 8008856:	f380 8814 	msr	CONTROL, r0
 800885a:	b662      	cpsie	i
 800885c:	b661      	cpsie	f
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	df00      	svc	0
 8008868:	bf00      	nop
 800886a:	0000      	.short	0x0000
 800886c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8008870:	bf00      	nop
 8008872:	bf00      	nop

08008874 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b08a      	sub	sp, #40	@ 0x28
 8008878:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800887a:	4b5c      	ldr	r3, [pc, #368]	@ (80089ec <xPortStartScheduler+0x178>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8008880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008882:	332c      	adds	r3, #44	@ 0x2c
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a5a      	ldr	r2, [pc, #360]	@ (80089f0 <xPortStartScheduler+0x17c>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d00d      	beq.n	80088a8 <xPortStartScheduler+0x34>
    __asm volatile
 800888c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008890:	b672      	cpsid	i
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	b662      	cpsie	i
 80088a0:	61fb      	str	r3, [r7, #28]
}
 80088a2:	bf00      	nop
 80088a4:	bf00      	nop
 80088a6:	e7fd      	b.n	80088a4 <xPortStartScheduler+0x30>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80088a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088aa:	3338      	adds	r3, #56	@ 0x38
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a51      	ldr	r2, [pc, #324]	@ (80089f4 <xPortStartScheduler+0x180>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d00d      	beq.n	80088d0 <xPortStartScheduler+0x5c>
    __asm volatile
 80088b4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80088b8:	b672      	cpsid	i
 80088ba:	f383 8811 	msr	BASEPRI, r3
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	b662      	cpsie	i
 80088c8:	61bb      	str	r3, [r7, #24]
}
 80088ca:	bf00      	nop
 80088cc:	bf00      	nop
 80088ce:	e7fd      	b.n	80088cc <xPortStartScheduler+0x58>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088d4:	4b48      	ldr	r3, [pc, #288]	@ (80089f8 <xPortStartScheduler+0x184>)
 80088d6:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80088d8:	6a3b      	ldr	r3, [r7, #32]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	22ff      	movs	r2, #255	@ 0xff
 80088e4:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80088e6:	6a3b      	ldr	r3, [r7, #32]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80088ee:	79fb      	ldrb	r3, [r7, #7]
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	4b40      	ldr	r3, [pc, #256]	@ (80089fc <xPortStartScheduler+0x188>)
 80088fa:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80088fc:	4b3f      	ldr	r3, [pc, #252]	@ (80089fc <xPortStartScheduler+0x188>)
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10d      	bne.n	8008920 <xPortStartScheduler+0xac>
    __asm volatile
 8008904:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008908:	b672      	cpsid	i
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	b662      	cpsie	i
 8008918:	617b      	str	r3, [r7, #20]
}
 800891a:	bf00      	nop
 800891c:	bf00      	nop
 800891e:	e7fd      	b.n	800891c <xPortStartScheduler+0xa8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8008920:	79fb      	ldrb	r3, [r7, #7]
 8008922:	b2db      	uxtb	r3, r3
 8008924:	43db      	mvns	r3, r3
 8008926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800892a:	2b00      	cmp	r3, #0
 800892c:	d015      	beq.n	800895a <xPortStartScheduler+0xe6>
    __asm volatile
 800892e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008932:	b672      	cpsid	i
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	b662      	cpsie	i
 8008942:	613b      	str	r3, [r7, #16]
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop
 8008948:	e7fd      	b.n	8008946 <xPortStartScheduler+0xd2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	3301      	adds	r3, #1
 800894e:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008950:	79fb      	ldrb	r3, [r7, #7]
 8008952:	b2db      	uxtb	r3, r3
 8008954:	005b      	lsls	r3, r3, #1
 8008956:	b2db      	uxtb	r3, r3
 8008958:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800895a:	79fb      	ldrb	r3, [r7, #7]
 800895c:	b2db      	uxtb	r3, r3
 800895e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008962:	2b80      	cmp	r3, #128	@ 0x80
 8008964:	d0f1      	beq.n	800894a <xPortStartScheduler+0xd6>
        }

        if( ulImplementedPrioBits == 8 )
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2b08      	cmp	r3, #8
 800896a:	d103      	bne.n	8008974 <xPortStartScheduler+0x100>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800896c:	4b24      	ldr	r3, [pc, #144]	@ (8008a00 <xPortStartScheduler+0x18c>)
 800896e:	2200      	movs	r2, #0
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	e004      	b.n	800897e <xPortStartScheduler+0x10a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	f1c3 0307 	rsb	r3, r3, #7
 800897a:	4a21      	ldr	r2, [pc, #132]	@ (8008a00 <xPortStartScheduler+0x18c>)
 800897c:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800897e:	4b20      	ldr	r3, [pc, #128]	@ (8008a00 <xPortStartScheduler+0x18c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	021b      	lsls	r3, r3, #8
 8008984:	4a1e      	ldr	r2, [pc, #120]	@ (8008a00 <xPortStartScheduler+0x18c>)
 8008986:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008988:	4b1d      	ldr	r3, [pc, #116]	@ (8008a00 <xPortStartScheduler+0x18c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008990:	4a1b      	ldr	r2, [pc, #108]	@ (8008a00 <xPortStartScheduler+0x18c>)
 8008992:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	b2da      	uxtb	r2, r3
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800899c:	4b19      	ldr	r3, [pc, #100]	@ (8008a04 <xPortStartScheduler+0x190>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a18      	ldr	r2, [pc, #96]	@ (8008a04 <xPortStartScheduler+0x190>)
 80089a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089a6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80089a8:	4b16      	ldr	r3, [pc, #88]	@ (8008a04 <xPortStartScheduler+0x190>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a15      	ldr	r2, [pc, #84]	@ (8008a04 <xPortStartScheduler+0x190>)
 80089ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089b2:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80089b4:	4b14      	ldr	r3, [pc, #80]	@ (8008a08 <xPortStartScheduler+0x194>)
 80089b6:	2200      	movs	r2, #0
 80089b8:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80089ba:	f000 f8e9 	bl	8008b90 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80089be:	4b13      	ldr	r3, [pc, #76]	@ (8008a0c <xPortStartScheduler+0x198>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80089c4:	f000 f908 	bl	8008bd8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80089c8:	4b11      	ldr	r3, [pc, #68]	@ (8008a10 <xPortStartScheduler+0x19c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a10      	ldr	r2, [pc, #64]	@ (8008a10 <xPortStartScheduler+0x19c>)
 80089ce:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80089d2:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80089d4:	f7ff ff38 	bl	8008848 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80089d8:	f7fe fb94 	bl	8007104 <vTaskSwitchContext>
    prvTaskExitError();
 80089dc:	f7ff fee8 	bl	80087b0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3728      	adds	r7, #40	@ 0x28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	e000ed08 	.word	0xe000ed08
 80089f0:	08008821 	.word	0x08008821
 80089f4:	08008ae1 	.word	0x08008ae1
 80089f8:	e000e400 	.word	0xe000e400
 80089fc:	200003ac 	.word	0x200003ac
 8008a00:	200003b0 	.word	0x200003b0
 8008a04:	e000ed20 	.word	0xe000ed20
 8008a08:	e000ed1c 	.word	0xe000ed1c
 8008a0c:	20000024 	.word	0x20000024
 8008a10:	e000ef34 	.word	0xe000ef34

08008a14 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
    __asm volatile
 8008a1a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008a1e:	b672      	cpsid	i
 8008a20:	f383 8811 	msr	BASEPRI, r3
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	f3bf 8f4f 	dsb	sy
 8008a2c:	b662      	cpsie	i
 8008a2e:	607b      	str	r3, [r7, #4]
}
 8008a30:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008a32:	4b11      	ldr	r3, [pc, #68]	@ (8008a78 <vPortEnterCritical+0x64>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3301      	adds	r3, #1
 8008a38:	4a0f      	ldr	r2, [pc, #60]	@ (8008a78 <vPortEnterCritical+0x64>)
 8008a3a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8008a78 <vPortEnterCritical+0x64>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d112      	bne.n	8008a6a <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a44:	4b0d      	ldr	r3, [pc, #52]	@ (8008a7c <vPortEnterCritical+0x68>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00d      	beq.n	8008a6a <vPortEnterCritical+0x56>
    __asm volatile
 8008a4e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008a52:	b672      	cpsid	i
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	b662      	cpsie	i
 8008a62:	603b      	str	r3, [r7, #0]
}
 8008a64:	bf00      	nop
 8008a66:	bf00      	nop
 8008a68:	e7fd      	b.n	8008a66 <vPortEnterCritical+0x52>
    }
}
 8008a6a:	bf00      	nop
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	20000024 	.word	0x20000024
 8008a7c:	e000ed04 	.word	0xe000ed04

08008a80 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8008a86:	4b13      	ldr	r3, [pc, #76]	@ (8008ad4 <vPortExitCritical+0x54>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10d      	bne.n	8008aaa <vPortExitCritical+0x2a>
    __asm volatile
 8008a8e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008a92:	b672      	cpsid	i
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	b662      	cpsie	i
 8008aa2:	607b      	str	r3, [r7, #4]
}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop
 8008aa8:	e7fd      	b.n	8008aa6 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8008aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad4 <vPortExitCritical+0x54>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	4a08      	ldr	r2, [pc, #32]	@ (8008ad4 <vPortExitCritical+0x54>)
 8008ab2:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008ab4:	4b07      	ldr	r3, [pc, #28]	@ (8008ad4 <vPortExitCritical+0x54>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d105      	bne.n	8008ac8 <vPortExitCritical+0x48>
 8008abc:	2300      	movs	r3, #0
 8008abe:	603b      	str	r3, [r7, #0]
    __asm volatile
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	f383 8811 	msr	BASEPRI, r3
}
 8008ac6:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8008ac8:	bf00      	nop
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	20000024 	.word	0x20000024
	...

08008ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008ae0:	f3ef 8009 	mrs	r0, PSP
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	4b15      	ldr	r3, [pc, #84]	@ (8008b40 <pxCurrentTCBConst>)
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	f01e 0f10 	tst.w	lr, #16
 8008af0:	bf08      	it	eq
 8008af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008afa:	6010      	str	r0, [r2, #0]
 8008afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b00:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8008b04:	b672      	cpsid	i
 8008b06:	f380 8811 	msr	BASEPRI, r0
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	b662      	cpsie	i
 8008b14:	f7fe faf6 	bl	8007104 <vTaskSwitchContext>
 8008b18:	f04f 0000 	mov.w	r0, #0
 8008b1c:	f380 8811 	msr	BASEPRI, r0
 8008b20:	bc09      	pop	{r0, r3}
 8008b22:	6819      	ldr	r1, [r3, #0]
 8008b24:	6808      	ldr	r0, [r1, #0]
 8008b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b2a:	f01e 0f10 	tst.w	lr, #16
 8008b2e:	bf08      	it	eq
 8008b30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b34:	f380 8809 	msr	PSP, r0
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop

08008b40 <pxCurrentTCBConst>:
 8008b40:	2000026c 	.word	0x2000026c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008b44:	bf00      	nop
 8008b46:	bf00      	nop

08008b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
    __asm volatile
 8008b4e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008b52:	b672      	cpsid	i
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	b662      	cpsie	i
 8008b62:	607b      	str	r3, [r7, #4]
}
 8008b64:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008b66:	f7fe f9b1 	bl	8006ecc <xTaskIncrementTick>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d003      	beq.n	8008b78 <SysTick_Handler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b70:	4b06      	ldr	r3, [pc, #24]	@ (8008b8c <SysTick_Handler+0x44>)
 8008b72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	2300      	movs	r3, #0
 8008b7a:	603b      	str	r3, [r7, #0]
    __asm volatile
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	f383 8811 	msr	BASEPRI, r3
}
 8008b82:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8008b84:	bf00      	nop
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	e000ed04 	.word	0xe000ed04

08008b90 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8008b90:	b480      	push	{r7}
 8008b92:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b94:	4b0b      	ldr	r3, [pc, #44]	@ (8008bc4 <vPortSetupTimerInterrupt+0x34>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8008bc8 <vPortSetupTimerInterrupt+0x38>)
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8008bcc <vPortSetupTimerInterrupt+0x3c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8008bd0 <vPortSetupTimerInterrupt+0x40>)
 8008ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8008baa:	099b      	lsrs	r3, r3, #6
 8008bac:	4a09      	ldr	r2, [pc, #36]	@ (8008bd4 <vPortSetupTimerInterrupt+0x44>)
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bb2:	4b04      	ldr	r3, [pc, #16]	@ (8008bc4 <vPortSetupTimerInterrupt+0x34>)
 8008bb4:	2207      	movs	r2, #7
 8008bb6:	601a      	str	r2, [r3, #0]
}
 8008bb8:	bf00      	nop
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop
 8008bc4:	e000e010 	.word	0xe000e010
 8008bc8:	e000e018 	.word	0xe000e018
 8008bcc:	20000010 	.word	0x20000010
 8008bd0:	10624dd3 	.word	0x10624dd3
 8008bd4:	e000e014 	.word	0xe000e014

08008bd8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008bd8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008be8 <vPortEnableVFP+0x10>
 8008bdc:	6801      	ldr	r1, [r0, #0]
 8008bde:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008be2:	6001      	str	r1, [r0, #0]
 8008be4:	4770      	bx	lr
 8008be6:	0000      	.short	0x0000
 8008be8:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8008bec:	bf00      	nop
 8008bee:	bf00      	nop

08008bf0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008bf6:	f3ef 8305 	mrs	r3, IPSR
 8008bfa:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2b0f      	cmp	r3, #15
 8008c00:	d917      	bls.n	8008c32 <vPortValidateInterruptPriority+0x42>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c02:	4a1a      	ldr	r2, [pc, #104]	@ (8008c6c <vPortValidateInterruptPriority+0x7c>)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	4413      	add	r3, r2
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c0c:	4b18      	ldr	r3, [pc, #96]	@ (8008c70 <vPortValidateInterruptPriority+0x80>)
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	7afa      	ldrb	r2, [r7, #11]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d20d      	bcs.n	8008c32 <vPortValidateInterruptPriority+0x42>
    __asm volatile
 8008c16:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008c1a:	b672      	cpsid	i
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	b662      	cpsie	i
 8008c2a:	607b      	str	r3, [r7, #4]
}
 8008c2c:	bf00      	nop
 8008c2e:	bf00      	nop
 8008c30:	e7fd      	b.n	8008c2e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c32:	4b10      	ldr	r3, [pc, #64]	@ (8008c74 <vPortValidateInterruptPriority+0x84>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008c78 <vPortValidateInterruptPriority+0x88>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d90d      	bls.n	8008c5e <vPortValidateInterruptPriority+0x6e>
    __asm volatile
 8008c42:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008c46:	b672      	cpsid	i
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	b662      	cpsie	i
 8008c56:	603b      	str	r3, [r7, #0]
}
 8008c58:	bf00      	nop
 8008c5a:	bf00      	nop
 8008c5c:	e7fd      	b.n	8008c5a <vPortValidateInterruptPriority+0x6a>
    }
 8008c5e:	bf00      	nop
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	e000e3f0 	.word	0xe000e3f0
 8008c70:	200003ac 	.word	0x200003ac
 8008c74:	e000ed0c 	.word	0xe000ed0c
 8008c78:	200003b0 	.word	0x200003b0

08008c7c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b08e      	sub	sp, #56	@ 0x38
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8008c84:	2300      	movs	r3, #0
 8008c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d022      	beq.n	8008cd4 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8008c8e:	2308      	movs	r3, #8
 8008c90:	43db      	mvns	r3, r3
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d81b      	bhi.n	8008cd0 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8008c98:	2208      	movs	r2, #8
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f003 0307 	and.w	r3, r3, #7
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d014      	beq.n	8008cd4 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f003 0307 	and.w	r3, r3, #7
 8008cb0:	f1c3 0308 	rsb	r3, r3, #8
 8008cb4:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8008cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb8:	43db      	mvns	r3, r3
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d804      	bhi.n	8008cca <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc4:	4413      	add	r3, r2
 8008cc6:	607b      	str	r3, [r7, #4]
 8008cc8:	e004      	b.n	8008cd4 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	607b      	str	r3, [r7, #4]
 8008cce:	e001      	b.n	8008cd4 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8008cd4:	f7fd ffc6 	bl	8006c64 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008cd8:	4b80      	ldr	r3, [pc, #512]	@ (8008edc <pvPortMalloc+0x260>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d101      	bne.n	8008ce4 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8008ce0:	f000 f98a 	bl	8008ff8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f2c0 80de 	blt.w	8008ea8 <pvPortMalloc+0x22c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f000 80da 	beq.w	8008ea8 <pvPortMalloc+0x22c>
 8008cf4:	4b7a      	ldr	r3, [pc, #488]	@ (8008ee0 <pvPortMalloc+0x264>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	f200 80d4 	bhi.w	8008ea8 <pvPortMalloc+0x22c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008d00:	4b78      	ldr	r3, [pc, #480]	@ (8008ee4 <pvPortMalloc+0x268>)
 8008d02:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8008d04:	4b77      	ldr	r3, [pc, #476]	@ (8008ee4 <pvPortMalloc+0x268>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8008d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d0c:	4a76      	ldr	r2, [pc, #472]	@ (8008ee8 <pvPortMalloc+0x26c>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d305      	bcc.n	8008d1e <pvPortMalloc+0xa2>
 8008d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d14:	4a75      	ldr	r2, [pc, #468]	@ (8008eec <pvPortMalloc+0x270>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d801      	bhi.n	8008d1e <pvPortMalloc+0xa2>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e000      	b.n	8008d20 <pvPortMalloc+0xa4>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d12d      	bne.n	8008d80 <pvPortMalloc+0x104>
    __asm volatile
 8008d24:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008d28:	b672      	cpsid	i
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	b662      	cpsie	i
 8008d38:	623b      	str	r3, [r7, #32]
}
 8008d3a:	bf00      	nop
 8008d3c:	bf00      	nop
 8008d3e:	e7fd      	b.n	8008d3c <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8008d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d42:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8008d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8008d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d4c:	4a66      	ldr	r2, [pc, #408]	@ (8008ee8 <pvPortMalloc+0x26c>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d305      	bcc.n	8008d5e <pvPortMalloc+0xe2>
 8008d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d54:	4a65      	ldr	r2, [pc, #404]	@ (8008eec <pvPortMalloc+0x270>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d801      	bhi.n	8008d5e <pvPortMalloc+0xe2>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e000      	b.n	8008d60 <pvPortMalloc+0xe4>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10d      	bne.n	8008d80 <pvPortMalloc+0x104>
    __asm volatile
 8008d64:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008d68:	b672      	cpsid	i
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	b662      	cpsie	i
 8008d78:	61fb      	str	r3, [r7, #28]
}
 8008d7a:	bf00      	nop
 8008d7c:	bf00      	nop
 8008d7e:	e7fd      	b.n	8008d7c <pvPortMalloc+0x100>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8008d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d903      	bls.n	8008d92 <pvPortMalloc+0x116>
 8008d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1d6      	bne.n	8008d40 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008d92:	4b52      	ldr	r3, [pc, #328]	@ (8008edc <pvPortMalloc+0x260>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	f000 8085 	beq.w	8008ea8 <pvPortMalloc+0x22c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2208      	movs	r2, #8
 8008da4:	4413      	add	r3, r2
 8008da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8008da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008daa:	4a4f      	ldr	r2, [pc, #316]	@ (8008ee8 <pvPortMalloc+0x26c>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d305      	bcc.n	8008dbc <pvPortMalloc+0x140>
 8008db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db2:	4a4e      	ldr	r2, [pc, #312]	@ (8008eec <pvPortMalloc+0x270>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d801      	bhi.n	8008dbc <pvPortMalloc+0x140>
 8008db8:	2301      	movs	r3, #1
 8008dba:	e000      	b.n	8008dbe <pvPortMalloc+0x142>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10d      	bne.n	8008dde <pvPortMalloc+0x162>
    __asm volatile
 8008dc2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008dc6:	b672      	cpsid	i
 8008dc8:	f383 8811 	msr	BASEPRI, r3
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	b662      	cpsie	i
 8008dd6:	61bb      	str	r3, [r7, #24]
}
 8008dd8:	bf00      	nop
 8008dda:	bf00      	nop
 8008ddc:	e7fd      	b.n	8008dda <pvPortMalloc+0x15e>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de4:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8008de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d90d      	bls.n	8008e0c <pvPortMalloc+0x190>
    __asm volatile
 8008df0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008df4:	b672      	cpsid	i
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	b662      	cpsie	i
 8008e04:	617b      	str	r3, [r7, #20]
}
 8008e06:	bf00      	nop
 8008e08:	bf00      	nop
 8008e0a:	e7fd      	b.n	8008e08 <pvPortMalloc+0x18c>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e0e:	685a      	ldr	r2, [r3, #4]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	1ad2      	subs	r2, r2, r3
 8008e14:	2308      	movs	r3, #8
 8008e16:	005b      	lsls	r3, r3, #1
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d926      	bls.n	8008e6a <pvPortMalloc+0x1ee>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4413      	add	r3, r2
 8008e22:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e26:	f003 0307 	and.w	r3, r3, #7
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00d      	beq.n	8008e4a <pvPortMalloc+0x1ce>
    __asm volatile
 8008e2e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008e32:	b672      	cpsid	i
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	b662      	cpsie	i
 8008e42:	613b      	str	r3, [r7, #16]
}
 8008e44:	bf00      	nop
 8008e46:	bf00      	nop
 8008e48:	e7fd      	b.n	8008e46 <pvPortMalloc+0x1ca>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	1ad2      	subs	r2, r2, r3
 8008e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e54:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e62:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8008e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e68:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8008ee0 <pvPortMalloc+0x264>)
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	4a1a      	ldr	r2, [pc, #104]	@ (8008ee0 <pvPortMalloc+0x264>)
 8008e76:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e78:	4b19      	ldr	r3, [pc, #100]	@ (8008ee0 <pvPortMalloc+0x264>)
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ef0 <pvPortMalloc+0x274>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d203      	bcs.n	8008e8c <pvPortMalloc+0x210>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e84:	4b16      	ldr	r3, [pc, #88]	@ (8008ee0 <pvPortMalloc+0x264>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a19      	ldr	r2, [pc, #100]	@ (8008ef0 <pvPortMalloc+0x274>)
 8008e8a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8008e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e96:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008e9e:	4b15      	ldr	r3, [pc, #84]	@ (8008ef4 <pvPortMalloc+0x278>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	4a13      	ldr	r2, [pc, #76]	@ (8008ef4 <pvPortMalloc+0x278>)
 8008ea6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008ea8:	f7fd feea 	bl	8006c80 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eae:	f003 0307 	and.w	r3, r3, #7
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00d      	beq.n	8008ed2 <pvPortMalloc+0x256>
    __asm volatile
 8008eb6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008eba:	b672      	cpsid	i
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	b662      	cpsie	i
 8008eca:	60fb      	str	r3, [r7, #12]
}
 8008ecc:	bf00      	nop
 8008ece:	bf00      	nop
 8008ed0:	e7fd      	b.n	8008ece <pvPortMalloc+0x252>
    return pvReturn;
 8008ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3738      	adds	r7, #56	@ 0x38
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	2000bbbc 	.word	0x2000bbbc
 8008ee0:	2000bbc0 	.word	0x2000bbc0
 8008ee4:	2000bbb4 	.word	0x2000bbb4
 8008ee8:	200003b4 	.word	0x200003b4
 8008eec:	2000bbb3 	.word	0x2000bbb3
 8008ef0:	2000bbc4 	.word	0x2000bbc4
 8008ef4:	2000bbc8 	.word	0x2000bbc8

08008ef8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b088      	sub	sp, #32
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d06a      	beq.n	8008fe0 <vPortFree+0xe8>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008f0a:	2308      	movs	r3, #8
 8008f0c:	425b      	negs	r3, r3
 8008f0e:	69fa      	ldr	r2, [r7, #28]
 8008f10:	4413      	add	r3, r2
 8008f12:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	4a33      	ldr	r2, [pc, #204]	@ (8008fe8 <vPortFree+0xf0>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d305      	bcc.n	8008f2c <vPortFree+0x34>
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	4a32      	ldr	r2, [pc, #200]	@ (8008fec <vPortFree+0xf4>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d801      	bhi.n	8008f2c <vPortFree+0x34>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e000      	b.n	8008f2e <vPortFree+0x36>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10d      	bne.n	8008f4e <vPortFree+0x56>
    __asm volatile
 8008f32:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008f36:	b672      	cpsid	i
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	b662      	cpsie	i
 8008f46:	617b      	str	r3, [r7, #20]
}
 8008f48:	bf00      	nop
 8008f4a:	bf00      	nop
 8008f4c:	e7fd      	b.n	8008f4a <vPortFree+0x52>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	db0d      	blt.n	8008f72 <vPortFree+0x7a>
    __asm volatile
 8008f56:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008f5a:	b672      	cpsid	i
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	b662      	cpsie	i
 8008f6a:	613b      	str	r3, [r7, #16]
}
 8008f6c:	bf00      	nop
 8008f6e:	bf00      	nop
 8008f70:	e7fd      	b.n	8008f6e <vPortFree+0x76>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00d      	beq.n	8008f96 <vPortFree+0x9e>
    __asm volatile
 8008f7a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008f7e:	b672      	cpsid	i
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	b662      	cpsie	i
 8008f8e:	60fb      	str	r3, [r7, #12]
}
 8008f90:	bf00      	nop
 8008f92:	bf00      	nop
 8008f94:	e7fd      	b.n	8008f92 <vPortFree+0x9a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	0fdb      	lsrs	r3, r3, #31
 8008f9c:	f003 0301 	and.w	r3, r3, #1
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d01c      	beq.n	8008fe0 <vPortFree+0xe8>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d118      	bne.n	8008fe0 <vPortFree+0xe8>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8008fba:	f7fd fe53 	bl	8006c64 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	685a      	ldr	r2, [r3, #4]
 8008fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8008ff0 <vPortFree+0xf8>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	4a09      	ldr	r2, [pc, #36]	@ (8008ff0 <vPortFree+0xf8>)
 8008fca:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fcc:	69b8      	ldr	r0, [r7, #24]
 8008fce:	f000 f86d 	bl	80090ac <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008fd2:	4b08      	ldr	r3, [pc, #32]	@ (8008ff4 <vPortFree+0xfc>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	4a06      	ldr	r2, [pc, #24]	@ (8008ff4 <vPortFree+0xfc>)
 8008fda:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008fdc:	f7fd fe50 	bl	8006c80 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008fe0:	bf00      	nop
 8008fe2:	3720      	adds	r7, #32
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	200003b4 	.word	0x200003b4
 8008fec:	2000bbb3 	.word	0x2000bbb3
 8008ff0:	2000bbc0 	.word	0x2000bbc0
 8008ff4:	2000bbcc 	.word	0x2000bbcc

08008ff8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ffe:	f44f 4338 	mov.w	r3, #47104	@ 0xb800
 8009002:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8009004:	4b24      	ldr	r3, [pc, #144]	@ (8009098 <prvHeapInit+0xa0>)
 8009006:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f003 0307 	and.w	r3, r3, #7
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00c      	beq.n	800902c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	3307      	adds	r3, #7
 8009016:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f023 0307 	bic.w	r3, r3, #7
 800901e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8009020:	68ba      	ldr	r2, [r7, #8]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	4a1c      	ldr	r2, [pc, #112]	@ (8009098 <prvHeapInit+0xa0>)
 8009028:	4413      	add	r3, r2
 800902a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	4a1b      	ldr	r2, [pc, #108]	@ (800909c <prvHeapInit+0xa4>)
 8009030:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8009032:	4b1a      	ldr	r3, [pc, #104]	@ (800909c <prvHeapInit+0xa4>)
 8009034:	2200      	movs	r2, #0
 8009036:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	4413      	add	r3, r2
 800903e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8009040:	2208      	movs	r2, #8
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	1a9b      	subs	r3, r3, r2
 8009046:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f023 0307 	bic.w	r3, r3, #7
 800904e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a13      	ldr	r2, [pc, #76]	@ (80090a0 <prvHeapInit+0xa8>)
 8009054:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8009056:	4b12      	ldr	r3, [pc, #72]	@ (80090a0 <prvHeapInit+0xa8>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2200      	movs	r2, #0
 800905c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800905e:	4b10      	ldr	r3, [pc, #64]	@ (80090a0 <prvHeapInit+0xa8>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2200      	movs	r2, #0
 8009064:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	1ad2      	subs	r2, r2, r3
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8009074:	4b0a      	ldr	r3, [pc, #40]	@ (80090a0 <prvHeapInit+0xa8>)
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	4a08      	ldr	r2, [pc, #32]	@ (80090a4 <prvHeapInit+0xac>)
 8009082:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	4a07      	ldr	r2, [pc, #28]	@ (80090a8 <prvHeapInit+0xb0>)
 800908a:	6013      	str	r3, [r2, #0]
}
 800908c:	bf00      	nop
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr
 8009098:	200003b4 	.word	0x200003b4
 800909c:	2000bbb4 	.word	0x2000bbb4
 80090a0:	2000bbbc 	.word	0x2000bbbc
 80090a4:	2000bbc4 	.word	0x2000bbc4
 80090a8:	2000bbc0 	.word	0x2000bbc0

080090ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80090ac:	b480      	push	{r7}
 80090ae:	b087      	sub	sp, #28
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80090b4:	4b37      	ldr	r3, [pc, #220]	@ (8009194 <prvInsertBlockIntoFreeList+0xe8>)
 80090b6:	617b      	str	r3, [r7, #20]
 80090b8:	e002      	b.n	80090c0 <prvInsertBlockIntoFreeList+0x14>
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	617b      	str	r3, [r7, #20]
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d8f7      	bhi.n	80090ba <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	4a31      	ldr	r2, [pc, #196]	@ (8009194 <prvInsertBlockIntoFreeList+0xe8>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d01a      	beq.n	8009108 <prvInsertBlockIntoFreeList+0x5c>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	4a30      	ldr	r2, [pc, #192]	@ (8009198 <prvInsertBlockIntoFreeList+0xec>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d305      	bcc.n	80090e6 <prvInsertBlockIntoFreeList+0x3a>
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	4a2f      	ldr	r2, [pc, #188]	@ (800919c <prvInsertBlockIntoFreeList+0xf0>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d801      	bhi.n	80090e6 <prvInsertBlockIntoFreeList+0x3a>
 80090e2:	2301      	movs	r3, #1
 80090e4:	e000      	b.n	80090e8 <prvInsertBlockIntoFreeList+0x3c>
 80090e6:	2300      	movs	r3, #0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10d      	bne.n	8009108 <prvInsertBlockIntoFreeList+0x5c>
    __asm volatile
 80090ec:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80090f0:	b672      	cpsid	i
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	b662      	cpsie	i
 8009100:	60fb      	str	r3, [r7, #12]
}
 8009102:	bf00      	nop
 8009104:	bf00      	nop
 8009106:	e7fd      	b.n	8009104 <prvInsertBlockIntoFreeList+0x58>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	4413      	add	r3, r2
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	429a      	cmp	r2, r3
 8009118:	d108      	bne.n	800912c <prvInsertBlockIntoFreeList+0x80>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	441a      	add	r2, r3
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	441a      	add	r2, r3
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	429a      	cmp	r2, r3
 800913e:	d118      	bne.n	8009172 <prvInsertBlockIntoFreeList+0xc6>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	4b16      	ldr	r3, [pc, #88]	@ (80091a0 <prvInsertBlockIntoFreeList+0xf4>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	429a      	cmp	r2, r3
 800914a:	d00d      	beq.n	8009168 <prvInsertBlockIntoFreeList+0xbc>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685a      	ldr	r2, [r3, #4]
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	441a      	add	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	601a      	str	r2, [r3, #0]
 8009166:	e008      	b.n	800917a <prvInsertBlockIntoFreeList+0xce>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8009168:	4b0d      	ldr	r3, [pc, #52]	@ (80091a0 <prvInsertBlockIntoFreeList+0xf4>)
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	601a      	str	r2, [r3, #0]
 8009170:	e003      	b.n	800917a <prvInsertBlockIntoFreeList+0xce>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	429a      	cmp	r2, r3
 8009180:	d002      	beq.n	8009188 <prvInsertBlockIntoFreeList+0xdc>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009188:	bf00      	nop
 800918a:	371c      	adds	r7, #28
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr
 8009194:	2000bbb4 	.word	0x2000bbb4
 8009198:	200003b4 	.word	0x200003b4
 800919c:	2000bbb3 	.word	0x2000bbb3
 80091a0:	2000bbbc 	.word	0x2000bbbc

080091a4 <std>:
 80091a4:	2300      	movs	r3, #0
 80091a6:	b510      	push	{r4, lr}
 80091a8:	4604      	mov	r4, r0
 80091aa:	e9c0 3300 	strd	r3, r3, [r0]
 80091ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091b2:	6083      	str	r3, [r0, #8]
 80091b4:	8181      	strh	r1, [r0, #12]
 80091b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80091b8:	81c2      	strh	r2, [r0, #14]
 80091ba:	6183      	str	r3, [r0, #24]
 80091bc:	4619      	mov	r1, r3
 80091be:	2208      	movs	r2, #8
 80091c0:	305c      	adds	r0, #92	@ 0x5c
 80091c2:	f000 f926 	bl	8009412 <memset>
 80091c6:	4b0d      	ldr	r3, [pc, #52]	@ (80091fc <std+0x58>)
 80091c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80091ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009200 <std+0x5c>)
 80091cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80091ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009204 <std+0x60>)
 80091d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80091d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009208 <std+0x64>)
 80091d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80091d6:	4b0d      	ldr	r3, [pc, #52]	@ (800920c <std+0x68>)
 80091d8:	6224      	str	r4, [r4, #32]
 80091da:	429c      	cmp	r4, r3
 80091dc:	d006      	beq.n	80091ec <std+0x48>
 80091de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80091e2:	4294      	cmp	r4, r2
 80091e4:	d002      	beq.n	80091ec <std+0x48>
 80091e6:	33d0      	adds	r3, #208	@ 0xd0
 80091e8:	429c      	cmp	r4, r3
 80091ea:	d105      	bne.n	80091f8 <std+0x54>
 80091ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80091f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091f4:	f000 b986 	b.w	8009504 <__retarget_lock_init_recursive>
 80091f8:	bd10      	pop	{r4, pc}
 80091fa:	bf00      	nop
 80091fc:	0800938d 	.word	0x0800938d
 8009200:	080093af 	.word	0x080093af
 8009204:	080093e7 	.word	0x080093e7
 8009208:	0800940b 	.word	0x0800940b
 800920c:	2000bbd0 	.word	0x2000bbd0

08009210 <stdio_exit_handler>:
 8009210:	4a02      	ldr	r2, [pc, #8]	@ (800921c <stdio_exit_handler+0xc>)
 8009212:	4903      	ldr	r1, [pc, #12]	@ (8009220 <stdio_exit_handler+0x10>)
 8009214:	4803      	ldr	r0, [pc, #12]	@ (8009224 <stdio_exit_handler+0x14>)
 8009216:	f000 b869 	b.w	80092ec <_fwalk_sglue>
 800921a:	bf00      	nop
 800921c:	20000028 	.word	0x20000028
 8009220:	0800a071 	.word	0x0800a071
 8009224:	20000038 	.word	0x20000038

08009228 <cleanup_stdio>:
 8009228:	6841      	ldr	r1, [r0, #4]
 800922a:	4b0c      	ldr	r3, [pc, #48]	@ (800925c <cleanup_stdio+0x34>)
 800922c:	4299      	cmp	r1, r3
 800922e:	b510      	push	{r4, lr}
 8009230:	4604      	mov	r4, r0
 8009232:	d001      	beq.n	8009238 <cleanup_stdio+0x10>
 8009234:	f000 ff1c 	bl	800a070 <_fflush_r>
 8009238:	68a1      	ldr	r1, [r4, #8]
 800923a:	4b09      	ldr	r3, [pc, #36]	@ (8009260 <cleanup_stdio+0x38>)
 800923c:	4299      	cmp	r1, r3
 800923e:	d002      	beq.n	8009246 <cleanup_stdio+0x1e>
 8009240:	4620      	mov	r0, r4
 8009242:	f000 ff15 	bl	800a070 <_fflush_r>
 8009246:	68e1      	ldr	r1, [r4, #12]
 8009248:	4b06      	ldr	r3, [pc, #24]	@ (8009264 <cleanup_stdio+0x3c>)
 800924a:	4299      	cmp	r1, r3
 800924c:	d004      	beq.n	8009258 <cleanup_stdio+0x30>
 800924e:	4620      	mov	r0, r4
 8009250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009254:	f000 bf0c 	b.w	800a070 <_fflush_r>
 8009258:	bd10      	pop	{r4, pc}
 800925a:	bf00      	nop
 800925c:	2000bbd0 	.word	0x2000bbd0
 8009260:	2000bc38 	.word	0x2000bc38
 8009264:	2000bca0 	.word	0x2000bca0

08009268 <global_stdio_init.part.0>:
 8009268:	b510      	push	{r4, lr}
 800926a:	4b0b      	ldr	r3, [pc, #44]	@ (8009298 <global_stdio_init.part.0+0x30>)
 800926c:	4c0b      	ldr	r4, [pc, #44]	@ (800929c <global_stdio_init.part.0+0x34>)
 800926e:	4a0c      	ldr	r2, [pc, #48]	@ (80092a0 <global_stdio_init.part.0+0x38>)
 8009270:	601a      	str	r2, [r3, #0]
 8009272:	4620      	mov	r0, r4
 8009274:	2200      	movs	r2, #0
 8009276:	2104      	movs	r1, #4
 8009278:	f7ff ff94 	bl	80091a4 <std>
 800927c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009280:	2201      	movs	r2, #1
 8009282:	2109      	movs	r1, #9
 8009284:	f7ff ff8e 	bl	80091a4 <std>
 8009288:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800928c:	2202      	movs	r2, #2
 800928e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009292:	2112      	movs	r1, #18
 8009294:	f7ff bf86 	b.w	80091a4 <std>
 8009298:	2000bd08 	.word	0x2000bd08
 800929c:	2000bbd0 	.word	0x2000bbd0
 80092a0:	08009211 	.word	0x08009211

080092a4 <__sfp_lock_acquire>:
 80092a4:	4801      	ldr	r0, [pc, #4]	@ (80092ac <__sfp_lock_acquire+0x8>)
 80092a6:	f000 b92e 	b.w	8009506 <__retarget_lock_acquire_recursive>
 80092aa:	bf00      	nop
 80092ac:	2000bd11 	.word	0x2000bd11

080092b0 <__sfp_lock_release>:
 80092b0:	4801      	ldr	r0, [pc, #4]	@ (80092b8 <__sfp_lock_release+0x8>)
 80092b2:	f000 b929 	b.w	8009508 <__retarget_lock_release_recursive>
 80092b6:	bf00      	nop
 80092b8:	2000bd11 	.word	0x2000bd11

080092bc <__sinit>:
 80092bc:	b510      	push	{r4, lr}
 80092be:	4604      	mov	r4, r0
 80092c0:	f7ff fff0 	bl	80092a4 <__sfp_lock_acquire>
 80092c4:	6a23      	ldr	r3, [r4, #32]
 80092c6:	b11b      	cbz	r3, 80092d0 <__sinit+0x14>
 80092c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092cc:	f7ff bff0 	b.w	80092b0 <__sfp_lock_release>
 80092d0:	4b04      	ldr	r3, [pc, #16]	@ (80092e4 <__sinit+0x28>)
 80092d2:	6223      	str	r3, [r4, #32]
 80092d4:	4b04      	ldr	r3, [pc, #16]	@ (80092e8 <__sinit+0x2c>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1f5      	bne.n	80092c8 <__sinit+0xc>
 80092dc:	f7ff ffc4 	bl	8009268 <global_stdio_init.part.0>
 80092e0:	e7f2      	b.n	80092c8 <__sinit+0xc>
 80092e2:	bf00      	nop
 80092e4:	08009229 	.word	0x08009229
 80092e8:	2000bd08 	.word	0x2000bd08

080092ec <_fwalk_sglue>:
 80092ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f0:	4607      	mov	r7, r0
 80092f2:	4688      	mov	r8, r1
 80092f4:	4614      	mov	r4, r2
 80092f6:	2600      	movs	r6, #0
 80092f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092fc:	f1b9 0901 	subs.w	r9, r9, #1
 8009300:	d505      	bpl.n	800930e <_fwalk_sglue+0x22>
 8009302:	6824      	ldr	r4, [r4, #0]
 8009304:	2c00      	cmp	r4, #0
 8009306:	d1f7      	bne.n	80092f8 <_fwalk_sglue+0xc>
 8009308:	4630      	mov	r0, r6
 800930a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800930e:	89ab      	ldrh	r3, [r5, #12]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d907      	bls.n	8009324 <_fwalk_sglue+0x38>
 8009314:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009318:	3301      	adds	r3, #1
 800931a:	d003      	beq.n	8009324 <_fwalk_sglue+0x38>
 800931c:	4629      	mov	r1, r5
 800931e:	4638      	mov	r0, r7
 8009320:	47c0      	blx	r8
 8009322:	4306      	orrs	r6, r0
 8009324:	3568      	adds	r5, #104	@ 0x68
 8009326:	e7e9      	b.n	80092fc <_fwalk_sglue+0x10>

08009328 <iprintf>:
 8009328:	b40f      	push	{r0, r1, r2, r3}
 800932a:	b507      	push	{r0, r1, r2, lr}
 800932c:	4906      	ldr	r1, [pc, #24]	@ (8009348 <iprintf+0x20>)
 800932e:	ab04      	add	r3, sp, #16
 8009330:	6808      	ldr	r0, [r1, #0]
 8009332:	f853 2b04 	ldr.w	r2, [r3], #4
 8009336:	6881      	ldr	r1, [r0, #8]
 8009338:	9301      	str	r3, [sp, #4]
 800933a:	f000 fb6f 	bl	8009a1c <_vfiprintf_r>
 800933e:	b003      	add	sp, #12
 8009340:	f85d eb04 	ldr.w	lr, [sp], #4
 8009344:	b004      	add	sp, #16
 8009346:	4770      	bx	lr
 8009348:	20000034 	.word	0x20000034

0800934c <siprintf>:
 800934c:	b40e      	push	{r1, r2, r3}
 800934e:	b500      	push	{lr}
 8009350:	b09c      	sub	sp, #112	@ 0x70
 8009352:	ab1d      	add	r3, sp, #116	@ 0x74
 8009354:	9002      	str	r0, [sp, #8]
 8009356:	9006      	str	r0, [sp, #24]
 8009358:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800935c:	4809      	ldr	r0, [pc, #36]	@ (8009384 <siprintf+0x38>)
 800935e:	9107      	str	r1, [sp, #28]
 8009360:	9104      	str	r1, [sp, #16]
 8009362:	4909      	ldr	r1, [pc, #36]	@ (8009388 <siprintf+0x3c>)
 8009364:	f853 2b04 	ldr.w	r2, [r3], #4
 8009368:	9105      	str	r1, [sp, #20]
 800936a:	6800      	ldr	r0, [r0, #0]
 800936c:	9301      	str	r3, [sp, #4]
 800936e:	a902      	add	r1, sp, #8
 8009370:	f000 fa2e 	bl	80097d0 <_svfiprintf_r>
 8009374:	9b02      	ldr	r3, [sp, #8]
 8009376:	2200      	movs	r2, #0
 8009378:	701a      	strb	r2, [r3, #0]
 800937a:	b01c      	add	sp, #112	@ 0x70
 800937c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009380:	b003      	add	sp, #12
 8009382:	4770      	bx	lr
 8009384:	20000034 	.word	0x20000034
 8009388:	ffff0208 	.word	0xffff0208

0800938c <__sread>:
 800938c:	b510      	push	{r4, lr}
 800938e:	460c      	mov	r4, r1
 8009390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009394:	f000 f868 	bl	8009468 <_read_r>
 8009398:	2800      	cmp	r0, #0
 800939a:	bfab      	itete	ge
 800939c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800939e:	89a3      	ldrhlt	r3, [r4, #12]
 80093a0:	181b      	addge	r3, r3, r0
 80093a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80093a6:	bfac      	ite	ge
 80093a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80093aa:	81a3      	strhlt	r3, [r4, #12]
 80093ac:	bd10      	pop	{r4, pc}

080093ae <__swrite>:
 80093ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093b2:	461f      	mov	r7, r3
 80093b4:	898b      	ldrh	r3, [r1, #12]
 80093b6:	05db      	lsls	r3, r3, #23
 80093b8:	4605      	mov	r5, r0
 80093ba:	460c      	mov	r4, r1
 80093bc:	4616      	mov	r6, r2
 80093be:	d505      	bpl.n	80093cc <__swrite+0x1e>
 80093c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c4:	2302      	movs	r3, #2
 80093c6:	2200      	movs	r2, #0
 80093c8:	f000 f83c 	bl	8009444 <_lseek_r>
 80093cc:	89a3      	ldrh	r3, [r4, #12]
 80093ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093d6:	81a3      	strh	r3, [r4, #12]
 80093d8:	4632      	mov	r2, r6
 80093da:	463b      	mov	r3, r7
 80093dc:	4628      	mov	r0, r5
 80093de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093e2:	f000 b853 	b.w	800948c <_write_r>

080093e6 <__sseek>:
 80093e6:	b510      	push	{r4, lr}
 80093e8:	460c      	mov	r4, r1
 80093ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ee:	f000 f829 	bl	8009444 <_lseek_r>
 80093f2:	1c43      	adds	r3, r0, #1
 80093f4:	89a3      	ldrh	r3, [r4, #12]
 80093f6:	bf15      	itete	ne
 80093f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80093fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80093fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009402:	81a3      	strheq	r3, [r4, #12]
 8009404:	bf18      	it	ne
 8009406:	81a3      	strhne	r3, [r4, #12]
 8009408:	bd10      	pop	{r4, pc}

0800940a <__sclose>:
 800940a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800940e:	f000 b809 	b.w	8009424 <_close_r>

08009412 <memset>:
 8009412:	4402      	add	r2, r0
 8009414:	4603      	mov	r3, r0
 8009416:	4293      	cmp	r3, r2
 8009418:	d100      	bne.n	800941c <memset+0xa>
 800941a:	4770      	bx	lr
 800941c:	f803 1b01 	strb.w	r1, [r3], #1
 8009420:	e7f9      	b.n	8009416 <memset+0x4>
	...

08009424 <_close_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	4d06      	ldr	r5, [pc, #24]	@ (8009440 <_close_r+0x1c>)
 8009428:	2300      	movs	r3, #0
 800942a:	4604      	mov	r4, r0
 800942c:	4608      	mov	r0, r1
 800942e:	602b      	str	r3, [r5, #0]
 8009430:	f7f7 ffdf 	bl	80013f2 <_close>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d102      	bne.n	800943e <_close_r+0x1a>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	b103      	cbz	r3, 800943e <_close_r+0x1a>
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	2000bd0c 	.word	0x2000bd0c

08009444 <_lseek_r>:
 8009444:	b538      	push	{r3, r4, r5, lr}
 8009446:	4d07      	ldr	r5, [pc, #28]	@ (8009464 <_lseek_r+0x20>)
 8009448:	4604      	mov	r4, r0
 800944a:	4608      	mov	r0, r1
 800944c:	4611      	mov	r1, r2
 800944e:	2200      	movs	r2, #0
 8009450:	602a      	str	r2, [r5, #0]
 8009452:	461a      	mov	r2, r3
 8009454:	f7f7 fff4 	bl	8001440 <_lseek>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d102      	bne.n	8009462 <_lseek_r+0x1e>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	b103      	cbz	r3, 8009462 <_lseek_r+0x1e>
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	2000bd0c 	.word	0x2000bd0c

08009468 <_read_r>:
 8009468:	b538      	push	{r3, r4, r5, lr}
 800946a:	4d07      	ldr	r5, [pc, #28]	@ (8009488 <_read_r+0x20>)
 800946c:	4604      	mov	r4, r0
 800946e:	4608      	mov	r0, r1
 8009470:	4611      	mov	r1, r2
 8009472:	2200      	movs	r2, #0
 8009474:	602a      	str	r2, [r5, #0]
 8009476:	461a      	mov	r2, r3
 8009478:	f7f7 ff82 	bl	8001380 <_read>
 800947c:	1c43      	adds	r3, r0, #1
 800947e:	d102      	bne.n	8009486 <_read_r+0x1e>
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	b103      	cbz	r3, 8009486 <_read_r+0x1e>
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	bd38      	pop	{r3, r4, r5, pc}
 8009488:	2000bd0c 	.word	0x2000bd0c

0800948c <_write_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4d07      	ldr	r5, [pc, #28]	@ (80094ac <_write_r+0x20>)
 8009490:	4604      	mov	r4, r0
 8009492:	4608      	mov	r0, r1
 8009494:	4611      	mov	r1, r2
 8009496:	2200      	movs	r2, #0
 8009498:	602a      	str	r2, [r5, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	f7f7 ff8d 	bl	80013ba <_write>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	d102      	bne.n	80094aa <_write_r+0x1e>
 80094a4:	682b      	ldr	r3, [r5, #0]
 80094a6:	b103      	cbz	r3, 80094aa <_write_r+0x1e>
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	bd38      	pop	{r3, r4, r5, pc}
 80094ac:	2000bd0c 	.word	0x2000bd0c

080094b0 <__errno>:
 80094b0:	4b01      	ldr	r3, [pc, #4]	@ (80094b8 <__errno+0x8>)
 80094b2:	6818      	ldr	r0, [r3, #0]
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	20000034 	.word	0x20000034

080094bc <__libc_init_array>:
 80094bc:	b570      	push	{r4, r5, r6, lr}
 80094be:	4d0d      	ldr	r5, [pc, #52]	@ (80094f4 <__libc_init_array+0x38>)
 80094c0:	4c0d      	ldr	r4, [pc, #52]	@ (80094f8 <__libc_init_array+0x3c>)
 80094c2:	1b64      	subs	r4, r4, r5
 80094c4:	10a4      	asrs	r4, r4, #2
 80094c6:	2600      	movs	r6, #0
 80094c8:	42a6      	cmp	r6, r4
 80094ca:	d109      	bne.n	80094e0 <__libc_init_array+0x24>
 80094cc:	4d0b      	ldr	r5, [pc, #44]	@ (80094fc <__libc_init_array+0x40>)
 80094ce:	4c0c      	ldr	r4, [pc, #48]	@ (8009500 <__libc_init_array+0x44>)
 80094d0:	f000 ff6e 	bl	800a3b0 <_init>
 80094d4:	1b64      	subs	r4, r4, r5
 80094d6:	10a4      	asrs	r4, r4, #2
 80094d8:	2600      	movs	r6, #0
 80094da:	42a6      	cmp	r6, r4
 80094dc:	d105      	bne.n	80094ea <__libc_init_array+0x2e>
 80094de:	bd70      	pop	{r4, r5, r6, pc}
 80094e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e4:	4798      	blx	r3
 80094e6:	3601      	adds	r6, #1
 80094e8:	e7ee      	b.n	80094c8 <__libc_init_array+0xc>
 80094ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ee:	4798      	blx	r3
 80094f0:	3601      	adds	r6, #1
 80094f2:	e7f2      	b.n	80094da <__libc_init_array+0x1e>
 80094f4:	0800a820 	.word	0x0800a820
 80094f8:	0800a820 	.word	0x0800a820
 80094fc:	0800a820 	.word	0x0800a820
 8009500:	0800a824 	.word	0x0800a824

08009504 <__retarget_lock_init_recursive>:
 8009504:	4770      	bx	lr

08009506 <__retarget_lock_acquire_recursive>:
 8009506:	4770      	bx	lr

08009508 <__retarget_lock_release_recursive>:
 8009508:	4770      	bx	lr

0800950a <memcpy>:
 800950a:	440a      	add	r2, r1
 800950c:	4291      	cmp	r1, r2
 800950e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009512:	d100      	bne.n	8009516 <memcpy+0xc>
 8009514:	4770      	bx	lr
 8009516:	b510      	push	{r4, lr}
 8009518:	f811 4b01 	ldrb.w	r4, [r1], #1
 800951c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009520:	4291      	cmp	r1, r2
 8009522:	d1f9      	bne.n	8009518 <memcpy+0xe>
 8009524:	bd10      	pop	{r4, pc}
	...

08009528 <_free_r>:
 8009528:	b538      	push	{r3, r4, r5, lr}
 800952a:	4605      	mov	r5, r0
 800952c:	2900      	cmp	r1, #0
 800952e:	d041      	beq.n	80095b4 <_free_r+0x8c>
 8009530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009534:	1f0c      	subs	r4, r1, #4
 8009536:	2b00      	cmp	r3, #0
 8009538:	bfb8      	it	lt
 800953a:	18e4      	addlt	r4, r4, r3
 800953c:	f000 f8e0 	bl	8009700 <__malloc_lock>
 8009540:	4a1d      	ldr	r2, [pc, #116]	@ (80095b8 <_free_r+0x90>)
 8009542:	6813      	ldr	r3, [r2, #0]
 8009544:	b933      	cbnz	r3, 8009554 <_free_r+0x2c>
 8009546:	6063      	str	r3, [r4, #4]
 8009548:	6014      	str	r4, [r2, #0]
 800954a:	4628      	mov	r0, r5
 800954c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009550:	f000 b8dc 	b.w	800970c <__malloc_unlock>
 8009554:	42a3      	cmp	r3, r4
 8009556:	d908      	bls.n	800956a <_free_r+0x42>
 8009558:	6820      	ldr	r0, [r4, #0]
 800955a:	1821      	adds	r1, r4, r0
 800955c:	428b      	cmp	r3, r1
 800955e:	bf01      	itttt	eq
 8009560:	6819      	ldreq	r1, [r3, #0]
 8009562:	685b      	ldreq	r3, [r3, #4]
 8009564:	1809      	addeq	r1, r1, r0
 8009566:	6021      	streq	r1, [r4, #0]
 8009568:	e7ed      	b.n	8009546 <_free_r+0x1e>
 800956a:	461a      	mov	r2, r3
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	b10b      	cbz	r3, 8009574 <_free_r+0x4c>
 8009570:	42a3      	cmp	r3, r4
 8009572:	d9fa      	bls.n	800956a <_free_r+0x42>
 8009574:	6811      	ldr	r1, [r2, #0]
 8009576:	1850      	adds	r0, r2, r1
 8009578:	42a0      	cmp	r0, r4
 800957a:	d10b      	bne.n	8009594 <_free_r+0x6c>
 800957c:	6820      	ldr	r0, [r4, #0]
 800957e:	4401      	add	r1, r0
 8009580:	1850      	adds	r0, r2, r1
 8009582:	4283      	cmp	r3, r0
 8009584:	6011      	str	r1, [r2, #0]
 8009586:	d1e0      	bne.n	800954a <_free_r+0x22>
 8009588:	6818      	ldr	r0, [r3, #0]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	6053      	str	r3, [r2, #4]
 800958e:	4408      	add	r0, r1
 8009590:	6010      	str	r0, [r2, #0]
 8009592:	e7da      	b.n	800954a <_free_r+0x22>
 8009594:	d902      	bls.n	800959c <_free_r+0x74>
 8009596:	230c      	movs	r3, #12
 8009598:	602b      	str	r3, [r5, #0]
 800959a:	e7d6      	b.n	800954a <_free_r+0x22>
 800959c:	6820      	ldr	r0, [r4, #0]
 800959e:	1821      	adds	r1, r4, r0
 80095a0:	428b      	cmp	r3, r1
 80095a2:	bf04      	itt	eq
 80095a4:	6819      	ldreq	r1, [r3, #0]
 80095a6:	685b      	ldreq	r3, [r3, #4]
 80095a8:	6063      	str	r3, [r4, #4]
 80095aa:	bf04      	itt	eq
 80095ac:	1809      	addeq	r1, r1, r0
 80095ae:	6021      	streq	r1, [r4, #0]
 80095b0:	6054      	str	r4, [r2, #4]
 80095b2:	e7ca      	b.n	800954a <_free_r+0x22>
 80095b4:	bd38      	pop	{r3, r4, r5, pc}
 80095b6:	bf00      	nop
 80095b8:	2000bd18 	.word	0x2000bd18

080095bc <sbrk_aligned>:
 80095bc:	b570      	push	{r4, r5, r6, lr}
 80095be:	4e0f      	ldr	r6, [pc, #60]	@ (80095fc <sbrk_aligned+0x40>)
 80095c0:	460c      	mov	r4, r1
 80095c2:	6831      	ldr	r1, [r6, #0]
 80095c4:	4605      	mov	r5, r0
 80095c6:	b911      	cbnz	r1, 80095ce <sbrk_aligned+0x12>
 80095c8:	f000 fe28 	bl	800a21c <_sbrk_r>
 80095cc:	6030      	str	r0, [r6, #0]
 80095ce:	4621      	mov	r1, r4
 80095d0:	4628      	mov	r0, r5
 80095d2:	f000 fe23 	bl	800a21c <_sbrk_r>
 80095d6:	1c43      	adds	r3, r0, #1
 80095d8:	d103      	bne.n	80095e2 <sbrk_aligned+0x26>
 80095da:	f04f 34ff 	mov.w	r4, #4294967295
 80095de:	4620      	mov	r0, r4
 80095e0:	bd70      	pop	{r4, r5, r6, pc}
 80095e2:	1cc4      	adds	r4, r0, #3
 80095e4:	f024 0403 	bic.w	r4, r4, #3
 80095e8:	42a0      	cmp	r0, r4
 80095ea:	d0f8      	beq.n	80095de <sbrk_aligned+0x22>
 80095ec:	1a21      	subs	r1, r4, r0
 80095ee:	4628      	mov	r0, r5
 80095f0:	f000 fe14 	bl	800a21c <_sbrk_r>
 80095f4:	3001      	adds	r0, #1
 80095f6:	d1f2      	bne.n	80095de <sbrk_aligned+0x22>
 80095f8:	e7ef      	b.n	80095da <sbrk_aligned+0x1e>
 80095fa:	bf00      	nop
 80095fc:	2000bd14 	.word	0x2000bd14

08009600 <_malloc_r>:
 8009600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009604:	1ccd      	adds	r5, r1, #3
 8009606:	f025 0503 	bic.w	r5, r5, #3
 800960a:	3508      	adds	r5, #8
 800960c:	2d0c      	cmp	r5, #12
 800960e:	bf38      	it	cc
 8009610:	250c      	movcc	r5, #12
 8009612:	2d00      	cmp	r5, #0
 8009614:	4606      	mov	r6, r0
 8009616:	db01      	blt.n	800961c <_malloc_r+0x1c>
 8009618:	42a9      	cmp	r1, r5
 800961a:	d904      	bls.n	8009626 <_malloc_r+0x26>
 800961c:	230c      	movs	r3, #12
 800961e:	6033      	str	r3, [r6, #0]
 8009620:	2000      	movs	r0, #0
 8009622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009626:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096fc <_malloc_r+0xfc>
 800962a:	f000 f869 	bl	8009700 <__malloc_lock>
 800962e:	f8d8 3000 	ldr.w	r3, [r8]
 8009632:	461c      	mov	r4, r3
 8009634:	bb44      	cbnz	r4, 8009688 <_malloc_r+0x88>
 8009636:	4629      	mov	r1, r5
 8009638:	4630      	mov	r0, r6
 800963a:	f7ff ffbf 	bl	80095bc <sbrk_aligned>
 800963e:	1c43      	adds	r3, r0, #1
 8009640:	4604      	mov	r4, r0
 8009642:	d158      	bne.n	80096f6 <_malloc_r+0xf6>
 8009644:	f8d8 4000 	ldr.w	r4, [r8]
 8009648:	4627      	mov	r7, r4
 800964a:	2f00      	cmp	r7, #0
 800964c:	d143      	bne.n	80096d6 <_malloc_r+0xd6>
 800964e:	2c00      	cmp	r4, #0
 8009650:	d04b      	beq.n	80096ea <_malloc_r+0xea>
 8009652:	6823      	ldr	r3, [r4, #0]
 8009654:	4639      	mov	r1, r7
 8009656:	4630      	mov	r0, r6
 8009658:	eb04 0903 	add.w	r9, r4, r3
 800965c:	f000 fdde 	bl	800a21c <_sbrk_r>
 8009660:	4581      	cmp	r9, r0
 8009662:	d142      	bne.n	80096ea <_malloc_r+0xea>
 8009664:	6821      	ldr	r1, [r4, #0]
 8009666:	1a6d      	subs	r5, r5, r1
 8009668:	4629      	mov	r1, r5
 800966a:	4630      	mov	r0, r6
 800966c:	f7ff ffa6 	bl	80095bc <sbrk_aligned>
 8009670:	3001      	adds	r0, #1
 8009672:	d03a      	beq.n	80096ea <_malloc_r+0xea>
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	442b      	add	r3, r5
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	f8d8 3000 	ldr.w	r3, [r8]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	bb62      	cbnz	r2, 80096dc <_malloc_r+0xdc>
 8009682:	f8c8 7000 	str.w	r7, [r8]
 8009686:	e00f      	b.n	80096a8 <_malloc_r+0xa8>
 8009688:	6822      	ldr	r2, [r4, #0]
 800968a:	1b52      	subs	r2, r2, r5
 800968c:	d420      	bmi.n	80096d0 <_malloc_r+0xd0>
 800968e:	2a0b      	cmp	r2, #11
 8009690:	d917      	bls.n	80096c2 <_malloc_r+0xc2>
 8009692:	1961      	adds	r1, r4, r5
 8009694:	42a3      	cmp	r3, r4
 8009696:	6025      	str	r5, [r4, #0]
 8009698:	bf18      	it	ne
 800969a:	6059      	strne	r1, [r3, #4]
 800969c:	6863      	ldr	r3, [r4, #4]
 800969e:	bf08      	it	eq
 80096a0:	f8c8 1000 	streq.w	r1, [r8]
 80096a4:	5162      	str	r2, [r4, r5]
 80096a6:	604b      	str	r3, [r1, #4]
 80096a8:	4630      	mov	r0, r6
 80096aa:	f000 f82f 	bl	800970c <__malloc_unlock>
 80096ae:	f104 000b 	add.w	r0, r4, #11
 80096b2:	1d23      	adds	r3, r4, #4
 80096b4:	f020 0007 	bic.w	r0, r0, #7
 80096b8:	1ac2      	subs	r2, r0, r3
 80096ba:	bf1c      	itt	ne
 80096bc:	1a1b      	subne	r3, r3, r0
 80096be:	50a3      	strne	r3, [r4, r2]
 80096c0:	e7af      	b.n	8009622 <_malloc_r+0x22>
 80096c2:	6862      	ldr	r2, [r4, #4]
 80096c4:	42a3      	cmp	r3, r4
 80096c6:	bf0c      	ite	eq
 80096c8:	f8c8 2000 	streq.w	r2, [r8]
 80096cc:	605a      	strne	r2, [r3, #4]
 80096ce:	e7eb      	b.n	80096a8 <_malloc_r+0xa8>
 80096d0:	4623      	mov	r3, r4
 80096d2:	6864      	ldr	r4, [r4, #4]
 80096d4:	e7ae      	b.n	8009634 <_malloc_r+0x34>
 80096d6:	463c      	mov	r4, r7
 80096d8:	687f      	ldr	r7, [r7, #4]
 80096da:	e7b6      	b.n	800964a <_malloc_r+0x4a>
 80096dc:	461a      	mov	r2, r3
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	42a3      	cmp	r3, r4
 80096e2:	d1fb      	bne.n	80096dc <_malloc_r+0xdc>
 80096e4:	2300      	movs	r3, #0
 80096e6:	6053      	str	r3, [r2, #4]
 80096e8:	e7de      	b.n	80096a8 <_malloc_r+0xa8>
 80096ea:	230c      	movs	r3, #12
 80096ec:	6033      	str	r3, [r6, #0]
 80096ee:	4630      	mov	r0, r6
 80096f0:	f000 f80c 	bl	800970c <__malloc_unlock>
 80096f4:	e794      	b.n	8009620 <_malloc_r+0x20>
 80096f6:	6005      	str	r5, [r0, #0]
 80096f8:	e7d6      	b.n	80096a8 <_malloc_r+0xa8>
 80096fa:	bf00      	nop
 80096fc:	2000bd18 	.word	0x2000bd18

08009700 <__malloc_lock>:
 8009700:	4801      	ldr	r0, [pc, #4]	@ (8009708 <__malloc_lock+0x8>)
 8009702:	f7ff bf00 	b.w	8009506 <__retarget_lock_acquire_recursive>
 8009706:	bf00      	nop
 8009708:	2000bd10 	.word	0x2000bd10

0800970c <__malloc_unlock>:
 800970c:	4801      	ldr	r0, [pc, #4]	@ (8009714 <__malloc_unlock+0x8>)
 800970e:	f7ff befb 	b.w	8009508 <__retarget_lock_release_recursive>
 8009712:	bf00      	nop
 8009714:	2000bd10 	.word	0x2000bd10

08009718 <__ssputs_r>:
 8009718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800971c:	688e      	ldr	r6, [r1, #8]
 800971e:	461f      	mov	r7, r3
 8009720:	42be      	cmp	r6, r7
 8009722:	680b      	ldr	r3, [r1, #0]
 8009724:	4682      	mov	sl, r0
 8009726:	460c      	mov	r4, r1
 8009728:	4690      	mov	r8, r2
 800972a:	d82d      	bhi.n	8009788 <__ssputs_r+0x70>
 800972c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009730:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009734:	d026      	beq.n	8009784 <__ssputs_r+0x6c>
 8009736:	6965      	ldr	r5, [r4, #20]
 8009738:	6909      	ldr	r1, [r1, #16]
 800973a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800973e:	eba3 0901 	sub.w	r9, r3, r1
 8009742:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009746:	1c7b      	adds	r3, r7, #1
 8009748:	444b      	add	r3, r9
 800974a:	106d      	asrs	r5, r5, #1
 800974c:	429d      	cmp	r5, r3
 800974e:	bf38      	it	cc
 8009750:	461d      	movcc	r5, r3
 8009752:	0553      	lsls	r3, r2, #21
 8009754:	d527      	bpl.n	80097a6 <__ssputs_r+0x8e>
 8009756:	4629      	mov	r1, r5
 8009758:	f7ff ff52 	bl	8009600 <_malloc_r>
 800975c:	4606      	mov	r6, r0
 800975e:	b360      	cbz	r0, 80097ba <__ssputs_r+0xa2>
 8009760:	6921      	ldr	r1, [r4, #16]
 8009762:	464a      	mov	r2, r9
 8009764:	f7ff fed1 	bl	800950a <memcpy>
 8009768:	89a3      	ldrh	r3, [r4, #12]
 800976a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800976e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009772:	81a3      	strh	r3, [r4, #12]
 8009774:	6126      	str	r6, [r4, #16]
 8009776:	6165      	str	r5, [r4, #20]
 8009778:	444e      	add	r6, r9
 800977a:	eba5 0509 	sub.w	r5, r5, r9
 800977e:	6026      	str	r6, [r4, #0]
 8009780:	60a5      	str	r5, [r4, #8]
 8009782:	463e      	mov	r6, r7
 8009784:	42be      	cmp	r6, r7
 8009786:	d900      	bls.n	800978a <__ssputs_r+0x72>
 8009788:	463e      	mov	r6, r7
 800978a:	6820      	ldr	r0, [r4, #0]
 800978c:	4632      	mov	r2, r6
 800978e:	4641      	mov	r1, r8
 8009790:	f000 fd2a 	bl	800a1e8 <memmove>
 8009794:	68a3      	ldr	r3, [r4, #8]
 8009796:	1b9b      	subs	r3, r3, r6
 8009798:	60a3      	str	r3, [r4, #8]
 800979a:	6823      	ldr	r3, [r4, #0]
 800979c:	4433      	add	r3, r6
 800979e:	6023      	str	r3, [r4, #0]
 80097a0:	2000      	movs	r0, #0
 80097a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a6:	462a      	mov	r2, r5
 80097a8:	f000 fd48 	bl	800a23c <_realloc_r>
 80097ac:	4606      	mov	r6, r0
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d1e0      	bne.n	8009774 <__ssputs_r+0x5c>
 80097b2:	6921      	ldr	r1, [r4, #16]
 80097b4:	4650      	mov	r0, sl
 80097b6:	f7ff feb7 	bl	8009528 <_free_r>
 80097ba:	230c      	movs	r3, #12
 80097bc:	f8ca 3000 	str.w	r3, [sl]
 80097c0:	89a3      	ldrh	r3, [r4, #12]
 80097c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097c6:	81a3      	strh	r3, [r4, #12]
 80097c8:	f04f 30ff 	mov.w	r0, #4294967295
 80097cc:	e7e9      	b.n	80097a2 <__ssputs_r+0x8a>
	...

080097d0 <_svfiprintf_r>:
 80097d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d4:	4698      	mov	r8, r3
 80097d6:	898b      	ldrh	r3, [r1, #12]
 80097d8:	061b      	lsls	r3, r3, #24
 80097da:	b09d      	sub	sp, #116	@ 0x74
 80097dc:	4607      	mov	r7, r0
 80097de:	460d      	mov	r5, r1
 80097e0:	4614      	mov	r4, r2
 80097e2:	d510      	bpl.n	8009806 <_svfiprintf_r+0x36>
 80097e4:	690b      	ldr	r3, [r1, #16]
 80097e6:	b973      	cbnz	r3, 8009806 <_svfiprintf_r+0x36>
 80097e8:	2140      	movs	r1, #64	@ 0x40
 80097ea:	f7ff ff09 	bl	8009600 <_malloc_r>
 80097ee:	6028      	str	r0, [r5, #0]
 80097f0:	6128      	str	r0, [r5, #16]
 80097f2:	b930      	cbnz	r0, 8009802 <_svfiprintf_r+0x32>
 80097f4:	230c      	movs	r3, #12
 80097f6:	603b      	str	r3, [r7, #0]
 80097f8:	f04f 30ff 	mov.w	r0, #4294967295
 80097fc:	b01d      	add	sp, #116	@ 0x74
 80097fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009802:	2340      	movs	r3, #64	@ 0x40
 8009804:	616b      	str	r3, [r5, #20]
 8009806:	2300      	movs	r3, #0
 8009808:	9309      	str	r3, [sp, #36]	@ 0x24
 800980a:	2320      	movs	r3, #32
 800980c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009810:	f8cd 800c 	str.w	r8, [sp, #12]
 8009814:	2330      	movs	r3, #48	@ 0x30
 8009816:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80099b4 <_svfiprintf_r+0x1e4>
 800981a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800981e:	f04f 0901 	mov.w	r9, #1
 8009822:	4623      	mov	r3, r4
 8009824:	469a      	mov	sl, r3
 8009826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800982a:	b10a      	cbz	r2, 8009830 <_svfiprintf_r+0x60>
 800982c:	2a25      	cmp	r2, #37	@ 0x25
 800982e:	d1f9      	bne.n	8009824 <_svfiprintf_r+0x54>
 8009830:	ebba 0b04 	subs.w	fp, sl, r4
 8009834:	d00b      	beq.n	800984e <_svfiprintf_r+0x7e>
 8009836:	465b      	mov	r3, fp
 8009838:	4622      	mov	r2, r4
 800983a:	4629      	mov	r1, r5
 800983c:	4638      	mov	r0, r7
 800983e:	f7ff ff6b 	bl	8009718 <__ssputs_r>
 8009842:	3001      	adds	r0, #1
 8009844:	f000 80a7 	beq.w	8009996 <_svfiprintf_r+0x1c6>
 8009848:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800984a:	445a      	add	r2, fp
 800984c:	9209      	str	r2, [sp, #36]	@ 0x24
 800984e:	f89a 3000 	ldrb.w	r3, [sl]
 8009852:	2b00      	cmp	r3, #0
 8009854:	f000 809f 	beq.w	8009996 <_svfiprintf_r+0x1c6>
 8009858:	2300      	movs	r3, #0
 800985a:	f04f 32ff 	mov.w	r2, #4294967295
 800985e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009862:	f10a 0a01 	add.w	sl, sl, #1
 8009866:	9304      	str	r3, [sp, #16]
 8009868:	9307      	str	r3, [sp, #28]
 800986a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800986e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009870:	4654      	mov	r4, sl
 8009872:	2205      	movs	r2, #5
 8009874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009878:	484e      	ldr	r0, [pc, #312]	@ (80099b4 <_svfiprintf_r+0x1e4>)
 800987a:	f7f6 fcf9 	bl	8000270 <memchr>
 800987e:	9a04      	ldr	r2, [sp, #16]
 8009880:	b9d8      	cbnz	r0, 80098ba <_svfiprintf_r+0xea>
 8009882:	06d0      	lsls	r0, r2, #27
 8009884:	bf44      	itt	mi
 8009886:	2320      	movmi	r3, #32
 8009888:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800988c:	0711      	lsls	r1, r2, #28
 800988e:	bf44      	itt	mi
 8009890:	232b      	movmi	r3, #43	@ 0x2b
 8009892:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009896:	f89a 3000 	ldrb.w	r3, [sl]
 800989a:	2b2a      	cmp	r3, #42	@ 0x2a
 800989c:	d015      	beq.n	80098ca <_svfiprintf_r+0xfa>
 800989e:	9a07      	ldr	r2, [sp, #28]
 80098a0:	4654      	mov	r4, sl
 80098a2:	2000      	movs	r0, #0
 80098a4:	f04f 0c0a 	mov.w	ip, #10
 80098a8:	4621      	mov	r1, r4
 80098aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098ae:	3b30      	subs	r3, #48	@ 0x30
 80098b0:	2b09      	cmp	r3, #9
 80098b2:	d94b      	bls.n	800994c <_svfiprintf_r+0x17c>
 80098b4:	b1b0      	cbz	r0, 80098e4 <_svfiprintf_r+0x114>
 80098b6:	9207      	str	r2, [sp, #28]
 80098b8:	e014      	b.n	80098e4 <_svfiprintf_r+0x114>
 80098ba:	eba0 0308 	sub.w	r3, r0, r8
 80098be:	fa09 f303 	lsl.w	r3, r9, r3
 80098c2:	4313      	orrs	r3, r2
 80098c4:	9304      	str	r3, [sp, #16]
 80098c6:	46a2      	mov	sl, r4
 80098c8:	e7d2      	b.n	8009870 <_svfiprintf_r+0xa0>
 80098ca:	9b03      	ldr	r3, [sp, #12]
 80098cc:	1d19      	adds	r1, r3, #4
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	9103      	str	r1, [sp, #12]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	bfbb      	ittet	lt
 80098d6:	425b      	neglt	r3, r3
 80098d8:	f042 0202 	orrlt.w	r2, r2, #2
 80098dc:	9307      	strge	r3, [sp, #28]
 80098de:	9307      	strlt	r3, [sp, #28]
 80098e0:	bfb8      	it	lt
 80098e2:	9204      	strlt	r2, [sp, #16]
 80098e4:	7823      	ldrb	r3, [r4, #0]
 80098e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80098e8:	d10a      	bne.n	8009900 <_svfiprintf_r+0x130>
 80098ea:	7863      	ldrb	r3, [r4, #1]
 80098ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80098ee:	d132      	bne.n	8009956 <_svfiprintf_r+0x186>
 80098f0:	9b03      	ldr	r3, [sp, #12]
 80098f2:	1d1a      	adds	r2, r3, #4
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	9203      	str	r2, [sp, #12]
 80098f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098fc:	3402      	adds	r4, #2
 80098fe:	9305      	str	r3, [sp, #20]
 8009900:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80099c4 <_svfiprintf_r+0x1f4>
 8009904:	7821      	ldrb	r1, [r4, #0]
 8009906:	2203      	movs	r2, #3
 8009908:	4650      	mov	r0, sl
 800990a:	f7f6 fcb1 	bl	8000270 <memchr>
 800990e:	b138      	cbz	r0, 8009920 <_svfiprintf_r+0x150>
 8009910:	9b04      	ldr	r3, [sp, #16]
 8009912:	eba0 000a 	sub.w	r0, r0, sl
 8009916:	2240      	movs	r2, #64	@ 0x40
 8009918:	4082      	lsls	r2, r0
 800991a:	4313      	orrs	r3, r2
 800991c:	3401      	adds	r4, #1
 800991e:	9304      	str	r3, [sp, #16]
 8009920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009924:	4824      	ldr	r0, [pc, #144]	@ (80099b8 <_svfiprintf_r+0x1e8>)
 8009926:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800992a:	2206      	movs	r2, #6
 800992c:	f7f6 fca0 	bl	8000270 <memchr>
 8009930:	2800      	cmp	r0, #0
 8009932:	d036      	beq.n	80099a2 <_svfiprintf_r+0x1d2>
 8009934:	4b21      	ldr	r3, [pc, #132]	@ (80099bc <_svfiprintf_r+0x1ec>)
 8009936:	bb1b      	cbnz	r3, 8009980 <_svfiprintf_r+0x1b0>
 8009938:	9b03      	ldr	r3, [sp, #12]
 800993a:	3307      	adds	r3, #7
 800993c:	f023 0307 	bic.w	r3, r3, #7
 8009940:	3308      	adds	r3, #8
 8009942:	9303      	str	r3, [sp, #12]
 8009944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009946:	4433      	add	r3, r6
 8009948:	9309      	str	r3, [sp, #36]	@ 0x24
 800994a:	e76a      	b.n	8009822 <_svfiprintf_r+0x52>
 800994c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009950:	460c      	mov	r4, r1
 8009952:	2001      	movs	r0, #1
 8009954:	e7a8      	b.n	80098a8 <_svfiprintf_r+0xd8>
 8009956:	2300      	movs	r3, #0
 8009958:	3401      	adds	r4, #1
 800995a:	9305      	str	r3, [sp, #20]
 800995c:	4619      	mov	r1, r3
 800995e:	f04f 0c0a 	mov.w	ip, #10
 8009962:	4620      	mov	r0, r4
 8009964:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009968:	3a30      	subs	r2, #48	@ 0x30
 800996a:	2a09      	cmp	r2, #9
 800996c:	d903      	bls.n	8009976 <_svfiprintf_r+0x1a6>
 800996e:	2b00      	cmp	r3, #0
 8009970:	d0c6      	beq.n	8009900 <_svfiprintf_r+0x130>
 8009972:	9105      	str	r1, [sp, #20]
 8009974:	e7c4      	b.n	8009900 <_svfiprintf_r+0x130>
 8009976:	fb0c 2101 	mla	r1, ip, r1, r2
 800997a:	4604      	mov	r4, r0
 800997c:	2301      	movs	r3, #1
 800997e:	e7f0      	b.n	8009962 <_svfiprintf_r+0x192>
 8009980:	ab03      	add	r3, sp, #12
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	462a      	mov	r2, r5
 8009986:	4b0e      	ldr	r3, [pc, #56]	@ (80099c0 <_svfiprintf_r+0x1f0>)
 8009988:	a904      	add	r1, sp, #16
 800998a:	4638      	mov	r0, r7
 800998c:	f3af 8000 	nop.w
 8009990:	1c42      	adds	r2, r0, #1
 8009992:	4606      	mov	r6, r0
 8009994:	d1d6      	bne.n	8009944 <_svfiprintf_r+0x174>
 8009996:	89ab      	ldrh	r3, [r5, #12]
 8009998:	065b      	lsls	r3, r3, #25
 800999a:	f53f af2d 	bmi.w	80097f8 <_svfiprintf_r+0x28>
 800999e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099a0:	e72c      	b.n	80097fc <_svfiprintf_r+0x2c>
 80099a2:	ab03      	add	r3, sp, #12
 80099a4:	9300      	str	r3, [sp, #0]
 80099a6:	462a      	mov	r2, r5
 80099a8:	4b05      	ldr	r3, [pc, #20]	@ (80099c0 <_svfiprintf_r+0x1f0>)
 80099aa:	a904      	add	r1, sp, #16
 80099ac:	4638      	mov	r0, r7
 80099ae:	f000 f9bb 	bl	8009d28 <_printf_i>
 80099b2:	e7ed      	b.n	8009990 <_svfiprintf_r+0x1c0>
 80099b4:	0800a7e4 	.word	0x0800a7e4
 80099b8:	0800a7ee 	.word	0x0800a7ee
 80099bc:	00000000 	.word	0x00000000
 80099c0:	08009719 	.word	0x08009719
 80099c4:	0800a7ea 	.word	0x0800a7ea

080099c8 <__sfputc_r>:
 80099c8:	6893      	ldr	r3, [r2, #8]
 80099ca:	3b01      	subs	r3, #1
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	b410      	push	{r4}
 80099d0:	6093      	str	r3, [r2, #8]
 80099d2:	da08      	bge.n	80099e6 <__sfputc_r+0x1e>
 80099d4:	6994      	ldr	r4, [r2, #24]
 80099d6:	42a3      	cmp	r3, r4
 80099d8:	db01      	blt.n	80099de <__sfputc_r+0x16>
 80099da:	290a      	cmp	r1, #10
 80099dc:	d103      	bne.n	80099e6 <__sfputc_r+0x1e>
 80099de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099e2:	f000 bb6d 	b.w	800a0c0 <__swbuf_r>
 80099e6:	6813      	ldr	r3, [r2, #0]
 80099e8:	1c58      	adds	r0, r3, #1
 80099ea:	6010      	str	r0, [r2, #0]
 80099ec:	7019      	strb	r1, [r3, #0]
 80099ee:	4608      	mov	r0, r1
 80099f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <__sfputs_r>:
 80099f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f8:	4606      	mov	r6, r0
 80099fa:	460f      	mov	r7, r1
 80099fc:	4614      	mov	r4, r2
 80099fe:	18d5      	adds	r5, r2, r3
 8009a00:	42ac      	cmp	r4, r5
 8009a02:	d101      	bne.n	8009a08 <__sfputs_r+0x12>
 8009a04:	2000      	movs	r0, #0
 8009a06:	e007      	b.n	8009a18 <__sfputs_r+0x22>
 8009a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a0c:	463a      	mov	r2, r7
 8009a0e:	4630      	mov	r0, r6
 8009a10:	f7ff ffda 	bl	80099c8 <__sfputc_r>
 8009a14:	1c43      	adds	r3, r0, #1
 8009a16:	d1f3      	bne.n	8009a00 <__sfputs_r+0xa>
 8009a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a1c <_vfiprintf_r>:
 8009a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a20:	460d      	mov	r5, r1
 8009a22:	b09d      	sub	sp, #116	@ 0x74
 8009a24:	4614      	mov	r4, r2
 8009a26:	4698      	mov	r8, r3
 8009a28:	4606      	mov	r6, r0
 8009a2a:	b118      	cbz	r0, 8009a34 <_vfiprintf_r+0x18>
 8009a2c:	6a03      	ldr	r3, [r0, #32]
 8009a2e:	b90b      	cbnz	r3, 8009a34 <_vfiprintf_r+0x18>
 8009a30:	f7ff fc44 	bl	80092bc <__sinit>
 8009a34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a36:	07d9      	lsls	r1, r3, #31
 8009a38:	d405      	bmi.n	8009a46 <_vfiprintf_r+0x2a>
 8009a3a:	89ab      	ldrh	r3, [r5, #12]
 8009a3c:	059a      	lsls	r2, r3, #22
 8009a3e:	d402      	bmi.n	8009a46 <_vfiprintf_r+0x2a>
 8009a40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a42:	f7ff fd60 	bl	8009506 <__retarget_lock_acquire_recursive>
 8009a46:	89ab      	ldrh	r3, [r5, #12]
 8009a48:	071b      	lsls	r3, r3, #28
 8009a4a:	d501      	bpl.n	8009a50 <_vfiprintf_r+0x34>
 8009a4c:	692b      	ldr	r3, [r5, #16]
 8009a4e:	b99b      	cbnz	r3, 8009a78 <_vfiprintf_r+0x5c>
 8009a50:	4629      	mov	r1, r5
 8009a52:	4630      	mov	r0, r6
 8009a54:	f000 fb72 	bl	800a13c <__swsetup_r>
 8009a58:	b170      	cbz	r0, 8009a78 <_vfiprintf_r+0x5c>
 8009a5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a5c:	07dc      	lsls	r4, r3, #31
 8009a5e:	d504      	bpl.n	8009a6a <_vfiprintf_r+0x4e>
 8009a60:	f04f 30ff 	mov.w	r0, #4294967295
 8009a64:	b01d      	add	sp, #116	@ 0x74
 8009a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a6a:	89ab      	ldrh	r3, [r5, #12]
 8009a6c:	0598      	lsls	r0, r3, #22
 8009a6e:	d4f7      	bmi.n	8009a60 <_vfiprintf_r+0x44>
 8009a70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a72:	f7ff fd49 	bl	8009508 <__retarget_lock_release_recursive>
 8009a76:	e7f3      	b.n	8009a60 <_vfiprintf_r+0x44>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a7c:	2320      	movs	r3, #32
 8009a7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a82:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a86:	2330      	movs	r3, #48	@ 0x30
 8009a88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009c38 <_vfiprintf_r+0x21c>
 8009a8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a90:	f04f 0901 	mov.w	r9, #1
 8009a94:	4623      	mov	r3, r4
 8009a96:	469a      	mov	sl, r3
 8009a98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a9c:	b10a      	cbz	r2, 8009aa2 <_vfiprintf_r+0x86>
 8009a9e:	2a25      	cmp	r2, #37	@ 0x25
 8009aa0:	d1f9      	bne.n	8009a96 <_vfiprintf_r+0x7a>
 8009aa2:	ebba 0b04 	subs.w	fp, sl, r4
 8009aa6:	d00b      	beq.n	8009ac0 <_vfiprintf_r+0xa4>
 8009aa8:	465b      	mov	r3, fp
 8009aaa:	4622      	mov	r2, r4
 8009aac:	4629      	mov	r1, r5
 8009aae:	4630      	mov	r0, r6
 8009ab0:	f7ff ffa1 	bl	80099f6 <__sfputs_r>
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	f000 80a7 	beq.w	8009c08 <_vfiprintf_r+0x1ec>
 8009aba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009abc:	445a      	add	r2, fp
 8009abe:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f000 809f 	beq.w	8009c08 <_vfiprintf_r+0x1ec>
 8009aca:	2300      	movs	r3, #0
 8009acc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ad4:	f10a 0a01 	add.w	sl, sl, #1
 8009ad8:	9304      	str	r3, [sp, #16]
 8009ada:	9307      	str	r3, [sp, #28]
 8009adc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ae0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ae2:	4654      	mov	r4, sl
 8009ae4:	2205      	movs	r2, #5
 8009ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aea:	4853      	ldr	r0, [pc, #332]	@ (8009c38 <_vfiprintf_r+0x21c>)
 8009aec:	f7f6 fbc0 	bl	8000270 <memchr>
 8009af0:	9a04      	ldr	r2, [sp, #16]
 8009af2:	b9d8      	cbnz	r0, 8009b2c <_vfiprintf_r+0x110>
 8009af4:	06d1      	lsls	r1, r2, #27
 8009af6:	bf44      	itt	mi
 8009af8:	2320      	movmi	r3, #32
 8009afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009afe:	0713      	lsls	r3, r2, #28
 8009b00:	bf44      	itt	mi
 8009b02:	232b      	movmi	r3, #43	@ 0x2b
 8009b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b08:	f89a 3000 	ldrb.w	r3, [sl]
 8009b0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b0e:	d015      	beq.n	8009b3c <_vfiprintf_r+0x120>
 8009b10:	9a07      	ldr	r2, [sp, #28]
 8009b12:	4654      	mov	r4, sl
 8009b14:	2000      	movs	r0, #0
 8009b16:	f04f 0c0a 	mov.w	ip, #10
 8009b1a:	4621      	mov	r1, r4
 8009b1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b20:	3b30      	subs	r3, #48	@ 0x30
 8009b22:	2b09      	cmp	r3, #9
 8009b24:	d94b      	bls.n	8009bbe <_vfiprintf_r+0x1a2>
 8009b26:	b1b0      	cbz	r0, 8009b56 <_vfiprintf_r+0x13a>
 8009b28:	9207      	str	r2, [sp, #28]
 8009b2a:	e014      	b.n	8009b56 <_vfiprintf_r+0x13a>
 8009b2c:	eba0 0308 	sub.w	r3, r0, r8
 8009b30:	fa09 f303 	lsl.w	r3, r9, r3
 8009b34:	4313      	orrs	r3, r2
 8009b36:	9304      	str	r3, [sp, #16]
 8009b38:	46a2      	mov	sl, r4
 8009b3a:	e7d2      	b.n	8009ae2 <_vfiprintf_r+0xc6>
 8009b3c:	9b03      	ldr	r3, [sp, #12]
 8009b3e:	1d19      	adds	r1, r3, #4
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	9103      	str	r1, [sp, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	bfbb      	ittet	lt
 8009b48:	425b      	neglt	r3, r3
 8009b4a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b4e:	9307      	strge	r3, [sp, #28]
 8009b50:	9307      	strlt	r3, [sp, #28]
 8009b52:	bfb8      	it	lt
 8009b54:	9204      	strlt	r2, [sp, #16]
 8009b56:	7823      	ldrb	r3, [r4, #0]
 8009b58:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b5a:	d10a      	bne.n	8009b72 <_vfiprintf_r+0x156>
 8009b5c:	7863      	ldrb	r3, [r4, #1]
 8009b5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b60:	d132      	bne.n	8009bc8 <_vfiprintf_r+0x1ac>
 8009b62:	9b03      	ldr	r3, [sp, #12]
 8009b64:	1d1a      	adds	r2, r3, #4
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	9203      	str	r2, [sp, #12]
 8009b6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b6e:	3402      	adds	r4, #2
 8009b70:	9305      	str	r3, [sp, #20]
 8009b72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009c48 <_vfiprintf_r+0x22c>
 8009b76:	7821      	ldrb	r1, [r4, #0]
 8009b78:	2203      	movs	r2, #3
 8009b7a:	4650      	mov	r0, sl
 8009b7c:	f7f6 fb78 	bl	8000270 <memchr>
 8009b80:	b138      	cbz	r0, 8009b92 <_vfiprintf_r+0x176>
 8009b82:	9b04      	ldr	r3, [sp, #16]
 8009b84:	eba0 000a 	sub.w	r0, r0, sl
 8009b88:	2240      	movs	r2, #64	@ 0x40
 8009b8a:	4082      	lsls	r2, r0
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	3401      	adds	r4, #1
 8009b90:	9304      	str	r3, [sp, #16]
 8009b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b96:	4829      	ldr	r0, [pc, #164]	@ (8009c3c <_vfiprintf_r+0x220>)
 8009b98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b9c:	2206      	movs	r2, #6
 8009b9e:	f7f6 fb67 	bl	8000270 <memchr>
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	d03f      	beq.n	8009c26 <_vfiprintf_r+0x20a>
 8009ba6:	4b26      	ldr	r3, [pc, #152]	@ (8009c40 <_vfiprintf_r+0x224>)
 8009ba8:	bb1b      	cbnz	r3, 8009bf2 <_vfiprintf_r+0x1d6>
 8009baa:	9b03      	ldr	r3, [sp, #12]
 8009bac:	3307      	adds	r3, #7
 8009bae:	f023 0307 	bic.w	r3, r3, #7
 8009bb2:	3308      	adds	r3, #8
 8009bb4:	9303      	str	r3, [sp, #12]
 8009bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb8:	443b      	add	r3, r7
 8009bba:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bbc:	e76a      	b.n	8009a94 <_vfiprintf_r+0x78>
 8009bbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	2001      	movs	r0, #1
 8009bc6:	e7a8      	b.n	8009b1a <_vfiprintf_r+0xfe>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	3401      	adds	r4, #1
 8009bcc:	9305      	str	r3, [sp, #20]
 8009bce:	4619      	mov	r1, r3
 8009bd0:	f04f 0c0a 	mov.w	ip, #10
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bda:	3a30      	subs	r2, #48	@ 0x30
 8009bdc:	2a09      	cmp	r2, #9
 8009bde:	d903      	bls.n	8009be8 <_vfiprintf_r+0x1cc>
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d0c6      	beq.n	8009b72 <_vfiprintf_r+0x156>
 8009be4:	9105      	str	r1, [sp, #20]
 8009be6:	e7c4      	b.n	8009b72 <_vfiprintf_r+0x156>
 8009be8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bec:	4604      	mov	r4, r0
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e7f0      	b.n	8009bd4 <_vfiprintf_r+0x1b8>
 8009bf2:	ab03      	add	r3, sp, #12
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	462a      	mov	r2, r5
 8009bf8:	4b12      	ldr	r3, [pc, #72]	@ (8009c44 <_vfiprintf_r+0x228>)
 8009bfa:	a904      	add	r1, sp, #16
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	f3af 8000 	nop.w
 8009c02:	4607      	mov	r7, r0
 8009c04:	1c78      	adds	r0, r7, #1
 8009c06:	d1d6      	bne.n	8009bb6 <_vfiprintf_r+0x19a>
 8009c08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c0a:	07d9      	lsls	r1, r3, #31
 8009c0c:	d405      	bmi.n	8009c1a <_vfiprintf_r+0x1fe>
 8009c0e:	89ab      	ldrh	r3, [r5, #12]
 8009c10:	059a      	lsls	r2, r3, #22
 8009c12:	d402      	bmi.n	8009c1a <_vfiprintf_r+0x1fe>
 8009c14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c16:	f7ff fc77 	bl	8009508 <__retarget_lock_release_recursive>
 8009c1a:	89ab      	ldrh	r3, [r5, #12]
 8009c1c:	065b      	lsls	r3, r3, #25
 8009c1e:	f53f af1f 	bmi.w	8009a60 <_vfiprintf_r+0x44>
 8009c22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c24:	e71e      	b.n	8009a64 <_vfiprintf_r+0x48>
 8009c26:	ab03      	add	r3, sp, #12
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	462a      	mov	r2, r5
 8009c2c:	4b05      	ldr	r3, [pc, #20]	@ (8009c44 <_vfiprintf_r+0x228>)
 8009c2e:	a904      	add	r1, sp, #16
 8009c30:	4630      	mov	r0, r6
 8009c32:	f000 f879 	bl	8009d28 <_printf_i>
 8009c36:	e7e4      	b.n	8009c02 <_vfiprintf_r+0x1e6>
 8009c38:	0800a7e4 	.word	0x0800a7e4
 8009c3c:	0800a7ee 	.word	0x0800a7ee
 8009c40:	00000000 	.word	0x00000000
 8009c44:	080099f7 	.word	0x080099f7
 8009c48:	0800a7ea 	.word	0x0800a7ea

08009c4c <_printf_common>:
 8009c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c50:	4616      	mov	r6, r2
 8009c52:	4698      	mov	r8, r3
 8009c54:	688a      	ldr	r2, [r1, #8]
 8009c56:	690b      	ldr	r3, [r1, #16]
 8009c58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	bfb8      	it	lt
 8009c60:	4613      	movlt	r3, r2
 8009c62:	6033      	str	r3, [r6, #0]
 8009c64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c68:	4607      	mov	r7, r0
 8009c6a:	460c      	mov	r4, r1
 8009c6c:	b10a      	cbz	r2, 8009c72 <_printf_common+0x26>
 8009c6e:	3301      	adds	r3, #1
 8009c70:	6033      	str	r3, [r6, #0]
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	0699      	lsls	r1, r3, #26
 8009c76:	bf42      	ittt	mi
 8009c78:	6833      	ldrmi	r3, [r6, #0]
 8009c7a:	3302      	addmi	r3, #2
 8009c7c:	6033      	strmi	r3, [r6, #0]
 8009c7e:	6825      	ldr	r5, [r4, #0]
 8009c80:	f015 0506 	ands.w	r5, r5, #6
 8009c84:	d106      	bne.n	8009c94 <_printf_common+0x48>
 8009c86:	f104 0a19 	add.w	sl, r4, #25
 8009c8a:	68e3      	ldr	r3, [r4, #12]
 8009c8c:	6832      	ldr	r2, [r6, #0]
 8009c8e:	1a9b      	subs	r3, r3, r2
 8009c90:	42ab      	cmp	r3, r5
 8009c92:	dc26      	bgt.n	8009ce2 <_printf_common+0x96>
 8009c94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c98:	6822      	ldr	r2, [r4, #0]
 8009c9a:	3b00      	subs	r3, #0
 8009c9c:	bf18      	it	ne
 8009c9e:	2301      	movne	r3, #1
 8009ca0:	0692      	lsls	r2, r2, #26
 8009ca2:	d42b      	bmi.n	8009cfc <_printf_common+0xb0>
 8009ca4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009ca8:	4641      	mov	r1, r8
 8009caa:	4638      	mov	r0, r7
 8009cac:	47c8      	blx	r9
 8009cae:	3001      	adds	r0, #1
 8009cb0:	d01e      	beq.n	8009cf0 <_printf_common+0xa4>
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	6922      	ldr	r2, [r4, #16]
 8009cb6:	f003 0306 	and.w	r3, r3, #6
 8009cba:	2b04      	cmp	r3, #4
 8009cbc:	bf02      	ittt	eq
 8009cbe:	68e5      	ldreq	r5, [r4, #12]
 8009cc0:	6833      	ldreq	r3, [r6, #0]
 8009cc2:	1aed      	subeq	r5, r5, r3
 8009cc4:	68a3      	ldr	r3, [r4, #8]
 8009cc6:	bf0c      	ite	eq
 8009cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ccc:	2500      	movne	r5, #0
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	bfc4      	itt	gt
 8009cd2:	1a9b      	subgt	r3, r3, r2
 8009cd4:	18ed      	addgt	r5, r5, r3
 8009cd6:	2600      	movs	r6, #0
 8009cd8:	341a      	adds	r4, #26
 8009cda:	42b5      	cmp	r5, r6
 8009cdc:	d11a      	bne.n	8009d14 <_printf_common+0xc8>
 8009cde:	2000      	movs	r0, #0
 8009ce0:	e008      	b.n	8009cf4 <_printf_common+0xa8>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	4652      	mov	r2, sl
 8009ce6:	4641      	mov	r1, r8
 8009ce8:	4638      	mov	r0, r7
 8009cea:	47c8      	blx	r9
 8009cec:	3001      	adds	r0, #1
 8009cee:	d103      	bne.n	8009cf8 <_printf_common+0xac>
 8009cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf8:	3501      	adds	r5, #1
 8009cfa:	e7c6      	b.n	8009c8a <_printf_common+0x3e>
 8009cfc:	18e1      	adds	r1, r4, r3
 8009cfe:	1c5a      	adds	r2, r3, #1
 8009d00:	2030      	movs	r0, #48	@ 0x30
 8009d02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009d06:	4422      	add	r2, r4
 8009d08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009d0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009d10:	3302      	adds	r3, #2
 8009d12:	e7c7      	b.n	8009ca4 <_printf_common+0x58>
 8009d14:	2301      	movs	r3, #1
 8009d16:	4622      	mov	r2, r4
 8009d18:	4641      	mov	r1, r8
 8009d1a:	4638      	mov	r0, r7
 8009d1c:	47c8      	blx	r9
 8009d1e:	3001      	adds	r0, #1
 8009d20:	d0e6      	beq.n	8009cf0 <_printf_common+0xa4>
 8009d22:	3601      	adds	r6, #1
 8009d24:	e7d9      	b.n	8009cda <_printf_common+0x8e>
	...

08009d28 <_printf_i>:
 8009d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d2c:	7e0f      	ldrb	r7, [r1, #24]
 8009d2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009d30:	2f78      	cmp	r7, #120	@ 0x78
 8009d32:	4691      	mov	r9, r2
 8009d34:	4680      	mov	r8, r0
 8009d36:	460c      	mov	r4, r1
 8009d38:	469a      	mov	sl, r3
 8009d3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009d3e:	d807      	bhi.n	8009d50 <_printf_i+0x28>
 8009d40:	2f62      	cmp	r7, #98	@ 0x62
 8009d42:	d80a      	bhi.n	8009d5a <_printf_i+0x32>
 8009d44:	2f00      	cmp	r7, #0
 8009d46:	f000 80d2 	beq.w	8009eee <_printf_i+0x1c6>
 8009d4a:	2f58      	cmp	r7, #88	@ 0x58
 8009d4c:	f000 80b9 	beq.w	8009ec2 <_printf_i+0x19a>
 8009d50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d58:	e03a      	b.n	8009dd0 <_printf_i+0xa8>
 8009d5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d5e:	2b15      	cmp	r3, #21
 8009d60:	d8f6      	bhi.n	8009d50 <_printf_i+0x28>
 8009d62:	a101      	add	r1, pc, #4	@ (adr r1, 8009d68 <_printf_i+0x40>)
 8009d64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d68:	08009dc1 	.word	0x08009dc1
 8009d6c:	08009dd5 	.word	0x08009dd5
 8009d70:	08009d51 	.word	0x08009d51
 8009d74:	08009d51 	.word	0x08009d51
 8009d78:	08009d51 	.word	0x08009d51
 8009d7c:	08009d51 	.word	0x08009d51
 8009d80:	08009dd5 	.word	0x08009dd5
 8009d84:	08009d51 	.word	0x08009d51
 8009d88:	08009d51 	.word	0x08009d51
 8009d8c:	08009d51 	.word	0x08009d51
 8009d90:	08009d51 	.word	0x08009d51
 8009d94:	08009ed5 	.word	0x08009ed5
 8009d98:	08009dff 	.word	0x08009dff
 8009d9c:	08009e8f 	.word	0x08009e8f
 8009da0:	08009d51 	.word	0x08009d51
 8009da4:	08009d51 	.word	0x08009d51
 8009da8:	08009ef7 	.word	0x08009ef7
 8009dac:	08009d51 	.word	0x08009d51
 8009db0:	08009dff 	.word	0x08009dff
 8009db4:	08009d51 	.word	0x08009d51
 8009db8:	08009d51 	.word	0x08009d51
 8009dbc:	08009e97 	.word	0x08009e97
 8009dc0:	6833      	ldr	r3, [r6, #0]
 8009dc2:	1d1a      	adds	r2, r3, #4
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6032      	str	r2, [r6, #0]
 8009dc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009dcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e09d      	b.n	8009f10 <_printf_i+0x1e8>
 8009dd4:	6833      	ldr	r3, [r6, #0]
 8009dd6:	6820      	ldr	r0, [r4, #0]
 8009dd8:	1d19      	adds	r1, r3, #4
 8009dda:	6031      	str	r1, [r6, #0]
 8009ddc:	0606      	lsls	r6, r0, #24
 8009dde:	d501      	bpl.n	8009de4 <_printf_i+0xbc>
 8009de0:	681d      	ldr	r5, [r3, #0]
 8009de2:	e003      	b.n	8009dec <_printf_i+0xc4>
 8009de4:	0645      	lsls	r5, r0, #25
 8009de6:	d5fb      	bpl.n	8009de0 <_printf_i+0xb8>
 8009de8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009dec:	2d00      	cmp	r5, #0
 8009dee:	da03      	bge.n	8009df8 <_printf_i+0xd0>
 8009df0:	232d      	movs	r3, #45	@ 0x2d
 8009df2:	426d      	negs	r5, r5
 8009df4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009df8:	4859      	ldr	r0, [pc, #356]	@ (8009f60 <_printf_i+0x238>)
 8009dfa:	230a      	movs	r3, #10
 8009dfc:	e011      	b.n	8009e22 <_printf_i+0xfa>
 8009dfe:	6821      	ldr	r1, [r4, #0]
 8009e00:	6833      	ldr	r3, [r6, #0]
 8009e02:	0608      	lsls	r0, r1, #24
 8009e04:	f853 5b04 	ldr.w	r5, [r3], #4
 8009e08:	d402      	bmi.n	8009e10 <_printf_i+0xe8>
 8009e0a:	0649      	lsls	r1, r1, #25
 8009e0c:	bf48      	it	mi
 8009e0e:	b2ad      	uxthmi	r5, r5
 8009e10:	2f6f      	cmp	r7, #111	@ 0x6f
 8009e12:	4853      	ldr	r0, [pc, #332]	@ (8009f60 <_printf_i+0x238>)
 8009e14:	6033      	str	r3, [r6, #0]
 8009e16:	bf14      	ite	ne
 8009e18:	230a      	movne	r3, #10
 8009e1a:	2308      	moveq	r3, #8
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009e22:	6866      	ldr	r6, [r4, #4]
 8009e24:	60a6      	str	r6, [r4, #8]
 8009e26:	2e00      	cmp	r6, #0
 8009e28:	bfa2      	ittt	ge
 8009e2a:	6821      	ldrge	r1, [r4, #0]
 8009e2c:	f021 0104 	bicge.w	r1, r1, #4
 8009e30:	6021      	strge	r1, [r4, #0]
 8009e32:	b90d      	cbnz	r5, 8009e38 <_printf_i+0x110>
 8009e34:	2e00      	cmp	r6, #0
 8009e36:	d04b      	beq.n	8009ed0 <_printf_i+0x1a8>
 8009e38:	4616      	mov	r6, r2
 8009e3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e3e:	fb03 5711 	mls	r7, r3, r1, r5
 8009e42:	5dc7      	ldrb	r7, [r0, r7]
 8009e44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e48:	462f      	mov	r7, r5
 8009e4a:	42bb      	cmp	r3, r7
 8009e4c:	460d      	mov	r5, r1
 8009e4e:	d9f4      	bls.n	8009e3a <_printf_i+0x112>
 8009e50:	2b08      	cmp	r3, #8
 8009e52:	d10b      	bne.n	8009e6c <_printf_i+0x144>
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	07df      	lsls	r7, r3, #31
 8009e58:	d508      	bpl.n	8009e6c <_printf_i+0x144>
 8009e5a:	6923      	ldr	r3, [r4, #16]
 8009e5c:	6861      	ldr	r1, [r4, #4]
 8009e5e:	4299      	cmp	r1, r3
 8009e60:	bfde      	ittt	le
 8009e62:	2330      	movle	r3, #48	@ 0x30
 8009e64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e6c:	1b92      	subs	r2, r2, r6
 8009e6e:	6122      	str	r2, [r4, #16]
 8009e70:	f8cd a000 	str.w	sl, [sp]
 8009e74:	464b      	mov	r3, r9
 8009e76:	aa03      	add	r2, sp, #12
 8009e78:	4621      	mov	r1, r4
 8009e7a:	4640      	mov	r0, r8
 8009e7c:	f7ff fee6 	bl	8009c4c <_printf_common>
 8009e80:	3001      	adds	r0, #1
 8009e82:	d14a      	bne.n	8009f1a <_printf_i+0x1f2>
 8009e84:	f04f 30ff 	mov.w	r0, #4294967295
 8009e88:	b004      	add	sp, #16
 8009e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	f043 0320 	orr.w	r3, r3, #32
 8009e94:	6023      	str	r3, [r4, #0]
 8009e96:	4833      	ldr	r0, [pc, #204]	@ (8009f64 <_printf_i+0x23c>)
 8009e98:	2778      	movs	r7, #120	@ 0x78
 8009e9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	6831      	ldr	r1, [r6, #0]
 8009ea2:	061f      	lsls	r7, r3, #24
 8009ea4:	f851 5b04 	ldr.w	r5, [r1], #4
 8009ea8:	d402      	bmi.n	8009eb0 <_printf_i+0x188>
 8009eaa:	065f      	lsls	r7, r3, #25
 8009eac:	bf48      	it	mi
 8009eae:	b2ad      	uxthmi	r5, r5
 8009eb0:	6031      	str	r1, [r6, #0]
 8009eb2:	07d9      	lsls	r1, r3, #31
 8009eb4:	bf44      	itt	mi
 8009eb6:	f043 0320 	orrmi.w	r3, r3, #32
 8009eba:	6023      	strmi	r3, [r4, #0]
 8009ebc:	b11d      	cbz	r5, 8009ec6 <_printf_i+0x19e>
 8009ebe:	2310      	movs	r3, #16
 8009ec0:	e7ac      	b.n	8009e1c <_printf_i+0xf4>
 8009ec2:	4827      	ldr	r0, [pc, #156]	@ (8009f60 <_printf_i+0x238>)
 8009ec4:	e7e9      	b.n	8009e9a <_printf_i+0x172>
 8009ec6:	6823      	ldr	r3, [r4, #0]
 8009ec8:	f023 0320 	bic.w	r3, r3, #32
 8009ecc:	6023      	str	r3, [r4, #0]
 8009ece:	e7f6      	b.n	8009ebe <_printf_i+0x196>
 8009ed0:	4616      	mov	r6, r2
 8009ed2:	e7bd      	b.n	8009e50 <_printf_i+0x128>
 8009ed4:	6833      	ldr	r3, [r6, #0]
 8009ed6:	6825      	ldr	r5, [r4, #0]
 8009ed8:	6961      	ldr	r1, [r4, #20]
 8009eda:	1d18      	adds	r0, r3, #4
 8009edc:	6030      	str	r0, [r6, #0]
 8009ede:	062e      	lsls	r6, r5, #24
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	d501      	bpl.n	8009ee8 <_printf_i+0x1c0>
 8009ee4:	6019      	str	r1, [r3, #0]
 8009ee6:	e002      	b.n	8009eee <_printf_i+0x1c6>
 8009ee8:	0668      	lsls	r0, r5, #25
 8009eea:	d5fb      	bpl.n	8009ee4 <_printf_i+0x1bc>
 8009eec:	8019      	strh	r1, [r3, #0]
 8009eee:	2300      	movs	r3, #0
 8009ef0:	6123      	str	r3, [r4, #16]
 8009ef2:	4616      	mov	r6, r2
 8009ef4:	e7bc      	b.n	8009e70 <_printf_i+0x148>
 8009ef6:	6833      	ldr	r3, [r6, #0]
 8009ef8:	1d1a      	adds	r2, r3, #4
 8009efa:	6032      	str	r2, [r6, #0]
 8009efc:	681e      	ldr	r6, [r3, #0]
 8009efe:	6862      	ldr	r2, [r4, #4]
 8009f00:	2100      	movs	r1, #0
 8009f02:	4630      	mov	r0, r6
 8009f04:	f7f6 f9b4 	bl	8000270 <memchr>
 8009f08:	b108      	cbz	r0, 8009f0e <_printf_i+0x1e6>
 8009f0a:	1b80      	subs	r0, r0, r6
 8009f0c:	6060      	str	r0, [r4, #4]
 8009f0e:	6863      	ldr	r3, [r4, #4]
 8009f10:	6123      	str	r3, [r4, #16]
 8009f12:	2300      	movs	r3, #0
 8009f14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f18:	e7aa      	b.n	8009e70 <_printf_i+0x148>
 8009f1a:	6923      	ldr	r3, [r4, #16]
 8009f1c:	4632      	mov	r2, r6
 8009f1e:	4649      	mov	r1, r9
 8009f20:	4640      	mov	r0, r8
 8009f22:	47d0      	blx	sl
 8009f24:	3001      	adds	r0, #1
 8009f26:	d0ad      	beq.n	8009e84 <_printf_i+0x15c>
 8009f28:	6823      	ldr	r3, [r4, #0]
 8009f2a:	079b      	lsls	r3, r3, #30
 8009f2c:	d413      	bmi.n	8009f56 <_printf_i+0x22e>
 8009f2e:	68e0      	ldr	r0, [r4, #12]
 8009f30:	9b03      	ldr	r3, [sp, #12]
 8009f32:	4298      	cmp	r0, r3
 8009f34:	bfb8      	it	lt
 8009f36:	4618      	movlt	r0, r3
 8009f38:	e7a6      	b.n	8009e88 <_printf_i+0x160>
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	4632      	mov	r2, r6
 8009f3e:	4649      	mov	r1, r9
 8009f40:	4640      	mov	r0, r8
 8009f42:	47d0      	blx	sl
 8009f44:	3001      	adds	r0, #1
 8009f46:	d09d      	beq.n	8009e84 <_printf_i+0x15c>
 8009f48:	3501      	adds	r5, #1
 8009f4a:	68e3      	ldr	r3, [r4, #12]
 8009f4c:	9903      	ldr	r1, [sp, #12]
 8009f4e:	1a5b      	subs	r3, r3, r1
 8009f50:	42ab      	cmp	r3, r5
 8009f52:	dcf2      	bgt.n	8009f3a <_printf_i+0x212>
 8009f54:	e7eb      	b.n	8009f2e <_printf_i+0x206>
 8009f56:	2500      	movs	r5, #0
 8009f58:	f104 0619 	add.w	r6, r4, #25
 8009f5c:	e7f5      	b.n	8009f4a <_printf_i+0x222>
 8009f5e:	bf00      	nop
 8009f60:	0800a7f5 	.word	0x0800a7f5
 8009f64:	0800a806 	.word	0x0800a806

08009f68 <__sflush_r>:
 8009f68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f70:	0716      	lsls	r6, r2, #28
 8009f72:	4605      	mov	r5, r0
 8009f74:	460c      	mov	r4, r1
 8009f76:	d454      	bmi.n	800a022 <__sflush_r+0xba>
 8009f78:	684b      	ldr	r3, [r1, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	dc02      	bgt.n	8009f84 <__sflush_r+0x1c>
 8009f7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	dd48      	ble.n	800a016 <__sflush_r+0xae>
 8009f84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f86:	2e00      	cmp	r6, #0
 8009f88:	d045      	beq.n	800a016 <__sflush_r+0xae>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009f90:	682f      	ldr	r7, [r5, #0]
 8009f92:	6a21      	ldr	r1, [r4, #32]
 8009f94:	602b      	str	r3, [r5, #0]
 8009f96:	d030      	beq.n	8009ffa <__sflush_r+0x92>
 8009f98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009f9a:	89a3      	ldrh	r3, [r4, #12]
 8009f9c:	0759      	lsls	r1, r3, #29
 8009f9e:	d505      	bpl.n	8009fac <__sflush_r+0x44>
 8009fa0:	6863      	ldr	r3, [r4, #4]
 8009fa2:	1ad2      	subs	r2, r2, r3
 8009fa4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009fa6:	b10b      	cbz	r3, 8009fac <__sflush_r+0x44>
 8009fa8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009faa:	1ad2      	subs	r2, r2, r3
 8009fac:	2300      	movs	r3, #0
 8009fae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fb0:	6a21      	ldr	r1, [r4, #32]
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	47b0      	blx	r6
 8009fb6:	1c43      	adds	r3, r0, #1
 8009fb8:	89a3      	ldrh	r3, [r4, #12]
 8009fba:	d106      	bne.n	8009fca <__sflush_r+0x62>
 8009fbc:	6829      	ldr	r1, [r5, #0]
 8009fbe:	291d      	cmp	r1, #29
 8009fc0:	d82b      	bhi.n	800a01a <__sflush_r+0xb2>
 8009fc2:	4a2a      	ldr	r2, [pc, #168]	@ (800a06c <__sflush_r+0x104>)
 8009fc4:	410a      	asrs	r2, r1
 8009fc6:	07d6      	lsls	r6, r2, #31
 8009fc8:	d427      	bmi.n	800a01a <__sflush_r+0xb2>
 8009fca:	2200      	movs	r2, #0
 8009fcc:	6062      	str	r2, [r4, #4]
 8009fce:	04d9      	lsls	r1, r3, #19
 8009fd0:	6922      	ldr	r2, [r4, #16]
 8009fd2:	6022      	str	r2, [r4, #0]
 8009fd4:	d504      	bpl.n	8009fe0 <__sflush_r+0x78>
 8009fd6:	1c42      	adds	r2, r0, #1
 8009fd8:	d101      	bne.n	8009fde <__sflush_r+0x76>
 8009fda:	682b      	ldr	r3, [r5, #0]
 8009fdc:	b903      	cbnz	r3, 8009fe0 <__sflush_r+0x78>
 8009fde:	6560      	str	r0, [r4, #84]	@ 0x54
 8009fe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fe2:	602f      	str	r7, [r5, #0]
 8009fe4:	b1b9      	cbz	r1, 800a016 <__sflush_r+0xae>
 8009fe6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fea:	4299      	cmp	r1, r3
 8009fec:	d002      	beq.n	8009ff4 <__sflush_r+0x8c>
 8009fee:	4628      	mov	r0, r5
 8009ff0:	f7ff fa9a 	bl	8009528 <_free_r>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ff8:	e00d      	b.n	800a016 <__sflush_r+0xae>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	47b0      	blx	r6
 800a000:	4602      	mov	r2, r0
 800a002:	1c50      	adds	r0, r2, #1
 800a004:	d1c9      	bne.n	8009f9a <__sflush_r+0x32>
 800a006:	682b      	ldr	r3, [r5, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d0c6      	beq.n	8009f9a <__sflush_r+0x32>
 800a00c:	2b1d      	cmp	r3, #29
 800a00e:	d001      	beq.n	800a014 <__sflush_r+0xac>
 800a010:	2b16      	cmp	r3, #22
 800a012:	d11e      	bne.n	800a052 <__sflush_r+0xea>
 800a014:	602f      	str	r7, [r5, #0]
 800a016:	2000      	movs	r0, #0
 800a018:	e022      	b.n	800a060 <__sflush_r+0xf8>
 800a01a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a01e:	b21b      	sxth	r3, r3
 800a020:	e01b      	b.n	800a05a <__sflush_r+0xf2>
 800a022:	690f      	ldr	r7, [r1, #16]
 800a024:	2f00      	cmp	r7, #0
 800a026:	d0f6      	beq.n	800a016 <__sflush_r+0xae>
 800a028:	0793      	lsls	r3, r2, #30
 800a02a:	680e      	ldr	r6, [r1, #0]
 800a02c:	bf08      	it	eq
 800a02e:	694b      	ldreq	r3, [r1, #20]
 800a030:	600f      	str	r7, [r1, #0]
 800a032:	bf18      	it	ne
 800a034:	2300      	movne	r3, #0
 800a036:	eba6 0807 	sub.w	r8, r6, r7
 800a03a:	608b      	str	r3, [r1, #8]
 800a03c:	f1b8 0f00 	cmp.w	r8, #0
 800a040:	dde9      	ble.n	800a016 <__sflush_r+0xae>
 800a042:	6a21      	ldr	r1, [r4, #32]
 800a044:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a046:	4643      	mov	r3, r8
 800a048:	463a      	mov	r2, r7
 800a04a:	4628      	mov	r0, r5
 800a04c:	47b0      	blx	r6
 800a04e:	2800      	cmp	r0, #0
 800a050:	dc08      	bgt.n	800a064 <__sflush_r+0xfc>
 800a052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a05a:	81a3      	strh	r3, [r4, #12]
 800a05c:	f04f 30ff 	mov.w	r0, #4294967295
 800a060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a064:	4407      	add	r7, r0
 800a066:	eba8 0800 	sub.w	r8, r8, r0
 800a06a:	e7e7      	b.n	800a03c <__sflush_r+0xd4>
 800a06c:	dfbffffe 	.word	0xdfbffffe

0800a070 <_fflush_r>:
 800a070:	b538      	push	{r3, r4, r5, lr}
 800a072:	690b      	ldr	r3, [r1, #16]
 800a074:	4605      	mov	r5, r0
 800a076:	460c      	mov	r4, r1
 800a078:	b913      	cbnz	r3, 800a080 <_fflush_r+0x10>
 800a07a:	2500      	movs	r5, #0
 800a07c:	4628      	mov	r0, r5
 800a07e:	bd38      	pop	{r3, r4, r5, pc}
 800a080:	b118      	cbz	r0, 800a08a <_fflush_r+0x1a>
 800a082:	6a03      	ldr	r3, [r0, #32]
 800a084:	b90b      	cbnz	r3, 800a08a <_fflush_r+0x1a>
 800a086:	f7ff f919 	bl	80092bc <__sinit>
 800a08a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d0f3      	beq.n	800a07a <_fflush_r+0xa>
 800a092:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a094:	07d0      	lsls	r0, r2, #31
 800a096:	d404      	bmi.n	800a0a2 <_fflush_r+0x32>
 800a098:	0599      	lsls	r1, r3, #22
 800a09a:	d402      	bmi.n	800a0a2 <_fflush_r+0x32>
 800a09c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a09e:	f7ff fa32 	bl	8009506 <__retarget_lock_acquire_recursive>
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	4621      	mov	r1, r4
 800a0a6:	f7ff ff5f 	bl	8009f68 <__sflush_r>
 800a0aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0ac:	07da      	lsls	r2, r3, #31
 800a0ae:	4605      	mov	r5, r0
 800a0b0:	d4e4      	bmi.n	800a07c <_fflush_r+0xc>
 800a0b2:	89a3      	ldrh	r3, [r4, #12]
 800a0b4:	059b      	lsls	r3, r3, #22
 800a0b6:	d4e1      	bmi.n	800a07c <_fflush_r+0xc>
 800a0b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0ba:	f7ff fa25 	bl	8009508 <__retarget_lock_release_recursive>
 800a0be:	e7dd      	b.n	800a07c <_fflush_r+0xc>

0800a0c0 <__swbuf_r>:
 800a0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c2:	460e      	mov	r6, r1
 800a0c4:	4614      	mov	r4, r2
 800a0c6:	4605      	mov	r5, r0
 800a0c8:	b118      	cbz	r0, 800a0d2 <__swbuf_r+0x12>
 800a0ca:	6a03      	ldr	r3, [r0, #32]
 800a0cc:	b90b      	cbnz	r3, 800a0d2 <__swbuf_r+0x12>
 800a0ce:	f7ff f8f5 	bl	80092bc <__sinit>
 800a0d2:	69a3      	ldr	r3, [r4, #24]
 800a0d4:	60a3      	str	r3, [r4, #8]
 800a0d6:	89a3      	ldrh	r3, [r4, #12]
 800a0d8:	071a      	lsls	r2, r3, #28
 800a0da:	d501      	bpl.n	800a0e0 <__swbuf_r+0x20>
 800a0dc:	6923      	ldr	r3, [r4, #16]
 800a0de:	b943      	cbnz	r3, 800a0f2 <__swbuf_r+0x32>
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f000 f82a 	bl	800a13c <__swsetup_r>
 800a0e8:	b118      	cbz	r0, 800a0f2 <__swbuf_r+0x32>
 800a0ea:	f04f 37ff 	mov.w	r7, #4294967295
 800a0ee:	4638      	mov	r0, r7
 800a0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0f2:	6823      	ldr	r3, [r4, #0]
 800a0f4:	6922      	ldr	r2, [r4, #16]
 800a0f6:	1a98      	subs	r0, r3, r2
 800a0f8:	6963      	ldr	r3, [r4, #20]
 800a0fa:	b2f6      	uxtb	r6, r6
 800a0fc:	4283      	cmp	r3, r0
 800a0fe:	4637      	mov	r7, r6
 800a100:	dc05      	bgt.n	800a10e <__swbuf_r+0x4e>
 800a102:	4621      	mov	r1, r4
 800a104:	4628      	mov	r0, r5
 800a106:	f7ff ffb3 	bl	800a070 <_fflush_r>
 800a10a:	2800      	cmp	r0, #0
 800a10c:	d1ed      	bne.n	800a0ea <__swbuf_r+0x2a>
 800a10e:	68a3      	ldr	r3, [r4, #8]
 800a110:	3b01      	subs	r3, #1
 800a112:	60a3      	str	r3, [r4, #8]
 800a114:	6823      	ldr	r3, [r4, #0]
 800a116:	1c5a      	adds	r2, r3, #1
 800a118:	6022      	str	r2, [r4, #0]
 800a11a:	701e      	strb	r6, [r3, #0]
 800a11c:	6962      	ldr	r2, [r4, #20]
 800a11e:	1c43      	adds	r3, r0, #1
 800a120:	429a      	cmp	r2, r3
 800a122:	d004      	beq.n	800a12e <__swbuf_r+0x6e>
 800a124:	89a3      	ldrh	r3, [r4, #12]
 800a126:	07db      	lsls	r3, r3, #31
 800a128:	d5e1      	bpl.n	800a0ee <__swbuf_r+0x2e>
 800a12a:	2e0a      	cmp	r6, #10
 800a12c:	d1df      	bne.n	800a0ee <__swbuf_r+0x2e>
 800a12e:	4621      	mov	r1, r4
 800a130:	4628      	mov	r0, r5
 800a132:	f7ff ff9d 	bl	800a070 <_fflush_r>
 800a136:	2800      	cmp	r0, #0
 800a138:	d0d9      	beq.n	800a0ee <__swbuf_r+0x2e>
 800a13a:	e7d6      	b.n	800a0ea <__swbuf_r+0x2a>

0800a13c <__swsetup_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4b29      	ldr	r3, [pc, #164]	@ (800a1e4 <__swsetup_r+0xa8>)
 800a140:	4605      	mov	r5, r0
 800a142:	6818      	ldr	r0, [r3, #0]
 800a144:	460c      	mov	r4, r1
 800a146:	b118      	cbz	r0, 800a150 <__swsetup_r+0x14>
 800a148:	6a03      	ldr	r3, [r0, #32]
 800a14a:	b90b      	cbnz	r3, 800a150 <__swsetup_r+0x14>
 800a14c:	f7ff f8b6 	bl	80092bc <__sinit>
 800a150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a154:	0719      	lsls	r1, r3, #28
 800a156:	d422      	bmi.n	800a19e <__swsetup_r+0x62>
 800a158:	06da      	lsls	r2, r3, #27
 800a15a:	d407      	bmi.n	800a16c <__swsetup_r+0x30>
 800a15c:	2209      	movs	r2, #9
 800a15e:	602a      	str	r2, [r5, #0]
 800a160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a164:	81a3      	strh	r3, [r4, #12]
 800a166:	f04f 30ff 	mov.w	r0, #4294967295
 800a16a:	e033      	b.n	800a1d4 <__swsetup_r+0x98>
 800a16c:	0758      	lsls	r0, r3, #29
 800a16e:	d512      	bpl.n	800a196 <__swsetup_r+0x5a>
 800a170:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a172:	b141      	cbz	r1, 800a186 <__swsetup_r+0x4a>
 800a174:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a178:	4299      	cmp	r1, r3
 800a17a:	d002      	beq.n	800a182 <__swsetup_r+0x46>
 800a17c:	4628      	mov	r0, r5
 800a17e:	f7ff f9d3 	bl	8009528 <_free_r>
 800a182:	2300      	movs	r3, #0
 800a184:	6363      	str	r3, [r4, #52]	@ 0x34
 800a186:	89a3      	ldrh	r3, [r4, #12]
 800a188:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a18c:	81a3      	strh	r3, [r4, #12]
 800a18e:	2300      	movs	r3, #0
 800a190:	6063      	str	r3, [r4, #4]
 800a192:	6923      	ldr	r3, [r4, #16]
 800a194:	6023      	str	r3, [r4, #0]
 800a196:	89a3      	ldrh	r3, [r4, #12]
 800a198:	f043 0308 	orr.w	r3, r3, #8
 800a19c:	81a3      	strh	r3, [r4, #12]
 800a19e:	6923      	ldr	r3, [r4, #16]
 800a1a0:	b94b      	cbnz	r3, 800a1b6 <__swsetup_r+0x7a>
 800a1a2:	89a3      	ldrh	r3, [r4, #12]
 800a1a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a1a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1ac:	d003      	beq.n	800a1b6 <__swsetup_r+0x7a>
 800a1ae:	4621      	mov	r1, r4
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	f000 f897 	bl	800a2e4 <__smakebuf_r>
 800a1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ba:	f013 0201 	ands.w	r2, r3, #1
 800a1be:	d00a      	beq.n	800a1d6 <__swsetup_r+0x9a>
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	60a2      	str	r2, [r4, #8]
 800a1c4:	6962      	ldr	r2, [r4, #20]
 800a1c6:	4252      	negs	r2, r2
 800a1c8:	61a2      	str	r2, [r4, #24]
 800a1ca:	6922      	ldr	r2, [r4, #16]
 800a1cc:	b942      	cbnz	r2, 800a1e0 <__swsetup_r+0xa4>
 800a1ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a1d2:	d1c5      	bne.n	800a160 <__swsetup_r+0x24>
 800a1d4:	bd38      	pop	{r3, r4, r5, pc}
 800a1d6:	0799      	lsls	r1, r3, #30
 800a1d8:	bf58      	it	pl
 800a1da:	6962      	ldrpl	r2, [r4, #20]
 800a1dc:	60a2      	str	r2, [r4, #8]
 800a1de:	e7f4      	b.n	800a1ca <__swsetup_r+0x8e>
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	e7f7      	b.n	800a1d4 <__swsetup_r+0x98>
 800a1e4:	20000034 	.word	0x20000034

0800a1e8 <memmove>:
 800a1e8:	4288      	cmp	r0, r1
 800a1ea:	b510      	push	{r4, lr}
 800a1ec:	eb01 0402 	add.w	r4, r1, r2
 800a1f0:	d902      	bls.n	800a1f8 <memmove+0x10>
 800a1f2:	4284      	cmp	r4, r0
 800a1f4:	4623      	mov	r3, r4
 800a1f6:	d807      	bhi.n	800a208 <memmove+0x20>
 800a1f8:	1e43      	subs	r3, r0, #1
 800a1fa:	42a1      	cmp	r1, r4
 800a1fc:	d008      	beq.n	800a210 <memmove+0x28>
 800a1fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a202:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a206:	e7f8      	b.n	800a1fa <memmove+0x12>
 800a208:	4402      	add	r2, r0
 800a20a:	4601      	mov	r1, r0
 800a20c:	428a      	cmp	r2, r1
 800a20e:	d100      	bne.n	800a212 <memmove+0x2a>
 800a210:	bd10      	pop	{r4, pc}
 800a212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a216:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a21a:	e7f7      	b.n	800a20c <memmove+0x24>

0800a21c <_sbrk_r>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	4d06      	ldr	r5, [pc, #24]	@ (800a238 <_sbrk_r+0x1c>)
 800a220:	2300      	movs	r3, #0
 800a222:	4604      	mov	r4, r0
 800a224:	4608      	mov	r0, r1
 800a226:	602b      	str	r3, [r5, #0]
 800a228:	f7f7 f918 	bl	800145c <_sbrk>
 800a22c:	1c43      	adds	r3, r0, #1
 800a22e:	d102      	bne.n	800a236 <_sbrk_r+0x1a>
 800a230:	682b      	ldr	r3, [r5, #0]
 800a232:	b103      	cbz	r3, 800a236 <_sbrk_r+0x1a>
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	bd38      	pop	{r3, r4, r5, pc}
 800a238:	2000bd0c 	.word	0x2000bd0c

0800a23c <_realloc_r>:
 800a23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a240:	4680      	mov	r8, r0
 800a242:	4615      	mov	r5, r2
 800a244:	460c      	mov	r4, r1
 800a246:	b921      	cbnz	r1, 800a252 <_realloc_r+0x16>
 800a248:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a24c:	4611      	mov	r1, r2
 800a24e:	f7ff b9d7 	b.w	8009600 <_malloc_r>
 800a252:	b92a      	cbnz	r2, 800a260 <_realloc_r+0x24>
 800a254:	f7ff f968 	bl	8009528 <_free_r>
 800a258:	2400      	movs	r4, #0
 800a25a:	4620      	mov	r0, r4
 800a25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a260:	f000 f89e 	bl	800a3a0 <_malloc_usable_size_r>
 800a264:	4285      	cmp	r5, r0
 800a266:	4606      	mov	r6, r0
 800a268:	d802      	bhi.n	800a270 <_realloc_r+0x34>
 800a26a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a26e:	d8f4      	bhi.n	800a25a <_realloc_r+0x1e>
 800a270:	4629      	mov	r1, r5
 800a272:	4640      	mov	r0, r8
 800a274:	f7ff f9c4 	bl	8009600 <_malloc_r>
 800a278:	4607      	mov	r7, r0
 800a27a:	2800      	cmp	r0, #0
 800a27c:	d0ec      	beq.n	800a258 <_realloc_r+0x1c>
 800a27e:	42b5      	cmp	r5, r6
 800a280:	462a      	mov	r2, r5
 800a282:	4621      	mov	r1, r4
 800a284:	bf28      	it	cs
 800a286:	4632      	movcs	r2, r6
 800a288:	f7ff f93f 	bl	800950a <memcpy>
 800a28c:	4621      	mov	r1, r4
 800a28e:	4640      	mov	r0, r8
 800a290:	f7ff f94a 	bl	8009528 <_free_r>
 800a294:	463c      	mov	r4, r7
 800a296:	e7e0      	b.n	800a25a <_realloc_r+0x1e>

0800a298 <__swhatbuf_r>:
 800a298:	b570      	push	{r4, r5, r6, lr}
 800a29a:	460c      	mov	r4, r1
 800a29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a0:	2900      	cmp	r1, #0
 800a2a2:	b096      	sub	sp, #88	@ 0x58
 800a2a4:	4615      	mov	r5, r2
 800a2a6:	461e      	mov	r6, r3
 800a2a8:	da0d      	bge.n	800a2c6 <__swhatbuf_r+0x2e>
 800a2aa:	89a3      	ldrh	r3, [r4, #12]
 800a2ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a2b0:	f04f 0100 	mov.w	r1, #0
 800a2b4:	bf14      	ite	ne
 800a2b6:	2340      	movne	r3, #64	@ 0x40
 800a2b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a2bc:	2000      	movs	r0, #0
 800a2be:	6031      	str	r1, [r6, #0]
 800a2c0:	602b      	str	r3, [r5, #0]
 800a2c2:	b016      	add	sp, #88	@ 0x58
 800a2c4:	bd70      	pop	{r4, r5, r6, pc}
 800a2c6:	466a      	mov	r2, sp
 800a2c8:	f000 f848 	bl	800a35c <_fstat_r>
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	dbec      	blt.n	800a2aa <__swhatbuf_r+0x12>
 800a2d0:	9901      	ldr	r1, [sp, #4]
 800a2d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a2d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a2da:	4259      	negs	r1, r3
 800a2dc:	4159      	adcs	r1, r3
 800a2de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2e2:	e7eb      	b.n	800a2bc <__swhatbuf_r+0x24>

0800a2e4 <__smakebuf_r>:
 800a2e4:	898b      	ldrh	r3, [r1, #12]
 800a2e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2e8:	079d      	lsls	r5, r3, #30
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	460c      	mov	r4, r1
 800a2ee:	d507      	bpl.n	800a300 <__smakebuf_r+0x1c>
 800a2f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a2f4:	6023      	str	r3, [r4, #0]
 800a2f6:	6123      	str	r3, [r4, #16]
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	6163      	str	r3, [r4, #20]
 800a2fc:	b003      	add	sp, #12
 800a2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a300:	ab01      	add	r3, sp, #4
 800a302:	466a      	mov	r2, sp
 800a304:	f7ff ffc8 	bl	800a298 <__swhatbuf_r>
 800a308:	9f00      	ldr	r7, [sp, #0]
 800a30a:	4605      	mov	r5, r0
 800a30c:	4639      	mov	r1, r7
 800a30e:	4630      	mov	r0, r6
 800a310:	f7ff f976 	bl	8009600 <_malloc_r>
 800a314:	b948      	cbnz	r0, 800a32a <__smakebuf_r+0x46>
 800a316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a31a:	059a      	lsls	r2, r3, #22
 800a31c:	d4ee      	bmi.n	800a2fc <__smakebuf_r+0x18>
 800a31e:	f023 0303 	bic.w	r3, r3, #3
 800a322:	f043 0302 	orr.w	r3, r3, #2
 800a326:	81a3      	strh	r3, [r4, #12]
 800a328:	e7e2      	b.n	800a2f0 <__smakebuf_r+0xc>
 800a32a:	89a3      	ldrh	r3, [r4, #12]
 800a32c:	6020      	str	r0, [r4, #0]
 800a32e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a332:	81a3      	strh	r3, [r4, #12]
 800a334:	9b01      	ldr	r3, [sp, #4]
 800a336:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a33a:	b15b      	cbz	r3, 800a354 <__smakebuf_r+0x70>
 800a33c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a340:	4630      	mov	r0, r6
 800a342:	f000 f81d 	bl	800a380 <_isatty_r>
 800a346:	b128      	cbz	r0, 800a354 <__smakebuf_r+0x70>
 800a348:	89a3      	ldrh	r3, [r4, #12]
 800a34a:	f023 0303 	bic.w	r3, r3, #3
 800a34e:	f043 0301 	orr.w	r3, r3, #1
 800a352:	81a3      	strh	r3, [r4, #12]
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	431d      	orrs	r5, r3
 800a358:	81a5      	strh	r5, [r4, #12]
 800a35a:	e7cf      	b.n	800a2fc <__smakebuf_r+0x18>

0800a35c <_fstat_r>:
 800a35c:	b538      	push	{r3, r4, r5, lr}
 800a35e:	4d07      	ldr	r5, [pc, #28]	@ (800a37c <_fstat_r+0x20>)
 800a360:	2300      	movs	r3, #0
 800a362:	4604      	mov	r4, r0
 800a364:	4608      	mov	r0, r1
 800a366:	4611      	mov	r1, r2
 800a368:	602b      	str	r3, [r5, #0]
 800a36a:	f7f7 f84e 	bl	800140a <_fstat>
 800a36e:	1c43      	adds	r3, r0, #1
 800a370:	d102      	bne.n	800a378 <_fstat_r+0x1c>
 800a372:	682b      	ldr	r3, [r5, #0]
 800a374:	b103      	cbz	r3, 800a378 <_fstat_r+0x1c>
 800a376:	6023      	str	r3, [r4, #0]
 800a378:	bd38      	pop	{r3, r4, r5, pc}
 800a37a:	bf00      	nop
 800a37c:	2000bd0c 	.word	0x2000bd0c

0800a380 <_isatty_r>:
 800a380:	b538      	push	{r3, r4, r5, lr}
 800a382:	4d06      	ldr	r5, [pc, #24]	@ (800a39c <_isatty_r+0x1c>)
 800a384:	2300      	movs	r3, #0
 800a386:	4604      	mov	r4, r0
 800a388:	4608      	mov	r0, r1
 800a38a:	602b      	str	r3, [r5, #0]
 800a38c:	f7f7 f84d 	bl	800142a <_isatty>
 800a390:	1c43      	adds	r3, r0, #1
 800a392:	d102      	bne.n	800a39a <_isatty_r+0x1a>
 800a394:	682b      	ldr	r3, [r5, #0]
 800a396:	b103      	cbz	r3, 800a39a <_isatty_r+0x1a>
 800a398:	6023      	str	r3, [r4, #0]
 800a39a:	bd38      	pop	{r3, r4, r5, pc}
 800a39c:	2000bd0c 	.word	0x2000bd0c

0800a3a0 <_malloc_usable_size_r>:
 800a3a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3a4:	1f18      	subs	r0, r3, #4
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	bfbc      	itt	lt
 800a3aa:	580b      	ldrlt	r3, [r1, r0]
 800a3ac:	18c0      	addlt	r0, r0, r3
 800a3ae:	4770      	bx	lr

0800a3b0 <_init>:
 800a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b2:	bf00      	nop
 800a3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3b6:	bc08      	pop	{r3}
 800a3b8:	469e      	mov	lr, r3
 800a3ba:	4770      	bx	lr

0800a3bc <_fini>:
 800a3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3be:	bf00      	nop
 800a3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3c2:	bc08      	pop	{r3}
 800a3c4:	469e      	mov	lr, r3
 800a3c6:	4770      	bx	lr
