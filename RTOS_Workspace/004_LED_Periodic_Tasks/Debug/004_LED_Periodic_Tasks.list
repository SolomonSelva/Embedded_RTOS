
004_LED_Periodic_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007590  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08007790  08007790  00008790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007930  08007930  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007930  08007930  00008930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007938  08007938  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007938  08007938  00008938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800793c  0800793c  0000893c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08007940  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c490  2000001c  0800795c  0000901c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c4ac  0800795c  000094ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016112  00000000  00000000  0000904a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003135  00000000  00000000  0001f15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  00022298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ffb  00000000  00000000  00023760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c0b8  00000000  00000000  0002475b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019791  00000000  00000000  00050813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116e02  00000000  00000000  00069fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00180da6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056d4  00000000  00000000  00180dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f1  00000000  00000000  001864c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000001c 	.word	0x2000001c
 800021c:	00000000 	.word	0x00000000
 8000220:	08007778 	.word	0x08007778

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000020 	.word	0x20000020
 800023c:	08007778 	.word	0x08007778

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	2000bad8 	.word	0x2000bad8

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b96a 	b.w	80005c0 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	460c      	mov	r4, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14e      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000310:	4694      	mov	ip, r2
 8000312:	458c      	cmp	ip, r1
 8000314:	4686      	mov	lr, r0
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	d962      	bls.n	80003e2 <__udivmoddi4+0xde>
 800031c:	b14a      	cbz	r2, 8000332 <__udivmoddi4+0x2e>
 800031e:	f1c2 0320 	rsb	r3, r2, #32
 8000322:	4091      	lsls	r1, r2
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	fa0c fc02 	lsl.w	ip, ip, r2
 800032c:	4319      	orrs	r1, r3
 800032e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f f68c 	uxth.w	r6, ip
 800033a:	fbb1 f4f7 	udiv	r4, r1, r7
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb07 1114 	mls	r1, r7, r4, r1
 8000346:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034a:	fb04 f106 	mul.w	r1, r4, r6
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f104 30ff 	add.w	r0, r4, #4294967295
 800035a:	f080 8112 	bcs.w	8000582 <__udivmoddi4+0x27e>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 810f 	bls.w	8000582 <__udivmoddi4+0x27e>
 8000364:	3c02      	subs	r4, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	fa1f f38e 	uxth.w	r3, lr
 800036e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000372:	fb07 1110 	mls	r1, r7, r0, r1
 8000376:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037a:	fb00 f606 	mul.w	r6, r0, r6
 800037e:	429e      	cmp	r6, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x94>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f100 31ff 	add.w	r1, r0, #4294967295
 800038a:	f080 80fc 	bcs.w	8000586 <__udivmoddi4+0x282>
 800038e:	429e      	cmp	r6, r3
 8000390:	f240 80f9 	bls.w	8000586 <__udivmoddi4+0x282>
 8000394:	4463      	add	r3, ip
 8000396:	3802      	subs	r0, #2
 8000398:	1b9b      	subs	r3, r3, r6
 800039a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa6>
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xba>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb4>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa6>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x150>
 80003c6:	42a3      	cmp	r3, r4
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xcc>
 80003ca:	4290      	cmp	r0, r2
 80003cc:	f0c0 80f0 	bcc.w	80005b0 <__udivmoddi4+0x2ac>
 80003d0:	1a86      	subs	r6, r0, r2
 80003d2:	eb64 0303 	sbc.w	r3, r4, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	2d00      	cmp	r5, #0
 80003da:	d0e6      	beq.n	80003aa <__udivmoddi4+0xa6>
 80003dc:	e9c5 6300 	strd	r6, r3, [r5]
 80003e0:	e7e3      	b.n	80003aa <__udivmoddi4+0xa6>
 80003e2:	2a00      	cmp	r2, #0
 80003e4:	f040 8090 	bne.w	8000508 <__udivmoddi4+0x204>
 80003e8:	eba1 040c 	sub.w	r4, r1, ip
 80003ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f0:	fa1f f78c 	uxth.w	r7, ip
 80003f4:	2101      	movs	r1, #1
 80003f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000402:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000406:	fb07 f006 	mul.w	r0, r7, r6
 800040a:	4298      	cmp	r0, r3
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x11c>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 34ff 	add.w	r4, r6, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0x11a>
 8000418:	4298      	cmp	r0, r3
 800041a:	f200 80cd 	bhi.w	80005b8 <__udivmoddi4+0x2b4>
 800041e:	4626      	mov	r6, r4
 8000420:	1a1c      	subs	r4, r3, r0
 8000422:	fa1f f38e 	uxth.w	r3, lr
 8000426:	fbb4 f0f8 	udiv	r0, r4, r8
 800042a:	fb08 4410 	mls	r4, r8, r0, r4
 800042e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000432:	fb00 f707 	mul.w	r7, r0, r7
 8000436:	429f      	cmp	r7, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x148>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x146>
 8000444:	429f      	cmp	r7, r3
 8000446:	f200 80b0 	bhi.w	80005aa <__udivmoddi4+0x2a6>
 800044a:	4620      	mov	r0, r4
 800044c:	1bdb      	subs	r3, r3, r7
 800044e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x9c>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa20 fc06 	lsr.w	ip, r0, r6
 8000464:	fa04 f301 	lsl.w	r3, r4, r1
 8000468:	ea43 030c 	orr.w	r3, r3, ip
 800046c:	40f4      	lsrs	r4, r6
 800046e:	fa00 f801 	lsl.w	r8, r0, r1
 8000472:	0c38      	lsrs	r0, r7, #16
 8000474:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000478:	fbb4 fef0 	udiv	lr, r4, r0
 800047c:	fa1f fc87 	uxth.w	ip, r7
 8000480:	fb00 441e 	mls	r4, r0, lr, r4
 8000484:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000488:	fb0e f90c 	mul.w	r9, lr, ip
 800048c:	45a1      	cmp	r9, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d90a      	bls.n	80004aa <__udivmoddi4+0x1a6>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049a:	f080 8084 	bcs.w	80005a6 <__udivmoddi4+0x2a2>
 800049e:	45a1      	cmp	r9, r4
 80004a0:	f240 8081 	bls.w	80005a6 <__udivmoddi4+0x2a2>
 80004a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a8:	443c      	add	r4, r7
 80004aa:	eba4 0409 	sub.w	r4, r4, r9
 80004ae:	fa1f f983 	uxth.w	r9, r3
 80004b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004be:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x1d2>
 80004c6:	193c      	adds	r4, r7, r4
 80004c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004cc:	d267      	bcs.n	800059e <__udivmoddi4+0x29a>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d965      	bls.n	800059e <__udivmoddi4+0x29a>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004da:	fba0 9302 	umull	r9, r3, r0, r2
 80004de:	eba4 040c 	sub.w	r4, r4, ip
 80004e2:	429c      	cmp	r4, r3
 80004e4:	46ce      	mov	lr, r9
 80004e6:	469c      	mov	ip, r3
 80004e8:	d351      	bcc.n	800058e <__udivmoddi4+0x28a>
 80004ea:	d04e      	beq.n	800058a <__udivmoddi4+0x286>
 80004ec:	b155      	cbz	r5, 8000504 <__udivmoddi4+0x200>
 80004ee:	ebb8 030e 	subs.w	r3, r8, lr
 80004f2:	eb64 040c 	sbc.w	r4, r4, ip
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431e      	orrs	r6, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	e9c5 6400 	strd	r6, r4, [r5]
 8000504:	2100      	movs	r1, #0
 8000506:	e750      	b.n	80003aa <__udivmoddi4+0xa6>
 8000508:	f1c2 0320 	rsb	r3, r2, #32
 800050c:	fa20 f103 	lsr.w	r1, r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa24 f303 	lsr.w	r3, r4, r3
 8000518:	4094      	lsls	r4, r2
 800051a:	430c      	orrs	r4, r1
 800051c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000520:	fa00 fe02 	lsl.w	lr, r0, r2
 8000524:	fa1f f78c 	uxth.w	r7, ip
 8000528:	fbb3 f0f8 	udiv	r0, r3, r8
 800052c:	fb08 3110 	mls	r1, r8, r0, r3
 8000530:	0c23      	lsrs	r3, r4, #16
 8000532:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000536:	fb00 f107 	mul.w	r1, r0, r7
 800053a:	4299      	cmp	r1, r3
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x24c>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 36ff 	add.w	r6, r0, #4294967295
 8000546:	d22c      	bcs.n	80005a2 <__udivmoddi4+0x29e>
 8000548:	4299      	cmp	r1, r3
 800054a:	d92a      	bls.n	80005a2 <__udivmoddi4+0x29e>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1a5b      	subs	r3, r3, r1
 8000552:	b2a4      	uxth	r4, r4
 8000554:	fbb3 f1f8 	udiv	r1, r3, r8
 8000558:	fb08 3311 	mls	r3, r8, r1, r3
 800055c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000560:	fb01 f307 	mul.w	r3, r1, r7
 8000564:	42a3      	cmp	r3, r4
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x276>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000570:	d213      	bcs.n	800059a <__udivmoddi4+0x296>
 8000572:	42a3      	cmp	r3, r4
 8000574:	d911      	bls.n	800059a <__udivmoddi4+0x296>
 8000576:	3902      	subs	r1, #2
 8000578:	4464      	add	r4, ip
 800057a:	1ae4      	subs	r4, r4, r3
 800057c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000580:	e739      	b.n	80003f6 <__udivmoddi4+0xf2>
 8000582:	4604      	mov	r4, r0
 8000584:	e6f0      	b.n	8000368 <__udivmoddi4+0x64>
 8000586:	4608      	mov	r0, r1
 8000588:	e706      	b.n	8000398 <__udivmoddi4+0x94>
 800058a:	45c8      	cmp	r8, r9
 800058c:	d2ae      	bcs.n	80004ec <__udivmoddi4+0x1e8>
 800058e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000592:	eb63 0c07 	sbc.w	ip, r3, r7
 8000596:	3801      	subs	r0, #1
 8000598:	e7a8      	b.n	80004ec <__udivmoddi4+0x1e8>
 800059a:	4631      	mov	r1, r6
 800059c:	e7ed      	b.n	800057a <__udivmoddi4+0x276>
 800059e:	4603      	mov	r3, r0
 80005a0:	e799      	b.n	80004d6 <__udivmoddi4+0x1d2>
 80005a2:	4630      	mov	r0, r6
 80005a4:	e7d4      	b.n	8000550 <__udivmoddi4+0x24c>
 80005a6:	46d6      	mov	lr, sl
 80005a8:	e77f      	b.n	80004aa <__udivmoddi4+0x1a6>
 80005aa:	4463      	add	r3, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e74d      	b.n	800044c <__udivmoddi4+0x148>
 80005b0:	4606      	mov	r6, r0
 80005b2:	4623      	mov	r3, r4
 80005b4:	4608      	mov	r0, r1
 80005b6:	e70f      	b.n	80003d8 <__udivmoddi4+0xd4>
 80005b8:	3e02      	subs	r6, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	e730      	b.n	8000420 <__udivmoddi4+0x11c>
 80005be:	bf00      	nop

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fb38 	bl	8000c3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f849 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f8b1 	bl	8000738 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	/* Enable the CYcle counting */
	DWT_CTRL |= (1 << 0);
 80005d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000644 <main+0x80>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a1a      	ldr	r2, [pc, #104]	@ (8000644 <main+0x80>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6013      	str	r3, [r2, #0]

	SEGGER_UART_init(250000);
 80005e2:	4819      	ldr	r0, [pc, #100]	@ (8000648 <main+0x84>)
 80005e4:	f004 fe32 	bl	800524c <SEGGER_UART_init>

	SEGGER_SYSVIEW_Conf();
 80005e8:	f004 fc5a 	bl	8004ea0 <SEGGER_SYSVIEW_Conf>
	//SEGGER_SYSVIEW_Start();


	status = xTaskCreate(led_green_handler, "LED_Green_Task", 200, NULL, 2, &task1_handle);
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2302      	movs	r3, #2
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	22c8      	movs	r2, #200	@ 0xc8
 80005fa:	4914      	ldr	r1, [pc, #80]	@ (800064c <main+0x88>)
 80005fc:	4814      	ldr	r0, [pc, #80]	@ (8000650 <main+0x8c>)
 80005fe:	f002 fabf 	bl	8002b80 <xTaskCreate>
 8000602:	60f8      	str	r0, [r7, #12]

	configASSERT(status = pdPASS);
 8000604:	2301      	movs	r3, #1
 8000606:	60fb      	str	r3, [r7, #12]

	status = xTaskCreate(led_red_handler, "LED_Red_Task", 200, NULL, 2, &task2_handle);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	2302      	movs	r3, #2
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	22c8      	movs	r2, #200	@ 0xc8
 8000614:	490f      	ldr	r1, [pc, #60]	@ (8000654 <main+0x90>)
 8000616:	4810      	ldr	r0, [pc, #64]	@ (8000658 <main+0x94>)
 8000618:	f002 fab2 	bl	8002b80 <xTaskCreate>
 800061c:	60f8      	str	r0, [r7, #12]

	configASSERT(status = pdPASS);
 800061e:	2301      	movs	r3, #1
 8000620:	60fb      	str	r3, [r7, #12]

	status = xTaskCreate(led_blue_handler, "LED_Blue_Task", 200, NULL, 2, &task3_handle);
 8000622:	463b      	mov	r3, r7
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2302      	movs	r3, #2
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2300      	movs	r3, #0
 800062c:	22c8      	movs	r2, #200	@ 0xc8
 800062e:	490b      	ldr	r1, [pc, #44]	@ (800065c <main+0x98>)
 8000630:	480b      	ldr	r0, [pc, #44]	@ (8000660 <main+0x9c>)
 8000632:	f002 faa5 	bl	8002b80 <xTaskCreate>
 8000636:	60f8      	str	r0, [r7, #12]

	configASSERT(status = pdPASS);
 8000638:	2301      	movs	r3, #1
 800063a:	60fb      	str	r3, [r7, #12]

	//STart the FreeRTOS Scheduler
	vTaskStartScheduler();
 800063c:	f002 fce8 	bl	8003010 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <main+0x7c>
 8000644:	e0001000 	.word	0xe0001000
 8000648:	0003d090 	.word	0x0003d090
 800064c:	08007790 	.word	0x08007790
 8000650:	08000965 	.word	0x08000965
 8000654:	080077a0 	.word	0x080077a0
 8000658:	0800099d 	.word	0x0800099d
 800065c:	080077b0 	.word	0x080077b0
 8000660:	080009d9 	.word	0x080009d9

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	@ 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2234      	movs	r2, #52	@ 0x34
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f007 f846 	bl	8007704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	4b29      	ldr	r3, [pc, #164]	@ (8000730 <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	4a28      	ldr	r2, [pc, #160]	@ (8000730 <SystemClock_Config+0xcc>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	@ 0x40
 8000694:	4b26      	ldr	r3, [pc, #152]	@ (8000730 <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006a0:	4b24      	ldr	r3, [pc, #144]	@ (8000734 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a8:	4a22      	ldr	r2, [pc, #136]	@ (8000734 <SystemClock_Config+0xd0>)
 80006aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b20      	ldr	r3, [pc, #128]	@ (8000734 <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d4:	23a8      	movs	r3, #168	@ 0xa8
 80006d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fd97 	bl	800121c <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f4:	f000 f99e 	bl	8000a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000704:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2105      	movs	r1, #5
 8000716:	4618      	mov	r0, r3
 8000718:	f001 f82e 	bl	8001778 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000722:	f000 f987 	bl	8000a34 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	@ 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	@ 0x30
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b7f      	ldr	r3, [pc, #508]	@ (800094c <MX_GPIO_Init+0x214>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a7e      	ldr	r2, [pc, #504]	@ (800094c <MX_GPIO_Init+0x214>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b7c      	ldr	r3, [pc, #496]	@ (800094c <MX_GPIO_Init+0x214>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	4b79      	ldr	r3, [pc, #484]	@ (800094c <MX_GPIO_Init+0x214>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a78      	ldr	r2, [pc, #480]	@ (800094c <MX_GPIO_Init+0x214>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b76      	ldr	r3, [pc, #472]	@ (800094c <MX_GPIO_Init+0x214>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b73      	ldr	r3, [pc, #460]	@ (800094c <MX_GPIO_Init+0x214>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a72      	ldr	r2, [pc, #456]	@ (800094c <MX_GPIO_Init+0x214>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b70      	ldr	r3, [pc, #448]	@ (800094c <MX_GPIO_Init+0x214>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	4b6d      	ldr	r3, [pc, #436]	@ (800094c <MX_GPIO_Init+0x214>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a6c      	ldr	r2, [pc, #432]	@ (800094c <MX_GPIO_Init+0x214>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b6a      	ldr	r3, [pc, #424]	@ (800094c <MX_GPIO_Init+0x214>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	4b67      	ldr	r3, [pc, #412]	@ (800094c <MX_GPIO_Init+0x214>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a66      	ldr	r2, [pc, #408]	@ (800094c <MX_GPIO_Init+0x214>)
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b64      	ldr	r3, [pc, #400]	@ (800094c <MX_GPIO_Init+0x214>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0308 	and.w	r3, r3, #8
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007c6:	4b61      	ldr	r3, [pc, #388]	@ (800094c <MX_GPIO_Init+0x214>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a60      	ldr	r2, [pc, #384]	@ (800094c <MX_GPIO_Init+0x214>)
 80007cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b5e      	ldr	r3, [pc, #376]	@ (800094c <MX_GPIO_Init+0x214>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80007e4:	485a      	ldr	r0, [pc, #360]	@ (8000950 <MX_GPIO_Init+0x218>)
 80007e6:	f000 fce5 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2140      	movs	r1, #64	@ 0x40
 80007ee:	4859      	ldr	r0, [pc, #356]	@ (8000954 <MX_GPIO_Init+0x21c>)
 80007f0:	f000 fce0 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4619      	mov	r1, r3
 800080a:	4853      	ldr	r0, [pc, #332]	@ (8000958 <MX_GPIO_Init+0x220>)
 800080c:	f000 fb26 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000810:	2332      	movs	r3, #50	@ 0x32
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000820:	230b      	movs	r3, #11
 8000822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	484b      	ldr	r0, [pc, #300]	@ (8000958 <MX_GPIO_Init+0x220>)
 800082c:	f000 fb16 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000830:	2386      	movs	r3, #134	@ 0x86
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000840:	230b      	movs	r3, #11
 8000842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	4844      	ldr	r0, [pc, #272]	@ (800095c <MX_GPIO_Init+0x224>)
 800084c:	f000 fb06 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000850:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4839      	ldr	r0, [pc, #228]	@ (8000950 <MX_GPIO_Init+0x218>)
 800086a:	f000 faf7 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800086e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000880:	230b      	movs	r3, #11
 8000882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4831      	ldr	r0, [pc, #196]	@ (8000950 <MX_GPIO_Init+0x218>)
 800088c:	f000 fae6 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000890:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008a2:	2307      	movs	r3, #7
 80008a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	482c      	ldr	r0, [pc, #176]	@ (8000960 <MX_GPIO_Init+0x228>)
 80008ae:	f000 fad5 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008b2:	2340      	movs	r3, #64	@ 0x40
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4822      	ldr	r0, [pc, #136]	@ (8000954 <MX_GPIO_Init+0x21c>)
 80008ca:	f000 fac7 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ce:	2380      	movs	r3, #128	@ 0x80
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	481c      	ldr	r0, [pc, #112]	@ (8000954 <MX_GPIO_Init+0x21c>)
 80008e2:	f000 fabb 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008e6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008f8:	230a      	movs	r3, #10
 80008fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4816      	ldr	r0, [pc, #88]	@ (800095c <MX_GPIO_Init+0x224>)
 8000904:	f000 faaa 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000908:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	480f      	ldr	r0, [pc, #60]	@ (800095c <MX_GPIO_Init+0x224>)
 800091e:	f000 fa9d 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000922:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000934:	230b      	movs	r3, #11
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4805      	ldr	r0, [pc, #20]	@ (8000954 <MX_GPIO_Init+0x21c>)
 8000940:	f000 fa8c 	bl	8000e5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000944:	bf00      	nop
 8000946:	3730      	adds	r7, #48	@ 0x30
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40020400 	.word	0x40020400
 8000954:	40021800 	.word	0x40021800
 8000958:	40020800 	.word	0x40020800
 800095c:	40020000 	.word	0x40020000
 8000960:	40020c00 	.word	0x40020c00

08000964 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 800096c:	f002 fcd0 	bl	8003310 <xTaskGetTickCount>
 8000970:	4603      	mov	r3, r0
 8000972:	60fb      	str	r3, [r7, #12]

	while (1)
	{
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000974:	2101      	movs	r1, #1
 8000976:	4807      	ldr	r0, [pc, #28]	@ (8000994 <led_green_handler+0x30>)
 8000978:	f000 fc35 	bl	80011e6 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000));
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000984:	4618      	mov	r0, r3
 8000986:	f002 fa6d 	bl	8002e64 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggle Green LED");
 800098a:	4803      	ldr	r0, [pc, #12]	@ (8000998 <led_green_handler+0x34>)
 800098c:	f006 fe0c 	bl	80075a8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000990:	bf00      	nop
 8000992:	e7ef      	b.n	8000974 <led_green_handler+0x10>
 8000994:	40020400 	.word	0x40020400
 8000998:	080077c0 	.word	0x080077c0

0800099c <led_red_handler>:
	}

}

static void led_red_handler(void* parameters)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 80009a4:	f002 fcb4 	bl	8003310 <xTaskGetTickCount>
 80009a8:	4603      	mov	r3, r0
 80009aa:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 80009ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009b0:	4807      	ldr	r0, [pc, #28]	@ (80009d0 <led_red_handler+0x34>)
 80009b2:	f000 fc18 	bl	80011e6 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(400));
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 fa50 	bl	8002e64 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggle Red LED");
 80009c4:	4803      	ldr	r0, [pc, #12]	@ (80009d4 <led_red_handler+0x38>)
 80009c6:	f006 fdef 	bl	80075a8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 80009ca:	bf00      	nop
 80009cc:	e7ee      	b.n	80009ac <led_red_handler+0x10>
 80009ce:	bf00      	nop
 80009d0:	40020400 	.word	0x40020400
 80009d4:	080077d4 	.word	0x080077d4

080009d8 <led_blue_handler>:
	}
}

static void led_blue_handler(void* parameters)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 80009e0:	f002 fc96 	bl	8003310 <xTaskGetTickCount>
 80009e4:	4603      	mov	r3, r0
 80009e6:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 80009e8:	2180      	movs	r1, #128	@ 0x80
 80009ea:	4807      	ldr	r0, [pc, #28]	@ (8000a08 <led_blue_handler+0x30>)
 80009ec:	f000 fbfb 	bl	80011e6 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(800));
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 fa33 	bl	8002e64 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggle Blue LED");
 80009fe:	4803      	ldr	r0, [pc, #12]	@ (8000a0c <led_blue_handler+0x34>)
 8000a00:	f006 fdd2 	bl	80075a8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000a04:	bf00      	nop
 8000a06:	e7ef      	b.n	80009e8 <led_blue_handler+0x10>
 8000a08:	40020400 	.word	0x40020400
 8000a0c:	080077e4 	.word	0x080077e4

08000a10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a04      	ldr	r2, [pc, #16]	@ (8000a30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d101      	bne.n	8000a26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a22:	f000 f919 	bl	8000c58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40001000 	.word	0x40001000

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <Error_Handler+0x8>

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <HAL_MspInit+0x44>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a84 <HAL_MspInit+0x44>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a52:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <HAL_MspInit+0x44>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <HAL_MspInit+0x44>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a62:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <HAL_MspInit+0x44>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_MspInit+0x44>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800

08000a88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08e      	sub	sp, #56	@ 0x38
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a98:	4b33      	ldr	r3, [pc, #204]	@ (8000b68 <HAL_InitTick+0xe0>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <HAL_InitTick+0xe0>)
 8000a9e:	f043 0310 	orr.w	r3, r3, #16
 8000aa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa4:	4b30      	ldr	r3, [pc, #192]	@ (8000b68 <HAL_InitTick+0xe0>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ab0:	f107 0210 	add.w	r2, r7, #16
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4611      	mov	r1, r2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 f86c 	bl	8001b98 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ac0:	6a3b      	ldr	r3, [r7, #32]
 8000ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d103      	bne.n	8000ad2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aca:	f001 f851 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 8000ace:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ad0:	e004      	b.n	8000adc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ad2:	f001 f84d 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ade:	4a23      	ldr	r2, [pc, #140]	@ (8000b6c <HAL_InitTick+0xe4>)
 8000ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae4:	0c9b      	lsrs	r3, r3, #18
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aea:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <HAL_InitTick+0xe8>)
 8000aec:	4a21      	ldr	r2, [pc, #132]	@ (8000b74 <HAL_InitTick+0xec>)
 8000aee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000af0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <HAL_InitTick+0xe8>)
 8000af2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000af6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000af8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b70 <HAL_InitTick+0xe8>)
 8000afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000afc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000afe:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <HAL_InitTick+0xe8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b04:	4b1a      	ldr	r3, [pc, #104]	@ (8000b70 <HAL_InitTick+0xe8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0a:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <HAL_InitTick+0xe8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b10:	4817      	ldr	r0, [pc, #92]	@ (8000b70 <HAL_InitTick+0xe8>)
 8000b12:	f001 f873 	bl	8001bfc <HAL_TIM_Base_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d11b      	bne.n	8000b5c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b24:	4812      	ldr	r0, [pc, #72]	@ (8000b70 <HAL_InitTick+0xe8>)
 8000b26:	f001 f8cb 	bl	8001cc0 <HAL_TIM_Base_Start_IT>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d111      	bne.n	8000b5c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b38:	2036      	movs	r0, #54	@ 0x36
 8000b3a:	f000 f981 	bl	8000e40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	d808      	bhi.n	8000b56 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	2036      	movs	r0, #54	@ 0x36
 8000b4a:	f000 f95d 	bl	8000e08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <HAL_InitTick+0xf0>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	e002      	b.n	8000b5c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3738      	adds	r7, #56	@ 0x38
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	431bde83 	.word	0x431bde83
 8000b70:	20000038 	.word	0x20000038
 8000b74:	40001000 	.word	0x40001000
 8000b78:	20000004 	.word	0x20000004

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <NMI_Handler+0x4>

08000b84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <MemManage_Handler+0x4>

08000b94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bb8:	4802      	ldr	r0, [pc, #8]	@ (8000bc4 <TIM6_DAC_IRQHandler+0x10>)
 8000bba:	f001 f8f9 	bl	8001db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000038 	.word	0x20000038

08000bc8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <SystemInit+0x20>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bd2:	4a05      	ldr	r2, [pc, #20]	@ (8000be8 <SystemInit+0x20>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bf0:	f7ff ffea 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	@ (8000c2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f006 fd7b 	bl	8007714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1e:	f7ff fcd1 	bl	80005c4 <main>
  bx  lr    
 8000c22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c24:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c30:	08007940 	.word	0x08007940
  ldr r2, =_sbss
 8000c34:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c38:	2000c4ac 	.word	0x2000c4ac

08000c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC_IRQHandler>

08000c3e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c42:	2003      	movs	r0, #3
 8000c44:	f000 f8d5 	bl	8000df2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c48:	200f      	movs	r0, #15
 8000c4a:	f7ff ff1d 	bl	8000a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c4e:	f7ff fef7 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <HAL_IncTick+0x20>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <HAL_IncTick+0x24>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a04      	ldr	r2, [pc, #16]	@ (8000c7c <HAL_IncTick+0x24>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000084 	.word	0x20000084

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b03      	ldr	r3, [pc, #12]	@ (8000c94 <HAL_GetTick+0x14>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000084 	.word	0x20000084

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	@ (8000cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00
 8000cdc:	05fa0000 	.word	0x05fa0000

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db0b      	blt.n	8000d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 021f 	and.w	r2, r3, #31
 8000d14:	4907      	ldr	r1, [pc, #28]	@ (8000d34 <__NVIC_EnableIRQ+0x38>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db0a      	blt.n	8000d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	490c      	ldr	r1, [pc, #48]	@ (8000d84 <__NVIC_SetPriority+0x4c>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0112      	lsls	r2, r2, #4
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d60:	e00a      	b.n	8000d78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4908      	ldr	r1, [pc, #32]	@ (8000d88 <__NVIC_SetPriority+0x50>)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	0112      	lsls	r2, r2, #4
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	761a      	strb	r2, [r3, #24]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	@ 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f1c3 0307 	rsb	r3, r3, #7
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf28      	it	cs
 8000daa:	2304      	movcs	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d902      	bls.n	8000dbc <NVIC_EncodePriority+0x30>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3b03      	subs	r3, #3
 8000dba:	e000      	b.n	8000dbe <NVIC_EncodePriority+0x32>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43d9      	mvns	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	4313      	orrs	r3, r2
         );
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	@ 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ff4c 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
 8000e14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1a:	f7ff ff61 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	68b9      	ldr	r1, [r7, #8]
 8000e24:	6978      	ldr	r0, [r7, #20]
 8000e26:	f7ff ffb1 	bl	8000d8c <NVIC_EncodePriority>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff80 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff54 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	@ 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	e175      	b.n	8001168 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	f040 8164 	bne.w	8001162 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d005      	beq.n	8000eb2 <HAL_GPIO_Init+0x56>
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d130      	bne.n	8000f14 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	091b      	lsrs	r3, r3, #4
 8000efe:	f003 0201 	and.w	r2, r3, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d017      	beq.n	8000f50 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d123      	bne.n	8000fa4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	08da      	lsrs	r2, r3, #3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3208      	adds	r2, #8
 8000f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	08da      	lsrs	r2, r3, #3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3208      	adds	r2, #8
 8000f9e:	69b9      	ldr	r1, [r7, #24]
 8000fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0203 	and.w	r2, r3, #3
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 80be 	beq.w	8001162 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	4b66      	ldr	r3, [pc, #408]	@ (8001180 <HAL_GPIO_Init+0x324>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	4a65      	ldr	r2, [pc, #404]	@ (8001180 <HAL_GPIO_Init+0x324>)
 8000fec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ff2:	4b63      	ldr	r3, [pc, #396]	@ (8001180 <HAL_GPIO_Init+0x324>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ffe:	4a61      	ldr	r2, [pc, #388]	@ (8001184 <HAL_GPIO_Init+0x328>)
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	3302      	adds	r3, #2
 8001006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	220f      	movs	r2, #15
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a58      	ldr	r2, [pc, #352]	@ (8001188 <HAL_GPIO_Init+0x32c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d037      	beq.n	800109a <HAL_GPIO_Init+0x23e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a57      	ldr	r2, [pc, #348]	@ (800118c <HAL_GPIO_Init+0x330>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d031      	beq.n	8001096 <HAL_GPIO_Init+0x23a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a56      	ldr	r2, [pc, #344]	@ (8001190 <HAL_GPIO_Init+0x334>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d02b      	beq.n	8001092 <HAL_GPIO_Init+0x236>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a55      	ldr	r2, [pc, #340]	@ (8001194 <HAL_GPIO_Init+0x338>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d025      	beq.n	800108e <HAL_GPIO_Init+0x232>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a54      	ldr	r2, [pc, #336]	@ (8001198 <HAL_GPIO_Init+0x33c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d01f      	beq.n	800108a <HAL_GPIO_Init+0x22e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a53      	ldr	r2, [pc, #332]	@ (800119c <HAL_GPIO_Init+0x340>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d019      	beq.n	8001086 <HAL_GPIO_Init+0x22a>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a52      	ldr	r2, [pc, #328]	@ (80011a0 <HAL_GPIO_Init+0x344>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d013      	beq.n	8001082 <HAL_GPIO_Init+0x226>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a51      	ldr	r2, [pc, #324]	@ (80011a4 <HAL_GPIO_Init+0x348>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00d      	beq.n	800107e <HAL_GPIO_Init+0x222>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a50      	ldr	r2, [pc, #320]	@ (80011a8 <HAL_GPIO_Init+0x34c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d007      	beq.n	800107a <HAL_GPIO_Init+0x21e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4f      	ldr	r2, [pc, #316]	@ (80011ac <HAL_GPIO_Init+0x350>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_GPIO_Init+0x21a>
 8001072:	2309      	movs	r3, #9
 8001074:	e012      	b.n	800109c <HAL_GPIO_Init+0x240>
 8001076:	230a      	movs	r3, #10
 8001078:	e010      	b.n	800109c <HAL_GPIO_Init+0x240>
 800107a:	2308      	movs	r3, #8
 800107c:	e00e      	b.n	800109c <HAL_GPIO_Init+0x240>
 800107e:	2307      	movs	r3, #7
 8001080:	e00c      	b.n	800109c <HAL_GPIO_Init+0x240>
 8001082:	2306      	movs	r3, #6
 8001084:	e00a      	b.n	800109c <HAL_GPIO_Init+0x240>
 8001086:	2305      	movs	r3, #5
 8001088:	e008      	b.n	800109c <HAL_GPIO_Init+0x240>
 800108a:	2304      	movs	r3, #4
 800108c:	e006      	b.n	800109c <HAL_GPIO_Init+0x240>
 800108e:	2303      	movs	r3, #3
 8001090:	e004      	b.n	800109c <HAL_GPIO_Init+0x240>
 8001092:	2302      	movs	r3, #2
 8001094:	e002      	b.n	800109c <HAL_GPIO_Init+0x240>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <HAL_GPIO_Init+0x240>
 800109a:	2300      	movs	r3, #0
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	f002 0203 	and.w	r2, r2, #3
 80010a2:	0092      	lsls	r2, r2, #2
 80010a4:	4093      	lsls	r3, r2
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010ac:	4935      	ldr	r1, [pc, #212]	@ (8001184 <HAL_GPIO_Init+0x328>)
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	3302      	adds	r3, #2
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ba:	4b3d      	ldr	r3, [pc, #244]	@ (80011b0 <HAL_GPIO_Init+0x354>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010de:	4a34      	ldr	r2, [pc, #208]	@ (80011b0 <HAL_GPIO_Init+0x354>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e4:	4b32      	ldr	r3, [pc, #200]	@ (80011b0 <HAL_GPIO_Init+0x354>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001108:	4a29      	ldr	r2, [pc, #164]	@ (80011b0 <HAL_GPIO_Init+0x354>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800110e:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <HAL_GPIO_Init+0x354>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001132:	4a1f      	ldr	r2, [pc, #124]	@ (80011b0 <HAL_GPIO_Init+0x354>)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001138:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <HAL_GPIO_Init+0x354>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800115c:	4a14      	ldr	r2, [pc, #80]	@ (80011b0 <HAL_GPIO_Init+0x354>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3301      	adds	r3, #1
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	2b0f      	cmp	r3, #15
 800116c:	f67f ae86 	bls.w	8000e7c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3724      	adds	r7, #36	@ 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40013800 	.word	0x40013800
 8001188:	40020000 	.word	0x40020000
 800118c:	40020400 	.word	0x40020400
 8001190:	40020800 	.word	0x40020800
 8001194:	40020c00 	.word	0x40020c00
 8001198:	40021000 	.word	0x40021000
 800119c:	40021400 	.word	0x40021400
 80011a0:	40021800 	.word	0x40021800
 80011a4:	40021c00 	.word	0x40021c00
 80011a8:	40022000 	.word	0x40022000
 80011ac:	40022400 	.word	0x40022400
 80011b0:	40013c00 	.word	0x40013c00

080011b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
 80011c0:	4613      	mov	r3, r2
 80011c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c4:	787b      	ldrb	r3, [r7, #1]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011d0:	e003      	b.n	80011da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011d2:	887b      	ldrh	r3, [r7, #2]
 80011d4:	041a      	lsls	r2, r3, #16
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	619a      	str	r2, [r3, #24]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b085      	sub	sp, #20
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	460b      	mov	r3, r1
 80011f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011f8:	887a      	ldrh	r2, [r7, #2]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4013      	ands	r3, r2
 80011fe:	041a      	lsls	r2, r3, #16
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	43d9      	mvns	r1, r3
 8001204:	887b      	ldrh	r3, [r7, #2]
 8001206:	400b      	ands	r3, r1
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	619a      	str	r2, [r3, #24]
}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001224:	2300      	movs	r3, #0
 8001226:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e29b      	b.n	800176a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 8087 	beq.w	800134e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001240:	4b96      	ldr	r3, [pc, #600]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 030c 	and.w	r3, r3, #12
 8001248:	2b04      	cmp	r3, #4
 800124a:	d00c      	beq.n	8001266 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800124c:	4b93      	ldr	r3, [pc, #588]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 030c 	and.w	r3, r3, #12
 8001254:	2b08      	cmp	r3, #8
 8001256:	d112      	bne.n	800127e <HAL_RCC_OscConfig+0x62>
 8001258:	4b90      	ldr	r3, [pc, #576]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001260:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001264:	d10b      	bne.n	800127e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001266:	4b8d      	ldr	r3, [pc, #564]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d06c      	beq.n	800134c <HAL_RCC_OscConfig+0x130>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d168      	bne.n	800134c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e275      	b.n	800176a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001286:	d106      	bne.n	8001296 <HAL_RCC_OscConfig+0x7a>
 8001288:	4b84      	ldr	r3, [pc, #528]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a83      	ldr	r2, [pc, #524]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 800128e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	e02e      	b.n	80012f4 <HAL_RCC_OscConfig+0xd8>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x9c>
 800129e:	4b7f      	ldr	r3, [pc, #508]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a7e      	ldr	r2, [pc, #504]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 80012a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	4b7c      	ldr	r3, [pc, #496]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a7b      	ldr	r2, [pc, #492]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 80012b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e01d      	b.n	80012f4 <HAL_RCC_OscConfig+0xd8>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0xc0>
 80012c2:	4b76      	ldr	r3, [pc, #472]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a75      	ldr	r2, [pc, #468]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 80012c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b73      	ldr	r3, [pc, #460]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a72      	ldr	r2, [pc, #456]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e00b      	b.n	80012f4 <HAL_RCC_OscConfig+0xd8>
 80012dc:	4b6f      	ldr	r3, [pc, #444]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a6e      	ldr	r2, [pc, #440]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 80012e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b6c      	ldr	r3, [pc, #432]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a6b      	ldr	r2, [pc, #428]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 80012ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d013      	beq.n	8001324 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7ff fcc0 	bl	8000c80 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fcbc 	bl	8000c80 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	@ 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e229      	b.n	800176a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001316:	4b61      	ldr	r3, [pc, #388]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0xe8>
 8001322:	e014      	b.n	800134e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001324:	f7ff fcac 	bl	8000c80 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fca8 	bl	8000c80 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	@ 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e215      	b.n	800176a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133e:	4b57      	ldr	r3, [pc, #348]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0x110>
 800134a:	e000      	b.n	800134e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d069      	beq.n	800142e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800135a:	4b50      	ldr	r3, [pc, #320]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001366:	4b4d      	ldr	r3, [pc, #308]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b08      	cmp	r3, #8
 8001370:	d11c      	bne.n	80013ac <HAL_RCC_OscConfig+0x190>
 8001372:	4b4a      	ldr	r3, [pc, #296]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d116      	bne.n	80013ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137e:	4b47      	ldr	r3, [pc, #284]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_RCC_OscConfig+0x17a>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d001      	beq.n	8001396 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e1e9      	b.n	800176a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b41      	ldr	r3, [pc, #260]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	493d      	ldr	r1, [pc, #244]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013aa:	e040      	b.n	800142e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d023      	beq.n	80013fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b4:	4b39      	ldr	r3, [pc, #228]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a38      	ldr	r2, [pc, #224]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff fc5e 	bl	8000c80 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c8:	f7ff fc5a 	bl	8000c80 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e1c7      	b.n	800176a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013da:	4b30      	ldr	r3, [pc, #192]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e6:	4b2d      	ldr	r3, [pc, #180]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4929      	ldr	r1, [pc, #164]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
 80013fa:	e018      	b.n	800142e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fc:	4b27      	ldr	r3, [pc, #156]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a26      	ldr	r2, [pc, #152]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fc3a 	bl	8000c80 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001410:	f7ff fc36 	bl	8000c80 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e1a3      	b.n	800176a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001422:	4b1e      	ldr	r3, [pc, #120]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d038      	beq.n	80014ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d019      	beq.n	8001476 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001442:	4b16      	ldr	r3, [pc, #88]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 8001444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001446:	4a15      	ldr	r2, [pc, #84]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144e:	f7ff fc17 	bl	8000c80 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001456:	f7ff fc13 	bl	8000c80 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e180      	b.n	800176a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 800146a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x23a>
 8001474:	e01a      	b.n	80014ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 8001478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800147a:	4a08      	ldr	r2, [pc, #32]	@ (800149c <HAL_RCC_OscConfig+0x280>)
 800147c:	f023 0301 	bic.w	r3, r3, #1
 8001480:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001482:	f7ff fbfd 	bl	8000c80 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001488:	e00a      	b.n	80014a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800148a:	f7ff fbf9 	bl	8000c80 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d903      	bls.n	80014a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e166      	b.n	800176a <HAL_RCC_OscConfig+0x54e>
 800149c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	4b92      	ldr	r3, [pc, #584]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 80014a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1ee      	bne.n	800148a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 80a4 	beq.w	8001602 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ba:	4b8c      	ldr	r3, [pc, #560]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10d      	bne.n	80014e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	4b89      	ldr	r3, [pc, #548]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	4a88      	ldr	r2, [pc, #544]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d2:	4b86      	ldr	r3, [pc, #536]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014de:	2301      	movs	r3, #1
 80014e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e2:	4b83      	ldr	r3, [pc, #524]	@ (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d118      	bne.n	8001520 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80014ee:	4b80      	ldr	r3, [pc, #512]	@ (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a7f      	ldr	r2, [pc, #508]	@ (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fbc1 	bl	8000c80 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001502:	f7ff fbbd 	bl	8000c80 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b64      	cmp	r3, #100	@ 0x64
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e12a      	b.n	800176a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001514:	4b76      	ldr	r3, [pc, #472]	@ (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x31a>
 8001528:	4b70      	ldr	r3, [pc, #448]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 800152a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800152c:	4a6f      	ldr	r2, [pc, #444]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6713      	str	r3, [r2, #112]	@ 0x70
 8001534:	e02d      	b.n	8001592 <HAL_RCC_OscConfig+0x376>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0x33c>
 800153e:	4b6b      	ldr	r3, [pc, #428]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001542:	4a6a      	ldr	r2, [pc, #424]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 8001544:	f023 0301 	bic.w	r3, r3, #1
 8001548:	6713      	str	r3, [r2, #112]	@ 0x70
 800154a:	4b68      	ldr	r3, [pc, #416]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800154e:	4a67      	ldr	r2, [pc, #412]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 8001550:	f023 0304 	bic.w	r3, r3, #4
 8001554:	6713      	str	r3, [r2, #112]	@ 0x70
 8001556:	e01c      	b.n	8001592 <HAL_RCC_OscConfig+0x376>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b05      	cmp	r3, #5
 800155e:	d10c      	bne.n	800157a <HAL_RCC_OscConfig+0x35e>
 8001560:	4b62      	ldr	r3, [pc, #392]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001564:	4a61      	ldr	r2, [pc, #388]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	6713      	str	r3, [r2, #112]	@ 0x70
 800156c:	4b5f      	ldr	r3, [pc, #380]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 800156e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001570:	4a5e      	ldr	r2, [pc, #376]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6713      	str	r3, [r2, #112]	@ 0x70
 8001578:	e00b      	b.n	8001592 <HAL_RCC_OscConfig+0x376>
 800157a:	4b5c      	ldr	r3, [pc, #368]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800157e:	4a5b      	ldr	r2, [pc, #364]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	6713      	str	r3, [r2, #112]	@ 0x70
 8001586:	4b59      	ldr	r3, [pc, #356]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800158a:	4a58      	ldr	r2, [pc, #352]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 800158c:	f023 0304 	bic.w	r3, r3, #4
 8001590:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d015      	beq.n	80015c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159a:	f7ff fb71 	bl	8000c80 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a0:	e00a      	b.n	80015b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a2:	f7ff fb6d 	bl	8000c80 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e0d8      	b.n	800176a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b8:	4b4c      	ldr	r3, [pc, #304]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 80015ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0ee      	beq.n	80015a2 <HAL_RCC_OscConfig+0x386>
 80015c4:	e014      	b.n	80015f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c6:	f7ff fb5b 	bl	8000c80 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015cc:	e00a      	b.n	80015e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ce:	f7ff fb57 	bl	8000c80 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015dc:	4293      	cmp	r3, r2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e0c2      	b.n	800176a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e4:	4b41      	ldr	r3, [pc, #260]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 80015e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1ee      	bne.n	80015ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015f0:	7dfb      	ldrb	r3, [r7, #23]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d105      	bne.n	8001602 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f6:	4b3d      	ldr	r3, [pc, #244]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	4a3c      	ldr	r2, [pc, #240]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 80015fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001600:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 80ae 	beq.w	8001768 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800160c:	4b37      	ldr	r3, [pc, #220]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 030c 	and.w	r3, r3, #12
 8001614:	2b08      	cmp	r3, #8
 8001616:	d06d      	beq.n	80016f4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d14b      	bne.n	80016b8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001620:	4b32      	ldr	r3, [pc, #200]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a31      	ldr	r2, [pc, #196]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 8001626:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800162a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162c:	f7ff fb28 	bl	8000c80 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001634:	f7ff fb24 	bl	8000c80 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e091      	b.n	800176a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001646:	4b29      	ldr	r3, [pc, #164]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69da      	ldr	r2, [r3, #28]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001660:	019b      	lsls	r3, r3, #6
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001668:	085b      	lsrs	r3, r3, #1
 800166a:	3b01      	subs	r3, #1
 800166c:	041b      	lsls	r3, r3, #16
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001674:	061b      	lsls	r3, r3, #24
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167c:	071b      	lsls	r3, r3, #28
 800167e:	491b      	ldr	r1, [pc, #108]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001684:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a18      	ldr	r2, [pc, #96]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 800168a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800168e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001690:	f7ff faf6 	bl	8000c80 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff faf2 	bl	8000c80 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e05f      	b.n	800176a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016aa:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0x47c>
 80016b6:	e057      	b.n	8001768 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0b      	ldr	r2, [pc, #44]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 80016be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c4:	f7ff fadc 	bl	8000c80 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff fad8 	bl	8000c80 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e045      	b.n	800176a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016de:	4b03      	ldr	r3, [pc, #12]	@ (80016ec <HAL_RCC_OscConfig+0x4d0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x4b0>
 80016ea:	e03d      	b.n	8001768 <HAL_RCC_OscConfig+0x54c>
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80016f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <HAL_RCC_OscConfig+0x558>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d030      	beq.n	8001764 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d129      	bne.n	8001764 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171a:	429a      	cmp	r2, r3
 800171c:	d122      	bne.n	8001764 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001724:	4013      	ands	r3, r2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800172a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800172c:	4293      	cmp	r3, r2
 800172e:	d119      	bne.n	8001764 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173a:	085b      	lsrs	r3, r3, #1
 800173c:	3b01      	subs	r3, #1
 800173e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d10f      	bne.n	8001764 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d107      	bne.n	8001764 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0d0      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001790:	4b6a      	ldr	r3, [pc, #424]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 030f 	and.w	r3, r3, #15
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d910      	bls.n	80017c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179e:	4b67      	ldr	r3, [pc, #412]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 020f 	bic.w	r2, r3, #15
 80017a6:	4965      	ldr	r1, [pc, #404]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ae:	4b63      	ldr	r3, [pc, #396]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0b8      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d020      	beq.n	800180e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d8:	4b59      	ldr	r3, [pc, #356]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4a58      	ldr	r2, [pc, #352]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 80017de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f0:	4b53      	ldr	r3, [pc, #332]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	4a52      	ldr	r2, [pc, #328]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 80017f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017fc:	4b50      	ldr	r3, [pc, #320]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	494d      	ldr	r1, [pc, #308]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d040      	beq.n	800189c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001822:	4b47      	ldr	r3, [pc, #284]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d115      	bne.n	800185a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e07f      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d107      	bne.n	800184a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183a:	4b41      	ldr	r3, [pc, #260]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d109      	bne.n	800185a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e073      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184a:	4b3d      	ldr	r3, [pc, #244]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e06b      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800185a:	4b39      	ldr	r3, [pc, #228]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f023 0203 	bic.w	r2, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4936      	ldr	r1, [pc, #216]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 8001868:	4313      	orrs	r3, r2
 800186a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800186c:	f7ff fa08 	bl	8000c80 <HAL_GetTick>
 8001870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	e00a      	b.n	800188a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001874:	f7ff fa04 	bl	8000c80 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001882:	4293      	cmp	r3, r2
 8001884:	d901      	bls.n	800188a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e053      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188a:	4b2d      	ldr	r3, [pc, #180]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 020c 	and.w	r2, r3, #12
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	429a      	cmp	r2, r3
 800189a:	d1eb      	bne.n	8001874 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800189c:	4b27      	ldr	r3, [pc, #156]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 030f 	and.w	r3, r3, #15
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d210      	bcs.n	80018cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b24      	ldr	r3, [pc, #144]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 020f 	bic.w	r2, r3, #15
 80018b2:	4922      	ldr	r1, [pc, #136]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ba:	4b20      	ldr	r3, [pc, #128]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d001      	beq.n	80018cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e032      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d008      	beq.n	80018ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d8:	4b19      	ldr	r3, [pc, #100]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4916      	ldr	r1, [pc, #88]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d009      	beq.n	800190a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018f6:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	490e      	ldr	r1, [pc, #56]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 8001906:	4313      	orrs	r3, r2
 8001908:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800190a:	f000 f821 	bl	8001950 <HAL_RCC_GetSysClockFreq>
 800190e:	4602      	mov	r2, r0
 8001910:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	091b      	lsrs	r3, r3, #4
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	490a      	ldr	r1, [pc, #40]	@ (8001944 <HAL_RCC_ClockConfig+0x1cc>)
 800191c:	5ccb      	ldrb	r3, [r1, r3]
 800191e:	fa22 f303 	lsr.w	r3, r2, r3
 8001922:	4a09      	ldr	r2, [pc, #36]	@ (8001948 <HAL_RCC_ClockConfig+0x1d0>)
 8001924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <HAL_RCC_ClockConfig+0x1d4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff f8ac 	bl	8000a88 <HAL_InitTick>

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023c00 	.word	0x40023c00
 8001940:	40023800 	.word	0x40023800
 8001944:	080078dc 	.word	0x080078dc
 8001948:	20000000 	.word	0x20000000
 800194c:	20000004 	.word	0x20000004

08001950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001954:	b094      	sub	sp, #80	@ 0x50
 8001956:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	647b      	str	r3, [r7, #68]	@ 0x44
 800195c:	2300      	movs	r3, #0
 800195e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001960:	2300      	movs	r3, #0
 8001962:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001968:	4b79      	ldr	r3, [pc, #484]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x200>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 030c 	and.w	r3, r3, #12
 8001970:	2b08      	cmp	r3, #8
 8001972:	d00d      	beq.n	8001990 <HAL_RCC_GetSysClockFreq+0x40>
 8001974:	2b08      	cmp	r3, #8
 8001976:	f200 80e1 	bhi.w	8001b3c <HAL_RCC_GetSysClockFreq+0x1ec>
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0x34>
 800197e:	2b04      	cmp	r3, #4
 8001980:	d003      	beq.n	800198a <HAL_RCC_GetSysClockFreq+0x3a>
 8001982:	e0db      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001984:	4b73      	ldr	r3, [pc, #460]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x204>)
 8001986:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001988:	e0db      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800198a:	4b72      	ldr	r3, [pc, #456]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x204>)
 800198c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800198e:	e0d8      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001990:	4b6f      	ldr	r3, [pc, #444]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x200>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001998:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800199a:	4b6d      	ldr	r3, [pc, #436]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x200>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d063      	beq.n	8001a6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	099b      	lsrs	r3, r3, #6
 80019ac:	2200      	movs	r2, #0
 80019ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80019ba:	2300      	movs	r3, #0
 80019bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80019be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019c2:	4622      	mov	r2, r4
 80019c4:	462b      	mov	r3, r5
 80019c6:	f04f 0000 	mov.w	r0, #0
 80019ca:	f04f 0100 	mov.w	r1, #0
 80019ce:	0159      	lsls	r1, r3, #5
 80019d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d4:	0150      	lsls	r0, r2, #5
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4621      	mov	r1, r4
 80019dc:	1a51      	subs	r1, r2, r1
 80019de:	6139      	str	r1, [r7, #16]
 80019e0:	4629      	mov	r1, r5
 80019e2:	eb63 0301 	sbc.w	r3, r3, r1
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019f4:	4659      	mov	r1, fp
 80019f6:	018b      	lsls	r3, r1, #6
 80019f8:	4651      	mov	r1, sl
 80019fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019fe:	4651      	mov	r1, sl
 8001a00:	018a      	lsls	r2, r1, #6
 8001a02:	4651      	mov	r1, sl
 8001a04:	ebb2 0801 	subs.w	r8, r2, r1
 8001a08:	4659      	mov	r1, fp
 8001a0a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a22:	4690      	mov	r8, r2
 8001a24:	4699      	mov	r9, r3
 8001a26:	4623      	mov	r3, r4
 8001a28:	eb18 0303 	adds.w	r3, r8, r3
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	462b      	mov	r3, r5
 8001a30:	eb49 0303 	adc.w	r3, r9, r3
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a42:	4629      	mov	r1, r5
 8001a44:	028b      	lsls	r3, r1, #10
 8001a46:	4621      	mov	r1, r4
 8001a48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	028a      	lsls	r2, r1, #10
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a56:	2200      	movs	r2, #0
 8001a58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a60:	f7fe fc38 	bl	80002d4 <__aeabi_uldivmod>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4613      	mov	r3, r2
 8001a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a6c:	e058      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6e:	4b38      	ldr	r3, [pc, #224]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	099b      	lsrs	r3, r3, #6
 8001a74:	2200      	movs	r2, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	4611      	mov	r1, r2
 8001a7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a7e:	623b      	str	r3, [r7, #32]
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a88:	4642      	mov	r2, r8
 8001a8a:	464b      	mov	r3, r9
 8001a8c:	f04f 0000 	mov.w	r0, #0
 8001a90:	f04f 0100 	mov.w	r1, #0
 8001a94:	0159      	lsls	r1, r3, #5
 8001a96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a9a:	0150      	lsls	r0, r2, #5
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4641      	mov	r1, r8
 8001aa2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001aa6:	4649      	mov	r1, r9
 8001aa8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ab8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001abc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ac0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ac4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	00eb      	lsls	r3, r5, #3
 8001ad2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ad6:	00e2      	lsls	r2, r4, #3
 8001ad8:	4614      	mov	r4, r2
 8001ada:	461d      	mov	r5, r3
 8001adc:	4643      	mov	r3, r8
 8001ade:	18e3      	adds	r3, r4, r3
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	464b      	mov	r3, r9
 8001ae4:	eb45 0303 	adc.w	r3, r5, r3
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001af6:	4629      	mov	r1, r5
 8001af8:	028b      	lsls	r3, r1, #10
 8001afa:	4621      	mov	r1, r4
 8001afc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b00:	4621      	mov	r1, r4
 8001b02:	028a      	lsls	r2, r1, #10
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	61fa      	str	r2, [r7, #28]
 8001b10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b14:	f7fe fbde 	bl	80002d4 <__aeabi_uldivmod>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b20:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	0c1b      	lsrs	r3, r3, #16
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b3a:	e002      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3750      	adds	r7, #80	@ 0x50
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	00f42400 	.word	0x00f42400

08001b58 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	@ (8001b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000000 	.word	0x20000000

08001b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b74:	f7ff fff0 	bl	8001b58 <HAL_RCC_GetHCLKFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	0a9b      	lsrs	r3, r3, #10
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	4903      	ldr	r1, [pc, #12]	@ (8001b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	080078ec 	.word	0x080078ec

08001b98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ba8:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0203 	and.w	r2, r3, #3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001bcc:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	08db      	lsrs	r3, r3, #3
 8001bd2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bda:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <HAL_RCC_GetClockConfig+0x60>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 020f 	and.w	r2, r3, #15
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	601a      	str	r2, [r3, #0]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40023c00 	.word	0x40023c00

08001bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e049      	b.n	8001ca2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f841 	bl	8001caa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3304      	adds	r3, #4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	f000 f9e8 	bl	8002010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d001      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e054      	b.n	8001d82 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a26      	ldr	r2, [pc, #152]	@ (8001d90 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d022      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d02:	d01d      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a22      	ldr	r2, [pc, #136]	@ (8001d94 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d018      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a21      	ldr	r2, [pc, #132]	@ (8001d98 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d013      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1f      	ldr	r2, [pc, #124]	@ (8001d9c <HAL_TIM_Base_Start_IT+0xdc>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00e      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1e      	ldr	r2, [pc, #120]	@ (8001da0 <HAL_TIM_Base_Start_IT+0xe0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d009      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1c      	ldr	r2, [pc, #112]	@ (8001da4 <HAL_TIM_Base_Start_IT+0xe4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d004      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001da8 <HAL_TIM_Base_Start_IT+0xe8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d115      	bne.n	8001d6c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	4b19      	ldr	r3, [pc, #100]	@ (8001dac <HAL_TIM_Base_Start_IT+0xec>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d015      	beq.n	8001d7e <HAL_TIM_Base_Start_IT+0xbe>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d58:	d011      	beq.n	8001d7e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d6a:	e008      	b.n	8001d7e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	e000      	b.n	8001d80 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40010000 	.word	0x40010000
 8001d94:	40000400 	.word	0x40000400
 8001d98:	40000800 	.word	0x40000800
 8001d9c:	40000c00 	.word	0x40000c00
 8001da0:	40010400 	.word	0x40010400
 8001da4:	40014000 	.word	0x40014000
 8001da8:	40001800 	.word	0x40001800
 8001dac:	00010007 	.word	0x00010007

08001db0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d020      	beq.n	8001e14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d01b      	beq.n	8001e14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0202 	mvn.w	r2, #2
 8001de4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f8e9 	bl	8001fd2 <HAL_TIM_IC_CaptureCallback>
 8001e00:	e005      	b.n	8001e0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8db 	bl	8001fbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f8ec 	bl	8001fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d020      	beq.n	8001e60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01b      	beq.n	8001e60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0204 	mvn.w	r2, #4
 8001e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2202      	movs	r2, #2
 8001e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f8c3 	bl	8001fd2 <HAL_TIM_IC_CaptureCallback>
 8001e4c:	e005      	b.n	8001e5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8b5 	bl	8001fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f8c6 	bl	8001fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d020      	beq.n	8001eac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01b      	beq.n	8001eac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f06f 0208 	mvn.w	r2, #8
 8001e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2204      	movs	r2, #4
 8001e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f89d 	bl	8001fd2 <HAL_TIM_IC_CaptureCallback>
 8001e98:	e005      	b.n	8001ea6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f88f 	bl	8001fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f8a0 	bl	8001fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d020      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f003 0310 	and.w	r3, r3, #16
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01b      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0210 	mvn.w	r2, #16
 8001ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2208      	movs	r2, #8
 8001ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f877 	bl	8001fd2 <HAL_TIM_IC_CaptureCallback>
 8001ee4:	e005      	b.n	8001ef2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f869 	bl	8001fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f87a 	bl	8001fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00c      	beq.n	8001f1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d007      	beq.n	8001f1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0201 	mvn.w	r2, #1
 8001f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe fd7a 	bl	8000a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d104      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00c      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d007      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f919 	bl	800217c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00c      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d007      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f911 	bl	8002190 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00c      	beq.n	8001f92 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d007      	beq.n	8001f92 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f834 	bl	8001ffa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00c      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f003 0320 	and.w	r3, r3, #32
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f06f 0220 	mvn.w	r2, #32
 8001fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f8d9 	bl	8002168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a46      	ldr	r2, [pc, #280]	@ (800213c <TIM_Base_SetConfig+0x12c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d013      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800202e:	d00f      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a43      	ldr	r2, [pc, #268]	@ (8002140 <TIM_Base_SetConfig+0x130>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00b      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a42      	ldr	r2, [pc, #264]	@ (8002144 <TIM_Base_SetConfig+0x134>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d007      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a41      	ldr	r2, [pc, #260]	@ (8002148 <TIM_Base_SetConfig+0x138>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d003      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a40      	ldr	r2, [pc, #256]	@ (800214c <TIM_Base_SetConfig+0x13c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d108      	bne.n	8002062 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a35      	ldr	r2, [pc, #212]	@ (800213c <TIM_Base_SetConfig+0x12c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d02b      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002070:	d027      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a32      	ldr	r2, [pc, #200]	@ (8002140 <TIM_Base_SetConfig+0x130>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d023      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a31      	ldr	r2, [pc, #196]	@ (8002144 <TIM_Base_SetConfig+0x134>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d01f      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a30      	ldr	r2, [pc, #192]	@ (8002148 <TIM_Base_SetConfig+0x138>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01b      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a2f      	ldr	r2, [pc, #188]	@ (800214c <TIM_Base_SetConfig+0x13c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d017      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a2e      	ldr	r2, [pc, #184]	@ (8002150 <TIM_Base_SetConfig+0x140>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d013      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a2d      	ldr	r2, [pc, #180]	@ (8002154 <TIM_Base_SetConfig+0x144>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00f      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002158 <TIM_Base_SetConfig+0x148>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00b      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a2b      	ldr	r2, [pc, #172]	@ (800215c <TIM_Base_SetConfig+0x14c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d007      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a2a      	ldr	r2, [pc, #168]	@ (8002160 <TIM_Base_SetConfig+0x150>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d003      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a29      	ldr	r2, [pc, #164]	@ (8002164 <TIM_Base_SetConfig+0x154>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d108      	bne.n	80020d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	4313      	orrs	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a10      	ldr	r2, [pc, #64]	@ (800213c <TIM_Base_SetConfig+0x12c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d003      	beq.n	8002108 <TIM_Base_SetConfig+0xf8>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a12      	ldr	r2, [pc, #72]	@ (800214c <TIM_Base_SetConfig+0x13c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d103      	bne.n	8002110 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b01      	cmp	r3, #1
 8002120:	d105      	bne.n	800212e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f023 0201 	bic.w	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	611a      	str	r2, [r3, #16]
  }
}
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40010000 	.word	0x40010000
 8002140:	40000400 	.word	0x40000400
 8002144:	40000800 	.word	0x40000800
 8002148:	40000c00 	.word	0x40000c00
 800214c:	40010400 	.word	0x40010400
 8002150:	40014000 	.word	0x40014000
 8002154:	40014400 	.word	0x40014400
 8002158:	40014800 	.word	0x40014800
 800215c:	40001800 	.word	0x40001800
 8002160:	40001c00 	.word	0x40001c00
 8002164:	40002000 	.word	0x40002000

08002168 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f103 0208 	add.w	r2, r3, #8
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f103 0208 	add.w	r2, r3, #8
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f103 0208 	add.w	r2, r3, #8
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80021d8:	f240 1019 	movw	r0, #281	@ 0x119
 80021dc:	f004 ff18 	bl	8007010 <SEGGER_SYSVIEW_RecordEndCall>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80021f6:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80021fa:	f004 ff09 	bl	8007010 <SEGGER_SYSVIEW_RecordEndCall>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221c:	d103      	bne.n	8002226 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e00c      	b.n	8002240 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3308      	adds	r3, #8
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e002      	b.n	8002234 <vListInsert+0x2e>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	429a      	cmp	r2, r3
 800223e:	d2f6      	bcs.n	800222e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 800226c:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002270:	f004 fece 	bl	8007010 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002274:	bf00      	nop
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6892      	ldr	r2, [r2, #8]
 8002292:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6852      	ldr	r2, [r2, #4]
 800229c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d103      	bne.n	80022b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	1e5a      	subs	r2, r3, #1
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4619      	mov	r1, r3
 80022c6:	f240 101d 	movw	r0, #285	@ 0x11d
 80022ca:	f004 fedd 	bl	8007088 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80022e6:	2301      	movs	r3, #1
 80022e8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10d      	bne.n	8002310 <xQueueGenericReset+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80022f4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80022f8:	b672      	cpsid	i
 80022fa:	f383 8811 	msr	BASEPRI, r3
 80022fe:	f3bf 8f6f 	isb	sy
 8002302:	f3bf 8f4f 	dsb	sy
 8002306:	b662      	cpsie	i
 8002308:	60fb      	str	r3, [r7, #12]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800230a:	bf00      	nop
 800230c:	bf00      	nop
 800230e:	e7fd      	b.n	800230c <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d05d      	beq.n	80023d2 <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800231a:	2b00      	cmp	r3, #0
 800231c:	d059      	beq.n	80023d2 <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002326:	2100      	movs	r1, #0
 8002328:	fba3 2302 	umull	r2, r3, r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d000      	beq.n	8002332 <xQueueGenericReset+0x56>
 8002330:	2101      	movs	r1, #1
 8002332:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002334:	2b00      	cmp	r3, #0
 8002336:	d14c      	bne.n	80023d2 <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 8002338:	f002 f9d4 	bl	80046e4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002344:	6939      	ldr	r1, [r7, #16]
 8002346:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	441a      	add	r2, r3
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2200      	movs	r2, #0
 8002356:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002368:	3b01      	subs	r3, #1
 800236a:	6939      	ldr	r1, [r7, #16]
 800236c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	441a      	add	r2, r3
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	22ff      	movs	r2, #255	@ 0xff
 800237c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	22ff      	movs	r2, #255	@ 0xff
 8002384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d114      	bne.n	80023b8 <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d01a      	beq.n	80023cc <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	3310      	adds	r3, #16
 800239a:	4618      	mov	r0, r3
 800239c:	f001 f9f6 	bl	800378c <xTaskRemoveFromEventList>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d012      	beq.n	80023cc <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80023a6:	4b19      	ldr	r3, [pc, #100]	@ (800240c <xQueueGenericReset+0x130>)
 80023a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	f3bf 8f4f 	dsb	sy
 80023b2:	f3bf 8f6f 	isb	sy
 80023b6:	e009      	b.n	80023cc <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	3310      	adds	r3, #16
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fef1 	bl	80021a4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	3324      	adds	r3, #36	@ 0x24
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff feec 	bl	80021a4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80023cc:	f002 f9c0 	bl	8004750 <vPortExitCritical>
 80023d0:	e001      	b.n	80023d6 <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10d      	bne.n	80023f8 <xQueueGenericReset+0x11c>
    __asm volatile
 80023dc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80023e0:	b672      	cpsid	i
 80023e2:	f383 8811 	msr	BASEPRI, r3
 80023e6:	f3bf 8f6f 	isb	sy
 80023ea:	f3bf 8f4f 	dsb	sy
 80023ee:	b662      	cpsie	i
 80023f0:	60bb      	str	r3, [r7, #8]
}
 80023f2:	bf00      	nop
 80023f4:	bf00      	nop
 80023f6:	e7fd      	b.n	80023f4 <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	4619      	mov	r1, r3
 80023fc:	2096      	movs	r0, #150	@ 0x96
 80023fe:	f004 fe43 	bl	8007088 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002402:	697b      	ldr	r3, [r7, #20]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	e000ed04 	.word	0xe000ed04

08002410 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	@ 0x28
 8002414:	af02      	add	r7, sp, #8
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	4613      	mov	r3, r2
 800241c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d02e      	beq.n	8002486 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002428:	2100      	movs	r1, #0
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	fba3 2302 	umull	r2, r3, r3, r2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d000      	beq.n	8002438 <xQueueGenericCreate+0x28>
 8002436:	2101      	movs	r1, #1
 8002438:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800243a:	2b00      	cmp	r3, #0
 800243c:	d123      	bne.n	8002486 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002446:	f113 0f55 	cmn.w	r3, #85	@ 0x55
 800244a:	d81c      	bhi.n	8002486 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	fb02 f303 	mul.w	r3, r2, r3
 8002454:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	3354      	adds	r3, #84	@ 0x54
 800245a:	4618      	mov	r0, r3
 800245c:	f002 fa7e 	bl	800495c <pvPortMalloc>
 8002460:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d01f      	beq.n	80024a8 <xQueueGenericCreate+0x98>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	3354      	adds	r3, #84	@ 0x54
 8002470:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002472:	79fa      	ldrb	r2, [r7, #7]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	4613      	mov	r3, r2
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f820 	bl	80024c4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002484:	e010      	b.n	80024a8 <xQueueGenericCreate+0x98>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10d      	bne.n	80024a8 <xQueueGenericCreate+0x98>
    __asm volatile
 800248c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002490:	b672      	cpsid	i
 8002492:	f383 8811 	msr	BASEPRI, r3
 8002496:	f3bf 8f6f 	isb	sy
 800249a:	f3bf 8f4f 	dsb	sy
 800249e:	b662      	cpsie	i
 80024a0:	613b      	str	r3, [r7, #16]
}
 80024a2:	bf00      	nop
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <xQueueGenericCreate+0x94>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f004 ff86 	bl	80073bc <SEGGER_SYSVIEW_ShrinkId>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4619      	mov	r1, r3
 80024b4:	2098      	movs	r0, #152	@ 0x98
 80024b6:	f004 fde7 	bl	8007088 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 80024ba:	69fb      	ldr	r3, [r7, #28]
    }
 80024bc:	4618      	mov	r0, r3
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d103      	bne.n	80024e0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e002      	b.n	80024e6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024f2:	2101      	movs	r1, #1
 80024f4:	69b8      	ldr	r0, [r7, #24]
 80024f6:	f7ff fef1 	bl	80022dc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
    {
        pxNewQueue->pxQueueSetContainer = NULL;
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	2200      	movs	r2, #0
 8002506:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	@ 0x30
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800251c:	2300      	movs	r3, #0
 800251e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10d      	bne.n	8002546 <xQueueReceive+0x36>
    __asm volatile
 800252a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800252e:	b672      	cpsid	i
 8002530:	f383 8811 	msr	BASEPRI, r3
 8002534:	f3bf 8f6f 	isb	sy
 8002538:	f3bf 8f4f 	dsb	sy
 800253c:	b662      	cpsie	i
 800253e:	623b      	str	r3, [r7, #32]
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	e7fd      	b.n	8002542 <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d103      	bne.n	8002554 <xQueueReceive+0x44>
 800254c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <xQueueReceive+0x48>
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <xQueueReceive+0x4a>
 8002558:	2300      	movs	r3, #0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10d      	bne.n	800257a <xQueueReceive+0x6a>
    __asm volatile
 800255e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002562:	b672      	cpsid	i
 8002564:	f383 8811 	msr	BASEPRI, r3
 8002568:	f3bf 8f6f 	isb	sy
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	b662      	cpsie	i
 8002572:	61fb      	str	r3, [r7, #28]
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	e7fd      	b.n	8002576 <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800257a:	f001 fb2f 	bl	8003bdc <xTaskGetSchedulerState>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d102      	bne.n	800258a <xQueueReceive+0x7a>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <xQueueReceive+0x7e>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <xQueueReceive+0x80>
 800258e:	2300      	movs	r3, #0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10d      	bne.n	80025b0 <xQueueReceive+0xa0>
    __asm volatile
 8002594:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002598:	b672      	cpsid	i
 800259a:	f383 8811 	msr	BASEPRI, r3
 800259e:	f3bf 8f6f 	isb	sy
 80025a2:	f3bf 8f4f 	dsb	sy
 80025a6:	b662      	cpsie	i
 80025a8:	61bb      	str	r3, [r7, #24]
}
 80025aa:	bf00      	nop
 80025ac:	bf00      	nop
 80025ae:	e7fd      	b.n	80025ac <xQueueReceive+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80025b0:	f002 f898 	bl	80046e4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d023      	beq.n	8002608 <xQueueReceive+0xf8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025c4:	f000 f902 	bl	80027cc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80025c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ca:	1e5a      	subs	r2, r3, #1
 80025cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ce:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00f      	beq.n	80025f8 <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025da:	3310      	adds	r3, #16
 80025dc:	4618      	mov	r0, r3
 80025de:	f001 f8d5 	bl	800378c <xTaskRemoveFromEventList>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d007      	beq.n	80025f8 <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80025e8:	4b42      	ldr	r3, [pc, #264]	@ (80026f4 <xQueueReceive+0x1e4>)
 80025ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80025f8:	f002 f8aa 	bl	8004750 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 80025fc:	2101      	movs	r1, #1
 80025fe:	20a4      	movs	r0, #164	@ 0xa4
 8002600:	f004 fd42 	bl	8007088 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8002604:	2301      	movs	r3, #1
 8002606:	e071      	b.n	80026ec <xQueueReceive+0x1dc>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d107      	bne.n	800261e <xQueueReceive+0x10e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800260e:	f002 f89f 	bl	8004750 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002612:	2100      	movs	r1, #0
 8002614:	20a4      	movs	r0, #164	@ 0xa4
 8002616:	f004 fd37 	bl	8007088 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 800261a:	2300      	movs	r3, #0
 800261c:	e066      	b.n	80026ec <xQueueReceive+0x1dc>
                }
                else if( xEntryTimeSet == pdFALSE )
 800261e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002620:	2b00      	cmp	r3, #0
 8002622:	d106      	bne.n	8002632 <xQueueReceive+0x122>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002624:	f107 0310 	add.w	r3, r7, #16
 8002628:	4618      	mov	r0, r3
 800262a:	f001 f991 	bl	8003950 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800262e:	2301      	movs	r3, #1
 8002630:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002632:	f002 f88d 	bl	8004750 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002636:	f000 fd49 	bl	80030cc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800263a:	f002 f853 	bl	80046e4 <vPortEnterCritical>
 800263e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002640:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002644:	b25b      	sxtb	r3, r3
 8002646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264a:	d103      	bne.n	8002654 <xQueueReceive+0x144>
 800264c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002656:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800265a:	b25b      	sxtb	r3, r3
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d103      	bne.n	800266a <xQueueReceive+0x15a>
 8002662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800266a:	f002 f871 	bl	8004750 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800266e:	1d3a      	adds	r2, r7, #4
 8002670:	f107 0310 	add.w	r3, r7, #16
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f001 f982 	bl	8003980 <xTaskCheckForTimeOut>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d123      	bne.n	80026ca <xQueueReceive+0x1ba>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002684:	f000 f927 	bl	80028d6 <prvIsQueueEmpty>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d017      	beq.n	80026be <xQueueReceive+0x1ae>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800268e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002690:	3324      	adds	r3, #36	@ 0x24
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f001 f802 	bl	80036a0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800269c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800269e:	f000 f8bb 	bl	8002818 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80026a2:	f000 fd21 	bl	80030e8 <xTaskResumeAll>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d181      	bne.n	80025b0 <xQueueReceive+0xa0>
                {
                    taskYIELD_WITHIN_API();
 80026ac:	4b11      	ldr	r3, [pc, #68]	@ (80026f4 <xQueueReceive+0x1e4>)
 80026ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	f3bf 8f4f 	dsb	sy
 80026b8:	f3bf 8f6f 	isb	sy
 80026bc:	e778      	b.n	80025b0 <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80026be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026c0:	f000 f8aa 	bl	8002818 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80026c4:	f000 fd10 	bl	80030e8 <xTaskResumeAll>
 80026c8:	e772      	b.n	80025b0 <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80026ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026cc:	f000 f8a4 	bl	8002818 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80026d0:	f000 fd0a 	bl	80030e8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026d6:	f000 f8fe 	bl	80028d6 <prvIsQueueEmpty>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f43f af67 	beq.w	80025b0 <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80026e2:	2100      	movs	r1, #0
 80026e4:	20a4      	movs	r0, #164	@ 0xa4
 80026e6:	f004 fccf 	bl	8007088 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80026ea:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3730      	adds	r7, #48	@ 0x30
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	e000ed04 	.word	0xe000ed04

080026f8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10d      	bne.n	8002732 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d14d      	bne.n	80027ba <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	4618      	mov	r0, r3
 8002724:	f001 fa7c 	bl	8003c20 <xTaskPriorityDisinherit>
 8002728:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	e043      	b.n	80027ba <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d119      	bne.n	800276c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6858      	ldr	r0, [r3, #4]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	461a      	mov	r2, r3
 8002742:	68b9      	ldr	r1, [r7, #8]
 8002744:	f005 f80a 	bl	800775c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002750:	441a      	add	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	429a      	cmp	r2, r3
 8002760:	d32b      	bcc.n	80027ba <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	e026      	b.n	80027ba <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	68d8      	ldr	r0, [r3, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	461a      	mov	r2, r3
 8002776:	68b9      	ldr	r1, [r7, #8]
 8002778:	f004 fff0 	bl	800775c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002784:	425b      	negs	r3, r3
 8002786:	441a      	add	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d207      	bcs.n	80027a8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	425b      	negs	r3, r3
 80027a2:	441a      	add	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d105      	bne.n	80027ba <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80027c2:	697b      	ldr	r3, [r7, #20]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d018      	beq.n	8002810 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	441a      	add	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d303      	bcc.n	8002800 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68d9      	ldr	r1, [r3, #12]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	461a      	mov	r2, r3
 800280a:	6838      	ldr	r0, [r7, #0]
 800280c:	f004 ffa6 	bl	800775c <memcpy>
    }
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002820:	f001 ff60 	bl	80046e4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800282a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800282c:	e01e      	b.n	800286c <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <prvUnlockQueue+0x30>
                {
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f8ed 	bl	8002a16 <prvNotifyQueueSetContainer>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d010      	beq.n	8002864 <prvUnlockQueue+0x4c>
                    {
                        /* The queue is a member of a queue set, and posting to
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
 8002842:	f001 f90d 	bl	8003a60 <vTaskMissedYield>
 8002846:	e00d      	b.n	8002864 <prvUnlockQueue+0x4c>
                else
                {
                    /* Tasks that are removed from the event list will get
                     * added to the pending ready list as the scheduler is still
                     * suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284c:	2b00      	cmp	r3, #0
 800284e:	d012      	beq.n	8002876 <prvUnlockQueue+0x5e>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3324      	adds	r3, #36	@ 0x24
 8002854:	4618      	mov	r0, r3
 8002856:	f000 ff99 	bl	800378c <xTaskRemoveFromEventList>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <prvUnlockQueue+0x4c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            vTaskMissedYield();
 8002860:	f001 f8fe 	bl	8003a60 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	3b01      	subs	r3, #1
 8002868:	b2db      	uxtb	r3, r3
 800286a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800286c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002870:	2b00      	cmp	r3, #0
 8002872:	dcdc      	bgt.n	800282e <prvUnlockQueue+0x16>
 8002874:	e000      	b.n	8002878 <prvUnlockQueue+0x60>
                        break;
 8002876:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	22ff      	movs	r2, #255	@ 0xff
 800287c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002880:	f001 ff66 	bl	8004750 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002884:	f001 ff2e 	bl	80046e4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800288e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002890:	e011      	b.n	80028b6 <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d012      	beq.n	80028c0 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3310      	adds	r3, #16
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 ff74 	bl	800378c <xTaskRemoveFromEventList>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 80028aa:	f001 f8d9 	bl	8003a60 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80028ae:	7bbb      	ldrb	r3, [r7, #14]
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80028b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	dce9      	bgt.n	8002892 <prvUnlockQueue+0x7a>
 80028be:	e000      	b.n	80028c2 <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 80028c0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	22ff      	movs	r2, #255	@ 0xff
 80028c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80028ca:	f001 ff41 	bl	8004750 <vPortExitCritical>
}
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80028de:	f001 ff01 	bl	80046e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80028ea:	2301      	movs	r3, #1
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	e001      	b.n	80028f4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80028f4:	f001 ff2c 	bl	8004750 <vPortExitCritical>

    return xReturn;
 80028f8:	68fb      	ldr	r3, [r7, #12]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10d      	bne.n	8002934 <vQueueAddToRegistry+0x30>
    __asm volatile
 8002918:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800291c:	b672      	cpsid	i
 800291e:	f383 8811 	msr	BASEPRI, r3
 8002922:	f3bf 8f6f 	isb	sy
 8002926:	f3bf 8f4f 	dsb	sy
 800292a:	b662      	cpsie	i
 800292c:	60fb      	str	r3, [r7, #12]
}
 800292e:	bf00      	nop
 8002930:	bf00      	nop
 8002932:	e7fd      	b.n	8002930 <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d024      	beq.n	8002984 <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	e01e      	b.n	800297e <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002940:	4a18      	ldr	r2, [pc, #96]	@ (80029a4 <vQueueAddToRegistry+0xa0>)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4413      	add	r3, r2
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	429a      	cmp	r2, r3
 800294e:	d105      	bne.n	800295c <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4a13      	ldr	r2, [pc, #76]	@ (80029a4 <vQueueAddToRegistry+0xa0>)
 8002956:	4413      	add	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
                    break;
 800295a:	e013      	b.n	8002984 <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <vQueueAddToRegistry+0x74>
 8002962:	4a10      	ldr	r2, [pc, #64]	@ (80029a4 <vQueueAddToRegistry+0xa0>)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d104      	bne.n	8002978 <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4a0c      	ldr	r2, [pc, #48]	@ (80029a4 <vQueueAddToRegistry+0xa0>)
 8002974:	4413      	add	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3301      	adds	r3, #1
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b07      	cmp	r3, #7
 8002982:	d9dd      	bls.n	8002940 <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8002996:	20b6      	movs	r0, #182	@ 0xb6
 8002998:	f004 fb3a 	bl	8007010 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800299c:	bf00      	nop
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20000088 	.word	0x20000088

080029a8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80029b8:	f001 fe94 	bl	80046e4 <vPortEnterCritical>
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029c2:	b25b      	sxtb	r3, r3
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d103      	bne.n	80029d2 <vQueueWaitForMessageRestricted+0x2a>
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029d8:	b25b      	sxtb	r3, r3
 80029da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029de:	d103      	bne.n	80029e8 <vQueueWaitForMessageRestricted+0x40>
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029e8:	f001 feb2 	bl	8004750 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d106      	bne.n	8002a02 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	3324      	adds	r3, #36	@ 0x24
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 fe79 	bl	80036f4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002a02:	6978      	ldr	r0, [r7, #20]
 8002a04:	f7ff ff08 	bl	8002818 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8002a08:	20b9      	movs	r0, #185	@ 0xb9
 8002a0a:	f004 fb01 	bl	8007010 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002a0e:	bf00      	nop
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b08a      	sub	sp, #40	@ 0x28
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a22:	623b      	str	r3, [r7, #32]
        BaseType_t xReturn = pdFALSE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	627b      	str	r3, [r7, #36]	@ 0x24
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10d      	bne.n	8002a4a <prvNotifyQueueSetContainer+0x34>
    __asm volatile
 8002a2e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002a32:	b672      	cpsid	i
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	b662      	cpsie	i
 8002a42:	617b      	str	r3, [r7, #20]
}
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	e7fd      	b.n	8002a46 <prvNotifyQueueSetContainer+0x30>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d30d      	bcc.n	8002a72 <prvNotifyQueueSetContainer+0x5c>
    __asm volatile
 8002a56:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002a5a:	b672      	cpsid	i
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	b662      	cpsie	i
 8002a6a:	613b      	str	r3, [r7, #16]
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	e7fd      	b.n	8002a6e <prvNotifyQueueSetContainer+0x58>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d23f      	bcs.n	8002afe <prvNotifyQueueSetContainer+0xe8>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a84:	77fb      	strb	r3, [r7, #31]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	2200      	movs	r2, #0
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	6a38      	ldr	r0, [r7, #32]
 8002a8e:	f7ff fe33 	bl	80026f8 <prvCopyDataToQueue>
 8002a92:	6278      	str	r0, [r7, #36]	@ 0x24

            if( cTxLock == queueUNLOCKED )
 8002a94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9c:	d10e      	bne.n	8002abc <prvNotifyQueueSetContainer+0xa6>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d02b      	beq.n	8002afe <prvNotifyQueueSetContainer+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	3324      	adds	r3, #36	@ 0x24
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fe6e 	bl	800378c <xTaskRemoveFromEventList>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d023      	beq.n	8002afe <prvNotifyQueueSetContainer+0xe8>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aba:	e020      	b.n	8002afe <prvNotifyQueueSetContainer+0xe8>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
 8002abc:	f000 fc50 	bl	8003360 <uxTaskGetNumberOfTasks>
 8002ac0:	61b8      	str	r0, [r7, #24]
 8002ac2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d918      	bls.n	8002afe <prvNotifyQueueSetContainer+0xe8>
 8002acc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ad0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ad2:	d10d      	bne.n	8002af0 <prvNotifyQueueSetContainer+0xda>
    __asm volatile
 8002ad4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002ad8:	b672      	cpsid	i
 8002ada:	f383 8811 	msr	BASEPRI, r3
 8002ade:	f3bf 8f6f 	isb	sy
 8002ae2:	f3bf 8f4f 	dsb	sy
 8002ae6:	b662      	cpsie	i
 8002ae8:	60fb      	str	r3, [r7, #12]
}
 8002aea:	bf00      	nop
 8002aec:	bf00      	nop
 8002aee:	e7fd      	b.n	8002aec <prvNotifyQueueSetContainer+0xd6>
 8002af0:	7ffb      	ldrb	r3, [r7, #31]
 8002af2:	3301      	adds	r3, #1
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	b25a      	sxtb	r2, r3
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002b00:	4618      	mov	r0, r3
 8002b02:	3728      	adds	r7, #40	@ 0x28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	@ 0x28
 8002b0c:	af04      	add	r7, sp, #16
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f001 ff1e 	bl	800495c <pvPortMalloc>
 8002b20:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d013      	beq.n	8002b50 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002b28:	2058      	movs	r0, #88	@ 0x58
 8002b2a:	f001 ff17 	bl	800495c <pvPortMalloc>
 8002b2e:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002b36:	2258      	movs	r2, #88	@ 0x58
 8002b38:	2100      	movs	r1, #0
 8002b3a:	6978      	ldr	r0, [r7, #20]
 8002b3c:	f004 fde2 	bl	8007704 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b46:	e005      	b.n	8002b54 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002b48:	6938      	ldr	r0, [r7, #16]
 8002b4a:	f002 f845 	bl	8004bd8 <vPortFree>
 8002b4e:	e001      	b.n	8002b54 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00d      	beq.n	8002b76 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	9303      	str	r3, [sp, #12]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	9302      	str	r3, [sp, #8]
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	9301      	str	r3, [sp, #4]
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	68b9      	ldr	r1, [r7, #8]
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f82d 	bl	8002bd0 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002b76:	697b      	ldr	r3, [r7, #20]
    }
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	9301      	str	r3, [sp, #4]
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f7ff ffb3 	bl	8002b08 <prvCreateTask>
 8002ba2:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002baa:	6938      	ldr	r0, [r7, #16]
 8002bac:	f000 f8a4 	bl	8002cf8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	e002      	b.n	8002bbc <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bba:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	20c2      	movs	r0, #194	@ 0xc2
 8002bc2:	f004 fa61 	bl	8007088 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002bc6:	697b      	ldr	r3, [r7, #20]
    }
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	461a      	mov	r2, r3
 8002be8:	21a5      	movs	r1, #165	@ 0xa5
 8002bea:	f004 fd8b 	bl	8007704 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002bf8:	440b      	add	r3, r1
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	f023 0307 	bic.w	r3, r3, #7
 8002c06:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00d      	beq.n	8002c2e <prvInitialiseNewTask+0x5e>
    __asm volatile
 8002c12:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002c16:	b672      	cpsid	i
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	b662      	cpsie	i
 8002c26:	617b      	str	r3, [r7, #20]
}
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop
 8002c2c:	e7fd      	b.n	8002c2a <prvInitialiseNewTask+0x5a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d01e      	beq.n	8002c72 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	e012      	b.n	8002c60 <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	4413      	add	r3, r2
 8002c40:	7819      	ldrb	r1, [r3, #0]
 8002c42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	4413      	add	r3, r2
 8002c48:	3334      	adds	r3, #52	@ 0x34
 8002c4a:	460a      	mov	r2, r1
 8002c4c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	4413      	add	r3, r2
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d006      	beq.n	8002c68 <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	61fb      	str	r3, [r7, #28]
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	2b09      	cmp	r3, #9
 8002c64:	d9e9      	bls.n	8002c3a <prvInitialiseNewTask+0x6a>
 8002c66:	e000      	b.n	8002c6a <prvInitialiseNewTask+0x9a>
            {
                break;
 8002c68:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d90d      	bls.n	8002c94 <prvInitialiseNewTask+0xc4>
    __asm volatile
 8002c78:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002c7c:	b672      	cpsid	i
 8002c7e:	f383 8811 	msr	BASEPRI, r3
 8002c82:	f3bf 8f6f 	isb	sy
 8002c86:	f3bf 8f4f 	dsb	sy
 8002c8a:	b662      	cpsie	i
 8002c8c:	613b      	str	r3, [r7, #16]
}
 8002c8e:	bf00      	nop
 8002c90:	bf00      	nop
 8002c92:	e7fd      	b.n	8002c90 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d901      	bls.n	8002c9e <prvInitialiseNewTask+0xce>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ca8:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cac:	3304      	adds	r3, #4
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fa9a 	bl	80021e8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb6:	3318      	adds	r3, #24
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fa95 	bl	80021e8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cc2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc6:	f1c3 0205 	rsb	r2, r3, #5
 8002cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ccc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cd2:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	68f9      	ldr	r1, [r7, #12]
 8002cd8:	69b8      	ldr	r0, [r7, #24]
 8002cda:	f001 fb9d 	bl	8004418 <pxPortInitialiseStack>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce2:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <prvInitialiseNewTask+0x120>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cee:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cf0:	bf00      	nop
 8002cf2:	3720      	adds	r7, #32
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002cf8:	b5b0      	push	{r4, r5, r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002d00:	f001 fcf0 	bl	80046e4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002d04:	4b50      	ldr	r3, [pc, #320]	@ (8002e48 <prvAddNewTaskToReadyList+0x150>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	4a4f      	ldr	r2, [pc, #316]	@ (8002e48 <prvAddNewTaskToReadyList+0x150>)
 8002d0c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002d0e:	4b4f      	ldr	r3, [pc, #316]	@ (8002e4c <prvAddNewTaskToReadyList+0x154>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d109      	bne.n	8002d2a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002d16:	4a4d      	ldr	r2, [pc, #308]	@ (8002e4c <prvAddNewTaskToReadyList+0x154>)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d1c:	4b4a      	ldr	r3, [pc, #296]	@ (8002e48 <prvAddNewTaskToReadyList+0x150>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d110      	bne.n	8002d46 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002d24:	f000 fec0 	bl	8003aa8 <prvInitialiseTaskLists>
 8002d28:	e00d      	b.n	8002d46 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002d2a:	4b49      	ldr	r3, [pc, #292]	@ (8002e50 <prvAddNewTaskToReadyList+0x158>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d32:	4b46      	ldr	r3, [pc, #280]	@ (8002e4c <prvAddNewTaskToReadyList+0x154>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d802      	bhi.n	8002d46 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002d40:	4a42      	ldr	r2, [pc, #264]	@ (8002e4c <prvAddNewTaskToReadyList+0x154>)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002d46:	4b43      	ldr	r3, [pc, #268]	@ (8002e54 <prvAddNewTaskToReadyList+0x15c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	4a41      	ldr	r2, [pc, #260]	@ (8002e54 <prvAddNewTaskToReadyList+0x15c>)
 8002d4e:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d50:	4b40      	ldr	r3, [pc, #256]	@ (8002e54 <prvAddNewTaskToReadyList+0x15c>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d016      	beq.n	8002d8c <prvAddNewTaskToReadyList+0x94>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f004 fa05 	bl	8007170 <SEGGER_SYSVIEW_OnTaskCreate>
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d76:	461d      	mov	r5, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	461c      	mov	r4, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d82:	1ae3      	subs	r3, r4, r3
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	462b      	mov	r3, r5
 8002d88:	f002 f92c 	bl	8004fe4 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f004 fa72 	bl	8007278 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d98:	2201      	movs	r2, #1
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e58 <prvAddNewTaskToReadyList+0x160>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	4a2d      	ldr	r2, [pc, #180]	@ (8002e58 <prvAddNewTaskToReadyList+0x160>)
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002daa:	492c      	ldr	r1, [pc, #176]	@ (8002e5c <prvAddNewTaskToReadyList+0x164>)
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	3304      	adds	r3, #4
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	609a      	str	r2, [r3, #8]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	3204      	adds	r2, #4
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	1d1a      	adds	r2, r3, #4
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4a1c      	ldr	r2, [pc, #112]	@ (8002e5c <prvAddNewTaskToReadyList+0x164>)
 8002dea:	441a      	add	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	615a      	str	r2, [r3, #20]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002df4:	4919      	ldr	r1, [pc, #100]	@ (8002e5c <prvAddNewTaskToReadyList+0x164>)
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e06:	1c59      	adds	r1, r3, #1
 8002e08:	4814      	ldr	r0, [pc, #80]	@ (8002e5c <prvAddNewTaskToReadyList+0x164>)
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4403      	add	r3, r0
 8002e14:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002e16:	f001 fc9b 	bl	8004750 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e50 <prvAddNewTaskToReadyList+0x158>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00e      	beq.n	8002e40 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8002e22:	4b0a      	ldr	r3, [pc, #40]	@ (8002e4c <prvAddNewTaskToReadyList+0x154>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d207      	bcs.n	8002e40 <prvAddNewTaskToReadyList+0x148>
 8002e30:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <prvAddNewTaskToReadyList+0x168>)
 8002e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bdb0      	pop	{r4, r5, r7, pc}
 8002e48:	200001a0 	.word	0x200001a0
 8002e4c:	200000c8 	.word	0x200000c8
 8002e50:	200001ac 	.word	0x200001ac
 8002e54:	200001bc 	.word	0x200001bc
 8002e58:	200001a8 	.word	0x200001a8
 8002e5c:	200000cc 	.word	0x200000cc
 8002e60:	e000ed04 	.word	0xe000ed04

08002e64 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	@ 0x28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );

        configASSERT( pxPreviousWakeTime );
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10d      	bne.n	8002e94 <xTaskDelayUntil+0x30>
    __asm volatile
 8002e78:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002e7c:	b672      	cpsid	i
 8002e7e:	f383 8811 	msr	BASEPRI, r3
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	f3bf 8f4f 	dsb	sy
 8002e8a:	b662      	cpsie	i
 8002e8c:	617b      	str	r3, [r7, #20]
}
 8002e8e:	bf00      	nop
 8002e90:	bf00      	nop
 8002e92:	e7fd      	b.n	8002e90 <xTaskDelayUntil+0x2c>
        configASSERT( ( xTimeIncrement > 0U ) );
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10d      	bne.n	8002eb6 <xTaskDelayUntil+0x52>
    __asm volatile
 8002e9a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002e9e:	b672      	cpsid	i
 8002ea0:	f383 8811 	msr	BASEPRI, r3
 8002ea4:	f3bf 8f6f 	isb	sy
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	b662      	cpsie	i
 8002eae:	613b      	str	r3, [r7, #16]
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	e7fd      	b.n	8002eb2 <xTaskDelayUntil+0x4e>

        vTaskSuspendAll();
 8002eb6:	f000 f909 	bl	80030cc <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002eba:	4b2d      	ldr	r3, [pc, #180]	@ (8002f70 <xTaskDelayUntil+0x10c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	623b      	str	r3, [r7, #32]

            configASSERT( uxSchedulerSuspended == 1U );
 8002ec0:	4b2c      	ldr	r3, [pc, #176]	@ (8002f74 <xTaskDelayUntil+0x110>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d00d      	beq.n	8002ee4 <xTaskDelayUntil+0x80>
    __asm volatile
 8002ec8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002ecc:	b672      	cpsid	i
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	b662      	cpsie	i
 8002edc:	60fb      	str	r3, [r7, #12]
}
 8002ede:	bf00      	nop
 8002ee0:	bf00      	nop
 8002ee2:	e7fd      	b.n	8002ee0 <xTaskDelayUntil+0x7c>

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	4413      	add	r3, r2
 8002eec:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6a3a      	ldr	r2, [r7, #32]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d20b      	bcs.n	8002f10 <xTaskDelayUntil+0xac>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d211      	bcs.n	8002f26 <xTaskDelayUntil+0xc2>
 8002f02:	69fa      	ldr	r2, [r7, #28]
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d90d      	bls.n	8002f26 <xTaskDelayUntil+0xc2>
                {
                    xShouldDelay = pdTRUE;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f0e:	e00a      	b.n	8002f26 <xTaskDelayUntil+0xc2>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	69fa      	ldr	r2, [r7, #28]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d303      	bcc.n	8002f22 <xTaskDelayUntil+0xbe>
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d901      	bls.n	8002f26 <xTaskDelayUntil+0xc2>
                {
                    xShouldDelay = pdTRUE;
 8002f22:	2301      	movs	r3, #1
 8002f24:	627b      	str	r3, [r7, #36]	@ 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d006      	beq.n	8002f40 <xTaskDelayUntil+0xdc>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002f32:	69fa      	ldr	r2, [r7, #28]
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 ff24 	bl	8003d88 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002f40:	f000 f8d2 	bl	80030e8 <xTaskResumeAll>
 8002f44:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d107      	bne.n	8002f5c <xTaskDelayUntil+0xf8>
        {
            taskYIELD_WITHIN_API();
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f78 <xTaskDelayUntil+0x114>)
 8002f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskDelayUntil( xShouldDelay );
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	4619      	mov	r1, r3
 8002f60:	20c4      	movs	r0, #196	@ 0xc4
 8002f62:	f004 f891 	bl	8007088 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xShouldDelay;
 8002f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3728      	adds	r7, #40	@ 0x28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	200001a4 	.word	0x200001a4
 8002f74:	200001c8 	.word	0x200001c8
 8002f78:	e000ed04 	.word	0xe000ed04

08002f7c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	@ 0x28
 8002f80:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8002f82:	2301      	movs	r3, #1
 8002f84:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	e011      	b.n	8002fb4 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002f90:	4a1c      	ldr	r2, [pc, #112]	@ (8003004 <prvCreateIdleTasks+0x88>)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	4413      	add	r3, r2
 8002f96:	7819      	ldrb	r1, [r3, #0]
 8002f98:	1d3a      	adds	r2, r7, #4
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	460a      	mov	r2, r1
 8002fa0:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002fa2:	1d3a      	adds	r2, r7, #4
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d006      	beq.n	8002fbc <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2b09      	cmp	r3, #9
 8002fb8:	ddea      	ble.n	8002f90 <prvCreateIdleTasks+0x14>
 8002fba:	e000      	b.n	8002fbe <prvCreateIdleTasks+0x42>
        {
            break;
 8002fbc:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	e015      	b.n	8002ff0 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002fc4:	4b10      	ldr	r3, [pc, #64]	@ (8003008 <prvCreateIdleTasks+0x8c>)
 8002fc6:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4a0f      	ldr	r2, [pc, #60]	@ (800300c <prvCreateIdleTasks+0x90>)
 8002fce:	4413      	add	r3, r2
 8002fd0:	1d39      	adds	r1, r7, #4
 8002fd2:	9301      	str	r3, [sp, #4]
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	2300      	movs	r3, #0
 8002fda:	2282      	movs	r2, #130	@ 0x82
 8002fdc:	6938      	ldr	r0, [r7, #16]
 8002fde:	f7ff fdcf 	bl	8002b80 <xTaskCreate>
 8002fe2:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d006      	beq.n	8002ff8 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	3301      	adds	r3, #1
 8002fee:	61bb      	str	r3, [r7, #24]
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	dde6      	ble.n	8002fc4 <prvCreateIdleTasks+0x48>
 8002ff6:	e000      	b.n	8002ffa <prvCreateIdleTasks+0x7e>
        {
            break;
 8002ff8:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3720      	adds	r7, #32
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	080077f4 	.word	0x080077f4
 8003008:	08003a79 	.word	0x08003a79
 800300c:	200001c4 	.word	0x200001c4

08003010 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8003016:	f7ff ffb1 	bl	8002f7c <prvCreateIdleTasks>
 800301a:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d102      	bne.n	8003028 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8003022:	f000 ff3f 	bl	8003ea4 <xTimerCreateTimerTask>
 8003026:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d126      	bne.n	800307c <vTaskStartScheduler+0x6c>
    __asm volatile
 800302e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003032:	b672      	cpsid	i
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	b662      	cpsie	i
 8003042:	60bb      	str	r3, [r7, #8]
}
 8003044:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003046:	4b1b      	ldr	r3, [pc, #108]	@ (80030b4 <vTaskStartScheduler+0xa4>)
 8003048:	f04f 32ff 	mov.w	r2, #4294967295
 800304c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800304e:	4b1a      	ldr	r3, [pc, #104]	@ (80030b8 <vTaskStartScheduler+0xa8>)
 8003050:	2201      	movs	r2, #1
 8003052:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003054:	4b19      	ldr	r3, [pc, #100]	@ (80030bc <vTaskStartScheduler+0xac>)
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800305a:	4b19      	ldr	r3, [pc, #100]	@ (80030c0 <vTaskStartScheduler+0xb0>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	4b19      	ldr	r3, [pc, #100]	@ (80030c4 <vTaskStartScheduler+0xb4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d102      	bne.n	800306c <vTaskStartScheduler+0x5c>
 8003066:	f004 f867 	bl	8007138 <SEGGER_SYSVIEW_OnIdle>
 800306a:	e004      	b.n	8003076 <vTaskStartScheduler+0x66>
 800306c:	4b15      	ldr	r3, [pc, #84]	@ (80030c4 <vTaskStartScheduler+0xb4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f004 f8bf 	bl	80071f4 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8003076:	f001 fa65 	bl	8004544 <xPortStartScheduler>
 800307a:	e011      	b.n	80030a0 <vTaskStartScheduler+0x90>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003082:	d10d      	bne.n	80030a0 <vTaskStartScheduler+0x90>
    __asm volatile
 8003084:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003088:	b672      	cpsid	i
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	b662      	cpsie	i
 8003098:	607b      	str	r3, [r7, #4]
}
 800309a:	bf00      	nop
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <vTaskStartScheduler+0x8c>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80030a0:	4b09      	ldr	r3, [pc, #36]	@ (80030c8 <vTaskStartScheduler+0xb8>)
 80030a2:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 80030a4:	20cd      	movs	r0, #205	@ 0xcd
 80030a6:	f003 ffb3 	bl	8007010 <SEGGER_SYSVIEW_RecordEndCall>
}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	200001c0 	.word	0x200001c0
 80030b8:	200001ac 	.word	0x200001ac
 80030bc:	200001a4 	.word	0x200001a4
 80030c0:	200001c4 	.word	0x200001c4
 80030c4:	200000c8 	.word	0x200000c8
 80030c8:	2000000c 	.word	0x2000000c

080030cc <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80030d0:	4b04      	ldr	r3, [pc, #16]	@ (80030e4 <vTaskSuspendAll+0x18>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3301      	adds	r3, #1
 80030d6:	4a03      	ldr	r2, [pc, #12]	@ (80030e4 <vTaskSuspendAll+0x18>)
 80030d8:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 80030da:	20cf      	movs	r0, #207	@ 0xcf
 80030dc:	f003 ff98 	bl	8007010 <SEGGER_SYSVIEW_RecordEndCall>
}
 80030e0:	bf00      	nop
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	200001c8 	.word	0x200001c8

080030e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80030f6:	f001 faf5 	bl	80046e4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80030fe:	4b7b      	ldr	r3, [pc, #492]	@ (80032ec <xTaskResumeAll+0x204>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10d      	bne.n	8003122 <xTaskResumeAll+0x3a>
    __asm volatile
 8003106:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800310a:	b672      	cpsid	i
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	b662      	cpsie	i
 800311a:	603b      	str	r3, [r7, #0]
}
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	e7fd      	b.n	800311e <xTaskResumeAll+0x36>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003122:	4b72      	ldr	r3, [pc, #456]	@ (80032ec <xTaskResumeAll+0x204>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	3b01      	subs	r3, #1
 8003128:	4a70      	ldr	r2, [pc, #448]	@ (80032ec <xTaskResumeAll+0x204>)
 800312a:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800312c:	4b6f      	ldr	r3, [pc, #444]	@ (80032ec <xTaskResumeAll+0x204>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 80ce 	bne.w	80032d2 <xTaskResumeAll+0x1ea>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003136:	4b6e      	ldr	r3, [pc, #440]	@ (80032f0 <xTaskResumeAll+0x208>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80c9 	beq.w	80032d2 <xTaskResumeAll+0x1ea>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003140:	e092      	b.n	8003268 <xTaskResumeAll+0x180>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003142:	4b6c      	ldr	r3, [pc, #432]	@ (80032f4 <xTaskResumeAll+0x20c>)
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	6a12      	ldr	r2, [r2, #32]
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	69d2      	ldr	r2, [r2, #28]
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	3318      	adds	r3, #24
 800316c:	429a      	cmp	r2, r3
 800316e:	d103      	bne.n	8003178 <xTaskResumeAll+0x90>
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	6a1a      	ldr	r2, [r3, #32]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	605a      	str	r2, [r3, #4]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	2200      	movs	r2, #0
 800317c:	629a      	str	r2, [r3, #40]	@ 0x28
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	1e5a      	subs	r2, r3, #1
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	68d2      	ldr	r2, [r2, #12]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	6892      	ldr	r2, [r2, #8]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3304      	adds	r3, #4
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d103      	bne.n	80031b6 <xTaskResumeAll+0xce>
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	2200      	movs	r2, #0
 80031ba:	615a      	str	r2, [r3, #20]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	1e5a      	subs	r2, r3, #1
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f004 f855 	bl	8007278 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d2:	2201      	movs	r2, #1
 80031d4:	409a      	lsls	r2, r3
 80031d6:	4b48      	ldr	r3, [pc, #288]	@ (80032f8 <xTaskResumeAll+0x210>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4313      	orrs	r3, r2
 80031dc:	4a46      	ldr	r2, [pc, #280]	@ (80032f8 <xTaskResumeAll+0x210>)
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e4:	4945      	ldr	r1, [pc, #276]	@ (80032fc <xTaskResumeAll+0x214>)
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	3304      	adds	r3, #4
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	60da      	str	r2, [r3, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	3204      	adds	r2, #4
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	1d1a      	adds	r2, r3, #4
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	609a      	str	r2, [r3, #8]
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4a36      	ldr	r2, [pc, #216]	@ (80032fc <xTaskResumeAll+0x214>)
 8003224:	441a      	add	r2, r3
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	615a      	str	r2, [r3, #20]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800322e:	4933      	ldr	r1, [pc, #204]	@ (80032fc <xTaskResumeAll+0x214>)
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003240:	1c59      	adds	r1, r3, #1
 8003242:	482e      	ldr	r0, [pc, #184]	@ (80032fc <xTaskResumeAll+0x214>)
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4403      	add	r3, r0
 800324e:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003254:	4b2a      	ldr	r3, [pc, #168]	@ (8003300 <xTaskResumeAll+0x218>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325a:	429a      	cmp	r2, r3
 800325c:	d904      	bls.n	8003268 <xTaskResumeAll+0x180>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800325e:	4a29      	ldr	r2, [pc, #164]	@ (8003304 <xTaskResumeAll+0x21c>)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	2101      	movs	r1, #1
 8003264:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003268:	4b22      	ldr	r3, [pc, #136]	@ (80032f4 <xTaskResumeAll+0x20c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	f47f af68 	bne.w	8003142 <xTaskResumeAll+0x5a>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <xTaskResumeAll+0x194>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003278:	f000 fc94 	bl	8003ba4 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800327c:	4b22      	ldr	r3, [pc, #136]	@ (8003308 <xTaskResumeAll+0x220>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d012      	beq.n	80032ae <xTaskResumeAll+0x1c6>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003288:	f000 f878 	bl	800337c <xTaskIncrementTick>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d004      	beq.n	800329c <xTaskResumeAll+0x1b4>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003292:	4a1c      	ldr	r2, [pc, #112]	@ (8003304 <xTaskResumeAll+0x21c>)
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	2101      	movs	r1, #1
 8003298:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	3b01      	subs	r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1ef      	bne.n	8003288 <xTaskResumeAll+0x1a0>

                            xPendedTicks = 0;
 80032a8:	4b17      	ldr	r3, [pc, #92]	@ (8003308 <xTaskResumeAll+0x220>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80032ae:	4a15      	ldr	r2, [pc, #84]	@ (8003304 <xTaskResumeAll+0x21c>)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00b      	beq.n	80032d2 <xTaskResumeAll+0x1ea>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80032ba:	2301      	movs	r3, #1
 80032bc:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80032be:	4b10      	ldr	r3, [pc, #64]	@ (8003300 <xTaskResumeAll+0x218>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4b12      	ldr	r3, [pc, #72]	@ (800330c <xTaskResumeAll+0x224>)
 80032c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80032d2:	f001 fa3d 	bl	8004750 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	4619      	mov	r1, r3
 80032da:	20d0      	movs	r0, #208	@ 0xd0
 80032dc:	f003 fed4 	bl	8007088 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 80032e0:	69bb      	ldr	r3, [r7, #24]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3720      	adds	r7, #32
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	200001c8 	.word	0x200001c8
 80032f0:	200001a0 	.word	0x200001a0
 80032f4:	20000160 	.word	0x20000160
 80032f8:	200001a8 	.word	0x200001a8
 80032fc:	200000cc 	.word	0x200000cc
 8003300:	200000c8 	.word	0x200000c8
 8003304:	200001b4 	.word	0x200001b4
 8003308:	200001b0 	.word	0x200001b0
 800330c:	e000ed04 	.word	0xe000ed04

08003310 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003316:	4b06      	ldr	r3, [pc, #24]	@ (8003330 <xTaskGetTickCount+0x20>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	20d1      	movs	r0, #209	@ 0xd1
 8003320:	f003 feb2 	bl	8007088 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003324:	687b      	ldr	r3, [r7, #4]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	200001a4 	.word	0x200001a4

08003334 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800333a:	f001 fac9 	bl	80048d0 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800333e:	2300      	movs	r3, #0
 8003340:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003342:	4b06      	ldr	r3, [pc, #24]	@ (800335c <xTaskGetTickCountFromISR+0x28>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8003348:	6839      	ldr	r1, [r7, #0]
 800334a:	20d2      	movs	r0, #210	@ 0xd2
 800334c:	f003 fe9c 	bl	8007088 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003350:	683b      	ldr	r3, [r7, #0]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	200001a4 	.word	0x200001a4

08003360 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
    traceENTER_uxTaskGetNumberOfTasks();

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );
 8003364:	4b04      	ldr	r3, [pc, #16]	@ (8003378 <uxTaskGetNumberOfTasks+0x18>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4619      	mov	r1, r3
 800336a:	20d3      	movs	r0, #211	@ 0xd3
 800336c:	f003 fe8c 	bl	8007088 <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxCurrentNumberOfTasks;
 8003370:	4b01      	ldr	r3, [pc, #4]	@ (8003378 <uxTaskGetNumberOfTasks+0x18>)
 8003372:	681b      	ldr	r3, [r3, #0]
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}
 8003378:	200001a0 	.word	0x200001a0

0800337c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08a      	sub	sp, #40	@ 0x28
 8003380:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003386:	4b84      	ldr	r3, [pc, #528]	@ (8003598 <xTaskIncrementTick+0x21c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	f040 80f5 	bne.w	800357a <xTaskIncrementTick+0x1fe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003390:	4b82      	ldr	r3, [pc, #520]	@ (800359c <xTaskIncrementTick+0x220>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3301      	adds	r3, #1
 8003396:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003398:	4a80      	ldr	r2, [pc, #512]	@ (800359c <xTaskIncrementTick+0x220>)
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d123      	bne.n	80033ec <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 80033a4:	4b7e      	ldr	r3, [pc, #504]	@ (80035a0 <xTaskIncrementTick+0x224>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00d      	beq.n	80033ca <xTaskIncrementTick+0x4e>
    __asm volatile
 80033ae:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80033b2:	b672      	cpsid	i
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	b662      	cpsie	i
 80033c2:	607b      	str	r3, [r7, #4]
}
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
 80033c8:	e7fd      	b.n	80033c6 <xTaskIncrementTick+0x4a>
 80033ca:	4b75      	ldr	r3, [pc, #468]	@ (80035a0 <xTaskIncrementTick+0x224>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	61fb      	str	r3, [r7, #28]
 80033d0:	4b74      	ldr	r3, [pc, #464]	@ (80035a4 <xTaskIncrementTick+0x228>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a72      	ldr	r2, [pc, #456]	@ (80035a0 <xTaskIncrementTick+0x224>)
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	4a72      	ldr	r2, [pc, #456]	@ (80035a4 <xTaskIncrementTick+0x228>)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b72      	ldr	r3, [pc, #456]	@ (80035a8 <xTaskIncrementTick+0x22c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	3301      	adds	r3, #1
 80033e4:	4a70      	ldr	r2, [pc, #448]	@ (80035a8 <xTaskIncrementTick+0x22c>)
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	f000 fbdc 	bl	8003ba4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80033ec:	4b6f      	ldr	r3, [pc, #444]	@ (80035ac <xTaskIncrementTick+0x230>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6a3a      	ldr	r2, [r7, #32]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	f0c0 80ac 	bcc.w	8003550 <xTaskIncrementTick+0x1d4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033f8:	4b69      	ldr	r3, [pc, #420]	@ (80035a0 <xTaskIncrementTick+0x224>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d104      	bne.n	800340c <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003402:	4b6a      	ldr	r3, [pc, #424]	@ (80035ac <xTaskIncrementTick+0x230>)
 8003404:	f04f 32ff 	mov.w	r2, #4294967295
 8003408:	601a      	str	r2, [r3, #0]
                    break;
 800340a:	e0a1      	b.n	8003550 <xTaskIncrementTick+0x1d4>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800340c:	4b64      	ldr	r3, [pc, #400]	@ (80035a0 <xTaskIncrementTick+0x224>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800341c:	6a3a      	ldr	r2, [r7, #32]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	429a      	cmp	r2, r3
 8003422:	d203      	bcs.n	800342c <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003424:	4a61      	ldr	r2, [pc, #388]	@ (80035ac <xTaskIncrementTick+0x230>)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	6013      	str	r3, [r2, #0]
                        break;
 800342a:	e091      	b.n	8003550 <xTaskIncrementTick+0x1d4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	68d2      	ldr	r2, [r2, #12]
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	6892      	ldr	r2, [r2, #8]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	3304      	adds	r3, #4
 800344e:	429a      	cmp	r2, r3
 8003450:	d103      	bne.n	800345a <xTaskIncrementTick+0xde>
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	2200      	movs	r2, #0
 800345e:	615a      	str	r2, [r3, #20]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	1e5a      	subs	r2, r3, #1
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346e:	2b00      	cmp	r3, #0
 8003470:	d01e      	beq.n	80034b0 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	6a12      	ldr	r2, [r2, #32]
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	69d2      	ldr	r2, [r2, #28]
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	3318      	adds	r3, #24
 8003494:	429a      	cmp	r2, r3
 8003496:	d103      	bne.n	80034a0 <xTaskIncrementTick+0x124>
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	6a1a      	ldr	r2, [r3, #32]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	2200      	movs	r2, #0
 80034a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	1e5a      	subs	r2, r3, #1
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f003 fee0 	bl	8007278 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034bc:	2201      	movs	r2, #1
 80034be:	409a      	lsls	r2, r3
 80034c0:	4b3b      	ldr	r3, [pc, #236]	@ (80035b0 <xTaskIncrementTick+0x234>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	4a3a      	ldr	r2, [pc, #232]	@ (80035b0 <xTaskIncrementTick+0x234>)
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ce:	4939      	ldr	r1, [pc, #228]	@ (80035b4 <xTaskIncrementTick+0x238>)
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	3304      	adds	r3, #4
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	609a      	str	r2, [r3, #8]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	3204      	adds	r2, #4
 80034f6:	605a      	str	r2, [r3, #4]
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	1d1a      	adds	r2, r3, #4
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4a29      	ldr	r2, [pc, #164]	@ (80035b4 <xTaskIncrementTick+0x238>)
 800350e:	441a      	add	r2, r3
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	615a      	str	r2, [r3, #20]
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003518:	4926      	ldr	r1, [pc, #152]	@ (80035b4 <xTaskIncrementTick+0x238>)
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800352a:	1c59      	adds	r1, r3, #1
 800352c:	4821      	ldr	r0, [pc, #132]	@ (80035b4 <xTaskIncrementTick+0x238>)
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4403      	add	r3, r0
 8003538:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800353e:	4b1e      	ldr	r3, [pc, #120]	@ (80035b8 <xTaskIncrementTick+0x23c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003544:	429a      	cmp	r2, r3
 8003546:	f67f af57 	bls.w	80033f8 <xTaskIncrementTick+0x7c>
                            {
                                xSwitchRequired = pdTRUE;
 800354a:	2301      	movs	r3, #1
 800354c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800354e:	e753      	b.n	80033f8 <xTaskIncrementTick+0x7c>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8003550:	4b19      	ldr	r3, [pc, #100]	@ (80035b8 <xTaskIncrementTick+0x23c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003556:	4917      	ldr	r1, [pc, #92]	@ (80035b4 <xTaskIncrementTick+0x238>)
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d901      	bls.n	800356c <xTaskIncrementTick+0x1f0>
                {
                    xSwitchRequired = pdTRUE;
 8003568:	2301      	movs	r3, #1
 800356a:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800356c:	4b13      	ldr	r3, [pc, #76]	@ (80035bc <xTaskIncrementTick+0x240>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d007      	beq.n	8003584 <xTaskIncrementTick+0x208>
                {
                    xSwitchRequired = pdTRUE;
 8003574:	2301      	movs	r3, #1
 8003576:	627b      	str	r3, [r7, #36]	@ 0x24
 8003578:	e004      	b.n	8003584 <xTaskIncrementTick+0x208>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800357a:	4b11      	ldr	r3, [pc, #68]	@ (80035c0 <xTaskIncrementTick+0x244>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3301      	adds	r3, #1
 8003580:	4a0f      	ldr	r2, [pc, #60]	@ (80035c0 <xTaskIncrementTick+0x244>)
 8003582:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8003584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003586:	4619      	mov	r1, r3
 8003588:	20db      	movs	r0, #219	@ 0xdb
 800358a:	f003 fd7d 	bl	8007088 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003590:	4618      	mov	r0, r3
 8003592:	3728      	adds	r7, #40	@ 0x28
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	200001c8 	.word	0x200001c8
 800359c:	200001a4 	.word	0x200001a4
 80035a0:	20000158 	.word	0x20000158
 80035a4:	2000015c 	.word	0x2000015c
 80035a8:	200001b8 	.word	0x200001b8
 80035ac:	200001c0 	.word	0x200001c0
 80035b0:	200001a8 	.word	0x200001a8
 80035b4:	200000cc 	.word	0x200000cc
 80035b8:	200000c8 	.word	0x200000c8
 80035bc:	200001b4 	.word	0x200001b4
 80035c0:	200001b0 	.word	0x200001b0

080035c4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80035ca:	4b2f      	ldr	r3, [pc, #188]	@ (8003688 <vTaskSwitchContext+0xc4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80035d2:	4b2e      	ldr	r3, [pc, #184]	@ (800368c <vTaskSwitchContext+0xc8>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80035d8:	e051      	b.n	800367e <vTaskSwitchContext+0xba>
            xYieldPendings[ 0 ] = pdFALSE;
 80035da:	4b2c      	ldr	r3, [pc, #176]	@ (800368c <vTaskSwitchContext+0xc8>)
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80035e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003690 <vTaskSwitchContext+0xcc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	fab3 f383 	clz	r3, r3
 80035ec:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 80035ee:	7afb      	ldrb	r3, [r7, #11]
 80035f0:	f1c3 031f 	rsb	r3, r3, #31
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	4927      	ldr	r1, [pc, #156]	@ (8003694 <vTaskSwitchContext+0xd0>)
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10d      	bne.n	8003626 <vTaskSwitchContext+0x62>
    __asm volatile
 800360a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800360e:	b672      	cpsid	i
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	b662      	cpsie	i
 800361e:	607b      	str	r3, [r7, #4]
}
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	e7fd      	b.n	8003622 <vTaskSwitchContext+0x5e>
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4a18      	ldr	r2, [pc, #96]	@ (8003694 <vTaskSwitchContext+0xd0>)
 8003632:	4413      	add	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	3308      	adds	r3, #8
 8003648:	429a      	cmp	r2, r3
 800364a:	d103      	bne.n	8003654 <vTaskSwitchContext+0x90>
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	605a      	str	r2, [r3, #4]
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	4a0f      	ldr	r2, [pc, #60]	@ (8003698 <vTaskSwitchContext+0xd4>)
 800365c:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 800365e:	4b0f      	ldr	r3, [pc, #60]	@ (800369c <vTaskSwitchContext+0xd8>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	4b0d      	ldr	r3, [pc, #52]	@ (8003698 <vTaskSwitchContext+0xd4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d102      	bne.n	8003670 <vTaskSwitchContext+0xac>
 800366a:	f003 fd65 	bl	8007138 <SEGGER_SYSVIEW_OnIdle>
 800366e:	e004      	b.n	800367a <vTaskSwitchContext+0xb6>
 8003670:	4b09      	ldr	r3, [pc, #36]	@ (8003698 <vTaskSwitchContext+0xd4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f003 fdbd 	bl	80071f4 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800367a:	4b07      	ldr	r3, [pc, #28]	@ (8003698 <vTaskSwitchContext+0xd4>)
 800367c:	681b      	ldr	r3, [r3, #0]
    }
 800367e:	bf00      	nop
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	200001c8 	.word	0x200001c8
 800368c:	200001b4 	.word	0x200001b4
 8003690:	200001a8 	.word	0x200001a8
 8003694:	200000cc 	.word	0x200000cc
 8003698:	200000c8 	.word	0x200000c8
 800369c:	200001c4 	.word	0x200001c4

080036a0 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10d      	bne.n	80036cc <vTaskPlaceOnEventList+0x2c>
    __asm volatile
 80036b0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80036b4:	b672      	cpsid	i
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	b662      	cpsie	i
 80036c4:	60fb      	str	r3, [r7, #12]
}
 80036c6:	bf00      	nop
 80036c8:	bf00      	nop
 80036ca:	e7fd      	b.n	80036c8 <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036cc:	4b08      	ldr	r3, [pc, #32]	@ (80036f0 <vTaskPlaceOnEventList+0x50>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3318      	adds	r3, #24
 80036d2:	4619      	mov	r1, r3
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7fe fd96 	bl	8002206 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036da:	2101      	movs	r1, #1
 80036dc:	6838      	ldr	r0, [r7, #0]
 80036de:	f000 fb53 	bl	8003d88 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 80036e2:	20e1      	movs	r0, #225	@ 0xe1
 80036e4:	f003 fc94 	bl	8007010 <SEGGER_SYSVIEW_RecordEndCall>
}
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	200000c8 	.word	0x200000c8

080036f4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10d      	bne.n	8003722 <vTaskPlaceOnEventListRestricted+0x2e>
    __asm volatile
 8003706:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800370a:	b672      	cpsid	i
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	b662      	cpsie	i
 800371a:	613b      	str	r3, [r7, #16]
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	e7fd      	b.n	800371e <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	4b17      	ldr	r3, [pc, #92]	@ (8003788 <vTaskPlaceOnEventListRestricted+0x94>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	61da      	str	r2, [r3, #28]
 8003730:	4b15      	ldr	r3, [pc, #84]	@ (8003788 <vTaskPlaceOnEventListRestricted+0x94>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	6892      	ldr	r2, [r2, #8]
 8003738:	621a      	str	r2, [r3, #32]
 800373a:	4b13      	ldr	r3, [pc, #76]	@ (8003788 <vTaskPlaceOnEventListRestricted+0x94>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	3218      	adds	r2, #24
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	4b10      	ldr	r3, [pc, #64]	@ (8003788 <vTaskPlaceOnEventListRestricted+0x94>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f103 0218 	add.w	r2, r3, #24
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	609a      	str	r2, [r3, #8]
 8003752:	4b0d      	ldr	r3, [pc, #52]	@ (8003788 <vTaskPlaceOnEventListRestricted+0x94>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	629a      	str	r2, [r3, #40]	@ 0x28
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 800376a:	f04f 33ff 	mov.w	r3, #4294967295
 800376e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	68b8      	ldr	r0, [r7, #8]
 8003774:	f000 fb08 	bl	8003d88 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8003778:	20e3      	movs	r0, #227	@ 0xe3
 800377a:	f003 fc49 	bl	8007010 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800377e:	bf00      	nop
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	200000c8 	.word	0x200000c8

0800378c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08a      	sub	sp, #40	@ 0x28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10d      	bne.n	80037be <xTaskRemoveFromEventList+0x32>
    __asm volatile
 80037a2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80037a6:	b672      	cpsid	i
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	b662      	cpsie	i
 80037b6:	60fb      	str	r3, [r7, #12]
}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	e7fd      	b.n	80037ba <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	6a3a      	ldr	r2, [r7, #32]
 80037ca:	6a12      	ldr	r2, [r2, #32]
 80037cc:	609a      	str	r2, [r3, #8]
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	6a3a      	ldr	r2, [r7, #32]
 80037d4:	69d2      	ldr	r2, [r2, #28]
 80037d6:	605a      	str	r2, [r3, #4]
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	3318      	adds	r3, #24
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d103      	bne.n	80037ec <xTaskRemoveFromEventList+0x60>
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	6a1a      	ldr	r2, [r3, #32]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	605a      	str	r2, [r3, #4]
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	2200      	movs	r2, #0
 80037f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	1e5a      	subs	r2, r3, #1
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80037fc:	4b4e      	ldr	r3, [pc, #312]	@ (8003938 <xTaskRemoveFromEventList+0x1ac>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d164      	bne.n	80038ce <xTaskRemoveFromEventList+0x142>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	6a3a      	ldr	r2, [r7, #32]
 8003810:	68d2      	ldr	r2, [r2, #12]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	6a3a      	ldr	r2, [r7, #32]
 800381a:	6892      	ldr	r2, [r2, #8]
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	3304      	adds	r3, #4
 8003826:	429a      	cmp	r2, r3
 8003828:	d103      	bne.n	8003832 <xTaskRemoveFromEventList+0xa6>
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	2200      	movs	r2, #0
 8003836:	615a      	str	r2, [r3, #20]
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	1e5a      	subs	r2, r3, #1
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	4618      	mov	r0, r3
 8003846:	f003 fd17 	bl	8007278 <SEGGER_SYSVIEW_OnTaskStartReady>
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384e:	2201      	movs	r2, #1
 8003850:	409a      	lsls	r2, r3
 8003852:	4b3a      	ldr	r3, [pc, #232]	@ (800393c <xTaskRemoveFromEventList+0x1b0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4313      	orrs	r3, r2
 8003858:	4a38      	ldr	r2, [pc, #224]	@ (800393c <xTaskRemoveFromEventList+0x1b0>)
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003860:	4937      	ldr	r1, [pc, #220]	@ (8003940 <xTaskRemoveFromEventList+0x1b4>)
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	3304      	adds	r3, #4
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	60da      	str	r2, [r3, #12]
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	6a3a      	ldr	r2, [r7, #32]
 8003886:	3204      	adds	r2, #4
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	1d1a      	adds	r2, r3, #4
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	609a      	str	r2, [r3, #8]
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003896:	4613      	mov	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4a28      	ldr	r2, [pc, #160]	@ (8003940 <xTaskRemoveFromEventList+0x1b4>)
 80038a0:	441a      	add	r2, r3
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	615a      	str	r2, [r3, #20]
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038aa:	4925      	ldr	r1, [pc, #148]	@ (8003940 <xTaskRemoveFromEventList+0x1b4>)
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6a3a      	ldr	r2, [r7, #32]
 80038ba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80038bc:	1c59      	adds	r1, r3, #1
 80038be:	4820      	ldr	r0, [pc, #128]	@ (8003940 <xTaskRemoveFromEventList+0x1b4>)
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4403      	add	r3, r0
 80038ca:	6019      	str	r1, [r3, #0]
 80038cc:	e01b      	b.n	8003906 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003944 <xTaskRemoveFromEventList+0x1b8>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	61bb      	str	r3, [r7, #24]
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	61da      	str	r2, [r3, #28]
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	621a      	str	r2, [r3, #32]
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	6a3a      	ldr	r2, [r7, #32]
 80038e8:	3218      	adds	r2, #24
 80038ea:	605a      	str	r2, [r3, #4]
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	f103 0218 	add.w	r2, r3, #24
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	609a      	str	r2, [r3, #8]
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	4a12      	ldr	r2, [pc, #72]	@ (8003944 <xTaskRemoveFromEventList+0x1b8>)
 80038fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80038fc:	4b11      	ldr	r3, [pc, #68]	@ (8003944 <xTaskRemoveFromEventList+0x1b8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3301      	adds	r3, #1
 8003902:	4a10      	ldr	r2, [pc, #64]	@ (8003944 <xTaskRemoveFromEventList+0x1b8>)
 8003904:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800390a:	4b0f      	ldr	r3, [pc, #60]	@ (8003948 <xTaskRemoveFromEventList+0x1bc>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003910:	429a      	cmp	r2, r3
 8003912:	d905      	bls.n	8003920 <xTaskRemoveFromEventList+0x194>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003914:	2301      	movs	r3, #1
 8003916:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003918:	4b0c      	ldr	r3, [pc, #48]	@ (800394c <xTaskRemoveFromEventList+0x1c0>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e001      	b.n	8003924 <xTaskRemoveFromEventList+0x198>
        }
        else
        {
            xReturn = pdFALSE;
 8003920:	2300      	movs	r3, #0
 8003922:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003926:	4619      	mov	r1, r3
 8003928:	20e4      	movs	r0, #228	@ 0xe4
 800392a:	f003 fbad 	bl	8007088 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003930:	4618      	mov	r0, r3
 8003932:	3728      	adds	r7, #40	@ 0x28
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	200001c8 	.word	0x200001c8
 800393c:	200001a8 	.word	0x200001a8
 8003940:	200000cc 	.word	0x200000cc
 8003944:	20000160 	.word	0x20000160
 8003948:	200000c8 	.word	0x200000c8
 800394c:	200001b4 	.word	0x200001b4

08003950 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003958:	4b07      	ldr	r3, [pc, #28]	@ (8003978 <vTaskInternalSetTimeOutState+0x28>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003960:	4b06      	ldr	r3, [pc, #24]	@ (800397c <vTaskInternalSetTimeOutState+0x2c>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8003968:	20e7      	movs	r0, #231	@ 0xe7
 800396a:	f003 fb51 	bl	8007010 <SEGGER_SYSVIEW_RecordEndCall>
}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	200001b8 	.word	0x200001b8
 800397c:	200001a4 	.word	0x200001a4

08003980 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10d      	bne.n	80039ac <xTaskCheckForTimeOut+0x2c>
    __asm volatile
 8003990:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003994:	b672      	cpsid	i
 8003996:	f383 8811 	msr	BASEPRI, r3
 800399a:	f3bf 8f6f 	isb	sy
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	b662      	cpsie	i
 80039a4:	613b      	str	r3, [r7, #16]
}
 80039a6:	bf00      	nop
 80039a8:	bf00      	nop
 80039aa:	e7fd      	b.n	80039a8 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10d      	bne.n	80039ce <xTaskCheckForTimeOut+0x4e>
    __asm volatile
 80039b2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80039b6:	b672      	cpsid	i
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	b662      	cpsie	i
 80039c6:	60fb      	str	r3, [r7, #12]
}
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
 80039cc:	e7fd      	b.n	80039ca <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 80039ce:	f000 fe89 	bl	80046e4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80039d2:	4b21      	ldr	r3, [pc, #132]	@ (8003a58 <xTaskCheckForTimeOut+0xd8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ea:	d102      	bne.n	80039f2 <xTaskCheckForTimeOut+0x72>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61fb      	str	r3, [r7, #28]
 80039f0:	e026      	b.n	8003a40 <xTaskCheckForTimeOut+0xc0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4b19      	ldr	r3, [pc, #100]	@ (8003a5c <xTaskCheckForTimeOut+0xdc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d00a      	beq.n	8003a14 <xTaskCheckForTimeOut+0x94>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d305      	bcc.n	8003a14 <xTaskCheckForTimeOut+0x94>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e015      	b.n	8003a40 <xTaskCheckForTimeOut+0xc0>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d20b      	bcs.n	8003a36 <xTaskCheckForTimeOut+0xb6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	1ad2      	subs	r2, r2, r3
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff ff90 	bl	8003950 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	e004      	b.n	8003a40 <xTaskCheckForTimeOut+0xc0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003a40:	f000 fe86 	bl	8004750 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	4619      	mov	r1, r3
 8003a48:	20e8      	movs	r0, #232	@ 0xe8
 8003a4a:	f003 fb1d 	bl	8007088 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003a4e:	69fb      	ldr	r3, [r7, #28]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3720      	adds	r7, #32
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	200001a4 	.word	0x200001a4
 8003a5c:	200001b8 	.word	0x200001b8

08003a60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003a64:	4b03      	ldr	r3, [pc, #12]	@ (8003a74 <vTaskMissedYield+0x14>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8003a6a:	20e9      	movs	r0, #233	@ 0xe9
 8003a6c:	f003 fad0 	bl	8007010 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003a70:	bf00      	nop
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	200001b4 	.word	0x200001b4

08003a78 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003a80:	f000 f852 	bl	8003b28 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003a84:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <prvIdleTask+0x28>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d9f9      	bls.n	8003a80 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003a8c:	4b05      	ldr	r3, [pc, #20]	@ (8003aa4 <prvIdleTask+0x2c>)
 8003a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003a9c:	e7f0      	b.n	8003a80 <prvIdleTask+0x8>
 8003a9e:	bf00      	nop
 8003aa0:	200000cc 	.word	0x200000cc
 8003aa4:	e000ed04 	.word	0xe000ed04

08003aa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003aae:	2300      	movs	r3, #0
 8003ab0:	607b      	str	r3, [r7, #4]
 8003ab2:	e00c      	b.n	8003ace <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4a12      	ldr	r2, [pc, #72]	@ (8003b08 <prvInitialiseTaskLists+0x60>)
 8003ac0:	4413      	add	r3, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe fb6e 	bl	80021a4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3301      	adds	r3, #1
 8003acc:	607b      	str	r3, [r7, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d9ef      	bls.n	8003ab4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003ad4:	480d      	ldr	r0, [pc, #52]	@ (8003b0c <prvInitialiseTaskLists+0x64>)
 8003ad6:	f7fe fb65 	bl	80021a4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003ada:	480d      	ldr	r0, [pc, #52]	@ (8003b10 <prvInitialiseTaskLists+0x68>)
 8003adc:	f7fe fb62 	bl	80021a4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003ae0:	480c      	ldr	r0, [pc, #48]	@ (8003b14 <prvInitialiseTaskLists+0x6c>)
 8003ae2:	f7fe fb5f 	bl	80021a4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003ae6:	480c      	ldr	r0, [pc, #48]	@ (8003b18 <prvInitialiseTaskLists+0x70>)
 8003ae8:	f7fe fb5c 	bl	80021a4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003aec:	480b      	ldr	r0, [pc, #44]	@ (8003b1c <prvInitialiseTaskLists+0x74>)
 8003aee:	f7fe fb59 	bl	80021a4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003af2:	4b0b      	ldr	r3, [pc, #44]	@ (8003b20 <prvInitialiseTaskLists+0x78>)
 8003af4:	4a05      	ldr	r2, [pc, #20]	@ (8003b0c <prvInitialiseTaskLists+0x64>)
 8003af6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003af8:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <prvInitialiseTaskLists+0x7c>)
 8003afa:	4a05      	ldr	r2, [pc, #20]	@ (8003b10 <prvInitialiseTaskLists+0x68>)
 8003afc:	601a      	str	r2, [r3, #0]
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	200000cc 	.word	0x200000cc
 8003b0c:	20000130 	.word	0x20000130
 8003b10:	20000144 	.word	0x20000144
 8003b14:	20000160 	.word	0x20000160
 8003b18:	20000174 	.word	0x20000174
 8003b1c:	2000018c 	.word	0x2000018c
 8003b20:	20000158 	.word	0x20000158
 8003b24:	2000015c 	.word	0x2000015c

08003b28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b2e:	e019      	b.n	8003b64 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003b30:	f000 fdd8 	bl	80046e4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003b34:	4b10      	ldr	r3, [pc, #64]	@ (8003b78 <prvCheckTasksWaitingTermination+0x50>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fe fb9b 	bl	800227c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003b46:	4b0d      	ldr	r3, [pc, #52]	@ (8003b7c <prvCheckTasksWaitingTermination+0x54>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b7c <prvCheckTasksWaitingTermination+0x54>)
 8003b4e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003b50:	4b0b      	ldr	r3, [pc, #44]	@ (8003b80 <prvCheckTasksWaitingTermination+0x58>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	4a0a      	ldr	r2, [pc, #40]	@ (8003b80 <prvCheckTasksWaitingTermination+0x58>)
 8003b58:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003b5a:	f000 fdf9 	bl	8004750 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f810 	bl	8003b84 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b64:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <prvCheckTasksWaitingTermination+0x58>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e1      	bne.n	8003b30 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003b6c:	bf00      	nop
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000174 	.word	0x20000174
 8003b7c:	200001a0 	.word	0x200001a0
 8003b80:	20000188 	.word	0x20000188

08003b84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b90:	4618      	mov	r0, r3
 8003b92:	f001 f821 	bl	8004bd8 <vPortFree>
            vPortFree( pxTCB );
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f001 f81e 	bl	8004bd8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003b9c:	bf00      	nop
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd4 <prvResetNextTaskUnblockTime+0x30>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d104      	bne.n	8003bbc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003bb2:	4b09      	ldr	r3, [pc, #36]	@ (8003bd8 <prvResetNextTaskUnblockTime+0x34>)
 8003bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003bba:	e005      	b.n	8003bc8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003bbc:	4b05      	ldr	r3, [pc, #20]	@ (8003bd4 <prvResetNextTaskUnblockTime+0x30>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a04      	ldr	r2, [pc, #16]	@ (8003bd8 <prvResetNextTaskUnblockTime+0x34>)
 8003bc6:	6013      	str	r3, [r2, #0]
}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20000158 	.word	0x20000158
 8003bd8:	200001c0 	.word	0x200001c0

08003bdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8003be2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c18 <xTaskGetSchedulerState+0x3c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d102      	bne.n	8003bf0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003bea:	2301      	movs	r3, #1
 8003bec:	607b      	str	r3, [r7, #4]
 8003bee:	e008      	b.n	8003c02 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8003c1c <xTaskGetSchedulerState+0x40>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d102      	bne.n	8003bfe <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	607b      	str	r3, [r7, #4]
 8003bfc:	e001      	b.n	8003c02 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4619      	mov	r1, r3
 8003c06:	20f5      	movs	r0, #245	@ 0xf5
 8003c08:	f003 fa3e 	bl	8007088 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003c0c:	687b      	ldr	r3, [r7, #4]
    }
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	200001ac 	.word	0x200001ac
 8003c1c:	200001c8 	.word	0x200001c8

08003c20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 8098 	beq.w	8003d68 <xTaskPriorityDisinherit+0x148>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003c38:	4b50      	ldr	r3, [pc, #320]	@ (8003d7c <xTaskPriorityDisinherit+0x15c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d00d      	beq.n	8003c5e <xTaskPriorityDisinherit+0x3e>
    __asm volatile
 8003c42:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003c46:	b672      	cpsid	i
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	b662      	cpsie	i
 8003c56:	613b      	str	r3, [r7, #16]
}
 8003c58:	bf00      	nop
 8003c5a:	bf00      	nop
 8003c5c:	e7fd      	b.n	8003c5a <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10d      	bne.n	8003c82 <xTaskPriorityDisinherit+0x62>
    __asm volatile
 8003c66:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003c6a:	b672      	cpsid	i
 8003c6c:	f383 8811 	msr	BASEPRI, r3
 8003c70:	f3bf 8f6f 	isb	sy
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	b662      	cpsie	i
 8003c7a:	60fb      	str	r3, [r7, #12]
}
 8003c7c:	bf00      	nop
 8003c7e:	bf00      	nop
 8003c80:	e7fd      	b.n	8003c7e <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c86:	1e5a      	subs	r2, r3, #1
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d067      	beq.n	8003d68 <xTaskPriorityDisinherit+0x148>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d163      	bne.n	8003d68 <xTaskPriorityDisinherit+0x148>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fe fae9 	bl	800227c <uxListRemove>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43da      	mvns	r2, r3
 8003cbc:	4b30      	ldr	r3, [pc, #192]	@ (8003d80 <xTaskPriorityDisinherit+0x160>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	4a2f      	ldr	r2, [pc, #188]	@ (8003d80 <xTaskPriorityDisinherit+0x160>)
 8003cc4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd2:	f1c3 0205 	rsb	r2, r3, #5
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f003 facb 	bl	8007278 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	409a      	lsls	r2, r3
 8003cea:	4b25      	ldr	r3, [pc, #148]	@ (8003d80 <xTaskPriorityDisinherit+0x160>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	4a23      	ldr	r2, [pc, #140]	@ (8003d80 <xTaskPriorityDisinherit+0x160>)
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf8:	4922      	ldr	r1, [pc, #136]	@ (8003d84 <xTaskPriorityDisinherit+0x164>)
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	3304      	adds	r3, #4
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	60da      	str	r2, [r3, #12]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	3204      	adds	r2, #4
 8003d20:	605a      	str	r2, [r3, #4]
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	1d1a      	adds	r2, r3, #4
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4a13      	ldr	r2, [pc, #76]	@ (8003d84 <xTaskPriorityDisinherit+0x164>)
 8003d38:	441a      	add	r2, r3
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	615a      	str	r2, [r3, #20]
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d42:	4910      	ldr	r1, [pc, #64]	@ (8003d84 <xTaskPriorityDisinherit+0x164>)
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d54:	1c59      	adds	r1, r3, #1
 8003d56:	480b      	ldr	r0, [pc, #44]	@ (8003d84 <xTaskPriorityDisinherit+0x164>)
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4403      	add	r3, r0
 8003d62:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003d64:	2301      	movs	r3, #1
 8003d66:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	20f7      	movs	r0, #247	@ 0xf7
 8003d6e:	f003 f98b 	bl	8007088 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003d72:	69fb      	ldr	r3, [r7, #28]
    }
 8003d74:	4618      	mov	r0, r3
 8003d76:	3720      	adds	r7, #32
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	200000c8 	.word	0x200000c8
 8003d80:	200001a8 	.word	0x200001a8
 8003d84:	200000cc 	.word	0x200000cc

08003d88 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003d92:	4b3d      	ldr	r3, [pc, #244]	@ (8003e88 <prvAddCurrentTaskToDelayedList+0x100>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003d98:	4b3c      	ldr	r3, [pc, #240]	@ (8003e8c <prvAddCurrentTaskToDelayedList+0x104>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003d9e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e90 <prvAddCurrentTaskToDelayedList+0x108>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003da4:	4b3b      	ldr	r3, [pc, #236]	@ (8003e94 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3304      	adds	r3, #4
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fe fa66 	bl	800227c <uxListRemove>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10b      	bne.n	8003dce <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003db6:	4b37      	ldr	r3, [pc, #220]	@ (8003e94 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43da      	mvns	r2, r3
 8003dc4:	4b34      	ldr	r3, [pc, #208]	@ (8003e98 <prvAddCurrentTaskToDelayedList+0x110>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	4a33      	ldr	r2, [pc, #204]	@ (8003e98 <prvAddCurrentTaskToDelayedList+0x110>)
 8003dcc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d124      	bne.n	8003e20 <prvAddCurrentTaskToDelayedList+0x98>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d021      	beq.n	8003e20 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8003e9c <prvAddCurrentTaskToDelayedList+0x114>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	4b2c      	ldr	r3, [pc, #176]	@ (8003e94 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	609a      	str	r2, [r3, #8]
 8003dea:	4b2a      	ldr	r3, [pc, #168]	@ (8003e94 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	6892      	ldr	r2, [r2, #8]
 8003df2:	60da      	str	r2, [r3, #12]
 8003df4:	4b27      	ldr	r3, [pc, #156]	@ (8003e94 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	3204      	adds	r2, #4
 8003dfe:	605a      	str	r2, [r3, #4]
 8003e00:	4b24      	ldr	r3, [pc, #144]	@ (8003e94 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	1d1a      	adds	r2, r3, #4
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	609a      	str	r2, [r3, #8]
 8003e0a:	4b22      	ldr	r3, [pc, #136]	@ (8003e94 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a23      	ldr	r2, [pc, #140]	@ (8003e9c <prvAddCurrentTaskToDelayedList+0x114>)
 8003e10:	615a      	str	r2, [r3, #20]
 8003e12:	4b22      	ldr	r3, [pc, #136]	@ (8003e9c <prvAddCurrentTaskToDelayedList+0x114>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3301      	adds	r3, #1
 8003e18:	4a20      	ldr	r2, [pc, #128]	@ (8003e9c <prvAddCurrentTaskToDelayedList+0x114>)
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003e1e:	e02e      	b.n	8003e7e <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4413      	add	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e28:	4b1a      	ldr	r3, [pc, #104]	@ (8003e94 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d20d      	bcs.n	8003e54 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003e38:	4b16      	ldr	r3, [pc, #88]	@ (8003e94 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2104      	movs	r1, #4
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f003 fa5c 	bl	80072fc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003e44:	4b13      	ldr	r3, [pc, #76]	@ (8003e94 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6978      	ldr	r0, [r7, #20]
 8003e4e:	f7fe f9da 	bl	8002206 <vListInsert>
}
 8003e52:	e014      	b.n	8003e7e <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8003e54:	4b0f      	ldr	r3, [pc, #60]	@ (8003e94 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2104      	movs	r1, #4
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f003 fa4e 	bl	80072fc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003e60:	4b0c      	ldr	r3, [pc, #48]	@ (8003e94 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3304      	adds	r3, #4
 8003e66:	4619      	mov	r1, r3
 8003e68:	69b8      	ldr	r0, [r7, #24]
 8003e6a:	f7fe f9cc 	bl	8002206 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea0 <prvAddCurrentTaskToDelayedList+0x118>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d202      	bcs.n	8003e7e <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8003e78:	4a09      	ldr	r2, [pc, #36]	@ (8003ea0 <prvAddCurrentTaskToDelayedList+0x118>)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6013      	str	r3, [r2, #0]
}
 8003e7e:	bf00      	nop
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	200001a4 	.word	0x200001a4
 8003e8c:	20000158 	.word	0x20000158
 8003e90:	2000015c 	.word	0x2000015c
 8003e94:	200000c8 	.word	0x200000c8
 8003e98:	200001a8 	.word	0x200001a8
 8003e9c:	2000018c 	.word	0x2000018c
 8003ea0:	200001c0 	.word	0x200001c0

08003ea4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003eae:	f000 fa7d 	bl	80043ac <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003eb2:	4b16      	ldr	r3, [pc, #88]	@ (8003f0c <xTimerCreateTimerTask+0x68>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00b      	beq.n	8003ed2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003eba:	4b15      	ldr	r3, [pc, #84]	@ (8003f10 <xTimerCreateTimerTask+0x6c>)
 8003ebc:	9301      	str	r3, [sp, #4]
 8003ebe:	2304      	movs	r3, #4
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ec8:	4912      	ldr	r1, [pc, #72]	@ (8003f14 <xTimerCreateTimerTask+0x70>)
 8003eca:	4813      	ldr	r0, [pc, #76]	@ (8003f18 <xTimerCreateTimerTask+0x74>)
 8003ecc:	f7fe fe58 	bl	8002b80 <xTaskCreate>
 8003ed0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10d      	bne.n	8003ef4 <xTimerCreateTimerTask+0x50>
    __asm volatile
 8003ed8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003edc:	b672      	cpsid	i
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	b662      	cpsie	i
 8003eec:	603b      	str	r3, [r7, #0]
}
 8003eee:	bf00      	nop
 8003ef0:	bf00      	nop
 8003ef2:	e7fd      	b.n	8003ef0 <xTimerCreateTimerTask+0x4c>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8003efc:	f003 f8c4 	bl	8007088 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003f00:	687b      	ldr	r3, [r7, #4]
    }
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	200001fc 	.word	0x200001fc
 8003f10:	20000200 	.word	0x20000200
 8003f14:	0800780c 	.word	0x0800780c
 8003f18:	08003fc1 	.word	0x08003fc1

08003f1c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003f28:	e008      	b.n	8003f3c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	4413      	add	r3, r2
 8003f32:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	699a      	ldr	r2, [r3, #24]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	18d1      	adds	r1, r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f8df 	bl	800410c <prvInsertTimerInActiveList>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1ea      	bne.n	8003f2a <prvReloadTimer+0xe>
        }
    }
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f6a:	4b14      	ldr	r3, [pc, #80]	@ (8003fbc <prvProcessExpiredTimer+0x5c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	3304      	adds	r3, #4
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fe f97f 	bl	800227c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f7ff ffc3 	bl	8003f1c <prvReloadTimer>
 8003f96:	e008      	b.n	8003faa <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f9e:	f023 0301 	bic.w	r3, r3, #1
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	4798      	blx	r3
    }
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	200001f4 	.word	0x200001f4

08003fc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fc8:	f107 0308 	add.w	r3, r7, #8
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 f859 	bl	8004084 <prvGetNextExpireTime>
 8003fd2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f805 	bl	8003fe8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003fde:	f000 f8d7 	bl	8004190 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fe2:	bf00      	nop
 8003fe4:	e7f0      	b.n	8003fc8 <prvTimerTask+0x8>
	...

08003fe8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003ff2:	f7ff f86b 	bl	80030cc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ff6:	f107 0308 	add.w	r3, r7, #8
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 f866 	bl	80040cc <prvSampleTimeNow>
 8004000:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d130      	bne.n	800406a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10a      	bne.n	8004024 <prvProcessTimerOrBlockTask+0x3c>
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	429a      	cmp	r2, r3
 8004014:	d806      	bhi.n	8004024 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004016:	f7ff f867 	bl	80030e8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800401a:	68f9      	ldr	r1, [r7, #12]
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff ff9f 	bl	8003f60 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004022:	e024      	b.n	800406e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d008      	beq.n	800403c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800402a:	4b13      	ldr	r3, [pc, #76]	@ (8004078 <prvProcessTimerOrBlockTask+0x90>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <prvProcessTimerOrBlockTask+0x50>
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <prvProcessTimerOrBlockTask+0x52>
 8004038:	2300      	movs	r3, #0
 800403a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800403c:	4b0f      	ldr	r3, [pc, #60]	@ (800407c <prvProcessTimerOrBlockTask+0x94>)
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	4619      	mov	r1, r3
 800404a:	f7fe fcad 	bl	80029a8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800404e:	f7ff f84b 	bl	80030e8 <xTaskResumeAll>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8004058:	4b09      	ldr	r3, [pc, #36]	@ (8004080 <prvProcessTimerOrBlockTask+0x98>)
 800405a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	f3bf 8f6f 	isb	sy
    }
 8004068:	e001      	b.n	800406e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800406a:	f7ff f83d 	bl	80030e8 <xTaskResumeAll>
    }
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	200001f8 	.word	0x200001f8
 800407c:	200001fc 	.word	0x200001fc
 8004080:	e000ed04 	.word	0xe000ed04

08004084 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800408c:	4b0e      	ldr	r3, [pc, #56]	@ (80040c8 <prvGetNextExpireTime+0x44>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <prvGetNextExpireTime+0x16>
 8004096:	2201      	movs	r2, #1
 8004098:	e000      	b.n	800409c <prvGetNextExpireTime+0x18>
 800409a:	2200      	movs	r2, #0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d105      	bne.n	80040b4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040a8:	4b07      	ldr	r3, [pc, #28]	@ (80040c8 <prvGetNextExpireTime+0x44>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	e001      	b.n	80040b8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80040b8:	68fb      	ldr	r3, [r7, #12]
    }
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	200001f4 	.word	0x200001f4

080040cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80040d4:	f7ff f91c 	bl	8003310 <xTaskGetTickCount>
 80040d8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80040da:	4b0b      	ldr	r3, [pc, #44]	@ (8004108 <prvSampleTimeNow+0x3c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d205      	bcs.n	80040f0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80040e4:	f000 f93c 	bl	8004360 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	e002      	b.n	80040f6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80040f6:	4a04      	ldr	r2, [pc, #16]	@ (8004108 <prvSampleTimeNow+0x3c>)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80040fc:	68fb      	ldr	r3, [r7, #12]
    }
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20000204 	.word	0x20000204

0800410c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	429a      	cmp	r2, r3
 8004130:	d812      	bhi.n	8004158 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	1ad2      	subs	r2, r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	429a      	cmp	r2, r3
 800413e:	d302      	bcc.n	8004146 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004140:	2301      	movs	r3, #1
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	e01b      	b.n	800417e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004146:	4b10      	ldr	r3, [pc, #64]	@ (8004188 <prvInsertTimerInActiveList+0x7c>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3304      	adds	r3, #4
 800414e:	4619      	mov	r1, r3
 8004150:	4610      	mov	r0, r2
 8004152:	f7fe f858 	bl	8002206 <vListInsert>
 8004156:	e012      	b.n	800417e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d206      	bcs.n	800416e <prvInsertTimerInActiveList+0x62>
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d302      	bcc.n	800416e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004168:	2301      	movs	r3, #1
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	e007      	b.n	800417e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800416e:	4b07      	ldr	r3, [pc, #28]	@ (800418c <prvInsertTimerInActiveList+0x80>)
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3304      	adds	r3, #4
 8004176:	4619      	mov	r1, r3
 8004178:	4610      	mov	r0, r2
 800417a:	f7fe f844 	bl	8002206 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800417e:	697b      	ldr	r3, [r7, #20]
    }
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	200001f8 	.word	0x200001f8
 800418c:	200001f4 	.word	0x200001f4

08004190 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	@ 0x28
 8004194:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8004196:	1d3b      	adds	r3, r7, #4
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	609a      	str	r2, [r3, #8]
 80041a0:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80041a2:	e0cb      	b.n	800433c <prvProcessReceivedCommands+0x1ac>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	da1b      	bge.n	80041e2 <prvProcessReceivedCommands+0x52>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80041aa:	1d3b      	adds	r3, r7, #4
 80041ac:	3304      	adds	r3, #4
 80041ae:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 80041b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10d      	bne.n	80041d2 <prvProcessReceivedCommands+0x42>
    __asm volatile
 80041b6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80041ba:	b672      	cpsid	i
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	b662      	cpsie	i
 80041ca:	61bb      	str	r3, [r7, #24]
}
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
 80041d0:	e7fd      	b.n	80041ce <prvProcessReceivedCommands+0x3e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80041d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d8:	6850      	ldr	r0, [r2, #4]
 80041da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041dc:	6892      	ldr	r2, [r2, #8]
 80041de:	4611      	mov	r1, r2
 80041e0:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f2c0 80a9 	blt.w	800433c <prvProcessReceivedCommands+0x1ac>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d004      	beq.n	8004200 <prvProcessReceivedCommands+0x70>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	3304      	adds	r3, #4
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fe f83e 	bl	800227c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004200:	463b      	mov	r3, r7
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff ff62 	bl	80040cc <prvSampleTimeNow>
 8004208:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3b01      	subs	r3, #1
 800420e:	2b08      	cmp	r3, #8
 8004210:	f200 8091 	bhi.w	8004336 <prvProcessReceivedCommands+0x1a6>
 8004214:	a201      	add	r2, pc, #4	@ (adr r2, 800421c <prvProcessReceivedCommands+0x8c>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	08004241 	.word	0x08004241
 8004220:	08004241 	.word	0x08004241
 8004224:	080042a9 	.word	0x080042a9
 8004228:	080042bd 	.word	0x080042bd
 800422c:	0800430d 	.word	0x0800430d
 8004230:	08004241 	.word	0x08004241
 8004234:	08004241 	.word	0x08004241
 8004238:	080042a9 	.word	0x080042a9
 800423c:	080042bd 	.word	0x080042bd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	b2da      	uxtb	r2, r3
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	18d1      	adds	r1, r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	6a38      	ldr	r0, [r7, #32]
 8004260:	f7ff ff54 	bl	800410c <prvInsertTimerInActiveList>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d067      	beq.n	800433a <prvProcessReceivedCommands+0x1aa>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d009      	beq.n	800428c <prvProcessReceivedCommands+0xfc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	4413      	add	r3, r2
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	4619      	mov	r1, r3
 8004284:	6a38      	ldr	r0, [r7, #32]
 8004286:	f7ff fe49 	bl	8003f1c <prvReloadTimer>
 800428a:	e008      	b.n	800429e <prvProcessReceivedCommands+0x10e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004292:	f023 0301 	bic.w	r3, r3, #1
 8004296:	b2da      	uxtb	r2, r3
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	6a38      	ldr	r0, [r7, #32]
 80042a4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80042a6:	e048      	b.n	800433a <prvProcessReceivedCommands+0x1aa>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042ae:	f023 0301 	bic.w	r3, r3, #1
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80042ba:	e03f      	b.n	800433c <prvProcessReceivedCommands+0x1ac>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10d      	bne.n	80042f8 <prvProcessReceivedCommands+0x168>
    __asm volatile
 80042dc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80042e0:	b672      	cpsid	i
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	b662      	cpsie	i
 80042f0:	617b      	str	r3, [r7, #20]
}
 80042f2:	bf00      	nop
 80042f4:	bf00      	nop
 80042f6:	e7fd      	b.n	80042f4 <prvProcessReceivedCommands+0x164>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	699a      	ldr	r2, [r3, #24]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	18d1      	adds	r1, r2, r3
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	6a38      	ldr	r0, [r7, #32]
 8004306:	f7ff ff01 	bl	800410c <prvInsertTimerInActiveList>
                        break;
 800430a:	e017      	b.n	800433c <prvProcessReceivedCommands+0x1ac>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d103      	bne.n	8004322 <prvProcessReceivedCommands+0x192>
                            {
                                vPortFree( pxTimer );
 800431a:	6a38      	ldr	r0, [r7, #32]
 800431c:	f000 fc5c 	bl	8004bd8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004320:	e00c      	b.n	800433c <prvProcessReceivedCommands+0x1ac>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	b2da      	uxtb	r2, r3
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004334:	e002      	b.n	800433c <prvProcessReceivedCommands+0x1ac>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004336:	bf00      	nop
 8004338:	e000      	b.n	800433c <prvProcessReceivedCommands+0x1ac>
                        break;
 800433a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800433c:	4b07      	ldr	r3, [pc, #28]	@ (800435c <prvProcessReceivedCommands+0x1cc>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	1d39      	adds	r1, r7, #4
 8004342:	2200      	movs	r2, #0
 8004344:	4618      	mov	r0, r3
 8004346:	f7fe f8e3 	bl	8002510 <xQueueReceive>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	f47f af29 	bne.w	80041a4 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8004352:	bf00      	nop
 8004354:	bf00      	nop
 8004356:	3728      	adds	r7, #40	@ 0x28
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	200001fc 	.word	0x200001fc

08004360 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004366:	e009      	b.n	800437c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004368:	4b0e      	ldr	r3, [pc, #56]	@ (80043a4 <prvSwitchTimerLists+0x44>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004372:	f04f 31ff 	mov.w	r1, #4294967295
 8004376:	6838      	ldr	r0, [r7, #0]
 8004378:	f7ff fdf2 	bl	8003f60 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800437c:	4b09      	ldr	r3, [pc, #36]	@ (80043a4 <prvSwitchTimerLists+0x44>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004386:	4b07      	ldr	r3, [pc, #28]	@ (80043a4 <prvSwitchTimerLists+0x44>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800438c:	4b06      	ldr	r3, [pc, #24]	@ (80043a8 <prvSwitchTimerLists+0x48>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a04      	ldr	r2, [pc, #16]	@ (80043a4 <prvSwitchTimerLists+0x44>)
 8004392:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004394:	4a04      	ldr	r2, [pc, #16]	@ (80043a8 <prvSwitchTimerLists+0x48>)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6013      	str	r3, [r2, #0]
    }
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	200001f4 	.word	0x200001f4
 80043a8:	200001f8 	.word	0x200001f8

080043ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80043b0:	f000 f998 	bl	80046e4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80043b4:	4b12      	ldr	r3, [pc, #72]	@ (8004400 <prvCheckForValidListAndQueue+0x54>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d11d      	bne.n	80043f8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80043bc:	4811      	ldr	r0, [pc, #68]	@ (8004404 <prvCheckForValidListAndQueue+0x58>)
 80043be:	f7fd fef1 	bl	80021a4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80043c2:	4811      	ldr	r0, [pc, #68]	@ (8004408 <prvCheckForValidListAndQueue+0x5c>)
 80043c4:	f7fd feee 	bl	80021a4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80043c8:	4b10      	ldr	r3, [pc, #64]	@ (800440c <prvCheckForValidListAndQueue+0x60>)
 80043ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004404 <prvCheckForValidListAndQueue+0x58>)
 80043cc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80043ce:	4b10      	ldr	r3, [pc, #64]	@ (8004410 <prvCheckForValidListAndQueue+0x64>)
 80043d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004408 <prvCheckForValidListAndQueue+0x5c>)
 80043d2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80043d4:	2200      	movs	r2, #0
 80043d6:	2110      	movs	r1, #16
 80043d8:	2005      	movs	r0, #5
 80043da:	f7fe f819 	bl	8002410 <xQueueGenericCreate>
 80043de:	4603      	mov	r3, r0
 80043e0:	4a07      	ldr	r2, [pc, #28]	@ (8004400 <prvCheckForValidListAndQueue+0x54>)
 80043e2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80043e4:	4b06      	ldr	r3, [pc, #24]	@ (8004400 <prvCheckForValidListAndQueue+0x54>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d005      	beq.n	80043f8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80043ec:	4b04      	ldr	r3, [pc, #16]	@ (8004400 <prvCheckForValidListAndQueue+0x54>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4908      	ldr	r1, [pc, #32]	@ (8004414 <prvCheckForValidListAndQueue+0x68>)
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fe fa86 	bl	8002904 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80043f8:	f000 f9aa 	bl	8004750 <vPortExitCritical>
    }
 80043fc:	bf00      	nop
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	200001fc 	.word	0x200001fc
 8004404:	200001cc 	.word	0x200001cc
 8004408:	200001e0 	.word	0x200001e0
 800440c:	200001f4 	.word	0x200001f4
 8004410:	200001f8 	.word	0x200001f8
 8004414:	08007814 	.word	0x08007814

08004418 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3b04      	subs	r3, #4
 8004428:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004430:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3b04      	subs	r3, #4
 8004436:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f023 0201 	bic.w	r2, r3, #1
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3b04      	subs	r3, #4
 8004446:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004448:	4a0c      	ldr	r2, [pc, #48]	@ (800447c <pxPortInitialiseStack+0x64>)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3b14      	subs	r3, #20
 8004452:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	3b04      	subs	r3, #4
 800445e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f06f 0202 	mvn.w	r2, #2
 8004466:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	3b20      	subs	r3, #32
 800446c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800446e:	68fb      	ldr	r3, [r7, #12]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	08004481 	.word	0x08004481

08004480 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004486:	2300      	movs	r3, #0
 8004488:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800448a:	4b15      	ldr	r3, [pc, #84]	@ (80044e0 <prvTaskExitError+0x60>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004492:	d00d      	beq.n	80044b0 <prvTaskExitError+0x30>
    __asm volatile
 8004494:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004498:	b672      	cpsid	i
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	b662      	cpsie	i
 80044a8:	60fb      	str	r3, [r7, #12]
}
 80044aa:	bf00      	nop
 80044ac:	bf00      	nop
 80044ae:	e7fd      	b.n	80044ac <prvTaskExitError+0x2c>
    __asm volatile
 80044b0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80044b4:	b672      	cpsid	i
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	b662      	cpsie	i
 80044c4:	60bb      	str	r3, [r7, #8]
}
 80044c6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80044c8:	bf00      	nop
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0fc      	beq.n	80044ca <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20000010 	.word	0x20000010
	...

080044f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80044f0:	4b07      	ldr	r3, [pc, #28]	@ (8004510 <pxCurrentTCBConst2>)
 80044f2:	6819      	ldr	r1, [r3, #0]
 80044f4:	6808      	ldr	r0, [r1, #0]
 80044f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fa:	f380 8809 	msr	PSP, r0
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f04f 0000 	mov.w	r0, #0
 8004506:	f380 8811 	msr	BASEPRI, r0
 800450a:	4770      	bx	lr
 800450c:	f3af 8000 	nop.w

08004510 <pxCurrentTCBConst2>:
 8004510:	200000c8 	.word	0x200000c8
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop

08004518 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004518:	4808      	ldr	r0, [pc, #32]	@ (800453c <prvPortStartFirstTask+0x24>)
 800451a:	6800      	ldr	r0, [r0, #0]
 800451c:	6800      	ldr	r0, [r0, #0]
 800451e:	f380 8808 	msr	MSP, r0
 8004522:	f04f 0000 	mov.w	r0, #0
 8004526:	f380 8814 	msr	CONTROL, r0
 800452a:	b662      	cpsie	i
 800452c:	b661      	cpsie	f
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	df00      	svc	0
 8004538:	bf00      	nop
 800453a:	0000      	.short	0x0000
 800453c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop

08004544 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08a      	sub	sp, #40	@ 0x28
 8004548:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800454a:	4b5c      	ldr	r3, [pc, #368]	@ (80046bc <xPortStartScheduler+0x178>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8004550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004552:	332c      	adds	r3, #44	@ 0x2c
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a5a      	ldr	r2, [pc, #360]	@ (80046c0 <xPortStartScheduler+0x17c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00d      	beq.n	8004578 <xPortStartScheduler+0x34>
    __asm volatile
 800455c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004560:	b672      	cpsid	i
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	b662      	cpsie	i
 8004570:	61fb      	str	r3, [r7, #28]
}
 8004572:	bf00      	nop
 8004574:	bf00      	nop
 8004576:	e7fd      	b.n	8004574 <xPortStartScheduler+0x30>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8004578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457a:	3338      	adds	r3, #56	@ 0x38
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a51      	ldr	r2, [pc, #324]	@ (80046c4 <xPortStartScheduler+0x180>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00d      	beq.n	80045a0 <xPortStartScheduler+0x5c>
    __asm volatile
 8004584:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004588:	b672      	cpsid	i
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	b662      	cpsie	i
 8004598:	61bb      	str	r3, [r7, #24]
}
 800459a:	bf00      	nop
 800459c:	bf00      	nop
 800459e:	e7fd      	b.n	800459c <xPortStartScheduler+0x58>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045a4:	4b48      	ldr	r3, [pc, #288]	@ (80046c8 <xPortStartScheduler+0x184>)
 80045a6:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	22ff      	movs	r2, #255	@ 0xff
 80045b4:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	4b40      	ldr	r3, [pc, #256]	@ (80046cc <xPortStartScheduler+0x188>)
 80045ca:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80045cc:	4b3f      	ldr	r3, [pc, #252]	@ (80046cc <xPortStartScheduler+0x188>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10d      	bne.n	80045f0 <xPortStartScheduler+0xac>
    __asm volatile
 80045d4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80045d8:	b672      	cpsid	i
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	b662      	cpsie	i
 80045e8:	617b      	str	r3, [r7, #20]
}
 80045ea:	bf00      	nop
 80045ec:	bf00      	nop
 80045ee:	e7fd      	b.n	80045ec <xPortStartScheduler+0xa8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80045f0:	79fb      	ldrb	r3, [r7, #7]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	43db      	mvns	r3, r3
 80045f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d015      	beq.n	800462a <xPortStartScheduler+0xe6>
    __asm volatile
 80045fe:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004602:	b672      	cpsid	i
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	b662      	cpsie	i
 8004612:	613b      	str	r3, [r7, #16]
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop
 8004618:	e7fd      	b.n	8004616 <xPortStartScheduler+0xd2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	3301      	adds	r3, #1
 800461e:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	b2db      	uxtb	r3, r3
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	b2db      	uxtb	r3, r3
 8004628:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004632:	2b80      	cmp	r3, #128	@ 0x80
 8004634:	d0f1      	beq.n	800461a <xPortStartScheduler+0xd6>
        }

        if( ulImplementedPrioBits == 8 )
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b08      	cmp	r3, #8
 800463a:	d103      	bne.n	8004644 <xPortStartScheduler+0x100>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800463c:	4b24      	ldr	r3, [pc, #144]	@ (80046d0 <xPortStartScheduler+0x18c>)
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	e004      	b.n	800464e <xPortStartScheduler+0x10a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f1c3 0307 	rsb	r3, r3, #7
 800464a:	4a21      	ldr	r2, [pc, #132]	@ (80046d0 <xPortStartScheduler+0x18c>)
 800464c:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800464e:	4b20      	ldr	r3, [pc, #128]	@ (80046d0 <xPortStartScheduler+0x18c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	4a1e      	ldr	r2, [pc, #120]	@ (80046d0 <xPortStartScheduler+0x18c>)
 8004656:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004658:	4b1d      	ldr	r3, [pc, #116]	@ (80046d0 <xPortStartScheduler+0x18c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004660:	4a1b      	ldr	r2, [pc, #108]	@ (80046d0 <xPortStartScheduler+0x18c>)
 8004662:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	b2da      	uxtb	r2, r3
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800466c:	4b19      	ldr	r3, [pc, #100]	@ (80046d4 <xPortStartScheduler+0x190>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a18      	ldr	r2, [pc, #96]	@ (80046d4 <xPortStartScheduler+0x190>)
 8004672:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004676:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004678:	4b16      	ldr	r3, [pc, #88]	@ (80046d4 <xPortStartScheduler+0x190>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a15      	ldr	r2, [pc, #84]	@ (80046d4 <xPortStartScheduler+0x190>)
 800467e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004682:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8004684:	4b14      	ldr	r3, [pc, #80]	@ (80046d8 <xPortStartScheduler+0x194>)
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800468a:	f000 f8f1 	bl	8004870 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800468e:	4b13      	ldr	r3, [pc, #76]	@ (80046dc <xPortStartScheduler+0x198>)
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004694:	f000 f910 	bl	80048b8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004698:	4b11      	ldr	r3, [pc, #68]	@ (80046e0 <xPortStartScheduler+0x19c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a10      	ldr	r2, [pc, #64]	@ (80046e0 <xPortStartScheduler+0x19c>)
 800469e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80046a2:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80046a4:	f7ff ff38 	bl	8004518 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80046a8:	f7fe ff8c 	bl	80035c4 <vTaskSwitchContext>
    prvTaskExitError();
 80046ac:	f7ff fee8 	bl	8004480 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3728      	adds	r7, #40	@ 0x28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	e000ed08 	.word	0xe000ed08
 80046c0:	080044f1 	.word	0x080044f1
 80046c4:	080047b1 	.word	0x080047b1
 80046c8:	e000e400 	.word	0xe000e400
 80046cc:	20000208 	.word	0x20000208
 80046d0:	2000020c 	.word	0x2000020c
 80046d4:	e000ed20 	.word	0xe000ed20
 80046d8:	e000ed1c 	.word	0xe000ed1c
 80046dc:	20000010 	.word	0x20000010
 80046e0:	e000ef34 	.word	0xe000ef34

080046e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
    __asm volatile
 80046ea:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80046ee:	b672      	cpsid	i
 80046f0:	f383 8811 	msr	BASEPRI, r3
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	b662      	cpsie	i
 80046fe:	607b      	str	r3, [r7, #4]
}
 8004700:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004702:	4b11      	ldr	r3, [pc, #68]	@ (8004748 <vPortEnterCritical+0x64>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	3301      	adds	r3, #1
 8004708:	4a0f      	ldr	r2, [pc, #60]	@ (8004748 <vPortEnterCritical+0x64>)
 800470a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800470c:	4b0e      	ldr	r3, [pc, #56]	@ (8004748 <vPortEnterCritical+0x64>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d112      	bne.n	800473a <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004714:	4b0d      	ldr	r3, [pc, #52]	@ (800474c <vPortEnterCritical+0x68>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00d      	beq.n	800473a <vPortEnterCritical+0x56>
    __asm volatile
 800471e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004722:	b672      	cpsid	i
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	b662      	cpsie	i
 8004732:	603b      	str	r3, [r7, #0]
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	e7fd      	b.n	8004736 <vPortEnterCritical+0x52>
    }
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20000010 	.word	0x20000010
 800474c:	e000ed04 	.word	0xe000ed04

08004750 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004756:	4b13      	ldr	r3, [pc, #76]	@ (80047a4 <vPortExitCritical+0x54>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10d      	bne.n	800477a <vPortExitCritical+0x2a>
    __asm volatile
 800475e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004762:	b672      	cpsid	i
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	b662      	cpsie	i
 8004772:	607b      	str	r3, [r7, #4]
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop
 8004778:	e7fd      	b.n	8004776 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 800477a:	4b0a      	ldr	r3, [pc, #40]	@ (80047a4 <vPortExitCritical+0x54>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3b01      	subs	r3, #1
 8004780:	4a08      	ldr	r2, [pc, #32]	@ (80047a4 <vPortExitCritical+0x54>)
 8004782:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004784:	4b07      	ldr	r3, [pc, #28]	@ (80047a4 <vPortExitCritical+0x54>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d105      	bne.n	8004798 <vPortExitCritical+0x48>
 800478c:	2300      	movs	r3, #0
 800478e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8004796:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	20000010 	.word	0x20000010
	...

080047b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80047b0:	f3ef 8009 	mrs	r0, PSP
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	4b15      	ldr	r3, [pc, #84]	@ (8004810 <pxCurrentTCBConst>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	f01e 0f10 	tst.w	lr, #16
 80047c0:	bf08      	it	eq
 80047c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ca:	6010      	str	r0, [r2, #0]
 80047cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047d0:	f04f 0040 	mov.w	r0, #64	@ 0x40
 80047d4:	b672      	cpsid	i
 80047d6:	f380 8811 	msr	BASEPRI, r0
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	b662      	cpsie	i
 80047e4:	f7fe feee 	bl	80035c4 <vTaskSwitchContext>
 80047e8:	f04f 0000 	mov.w	r0, #0
 80047ec:	f380 8811 	msr	BASEPRI, r0
 80047f0:	bc09      	pop	{r0, r3}
 80047f2:	6819      	ldr	r1, [r3, #0]
 80047f4:	6808      	ldr	r0, [r1, #0]
 80047f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047fa:	f01e 0f10 	tst.w	lr, #16
 80047fe:	bf08      	it	eq
 8004800:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004804:	f380 8809 	msr	PSP, r0
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop

08004810 <pxCurrentTCBConst>:
 8004810:	200000c8 	.word	0x200000c8
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop

08004818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
    __asm volatile
 800481e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004822:	b672      	cpsid	i
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	b662      	cpsie	i
 8004832:	607b      	str	r3, [r7, #4]
}
 8004834:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004836:	f002 fb71 	bl	8006f1c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800483a:	f7fe fd9f 	bl	800337c <xTaskIncrementTick>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d006      	beq.n	8004852 <SysTick_Handler+0x3a>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8004844:	f002 fbc8 	bl	8006fd8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004848:	4b08      	ldr	r3, [pc, #32]	@ (800486c <SysTick_Handler+0x54>)
 800484a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	e001      	b.n	8004856 <SysTick_Handler+0x3e>
        }
        else
        {
            traceISR_EXIT();
 8004852:	f002 fba5 	bl	8006fa0 <SEGGER_SYSVIEW_RecordExitISR>
 8004856:	2300      	movs	r3, #0
 8004858:	603b      	str	r3, [r7, #0]
    __asm volatile
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	f383 8811 	msr	BASEPRI, r3
}
 8004860:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004862:	bf00      	nop
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	e000ed04 	.word	0xe000ed04

08004870 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004874:	4b0b      	ldr	r3, [pc, #44]	@ (80048a4 <vPortSetupTimerInterrupt+0x34>)
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800487a:	4b0b      	ldr	r3, [pc, #44]	@ (80048a8 <vPortSetupTimerInterrupt+0x38>)
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004880:	4b0a      	ldr	r3, [pc, #40]	@ (80048ac <vPortSetupTimerInterrupt+0x3c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a0a      	ldr	r2, [pc, #40]	@ (80048b0 <vPortSetupTimerInterrupt+0x40>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	099b      	lsrs	r3, r3, #6
 800488c:	4a09      	ldr	r2, [pc, #36]	@ (80048b4 <vPortSetupTimerInterrupt+0x44>)
 800488e:	3b01      	subs	r3, #1
 8004890:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004892:	4b04      	ldr	r3, [pc, #16]	@ (80048a4 <vPortSetupTimerInterrupt+0x34>)
 8004894:	2207      	movs	r2, #7
 8004896:	601a      	str	r2, [r3, #0]
}
 8004898:	bf00      	nop
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	e000e010 	.word	0xe000e010
 80048a8:	e000e018 	.word	0xe000e018
 80048ac:	20000000 	.word	0x20000000
 80048b0:	10624dd3 	.word	0x10624dd3
 80048b4:	e000e014 	.word	0xe000e014

080048b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80048b8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80048c8 <vPortEnableVFP+0x10>
 80048bc:	6801      	ldr	r1, [r0, #0]
 80048be:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80048c2:	6001      	str	r1, [r0, #0]
 80048c4:	4770      	bx	lr
 80048c6:	0000      	.short	0x0000
 80048c8:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80048cc:	bf00      	nop
 80048ce:	bf00      	nop

080048d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80048d6:	f3ef 8305 	mrs	r3, IPSR
 80048da:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b0f      	cmp	r3, #15
 80048e0:	d917      	bls.n	8004912 <vPortValidateInterruptPriority+0x42>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048e2:	4a1a      	ldr	r2, [pc, #104]	@ (800494c <vPortValidateInterruptPriority+0x7c>)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048ec:	4b18      	ldr	r3, [pc, #96]	@ (8004950 <vPortValidateInterruptPriority+0x80>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	7afa      	ldrb	r2, [r7, #11]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d20d      	bcs.n	8004912 <vPortValidateInterruptPriority+0x42>
    __asm volatile
 80048f6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80048fa:	b672      	cpsid	i
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	b662      	cpsie	i
 800490a:	607b      	str	r3, [r7, #4]
}
 800490c:	bf00      	nop
 800490e:	bf00      	nop
 8004910:	e7fd      	b.n	800490e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004912:	4b10      	ldr	r3, [pc, #64]	@ (8004954 <vPortValidateInterruptPriority+0x84>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800491a:	4b0f      	ldr	r3, [pc, #60]	@ (8004958 <vPortValidateInterruptPriority+0x88>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d90d      	bls.n	800493e <vPortValidateInterruptPriority+0x6e>
    __asm volatile
 8004922:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004926:	b672      	cpsid	i
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	b662      	cpsie	i
 8004936:	603b      	str	r3, [r7, #0]
}
 8004938:	bf00      	nop
 800493a:	bf00      	nop
 800493c:	e7fd      	b.n	800493a <vPortValidateInterruptPriority+0x6a>
    }
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	e000e3f0 	.word	0xe000e3f0
 8004950:	20000208 	.word	0x20000208
 8004954:	e000ed0c 	.word	0xe000ed0c
 8004958:	2000020c 	.word	0x2000020c

0800495c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08e      	sub	sp, #56	@ 0x38
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004964:	2300      	movs	r3, #0
 8004966:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d022      	beq.n	80049b4 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800496e:	2308      	movs	r3, #8
 8004970:	43db      	mvns	r3, r3
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	429a      	cmp	r2, r3
 8004976:	d81b      	bhi.n	80049b0 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8004978:	2208      	movs	r2, #8
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4413      	add	r3, r2
 800497e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	2b00      	cmp	r3, #0
 8004988:	d014      	beq.n	80049b4 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	f1c3 0308 	rsb	r3, r3, #8
 8004994:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004998:	43db      	mvns	r3, r3
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	429a      	cmp	r2, r3
 800499e:	d804      	bhi.n	80049aa <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a4:	4413      	add	r3, r2
 80049a6:	607b      	str	r3, [r7, #4]
 80049a8:	e004      	b.n	80049b4 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	607b      	str	r3, [r7, #4]
 80049ae:	e001      	b.n	80049b4 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80049b4:	f7fe fb8a 	bl	80030cc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80049b8:	4b80      	ldr	r3, [pc, #512]	@ (8004bbc <pvPortMalloc+0x260>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80049c0:	f000 f98a 	bl	8004cd8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f2c0 80de 	blt.w	8004b88 <pvPortMalloc+0x22c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 80da 	beq.w	8004b88 <pvPortMalloc+0x22c>
 80049d4:	4b7a      	ldr	r3, [pc, #488]	@ (8004bc0 <pvPortMalloc+0x264>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	429a      	cmp	r2, r3
 80049dc:	f200 80d4 	bhi.w	8004b88 <pvPortMalloc+0x22c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80049e0:	4b78      	ldr	r3, [pc, #480]	@ (8004bc4 <pvPortMalloc+0x268>)
 80049e2:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80049e4:	4b77      	ldr	r3, [pc, #476]	@ (8004bc4 <pvPortMalloc+0x268>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80049ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ec:	4a76      	ldr	r2, [pc, #472]	@ (8004bc8 <pvPortMalloc+0x26c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d305      	bcc.n	80049fe <pvPortMalloc+0xa2>
 80049f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f4:	4a75      	ldr	r2, [pc, #468]	@ (8004bcc <pvPortMalloc+0x270>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d801      	bhi.n	80049fe <pvPortMalloc+0xa2>
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <pvPortMalloc+0xa4>
 80049fe:	2300      	movs	r3, #0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d12d      	bne.n	8004a60 <pvPortMalloc+0x104>
    __asm volatile
 8004a04:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004a08:	b672      	cpsid	i
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	b662      	cpsie	i
 8004a18:	623b      	str	r3, [r7, #32]
}
 8004a1a:	bf00      	nop
 8004a1c:	bf00      	nop
 8004a1e:	e7fd      	b.n	8004a1c <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8004a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a22:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8004a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8004a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a2c:	4a66      	ldr	r2, [pc, #408]	@ (8004bc8 <pvPortMalloc+0x26c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d305      	bcc.n	8004a3e <pvPortMalloc+0xe2>
 8004a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a34:	4a65      	ldr	r2, [pc, #404]	@ (8004bcc <pvPortMalloc+0x270>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d801      	bhi.n	8004a3e <pvPortMalloc+0xe2>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <pvPortMalloc+0xe4>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10d      	bne.n	8004a60 <pvPortMalloc+0x104>
    __asm volatile
 8004a44:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004a48:	b672      	cpsid	i
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	b662      	cpsie	i
 8004a58:	61fb      	str	r3, [r7, #28]
}
 8004a5a:	bf00      	nop
 8004a5c:	bf00      	nop
 8004a5e:	e7fd      	b.n	8004a5c <pvPortMalloc+0x100>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8004a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d903      	bls.n	8004a72 <pvPortMalloc+0x116>
 8004a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1d6      	bne.n	8004a20 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004a72:	4b52      	ldr	r3, [pc, #328]	@ (8004bbc <pvPortMalloc+0x260>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	f000 8085 	beq.w	8004b88 <pvPortMalloc+0x22c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2208      	movs	r2, #8
 8004a84:	4413      	add	r3, r2
 8004a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8004a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a8a:	4a4f      	ldr	r2, [pc, #316]	@ (8004bc8 <pvPortMalloc+0x26c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d305      	bcc.n	8004a9c <pvPortMalloc+0x140>
 8004a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a92:	4a4e      	ldr	r2, [pc, #312]	@ (8004bcc <pvPortMalloc+0x270>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d801      	bhi.n	8004a9c <pvPortMalloc+0x140>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <pvPortMalloc+0x142>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10d      	bne.n	8004abe <pvPortMalloc+0x162>
    __asm volatile
 8004aa2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004aa6:	b672      	cpsid	i
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	b662      	cpsie	i
 8004ab6:	61bb      	str	r3, [r7, #24]
}
 8004ab8:	bf00      	nop
 8004aba:	bf00      	nop
 8004abc:	e7fd      	b.n	8004aba <pvPortMalloc+0x15e>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac4:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8004ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d90d      	bls.n	8004aec <pvPortMalloc+0x190>
    __asm volatile
 8004ad0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004ad4:	b672      	cpsid	i
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	b662      	cpsie	i
 8004ae4:	617b      	str	r3, [r7, #20]
}
 8004ae6:	bf00      	nop
 8004ae8:	bf00      	nop
 8004aea:	e7fd      	b.n	8004ae8 <pvPortMalloc+0x18c>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	1ad2      	subs	r2, r2, r3
 8004af4:	2308      	movs	r3, #8
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d926      	bls.n	8004b4a <pvPortMalloc+0x1ee>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004afc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4413      	add	r3, r2
 8004b02:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00d      	beq.n	8004b2a <pvPortMalloc+0x1ce>
    __asm volatile
 8004b0e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004b12:	b672      	cpsid	i
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	b662      	cpsie	i
 8004b22:	613b      	str	r3, [r7, #16]
}
 8004b24:	bf00      	nop
 8004b26:	bf00      	nop
 8004b28:	e7fd      	b.n	8004b26 <pvPortMalloc+0x1ca>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	1ad2      	subs	r2, r2, r3
 8004b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b34:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b42:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8004b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b48:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc0 <pvPortMalloc+0x264>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	4a1a      	ldr	r2, [pc, #104]	@ (8004bc0 <pvPortMalloc+0x264>)
 8004b56:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b58:	4b19      	ldr	r3, [pc, #100]	@ (8004bc0 <pvPortMalloc+0x264>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8004bd0 <pvPortMalloc+0x274>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d203      	bcs.n	8004b6c <pvPortMalloc+0x210>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b64:	4b16      	ldr	r3, [pc, #88]	@ (8004bc0 <pvPortMalloc+0x264>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a19      	ldr	r2, [pc, #100]	@ (8004bd0 <pvPortMalloc+0x274>)
 8004b6a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b76:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004b7e:	4b15      	ldr	r3, [pc, #84]	@ (8004bd4 <pvPortMalloc+0x278>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3301      	adds	r3, #1
 8004b84:	4a13      	ldr	r2, [pc, #76]	@ (8004bd4 <pvPortMalloc+0x278>)
 8004b86:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004b88:	f7fe faae 	bl	80030e8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00d      	beq.n	8004bb2 <pvPortMalloc+0x256>
    __asm volatile
 8004b96:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004b9a:	b672      	cpsid	i
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	b662      	cpsie	i
 8004baa:	60fb      	str	r3, [r7, #12]
}
 8004bac:	bf00      	nop
 8004bae:	bf00      	nop
 8004bb0:	e7fd      	b.n	8004bae <pvPortMalloc+0x252>
    return pvReturn;
 8004bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3738      	adds	r7, #56	@ 0x38
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	2000ba18 	.word	0x2000ba18
 8004bc0:	2000ba1c 	.word	0x2000ba1c
 8004bc4:	2000ba10 	.word	0x2000ba10
 8004bc8:	20000210 	.word	0x20000210
 8004bcc:	2000ba0f 	.word	0x2000ba0f
 8004bd0:	2000ba20 	.word	0x2000ba20
 8004bd4:	2000ba24 	.word	0x2000ba24

08004bd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d06a      	beq.n	8004cc0 <vPortFree+0xe8>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004bea:	2308      	movs	r3, #8
 8004bec:	425b      	negs	r3, r3
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	4a33      	ldr	r2, [pc, #204]	@ (8004cc8 <vPortFree+0xf0>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d305      	bcc.n	8004c0c <vPortFree+0x34>
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	4a32      	ldr	r2, [pc, #200]	@ (8004ccc <vPortFree+0xf4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d801      	bhi.n	8004c0c <vPortFree+0x34>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <vPortFree+0x36>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10d      	bne.n	8004c2e <vPortFree+0x56>
    __asm volatile
 8004c12:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004c16:	b672      	cpsid	i
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	b662      	cpsie	i
 8004c26:	617b      	str	r3, [r7, #20]
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	e7fd      	b.n	8004c2a <vPortFree+0x52>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	db0d      	blt.n	8004c52 <vPortFree+0x7a>
    __asm volatile
 8004c36:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004c3a:	b672      	cpsid	i
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	b662      	cpsie	i
 8004c4a:	613b      	str	r3, [r7, #16]
}
 8004c4c:	bf00      	nop
 8004c4e:	bf00      	nop
 8004c50:	e7fd      	b.n	8004c4e <vPortFree+0x76>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00d      	beq.n	8004c76 <vPortFree+0x9e>
    __asm volatile
 8004c5a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004c5e:	b672      	cpsid	i
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	b662      	cpsie	i
 8004c6e:	60fb      	str	r3, [r7, #12]
}
 8004c70:	bf00      	nop
 8004c72:	bf00      	nop
 8004c74:	e7fd      	b.n	8004c72 <vPortFree+0x9a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	0fdb      	lsrs	r3, r3, #31
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d01c      	beq.n	8004cc0 <vPortFree+0xe8>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d118      	bne.n	8004cc0 <vPortFree+0xe8>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8004c9a:	f7fe fa17 	bl	80030cc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd0 <vPortFree+0xf8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	4a09      	ldr	r2, [pc, #36]	@ (8004cd0 <vPortFree+0xf8>)
 8004caa:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cac:	69b8      	ldr	r0, [r7, #24]
 8004cae:	f000 f86d 	bl	8004d8c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004cb2:	4b08      	ldr	r3, [pc, #32]	@ (8004cd4 <vPortFree+0xfc>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	4a06      	ldr	r2, [pc, #24]	@ (8004cd4 <vPortFree+0xfc>)
 8004cba:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004cbc:	f7fe fa14 	bl	80030e8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004cc0:	bf00      	nop
 8004cc2:	3720      	adds	r7, #32
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	20000210 	.word	0x20000210
 8004ccc:	2000ba0f 	.word	0x2000ba0f
 8004cd0:	2000ba1c 	.word	0x2000ba1c
 8004cd4:	2000ba28 	.word	0x2000ba28

08004cd8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cde:	f44f 4338 	mov.w	r3, #47104	@ 0xb800
 8004ce2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004ce4:	4b24      	ldr	r3, [pc, #144]	@ (8004d78 <prvHeapInit+0xa0>)
 8004ce6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00c      	beq.n	8004d0c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3307      	adds	r3, #7
 8004cf6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0307 	bic.w	r3, r3, #7
 8004cfe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	4a1c      	ldr	r2, [pc, #112]	@ (8004d78 <prvHeapInit+0xa0>)
 8004d08:	4413      	add	r3, r2
 8004d0a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8004d7c <prvHeapInit+0xa4>)
 8004d10:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004d12:	4b1a      	ldr	r3, [pc, #104]	@ (8004d7c <prvHeapInit+0xa4>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8004d20:	2208      	movs	r2, #8
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	1a9b      	subs	r3, r3, r2
 8004d26:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f023 0307 	bic.w	r3, r3, #7
 8004d2e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a13      	ldr	r2, [pc, #76]	@ (8004d80 <prvHeapInit+0xa8>)
 8004d34:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004d36:	4b12      	ldr	r3, [pc, #72]	@ (8004d80 <prvHeapInit+0xa8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8004d3e:	4b10      	ldr	r3, [pc, #64]	@ (8004d80 <prvHeapInit+0xa8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	1ad2      	subs	r2, r2, r3
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004d54:	4b0a      	ldr	r3, [pc, #40]	@ (8004d80 <prvHeapInit+0xa8>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	4a08      	ldr	r2, [pc, #32]	@ (8004d84 <prvHeapInit+0xac>)
 8004d62:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	4a07      	ldr	r2, [pc, #28]	@ (8004d88 <prvHeapInit+0xb0>)
 8004d6a:	6013      	str	r3, [r2, #0]
}
 8004d6c:	bf00      	nop
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	20000210 	.word	0x20000210
 8004d7c:	2000ba10 	.word	0x2000ba10
 8004d80:	2000ba18 	.word	0x2000ba18
 8004d84:	2000ba20 	.word	0x2000ba20
 8004d88:	2000ba1c 	.word	0x2000ba1c

08004d8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004d94:	4b37      	ldr	r3, [pc, #220]	@ (8004e74 <prvInsertBlockIntoFreeList+0xe8>)
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	e002      	b.n	8004da0 <prvInsertBlockIntoFreeList+0x14>
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d8f7      	bhi.n	8004d9a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	4a31      	ldr	r2, [pc, #196]	@ (8004e74 <prvInsertBlockIntoFreeList+0xe8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d01a      	beq.n	8004de8 <prvInsertBlockIntoFreeList+0x5c>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	4a30      	ldr	r2, [pc, #192]	@ (8004e78 <prvInsertBlockIntoFreeList+0xec>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d305      	bcc.n	8004dc6 <prvInsertBlockIntoFreeList+0x3a>
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	4a2f      	ldr	r2, [pc, #188]	@ (8004e7c <prvInsertBlockIntoFreeList+0xf0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d801      	bhi.n	8004dc6 <prvInsertBlockIntoFreeList+0x3a>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <prvInsertBlockIntoFreeList+0x3c>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10d      	bne.n	8004de8 <prvInsertBlockIntoFreeList+0x5c>
    __asm volatile
 8004dcc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004dd0:	b672      	cpsid	i
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	b662      	cpsie	i
 8004de0:	60fb      	str	r3, [r7, #12]
}
 8004de2:	bf00      	nop
 8004de4:	bf00      	nop
 8004de6:	e7fd      	b.n	8004de4 <prvInsertBlockIntoFreeList+0x58>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4413      	add	r3, r2
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d108      	bne.n	8004e0c <prvInsertBlockIntoFreeList+0x80>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	441a      	add	r2, r3
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	441a      	add	r2, r3
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d118      	bne.n	8004e52 <prvInsertBlockIntoFreeList+0xc6>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	4b16      	ldr	r3, [pc, #88]	@ (8004e80 <prvInsertBlockIntoFreeList+0xf4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d00d      	beq.n	8004e48 <prvInsertBlockIntoFreeList+0xbc>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	441a      	add	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	e008      	b.n	8004e5a <prvInsertBlockIntoFreeList+0xce>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004e48:	4b0d      	ldr	r3, [pc, #52]	@ (8004e80 <prvInsertBlockIntoFreeList+0xf4>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	e003      	b.n	8004e5a <prvInsertBlockIntoFreeList+0xce>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d002      	beq.n	8004e68 <prvInsertBlockIntoFreeList+0xdc>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004e68:	bf00      	nop
 8004e6a:	371c      	adds	r7, #28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	2000ba10 	.word	0x2000ba10
 8004e78:	20000210 	.word	0x20000210
 8004e7c:	2000ba0f 	.word	0x2000ba0f
 8004e80:	2000ba18 	.word	0x2000ba18

08004e84 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004e88:	4803      	ldr	r0, [pc, #12]	@ (8004e98 <_cbSendSystemDesc+0x14>)
 8004e8a:	f001 fff1 	bl	8006e70 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004e8e:	4803      	ldr	r0, [pc, #12]	@ (8004e9c <_cbSendSystemDesc+0x18>)
 8004e90:	f001 ffee 	bl	8006e70 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004e94:	bf00      	nop
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	0800781c 	.word	0x0800781c
 8004e9c:	08007858 	.word	0x08007858

08004ea0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004ea4:	4b06      	ldr	r3, [pc, #24]	@ (8004ec0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	4b05      	ldr	r3, [pc, #20]	@ (8004ec0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004eaa:	6819      	ldr	r1, [r3, #0]
 8004eac:	4b05      	ldr	r3, [pc, #20]	@ (8004ec4 <SEGGER_SYSVIEW_Conf+0x24>)
 8004eae:	4a06      	ldr	r2, [pc, #24]	@ (8004ec8 <SEGGER_SYSVIEW_Conf+0x28>)
 8004eb0:	f001 fc64 	bl	800677c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004eb4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004eb8:	f001 fca4 	bl	8006804 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004ebc:	bf00      	nop
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	20000000 	.word	0x20000000
 8004ec4:	08004e85 	.word	0x08004e85
 8004ec8:	080078f4 	.word	0x080078f4

08004ecc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	607b      	str	r3, [r7, #4]
 8004ed6:	e033      	b.n	8004f40 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004ed8:	491e      	ldr	r1, [pc, #120]	@ (8004f54 <_cbSendTaskList+0x88>)
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	491a      	ldr	r1, [pc, #104]	@ (8004f54 <_cbSendTaskList+0x88>)
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	6819      	ldr	r1, [r3, #0]
 8004efa:	4c16      	ldr	r4, [pc, #88]	@ (8004f54 <_cbSendTaskList+0x88>)
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4423      	add	r3, r4
 8004f08:	3308      	adds	r3, #8
 8004f0a:	681c      	ldr	r4, [r3, #0]
 8004f0c:	4d11      	ldr	r5, [pc, #68]	@ (8004f54 <_cbSendTaskList+0x88>)
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	442b      	add	r3, r5
 8004f1a:	330c      	adds	r3, #12
 8004f1c:	681d      	ldr	r5, [r3, #0]
 8004f1e:	4e0d      	ldr	r6, [pc, #52]	@ (8004f54 <_cbSendTaskList+0x88>)
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4433      	add	r3, r6
 8004f2c:	3310      	adds	r3, #16
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	462b      	mov	r3, r5
 8004f34:	4622      	mov	r2, r4
 8004f36:	f000 f8bd 	bl	80050b4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	607b      	str	r3, [r7, #4]
 8004f40:	4b05      	ldr	r3, [pc, #20]	@ (8004f58 <_cbSendTaskList+0x8c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d3c6      	bcc.n	8004ed8 <_cbSendTaskList+0xc>
  }
}
 8004f4a:	bf00      	nop
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f54:	2000ba2c 	.word	0x2000ba2c
 8004f58:	2000bacc 	.word	0x2000bacc

08004f5c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f60:	b082      	sub	sp, #8
 8004f62:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004f64:	f7fe f9e6 	bl	8003334 <xTaskGetTickCountFromISR>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	469a      	mov	sl, r3
 8004f6e:	4693      	mov	fp, r2
 8004f70:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004f74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	f04f 0a00 	mov.w	sl, #0
 8004f80:	f04f 0b00 	mov.w	fp, #0
 8004f84:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004f88:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004f8c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004f90:	4652      	mov	r2, sl
 8004f92:	465b      	mov	r3, fp
 8004f94:	1a14      	subs	r4, r2, r0
 8004f96:	eb63 0501 	sbc.w	r5, r3, r1
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	00ab      	lsls	r3, r5, #2
 8004fa4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004fa8:	00a2      	lsls	r2, r4, #2
 8004faa:	4614      	mov	r4, r2
 8004fac:	461d      	mov	r5, r3
 8004fae:	eb14 0800 	adds.w	r8, r4, r0
 8004fb2:	eb45 0901 	adc.w	r9, r5, r1
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fca:	4690      	mov	r8, r2
 8004fcc:	4699      	mov	r9, r3
 8004fce:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004fd2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4619      	mov	r1, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004fe4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004ff2:	2205      	movs	r2, #5
 8004ff4:	492b      	ldr	r1, [pc, #172]	@ (80050a4 <SYSVIEW_AddTask+0xc0>)
 8004ff6:	68b8      	ldr	r0, [r7, #8]
 8004ff8:	f002 fb74 	bl	80076e4 <memcmp>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d04b      	beq.n	800509a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005002:	4b29      	ldr	r3, [pc, #164]	@ (80050a8 <SYSVIEW_AddTask+0xc4>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b07      	cmp	r3, #7
 8005008:	d903      	bls.n	8005012 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800500a:	4828      	ldr	r0, [pc, #160]	@ (80050ac <SYSVIEW_AddTask+0xc8>)
 800500c:	f002 fae0 	bl	80075d0 <SEGGER_SYSVIEW_Warn>
    return;
 8005010:	e044      	b.n	800509c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005012:	4b25      	ldr	r3, [pc, #148]	@ (80050a8 <SYSVIEW_AddTask+0xc4>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4926      	ldr	r1, [pc, #152]	@ (80050b0 <SYSVIEW_AddTask+0xcc>)
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005026:	4b20      	ldr	r3, [pc, #128]	@ (80050a8 <SYSVIEW_AddTask+0xc4>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4921      	ldr	r1, [pc, #132]	@ (80050b0 <SYSVIEW_AddTask+0xcc>)
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	3304      	adds	r3, #4
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800503c:	4b1a      	ldr	r3, [pc, #104]	@ (80050a8 <SYSVIEW_AddTask+0xc4>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	491b      	ldr	r1, [pc, #108]	@ (80050b0 <SYSVIEW_AddTask+0xcc>)
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	440b      	add	r3, r1
 800504c:	3308      	adds	r3, #8
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005052:	4b15      	ldr	r3, [pc, #84]	@ (80050a8 <SYSVIEW_AddTask+0xc4>)
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	4916      	ldr	r1, [pc, #88]	@ (80050b0 <SYSVIEW_AddTask+0xcc>)
 8005058:	4613      	mov	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	330c      	adds	r3, #12
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005068:	4b0f      	ldr	r3, [pc, #60]	@ (80050a8 <SYSVIEW_AddTask+0xc4>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	4910      	ldr	r1, [pc, #64]	@ (80050b0 <SYSVIEW_AddTask+0xcc>)
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	3310      	adds	r3, #16
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800507e:	4b0a      	ldr	r3, [pc, #40]	@ (80050a8 <SYSVIEW_AddTask+0xc4>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3301      	adds	r3, #1
 8005084:	4a08      	ldr	r2, [pc, #32]	@ (80050a8 <SYSVIEW_AddTask+0xc4>)
 8005086:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 f80e 	bl	80050b4 <SYSVIEW_SendTaskInfo>
 8005098:	e000      	b.n	800509c <SYSVIEW_AddTask+0xb8>
    return;
 800509a:	bf00      	nop

}
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	08007868 	.word	0x08007868
 80050a8:	2000bacc 	.word	0x2000bacc
 80050ac:	08007870 	.word	0x08007870
 80050b0:	2000ba2c 	.word	0x2000ba2c

080050b4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08a      	sub	sp, #40	@ 0x28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80050c2:	f107 0310 	add.w	r3, r7, #16
 80050c6:	2218      	movs	r2, #24
 80050c8:	2100      	movs	r1, #0
 80050ca:	4618      	mov	r0, r3
 80050cc:	f002 fb1a 	bl	8007704 <memset>
  TaskInfo.TaskID     = TaskID;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80050e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e2:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80050e4:	f107 0310 	add.w	r3, r7, #16
 80050e8:	4618      	mov	r0, r3
 80050ea:	f001 fdc9 	bl	8006c80 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80050ee:	bf00      	nop
 80050f0:	3728      	adds	r7, #40	@ 0x28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <__NVIC_EnableIRQ>:
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	4603      	mov	r3, r0
 8005100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005106:	2b00      	cmp	r3, #0
 8005108:	db0b      	blt.n	8005122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	f003 021f 	and.w	r2, r3, #31
 8005110:	4907      	ldr	r1, [pc, #28]	@ (8005130 <__NVIC_EnableIRQ+0x38>)
 8005112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005116:	095b      	lsrs	r3, r3, #5
 8005118:	2001      	movs	r0, #1
 800511a:	fa00 f202 	lsl.w	r2, r0, r2
 800511e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	e000e100 	.word	0xe000e100

08005134 <__NVIC_SetPriority>:
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	4603      	mov	r3, r0
 800513c:	6039      	str	r1, [r7, #0]
 800513e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005144:	2b00      	cmp	r3, #0
 8005146:	db0a      	blt.n	800515e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	b2da      	uxtb	r2, r3
 800514c:	490c      	ldr	r1, [pc, #48]	@ (8005180 <__NVIC_SetPriority+0x4c>)
 800514e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005152:	0112      	lsls	r2, r2, #4
 8005154:	b2d2      	uxtb	r2, r2
 8005156:	440b      	add	r3, r1
 8005158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800515c:	e00a      	b.n	8005174 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	b2da      	uxtb	r2, r3
 8005162:	4908      	ldr	r1, [pc, #32]	@ (8005184 <__NVIC_SetPriority+0x50>)
 8005164:	79fb      	ldrb	r3, [r7, #7]
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	3b04      	subs	r3, #4
 800516c:	0112      	lsls	r2, r2, #4
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	440b      	add	r3, r1
 8005172:	761a      	strb	r2, [r3, #24]
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	e000e100 	.word	0xe000e100
 8005184:	e000ed00 	.word	0xe000ed00

08005188 <_StartSysView>:

} _SVInfo = {0,0,1};



static void _StartSysView(void) {
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0

  int r;



  r = SEGGER_SYSVIEW_IsStarted();
 800518e:	f002 fa7b 	bl	8007688 <SEGGER_SYSVIEW_IsStarted>
 8005192:	6078      	str	r0, [r7, #4]

  if (r == 0) {
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <_StartSysView+0x16>

    SEGGER_SYSVIEW_Start();
 800519a:	f001 fbf7 	bl	800698c <SEGGER_SYSVIEW_Start>

  }

}
 800519e:	bf00      	nop
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <_cbOnUARTRx>:



static void _cbOnUARTRx(U8 Data) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	71fb      	strb	r3, [r7, #7]

  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80051b2:	4b0c      	ldr	r3, [pc, #48]	@ (80051e4 <_cbOnUARTRx+0x3c>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d806      	bhi.n	80051c8 <_cbOnUARTRx+0x20>

    _SVInfo.NumBytesHelloRcvd++;
 80051ba:	4b0a      	ldr	r3, [pc, #40]	@ (80051e4 <_cbOnUARTRx+0x3c>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	3301      	adds	r3, #1
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	4b08      	ldr	r3, [pc, #32]	@ (80051e4 <_cbOnUARTRx+0x3c>)
 80051c4:	701a      	strb	r2, [r3, #0]

    goto Done;
 80051c6:	e009      	b.n	80051dc <_cbOnUARTRx+0x34>

  }

  _StartSysView();
 80051c8:	f7ff ffde 	bl	8005188 <_StartSysView>

  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80051cc:	4b05      	ldr	r3, [pc, #20]	@ (80051e4 <_cbOnUARTRx+0x3c>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4618      	mov	r0, r3
 80051d2:	1dfb      	adds	r3, r7, #7
 80051d4:	2201      	movs	r2, #1
 80051d6:	4619      	mov	r1, r3
 80051d8:	f000 fb8e 	bl	80058f8 <SEGGER_RTT_WriteDownBuffer>

Done:

  return;
 80051dc:	bf00      	nop

}
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	20000014 	.word	0x20000014

080051e8 <_cbOnUARTTx>:



static int _cbOnUARTTx(U8* pChar) {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]

  int r;



  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80051f0:	4b14      	ldr	r3, [pc, #80]	@ (8005244 <_cbOnUARTTx+0x5c>)
 80051f2:	785b      	ldrb	r3, [r3, #1]
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d80f      	bhi.n	8005218 <_cbOnUARTTx+0x30>

    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80051f8:	4b12      	ldr	r3, [pc, #72]	@ (8005244 <_cbOnUARTTx+0x5c>)
 80051fa:	785b      	ldrb	r3, [r3, #1]
 80051fc:	461a      	mov	r2, r3
 80051fe:	4b12      	ldr	r3, [pc, #72]	@ (8005248 <_cbOnUARTTx+0x60>)
 8005200:	5c9a      	ldrb	r2, [r3, r2]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	701a      	strb	r2, [r3, #0]

    _SVInfo.NumBytesHelloSent++;
 8005206:	4b0f      	ldr	r3, [pc, #60]	@ (8005244 <_cbOnUARTTx+0x5c>)
 8005208:	785b      	ldrb	r3, [r3, #1]
 800520a:	3301      	adds	r3, #1
 800520c:	b2da      	uxtb	r2, r3
 800520e:	4b0d      	ldr	r3, [pc, #52]	@ (8005244 <_cbOnUARTTx+0x5c>)
 8005210:	705a      	strb	r2, [r3, #1]

    r = 1;
 8005212:	2301      	movs	r3, #1
 8005214:	60fb      	str	r3, [r7, #12]

    goto Done;
 8005216:	e00f      	b.n	8005238 <_cbOnUARTTx+0x50>

  }

  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005218:	4b0a      	ldr	r3, [pc, #40]	@ (8005244 <_cbOnUARTTx+0x5c>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	4618      	mov	r0, r3
 8005222:	f000 fa0d 	bl	8005640 <SEGGER_RTT_ReadUpBufferNoLock>
 8005226:	4603      	mov	r3, r0
 8005228:	60fb      	str	r3, [r7, #12]

  if (r < 0) {  // Failed to read from up buffer?
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	da02      	bge.n	8005236 <_cbOnUARTTx+0x4e>

    r = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	e000      	b.n	8005238 <_cbOnUARTTx+0x50>

  }

Done:
 8005236:	bf00      	nop

  return r;
 8005238:	68fb      	ldr	r3, [r7, #12]

}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	20000014 	.word	0x20000014
 8005248:	080078fc 	.word	0x080078fc

0800524c <SEGGER_UART_init>:



void SEGGER_UART_init(U32 baud)

{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]

HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005254:	4a04      	ldr	r2, [pc, #16]	@ (8005268 <SEGGER_UART_init+0x1c>)
 8005256:	4905      	ldr	r1, [pc, #20]	@ (800526c <SEGGER_UART_init+0x20>)
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f855 	bl	8005308 <HIF_UART_Init>

}
 800525e:	bf00      	nop
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	080051a9 	.word	0x080051a9
 800526c:	080051e9 	.word	0x080051e9

08005270 <USART3_IRQHandler>:

*/

void USART3_IRQHandler(void);

void USART3_IRQHandler(void) {
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0

  int r;



  UsartStatus = USART_SR;                              // Examine status register
 8005276:	4b1e      	ldr	r3, [pc, #120]	@ (80052f0 <USART3_IRQHandler+0x80>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	60fb      	str	r3, [r7, #12]

  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b00      	cmp	r3, #0
 8005284:	d011      	beq.n	80052aa <USART3_IRQHandler+0x3a>

    v = USART_RDR;                                      // Read data
 8005286:	4b1b      	ldr	r3, [pc, #108]	@ (80052f4 <USART3_IRQHandler+0x84>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	71fb      	strb	r3, [r7, #7]

    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f003 030b 	and.w	r3, r3, #11
 8005294:	2b00      	cmp	r3, #0
 8005296:	d108      	bne.n	80052aa <USART3_IRQHandler+0x3a>

      (void)v;                                         // Avoid warning in BTL

      if (_cbOnRx) {
 8005298:	4b17      	ldr	r3, [pc, #92]	@ (80052f8 <USART3_IRQHandler+0x88>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d004      	beq.n	80052aa <USART3_IRQHandler+0x3a>

        _cbOnRx(v);
 80052a0:	4b15      	ldr	r3, [pc, #84]	@ (80052f8 <USART3_IRQHandler+0x88>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	79fa      	ldrb	r2, [r7, #7]
 80052a6:	4610      	mov	r0, r2
 80052a8:	4798      	blx	r3

    }

  }

  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01a      	beq.n	80052ea <USART3_IRQHandler+0x7a>

    // Therefore, we need to check if the function pointer is valid.

    //

    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80052b4:	4b11      	ldr	r3, [pc, #68]	@ (80052fc <USART3_IRQHandler+0x8c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d015      	beq.n	80052e8 <USART3_IRQHandler+0x78>

      return;

    }

    r = _cbOnTx(&v);
 80052bc:	4b0f      	ldr	r3, [pc, #60]	@ (80052fc <USART3_IRQHandler+0x8c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	1dfa      	adds	r2, r7, #7
 80052c2:	4610      	mov	r0, r2
 80052c4:	4798      	blx	r3
 80052c6:	60b8      	str	r0, [r7, #8]

    if (r == 0) {                          // No more characters to send ?
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <USART3_IRQHandler+0x6c>

      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80052ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005300 <USART3_IRQHandler+0x90>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a0b      	ldr	r2, [pc, #44]	@ (8005300 <USART3_IRQHandler+0x90>)
 80052d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	e006      	b.n	80052ea <USART3_IRQHandler+0x7a>

    } else {

      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80052dc:	4b04      	ldr	r3, [pc, #16]	@ (80052f0 <USART3_IRQHandler+0x80>)
 80052de:	681b      	ldr	r3, [r3, #0]

      USART_TDR = v;  // Start transmission by writing to data register
 80052e0:	79fa      	ldrb	r2, [r7, #7]
 80052e2:	4b08      	ldr	r3, [pc, #32]	@ (8005304 <USART3_IRQHandler+0x94>)
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	e000      	b.n	80052ea <USART3_IRQHandler+0x7a>
      return;
 80052e8:	bf00      	nop

    }

  }

}
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	4000481c 	.word	0x4000481c
 80052f4:	40004824 	.word	0x40004824
 80052f8:	2000bad0 	.word	0x2000bad0
 80052fc:	2000bad4 	.word	0x2000bad4
 8005300:	40004800 	.word	0x40004800
 8005304:	40004828 	.word	0x40004828

08005308 <HIF_UART_Init>:

*       HIF_UART_Init()

*/

void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]

  //

  // Habilitar reloj de USART3 y puerto D

  RCC_APB1ENR |= (1 << 18);       // Habilitar reloj USART3 (APB1)
 8005314:	4b2e      	ldr	r3, [pc, #184]	@ (80053d0 <HIF_UART_Init+0xc8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a2d      	ldr	r2, [pc, #180]	@ (80053d0 <HIF_UART_Init+0xc8>)
 800531a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800531e:	6013      	str	r3, [r2, #0]

  RCC_AHB1ENR |= (1 << 3);        // Habilitar reloj GPIO D
 8005320:	4b2c      	ldr	r3, [pc, #176]	@ (80053d4 <HIF_UART_Init+0xcc>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a2b      	ldr	r2, [pc, #172]	@ (80053d4 <HIF_UART_Init+0xcc>)
 8005326:	f043 0308 	orr.w	r3, r3, #8
 800532a:	6013      	str	r3, [r2, #0]



  // Configurar los pines PD8 y PD9 para función alternativa AF7 (USART3)

  v  = GPIO_AFRH;
 800532c:	4b2a      	ldr	r3, [pc, #168]	@ (80053d8 <HIF_UART_Init+0xd0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	613b      	str	r3, [r7, #16]

  v &= ~((15UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (15UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005338:	613b      	str	r3, [r7, #16]

  v |=  ((7UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (7UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005340:	613b      	str	r3, [r7, #16]

  GPIO_AFRH = v;
 8005342:	4a25      	ldr	r2, [pc, #148]	@ (80053d8 <HIF_UART_Init+0xd0>)
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	6013      	str	r3, [r2, #0]

  // Configure USART RX/TX pins for alternate function usage

  //

  v  = GPIO_MODER;
 8005348:	4b24      	ldr	r3, [pc, #144]	@ (80053dc <HIF_UART_Init+0xd4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	613b      	str	r3, [r7, #16]

  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8005354:	613b      	str	r3, [r7, #16]

  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 800535c:	613b      	str	r3, [r7, #16]

  GPIO_MODER = v;
 800535e:	4a1f      	ldr	r2, [pc, #124]	@ (80053dc <HIF_UART_Init+0xd4>)
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	6013      	str	r3, [r2, #0]

  // Set baudrate

  //

  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	617b      	str	r3, [r7, #20]

  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800536a:	4a1d      	ldr	r2, [pc, #116]	@ (80053e0 <HIF_UART_Init+0xd8>)
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005372:	3301      	adds	r3, #1
 8005374:	617b      	str	r3, [r7, #20]

  Div = Div / 2;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	085b      	lsrs	r3, r3, #1
 800537a:	617b      	str	r3, [r7, #20]

  if (Div > 0xFFF) {
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005382:	d302      	bcc.n	800538a <HIF_UART_Init+0x82>

    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005384:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005388:	617b      	str	r3, [r7, #20]

  }

  if (Div >= 1) {
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d004      	beq.n	800539a <HIF_UART_Init+0x92>

    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	4a13      	ldr	r2, [pc, #76]	@ (80053e4 <HIF_UART_Init+0xdc>)
 8005396:	b29b      	uxth	r3, r3
 8005398:	6013      	str	r3, [r2, #0]

  // Initialize USART

  //

  USART_CR1 = 0
 800539a:	4b13      	ldr	r3, [pc, #76]	@ (80053e8 <HIF_UART_Init+0xe0>)
 800539c:	f248 022d 	movw	r2, #32813	@ 0x802d
 80053a0:	601a      	str	r2, [r3, #0]

            | (1 <<  2)                         // RE     = 1; Receiver enabled

            ;

  USART_CR2 = 0
 80053a2:	4b12      	ldr	r3, [pc, #72]	@ (80053ec <HIF_UART_Init+0xe4>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]

            | (0 << 12)                         // STOP = 00b; 1 stop bit

            ;

  USART_CR3 = 0
 80053a8:	4b11      	ldr	r3, [pc, #68]	@ (80053f0 <HIF_UART_Init+0xe8>)
 80053aa:	2280      	movs	r2, #128	@ 0x80
 80053ac:	601a      	str	r2, [r3, #0]

  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC

  //

  _cbOnRx = cbOnRx;
 80053ae:	4a11      	ldr	r2, [pc, #68]	@ (80053f4 <HIF_UART_Init+0xec>)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6013      	str	r3, [r2, #0]

  _cbOnTx = cbOnTx;
 80053b4:	4a10      	ldr	r2, [pc, #64]	@ (80053f8 <HIF_UART_Init+0xf0>)
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6013      	str	r3, [r2, #0]

  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80053ba:	2106      	movs	r1, #6
 80053bc:	2027      	movs	r0, #39	@ 0x27
 80053be:	f7ff feb9 	bl	8005134 <__NVIC_SetPriority>

  NVIC_EnableIRQ(USART_IRQn);
 80053c2:	2027      	movs	r0, #39	@ 0x27
 80053c4:	f7ff fe98 	bl	80050f8 <__NVIC_EnableIRQ>

}
 80053c8:	bf00      	nop
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40023840 	.word	0x40023840
 80053d4:	40023830 	.word	0x40023830
 80053d8:	40020c24 	.word	0x40020c24
 80053dc:	40020c00 	.word	0x40020c00
 80053e0:	0501bd00 	.word	0x0501bd00
 80053e4:	4000480c 	.word	0x4000480c
 80053e8:	40004800 	.word	0x40004800
 80053ec:	40004804 	.word	0x40004804
 80053f0:	40004808 	.word	0x40004808
 80053f4:	2000bad0 	.word	0x2000bad0
 80053f8:	2000bad4 	.word	0x2000bad4

080053fc <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005402:	4b26      	ldr	r3, [pc, #152]	@ (800549c <_DoInit+0xa0>)
 8005404:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005406:	22a8      	movs	r2, #168	@ 0xa8
 8005408:	2100      	movs	r1, #0
 800540a:	6838      	ldr	r0, [r7, #0]
 800540c:	f002 f97a 	bl	8007704 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2203      	movs	r2, #3
 8005414:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2203      	movs	r2, #3
 800541a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	4a20      	ldr	r2, [pc, #128]	@ (80054a0 <_DoInit+0xa4>)
 8005420:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	4a1f      	ldr	r2, [pc, #124]	@ (80054a4 <_DoInit+0xa8>)
 8005426:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800542e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2200      	movs	r2, #0
 8005434:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2200      	movs	r2, #0
 800543a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	2200      	movs	r2, #0
 8005440:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	4a16      	ldr	r2, [pc, #88]	@ (80054a0 <_DoInit+0xa4>)
 8005446:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	4a17      	ldr	r2, [pc, #92]	@ (80054a8 <_DoInit+0xac>)
 800544c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2210      	movs	r2, #16
 8005452:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	2200      	movs	r2, #0
 8005458:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2200      	movs	r2, #0
 800545e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	2200      	movs	r2, #0
 8005464:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005466:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800546a:	2300      	movs	r3, #0
 800546c:	607b      	str	r3, [r7, #4]
 800546e:	e00c      	b.n	800548a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f1c3 030f 	rsb	r3, r3, #15
 8005476:	4a0d      	ldr	r2, [pc, #52]	@ (80054ac <_DoInit+0xb0>)
 8005478:	5cd1      	ldrb	r1, [r2, r3]
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4413      	add	r3, r2
 8005480:	460a      	mov	r2, r1
 8005482:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3301      	adds	r3, #1
 8005488:	607b      	str	r3, [r7, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b0f      	cmp	r3, #15
 800548e:	d9ef      	bls.n	8005470 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005490:	f3bf 8f5f 	dmb	sy
}
 8005494:	bf00      	nop
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	2000bad8 	.word	0x2000bad8
 80054a0:	080078c0 	.word	0x080078c0
 80054a4:	2000bb80 	.word	0x2000bb80
 80054a8:	2000bf80 	.word	0x2000bf80
 80054ac:	08007900 	.word	0x08007900

080054b0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08a      	sub	sp, #40	@ 0x28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80054bc:	2300      	movs	r3, #0
 80054be:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d905      	bls.n	80054e0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80054de:	e007      	b.n	80054f0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	69b9      	ldr	r1, [r7, #24]
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	1acb      	subs	r3, r1, r3
 80054ea:	4413      	add	r3, r2
 80054ec:	3b01      	subs	r3, #1
 80054ee:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054fa:	4293      	cmp	r3, r2
 80054fc:	bf28      	it	cs
 80054fe:	4613      	movcs	r3, r2
 8005500:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4293      	cmp	r3, r2
 8005508:	bf28      	it	cs
 800550a:	4613      	movcs	r3, r2
 800550c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	4413      	add	r3, r2
 8005516:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	6978      	ldr	r0, [r7, #20]
 800551e:	f002 f91d 	bl	800775c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005522:	6a3a      	ldr	r2, [r7, #32]
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	4413      	add	r3, r2
 8005528:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552e:	4413      	add	r3, r2
 8005530:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800553a:	69fa      	ldr	r2, [r7, #28]
 800553c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553e:	4413      	add	r3, r2
 8005540:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	69fa      	ldr	r2, [r7, #28]
 8005548:	429a      	cmp	r2, r3
 800554a:	d101      	bne.n	8005550 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800554c:	2300      	movs	r3, #0
 800554e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005550:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	69fa      	ldr	r2, [r7, #28]
 8005558:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1b2      	bne.n	80054c6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005560:	6a3b      	ldr	r3, [r7, #32]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3728      	adds	r7, #40	@ 0x28
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800556a:	b580      	push	{r7, lr}
 800556c:	b088      	sub	sp, #32
 800556e:	af00      	add	r7, sp, #0
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	429a      	cmp	r2, r3
 800558c:	d911      	bls.n	80055b2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	4413      	add	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	68b9      	ldr	r1, [r7, #8]
 800559c:	6938      	ldr	r0, [r7, #16]
 800559e:	f002 f8dd 	bl	800775c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055a2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	441a      	add	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80055b0:	e01f      	b.n	80055f2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	4413      	add	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	6938      	ldr	r0, [r7, #16]
 80055c6:	f002 f8c9 	bl	800775c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	4413      	add	r3, r2
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	4619      	mov	r1, r3
 80055e2:	6938      	ldr	r0, [r7, #16]
 80055e4:	f002 f8ba 	bl	800775c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055e8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	60da      	str	r2, [r3, #12]
}
 80055f2:	bf00      	nop
 80055f4:	3720      	adds	r7, #32
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80055fa:	b480      	push	{r7}
 80055fc:	b087      	sub	sp, #28
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	429a      	cmp	r2, r3
 8005614:	d808      	bhi.n	8005628 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689a      	ldr	r2, [r3, #8]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1ad2      	subs	r2, r2, r3
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	4413      	add	r3, r2
 8005622:	3b01      	subs	r3, #1
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	e004      	b.n	8005632 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005632:	697b      	ldr	r3, [r7, #20]
}
 8005634:	4618      	mov	r0, r3
 8005636:	371c      	adds	r7, #28
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005640:	b580      	push	{r7, lr}
 8005642:	b08c      	sub	sp, #48	@ 0x30
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800564c:	4b3e      	ldr	r3, [pc, #248]	@ (8005748 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800564e:	623b      	str	r3, [r7, #32]
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b53      	cmp	r3, #83	@ 0x53
 8005658:	d001      	beq.n	800565e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800565a:	f7ff fecf 	bl	80053fc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	4613      	mov	r3, r2
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	4413      	add	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	4a37      	ldr	r2, [pc, #220]	@ (8005748 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800566c:	4413      	add	r3, r2
 800566e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005680:	2300      	movs	r3, #0
 8005682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005684:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	429a      	cmp	r2, r3
 800568a:	d92b      	bls.n	80056e4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4293      	cmp	r3, r2
 800569c:	bf28      	it	cs
 800569e:	4613      	movcs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a8:	4413      	add	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	6939      	ldr	r1, [r7, #16]
 80056b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80056b2:	f002 f853 	bl	800775c <memcpy>
    NumBytesRead += NumBytesRem;
 80056b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	4413      	add	r3, r2
 80056bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80056be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	4413      	add	r3, r2
 80056c4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80056ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	4413      	add	r3, r2
 80056d4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056dc:	429a      	cmp	r2, r3
 80056de:	d101      	bne.n	80056e4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80056e0:	2300      	movs	r3, #0
 80056e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4293      	cmp	r3, r2
 80056f2:	bf28      	it	cs
 80056f4:	4613      	movcs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d019      	beq.n	8005732 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005704:	4413      	add	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	6939      	ldr	r1, [r7, #16]
 800570c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800570e:	f002 f825 	bl	800775c <memcpy>
    NumBytesRead += NumBytesRem;
 8005712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	4413      	add	r3, r2
 8005718:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800571a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	4413      	add	r3, r2
 8005720:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800572a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	4413      	add	r3, r2
 8005730:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800573c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800573e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005740:	4618      	mov	r0, r3
 8005742:	3730      	adds	r7, #48	@ 0x30
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	2000bad8 	.word	0x2000bad8

0800574c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800574c:	b580      	push	{r7, lr}
 800574e:	b08c      	sub	sp, #48	@ 0x30
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005758:	4b3e      	ldr	r3, [pc, #248]	@ (8005854 <SEGGER_RTT_ReadNoLock+0x108>)
 800575a:	623b      	str	r3, [r7, #32]
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b53      	cmp	r3, #83	@ 0x53
 8005764:	d001      	beq.n	800576a <SEGGER_RTT_ReadNoLock+0x1e>
 8005766:	f7ff fe49 	bl	80053fc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4613      	mov	r3, r2
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	4413      	add	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	3360      	adds	r3, #96	@ 0x60
 8005776:	4a37      	ldr	r2, [pc, #220]	@ (8005854 <SEGGER_RTT_ReadNoLock+0x108>)
 8005778:	4413      	add	r3, r2
 800577a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800578c:	2300      	movs	r3, #0
 800578e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005790:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	429a      	cmp	r2, r3
 8005796:	d92b      	bls.n	80057f0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4293      	cmp	r3, r2
 80057a8:	bf28      	it	cs
 80057aa:	4613      	movcs	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b4:	4413      	add	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	6939      	ldr	r1, [r7, #16]
 80057bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80057be:	f001 ffcd 	bl	800775c <memcpy>
    NumBytesRead += NumBytesRem;
 80057c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	4413      	add	r3, r2
 80057c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80057ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	4413      	add	r3, r2
 80057d0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80057da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	4413      	add	r3, r2
 80057e0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d101      	bne.n	80057f0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80057ec:	2300      	movs	r3, #0
 80057ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4293      	cmp	r3, r2
 80057fe:	bf28      	it	cs
 8005800:	4613      	movcs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d019      	beq.n	800583e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005810:	4413      	add	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	6939      	ldr	r1, [r7, #16]
 8005818:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800581a:	f001 ff9f 	bl	800775c <memcpy>
    NumBytesRead += NumBytesRem;
 800581e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	4413      	add	r3, r2
 8005824:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	4413      	add	r3, r2
 800582c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005836:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	4413      	add	r3, r2
 800583c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800583e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005848:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800584a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800584c:	4618      	mov	r0, r3
 800584e:	3730      	adds	r7, #48	@ 0x30
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	2000bad8 	.word	0x2000bad8

08005858 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4613      	mov	r3, r2
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	4413      	add	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	3360      	adds	r3, #96	@ 0x60
 8005874:	4a1f      	ldr	r2, [pc, #124]	@ (80058f4 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005876:	4413      	add	r3, r2
 8005878:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d029      	beq.n	80058d6 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005882:	2b02      	cmp	r3, #2
 8005884:	d82e      	bhi.n	80058e4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800588a:	2b01      	cmp	r3, #1
 800588c:	d013      	beq.n	80058b6 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800588e:	e029      	b.n	80058e4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005890:	6978      	ldr	r0, [r7, #20]
 8005892:	f7ff feb2 	bl	80055fa <_GetAvailWriteSpace>
 8005896:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	429a      	cmp	r2, r3
 800589e:	d202      	bcs.n	80058a6 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80058a0:	2300      	movs	r3, #0
 80058a2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80058a4:	e021      	b.n	80058ea <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	69b9      	ldr	r1, [r7, #24]
 80058ae:	6978      	ldr	r0, [r7, #20]
 80058b0:	f7ff fe5b 	bl	800556a <_WriteNoCheck>
    break;
 80058b4:	e019      	b.n	80058ea <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80058b6:	6978      	ldr	r0, [r7, #20]
 80058b8:	f7ff fe9f 	bl	80055fa <_GetAvailWriteSpace>
 80058bc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	4293      	cmp	r3, r2
 80058c4:	bf28      	it	cs
 80058c6:	4613      	movcs	r3, r2
 80058c8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80058ca:	69fa      	ldr	r2, [r7, #28]
 80058cc:	69b9      	ldr	r1, [r7, #24]
 80058ce:	6978      	ldr	r0, [r7, #20]
 80058d0:	f7ff fe4b 	bl	800556a <_WriteNoCheck>
    break;
 80058d4:	e009      	b.n	80058ea <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	69b9      	ldr	r1, [r7, #24]
 80058da:	6978      	ldr	r0, [r7, #20]
 80058dc:	f7ff fde8 	bl	80054b0 <_WriteBlocking>
 80058e0:	61f8      	str	r0, [r7, #28]
    break;
 80058e2:	e002      	b.n	80058ea <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80058e4:	2300      	movs	r3, #0
 80058e6:	61fb      	str	r3, [r7, #28]
    break;
 80058e8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80058ea:	69fb      	ldr	r3, [r7, #28]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3720      	adds	r7, #32
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	2000bad8 	.word	0x2000bad8

080058f8 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b088      	sub	sp, #32
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005904:	4b0e      	ldr	r3, [pc, #56]	@ (8005940 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005906:	61fb      	str	r3, [r7, #28]
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b53      	cmp	r3, #83	@ 0x53
 8005910:	d001      	beq.n	8005916 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005912:	f7ff fd73 	bl	80053fc <_DoInit>
  SEGGER_RTT_LOCK();
 8005916:	f3ef 8311 	mrs	r3, BASEPRI
 800591a:	f04f 0120 	mov.w	r1, #32
 800591e:	f381 8811 	msr	BASEPRI, r1
 8005922:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	68b9      	ldr	r1, [r7, #8]
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f7ff ff95 	bl	8005858 <SEGGER_RTT_WriteDownBufferNoLock>
 800592e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005936:	697b      	ldr	r3, [r7, #20]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3720      	adds	r7, #32
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	2000bad8 	.word	0x2000bad8

08005944 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005952:	4b3d      	ldr	r3, [pc, #244]	@ (8005a48 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b53      	cmp	r3, #83	@ 0x53
 800595e:	d001      	beq.n	8005964 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005960:	f7ff fd4c 	bl	80053fc <_DoInit>
  SEGGER_RTT_LOCK();
 8005964:	f3ef 8311 	mrs	r3, BASEPRI
 8005968:	f04f 0120 	mov.w	r1, #32
 800596c:	f381 8811 	msr	BASEPRI, r1
 8005970:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005972:	4b35      	ldr	r3, [pc, #212]	@ (8005a48 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005974:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005976:	2300      	movs	r3, #0
 8005978:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800597a:	6939      	ldr	r1, [r7, #16]
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	4613      	mov	r3, r2
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	4413      	add	r3, r2
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	440b      	add	r3, r1
 800598a:	3304      	adds	r3, #4
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d008      	beq.n	80059a4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	3301      	adds	r3, #1
 8005996:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	69fa      	ldr	r2, [r7, #28]
 800599e:	429a      	cmp	r2, r3
 80059a0:	dbeb      	blt.n	800597a <SEGGER_RTT_AllocUpBuffer+0x36>
 80059a2:	e000      	b.n	80059a6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80059a4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	69fa      	ldr	r2, [r7, #28]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	da3f      	bge.n	8005a30 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80059b0:	6939      	ldr	r1, [r7, #16]
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	4613      	mov	r3, r2
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	4413      	add	r3, r2
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	440b      	add	r3, r1
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80059c4:	6939      	ldr	r1, [r7, #16]
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	4613      	mov	r3, r2
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	4413      	add	r3, r2
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	440b      	add	r3, r1
 80059d4:	3304      	adds	r3, #4
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80059da:	6939      	ldr	r1, [r7, #16]
 80059dc:	69fa      	ldr	r2, [r7, #28]
 80059de:	4613      	mov	r3, r2
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	4413      	add	r3, r2
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	440b      	add	r3, r1
 80059e8:	3320      	adds	r3, #32
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80059ee:	6939      	ldr	r1, [r7, #16]
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	4613      	mov	r3, r2
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	4413      	add	r3, r2
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	440b      	add	r3, r1
 80059fc:	3328      	adds	r3, #40	@ 0x28
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005a02:	6939      	ldr	r1, [r7, #16]
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	4613      	mov	r3, r2
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	4413      	add	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	440b      	add	r3, r1
 8005a10:	3324      	adds	r3, #36	@ 0x24
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005a16:	6939      	ldr	r1, [r7, #16]
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	4413      	add	r3, r2
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	440b      	add	r3, r1
 8005a24:	332c      	adds	r3, #44	@ 0x2c
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a2a:	f3bf 8f5f 	dmb	sy
 8005a2e:	e002      	b.n	8005a36 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005a30:	f04f 33ff 	mov.w	r3, #4294967295
 8005a34:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005a3c:	69fb      	ldr	r3, [r7, #28]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3720      	adds	r7, #32
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	2000bad8 	.word	0x2000bad8

08005a4c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08a      	sub	sp, #40	@ 0x28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005a5a:	4b21      	ldr	r3, [pc, #132]	@ (8005ae0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005a5c:	623b      	str	r3, [r7, #32]
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b53      	cmp	r3, #83	@ 0x53
 8005a66:	d001      	beq.n	8005a6c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005a68:	f7ff fcc8 	bl	80053fc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8005ae0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005a6e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d82c      	bhi.n	8005ad0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005a76:	f3ef 8311 	mrs	r3, BASEPRI
 8005a7a:	f04f 0120 	mov.w	r1, #32
 8005a7e:	f381 8811 	msr	BASEPRI, r1
 8005a82:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4613      	mov	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	4413      	add	r3, r2
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	3360      	adds	r3, #96	@ 0x60
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	4413      	add	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00e      	beq.n	8005aba <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005abe:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005ac0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005aca:	2300      	movs	r3, #0
 8005acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ace:	e002      	b.n	8005ad6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3728      	adds	r7, #40	@ 0x28
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	2000bad8 	.word	0x2000bad8

08005ae4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	1c5a      	adds	r2, r3, #1
 8005af8:	60fa      	str	r2, [r7, #12]
 8005afa:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b80      	cmp	r3, #128	@ 0x80
 8005b00:	d90a      	bls.n	8005b18 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005b02:	2380      	movs	r3, #128	@ 0x80
 8005b04:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005b06:	e007      	b.n	8005b18 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	1c53      	adds	r3, r2, #1
 8005b0c:	60bb      	str	r3, [r7, #8]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	1c59      	adds	r1, r3, #1
 8005b12:	60f9      	str	r1, [r7, #12]
 8005b14:	7812      	ldrb	r2, [r2, #0]
 8005b16:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	1e5a      	subs	r2, r3, #1
 8005b1c:	607a      	str	r2, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <_EncodeStr+0x46>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1ee      	bne.n	8005b08 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005b36:	68fb      	ldr	r3, [r7, #12]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	371c      	adds	r7, #28
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3307      	adds	r3, #7
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005b62:	4b34      	ldr	r3, [pc, #208]	@ (8005c34 <_HandleIncomingPacket+0xd8>)
 8005b64:	7e1b      	ldrb	r3, [r3, #24]
 8005b66:	4618      	mov	r0, r3
 8005b68:	1cfb      	adds	r3, r7, #3
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	f7ff fded 	bl	800574c <SEGGER_RTT_ReadNoLock>
 8005b72:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d057      	beq.n	8005c2a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8005b7a:	78fb      	ldrb	r3, [r7, #3]
 8005b7c:	2b80      	cmp	r3, #128	@ 0x80
 8005b7e:	d031      	beq.n	8005be4 <_HandleIncomingPacket+0x88>
 8005b80:	2b80      	cmp	r3, #128	@ 0x80
 8005b82:	dc40      	bgt.n	8005c06 <_HandleIncomingPacket+0xaa>
 8005b84:	2b07      	cmp	r3, #7
 8005b86:	dc15      	bgt.n	8005bb4 <_HandleIncomingPacket+0x58>
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	dd3c      	ble.n	8005c06 <_HandleIncomingPacket+0xaa>
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	2b06      	cmp	r3, #6
 8005b90:	d839      	bhi.n	8005c06 <_HandleIncomingPacket+0xaa>
 8005b92:	a201      	add	r2, pc, #4	@ (adr r2, 8005b98 <_HandleIncomingPacket+0x3c>)
 8005b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b98:	08005bbb 	.word	0x08005bbb
 8005b9c:	08005bc1 	.word	0x08005bc1
 8005ba0:	08005bc7 	.word	0x08005bc7
 8005ba4:	08005bcd 	.word	0x08005bcd
 8005ba8:	08005bd3 	.word	0x08005bd3
 8005bac:	08005bd9 	.word	0x08005bd9
 8005bb0:	08005bdf 	.word	0x08005bdf
 8005bb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bb6:	d033      	beq.n	8005c20 <_HandleIncomingPacket+0xc4>
 8005bb8:	e025      	b.n	8005c06 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005bba:	f000 fee7 	bl	800698c <SEGGER_SYSVIEW_Start>
      break;
 8005bbe:	e034      	b.n	8005c2a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005bc0:	f000 ff9e 	bl	8006b00 <SEGGER_SYSVIEW_Stop>
      break;
 8005bc4:	e031      	b.n	8005c2a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005bc6:	f001 f977 	bl	8006eb8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005bca:	e02e      	b.n	8005c2a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005bcc:	f001 f93c 	bl	8006e48 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005bd0:	e02b      	b.n	8005c2a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005bd2:	f000 ffbb 	bl	8006b4c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005bd6:	e028      	b.n	8005c2a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005bd8:	f001 fca8 	bl	800752c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005bdc:	e025      	b.n	8005c2a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005bde:	f001 fc87 	bl	80074f0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005be2:	e022      	b.n	8005c2a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005be4:	4b13      	ldr	r3, [pc, #76]	@ (8005c34 <_HandleIncomingPacket+0xd8>)
 8005be6:	7e1b      	ldrb	r3, [r3, #24]
 8005be8:	4618      	mov	r0, r3
 8005bea:	1cfb      	adds	r3, r7, #3
 8005bec:	2201      	movs	r2, #1
 8005bee:	4619      	mov	r1, r3
 8005bf0:	f7ff fdac 	bl	800574c <SEGGER_RTT_ReadNoLock>
 8005bf4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d013      	beq.n	8005c24 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 fbec 	bl	80073dc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005c04:	e00e      	b.n	8005c24 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005c06:	78fb      	ldrb	r3, [r7, #3]
 8005c08:	b25b      	sxtb	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	da0c      	bge.n	8005c28 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c0e:	4b09      	ldr	r3, [pc, #36]	@ (8005c34 <_HandleIncomingPacket+0xd8>)
 8005c10:	7e1b      	ldrb	r3, [r3, #24]
 8005c12:	4618      	mov	r0, r3
 8005c14:	1cfb      	adds	r3, r7, #3
 8005c16:	2201      	movs	r2, #1
 8005c18:	4619      	mov	r1, r3
 8005c1a:	f7ff fd97 	bl	800574c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005c1e:	e003      	b.n	8005c28 <_HandleIncomingPacket+0xcc>
      break;
 8005c20:	bf00      	nop
 8005c22:	e002      	b.n	8005c2a <_HandleIncomingPacket+0xce>
      break;
 8005c24:	bf00      	nop
 8005c26:	e000      	b.n	8005c2a <_HandleIncomingPacket+0xce>
      break;
 8005c28:	bf00      	nop
    }
  }
}
 8005c2a:	bf00      	nop
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	2000c398 	.word	0x2000c398

08005c38 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08c      	sub	sp, #48	@ 0x30
 8005c3c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005c3e:	2301      	movs	r3, #1
 8005c40:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005c42:	1d3b      	adds	r3, r7, #4
 8005c44:	3301      	adds	r3, #1
 8005c46:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c4c:	4b31      	ldr	r3, [pc, #196]	@ (8005d14 <_TrySendOverflowPacket+0xdc>)
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c52:	e00b      	b.n	8005c6c <_TrySendOverflowPacket+0x34>
 8005c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c5a:	1c59      	adds	r1, r3, #1
 8005c5c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005c5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	701a      	strb	r2, [r3, #0]
 8005c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c68:	09db      	lsrs	r3, r3, #7
 8005c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c70:	d8f0      	bhi.n	8005c54 <_TrySendOverflowPacket+0x1c>
 8005c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]
 8005c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c80:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005c82:	4b25      	ldr	r3, [pc, #148]	@ (8005d18 <_TrySendOverflowPacket+0xe0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005c88:	4b22      	ldr	r3, [pc, #136]	@ (8005d14 <_TrySendOverflowPacket+0xdc>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	623b      	str	r3, [r7, #32]
 8005c9a:	e00b      	b.n	8005cb4 <_TrySendOverflowPacket+0x7c>
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca2:	1c59      	adds	r1, r3, #1
 8005ca4:	6279      	str	r1, [r7, #36]	@ 0x24
 8005ca6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	09db      	lsrs	r3, r3, #7
 8005cb2:	623b      	str	r3, [r7, #32]
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cb8:	d8f0      	bhi.n	8005c9c <_TrySendOverflowPacket+0x64>
 8005cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	627a      	str	r2, [r7, #36]	@ 0x24
 8005cc0:	6a3a      	ldr	r2, [r7, #32]
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	701a      	strb	r2, [r3, #0]
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005cca:	4b12      	ldr	r3, [pc, #72]	@ (8005d14 <_TrySendOverflowPacket+0xdc>)
 8005ccc:	785b      	ldrb	r3, [r3, #1]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	1d3b      	adds	r3, r7, #4
 8005cd2:	69fa      	ldr	r2, [r7, #28]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	1d3b      	adds	r3, r7, #4
 8005cda:	4619      	mov	r1, r3
 8005cdc:	f7fa fab0 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d009      	beq.n	8005cfe <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005cea:	4a0a      	ldr	r2, [pc, #40]	@ (8005d14 <_TrySendOverflowPacket+0xdc>)
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005cf0:	4b08      	ldr	r3, [pc, #32]	@ (8005d14 <_TrySendOverflowPacket+0xdc>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	4b06      	ldr	r3, [pc, #24]	@ (8005d14 <_TrySendOverflowPacket+0xdc>)
 8005cfa:	701a      	strb	r2, [r3, #0]
 8005cfc:	e004      	b.n	8005d08 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005cfe:	4b05      	ldr	r3, [pc, #20]	@ (8005d14 <_TrySendOverflowPacket+0xdc>)
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	3301      	adds	r3, #1
 8005d04:	4a03      	ldr	r2, [pc, #12]	@ (8005d14 <_TrySendOverflowPacket+0xdc>)
 8005d06:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005d08:	693b      	ldr	r3, [r7, #16]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3730      	adds	r7, #48	@ 0x30
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	2000c398 	.word	0x2000c398
 8005d18:	e0001004 	.word	0xe0001004

08005d1c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08a      	sub	sp, #40	@ 0x28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005d28:	4b98      	ldr	r3, [pc, #608]	@ (8005f8c <_SendPacket+0x270>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d010      	beq.n	8005d52 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005d30:	4b96      	ldr	r3, [pc, #600]	@ (8005f8c <_SendPacket+0x270>)
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 812d 	beq.w	8005f94 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005d3a:	4b94      	ldr	r3, [pc, #592]	@ (8005f8c <_SendPacket+0x270>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d109      	bne.n	8005d56 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005d42:	f7ff ff79 	bl	8005c38 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005d46:	4b91      	ldr	r3, [pc, #580]	@ (8005f8c <_SendPacket+0x270>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	f040 8124 	bne.w	8005f98 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005d50:	e001      	b.n	8005d56 <_SendPacket+0x3a>
    goto Send;
 8005d52:	bf00      	nop
 8005d54:	e000      	b.n	8005d58 <_SendPacket+0x3c>
Send:
 8005d56:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b1f      	cmp	r3, #31
 8005d5c:	d809      	bhi.n	8005d72 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005d5e:	4b8b      	ldr	r3, [pc, #556]	@ (8005f8c <_SendPacket+0x270>)
 8005d60:	69da      	ldr	r2, [r3, #28]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	fa22 f303 	lsr.w	r3, r2, r3
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f040 8115 	bne.w	8005f9c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b17      	cmp	r3, #23
 8005d76:	d807      	bhi.n	8005d88 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	701a      	strb	r2, [r3, #0]
 8005d86:	e0c4      	b.n	8005f12 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d94:	d912      	bls.n	8005dbc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	09da      	lsrs	r2, r3, #7
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	3a01      	subs	r2, #1
 8005dae:	60fa      	str	r2, [r7, #12]
 8005db0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	701a      	strb	r2, [r3, #0]
 8005dba:	e006      	b.n	8005dca <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b7e      	cmp	r3, #126	@ 0x7e
 8005dce:	d807      	bhi.n	8005de0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	e098      	b.n	8005f12 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005de6:	d212      	bcs.n	8005e0e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	09da      	lsrs	r2, r3, #7
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	3a01      	subs	r2, #1
 8005e00:	60fa      	str	r2, [r7, #12]
 8005e02:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	e081      	b.n	8005f12 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e14:	d21d      	bcs.n	8005e52 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	0b9a      	lsrs	r2, r3, #14
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	09db      	lsrs	r3, r3, #7
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	3a01      	subs	r2, #1
 8005e30:	60fa      	str	r2, [r7, #12]
 8005e32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	3a01      	subs	r2, #1
 8005e44:	60fa      	str	r2, [r7, #12]
 8005e46:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	701a      	strb	r2, [r3, #0]
 8005e50:	e05f      	b.n	8005f12 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e58:	d228      	bcs.n	8005eac <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	0d5a      	lsrs	r2, r3, #21
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	0b9b      	lsrs	r3, r3, #14
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	3a01      	subs	r2, #1
 8005e74:	60fa      	str	r2, [r7, #12]
 8005e76:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	09db      	lsrs	r3, r3, #7
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	3a01      	subs	r2, #1
 8005e8a:	60fa      	str	r2, [r7, #12]
 8005e8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	3a01      	subs	r2, #1
 8005e9e:	60fa      	str	r2, [r7, #12]
 8005ea0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	e032      	b.n	8005f12 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	0f1a      	lsrs	r2, r3, #28
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	0d5b      	lsrs	r3, r3, #21
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	3a01      	subs	r2, #1
 8005ec6:	60fa      	str	r2, [r7, #12]
 8005ec8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	0b9b      	lsrs	r3, r3, #14
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	3a01      	subs	r2, #1
 8005edc:	60fa      	str	r2, [r7, #12]
 8005ede:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	09db      	lsrs	r3, r3, #7
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	3a01      	subs	r2, #1
 8005ef2:	60fa      	str	r2, [r7, #12]
 8005ef4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	3a01      	subs	r2, #1
 8005f06:	60fa      	str	r2, [r7, #12]
 8005f08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f12:	4b1f      	ldr	r3, [pc, #124]	@ (8005f90 <_SendPacket+0x274>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005f18:	4b1c      	ldr	r3, [pc, #112]	@ (8005f8c <_SendPacket+0x270>)
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	623b      	str	r3, [r7, #32]
 8005f2a:	e00b      	b.n	8005f44 <_SendPacket+0x228>
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f32:	1c59      	adds	r1, r3, #1
 8005f34:	6279      	str	r1, [r7, #36]	@ 0x24
 8005f36:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	09db      	lsrs	r3, r3, #7
 8005f42:	623b      	str	r3, [r7, #32]
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f48:	d8f0      	bhi.n	8005f2c <_SendPacket+0x210>
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f50:	6a3a      	ldr	r2, [r7, #32]
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	701a      	strb	r2, [r3, #0]
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f8c <_SendPacket+0x270>)
 8005f5c:	785b      	ldrb	r3, [r3, #1]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	68f9      	ldr	r1, [r7, #12]
 8005f6a:	f7fa f969 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005f6e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005f76:	4a05      	ldr	r2, [pc, #20]	@ (8005f8c <_SendPacket+0x270>)
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	60d3      	str	r3, [r2, #12]
 8005f7c:	e00f      	b.n	8005f9e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005f7e:	4b03      	ldr	r3, [pc, #12]	@ (8005f8c <_SendPacket+0x270>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	3301      	adds	r3, #1
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	4b01      	ldr	r3, [pc, #4]	@ (8005f8c <_SendPacket+0x270>)
 8005f88:	701a      	strb	r2, [r3, #0]
 8005f8a:	e008      	b.n	8005f9e <_SendPacket+0x282>
 8005f8c:	2000c398 	.word	0x2000c398
 8005f90:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005f94:	bf00      	nop
 8005f96:	e002      	b.n	8005f9e <_SendPacket+0x282>
      goto SendDone;
 8005f98:	bf00      	nop
 8005f9a:	e000      	b.n	8005f9e <_SendPacket+0x282>
      goto SendDone;
 8005f9c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005f9e:	4b14      	ldr	r3, [pc, #80]	@ (8005ff0 <_SendPacket+0x2d4>)
 8005fa0:	7e1b      	ldrb	r3, [r3, #24]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4a13      	ldr	r2, [pc, #76]	@ (8005ff4 <_SendPacket+0x2d8>)
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	440b      	add	r3, r1
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	4413      	add	r3, r2
 8005fb0:	336c      	adds	r3, #108	@ 0x6c
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8005ff0 <_SendPacket+0x2d4>)
 8005fb6:	7e1b      	ldrb	r3, [r3, #24]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	490e      	ldr	r1, [pc, #56]	@ (8005ff4 <_SendPacket+0x2d8>)
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	4403      	add	r3, r0
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	440b      	add	r3, r1
 8005fc6:	3370      	adds	r3, #112	@ 0x70
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d00b      	beq.n	8005fe6 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005fce:	4b08      	ldr	r3, [pc, #32]	@ (8005ff0 <_SendPacket+0x2d4>)
 8005fd0:	789b      	ldrb	r3, [r3, #2]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d107      	bne.n	8005fe6 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005fd6:	4b06      	ldr	r3, [pc, #24]	@ (8005ff0 <_SendPacket+0x2d4>)
 8005fd8:	2201      	movs	r2, #1
 8005fda:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005fdc:	f7ff fdbe 	bl	8005b5c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005fe0:	4b03      	ldr	r3, [pc, #12]	@ (8005ff0 <_SendPacket+0x2d4>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005fe6:	bf00      	nop
 8005fe8:	3728      	adds	r7, #40	@ 0x28
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	2000c398 	.word	0x2000c398
 8005ff4:	2000bad8 	.word	0x2000bad8

08005ff8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08a      	sub	sp, #40	@ 0x28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	3301      	adds	r3, #1
 800600e:	2b80      	cmp	r3, #128	@ 0x80
 8006010:	d80a      	bhi.n	8006028 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	1c59      	adds	r1, r3, #1
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6051      	str	r1, [r2, #4]
 800601c:	78fa      	ldrb	r2, [r7, #3]
 800601e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	2b80      	cmp	r3, #128	@ 0x80
 800602e:	d15a      	bne.n	80060e6 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	b2d2      	uxtb	r2, r2
 800603a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	627b      	str	r3, [r7, #36]	@ 0x24
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	623b      	str	r3, [r7, #32]
 8006050:	e00b      	b.n	800606a <_StoreChar+0x72>
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	b2da      	uxtb	r2, r3
 8006056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006058:	1c59      	adds	r1, r3, #1
 800605a:	6279      	str	r1, [r7, #36]	@ 0x24
 800605c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006060:	b2d2      	uxtb	r2, r2
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	09db      	lsrs	r3, r3, #7
 8006068:	623b      	str	r3, [r7, #32]
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	2b7f      	cmp	r3, #127	@ 0x7f
 800606e:	d8f0      	bhi.n	8006052 <_StoreChar+0x5a>
 8006070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	627a      	str	r2, [r7, #36]	@ 0x24
 8006076:	6a3a      	ldr	r2, [r7, #32]
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	61fb      	str	r3, [r7, #28]
 8006084:	2300      	movs	r3, #0
 8006086:	61bb      	str	r3, [r7, #24]
 8006088:	e00b      	b.n	80060a2 <_StoreChar+0xaa>
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	b2da      	uxtb	r2, r3
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	1c59      	adds	r1, r3, #1
 8006092:	61f9      	str	r1, [r7, #28]
 8006094:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	09db      	lsrs	r3, r3, #7
 80060a0:	61bb      	str	r3, [r7, #24]
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80060a6:	d8f0      	bhi.n	800608a <_StoreChar+0x92>
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	61fa      	str	r2, [r7, #28]
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	b2d2      	uxtb	r2, r2
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	221a      	movs	r2, #26
 80060be:	6939      	ldr	r1, [r7, #16]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff fe2b 	bl	8005d1c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7ff fd3a 	bl	8005b44 <_PreparePacket>
 80060d0:	4602      	mov	r2, r0
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	611a      	str	r2, [r3, #16]
  }
}
 80060e6:	bf00      	nop
 80060e8:	3728      	adds	r7, #40	@ 0x28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08a      	sub	sp, #40	@ 0x28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8006102:	2301      	movs	r3, #1
 8006104:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8006106:	2301      	movs	r3, #1
 8006108:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800610a:	e007      	b.n	800611c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800610c:	6a3a      	ldr	r2, [r7, #32]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	fbb2 f3f3 	udiv	r3, r2, r3
 8006114:	623b      	str	r3, [r7, #32]
    Width++;
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	3301      	adds	r3, #1
 800611a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800611c:	6a3a      	ldr	r2, [r7, #32]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	429a      	cmp	r2, r3
 8006122:	d2f3      	bcs.n	800610c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	429a      	cmp	r2, r3
 800612a:	d901      	bls.n	8006130 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d000      	beq.n	800613c <_PrintUnsigned+0x4c>
 800613a:	e01f      	b.n	800617c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 800613c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613e:	2b00      	cmp	r3, #0
 8006140:	d01c      	beq.n	800617c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d005      	beq.n	8006158 <_PrintUnsigned+0x68>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d102      	bne.n	8006158 <_PrintUnsigned+0x68>
        c = '0';
 8006152:	2330      	movs	r3, #48	@ 0x30
 8006154:	76fb      	strb	r3, [r7, #27]
 8006156:	e001      	b.n	800615c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8006158:	2320      	movs	r3, #32
 800615a:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800615c:	e007      	b.n	800616e <_PrintUnsigned+0x7e>
        FieldWidth--;
 800615e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006160:	3b01      	subs	r3, #1
 8006162:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8006164:	7efb      	ldrb	r3, [r7, #27]
 8006166:	4619      	mov	r1, r3
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff ff45 	bl	8005ff8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800616e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <_PrintUnsigned+0x8c>
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006178:	429a      	cmp	r2, r3
 800617a:	d3f0      	bcc.n	800615e <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d903      	bls.n	800618a <_PrintUnsigned+0x9a>
      NumDigits--;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	3b01      	subs	r3, #1
 8006186:	603b      	str	r3, [r7, #0]
 8006188:	e009      	b.n	800619e <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006192:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	429a      	cmp	r2, r3
 800619a:	d200      	bcs.n	800619e <_PrintUnsigned+0xae>
        break;
 800619c:	e005      	b.n	80061aa <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800619e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	fb02 f303 	mul.w	r3, r2, r3
 80061a6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80061a8:	e7e8      	b.n	800617c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b2:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061b8:	fb02 f303 	mul.w	r3, r2, r3
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80061c2:	4a15      	ldr	r2, [pc, #84]	@ (8006218 <_PrintUnsigned+0x128>)
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	4413      	add	r3, r2
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	4619      	mov	r1, r3
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f7ff ff13 	bl	8005ff8 <_StoreChar>
    Digit /= Base;
 80061d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061da:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80061dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e3      	bne.n	80061aa <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80061e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d011      	beq.n	8006210 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80061ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00e      	beq.n	8006210 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061f2:	e006      	b.n	8006202 <_PrintUnsigned+0x112>
        FieldWidth--;
 80061f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f6:	3b01      	subs	r3, #1
 80061f8:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80061fa:	2120      	movs	r1, #32
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f7ff fefb 	bl	8005ff8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <_PrintUnsigned+0x120>
 8006208:	69fa      	ldr	r2, [r7, #28]
 800620a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620c:	429a      	cmp	r2, r3
 800620e:	d3f1      	bcc.n	80061f4 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8006210:	bf00      	nop
 8006212:	3728      	adds	r7, #40	@ 0x28
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	08007920 	.word	0x08007920

0800621c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af02      	add	r7, sp, #8
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	bfb8      	it	lt
 8006230:	425b      	neglt	r3, r3
 8006232:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006234:	2301      	movs	r3, #1
 8006236:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006238:	e007      	b.n	800624a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006242:	613b      	str	r3, [r7, #16]
    Width++;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	3301      	adds	r3, #1
 8006248:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	429a      	cmp	r2, r3
 8006250:	daf3      	bge.n	800623a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	429a      	cmp	r2, r3
 8006258:	d901      	bls.n	800625e <_PrintInt+0x42>
    Width = NumDigits;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00a      	beq.n	800627a <_PrintInt+0x5e>
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	db04      	blt.n	8006274 <_PrintInt+0x58>
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <_PrintInt+0x5e>
    FieldWidth--;
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	3b01      	subs	r3, #1
 8006278:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <_PrintInt+0x6e>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d016      	beq.n	80062b8 <_PrintInt+0x9c>
 800628a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	d111      	bne.n	80062b8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00e      	beq.n	80062b8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800629a:	e006      	b.n	80062aa <_PrintInt+0x8e>
        FieldWidth--;
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	3b01      	subs	r3, #1
 80062a0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80062a2:	2120      	movs	r1, #32
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f7ff fea7 	bl	8005ff8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <_PrintInt+0x9c>
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d3f1      	bcc.n	800629c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	da07      	bge.n	80062ce <_PrintInt+0xb2>
    v = -v;
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	425b      	negs	r3, r3
 80062c2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80062c4:	212d      	movs	r1, #45	@ 0x2d
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f7ff fe96 	bl	8005ff8 <_StoreChar>
 80062cc:	e008      	b.n	80062e0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80062d8:	212b      	movs	r1, #43	@ 0x2b
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f7ff fe8c 	bl	8005ff8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80062e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d019      	beq.n	800631e <_PrintInt+0x102>
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d114      	bne.n	800631e <_PrintInt+0x102>
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d111      	bne.n	800631e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00e      	beq.n	800631e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006300:	e006      	b.n	8006310 <_PrintInt+0xf4>
        FieldWidth--;
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	3b01      	subs	r3, #1
 8006306:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006308:	2130      	movs	r1, #48	@ 0x30
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f7ff fe74 	bl	8005ff8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <_PrintInt+0x102>
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	429a      	cmp	r2, r3
 800631c:	d3f1      	bcc.n	8006302 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800631e:	68b9      	ldr	r1, [r7, #8]
 8006320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006322:	9301      	str	r3, [sp, #4]
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f7ff fedf 	bl	80060f0 <_PrintUnsigned>
}
 8006332:	bf00      	nop
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
	...

0800633c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800633c:	b580      	push	{r7, lr}
 800633e:	b098      	sub	sp, #96	@ 0x60
 8006340:	af02      	add	r7, sp, #8
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006348:	f3ef 8311 	mrs	r3, BASEPRI
 800634c:	f04f 0120 	mov.w	r1, #32
 8006350:	f381 8811 	msr	BASEPRI, r1
 8006354:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006356:	48b7      	ldr	r0, [pc, #732]	@ (8006634 <_VPrintTarget+0x2f8>)
 8006358:	f7ff fbf4 	bl	8005b44 <_PreparePacket>
 800635c:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800635e:	4bb5      	ldr	r3, [pc, #724]	@ (8006634 <_VPrintTarget+0x2f8>)
 8006360:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8006362:	2300      	movs	r3, #0
 8006364:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006368:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	3301      	adds	r3, #1
 800636e:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3301      	adds	r3, #1
 8006380:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006382:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 81a8 	beq.w	80066dc <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 800638c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006390:	2b25      	cmp	r3, #37	@ 0x25
 8006392:	f040 8195 	bne.w	80066c0 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006396:	2300      	movs	r3, #0
 8006398:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 800639a:	2301      	movs	r3, #1
 800639c:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 80063a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063aa:	3b23      	subs	r3, #35	@ 0x23
 80063ac:	2b0d      	cmp	r3, #13
 80063ae:	d83f      	bhi.n	8006430 <_VPrintTarget+0xf4>
 80063b0:	a201      	add	r2, pc, #4	@ (adr r2, 80063b8 <_VPrintTarget+0x7c>)
 80063b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b6:	bf00      	nop
 80063b8:	08006421 	.word	0x08006421
 80063bc:	08006431 	.word	0x08006431
 80063c0:	08006431 	.word	0x08006431
 80063c4:	08006431 	.word	0x08006431
 80063c8:	08006431 	.word	0x08006431
 80063cc:	08006431 	.word	0x08006431
 80063d0:	08006431 	.word	0x08006431
 80063d4:	08006431 	.word	0x08006431
 80063d8:	08006411 	.word	0x08006411
 80063dc:	08006431 	.word	0x08006431
 80063e0:	080063f1 	.word	0x080063f1
 80063e4:	08006431 	.word	0x08006431
 80063e8:	08006431 	.word	0x08006431
 80063ec:	08006401 	.word	0x08006401
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80063f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063f2:	f043 0301 	orr.w	r3, r3, #1
 80063f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	3301      	adds	r3, #1
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	e01a      	b.n	8006436 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006400:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006402:	f043 0302 	orr.w	r3, r3, #2
 8006406:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	3301      	adds	r3, #1
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	e012      	b.n	8006436 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006410:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006412:	f043 0304 	orr.w	r3, r3, #4
 8006416:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3301      	adds	r3, #1
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	e00a      	b.n	8006436 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006420:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006422:	f043 0308 	orr.w	r3, r3, #8
 8006426:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	3301      	adds	r3, #1
 800642c:	60fb      	str	r3, [r7, #12]
 800642e:	e002      	b.n	8006436 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006430:	2300      	movs	r3, #0
 8006432:	653b      	str	r3, [r7, #80]	@ 0x50
 8006434:	bf00      	nop
        }
      } while (v);
 8006436:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1b0      	bne.n	800639e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800643c:	2300      	movs	r3, #0
 800643e:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8006448:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800644c:	2b2f      	cmp	r3, #47	@ 0x2f
 800644e:	d912      	bls.n	8006476 <_VPrintTarget+0x13a>
 8006450:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006454:	2b39      	cmp	r3, #57	@ 0x39
 8006456:	d80e      	bhi.n	8006476 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	3301      	adds	r3, #1
 800645c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800645e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	461a      	mov	r2, r3
 800646a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800646e:	4413      	add	r3, r2
 8006470:	3b30      	subs	r3, #48	@ 0x30
 8006472:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8006474:	e7e4      	b.n	8006440 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006476:	2300      	movs	r3, #0
 8006478:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8006482:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006486:	2b2e      	cmp	r3, #46	@ 0x2e
 8006488:	d11d      	bne.n	80064c6 <_VPrintTarget+0x18a>
        sFormat++;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3301      	adds	r3, #1
 800648e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8006498:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800649c:	2b2f      	cmp	r3, #47	@ 0x2f
 800649e:	d912      	bls.n	80064c6 <_VPrintTarget+0x18a>
 80064a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064a4:	2b39      	cmp	r3, #57	@ 0x39
 80064a6:	d80e      	bhi.n	80064c6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3301      	adds	r3, #1
 80064ac:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80064ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	461a      	mov	r2, r3
 80064ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064be:	4413      	add	r3, r2
 80064c0:	3b30      	subs	r3, #48	@ 0x30
 80064c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 80064c4:	e7e4      	b.n	8006490 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80064ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064d2:	2b6c      	cmp	r3, #108	@ 0x6c
 80064d4:	d003      	beq.n	80064de <_VPrintTarget+0x1a2>
 80064d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064da:	2b68      	cmp	r3, #104	@ 0x68
 80064dc:	d107      	bne.n	80064ee <_VPrintTarget+0x1b2>
          c = *sFormat;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3301      	adds	r3, #1
 80064ea:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80064ec:	e7ef      	b.n	80064ce <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80064ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064f2:	2b25      	cmp	r3, #37	@ 0x25
 80064f4:	f000 80d8 	beq.w	80066a8 <_VPrintTarget+0x36c>
 80064f8:	2b25      	cmp	r3, #37	@ 0x25
 80064fa:	f2c0 80dc 	blt.w	80066b6 <_VPrintTarget+0x37a>
 80064fe:	2b78      	cmp	r3, #120	@ 0x78
 8006500:	f300 80d9 	bgt.w	80066b6 <_VPrintTarget+0x37a>
 8006504:	2b58      	cmp	r3, #88	@ 0x58
 8006506:	f2c0 80d6 	blt.w	80066b6 <_VPrintTarget+0x37a>
 800650a:	3b58      	subs	r3, #88	@ 0x58
 800650c:	2b20      	cmp	r3, #32
 800650e:	f200 80d2 	bhi.w	80066b6 <_VPrintTarget+0x37a>
 8006512:	a201      	add	r2, pc, #4	@ (adr r2, 8006518 <_VPrintTarget+0x1dc>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	0800660f 	.word	0x0800660f
 800651c:	080066b7 	.word	0x080066b7
 8006520:	080066b7 	.word	0x080066b7
 8006524:	080066b7 	.word	0x080066b7
 8006528:	080066b7 	.word	0x080066b7
 800652c:	080066b7 	.word	0x080066b7
 8006530:	080066b7 	.word	0x080066b7
 8006534:	080066b7 	.word	0x080066b7
 8006538:	080066b7 	.word	0x080066b7
 800653c:	080066b7 	.word	0x080066b7
 8006540:	080066b7 	.word	0x080066b7
 8006544:	0800659d 	.word	0x0800659d
 8006548:	080065c3 	.word	0x080065c3
 800654c:	080066b7 	.word	0x080066b7
 8006550:	080066b7 	.word	0x080066b7
 8006554:	080066b7 	.word	0x080066b7
 8006558:	080066b7 	.word	0x080066b7
 800655c:	080066b7 	.word	0x080066b7
 8006560:	080066b7 	.word	0x080066b7
 8006564:	080066b7 	.word	0x080066b7
 8006568:	080066b7 	.word	0x080066b7
 800656c:	080066b7 	.word	0x080066b7
 8006570:	080066b7 	.word	0x080066b7
 8006574:	080066b7 	.word	0x080066b7
 8006578:	08006683 	.word	0x08006683
 800657c:	080066b7 	.word	0x080066b7
 8006580:	080066b7 	.word	0x080066b7
 8006584:	08006639 	.word	0x08006639
 8006588:	080066b7 	.word	0x080066b7
 800658c:	080065e9 	.word	0x080065e9
 8006590:	080066b7 	.word	0x080066b7
 8006594:	080066b7 	.word	0x080066b7
 8006598:	0800660f 	.word	0x0800660f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	1d19      	adds	r1, r3, #4
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6011      	str	r1, [r2, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 80065aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 80065b0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80065b4:	f107 0310 	add.w	r3, r7, #16
 80065b8:	4611      	mov	r1, r2
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff fd1c 	bl	8005ff8 <_StoreChar>
        break;
 80065c0:	e07a      	b.n	80066b8 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	1d19      	adds	r1, r3, #4
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	6011      	str	r1, [r2, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80065d0:	f107 0010 	add.w	r0, r7, #16
 80065d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065de:	220a      	movs	r2, #10
 80065e0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80065e2:	f7ff fe1b 	bl	800621c <_PrintInt>
        break;
 80065e6:	e067      	b.n	80066b8 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	1d19      	adds	r1, r3, #4
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	6011      	str	r1, [r2, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80065f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80065f8:	f107 0010 	add.w	r0, r7, #16
 80065fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065fe:	9301      	str	r3, [sp, #4]
 8006600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006606:	220a      	movs	r2, #10
 8006608:	f7ff fd72 	bl	80060f0 <_PrintUnsigned>
        break;
 800660c:	e054      	b.n	80066b8 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	1d19      	adds	r1, r3, #4
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	6011      	str	r1, [r2, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800661c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800661e:	f107 0010 	add.w	r0, r7, #16
 8006622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006624:	9301      	str	r3, [sp, #4]
 8006626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800662c:	2210      	movs	r2, #16
 800662e:	f7ff fd5f 	bl	80060f0 <_PrintUnsigned>
        break;
 8006632:	e041      	b.n	80066b8 <_VPrintTarget+0x37c>
 8006634:	2000c3c8 	.word	0x2000c3c8
      case 's':
        s = va_arg(*pParamList, const char*);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	1d19      	adds	r1, r3, #4
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6011      	str	r1, [r2, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8006646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <_VPrintTarget+0x314>
          s = "(null)";
 800664c:	4b4a      	ldr	r3, [pc, #296]	@ (8006778 <_VPrintTarget+0x43c>)
 800664e:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8006650:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8006658:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800665a:	3301      	adds	r3, #1
 800665c:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 800665e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00b      	beq.n	800667e <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8006666:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800666a:	f107 0310 	add.w	r3, r7, #16
 800666e:	4611      	mov	r1, r2
 8006670:	4618      	mov	r0, r3
 8006672:	f7ff fcc1 	bl	8005ff8 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	2b7f      	cmp	r3, #127	@ 0x7f
 800667a:	d9e9      	bls.n	8006650 <_VPrintTarget+0x314>
        break;
 800667c:	e01c      	b.n	80066b8 <_VPrintTarget+0x37c>
            break;
 800667e:	bf00      	nop
        break;
 8006680:	e01a      	b.n	80066b8 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	1d19      	adds	r1, r3, #4
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6011      	str	r1, [r2, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006690:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006692:	f107 0010 	add.w	r0, r7, #16
 8006696:	2300      	movs	r3, #0
 8006698:	9301      	str	r3, [sp, #4]
 800669a:	2308      	movs	r3, #8
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	2308      	movs	r3, #8
 80066a0:	2210      	movs	r2, #16
 80066a2:	f7ff fd25 	bl	80060f0 <_PrintUnsigned>
        break;
 80066a6:	e007      	b.n	80066b8 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80066a8:	f107 0310 	add.w	r3, r7, #16
 80066ac:	2125      	movs	r1, #37	@ 0x25
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff fca2 	bl	8005ff8 <_StoreChar>
        break;
 80066b4:	e000      	b.n	80066b8 <_VPrintTarget+0x37c>
      default:
        break;
 80066b6:	bf00      	nop
      }
      sFormat++;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	3301      	adds	r3, #1
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	e007      	b.n	80066d0 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80066c0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80066c4:	f107 0310 	add.w	r3, r7, #16
 80066c8:	4611      	mov	r1, r2
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7ff fc94 	bl	8005ff8 <_StoreChar>
    }
  } while (*sFormat);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f47f ae4d 	bne.w	8006374 <_VPrintTarget+0x38>
 80066da:	e000      	b.n	80066de <_VPrintTarget+0x3a2>
      break;
 80066dc:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d041      	beq.n	8006768 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80066e4:	6a3a      	ldr	r2, [r7, #32]
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	b2d2      	uxtb	r2, r2
 80066ea:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066f4:	e00b      	b.n	800670e <_VPrintTarget+0x3d2>
 80066f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066fc:	1c59      	adds	r1, r3, #1
 80066fe:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006700:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	701a      	strb	r2, [r3, #0]
 8006708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670a:	09db      	lsrs	r3, r3, #7
 800670c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800670e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006710:	2b7f      	cmp	r3, #127	@ 0x7f
 8006712:	d8f0      	bhi.n	80066f6 <_VPrintTarget+0x3ba>
 8006714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800671a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	701a      	strb	r2, [r3, #0]
 8006720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006722:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	637b      	str	r3, [r7, #52]	@ 0x34
 8006728:	2300      	movs	r3, #0
 800672a:	633b      	str	r3, [r7, #48]	@ 0x30
 800672c:	e00b      	b.n	8006746 <_VPrintTarget+0x40a>
 800672e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006730:	b2da      	uxtb	r2, r3
 8006732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006734:	1c59      	adds	r1, r3, #1
 8006736:	6379      	str	r1, [r7, #52]	@ 0x34
 8006738:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800673c:	b2d2      	uxtb	r2, r2
 800673e:	701a      	strb	r2, [r3, #0]
 8006740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006742:	09db      	lsrs	r3, r3, #7
 8006744:	633b      	str	r3, [r7, #48]	@ 0x30
 8006746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006748:	2b7f      	cmp	r3, #127	@ 0x7f
 800674a:	d8f0      	bhi.n	800672e <_VPrintTarget+0x3f2>
 800674c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800674e:	1c5a      	adds	r2, r3, #1
 8006750:	637a      	str	r2, [r7, #52]	@ 0x34
 8006752:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	701a      	strb	r2, [r3, #0]
 8006758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800675a:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	6979      	ldr	r1, [r7, #20]
 8006760:	221a      	movs	r2, #26
 8006762:	4618      	mov	r0, r3
 8006764:	f7ff fada 	bl	8005d1c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676a:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800676e:	bf00      	nop
 8006770:	3758      	adds	r7, #88	@ 0x58
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	080078cc 	.word	0x080078cc

0800677c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af02      	add	r7, sp, #8
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800678a:	2300      	movs	r3, #0
 800678c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006790:	4917      	ldr	r1, [pc, #92]	@ (80067f0 <SEGGER_SYSVIEW_Init+0x74>)
 8006792:	4818      	ldr	r0, [pc, #96]	@ (80067f4 <SEGGER_SYSVIEW_Init+0x78>)
 8006794:	f7ff f8d6 	bl	8005944 <SEGGER_RTT_AllocUpBuffer>
 8006798:	4603      	mov	r3, r0
 800679a:	b2da      	uxtb	r2, r3
 800679c:	4b16      	ldr	r3, [pc, #88]	@ (80067f8 <SEGGER_SYSVIEW_Init+0x7c>)
 800679e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80067a0:	4b15      	ldr	r3, [pc, #84]	@ (80067f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80067a2:	785a      	ldrb	r2, [r3, #1]
 80067a4:	4b14      	ldr	r3, [pc, #80]	@ (80067f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80067a6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80067a8:	4b13      	ldr	r3, [pc, #76]	@ (80067f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80067aa:	7e1b      	ldrb	r3, [r3, #24]
 80067ac:	4618      	mov	r0, r3
 80067ae:	2300      	movs	r3, #0
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	2308      	movs	r3, #8
 80067b4:	4a11      	ldr	r2, [pc, #68]	@ (80067fc <SEGGER_SYSVIEW_Init+0x80>)
 80067b6:	490f      	ldr	r1, [pc, #60]	@ (80067f4 <SEGGER_SYSVIEW_Init+0x78>)
 80067b8:	f7ff f948 	bl	8005a4c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80067bc:	4b0e      	ldr	r3, [pc, #56]	@ (80067f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80067be:	2200      	movs	r2, #0
 80067c0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80067c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006800 <SEGGER_SYSVIEW_Init+0x84>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a0c      	ldr	r2, [pc, #48]	@ (80067f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80067c8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80067ca:	4a0b      	ldr	r2, [pc, #44]	@ (80067f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80067d0:	4a09      	ldr	r2, [pc, #36]	@ (80067f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80067d6:	4a08      	ldr	r2, [pc, #32]	@ (80067f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80067dc:	4a06      	ldr	r2, [pc, #24]	@ (80067f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80067e2:	4b05      	ldr	r3, [pc, #20]	@ (80067f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80067e8:	bf00      	nop
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	2000bf90 	.word	0x2000bf90
 80067f4:	080078d4 	.word	0x080078d4
 80067f8:	2000c398 	.word	0x2000c398
 80067fc:	2000c390 	.word	0x2000c390
 8006800:	e0001004 	.word	0xe0001004

08006804 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800680c:	4a04      	ldr	r2, [pc, #16]	@ (8006820 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6113      	str	r3, [r2, #16]
}
 8006812:	bf00      	nop
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	2000c398 	.word	0x2000c398

08006824 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800682c:	f3ef 8311 	mrs	r3, BASEPRI
 8006830:	f04f 0120 	mov.w	r1, #32
 8006834:	f381 8811 	msr	BASEPRI, r1
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	4808      	ldr	r0, [pc, #32]	@ (800685c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800683c:	f7ff f982 	bl	8005b44 <_PreparePacket>
 8006840:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	68b9      	ldr	r1, [r7, #8]
 8006846:	68b8      	ldr	r0, [r7, #8]
 8006848:	f7ff fa68 	bl	8005d1c <_SendPacket>
  RECORD_END();
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f383 8811 	msr	BASEPRI, r3
}
 8006852:	bf00      	nop
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	2000c3c8 	.word	0x2000c3c8

08006860 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800686a:	f3ef 8311 	mrs	r3, BASEPRI
 800686e:	f04f 0120 	mov.w	r1, #32
 8006872:	f381 8811 	msr	BASEPRI, r1
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	4816      	ldr	r0, [pc, #88]	@ (80068d4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800687a:	f7ff f963 	bl	8005b44 <_PreparePacket>
 800687e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	61fb      	str	r3, [r7, #28]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	61bb      	str	r3, [r7, #24]
 800688c:	e00b      	b.n	80068a6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	b2da      	uxtb	r2, r3
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	1c59      	adds	r1, r3, #1
 8006896:	61f9      	str	r1, [r7, #28]
 8006898:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	701a      	strb	r2, [r3, #0]
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	09db      	lsrs	r3, r3, #7
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80068aa:	d8f0      	bhi.n	800688e <SEGGER_SYSVIEW_RecordU32+0x2e>
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	61fa      	str	r2, [r7, #28]
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	b2d2      	uxtb	r2, r2
 80068b6:	701a      	strb	r2, [r3, #0]
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	68f9      	ldr	r1, [r7, #12]
 80068c0:	6938      	ldr	r0, [r7, #16]
 80068c2:	f7ff fa2b 	bl	8005d1c <_SendPacket>
  RECORD_END();
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f383 8811 	msr	BASEPRI, r3
}
 80068cc:	bf00      	nop
 80068ce:	3720      	adds	r7, #32
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	2000c3c8 	.word	0x2000c3c8

080068d8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08c      	sub	sp, #48	@ 0x30
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80068e4:	f3ef 8311 	mrs	r3, BASEPRI
 80068e8:	f04f 0120 	mov.w	r1, #32
 80068ec:	f381 8811 	msr	BASEPRI, r1
 80068f0:	61fb      	str	r3, [r7, #28]
 80068f2:	4825      	ldr	r0, [pc, #148]	@ (8006988 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80068f4:	f7ff f926 	bl	8005b44 <_PreparePacket>
 80068f8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006906:	e00b      	b.n	8006920 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690a:	b2da      	uxtb	r2, r3
 800690c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800690e:	1c59      	adds	r1, r3, #1
 8006910:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006912:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	701a      	strb	r2, [r3, #0]
 800691a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800691c:	09db      	lsrs	r3, r3, #7
 800691e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006922:	2b7f      	cmp	r3, #127	@ 0x7f
 8006924:	d8f0      	bhi.n	8006908 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800692c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800692e:	b2d2      	uxtb	r2, r2
 8006930:	701a      	strb	r2, [r3, #0]
 8006932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006934:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	627b      	str	r3, [r7, #36]	@ 0x24
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	623b      	str	r3, [r7, #32]
 800693e:	e00b      	b.n	8006958 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	b2da      	uxtb	r2, r3
 8006944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006946:	1c59      	adds	r1, r3, #1
 8006948:	6279      	str	r1, [r7, #36]	@ 0x24
 800694a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	701a      	strb	r2, [r3, #0]
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	09db      	lsrs	r3, r3, #7
 8006956:	623b      	str	r3, [r7, #32]
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	2b7f      	cmp	r3, #127	@ 0x7f
 800695c:	d8f0      	bhi.n	8006940 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800695e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	627a      	str	r2, [r7, #36]	@ 0x24
 8006964:	6a3a      	ldr	r2, [r7, #32]
 8006966:	b2d2      	uxtb	r2, r2
 8006968:	701a      	strb	r2, [r3, #0]
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	6979      	ldr	r1, [r7, #20]
 8006972:	69b8      	ldr	r0, [r7, #24]
 8006974:	f7ff f9d2 	bl	8005d1c <_SendPacket>
  RECORD_END();
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	f383 8811 	msr	BASEPRI, r3
}
 800697e:	bf00      	nop
 8006980:	3730      	adds	r7, #48	@ 0x30
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	2000c3c8 	.word	0x2000c3c8

0800698c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800698c:	b580      	push	{r7, lr}
 800698e:	b08c      	sub	sp, #48	@ 0x30
 8006990:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006992:	4b58      	ldr	r3, [pc, #352]	@ (8006af4 <SEGGER_SYSVIEW_Start+0x168>)
 8006994:	2201      	movs	r2, #1
 8006996:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006998:	f3ef 8311 	mrs	r3, BASEPRI
 800699c:	f04f 0120 	mov.w	r1, #32
 80069a0:	f381 8811 	msr	BASEPRI, r1
 80069a4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80069a6:	4b53      	ldr	r3, [pc, #332]	@ (8006af4 <SEGGER_SYSVIEW_Start+0x168>)
 80069a8:	785b      	ldrb	r3, [r3, #1]
 80069aa:	220a      	movs	r2, #10
 80069ac:	4952      	ldr	r1, [pc, #328]	@ (8006af8 <SEGGER_SYSVIEW_Start+0x16c>)
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7f9 fc46 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80069ba:	200a      	movs	r0, #10
 80069bc:	f7ff ff32 	bl	8006824 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80069c0:	f3ef 8311 	mrs	r3, BASEPRI
 80069c4:	f04f 0120 	mov.w	r1, #32
 80069c8:	f381 8811 	msr	BASEPRI, r1
 80069cc:	60bb      	str	r3, [r7, #8]
 80069ce:	484b      	ldr	r0, [pc, #300]	@ (8006afc <SEGGER_SYSVIEW_Start+0x170>)
 80069d0:	f7ff f8b8 	bl	8005b44 <_PreparePacket>
 80069d4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069de:	4b45      	ldr	r3, [pc, #276]	@ (8006af4 <SEGGER_SYSVIEW_Start+0x168>)
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069e4:	e00b      	b.n	80069fe <SEGGER_SYSVIEW_Start+0x72>
 80069e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ec:	1c59      	adds	r1, r3, #1
 80069ee:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80069f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069f4:	b2d2      	uxtb	r2, r2
 80069f6:	701a      	strb	r2, [r3, #0]
 80069f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fa:	09db      	lsrs	r3, r3, #7
 80069fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a00:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a02:	d8f0      	bhi.n	80069e6 <SEGGER_SYSVIEW_Start+0x5a>
 8006a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a0c:	b2d2      	uxtb	r2, r2
 8006a0e:	701a      	strb	r2, [r3, #0]
 8006a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a12:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a18:	4b36      	ldr	r3, [pc, #216]	@ (8006af4 <SEGGER_SYSVIEW_Start+0x168>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	623b      	str	r3, [r7, #32]
 8006a1e:	e00b      	b.n	8006a38 <SEGGER_SYSVIEW_Start+0xac>
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a26:	1c59      	adds	r1, r3, #1
 8006a28:	6279      	str	r1, [r7, #36]	@ 0x24
 8006a2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a2e:	b2d2      	uxtb	r2, r2
 8006a30:	701a      	strb	r2, [r3, #0]
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	09db      	lsrs	r3, r3, #7
 8006a36:	623b      	str	r3, [r7, #32]
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a3c:	d8f0      	bhi.n	8006a20 <SEGGER_SYSVIEW_Start+0x94>
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a44:	6a3a      	ldr	r2, [r7, #32]
 8006a46:	b2d2      	uxtb	r2, r2
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	61fb      	str	r3, [r7, #28]
 8006a52:	4b28      	ldr	r3, [pc, #160]	@ (8006af4 <SEGGER_SYSVIEW_Start+0x168>)
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	61bb      	str	r3, [r7, #24]
 8006a58:	e00b      	b.n	8006a72 <SEGGER_SYSVIEW_Start+0xe6>
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	1c59      	adds	r1, r3, #1
 8006a62:	61f9      	str	r1, [r7, #28]
 8006a64:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a68:	b2d2      	uxtb	r2, r2
 8006a6a:	701a      	strb	r2, [r3, #0]
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	09db      	lsrs	r3, r3, #7
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a76:	d8f0      	bhi.n	8006a5a <SEGGER_SYSVIEW_Start+0xce>
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	61fa      	str	r2, [r7, #28]
 8006a7e:	69ba      	ldr	r2, [r7, #24]
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	701a      	strb	r2, [r3, #0]
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	613b      	str	r3, [r7, #16]
 8006a90:	e00b      	b.n	8006aaa <SEGGER_SYSVIEW_Start+0x11e>
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	1c59      	adds	r1, r3, #1
 8006a9a:	6179      	str	r1, [r7, #20]
 8006a9c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006aa0:	b2d2      	uxtb	r2, r2
 8006aa2:	701a      	strb	r2, [r3, #0]
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	09db      	lsrs	r3, r3, #7
 8006aa8:	613b      	str	r3, [r7, #16]
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	2b7f      	cmp	r3, #127	@ 0x7f
 8006aae:	d8f0      	bhi.n	8006a92 <SEGGER_SYSVIEW_Start+0x106>
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	1c5a      	adds	r2, r3, #1
 8006ab4:	617a      	str	r2, [r7, #20]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	b2d2      	uxtb	r2, r2
 8006aba:	701a      	strb	r2, [r3, #0]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006ac0:	2218      	movs	r2, #24
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7ff f929 	bl	8005d1c <_SendPacket>
      RECORD_END();
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006ad0:	4b08      	ldr	r3, [pc, #32]	@ (8006af4 <SEGGER_SYSVIEW_Start+0x168>)
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006ad8:	4b06      	ldr	r3, [pc, #24]	@ (8006af4 <SEGGER_SYSVIEW_Start+0x168>)
 8006ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006adc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006ade:	f000 f9eb 	bl	8006eb8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006ae2:	f000 f9b1 	bl	8006e48 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006ae6:	f000 fd21 	bl	800752c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006aea:	bf00      	nop
 8006aec:	3730      	adds	r7, #48	@ 0x30
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	2000c398 	.word	0x2000c398
 8006af8:	08007914 	.word	0x08007914
 8006afc:	2000c3c8 	.word	0x2000c3c8

08006b00 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b06:	f3ef 8311 	mrs	r3, BASEPRI
 8006b0a:	f04f 0120 	mov.w	r1, #32
 8006b0e:	f381 8811 	msr	BASEPRI, r1
 8006b12:	607b      	str	r3, [r7, #4]
 8006b14:	480b      	ldr	r0, [pc, #44]	@ (8006b44 <SEGGER_SYSVIEW_Stop+0x44>)
 8006b16:	f7ff f815 	bl	8005b44 <_PreparePacket>
 8006b1a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b48 <SEGGER_SYSVIEW_Stop+0x48>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d007      	beq.n	8006b34 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006b24:	220b      	movs	r2, #11
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6838      	ldr	r0, [r7, #0]
 8006b2a:	f7ff f8f7 	bl	8005d1c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006b2e:	4b06      	ldr	r3, [pc, #24]	@ (8006b48 <SEGGER_SYSVIEW_Stop+0x48>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f383 8811 	msr	BASEPRI, r3
}
 8006b3a:	bf00      	nop
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	2000c3c8 	.word	0x2000c3c8
 8006b48:	2000c398 	.word	0x2000c398

08006b4c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08c      	sub	sp, #48	@ 0x30
 8006b50:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b52:	f3ef 8311 	mrs	r3, BASEPRI
 8006b56:	f04f 0120 	mov.w	r1, #32
 8006b5a:	f381 8811 	msr	BASEPRI, r1
 8006b5e:	60fb      	str	r3, [r7, #12]
 8006b60:	4845      	ldr	r0, [pc, #276]	@ (8006c78 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006b62:	f7fe ffef 	bl	8005b44 <_PreparePacket>
 8006b66:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b70:	4b42      	ldr	r3, [pc, #264]	@ (8006c7c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b76:	e00b      	b.n	8006b90 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b7e:	1c59      	adds	r1, r3, #1
 8006b80:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006b82:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	701a      	strb	r2, [r3, #0]
 8006b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b8c:	09db      	lsrs	r3, r3, #7
 8006b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b92:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b94:	d8f0      	bhi.n	8006b78 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b9e:	b2d2      	uxtb	r2, r2
 8006ba0:	701a      	strb	r2, [r3, #0]
 8006ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006baa:	4b34      	ldr	r3, [pc, #208]	@ (8006c7c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	623b      	str	r3, [r7, #32]
 8006bb0:	e00b      	b.n	8006bca <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb8:	1c59      	adds	r1, r3, #1
 8006bba:	6279      	str	r1, [r7, #36]	@ 0x24
 8006bbc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	09db      	lsrs	r3, r3, #7
 8006bc8:	623b      	str	r3, [r7, #32]
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bce:	d8f0      	bhi.n	8006bb2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006bd6:	6a3a      	ldr	r2, [r7, #32]
 8006bd8:	b2d2      	uxtb	r2, r2
 8006bda:	701a      	strb	r2, [r3, #0]
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	61fb      	str	r3, [r7, #28]
 8006be4:	4b25      	ldr	r3, [pc, #148]	@ (8006c7c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	61bb      	str	r3, [r7, #24]
 8006bea:	e00b      	b.n	8006c04 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	1c59      	adds	r1, r3, #1
 8006bf4:	61f9      	str	r1, [r7, #28]
 8006bf6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	09db      	lsrs	r3, r3, #7
 8006c02:	61bb      	str	r3, [r7, #24]
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c08:	d8f0      	bhi.n	8006bec <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	61fa      	str	r2, [r7, #28]
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	617b      	str	r3, [r7, #20]
 8006c1e:	2300      	movs	r3, #0
 8006c20:	613b      	str	r3, [r7, #16]
 8006c22:	e00b      	b.n	8006c3c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	1c59      	adds	r1, r3, #1
 8006c2c:	6179      	str	r1, [r7, #20]
 8006c2e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	09db      	lsrs	r3, r3, #7
 8006c3a:	613b      	str	r3, [r7, #16]
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c40:	d8f0      	bhi.n	8006c24 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	617a      	str	r2, [r7, #20]
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006c52:	2218      	movs	r2, #24
 8006c54:	6879      	ldr	r1, [r7, #4]
 8006c56:	68b8      	ldr	r0, [r7, #8]
 8006c58:	f7ff f860 	bl	8005d1c <_SendPacket>
  RECORD_END();
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006c62:	4b06      	ldr	r3, [pc, #24]	@ (8006c7c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006c6a:	4b04      	ldr	r3, [pc, #16]	@ (8006c7c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6e:	4798      	blx	r3
  }
}
 8006c70:	bf00      	nop
 8006c72:	3730      	adds	r7, #48	@ 0x30
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	2000c3c8 	.word	0x2000c3c8
 8006c7c:	2000c398 	.word	0x2000c398

08006c80 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b092      	sub	sp, #72	@ 0x48
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006c88:	f3ef 8311 	mrs	r3, BASEPRI
 8006c8c:	f04f 0120 	mov.w	r1, #32
 8006c90:	f381 8811 	msr	BASEPRI, r1
 8006c94:	617b      	str	r3, [r7, #20]
 8006c96:	486a      	ldr	r0, [pc, #424]	@ (8006e40 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006c98:	f7fe ff54 	bl	8005b44 <_PreparePacket>
 8006c9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	4b66      	ldr	r3, [pc, #408]	@ (8006e44 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cb2:	e00b      	b.n	8006ccc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006cb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cba:	1c59      	adds	r1, r3, #1
 8006cbc:	6479      	str	r1, [r7, #68]	@ 0x44
 8006cbe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cc2:	b2d2      	uxtb	r2, r2
 8006cc4:	701a      	strb	r2, [r3, #0]
 8006cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cc8:	09db      	lsrs	r3, r3, #7
 8006cca:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ccc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cce:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cd0:	d8f0      	bhi.n	8006cb4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006cd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006cd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	701a      	strb	r2, [r3, #0]
 8006cde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ce0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cec:	e00b      	b.n	8006d06 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf4:	1c59      	adds	r1, r3, #1
 8006cf6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006cf8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cfc:	b2d2      	uxtb	r2, r2
 8006cfe:	701a      	strb	r2, [r3, #0]
 8006d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d02:	09db      	lsrs	r3, r3, #7
 8006d04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d08:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d0a:	d8f0      	bhi.n	8006cee <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006d12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d14:	b2d2      	uxtb	r2, r2
 8006d16:	701a      	strb	r2, [r3, #0]
 8006d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d1a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2220      	movs	r2, #32
 8006d22:	4619      	mov	r1, r3
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f7fe fedd 	bl	8005ae4 <_EncodeStr>
 8006d2a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006d2c:	2209      	movs	r2, #9
 8006d2e:	68f9      	ldr	r1, [r7, #12]
 8006d30:	6938      	ldr	r0, [r7, #16]
 8006d32:	f7fe fff3 	bl	8005d1c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	4b40      	ldr	r3, [pc, #256]	@ (8006e44 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d4a:	e00b      	b.n	8006d64 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d52:	1c59      	adds	r1, r3, #1
 8006d54:	6379      	str	r1, [r7, #52]	@ 0x34
 8006d56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d5a:	b2d2      	uxtb	r2, r2
 8006d5c:	701a      	strb	r2, [r3, #0]
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d60:	09db      	lsrs	r3, r3, #7
 8006d62:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d66:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d68:	d8f0      	bhi.n	8006d4c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d84:	e00b      	b.n	8006d9e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8c:	1c59      	adds	r1, r3, #1
 8006d8e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006d90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d94:	b2d2      	uxtb	r2, r2
 8006d96:	701a      	strb	r2, [r3, #0]
 8006d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9a:	09db      	lsrs	r3, r3, #7
 8006d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006da2:	d8f0      	bhi.n	8006d86 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da6:	1c5a      	adds	r2, r3, #1
 8006da8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006daa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006dac:	b2d2      	uxtb	r2, r2
 8006dae:	701a      	strb	r2, [r3, #0]
 8006db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	623b      	str	r3, [r7, #32]
 8006dbe:	e00b      	b.n	8006dd8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc6:	1c59      	adds	r1, r3, #1
 8006dc8:	6279      	str	r1, [r7, #36]	@ 0x24
 8006dca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dce:	b2d2      	uxtb	r2, r2
 8006dd0:	701a      	strb	r2, [r3, #0]
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	09db      	lsrs	r3, r3, #7
 8006dd6:	623b      	str	r3, [r7, #32]
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ddc:	d8f0      	bhi.n	8006dc0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006de4:	6a3a      	ldr	r2, [r7, #32]
 8006de6:	b2d2      	uxtb	r2, r2
 8006de8:	701a      	strb	r2, [r3, #0]
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	61fb      	str	r3, [r7, #28]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	61bb      	str	r3, [r7, #24]
 8006df8:	e00b      	b.n	8006e12 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	1c59      	adds	r1, r3, #1
 8006e02:	61f9      	str	r1, [r7, #28]
 8006e04:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e08:	b2d2      	uxtb	r2, r2
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	09db      	lsrs	r3, r3, #7
 8006e10:	61bb      	str	r3, [r7, #24]
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e16:	d8f0      	bhi.n	8006dfa <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	61fa      	str	r2, [r7, #28]
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	b2d2      	uxtb	r2, r2
 8006e22:	701a      	strb	r2, [r3, #0]
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006e28:	2215      	movs	r2, #21
 8006e2a:	68f9      	ldr	r1, [r7, #12]
 8006e2c:	6938      	ldr	r0, [r7, #16]
 8006e2e:	f7fe ff75 	bl	8005d1c <_SendPacket>
  RECORD_END();
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f383 8811 	msr	BASEPRI, r3
}
 8006e38:	bf00      	nop
 8006e3a:	3748      	adds	r7, #72	@ 0x48
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	2000c3c8 	.word	0x2000c3c8
 8006e44:	2000c398 	.word	0x2000c398

08006e48 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006e4c:	4b07      	ldr	r3, [pc, #28]	@ (8006e6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d008      	beq.n	8006e66 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006e54:	4b05      	ldr	r3, [pc, #20]	@ (8006e6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006e5e:	4b03      	ldr	r3, [pc, #12]	@ (8006e6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	4798      	blx	r3
  }
}
 8006e66:	bf00      	nop
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	2000c398 	.word	0x2000c398

08006e70 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e78:	f3ef 8311 	mrs	r3, BASEPRI
 8006e7c:	f04f 0120 	mov.w	r1, #32
 8006e80:	f381 8811 	msr	BASEPRI, r1
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	480b      	ldr	r0, [pc, #44]	@ (8006eb4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006e88:	f7fe fe5c 	bl	8005b44 <_PreparePacket>
 8006e8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e8e:	2280      	movs	r2, #128	@ 0x80
 8006e90:	6879      	ldr	r1, [r7, #4]
 8006e92:	6938      	ldr	r0, [r7, #16]
 8006e94:	f7fe fe26 	bl	8005ae4 <_EncodeStr>
 8006e98:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006e9a:	220e      	movs	r2, #14
 8006e9c:	68f9      	ldr	r1, [r7, #12]
 8006e9e:	6938      	ldr	r0, [r7, #16]
 8006ea0:	f7fe ff3c 	bl	8005d1c <_SendPacket>
  RECORD_END();
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f383 8811 	msr	BASEPRI, r3
}
 8006eaa:	bf00      	nop
 8006eac:	3718      	adds	r7, #24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	2000c3c8 	.word	0x2000c3c8

08006eb8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006eb8:	b590      	push	{r4, r7, lr}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006ebe:	4b15      	ldr	r3, [pc, #84]	@ (8006f14 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d01a      	beq.n	8006efc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006ec6:	4b13      	ldr	r3, [pc, #76]	@ (8006f14 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d015      	beq.n	8006efc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006ed0:	4b10      	ldr	r3, [pc, #64]	@ (8006f14 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4798      	blx	r3
 8006ed8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006edc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006ede:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ee2:	f04f 0200 	mov.w	r2, #0
 8006ee6:	f04f 0300 	mov.w	r3, #0
 8006eea:	000a      	movs	r2, r1
 8006eec:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006eee:	4613      	mov	r3, r2
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	200d      	movs	r0, #13
 8006ef6:	f7ff fcef 	bl	80068d8 <SEGGER_SYSVIEW_RecordU32x2>
 8006efa:	e006      	b.n	8006f0a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006efc:	4b06      	ldr	r3, [pc, #24]	@ (8006f18 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4619      	mov	r1, r3
 8006f02:	200c      	movs	r0, #12
 8006f04:	f7ff fcac 	bl	8006860 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006f08:	bf00      	nop
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd90      	pop	{r4, r7, pc}
 8006f12:	bf00      	nop
 8006f14:	2000c398 	.word	0x2000c398
 8006f18:	e0001004 	.word	0xe0001004

08006f1c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f22:	f3ef 8311 	mrs	r3, BASEPRI
 8006f26:	f04f 0120 	mov.w	r1, #32
 8006f2a:	f381 8811 	msr	BASEPRI, r1
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	4819      	ldr	r0, [pc, #100]	@ (8006f98 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006f32:	f7fe fe07 	bl	8005b44 <_PreparePacket>
 8006f36:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006f3c:	4b17      	ldr	r3, [pc, #92]	@ (8006f9c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f44:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	617b      	str	r3, [r7, #20]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	613b      	str	r3, [r7, #16]
 8006f4e:	e00b      	b.n	8006f68 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	1c59      	adds	r1, r3, #1
 8006f58:	6179      	str	r1, [r7, #20]
 8006f5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f5e:	b2d2      	uxtb	r2, r2
 8006f60:	701a      	strb	r2, [r3, #0]
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	09db      	lsrs	r3, r3, #7
 8006f66:	613b      	str	r3, [r7, #16]
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f6c:	d8f0      	bhi.n	8006f50 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	617a      	str	r2, [r7, #20]
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	b2d2      	uxtb	r2, r2
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006f7e:	2202      	movs	r2, #2
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	68b8      	ldr	r0, [r7, #8]
 8006f84:	f7fe feca 	bl	8005d1c <_SendPacket>
  RECORD_END();
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f383 8811 	msr	BASEPRI, r3
}
 8006f8e:	bf00      	nop
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	2000c3c8 	.word	0x2000c3c8
 8006f9c:	e000ed04 	.word	0xe000ed04

08006fa0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8006faa:	f04f 0120 	mov.w	r1, #32
 8006fae:	f381 8811 	msr	BASEPRI, r1
 8006fb2:	607b      	str	r3, [r7, #4]
 8006fb4:	4807      	ldr	r0, [pc, #28]	@ (8006fd4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006fb6:	f7fe fdc5 	bl	8005b44 <_PreparePacket>
 8006fba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006fbc:	2203      	movs	r2, #3
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6838      	ldr	r0, [r7, #0]
 8006fc2:	f7fe feab 	bl	8005d1c <_SendPacket>
  RECORD_END();
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f383 8811 	msr	BASEPRI, r3
}
 8006fcc:	bf00      	nop
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	2000c3c8 	.word	0x2000c3c8

08006fd8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006fde:	f3ef 8311 	mrs	r3, BASEPRI
 8006fe2:	f04f 0120 	mov.w	r1, #32
 8006fe6:	f381 8811 	msr	BASEPRI, r1
 8006fea:	607b      	str	r3, [r7, #4]
 8006fec:	4807      	ldr	r0, [pc, #28]	@ (800700c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006fee:	f7fe fda9 	bl	8005b44 <_PreparePacket>
 8006ff2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006ff4:	2212      	movs	r2, #18
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	6838      	ldr	r0, [r7, #0]
 8006ffa:	f7fe fe8f 	bl	8005d1c <_SendPacket>
  RECORD_END();
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f383 8811 	msr	BASEPRI, r3
}
 8007004:	bf00      	nop
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	2000c3c8 	.word	0x2000c3c8

08007010 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8007010:	b580      	push	{r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007018:	f3ef 8311 	mrs	r3, BASEPRI
 800701c:	f04f 0120 	mov.w	r1, #32
 8007020:	f381 8811 	msr	BASEPRI, r1
 8007024:	617b      	str	r3, [r7, #20]
 8007026:	4817      	ldr	r0, [pc, #92]	@ (8007084 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8007028:	f7fe fd8c 	bl	8005b44 <_PreparePacket>
 800702c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	61fb      	str	r3, [r7, #28]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	61bb      	str	r3, [r7, #24]
 800703a:	e00b      	b.n	8007054 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	b2da      	uxtb	r2, r3
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	1c59      	adds	r1, r3, #1
 8007044:	61f9      	str	r1, [r7, #28]
 8007046:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800704a:	b2d2      	uxtb	r2, r2
 800704c:	701a      	strb	r2, [r3, #0]
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	09db      	lsrs	r3, r3, #7
 8007052:	61bb      	str	r3, [r7, #24]
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	2b7f      	cmp	r3, #127	@ 0x7f
 8007058:	d8f0      	bhi.n	800703c <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	61fa      	str	r2, [r7, #28]
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	b2d2      	uxtb	r2, r2
 8007064:	701a      	strb	r2, [r3, #0]
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800706a:	221c      	movs	r2, #28
 800706c:	68f9      	ldr	r1, [r7, #12]
 800706e:	6938      	ldr	r0, [r7, #16]
 8007070:	f7fe fe54 	bl	8005d1c <_SendPacket>
  RECORD_END();
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f383 8811 	msr	BASEPRI, r3
}
 800707a:	bf00      	nop
 800707c:	3720      	adds	r7, #32
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	2000c3c8 	.word	0x2000c3c8

08007088 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8007088:	b580      	push	{r7, lr}
 800708a:	b08a      	sub	sp, #40	@ 0x28
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007092:	f3ef 8311 	mrs	r3, BASEPRI
 8007096:	f04f 0120 	mov.w	r1, #32
 800709a:	f381 8811 	msr	BASEPRI, r1
 800709e:	617b      	str	r3, [r7, #20]
 80070a0:	4824      	ldr	r0, [pc, #144]	@ (8007134 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 80070a2:	f7fe fd4f 	bl	8005b44 <_PreparePacket>
 80070a6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	623b      	str	r3, [r7, #32]
 80070b4:	e00b      	b.n	80070ce <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	1c59      	adds	r1, r3, #1
 80070be:	6279      	str	r1, [r7, #36]	@ 0x24
 80070c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070c4:	b2d2      	uxtb	r2, r2
 80070c6:	701a      	strb	r2, [r3, #0]
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	09db      	lsrs	r3, r3, #7
 80070cc:	623b      	str	r3, [r7, #32]
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80070d2:	d8f0      	bhi.n	80070b6 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 80070d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80070da:	6a3a      	ldr	r2, [r7, #32]
 80070dc:	b2d2      	uxtb	r2, r2
 80070de:	701a      	strb	r2, [r3, #0]
 80070e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	61fb      	str	r3, [r7, #28]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	61bb      	str	r3, [r7, #24]
 80070ec:	e00b      	b.n	8007106 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	1c59      	adds	r1, r3, #1
 80070f6:	61f9      	str	r1, [r7, #28]
 80070f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070fc:	b2d2      	uxtb	r2, r2
 80070fe:	701a      	strb	r2, [r3, #0]
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	09db      	lsrs	r3, r3, #7
 8007104:	61bb      	str	r3, [r7, #24]
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	2b7f      	cmp	r3, #127	@ 0x7f
 800710a:	d8f0      	bhi.n	80070ee <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	61fa      	str	r2, [r7, #28]
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	b2d2      	uxtb	r2, r2
 8007116:	701a      	strb	r2, [r3, #0]
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800711c:	221c      	movs	r2, #28
 800711e:	68f9      	ldr	r1, [r7, #12]
 8007120:	6938      	ldr	r0, [r7, #16]
 8007122:	f7fe fdfb 	bl	8005d1c <_SendPacket>
  RECORD_END();
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f383 8811 	msr	BASEPRI, r3
}
 800712c:	bf00      	nop
 800712e:	3728      	adds	r7, #40	@ 0x28
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	2000c3c8 	.word	0x2000c3c8

08007138 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800713e:	f3ef 8311 	mrs	r3, BASEPRI
 8007142:	f04f 0120 	mov.w	r1, #32
 8007146:	f381 8811 	msr	BASEPRI, r1
 800714a:	607b      	str	r3, [r7, #4]
 800714c:	4807      	ldr	r0, [pc, #28]	@ (800716c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800714e:	f7fe fcf9 	bl	8005b44 <_PreparePacket>
 8007152:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007154:	2211      	movs	r2, #17
 8007156:	6839      	ldr	r1, [r7, #0]
 8007158:	6838      	ldr	r0, [r7, #0]
 800715a:	f7fe fddf 	bl	8005d1c <_SendPacket>
  RECORD_END();
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f383 8811 	msr	BASEPRI, r3
}
 8007164:	bf00      	nop
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	2000c3c8 	.word	0x2000c3c8

08007170 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007178:	f3ef 8311 	mrs	r3, BASEPRI
 800717c:	f04f 0120 	mov.w	r1, #32
 8007180:	f381 8811 	msr	BASEPRI, r1
 8007184:	617b      	str	r3, [r7, #20]
 8007186:	4819      	ldr	r0, [pc, #100]	@ (80071ec <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007188:	f7fe fcdc 	bl	8005b44 <_PreparePacket>
 800718c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007192:	4b17      	ldr	r3, [pc, #92]	@ (80071f0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	61fb      	str	r3, [r7, #28]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	61bb      	str	r3, [r7, #24]
 80071a4:	e00b      	b.n	80071be <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	1c59      	adds	r1, r3, #1
 80071ae:	61f9      	str	r1, [r7, #28]
 80071b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071b4:	b2d2      	uxtb	r2, r2
 80071b6:	701a      	strb	r2, [r3, #0]
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	09db      	lsrs	r3, r3, #7
 80071bc:	61bb      	str	r3, [r7, #24]
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80071c2:	d8f0      	bhi.n	80071a6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	1c5a      	adds	r2, r3, #1
 80071c8:	61fa      	str	r2, [r7, #28]
 80071ca:	69ba      	ldr	r2, [r7, #24]
 80071cc:	b2d2      	uxtb	r2, r2
 80071ce:	701a      	strb	r2, [r3, #0]
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80071d4:	2208      	movs	r2, #8
 80071d6:	68f9      	ldr	r1, [r7, #12]
 80071d8:	6938      	ldr	r0, [r7, #16]
 80071da:	f7fe fd9f 	bl	8005d1c <_SendPacket>
  RECORD_END();
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f383 8811 	msr	BASEPRI, r3
}
 80071e4:	bf00      	nop
 80071e6:	3720      	adds	r7, #32
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	2000c3c8 	.word	0x2000c3c8
 80071f0:	2000c398 	.word	0x2000c398

080071f4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80071fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007200:	f04f 0120 	mov.w	r1, #32
 8007204:	f381 8811 	msr	BASEPRI, r1
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	4819      	ldr	r0, [pc, #100]	@ (8007270 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800720c:	f7fe fc9a 	bl	8005b44 <_PreparePacket>
 8007210:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007216:	4b17      	ldr	r3, [pc, #92]	@ (8007274 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	61fb      	str	r3, [r7, #28]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	61bb      	str	r3, [r7, #24]
 8007228:	e00b      	b.n	8007242 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	b2da      	uxtb	r2, r3
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	1c59      	adds	r1, r3, #1
 8007232:	61f9      	str	r1, [r7, #28]
 8007234:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007238:	b2d2      	uxtb	r2, r2
 800723a:	701a      	strb	r2, [r3, #0]
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	09db      	lsrs	r3, r3, #7
 8007240:	61bb      	str	r3, [r7, #24]
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	2b7f      	cmp	r3, #127	@ 0x7f
 8007246:	d8f0      	bhi.n	800722a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	61fa      	str	r2, [r7, #28]
 800724e:	69ba      	ldr	r2, [r7, #24]
 8007250:	b2d2      	uxtb	r2, r2
 8007252:	701a      	strb	r2, [r3, #0]
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007258:	2204      	movs	r2, #4
 800725a:	68f9      	ldr	r1, [r7, #12]
 800725c:	6938      	ldr	r0, [r7, #16]
 800725e:	f7fe fd5d 	bl	8005d1c <_SendPacket>
  RECORD_END();
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f383 8811 	msr	BASEPRI, r3
}
 8007268:	bf00      	nop
 800726a:	3720      	adds	r7, #32
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	2000c3c8 	.word	0x2000c3c8
 8007274:	2000c398 	.word	0x2000c398

08007278 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007278:	b580      	push	{r7, lr}
 800727a:	b088      	sub	sp, #32
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007280:	f3ef 8311 	mrs	r3, BASEPRI
 8007284:	f04f 0120 	mov.w	r1, #32
 8007288:	f381 8811 	msr	BASEPRI, r1
 800728c:	617b      	str	r3, [r7, #20]
 800728e:	4819      	ldr	r0, [pc, #100]	@ (80072f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007290:	f7fe fc58 	bl	8005b44 <_PreparePacket>
 8007294:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800729a:	4b17      	ldr	r3, [pc, #92]	@ (80072f8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	61fb      	str	r3, [r7, #28]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	61bb      	str	r3, [r7, #24]
 80072ac:	e00b      	b.n	80072c6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	1c59      	adds	r1, r3, #1
 80072b6:	61f9      	str	r1, [r7, #28]
 80072b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072bc:	b2d2      	uxtb	r2, r2
 80072be:	701a      	strb	r2, [r3, #0]
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	09db      	lsrs	r3, r3, #7
 80072c4:	61bb      	str	r3, [r7, #24]
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80072ca:	d8f0      	bhi.n	80072ae <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	61fa      	str	r2, [r7, #28]
 80072d2:	69ba      	ldr	r2, [r7, #24]
 80072d4:	b2d2      	uxtb	r2, r2
 80072d6:	701a      	strb	r2, [r3, #0]
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80072dc:	2206      	movs	r2, #6
 80072de:	68f9      	ldr	r1, [r7, #12]
 80072e0:	6938      	ldr	r0, [r7, #16]
 80072e2:	f7fe fd1b 	bl	8005d1c <_SendPacket>
  RECORD_END();
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f383 8811 	msr	BASEPRI, r3
}
 80072ec:	bf00      	nop
 80072ee:	3720      	adds	r7, #32
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	2000c3c8 	.word	0x2000c3c8
 80072f8:	2000c398 	.word	0x2000c398

080072fc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08a      	sub	sp, #40	@ 0x28
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007306:	f3ef 8311 	mrs	r3, BASEPRI
 800730a:	f04f 0120 	mov.w	r1, #32
 800730e:	f381 8811 	msr	BASEPRI, r1
 8007312:	617b      	str	r3, [r7, #20]
 8007314:	4827      	ldr	r0, [pc, #156]	@ (80073b4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007316:	f7fe fc15 	bl	8005b44 <_PreparePacket>
 800731a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007320:	4b25      	ldr	r3, [pc, #148]	@ (80073b8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	627b      	str	r3, [r7, #36]	@ 0x24
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	623b      	str	r3, [r7, #32]
 8007332:	e00b      	b.n	800734c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	b2da      	uxtb	r2, r3
 8007338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733a:	1c59      	adds	r1, r3, #1
 800733c:	6279      	str	r1, [r7, #36]	@ 0x24
 800733e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007342:	b2d2      	uxtb	r2, r2
 8007344:	701a      	strb	r2, [r3, #0]
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	09db      	lsrs	r3, r3, #7
 800734a:	623b      	str	r3, [r7, #32]
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007350:	d8f0      	bhi.n	8007334 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	627a      	str	r2, [r7, #36]	@ 0x24
 8007358:	6a3a      	ldr	r2, [r7, #32]
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007360:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	61fb      	str	r3, [r7, #28]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	61bb      	str	r3, [r7, #24]
 800736a:	e00b      	b.n	8007384 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	b2da      	uxtb	r2, r3
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	1c59      	adds	r1, r3, #1
 8007374:	61f9      	str	r1, [r7, #28]
 8007376:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800737a:	b2d2      	uxtb	r2, r2
 800737c:	701a      	strb	r2, [r3, #0]
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	09db      	lsrs	r3, r3, #7
 8007382:	61bb      	str	r3, [r7, #24]
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	2b7f      	cmp	r3, #127	@ 0x7f
 8007388:	d8f0      	bhi.n	800736c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	61fa      	str	r2, [r7, #28]
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	701a      	strb	r2, [r3, #0]
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800739a:	2207      	movs	r2, #7
 800739c:	68f9      	ldr	r1, [r7, #12]
 800739e:	6938      	ldr	r0, [r7, #16]
 80073a0:	f7fe fcbc 	bl	8005d1c <_SendPacket>
  RECORD_END();
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f383 8811 	msr	BASEPRI, r3
}
 80073aa:	bf00      	nop
 80073ac:	3728      	adds	r7, #40	@ 0x28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	2000c3c8 	.word	0x2000c3c8
 80073b8:	2000c398 	.word	0x2000c398

080073bc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80073c4:	4b04      	ldr	r3, [pc, #16]	@ (80073d8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	1ad3      	subs	r3, r2, r3
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	2000c398 	.word	0x2000c398

080073dc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80073dc:	b580      	push	{r7, lr}
 80073de:	b08c      	sub	sp, #48	@ 0x30
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	4603      	mov	r3, r0
 80073e4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80073e6:	4b40      	ldr	r3, [pc, #256]	@ (80074e8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d077      	beq.n	80074de <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80073ee:	4b3e      	ldr	r3, [pc, #248]	@ (80074e8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80073f4:	2300      	movs	r3, #0
 80073f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073f8:	e008      	b.n	800740c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80073fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007402:	2b00      	cmp	r3, #0
 8007404:	d007      	beq.n	8007416 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007408:	3301      	adds	r3, #1
 800740a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800740c:	79fb      	ldrb	r3, [r7, #7]
 800740e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007410:	429a      	cmp	r2, r3
 8007412:	d3f2      	bcc.n	80073fa <SEGGER_SYSVIEW_SendModule+0x1e>
 8007414:	e000      	b.n	8007418 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007416:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800741a:	2b00      	cmp	r3, #0
 800741c:	d055      	beq.n	80074ca <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800741e:	f3ef 8311 	mrs	r3, BASEPRI
 8007422:	f04f 0120 	mov.w	r1, #32
 8007426:	f381 8811 	msr	BASEPRI, r1
 800742a:	617b      	str	r3, [r7, #20]
 800742c:	482f      	ldr	r0, [pc, #188]	@ (80074ec <SEGGER_SYSVIEW_SendModule+0x110>)
 800742e:	f7fe fb89 	bl	8005b44 <_PreparePacket>
 8007432:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	627b      	str	r3, [r7, #36]	@ 0x24
 800743c:	79fb      	ldrb	r3, [r7, #7]
 800743e:	623b      	str	r3, [r7, #32]
 8007440:	e00b      	b.n	800745a <SEGGER_SYSVIEW_SendModule+0x7e>
 8007442:	6a3b      	ldr	r3, [r7, #32]
 8007444:	b2da      	uxtb	r2, r3
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	1c59      	adds	r1, r3, #1
 800744a:	6279      	str	r1, [r7, #36]	@ 0x24
 800744c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007450:	b2d2      	uxtb	r2, r2
 8007452:	701a      	strb	r2, [r3, #0]
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	09db      	lsrs	r3, r3, #7
 8007458:	623b      	str	r3, [r7, #32]
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	2b7f      	cmp	r3, #127	@ 0x7f
 800745e:	d8f0      	bhi.n	8007442 <SEGGER_SYSVIEW_SendModule+0x66>
 8007460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007462:	1c5a      	adds	r2, r3, #1
 8007464:	627a      	str	r2, [r7, #36]	@ 0x24
 8007466:	6a3a      	ldr	r2, [r7, #32]
 8007468:	b2d2      	uxtb	r2, r2
 800746a:	701a      	strb	r2, [r3, #0]
 800746c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	61fb      	str	r3, [r7, #28]
 8007474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	61bb      	str	r3, [r7, #24]
 800747a:	e00b      	b.n	8007494 <SEGGER_SYSVIEW_SendModule+0xb8>
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	b2da      	uxtb	r2, r3
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	1c59      	adds	r1, r3, #1
 8007484:	61f9      	str	r1, [r7, #28]
 8007486:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800748a:	b2d2      	uxtb	r2, r2
 800748c:	701a      	strb	r2, [r3, #0]
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	09db      	lsrs	r3, r3, #7
 8007492:	61bb      	str	r3, [r7, #24]
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	2b7f      	cmp	r3, #127	@ 0x7f
 8007498:	d8f0      	bhi.n	800747c <SEGGER_SYSVIEW_SendModule+0xa0>
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	61fa      	str	r2, [r7, #28]
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	b2d2      	uxtb	r2, r2
 80074a4:	701a      	strb	r2, [r3, #0]
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80074aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2280      	movs	r2, #128	@ 0x80
 80074b0:	4619      	mov	r1, r3
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f7fe fb16 	bl	8005ae4 <_EncodeStr>
 80074b8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80074ba:	2216      	movs	r2, #22
 80074bc:	68f9      	ldr	r1, [r7, #12]
 80074be:	6938      	ldr	r0, [r7, #16]
 80074c0:	f7fe fc2c 	bl	8005d1c <_SendPacket>
      RECORD_END();
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80074ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d006      	beq.n	80074de <SEGGER_SYSVIEW_SendModule+0x102>
 80074d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80074d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	4798      	blx	r3
    }
  }
}
 80074de:	bf00      	nop
 80074e0:	3730      	adds	r7, #48	@ 0x30
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	2000c3c0 	.word	0x2000c3c0
 80074ec:	2000c3c8 	.word	0x2000c3c8

080074f0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80074f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007528 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00f      	beq.n	800751e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80074fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007528 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1f2      	bne.n	8007504 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800751e:	bf00      	nop
 8007520:	3708      	adds	r7, #8
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	2000c3c0 	.word	0x2000c3c0

0800752c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007532:	f3ef 8311 	mrs	r3, BASEPRI
 8007536:	f04f 0120 	mov.w	r1, #32
 800753a:	f381 8811 	msr	BASEPRI, r1
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	4817      	ldr	r0, [pc, #92]	@ (80075a0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007542:	f7fe faff 	bl	8005b44 <_PreparePacket>
 8007546:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	617b      	str	r3, [r7, #20]
 8007550:	4b14      	ldr	r3, [pc, #80]	@ (80075a4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	613b      	str	r3, [r7, #16]
 8007556:	e00b      	b.n	8007570 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	b2da      	uxtb	r2, r3
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	1c59      	adds	r1, r3, #1
 8007560:	6179      	str	r1, [r7, #20]
 8007562:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007566:	b2d2      	uxtb	r2, r2
 8007568:	701a      	strb	r2, [r3, #0]
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	09db      	lsrs	r3, r3, #7
 800756e:	613b      	str	r3, [r7, #16]
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	2b7f      	cmp	r3, #127	@ 0x7f
 8007574:	d8f0      	bhi.n	8007558 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	617a      	str	r2, [r7, #20]
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	b2d2      	uxtb	r2, r2
 8007580:	701a      	strb	r2, [r3, #0]
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007586:	221b      	movs	r2, #27
 8007588:	6879      	ldr	r1, [r7, #4]
 800758a:	68b8      	ldr	r0, [r7, #8]
 800758c:	f7fe fbc6 	bl	8005d1c <_SendPacket>
  RECORD_END();
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f383 8811 	msr	BASEPRI, r3
}
 8007596:	bf00      	nop
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	2000c3c8 	.word	0x2000c3c8
 80075a4:	2000c3c4 	.word	0x2000c3c4

080075a8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80075a8:	b40f      	push	{r0, r1, r2, r3}
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b082      	sub	sp, #8
 80075ae:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80075b0:	f107 0314 	add.w	r3, r7, #20
 80075b4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80075b6:	1d3b      	adds	r3, r7, #4
 80075b8:	461a      	mov	r2, r3
 80075ba:	2100      	movs	r1, #0
 80075bc:	6938      	ldr	r0, [r7, #16]
 80075be:	f7fe febd 	bl	800633c <_VPrintTarget>
  va_end(ParamList);
}
 80075c2:	bf00      	nop
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075cc:	b004      	add	sp, #16
 80075ce:	4770      	bx	lr

080075d0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b08a      	sub	sp, #40	@ 0x28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80075d8:	f3ef 8311 	mrs	r3, BASEPRI
 80075dc:	f04f 0120 	mov.w	r1, #32
 80075e0:	f381 8811 	msr	BASEPRI, r1
 80075e4:	617b      	str	r3, [r7, #20]
 80075e6:	4827      	ldr	r0, [pc, #156]	@ (8007684 <SEGGER_SYSVIEW_Warn+0xb4>)
 80075e8:	f7fe faac 	bl	8005b44 <_PreparePacket>
 80075ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80075ee:	2280      	movs	r2, #128	@ 0x80
 80075f0:	6879      	ldr	r1, [r7, #4]
 80075f2:	6938      	ldr	r0, [r7, #16]
 80075f4:	f7fe fa76 	bl	8005ae4 <_EncodeStr>
 80075f8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80075fe:	2301      	movs	r3, #1
 8007600:	623b      	str	r3, [r7, #32]
 8007602:	e00b      	b.n	800761c <SEGGER_SYSVIEW_Warn+0x4c>
 8007604:	6a3b      	ldr	r3, [r7, #32]
 8007606:	b2da      	uxtb	r2, r3
 8007608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760a:	1c59      	adds	r1, r3, #1
 800760c:	6279      	str	r1, [r7, #36]	@ 0x24
 800760e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007612:	b2d2      	uxtb	r2, r2
 8007614:	701a      	strb	r2, [r3, #0]
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	09db      	lsrs	r3, r3, #7
 800761a:	623b      	str	r3, [r7, #32]
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007620:	d8f0      	bhi.n	8007604 <SEGGER_SYSVIEW_Warn+0x34>
 8007622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	627a      	str	r2, [r7, #36]	@ 0x24
 8007628:	6a3a      	ldr	r2, [r7, #32]
 800762a:	b2d2      	uxtb	r2, r2
 800762c:	701a      	strb	r2, [r3, #0]
 800762e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007630:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	61fb      	str	r3, [r7, #28]
 8007636:	2300      	movs	r3, #0
 8007638:	61bb      	str	r3, [r7, #24]
 800763a:	e00b      	b.n	8007654 <SEGGER_SYSVIEW_Warn+0x84>
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	b2da      	uxtb	r2, r3
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	1c59      	adds	r1, r3, #1
 8007644:	61f9      	str	r1, [r7, #28]
 8007646:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800764a:	b2d2      	uxtb	r2, r2
 800764c:	701a      	strb	r2, [r3, #0]
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	09db      	lsrs	r3, r3, #7
 8007652:	61bb      	str	r3, [r7, #24]
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	2b7f      	cmp	r3, #127	@ 0x7f
 8007658:	d8f0      	bhi.n	800763c <SEGGER_SYSVIEW_Warn+0x6c>
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	61fa      	str	r2, [r7, #28]
 8007660:	69ba      	ldr	r2, [r7, #24]
 8007662:	b2d2      	uxtb	r2, r2
 8007664:	701a      	strb	r2, [r3, #0]
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800766a:	221a      	movs	r2, #26
 800766c:	68f9      	ldr	r1, [r7, #12]
 800766e:	6938      	ldr	r0, [r7, #16]
 8007670:	f7fe fb54 	bl	8005d1c <_SendPacket>
  RECORD_END();
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f383 8811 	msr	BASEPRI, r3
}
 800767a:	bf00      	nop
 800767c:	3728      	adds	r7, #40	@ 0x28
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	2000c3c8 	.word	0x2000c3c8

08007688 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800768c:	4b13      	ldr	r3, [pc, #76]	@ (80076dc <SEGGER_SYSVIEW_IsStarted+0x54>)
 800768e:	7e1b      	ldrb	r3, [r3, #24]
 8007690:	4619      	mov	r1, r3
 8007692:	4a13      	ldr	r2, [pc, #76]	@ (80076e0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007694:	460b      	mov	r3, r1
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	440b      	add	r3, r1
 800769a:	00db      	lsls	r3, r3, #3
 800769c:	4413      	add	r3, r2
 800769e:	336c      	adds	r3, #108	@ 0x6c
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	4b0e      	ldr	r3, [pc, #56]	@ (80076dc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076a4:	7e1b      	ldrb	r3, [r3, #24]
 80076a6:	4618      	mov	r0, r3
 80076a8:	490d      	ldr	r1, [pc, #52]	@ (80076e0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80076aa:	4603      	mov	r3, r0
 80076ac:	005b      	lsls	r3, r3, #1
 80076ae:	4403      	add	r3, r0
 80076b0:	00db      	lsls	r3, r3, #3
 80076b2:	440b      	add	r3, r1
 80076b4:	3370      	adds	r3, #112	@ 0x70
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d00b      	beq.n	80076d4 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80076bc:	4b07      	ldr	r3, [pc, #28]	@ (80076dc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076be:	789b      	ldrb	r3, [r3, #2]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d107      	bne.n	80076d4 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80076c4:	4b05      	ldr	r3, [pc, #20]	@ (80076dc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076c6:	2201      	movs	r2, #1
 80076c8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80076ca:	f7fe fa47 	bl	8005b5c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80076ce:	4b03      	ldr	r3, [pc, #12]	@ (80076dc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80076d4:	4b01      	ldr	r3, [pc, #4]	@ (80076dc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	2000c398 	.word	0x2000c398
 80076e0:	2000bad8 	.word	0x2000bad8

080076e4 <memcmp>:
 80076e4:	b510      	push	{r4, lr}
 80076e6:	3901      	subs	r1, #1
 80076e8:	4402      	add	r2, r0
 80076ea:	4290      	cmp	r0, r2
 80076ec:	d101      	bne.n	80076f2 <memcmp+0xe>
 80076ee:	2000      	movs	r0, #0
 80076f0:	e005      	b.n	80076fe <memcmp+0x1a>
 80076f2:	7803      	ldrb	r3, [r0, #0]
 80076f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80076f8:	42a3      	cmp	r3, r4
 80076fa:	d001      	beq.n	8007700 <memcmp+0x1c>
 80076fc:	1b18      	subs	r0, r3, r4
 80076fe:	bd10      	pop	{r4, pc}
 8007700:	3001      	adds	r0, #1
 8007702:	e7f2      	b.n	80076ea <memcmp+0x6>

08007704 <memset>:
 8007704:	4402      	add	r2, r0
 8007706:	4603      	mov	r3, r0
 8007708:	4293      	cmp	r3, r2
 800770a:	d100      	bne.n	800770e <memset+0xa>
 800770c:	4770      	bx	lr
 800770e:	f803 1b01 	strb.w	r1, [r3], #1
 8007712:	e7f9      	b.n	8007708 <memset+0x4>

08007714 <__libc_init_array>:
 8007714:	b570      	push	{r4, r5, r6, lr}
 8007716:	4d0d      	ldr	r5, [pc, #52]	@ (800774c <__libc_init_array+0x38>)
 8007718:	4c0d      	ldr	r4, [pc, #52]	@ (8007750 <__libc_init_array+0x3c>)
 800771a:	1b64      	subs	r4, r4, r5
 800771c:	10a4      	asrs	r4, r4, #2
 800771e:	2600      	movs	r6, #0
 8007720:	42a6      	cmp	r6, r4
 8007722:	d109      	bne.n	8007738 <__libc_init_array+0x24>
 8007724:	4d0b      	ldr	r5, [pc, #44]	@ (8007754 <__libc_init_array+0x40>)
 8007726:	4c0c      	ldr	r4, [pc, #48]	@ (8007758 <__libc_init_array+0x44>)
 8007728:	f000 f826 	bl	8007778 <_init>
 800772c:	1b64      	subs	r4, r4, r5
 800772e:	10a4      	asrs	r4, r4, #2
 8007730:	2600      	movs	r6, #0
 8007732:	42a6      	cmp	r6, r4
 8007734:	d105      	bne.n	8007742 <__libc_init_array+0x2e>
 8007736:	bd70      	pop	{r4, r5, r6, pc}
 8007738:	f855 3b04 	ldr.w	r3, [r5], #4
 800773c:	4798      	blx	r3
 800773e:	3601      	adds	r6, #1
 8007740:	e7ee      	b.n	8007720 <__libc_init_array+0xc>
 8007742:	f855 3b04 	ldr.w	r3, [r5], #4
 8007746:	4798      	blx	r3
 8007748:	3601      	adds	r6, #1
 800774a:	e7f2      	b.n	8007732 <__libc_init_array+0x1e>
 800774c:	08007938 	.word	0x08007938
 8007750:	08007938 	.word	0x08007938
 8007754:	08007938 	.word	0x08007938
 8007758:	0800793c 	.word	0x0800793c

0800775c <memcpy>:
 800775c:	440a      	add	r2, r1
 800775e:	4291      	cmp	r1, r2
 8007760:	f100 33ff 	add.w	r3, r0, #4294967295
 8007764:	d100      	bne.n	8007768 <memcpy+0xc>
 8007766:	4770      	bx	lr
 8007768:	b510      	push	{r4, lr}
 800776a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800776e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007772:	4291      	cmp	r1, r2
 8007774:	d1f9      	bne.n	800776a <memcpy+0xe>
 8007776:	bd10      	pop	{r4, pc}

08007778 <_init>:
 8007778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777a:	bf00      	nop
 800777c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800777e:	bc08      	pop	{r3}
 8007780:	469e      	mov	lr, r3
 8007782:	4770      	bx	lr

08007784 <_fini>:
 8007784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007786:	bf00      	nop
 8007788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778a:	bc08      	pop	{r3}
 800778c:	469e      	mov	lr, r3
 800778e:	4770      	bx	lr
